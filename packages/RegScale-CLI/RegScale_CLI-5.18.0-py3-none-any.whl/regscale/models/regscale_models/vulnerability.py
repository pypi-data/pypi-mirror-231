from typing import Optional
from urllib.parse import urljoin

from pydantic import BaseModel

from regscale.core.app.api import Api
from regscale.core.app.application import Application


class Vulnerability(BaseModel):
    id: Optional[int]
    scanId: Optional[str]
    dns: str
    ipAddress: str
    mitigated: bool = False
    operatingSystem: Optional[str]
    port: int
    protocol: Optional[str]
    severity: str
    plugInName: Optional[str]
    plugInId: int
    cve: Optional[str]
    vprScore: float = 0
    exploitAvailable: bool = False
    cvssv3BaseScore: float = 0
    title: str
    description: Optional[str]
    plugInText: Optional[str]
    createdById: str
    dateCreated: str
    tenantsId: int = 0
    daysOpen: int = 0
    firstSeen: str
    lastSeen: str
    parentId: int
    parentModule: str
    dateLastUpdated: str
    isPublic: bool = True
    lastUpdatedById: str

    @staticmethod
    def post_vulnerability(vulnerability: "Vulnerability") -> dict:
        """Post a vulnerability to the API
        :param vulnerability: The vulnerability to be posted
        """
        app = Application()
        api = Api(app)
        api_url = urljoin(app.config.get("domain"), "/api/vulnerability")
        payload = vulnerability.dict()
        response = api.post(url=api_url, json=payload)
        return response.json() if response.ok else response.raise_for_status()
