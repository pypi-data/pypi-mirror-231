# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 1.41.4
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator
from synctera_client_v1.models.event_type_explicit import EventTypeExplicit

class EventListEvent(BaseModel):
    """
    Webhook event object
    """
    event_resource: Optional[StrictStr] = Field(None, description="Json string of object associated with the event. For example, if your event is ACCOUNT.CREATED, You can refer to Acccount to parse the account event to obtain the ID, status etc. ")
    event_resource_changed_fields: Optional[StrictStr] = Field(None, description="Json string of object associated with the event related to a resource change. This only contains those fields that have value changed on the event, and the field values are prior to the resource change event. ")
    event_time: Optional[datetime] = Field(None, description="Timestamp of the current event raised")
    id: Optional[StrictStr] = Field(None, description="Unique event ID of the webhook request. Use event endpoints to get more event summary data")
    metadata: Optional[Dict[str, Any]] = Field(None, description="Metadata that stored in the webhook subscription")
    status: Optional[StrictStr] = Field(None, description="Current event status. Failing event will keep retry until it is purged.")
    type: Optional[EventTypeExplicit] = None
    url: Optional[constr(strict=True, max_length=1024)] = Field(None, description="URL that the current event will be sent to")
    webhook_id: Optional[StrictStr] = Field(None, description="Webhook the current event belongs to")
    __properties = ["event_resource", "event_resource_changed_fields", "event_time", "id", "metadata", "status", "type", "url", "webhook_id"]

    @validator('status')
    def status_validate_enum(cls, v):
        if v is None:
            return v
        if v not in ('FAILED', 'RETRYING', 'RUNNING', 'SUCCESS'):
            raise ValueError("must be one of enum values ('FAILED', 'RETRYING', 'RUNNING', 'SUCCESS')")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EventListEvent:
        """Create an instance of EventListEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EventListEvent:
        """Create an instance of EventListEvent from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return EventListEvent.parse_obj(obj)

        _obj = EventListEvent.parse_obj({
            "event_resource": obj.get("event_resource"),
            "event_resource_changed_fields": obj.get("event_resource_changed_fields"),
            "event_time": obj.get("event_time"),
            "id": obj.get("id"),
            "metadata": obj.get("metadata"),
            "status": obj.get("status"),
            "type": obj.get("type"),
            "url": obj.get("url"),
            "webhook_id": obj.get("webhook_id")
        })
        return _obj

