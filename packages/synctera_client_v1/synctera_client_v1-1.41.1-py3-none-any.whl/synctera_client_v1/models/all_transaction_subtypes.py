# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 1.41.1
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from synctera_client_v1.models.ach_transaction_subtypes import AchTransactionSubtypes
from synctera_client_v1.models.card_transaction_subtypes import CardTransactionSubtypes
from synctera_client_v1.models.cash_transaction_subtypes import CashTransactionSubtypes
from synctera_client_v1.models.check_transaction_subtypes import CheckTransactionSubtypes
from synctera_client_v1.models.external_card_transaction_subtypes import ExternalCardTransactionSubtypes
from synctera_client_v1.models.internal_transfer_transaction_subtypes import InternalTransferTransactionSubtypes
from synctera_client_v1.models.wire_transaction_subtypes import WireTransactionSubtypes
from typing import Any, List
from pydantic import StrictStr, Field

ALLTRANSACTIONSUBTYPES_ANY_OF_SCHEMAS = ["AchTransactionSubtypes", "CardTransactionSubtypes", "CashTransactionSubtypes", "CheckTransactionSubtypes", "ExternalCardTransactionSubtypes", "InternalTransferTransactionSubtypes", "WireTransactionSubtypes"]

class AllTransactionSubtypes(BaseModel):
    """
    The set of all possible transaction subtypes
    """

    # data type: ExternalCardTransactionSubtypes
    anyof_schema_1_validator: Optional[ExternalCardTransactionSubtypes] = None
    # data type: WireTransactionSubtypes
    anyof_schema_2_validator: Optional[WireTransactionSubtypes] = None
    # data type: CardTransactionSubtypes
    anyof_schema_3_validator: Optional[CardTransactionSubtypes] = None
    # data type: CheckTransactionSubtypes
    anyof_schema_4_validator: Optional[CheckTransactionSubtypes] = None
    # data type: InternalTransferTransactionSubtypes
    anyof_schema_5_validator: Optional[InternalTransferTransactionSubtypes] = None
    # data type: CashTransactionSubtypes
    anyof_schema_6_validator: Optional[CashTransactionSubtypes] = None
    # data type: AchTransactionSubtypes
    anyof_schema_7_validator: Optional[AchTransactionSubtypes] = None
    actual_instance: Any
    any_of_schemas: List[str] = Field(ALLTRANSACTIONSUBTYPES_ANY_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = AllTransactionSubtypes.construct()
        error_messages = []
        # validate data type: ExternalCardTransactionSubtypes
        if not isinstance(v, ExternalCardTransactionSubtypes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ExternalCardTransactionSubtypes`")
        else:
            return v

        # validate data type: WireTransactionSubtypes
        if not isinstance(v, WireTransactionSubtypes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WireTransactionSubtypes`")
        else:
            return v

        # validate data type: CardTransactionSubtypes
        if not isinstance(v, CardTransactionSubtypes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CardTransactionSubtypes`")
        else:
            return v

        # validate data type: CheckTransactionSubtypes
        if not isinstance(v, CheckTransactionSubtypes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CheckTransactionSubtypes`")
        else:
            return v

        # validate data type: InternalTransferTransactionSubtypes
        if not isinstance(v, InternalTransferTransactionSubtypes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InternalTransferTransactionSubtypes`")
        else:
            return v

        # validate data type: CashTransactionSubtypes
        if not isinstance(v, CashTransactionSubtypes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CashTransactionSubtypes`")
        else:
            return v

        # validate data type: AchTransactionSubtypes
        if not isinstance(v, AchTransactionSubtypes):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AchTransactionSubtypes`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in AllTransactionSubtypes with anyOf schemas: AchTransactionSubtypes, CardTransactionSubtypes, CashTransactionSubtypes, CheckTransactionSubtypes, ExternalCardTransactionSubtypes, InternalTransferTransactionSubtypes, WireTransactionSubtypes. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> AllTransactionSubtypes:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> AllTransactionSubtypes:
        """Returns the object represented by the json string"""
        instance = AllTransactionSubtypes.construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[ExternalCardTransactionSubtypes] = None
        try:
            instance.actual_instance = ExternalCardTransactionSubtypes.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[WireTransactionSubtypes] = None
        try:
            instance.actual_instance = WireTransactionSubtypes.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[CardTransactionSubtypes] = None
        try:
            instance.actual_instance = CardTransactionSubtypes.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[CheckTransactionSubtypes] = None
        try:
            instance.actual_instance = CheckTransactionSubtypes.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[InternalTransferTransactionSubtypes] = None
        try:
            instance.actual_instance = InternalTransferTransactionSubtypes.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[CashTransactionSubtypes] = None
        try:
            instance.actual_instance = CashTransactionSubtypes.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_7_validator: Optional[AchTransactionSubtypes] = None
        try:
            instance.actual_instance = AchTransactionSubtypes.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into AllTransactionSubtypes with anyOf schemas: AchTransactionSubtypes, CardTransactionSubtypes, CashTransactionSubtypes, CheckTransactionSubtypes, ExternalCardTransactionSubtypes, InternalTransferTransactionSubtypes, WireTransactionSubtypes. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_dict()
        else:
            return json.dumps(self.actual_instance)

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

