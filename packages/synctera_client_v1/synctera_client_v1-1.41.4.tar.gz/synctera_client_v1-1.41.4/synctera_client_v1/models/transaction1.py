# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 1.41.4
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from synctera_client_v1.models.ach_transaction import AchTransaction
from synctera_client_v1.models.card_transaction import CardTransaction
from synctera_client_v1.models.cash_transaction import CashTransaction
from synctera_client_v1.models.check_transaction import CheckTransaction
from synctera_client_v1.models.external_card_transaction import ExternalCardTransaction
from synctera_client_v1.models.internal_transfer_transaction import InternalTransferTransaction
from synctera_client_v1.models.wire_transaction import WireTransaction
from typing import Any, List
from pydantic import StrictStr, Field

TRANSACTION1_ONE_OF_SCHEMAS = ["AchTransaction", "CardTransaction", "CashTransaction", "CheckTransaction", "ExternalCardTransaction", "InternalTransferTransaction", "WireTransaction"]

class Transaction1(BaseModel):
    """
    Transaction1
    """
    # data type: CardTransaction
    oneof_schema_1_validator: Optional[CardTransaction] = None
    # data type: ExternalCardTransaction
    oneof_schema_2_validator: Optional[ExternalCardTransaction] = None
    # data type: CheckTransaction
    oneof_schema_3_validator: Optional[CheckTransaction] = None
    # data type: WireTransaction
    oneof_schema_4_validator: Optional[WireTransaction] = None
    # data type: CashTransaction
    oneof_schema_5_validator: Optional[CashTransaction] = None
    # data type: AchTransaction
    oneof_schema_6_validator: Optional[AchTransaction] = None
    # data type: InternalTransferTransaction
    oneof_schema_7_validator: Optional[InternalTransferTransaction] = None
    actual_instance: Any
    one_of_schemas: List[str] = Field(TRANSACTION1_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    discriminator_value_class_map = {
    }

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = Transaction1.construct()
        error_messages = []
        match = 0
        # validate data type: CardTransaction
        if not isinstance(v, CardTransaction):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CardTransaction`")
        else:
            match += 1
        # validate data type: ExternalCardTransaction
        if not isinstance(v, ExternalCardTransaction):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ExternalCardTransaction`")
        else:
            match += 1
        # validate data type: CheckTransaction
        if not isinstance(v, CheckTransaction):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CheckTransaction`")
        else:
            match += 1
        # validate data type: WireTransaction
        if not isinstance(v, WireTransaction):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WireTransaction`")
        else:
            match += 1
        # validate data type: CashTransaction
        if not isinstance(v, CashTransaction):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CashTransaction`")
        else:
            match += 1
        # validate data type: AchTransaction
        if not isinstance(v, AchTransaction):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AchTransaction`")
        else:
            match += 1
        # validate data type: InternalTransferTransaction
        if not isinstance(v, InternalTransferTransaction):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InternalTransferTransaction`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in Transaction1 with oneOf schemas: AchTransaction, CardTransaction, CashTransaction, CheckTransaction, ExternalCardTransaction, InternalTransferTransaction, WireTransaction. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in Transaction1 with oneOf schemas: AchTransaction, CardTransaction, CashTransaction, CheckTransaction, ExternalCardTransaction, InternalTransferTransaction, WireTransaction. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Transaction1:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Transaction1:
        """Returns the object represented by the json string"""
        instance = Transaction1.construct()
        error_messages = []
        match = 0

        # deserialize data into CardTransaction
        try:
            instance.actual_instance = CardTransaction.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ExternalCardTransaction
        try:
            instance.actual_instance = ExternalCardTransaction.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CheckTransaction
        try:
            instance.actual_instance = CheckTransaction.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WireTransaction
        try:
            instance.actual_instance = WireTransaction.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CashTransaction
        try:
            instance.actual_instance = CashTransaction.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AchTransaction
        try:
            instance.actual_instance = AchTransaction.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into InternalTransferTransaction
        try:
            instance.actual_instance = InternalTransferTransaction.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into Transaction1 with oneOf schemas: AchTransaction, CardTransaction, CashTransaction, CheckTransaction, ExternalCardTransaction, InternalTransferTransaction, WireTransaction. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into Transaction1 with oneOf schemas: AchTransaction, CardTransaction, CashTransaction, CheckTransaction, ExternalCardTransaction, InternalTransferTransaction, WireTransaction. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

