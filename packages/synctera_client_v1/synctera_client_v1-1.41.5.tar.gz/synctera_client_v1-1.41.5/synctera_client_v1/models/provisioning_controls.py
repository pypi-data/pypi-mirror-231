# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 1.41.5
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from synctera_client_v1.models.in_app_provisioning import InAppProvisioning
from synctera_client_v1.models.manual_entry import ManualEntry
from synctera_client_v1.models.wallet_provider_card_on_file import WalletProviderCardOnFile

class ProvisioningControls(BaseModel):
    """
    ProvisioningControls
    """
    in_app_provisioning: Optional[InAppProvisioning] = None
    manual_entry: Optional[ManualEntry] = None
    wallet_provider_card_on_file: Optional[WalletProviderCardOnFile] = None
    __properties = ["in_app_provisioning", "manual_entry", "wallet_provider_card_on_file"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProvisioningControls:
        """Create an instance of ProvisioningControls from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of in_app_provisioning
        if self.in_app_provisioning:
            _dict['in_app_provisioning'] = self.in_app_provisioning.to_dict()
        # override the default output from pydantic by calling `to_dict()` of manual_entry
        if self.manual_entry:
            _dict['manual_entry'] = self.manual_entry.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wallet_provider_card_on_file
        if self.wallet_provider_card_on_file:
            _dict['wallet_provider_card_on_file'] = self.wallet_provider_card_on_file.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProvisioningControls:
        """Create an instance of ProvisioningControls from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ProvisioningControls.parse_obj(obj)

        _obj = ProvisioningControls.parse_obj({
            "in_app_provisioning": InAppProvisioning.from_dict(obj.get("in_app_provisioning")) if obj.get("in_app_provisioning") is not None else None,
            "manual_entry": ManualEntry.from_dict(obj.get("manual_entry")) if obj.get("manual_entry") is not None else None,
            "wallet_provider_card_on_file": WalletProviderCardOnFile.from_dict(obj.get("wallet_provider_card_on_file")) if obj.get("wallet_provider_card_on_file") is not None else None
        })
        return _obj

