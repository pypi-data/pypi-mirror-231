# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 1.41.3
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import List, Optional
from pydantic import BaseModel, StrictStr, conlist

class Business(BaseModel):
    """
    Business
    """
    creation_time: Optional[datetime] = None
    ein: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    entity_name: Optional[StrictStr] = None
    formation_date: Optional[date] = None
    formation_state: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    last_updated_time: Optional[datetime] = None
    phone_number: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    structure: Optional[StrictStr] = None
    trade_names: Optional[conlist(StrictStr)] = None
    verification_last_run: Optional[datetime] = None
    verification_status: Optional[StrictStr] = None
    __properties = ["creation_time", "ein", "email", "entity_name", "formation_date", "formation_state", "id", "last_updated_time", "phone_number", "status", "structure", "trade_names", "verification_last_run", "verification_status"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Business:
        """Create an instance of Business from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Business:
        """Create an instance of Business from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Business.parse_obj(obj)

        _obj = Business.parse_obj({
            "creation_time": obj.get("creation_time"),
            "ein": obj.get("ein"),
            "email": obj.get("email"),
            "entity_name": obj.get("entity_name"),
            "formation_date": obj.get("formation_date"),
            "formation_state": obj.get("formation_state"),
            "id": obj.get("id"),
            "last_updated_time": obj.get("last_updated_time"),
            "phone_number": obj.get("phone_number"),
            "status": obj.get("status"),
            "structure": obj.get("structure"),
            "trade_names": obj.get("trade_names"),
            "verification_last_run": obj.get("verification_last_run"),
            "verification_status": obj.get("verification_status")
        })
        return _obj

