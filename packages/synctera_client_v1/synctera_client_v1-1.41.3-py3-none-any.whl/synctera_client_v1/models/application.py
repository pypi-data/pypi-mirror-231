# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 1.41.3
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from synctera_client_v1.models.credit_application import CreditApplication
from synctera_client_v1.models.restricted_application import RestrictedApplication
from typing import Any, List
from pydantic import StrictStr, Field

APPLICATION_ONE_OF_SCHEMAS = ["CreditApplication", "RestrictedApplication"]

class Application(BaseModel):
    """
    Application
    """
    # data type: CreditApplication
    oneof_schema_1_validator: Optional[CreditApplication] = None
    # data type: RestrictedApplication
    oneof_schema_2_validator: Optional[RestrictedApplication] = None
    actual_instance: Any
    one_of_schemas: List[str] = Field(APPLICATION_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    discriminator_value_class_map = {
    }

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = Application.construct()
        error_messages = []
        match = 0
        # validate data type: CreditApplication
        if not isinstance(v, CreditApplication):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CreditApplication`")
        else:
            match += 1
        # validate data type: RestrictedApplication
        if not isinstance(v, RestrictedApplication):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RestrictedApplication`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in Application with oneOf schemas: CreditApplication, RestrictedApplication. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in Application with oneOf schemas: CreditApplication, RestrictedApplication. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Application:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Application:
        """Returns the object represented by the json string"""
        instance = Application.construct()
        error_messages = []
        match = 0

        # deserialize data into CreditApplication
        try:
            instance.actual_instance = CreditApplication.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RestrictedApplication
        try:
            instance.actual_instance = RestrictedApplication.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into Application with oneOf schemas: CreditApplication, RestrictedApplication. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into Application with oneOf schemas: CreditApplication, RestrictedApplication. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())

