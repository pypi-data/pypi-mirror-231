# coding: utf-8

"""
    Synctera API

    <h2>Let's build something great.</h2><p>Welcome to the official reference documentation for Synctera APIs. Our APIs are the best way to automate your company's banking needs and are designed to be easy to understand and implement.</p><p>We're continuously growing this library and what you see here is just the start, but if you need something specific or have a question, <a class='text-blue-600' href='https://synctera.com/contact' target='_blank' rel='noreferrer'>contact us</a>.</p>  # noqa: E501

    The version of the OpenAPI document: 1.41.2
    Contact: dev@swadesh.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator
from synctera_client_v1.models.address import Address

class Merchant(BaseModel):
    """
    Merchant descriptor information that will be shown on statement and transaction details. If not provided, FinTech information will be used.
    """
    address: Address = Field(...)
    email: Optional[StrictStr] = Field(None, description="Merchant's email")
    name: StrictStr = Field(..., description="Merchant's name")
    phone_number: Optional[constr(strict=True)] = Field(None, description="Merchant's phone number with country code in E.164 format. Must have a valid country code. Area code and local phone number are not validated.")
    __properties = ["address", "email", "name", "phone_number"]

    @validator('phone_number')
    def phone_number_validate_regular_expression(cls, v):
        if v is None:
            return v
        if not re.match(r"^\+[1-9]\d{1,14}$", v):
            raise ValueError(r"must validate the regular expression /^\+[1-9]\d{1,14}$/")
        return v

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Merchant:
        """Create an instance of Merchant from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Merchant:
        """Create an instance of Merchant from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Merchant.parse_obj(obj)

        _obj = Merchant.parse_obj({
            "address": Address.from_dict(obj.get("address")) if obj.get("address") is not None else None,
            "email": obj.get("email"),
            "name": obj.get("name"),
            "phone_number": obj.get("phone_number")
        })
        return _obj

