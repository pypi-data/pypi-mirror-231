# ==== build ====
[build-system]
requires = [ "setuptools>=41", "wheel", "setuptools-git-versioning<2", ]
build-backend = "setuptools.build_meta"

# ==== project ====
[project]
name = "airflow-pydantic-dags"
authors = [
    {name = "Alex Seeholzer", email = "seeholzer@gmail.com"},
]
description = "DAG subclass that parses run params (and config) using pydantic, and makes it available as a pydantic object in Tasks"
readme = "README.md"
requires-python = ">=3.9"
keywords = ["airflow", "pydantic"]
license = {text = "BSD-3-Clause"}
classifiers = [
    "Framework :: Apache Airflow",
    "Programming Language :: Python :: 3",
]
dynamic = ["version", "dependencies"]

[tool.setuptools-git-versioning]
enabled = true

# ==== setuptools ====
[tool.setuptools.dynamic]
dependencies = {file = ["requirements.txt"]}

# ==== pytest ====
[tool.pytest.ini_options]
minversion = "6.0"
env = [
]
pythonpath = [
  "src"
]

# ==== Coverage ====
[tool.coverage.run]
include = ["airflow_pydantic_dags/**"]
omit = ["tests/*", "./*.py"]
plugins = []


# ==== black ====
[tool.black]
line-length = 119
target-version = ['py311']


# ==== isort ====
[tool.isort]
profile = "black"
line_length = 119
known_first_party = [
    "airflow_pydantic_dags",
    "test"
]
skip = []
skip_glob = []


# ==== mypy ====
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
plugins = [
]

# ==== PyLint ====
[tool.pylint.MASTER]
load-plugins = [
]

[tool.pylint.FORMAT]
max-line-length = 119

[tool.pylint."MESSAGES CONTROL"]
disable = [
]

[tool.pylint.DESIGN]
max-parents = 13

[tool.pylint.TYPECHECK]
generated-members = [
    "REQUEST",
    "acl_users",
    "aq_parent",
    "[a-zA-Z]+_set{1,2}",
    "save",
    "delete",
]


# ==== TOX ====
[tool.tox]
legacy_tox_ini = """
    [tox]
    envlist = py39, py310, py311

    [gh-actions]
    python =
        3.9: py39
        3.10: py310
        3.11: py311

    [testenv]
    commands_pre =
        airflow version
        airflow db reset -y -v
        python -c 'import pydantic; print(pydantic.__version__)'
    commands = pytest {posargs} -rs --junitxml=junit.xml --cov=./ --cov-config=.coveragerc  --cov-report=html --cov-report=xml:cov.xml --cov-report=term -s -vv
    deps =
        -rrequirements-test.txt
        -rrequirements.txt
"""
