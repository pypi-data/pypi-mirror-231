# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FilescanningSecurityReportImportResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filename': 'str',
        'extra': 'list[str]',
        'unexpected': 'list[str]',
        'unsafe': 'list[str]'
    }

    attribute_map = {
        'filename': 'filename',
        'extra': 'extra',
        'unexpected': 'unexpected',
        'unsafe': 'unsafe'
    }

    def __init__(self, filename=None, extra=None, unexpected=None, unsafe=None):  # noqa: E501
        """FilescanningSecurityReportImportResult - a model defined in Swagger"""  # noqa: E501
        self._filename = None
        self._extra = None
        self._unexpected = None
        self._unsafe = None
        self.discriminator = None
        if filename is not None:
            self.filename = filename
        if extra is not None:
            self.extra = extra
        if unexpected is not None:
            self.unexpected = unexpected
        if unsafe is not None:
            self.unsafe = unsafe

    @property
    def filename(self):
        """Gets the filename of this FilescanningSecurityReportImportResult.  # noqa: E501


        :return: The filename of this FilescanningSecurityReportImportResult.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this FilescanningSecurityReportImportResult.


        :param filename: The filename of this FilescanningSecurityReportImportResult.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def extra(self):
        """Gets the extra of this FilescanningSecurityReportImportResult.  # noqa: E501


        :return: The extra of this FilescanningSecurityReportImportResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._extra

    @extra.setter
    def extra(self, extra):
        """Sets the extra of this FilescanningSecurityReportImportResult.


        :param extra: The extra of this FilescanningSecurityReportImportResult.  # noqa: E501
        :type: list[str]
        """

        self._extra = extra

    @property
    def unexpected(self):
        """Gets the unexpected of this FilescanningSecurityReportImportResult.  # noqa: E501


        :return: The unexpected of this FilescanningSecurityReportImportResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._unexpected

    @unexpected.setter
    def unexpected(self, unexpected):
        """Sets the unexpected of this FilescanningSecurityReportImportResult.


        :param unexpected: The unexpected of this FilescanningSecurityReportImportResult.  # noqa: E501
        :type: list[str]
        """

        self._unexpected = unexpected

    @property
    def unsafe(self):
        """Gets the unsafe of this FilescanningSecurityReportImportResult.  # noqa: E501


        :return: The unsafe of this FilescanningSecurityReportImportResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._unsafe

    @unsafe.setter
    def unsafe(self, unsafe):
        """Sets the unsafe of this FilescanningSecurityReportImportResult.


        :param unsafe: The unsafe of this FilescanningSecurityReportImportResult.  # noqa: E501
        :type: list[str]
        """

        self._unsafe = unsafe

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilescanningSecurityReportImportResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilescanningSecurityReportImportResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
