# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeFirewall(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'stress_test_run_id': 'str',
        'project_id': 'str',
        'batch_metadata': 'RimeBatchMetadata',
        'web_app_url': 'RimeSafeURL',
        'run_ct_schedule': 'bool',
        'cli_config': 'RimeCLIConfig',
        'firewall_rules': 'RimeFirewallRules',
        'data_location_info': 'RimeDataLocation',
        'managed_image': 'RimeManagedImageReference',
        'typed_cli_config': 'CliconfigTypedCLIConfig',
        'reference_set_source': 'RimeReferenceSetSource',
        'ram_request_megabytes': 'str',
        'cpu_request_millicores': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'stress_test_run_id': 'stressTestRunId',
        'project_id': 'projectId',
        'batch_metadata': 'batchMetadata',
        'web_app_url': 'webAppUrl',
        'run_ct_schedule': 'runCtSchedule',
        'cli_config': 'cliConfig',
        'firewall_rules': 'firewallRules',
        'data_location_info': 'dataLocationInfo',
        'managed_image': 'managedImage',
        'typed_cli_config': 'typedCliConfig',
        'reference_set_source': 'referenceSetSource',
        'ram_request_megabytes': 'ramRequestMegabytes',
        'cpu_request_millicores': 'cpuRequestMillicores'
    }

    def __init__(self, id=None, name=None, stress_test_run_id=None, project_id=None, batch_metadata=None, web_app_url=None, run_ct_schedule=None, cli_config=None, firewall_rules=None, data_location_info=None, managed_image=None, typed_cli_config=None, reference_set_source=None, ram_request_megabytes=None, cpu_request_millicores=None):  # noqa: E501
        """RimeFirewall - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._stress_test_run_id = None
        self._project_id = None
        self._batch_metadata = None
        self._web_app_url = None
        self._run_ct_schedule = None
        self._cli_config = None
        self._firewall_rules = None
        self._data_location_info = None
        self._managed_image = None
        self._typed_cli_config = None
        self._reference_set_source = None
        self._ram_request_megabytes = None
        self._cpu_request_millicores = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if stress_test_run_id is not None:
            self.stress_test_run_id = stress_test_run_id
        if project_id is not None:
            self.project_id = project_id
        if batch_metadata is not None:
            self.batch_metadata = batch_metadata
        if web_app_url is not None:
            self.web_app_url = web_app_url
        if run_ct_schedule is not None:
            self.run_ct_schedule = run_ct_schedule
        if cli_config is not None:
            self.cli_config = cli_config
        if firewall_rules is not None:
            self.firewall_rules = firewall_rules
        if data_location_info is not None:
            self.data_location_info = data_location_info
        if managed_image is not None:
            self.managed_image = managed_image
        if typed_cli_config is not None:
            self.typed_cli_config = typed_cli_config
        if reference_set_source is not None:
            self.reference_set_source = reference_set_source
        if ram_request_megabytes is not None:
            self.ram_request_megabytes = ram_request_megabytes
        if cpu_request_millicores is not None:
            self.cpu_request_millicores = cpu_request_millicores

    @property
    def id(self):
        """Gets the id of this RimeFirewall.  # noqa: E501

        The semantic ID of FW. May be set if user wants to specify UUIDv4. This UUIDv4 can be generated by the client or the server for creation. We make it optional so that server can tell if user supplied the UUID, or one should be generated from server-side.  # noqa: E501

        :return: The id of this RimeFirewall.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RimeFirewall.

        The semantic ID of FW. May be set if user wants to specify UUIDv4. This UUIDv4 can be generated by the client or the server for creation. We make it optional so that server can tell if user supplied the UUID, or one should be generated from server-side.  # noqa: E501

        :param id: The id of this RimeFirewall.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RimeFirewall.  # noqa: E501


        :return: The name of this RimeFirewall.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RimeFirewall.


        :param name: The name of this RimeFirewall.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def stress_test_run_id(self):
        """Gets the stress_test_run_id of this RimeFirewall.  # noqa: E501


        :return: The stress_test_run_id of this RimeFirewall.  # noqa: E501
        :rtype: str
        """
        return self._stress_test_run_id

    @stress_test_run_id.setter
    def stress_test_run_id(self, stress_test_run_id):
        """Sets the stress_test_run_id of this RimeFirewall.


        :param stress_test_run_id: The stress_test_run_id of this RimeFirewall.  # noqa: E501
        :type: str
        """

        self._stress_test_run_id = stress_test_run_id

    @property
    def project_id(self):
        """Gets the project_id of this RimeFirewall.  # noqa: E501


        :return: The project_id of this RimeFirewall.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this RimeFirewall.


        :param project_id: The project_id of this RimeFirewall.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def batch_metadata(self):
        """Gets the batch_metadata of this RimeFirewall.  # noqa: E501


        :return: The batch_metadata of this RimeFirewall.  # noqa: E501
        :rtype: RimeBatchMetadata
        """
        return self._batch_metadata

    @batch_metadata.setter
    def batch_metadata(self, batch_metadata):
        """Sets the batch_metadata of this RimeFirewall.


        :param batch_metadata: The batch_metadata of this RimeFirewall.  # noqa: E501
        :type: RimeBatchMetadata
        """

        self._batch_metadata = batch_metadata

    @property
    def web_app_url(self):
        """Gets the web_app_url of this RimeFirewall.  # noqa: E501


        :return: The web_app_url of this RimeFirewall.  # noqa: E501
        :rtype: RimeSafeURL
        """
        return self._web_app_url

    @web_app_url.setter
    def web_app_url(self, web_app_url):
        """Sets the web_app_url of this RimeFirewall.


        :param web_app_url: The web_app_url of this RimeFirewall.  # noqa: E501
        :type: RimeSafeURL
        """

        self._web_app_url = web_app_url

    @property
    def run_ct_schedule(self):
        """Gets the run_ct_schedule of this RimeFirewall.  # noqa: E501

        If false, don't run CTSchedule.  # noqa: E501

        :return: The run_ct_schedule of this RimeFirewall.  # noqa: E501
        :rtype: bool
        """
        return self._run_ct_schedule

    @run_ct_schedule.setter
    def run_ct_schedule(self, run_ct_schedule):
        """Sets the run_ct_schedule of this RimeFirewall.

        If false, don't run CTSchedule.  # noqa: E501

        :param run_ct_schedule: The run_ct_schedule of this RimeFirewall.  # noqa: E501
        :type: bool
        """

        self._run_ct_schedule = run_ct_schedule

    @property
    def cli_config(self):
        """Gets the cli_config of this RimeFirewall.  # noqa: E501


        :return: The cli_config of this RimeFirewall.  # noqa: E501
        :rtype: RimeCLIConfig
        """
        return self._cli_config

    @cli_config.setter
    def cli_config(self, cli_config):
        """Sets the cli_config of this RimeFirewall.


        :param cli_config: The cli_config of this RimeFirewall.  # noqa: E501
        :type: RimeCLIConfig
        """

        self._cli_config = cli_config

    @property
    def firewall_rules(self):
        """Gets the firewall_rules of this RimeFirewall.  # noqa: E501


        :return: The firewall_rules of this RimeFirewall.  # noqa: E501
        :rtype: RimeFirewallRules
        """
        return self._firewall_rules

    @firewall_rules.setter
    def firewall_rules(self, firewall_rules):
        """Sets the firewall_rules of this RimeFirewall.


        :param firewall_rules: The firewall_rules of this RimeFirewall.  # noqa: E501
        :type: RimeFirewallRules
        """

        self._firewall_rules = firewall_rules

    @property
    def data_location_info(self):
        """Gets the data_location_info of this RimeFirewall.  # noqa: E501


        :return: The data_location_info of this RimeFirewall.  # noqa: E501
        :rtype: RimeDataLocation
        """
        return self._data_location_info

    @data_location_info.setter
    def data_location_info(self, data_location_info):
        """Sets the data_location_info of this RimeFirewall.


        :param data_location_info: The data_location_info of this RimeFirewall.  # noqa: E501
        :type: RimeDataLocation
        """

        self._data_location_info = data_location_info

    @property
    def managed_image(self):
        """Gets the managed_image of this RimeFirewall.  # noqa: E501


        :return: The managed_image of this RimeFirewall.  # noqa: E501
        :rtype: RimeManagedImageReference
        """
        return self._managed_image

    @managed_image.setter
    def managed_image(self, managed_image):
        """Sets the managed_image of this RimeFirewall.


        :param managed_image: The managed_image of this RimeFirewall.  # noqa: E501
        :type: RimeManagedImageReference
        """

        self._managed_image = managed_image

    @property
    def typed_cli_config(self):
        """Gets the typed_cli_config of this RimeFirewall.  # noqa: E501


        :return: The typed_cli_config of this RimeFirewall.  # noqa: E501
        :rtype: CliconfigTypedCLIConfig
        """
        return self._typed_cli_config

    @typed_cli_config.setter
    def typed_cli_config(self, typed_cli_config):
        """Sets the typed_cli_config of this RimeFirewall.


        :param typed_cli_config: The typed_cli_config of this RimeFirewall.  # noqa: E501
        :type: CliconfigTypedCLIConfig
        """

        self._typed_cli_config = typed_cli_config

    @property
    def reference_set_source(self):
        """Gets the reference_set_source of this RimeFirewall.  # noqa: E501


        :return: The reference_set_source of this RimeFirewall.  # noqa: E501
        :rtype: RimeReferenceSetSource
        """
        return self._reference_set_source

    @reference_set_source.setter
    def reference_set_source(self, reference_set_source):
        """Sets the reference_set_source of this RimeFirewall.


        :param reference_set_source: The reference_set_source of this RimeFirewall.  # noqa: E501
        :type: RimeReferenceSetSource
        """

        self._reference_set_source = reference_set_source

    @property
    def ram_request_megabytes(self):
        """Gets the ram_request_megabytes of this RimeFirewall.  # noqa: E501

        Specifies the amount of memory to request in Scheduled CT.  # noqa: E501

        :return: The ram_request_megabytes of this RimeFirewall.  # noqa: E501
        :rtype: str
        """
        return self._ram_request_megabytes

    @ram_request_megabytes.setter
    def ram_request_megabytes(self, ram_request_megabytes):
        """Sets the ram_request_megabytes of this RimeFirewall.

        Specifies the amount of memory to request in Scheduled CT.  # noqa: E501

        :param ram_request_megabytes: The ram_request_megabytes of this RimeFirewall.  # noqa: E501
        :type: str
        """

        self._ram_request_megabytes = ram_request_megabytes

    @property
    def cpu_request_millicores(self):
        """Gets the cpu_request_millicores of this RimeFirewall.  # noqa: E501

        Specifies the number of CPU cores to request in Scheduled CT.  # noqa: E501

        :return: The cpu_request_millicores of this RimeFirewall.  # noqa: E501
        :rtype: str
        """
        return self._cpu_request_millicores

    @cpu_request_millicores.setter
    def cpu_request_millicores(self, cpu_request_millicores):
        """Sets the cpu_request_millicores of this RimeFirewall.

        Specifies the number of CPU cores to request in Scheduled CT.  # noqa: E501

        :param cpu_request_millicores: The cpu_request_millicores of this RimeFirewall.  # noqa: E501
        :type: str
        """

        self._cpu_request_millicores = cpu_request_millicores

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeFirewall, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeFirewall):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
