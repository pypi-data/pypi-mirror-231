# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeTestResults(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'num_tests': 'str',
        'num_pass': 'str',
        'num_warning': 'str',
        'num_fail': 'str',
        'num_skip': 'str'
    }

    attribute_map = {
        'num_tests': 'numTests',
        'num_pass': 'numPass',
        'num_warning': 'numWarning',
        'num_fail': 'numFail',
        'num_skip': 'numSkip'
    }

    def __init__(self, num_tests=None, num_pass=None, num_warning=None, num_fail=None, num_skip=None):  # noqa: E501
        """RimeTestResults - a model defined in Swagger"""  # noqa: E501
        self._num_tests = None
        self._num_pass = None
        self._num_warning = None
        self._num_fail = None
        self._num_skip = None
        self.discriminator = None
        if num_tests is not None:
            self.num_tests = num_tests
        if num_pass is not None:
            self.num_pass = num_pass
        if num_warning is not None:
            self.num_warning = num_warning
        if num_fail is not None:
            self.num_fail = num_fail
        if num_skip is not None:
            self.num_skip = num_skip

    @property
    def num_tests(self):
        """Gets the num_tests of this RimeTestResults.  # noqa: E501


        :return: The num_tests of this RimeTestResults.  # noqa: E501
        :rtype: str
        """
        return self._num_tests

    @num_tests.setter
    def num_tests(self, num_tests):
        """Sets the num_tests of this RimeTestResults.


        :param num_tests: The num_tests of this RimeTestResults.  # noqa: E501
        :type: str
        """

        self._num_tests = num_tests

    @property
    def num_pass(self):
        """Gets the num_pass of this RimeTestResults.  # noqa: E501


        :return: The num_pass of this RimeTestResults.  # noqa: E501
        :rtype: str
        """
        return self._num_pass

    @num_pass.setter
    def num_pass(self, num_pass):
        """Sets the num_pass of this RimeTestResults.


        :param num_pass: The num_pass of this RimeTestResults.  # noqa: E501
        :type: str
        """

        self._num_pass = num_pass

    @property
    def num_warning(self):
        """Gets the num_warning of this RimeTestResults.  # noqa: E501


        :return: The num_warning of this RimeTestResults.  # noqa: E501
        :rtype: str
        """
        return self._num_warning

    @num_warning.setter
    def num_warning(self, num_warning):
        """Sets the num_warning of this RimeTestResults.


        :param num_warning: The num_warning of this RimeTestResults.  # noqa: E501
        :type: str
        """

        self._num_warning = num_warning

    @property
    def num_fail(self):
        """Gets the num_fail of this RimeTestResults.  # noqa: E501


        :return: The num_fail of this RimeTestResults.  # noqa: E501
        :rtype: str
        """
        return self._num_fail

    @num_fail.setter
    def num_fail(self, num_fail):
        """Sets the num_fail of this RimeTestResults.


        :param num_fail: The num_fail of this RimeTestResults.  # noqa: E501
        :type: str
        """

        self._num_fail = num_fail

    @property
    def num_skip(self):
        """Gets the num_skip of this RimeTestResults.  # noqa: E501


        :return: The num_skip of this RimeTestResults.  # noqa: E501
        :rtype: str
        """
        return self._num_skip

    @num_skip.setter
    def num_skip(self, num_skip):
        """Sets the num_skip of this RimeTestResults.


        :param num_skip: The num_skip of this RimeTestResults.  # noqa: E501
        :type: str
        """

        self._num_skip = num_skip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeTestResults, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeTestResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
