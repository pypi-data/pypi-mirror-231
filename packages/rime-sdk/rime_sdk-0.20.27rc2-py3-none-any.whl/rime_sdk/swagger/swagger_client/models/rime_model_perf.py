# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeModelPerf(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reference_null': 'bool',
        'reference_value': 'float',
        'evaluation_null': 'bool',
        'evaluation_value': 'float',
        'subset_severity': 'str',
        'subset_pass_rate': 'str'
    }

    attribute_map = {
        'reference_null': 'referenceNull',
        'reference_value': 'referenceValue',
        'evaluation_null': 'evaluationNull',
        'evaluation_value': 'evaluationValue',
        'subset_severity': 'subsetSeverity',
        'subset_pass_rate': 'subsetPassRate'
    }

    def __init__(self, reference_null=None, reference_value=None, evaluation_null=None, evaluation_value=None, subset_severity=None, subset_pass_rate=None):  # noqa: E501
        """RimeModelPerf - a model defined in Swagger"""  # noqa: E501
        self._reference_null = None
        self._reference_value = None
        self._evaluation_null = None
        self._evaluation_value = None
        self._subset_severity = None
        self._subset_pass_rate = None
        self.discriminator = None
        if reference_null is not None:
            self.reference_null = reference_null
        if reference_value is not None:
            self.reference_value = reference_value
        if evaluation_null is not None:
            self.evaluation_null = evaluation_null
        if evaluation_value is not None:
            self.evaluation_value = evaluation_value
        if subset_severity is not None:
            self.subset_severity = subset_severity
        if subset_pass_rate is not None:
            self.subset_pass_rate = subset_pass_rate

    @property
    def reference_null(self):
        """Gets the reference_null of this RimeModelPerf.  # noqa: E501


        :return: The reference_null of this RimeModelPerf.  # noqa: E501
        :rtype: bool
        """
        return self._reference_null

    @reference_null.setter
    def reference_null(self, reference_null):
        """Sets the reference_null of this RimeModelPerf.


        :param reference_null: The reference_null of this RimeModelPerf.  # noqa: E501
        :type: bool
        """

        self._reference_null = reference_null

    @property
    def reference_value(self):
        """Gets the reference_value of this RimeModelPerf.  # noqa: E501


        :return: The reference_value of this RimeModelPerf.  # noqa: E501
        :rtype: float
        """
        return self._reference_value

    @reference_value.setter
    def reference_value(self, reference_value):
        """Sets the reference_value of this RimeModelPerf.


        :param reference_value: The reference_value of this RimeModelPerf.  # noqa: E501
        :type: float
        """

        self._reference_value = reference_value

    @property
    def evaluation_null(self):
        """Gets the evaluation_null of this RimeModelPerf.  # noqa: E501


        :return: The evaluation_null of this RimeModelPerf.  # noqa: E501
        :rtype: bool
        """
        return self._evaluation_null

    @evaluation_null.setter
    def evaluation_null(self, evaluation_null):
        """Sets the evaluation_null of this RimeModelPerf.


        :param evaluation_null: The evaluation_null of this RimeModelPerf.  # noqa: E501
        :type: bool
        """

        self._evaluation_null = evaluation_null

    @property
    def evaluation_value(self):
        """Gets the evaluation_value of this RimeModelPerf.  # noqa: E501


        :return: The evaluation_value of this RimeModelPerf.  # noqa: E501
        :rtype: float
        """
        return self._evaluation_value

    @evaluation_value.setter
    def evaluation_value(self, evaluation_value):
        """Sets the evaluation_value of this RimeModelPerf.


        :param evaluation_value: The evaluation_value of this RimeModelPerf.  # noqa: E501
        :type: float
        """

        self._evaluation_value = evaluation_value

    @property
    def subset_severity(self):
        """Gets the subset_severity of this RimeModelPerf.  # noqa: E501


        :return: The subset_severity of this RimeModelPerf.  # noqa: E501
        :rtype: str
        """
        return self._subset_severity

    @subset_severity.setter
    def subset_severity(self, subset_severity):
        """Sets the subset_severity of this RimeModelPerf.


        :param subset_severity: The subset_severity of this RimeModelPerf.  # noqa: E501
        :type: str
        """

        self._subset_severity = subset_severity

    @property
    def subset_pass_rate(self):
        """Gets the subset_pass_rate of this RimeModelPerf.  # noqa: E501


        :return: The subset_pass_rate of this RimeModelPerf.  # noqa: E501
        :rtype: str
        """
        return self._subset_pass_rate

    @subset_pass_rate.setter
    def subset_pass_rate(self, subset_pass_rate):
        """Sets the subset_pass_rate of this RimeModelPerf.


        :param subset_pass_rate: The subset_pass_rate of this RimeModelPerf.  # noqa: E501
        :type: str
        """

        self._subset_pass_rate = subset_pass_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeModelPerf, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeModelPerf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
