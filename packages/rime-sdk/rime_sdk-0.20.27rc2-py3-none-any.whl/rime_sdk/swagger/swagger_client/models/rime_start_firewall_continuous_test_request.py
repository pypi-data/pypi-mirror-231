# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeStartFirewallContinuousTestRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'test_run_config': 'str',
        'custom_image_type': 'RimeCustomImageType',
        'ram_request_megabytes': 'str',
        'cpu_request_millicores': 'str',
        'firewall_id': 'str',
        'disable_firewall_events': 'bool',
        'override_existing_bins': 'bool',
        'agent_id': 'str',
        'incremental_config': 'RimeTypedIncrementalConfig',
        'data_source_id': 'str'
    }

    attribute_map = {
        'test_run_config': 'testRunConfig',
        'custom_image_type': 'customImageType',
        'ram_request_megabytes': 'ramRequestMegabytes',
        'cpu_request_millicores': 'cpuRequestMillicores',
        'firewall_id': 'firewallId',
        'disable_firewall_events': 'disableFirewallEvents',
        'override_existing_bins': 'overrideExistingBins',
        'agent_id': 'agentId',
        'incremental_config': 'incrementalConfig',
        'data_source_id': 'dataSourceId'
    }

    def __init__(self, test_run_config=None, custom_image_type=None, ram_request_megabytes=None, cpu_request_millicores=None, firewall_id=None, disable_firewall_events=None, override_existing_bins=None, agent_id=None, incremental_config=None, data_source_id=None):  # noqa: E501
        """RimeStartFirewallContinuousTestRequest - a model defined in Swagger"""  # noqa: E501
        self._test_run_config = None
        self._custom_image_type = None
        self._ram_request_megabytes = None
        self._cpu_request_millicores = None
        self._firewall_id = None
        self._disable_firewall_events = None
        self._override_existing_bins = None
        self._agent_id = None
        self._incremental_config = None
        self._data_source_id = None
        self.discriminator = None
        if test_run_config is not None:
            self.test_run_config = test_run_config
        if custom_image_type is not None:
            self.custom_image_type = custom_image_type
        if ram_request_megabytes is not None:
            self.ram_request_megabytes = ram_request_megabytes
        if cpu_request_millicores is not None:
            self.cpu_request_millicores = cpu_request_millicores
        if firewall_id is not None:
            self.firewall_id = firewall_id
        if disable_firewall_events is not None:
            self.disable_firewall_events = disable_firewall_events
        if override_existing_bins is not None:
            self.override_existing_bins = override_existing_bins
        if agent_id is not None:
            self.agent_id = agent_id
        if incremental_config is not None:
            self.incremental_config = incremental_config
        if data_source_id is not None:
            self.data_source_id = data_source_id

    @property
    def test_run_config(self):
        """Gets the test_run_config of this RimeStartFirewallContinuousTestRequest.  # noqa: E501

        A JSON object that specifies the configuration of the test run. The test run configuration specifies the datasets and model to test.  # noqa: E501

        :return: The test_run_config of this RimeStartFirewallContinuousTestRequest.  # noqa: E501
        :rtype: str
        """
        return self._test_run_config

    @test_run_config.setter
    def test_run_config(self, test_run_config):
        """Sets the test_run_config of this RimeStartFirewallContinuousTestRequest.

        A JSON object that specifies the configuration of the test run. The test run configuration specifies the datasets and model to test.  # noqa: E501

        :param test_run_config: The test_run_config of this RimeStartFirewallContinuousTestRequest.  # noqa: E501
        :type: str
        """

        self._test_run_config = test_run_config

    @property
    def custom_image_type(self):
        """Gets the custom_image_type of this RimeStartFirewallContinuousTestRequest.  # noqa: E501


        :return: The custom_image_type of this RimeStartFirewallContinuousTestRequest.  # noqa: E501
        :rtype: RimeCustomImageType
        """
        return self._custom_image_type

    @custom_image_type.setter
    def custom_image_type(self, custom_image_type):
        """Sets the custom_image_type of this RimeStartFirewallContinuousTestRequest.


        :param custom_image_type: The custom_image_type of this RimeStartFirewallContinuousTestRequest.  # noqa: E501
        :type: RimeCustomImageType
        """

        self._custom_image_type = custom_image_type

    @property
    def ram_request_megabytes(self):
        """Gets the ram_request_megabytes of this RimeStartFirewallContinuousTestRequest.  # noqa: E501


        :return: The ram_request_megabytes of this RimeStartFirewallContinuousTestRequest.  # noqa: E501
        :rtype: str
        """
        return self._ram_request_megabytes

    @ram_request_megabytes.setter
    def ram_request_megabytes(self, ram_request_megabytes):
        """Sets the ram_request_megabytes of this RimeStartFirewallContinuousTestRequest.


        :param ram_request_megabytes: The ram_request_megabytes of this RimeStartFirewallContinuousTestRequest.  # noqa: E501
        :type: str
        """

        self._ram_request_megabytes = ram_request_megabytes

    @property
    def cpu_request_millicores(self):
        """Gets the cpu_request_millicores of this RimeStartFirewallContinuousTestRequest.  # noqa: E501


        :return: The cpu_request_millicores of this RimeStartFirewallContinuousTestRequest.  # noqa: E501
        :rtype: str
        """
        return self._cpu_request_millicores

    @cpu_request_millicores.setter
    def cpu_request_millicores(self, cpu_request_millicores):
        """Sets the cpu_request_millicores of this RimeStartFirewallContinuousTestRequest.


        :param cpu_request_millicores: The cpu_request_millicores of this RimeStartFirewallContinuousTestRequest.  # noqa: E501
        :type: str
        """

        self._cpu_request_millicores = cpu_request_millicores

    @property
    def firewall_id(self):
        """Gets the firewall_id of this RimeStartFirewallContinuousTestRequest.  # noqa: E501


        :return: The firewall_id of this RimeStartFirewallContinuousTestRequest.  # noqa: E501
        :rtype: str
        """
        return self._firewall_id

    @firewall_id.setter
    def firewall_id(self, firewall_id):
        """Sets the firewall_id of this RimeStartFirewallContinuousTestRequest.


        :param firewall_id: The firewall_id of this RimeStartFirewallContinuousTestRequest.  # noqa: E501
        :type: str
        """

        self._firewall_id = firewall_id

    @property
    def disable_firewall_events(self):
        """Gets the disable_firewall_events of this RimeStartFirewallContinuousTestRequest.  # noqa: E501

        Specifies whether to disable firewall simulation.  # noqa: E501

        :return: The disable_firewall_events of this RimeStartFirewallContinuousTestRequest.  # noqa: E501
        :rtype: bool
        """
        return self._disable_firewall_events

    @disable_firewall_events.setter
    def disable_firewall_events(self, disable_firewall_events):
        """Sets the disable_firewall_events of this RimeStartFirewallContinuousTestRequest.

        Specifies whether to disable firewall simulation.  # noqa: E501

        :param disable_firewall_events: The disable_firewall_events of this RimeStartFirewallContinuousTestRequest.  # noqa: E501
        :type: bool
        """

        self._disable_firewall_events = disable_firewall_events

    @property
    def override_existing_bins(self):
        """Gets the override_existing_bins of this RimeStartFirewallContinuousTestRequest.  # noqa: E501

        Specify whether to enable the override of existing AI Firewall bins.  # noqa: E501

        :return: The override_existing_bins of this RimeStartFirewallContinuousTestRequest.  # noqa: E501
        :rtype: bool
        """
        return self._override_existing_bins

    @override_existing_bins.setter
    def override_existing_bins(self, override_existing_bins):
        """Sets the override_existing_bins of this RimeStartFirewallContinuousTestRequest.

        Specify whether to enable the override of existing AI Firewall bins.  # noqa: E501

        :param override_existing_bins: The override_existing_bins of this RimeStartFirewallContinuousTestRequest.  # noqa: E501
        :type: bool
        """

        self._override_existing_bins = override_existing_bins

    @property
    def agent_id(self):
        """Gets the agent_id of this RimeStartFirewallContinuousTestRequest.  # noqa: E501

        agent_id is the agent this job should be run on. If not specified, the default agent for the workspace is used.  # noqa: E501

        :return: The agent_id of this RimeStartFirewallContinuousTestRequest.  # noqa: E501
        :rtype: str
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """Sets the agent_id of this RimeStartFirewallContinuousTestRequest.

        agent_id is the agent this job should be run on. If not specified, the default agent for the workspace is used.  # noqa: E501

        :param agent_id: The agent_id of this RimeStartFirewallContinuousTestRequest.  # noqa: E501
        :type: str
        """

        self._agent_id = agent_id

    @property
    def incremental_config(self):
        """Gets the incremental_config of this RimeStartFirewallContinuousTestRequest.  # noqa: E501


        :return: The incremental_config of this RimeStartFirewallContinuousTestRequest.  # noqa: E501
        :rtype: RimeTypedIncrementalConfig
        """
        return self._incremental_config

    @incremental_config.setter
    def incremental_config(self, incremental_config):
        """Sets the incremental_config of this RimeStartFirewallContinuousTestRequest.


        :param incremental_config: The incremental_config of this RimeStartFirewallContinuousTestRequest.  # noqa: E501
        :type: RimeTypedIncrementalConfig
        """

        self._incremental_config = incremental_config

    @property
    def data_source_id(self):
        """Gets the data_source_id of this RimeStartFirewallContinuousTestRequest.  # noqa: E501

        Name of the data source used in the arguments.  # noqa: E501

        :return: The data_source_id of this RimeStartFirewallContinuousTestRequest.  # noqa: E501
        :rtype: str
        """
        return self._data_source_id

    @data_source_id.setter
    def data_source_id(self, data_source_id):
        """Sets the data_source_id of this RimeStartFirewallContinuousTestRequest.

        Name of the data source used in the arguments.  # noqa: E501

        :param data_source_id: The data_source_id of this RimeStartFirewallContinuousTestRequest.  # noqa: E501
        :type: str
        """

        self._data_source_id = data_source_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeStartFirewallContinuousTestRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeStartFirewallContinuousTestRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
