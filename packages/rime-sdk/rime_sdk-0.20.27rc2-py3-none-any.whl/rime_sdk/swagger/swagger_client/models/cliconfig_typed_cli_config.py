# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CliconfigTypedCLIConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tabular_config': 'CliconfigTabularCLIConfig',
        'nlp_config': 'CliconfigNLPCLIConfig',
        'images_config': 'CliconfigImagesCLIConfig',
        'run_name': 'str',
        'model_task': 'str',
        'silent_errors': 'bool',
        'tests_config_path': 'str',
        'tests_config': 'str',
        'random_seed': 'str'
    }

    attribute_map = {
        'tabular_config': 'tabularConfig',
        'nlp_config': 'nlpConfig',
        'images_config': 'imagesConfig',
        'run_name': 'runName',
        'model_task': 'modelTask',
        'silent_errors': 'silentErrors',
        'tests_config_path': 'testsConfigPath',
        'tests_config': 'testsConfig',
        'random_seed': 'randomSeed'
    }

    def __init__(self, tabular_config=None, nlp_config=None, images_config=None, run_name=None, model_task=None, silent_errors=None, tests_config_path=None, tests_config=None, random_seed=None):  # noqa: E501
        """CliconfigTypedCLIConfig - a model defined in Swagger"""  # noqa: E501
        self._tabular_config = None
        self._nlp_config = None
        self._images_config = None
        self._run_name = None
        self._model_task = None
        self._silent_errors = None
        self._tests_config_path = None
        self._tests_config = None
        self._random_seed = None
        self.discriminator = None
        if tabular_config is not None:
            self.tabular_config = tabular_config
        if nlp_config is not None:
            self.nlp_config = nlp_config
        if images_config is not None:
            self.images_config = images_config
        if run_name is not None:
            self.run_name = run_name
        if model_task is not None:
            self.model_task = model_task
        if silent_errors is not None:
            self.silent_errors = silent_errors
        if tests_config_path is not None:
            self.tests_config_path = tests_config_path
        if tests_config is not None:
            self.tests_config = tests_config
        if random_seed is not None:
            self.random_seed = random_seed

    @property
    def tabular_config(self):
        """Gets the tabular_config of this CliconfigTypedCLIConfig.  # noqa: E501


        :return: The tabular_config of this CliconfigTypedCLIConfig.  # noqa: E501
        :rtype: CliconfigTabularCLIConfig
        """
        return self._tabular_config

    @tabular_config.setter
    def tabular_config(self, tabular_config):
        """Sets the tabular_config of this CliconfigTypedCLIConfig.


        :param tabular_config: The tabular_config of this CliconfigTypedCLIConfig.  # noqa: E501
        :type: CliconfigTabularCLIConfig
        """

        self._tabular_config = tabular_config

    @property
    def nlp_config(self):
        """Gets the nlp_config of this CliconfigTypedCLIConfig.  # noqa: E501


        :return: The nlp_config of this CliconfigTypedCLIConfig.  # noqa: E501
        :rtype: CliconfigNLPCLIConfig
        """
        return self._nlp_config

    @nlp_config.setter
    def nlp_config(self, nlp_config):
        """Sets the nlp_config of this CliconfigTypedCLIConfig.


        :param nlp_config: The nlp_config of this CliconfigTypedCLIConfig.  # noqa: E501
        :type: CliconfigNLPCLIConfig
        """

        self._nlp_config = nlp_config

    @property
    def images_config(self):
        """Gets the images_config of this CliconfigTypedCLIConfig.  # noqa: E501


        :return: The images_config of this CliconfigTypedCLIConfig.  # noqa: E501
        :rtype: CliconfigImagesCLIConfig
        """
        return self._images_config

    @images_config.setter
    def images_config(self, images_config):
        """Sets the images_config of this CliconfigTypedCLIConfig.


        :param images_config: The images_config of this CliconfigTypedCLIConfig.  # noqa: E501
        :type: CliconfigImagesCLIConfig
        """

        self._images_config = images_config

    @property
    def run_name(self):
        """Gets the run_name of this CliconfigTypedCLIConfig.  # noqa: E501


        :return: The run_name of this CliconfigTypedCLIConfig.  # noqa: E501
        :rtype: str
        """
        return self._run_name

    @run_name.setter
    def run_name(self, run_name):
        """Sets the run_name of this CliconfigTypedCLIConfig.


        :param run_name: The run_name of this CliconfigTypedCLIConfig.  # noqa: E501
        :type: str
        """

        self._run_name = run_name

    @property
    def model_task(self):
        """Gets the model_task of this CliconfigTypedCLIConfig.  # noqa: E501


        :return: The model_task of this CliconfigTypedCLIConfig.  # noqa: E501
        :rtype: str
        """
        return self._model_task

    @model_task.setter
    def model_task(self, model_task):
        """Sets the model_task of this CliconfigTypedCLIConfig.


        :param model_task: The model_task of this CliconfigTypedCLIConfig.  # noqa: E501
        :type: str
        """

        self._model_task = model_task

    @property
    def silent_errors(self):
        """Gets the silent_errors of this CliconfigTypedCLIConfig.  # noqa: E501


        :return: The silent_errors of this CliconfigTypedCLIConfig.  # noqa: E501
        :rtype: bool
        """
        return self._silent_errors

    @silent_errors.setter
    def silent_errors(self, silent_errors):
        """Sets the silent_errors of this CliconfigTypedCLIConfig.


        :param silent_errors: The silent_errors of this CliconfigTypedCLIConfig.  # noqa: E501
        :type: bool
        """

        self._silent_errors = silent_errors

    @property
    def tests_config_path(self):
        """Gets the tests_config_path of this CliconfigTypedCLIConfig.  # noqa: E501


        :return: The tests_config_path of this CliconfigTypedCLIConfig.  # noqa: E501
        :rtype: str
        """
        return self._tests_config_path

    @tests_config_path.setter
    def tests_config_path(self, tests_config_path):
        """Sets the tests_config_path of this CliconfigTypedCLIConfig.


        :param tests_config_path: The tests_config_path of this CliconfigTypedCLIConfig.  # noqa: E501
        :type: str
        """

        self._tests_config_path = tests_config_path

    @property
    def tests_config(self):
        """Gets the tests_config of this CliconfigTypedCLIConfig.  # noqa: E501


        :return: The tests_config of this CliconfigTypedCLIConfig.  # noqa: E501
        :rtype: str
        """
        return self._tests_config

    @tests_config.setter
    def tests_config(self, tests_config):
        """Sets the tests_config of this CliconfigTypedCLIConfig.


        :param tests_config: The tests_config of this CliconfigTypedCLIConfig.  # noqa: E501
        :type: str
        """

        self._tests_config = tests_config

    @property
    def random_seed(self):
        """Gets the random_seed of this CliconfigTypedCLIConfig.  # noqa: E501


        :return: The random_seed of this CliconfigTypedCLIConfig.  # noqa: E501
        :rtype: str
        """
        return self._random_seed

    @random_seed.setter
    def random_seed(self, random_seed):
        """Sets the random_seed of this CliconfigTypedCLIConfig.


        :param random_seed: The random_seed of this CliconfigTypedCLIConfig.  # noqa: E501
        :type: str
        """

        self._random_seed = random_seed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CliconfigTypedCLIConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CliconfigTypedCLIConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
