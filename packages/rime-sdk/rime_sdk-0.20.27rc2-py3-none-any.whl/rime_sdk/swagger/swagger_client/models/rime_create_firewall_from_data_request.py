# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeCreateFirewallFromDataRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'project_id': 'str',
        'data_type': 'RimeDataType',
        'model_task': 'RimeModelTask',
        'bin_size': 'RimeBinSize',
        'firewall_id': 'str',
        'data_params': 'CliconfigDataParams',
        'reference_set_source': 'RimeReferenceSetSource',
        'run_ct_schedule': 'bool',
        'data_location_info': 'RimeDataLocation'
    }

    attribute_map = {
        'name': 'name',
        'project_id': 'projectId',
        'data_type': 'dataType',
        'model_task': 'modelTask',
        'bin_size': 'binSize',
        'firewall_id': 'firewallId',
        'data_params': 'dataParams',
        'reference_set_source': 'referenceSetSource',
        'run_ct_schedule': 'runCtSchedule',
        'data_location_info': 'dataLocationInfo'
    }

    def __init__(self, name=None, project_id=None, data_type=None, model_task=None, bin_size=None, firewall_id=None, data_params=None, reference_set_source=None, run_ct_schedule=None, data_location_info=None):  # noqa: E501
        """RimeCreateFirewallFromDataRequest - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._project_id = None
        self._data_type = None
        self._model_task = None
        self._bin_size = None
        self._firewall_id = None
        self._data_params = None
        self._reference_set_source = None
        self._run_ct_schedule = None
        self._data_location_info = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if project_id is not None:
            self.project_id = project_id
        if data_type is not None:
            self.data_type = data_type
        if model_task is not None:
            self.model_task = model_task
        if bin_size is not None:
            self.bin_size = bin_size
        if firewall_id is not None:
            self.firewall_id = firewall_id
        if data_params is not None:
            self.data_params = data_params
        if reference_set_source is not None:
            self.reference_set_source = reference_set_source
        if run_ct_schedule is not None:
            self.run_ct_schedule = run_ct_schedule
        if data_location_info is not None:
            self.data_location_info = data_location_info

    @property
    def name(self):
        """Gets the name of this RimeCreateFirewallFromDataRequest.  # noqa: E501


        :return: The name of this RimeCreateFirewallFromDataRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RimeCreateFirewallFromDataRequest.


        :param name: The name of this RimeCreateFirewallFromDataRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def project_id(self):
        """Gets the project_id of this RimeCreateFirewallFromDataRequest.  # noqa: E501


        :return: The project_id of this RimeCreateFirewallFromDataRequest.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this RimeCreateFirewallFromDataRequest.


        :param project_id: The project_id of this RimeCreateFirewallFromDataRequest.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def data_type(self):
        """Gets the data_type of this RimeCreateFirewallFromDataRequest.  # noqa: E501


        :return: The data_type of this RimeCreateFirewallFromDataRequest.  # noqa: E501
        :rtype: RimeDataType
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this RimeCreateFirewallFromDataRequest.


        :param data_type: The data_type of this RimeCreateFirewallFromDataRequest.  # noqa: E501
        :type: RimeDataType
        """

        self._data_type = data_type

    @property
    def model_task(self):
        """Gets the model_task of this RimeCreateFirewallFromDataRequest.  # noqa: E501


        :return: The model_task of this RimeCreateFirewallFromDataRequest.  # noqa: E501
        :rtype: RimeModelTask
        """
        return self._model_task

    @model_task.setter
    def model_task(self, model_task):
        """Sets the model_task of this RimeCreateFirewallFromDataRequest.


        :param model_task: The model_task of this RimeCreateFirewallFromDataRequest.  # noqa: E501
        :type: RimeModelTask
        """

        self._model_task = model_task

    @property
    def bin_size(self):
        """Gets the bin_size of this RimeCreateFirewallFromDataRequest.  # noqa: E501


        :return: The bin_size of this RimeCreateFirewallFromDataRequest.  # noqa: E501
        :rtype: RimeBinSize
        """
        return self._bin_size

    @bin_size.setter
    def bin_size(self, bin_size):
        """Sets the bin_size of this RimeCreateFirewallFromDataRequest.


        :param bin_size: The bin_size of this RimeCreateFirewallFromDataRequest.  # noqa: E501
        :type: RimeBinSize
        """

        self._bin_size = bin_size

    @property
    def firewall_id(self):
        """Gets the firewall_id of this RimeCreateFirewallFromDataRequest.  # noqa: E501


        :return: The firewall_id of this RimeCreateFirewallFromDataRequest.  # noqa: E501
        :rtype: str
        """
        return self._firewall_id

    @firewall_id.setter
    def firewall_id(self, firewall_id):
        """Sets the firewall_id of this RimeCreateFirewallFromDataRequest.


        :param firewall_id: The firewall_id of this RimeCreateFirewallFromDataRequest.  # noqa: E501
        :type: str
        """

        self._firewall_id = firewall_id

    @property
    def data_params(self):
        """Gets the data_params of this RimeCreateFirewallFromDataRequest.  # noqa: E501


        :return: The data_params of this RimeCreateFirewallFromDataRequest.  # noqa: E501
        :rtype: CliconfigDataParams
        """
        return self._data_params

    @data_params.setter
    def data_params(self, data_params):
        """Sets the data_params of this RimeCreateFirewallFromDataRequest.


        :param data_params: The data_params of this RimeCreateFirewallFromDataRequest.  # noqa: E501
        :type: CliconfigDataParams
        """

        self._data_params = data_params

    @property
    def reference_set_source(self):
        """Gets the reference_set_source of this RimeCreateFirewallFromDataRequest.  # noqa: E501


        :return: The reference_set_source of this RimeCreateFirewallFromDataRequest.  # noqa: E501
        :rtype: RimeReferenceSetSource
        """
        return self._reference_set_source

    @reference_set_source.setter
    def reference_set_source(self, reference_set_source):
        """Sets the reference_set_source of this RimeCreateFirewallFromDataRequest.


        :param reference_set_source: The reference_set_source of this RimeCreateFirewallFromDataRequest.  # noqa: E501
        :type: RimeReferenceSetSource
        """

        self._reference_set_source = reference_set_source

    @property
    def run_ct_schedule(self):
        """Gets the run_ct_schedule of this RimeCreateFirewallFromDataRequest.  # noqa: E501

        If false, don't run CTSchedule. Schedule frequency and other info determined by bin size.  # noqa: E501

        :return: The run_ct_schedule of this RimeCreateFirewallFromDataRequest.  # noqa: E501
        :rtype: bool
        """
        return self._run_ct_schedule

    @run_ct_schedule.setter
    def run_ct_schedule(self, run_ct_schedule):
        """Sets the run_ct_schedule of this RimeCreateFirewallFromDataRequest.

        If false, don't run CTSchedule. Schedule frequency and other info determined by bin size.  # noqa: E501

        :param run_ct_schedule: The run_ct_schedule of this RimeCreateFirewallFromDataRequest.  # noqa: E501
        :type: bool
        """

        self._run_ct_schedule = run_ct_schedule

    @property
    def data_location_info(self):
        """Gets the data_location_info of this RimeCreateFirewallFromDataRequest.  # noqa: E501


        :return: The data_location_info of this RimeCreateFirewallFromDataRequest.  # noqa: E501
        :rtype: RimeDataLocation
        """
        return self._data_location_info

    @data_location_info.setter
    def data_location_info(self, data_location_info):
        """Sets the data_location_info of this RimeCreateFirewallFromDataRequest.


        :param data_location_info: The data_location_info of this RimeCreateFirewallFromDataRequest.  # noqa: E501
        :type: RimeDataLocation
        """

        self._data_location_info = data_location_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeCreateFirewallFromDataRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeCreateFirewallFromDataRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
