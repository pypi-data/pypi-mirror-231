# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeDatapoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'datapoint_id': 'str',
        'model_id': 'str',
        'input_data': 'str',
        'created_time': 'datetime',
        'pred': 'str',
        'label': 'str',
        'query_id': 'str'
    }

    attribute_map = {
        'datapoint_id': 'datapointId',
        'model_id': 'modelId',
        'input_data': 'inputData',
        'created_time': 'createdTime',
        'pred': 'pred',
        'label': 'label',
        'query_id': 'queryId'
    }

    def __init__(self, datapoint_id=None, model_id=None, input_data=None, created_time=None, pred=None, label=None, query_id=None):  # noqa: E501
        """RimeDatapoint - a model defined in Swagger"""  # noqa: E501
        self._datapoint_id = None
        self._model_id = None
        self._input_data = None
        self._created_time = None
        self._pred = None
        self._label = None
        self._query_id = None
        self.discriminator = None
        if datapoint_id is not None:
            self.datapoint_id = datapoint_id
        if model_id is not None:
            self.model_id = model_id
        if input_data is not None:
            self.input_data = input_data
        if created_time is not None:
            self.created_time = created_time
        if pred is not None:
            self.pred = pred
        if label is not None:
            self.label = label
        if query_id is not None:
            self.query_id = query_id

    @property
    def datapoint_id(self):
        """Gets the datapoint_id of this RimeDatapoint.  # noqa: E501


        :return: The datapoint_id of this RimeDatapoint.  # noqa: E501
        :rtype: str
        """
        return self._datapoint_id

    @datapoint_id.setter
    def datapoint_id(self, datapoint_id):
        """Sets the datapoint_id of this RimeDatapoint.


        :param datapoint_id: The datapoint_id of this RimeDatapoint.  # noqa: E501
        :type: str
        """

        self._datapoint_id = datapoint_id

    @property
    def model_id(self):
        """Gets the model_id of this RimeDatapoint.  # noqa: E501


        :return: The model_id of this RimeDatapoint.  # noqa: E501
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this RimeDatapoint.


        :param model_id: The model_id of this RimeDatapoint.  # noqa: E501
        :type: str
        """

        self._model_id = model_id

    @property
    def input_data(self):
        """Gets the input_data of this RimeDatapoint.  # noqa: E501


        :return: The input_data of this RimeDatapoint.  # noqa: E501
        :rtype: str
        """
        return self._input_data

    @input_data.setter
    def input_data(self, input_data):
        """Sets the input_data of this RimeDatapoint.


        :param input_data: The input_data of this RimeDatapoint.  # noqa: E501
        :type: str
        """

        self._input_data = input_data

    @property
    def created_time(self):
        """Gets the created_time of this RimeDatapoint.  # noqa: E501


        :return: The created_time of this RimeDatapoint.  # noqa: E501
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this RimeDatapoint.


        :param created_time: The created_time of this RimeDatapoint.  # noqa: E501
        :type: datetime
        """

        self._created_time = created_time

    @property
    def pred(self):
        """Gets the pred of this RimeDatapoint.  # noqa: E501


        :return: The pred of this RimeDatapoint.  # noqa: E501
        :rtype: str
        """
        return self._pred

    @pred.setter
    def pred(self, pred):
        """Sets the pred of this RimeDatapoint.


        :param pred: The pred of this RimeDatapoint.  # noqa: E501
        :type: str
        """

        self._pred = pred

    @property
    def label(self):
        """Gets the label of this RimeDatapoint.  # noqa: E501


        :return: The label of this RimeDatapoint.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this RimeDatapoint.


        :param label: The label of this RimeDatapoint.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def query_id(self):
        """Gets the query_id of this RimeDatapoint.  # noqa: E501


        :return: The query_id of this RimeDatapoint.  # noqa: E501
        :rtype: str
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id):
        """Sets the query_id of this RimeDatapoint.


        :param query_id: The query_id of this RimeDatapoint.  # noqa: E501
        :type: str
        """

        self._query_id = query_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeDatapoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeDatapoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
