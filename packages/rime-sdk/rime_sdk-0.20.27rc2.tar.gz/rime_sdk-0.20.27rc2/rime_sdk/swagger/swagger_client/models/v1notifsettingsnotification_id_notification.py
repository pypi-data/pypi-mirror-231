# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1notifsettingsnotificationIdNotification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'notification_object_type': 'NotificationObjectType',
        'notification_object_id': 'str',
        'emails': 'list[str]',
        'notification_type': 'RimeNotificationType',
        'config': 'RimeConfig',
        'webhooks': 'list[RimeWebhookConfig]'
    }

    attribute_map = {
        'notification_object_type': 'notificationObjectType',
        'notification_object_id': 'notificationObjectId',
        'emails': 'emails',
        'notification_type': 'notificationType',
        'config': 'config',
        'webhooks': 'webhooks'
    }

    def __init__(self, notification_object_type=None, notification_object_id=None, emails=None, notification_type=None, config=None, webhooks=None):  # noqa: E501
        """V1notifsettingsnotificationIdNotification - a model defined in Swagger"""  # noqa: E501
        self._notification_object_type = None
        self._notification_object_id = None
        self._emails = None
        self._notification_type = None
        self._config = None
        self._webhooks = None
        self.discriminator = None
        if notification_object_type is not None:
            self.notification_object_type = notification_object_type
        if notification_object_id is not None:
            self.notification_object_id = notification_object_id
        if emails is not None:
            self.emails = emails
        if notification_type is not None:
            self.notification_type = notification_type
        if config is not None:
            self.config = config
        if webhooks is not None:
            self.webhooks = webhooks

    @property
    def notification_object_type(self):
        """Gets the notification_object_type of this V1notifsettingsnotificationIdNotification.  # noqa: E501


        :return: The notification_object_type of this V1notifsettingsnotificationIdNotification.  # noqa: E501
        :rtype: NotificationObjectType
        """
        return self._notification_object_type

    @notification_object_type.setter
    def notification_object_type(self, notification_object_type):
        """Sets the notification_object_type of this V1notifsettingsnotificationIdNotification.


        :param notification_object_type: The notification_object_type of this V1notifsettingsnotificationIdNotification.  # noqa: E501
        :type: NotificationObjectType
        """

        self._notification_object_type = notification_object_type

    @property
    def notification_object_id(self):
        """Gets the notification_object_id of this V1notifsettingsnotificationIdNotification.  # noqa: E501


        :return: The notification_object_id of this V1notifsettingsnotificationIdNotification.  # noqa: E501
        :rtype: str
        """
        return self._notification_object_id

    @notification_object_id.setter
    def notification_object_id(self, notification_object_id):
        """Sets the notification_object_id of this V1notifsettingsnotificationIdNotification.


        :param notification_object_id: The notification_object_id of this V1notifsettingsnotificationIdNotification.  # noqa: E501
        :type: str
        """

        self._notification_object_id = notification_object_id

    @property
    def emails(self):
        """Gets the emails of this V1notifsettingsnotificationIdNotification.  # noqa: E501


        :return: The emails of this V1notifsettingsnotificationIdNotification.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this V1notifsettingsnotificationIdNotification.


        :param emails: The emails of this V1notifsettingsnotificationIdNotification.  # noqa: E501
        :type: list[str]
        """

        self._emails = emails

    @property
    def notification_type(self):
        """Gets the notification_type of this V1notifsettingsnotificationIdNotification.  # noqa: E501


        :return: The notification_type of this V1notifsettingsnotificationIdNotification.  # noqa: E501
        :rtype: RimeNotificationType
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this V1notifsettingsnotificationIdNotification.


        :param notification_type: The notification_type of this V1notifsettingsnotificationIdNotification.  # noqa: E501
        :type: RimeNotificationType
        """

        self._notification_type = notification_type

    @property
    def config(self):
        """Gets the config of this V1notifsettingsnotificationIdNotification.  # noqa: E501


        :return: The config of this V1notifsettingsnotificationIdNotification.  # noqa: E501
        :rtype: RimeConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this V1notifsettingsnotificationIdNotification.


        :param config: The config of this V1notifsettingsnotificationIdNotification.  # noqa: E501
        :type: RimeConfig
        """

        self._config = config

    @property
    def webhooks(self):
        """Gets the webhooks of this V1notifsettingsnotificationIdNotification.  # noqa: E501


        :return: The webhooks of this V1notifsettingsnotificationIdNotification.  # noqa: E501
        :rtype: list[RimeWebhookConfig]
        """
        return self._webhooks

    @webhooks.setter
    def webhooks(self, webhooks):
        """Sets the webhooks of this V1notifsettingsnotificationIdNotification.


        :param webhooks: The webhooks of this V1notifsettingsnotificationIdNotification.  # noqa: E501
        :type: list[RimeWebhookConfig]
        """

        self._webhooks = webhooks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1notifsettingsnotificationIdNotification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1notifsettingsnotificationIdNotification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
