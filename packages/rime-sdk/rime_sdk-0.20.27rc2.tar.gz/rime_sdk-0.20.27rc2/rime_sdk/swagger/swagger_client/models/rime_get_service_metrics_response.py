# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeGetServiceMetricsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_firewall_active': 'bool',
        'model_task': 'RimeModelTask',
        'input_type': 'RimeDataType',
        'num_features': 'str',
        'last_batch_size': 'str',
        'last_update_time': 'str'
    }

    attribute_map = {
        'is_firewall_active': 'isFirewallActive',
        'model_task': 'modelTask',
        'input_type': 'inputType',
        'num_features': 'numFeatures',
        'last_batch_size': 'lastBatchSize',
        'last_update_time': 'lastUpdateTime'
    }

    def __init__(self, is_firewall_active=None, model_task=None, input_type=None, num_features=None, last_batch_size=None, last_update_time=None):  # noqa: E501
        """RimeGetServiceMetricsResponse - a model defined in Swagger"""  # noqa: E501
        self._is_firewall_active = None
        self._model_task = None
        self._input_type = None
        self._num_features = None
        self._last_batch_size = None
        self._last_update_time = None
        self.discriminator = None
        if is_firewall_active is not None:
            self.is_firewall_active = is_firewall_active
        if model_task is not None:
            self.model_task = model_task
        if input_type is not None:
            self.input_type = input_type
        if num_features is not None:
            self.num_features = num_features
        if last_batch_size is not None:
            self.last_batch_size = last_batch_size
        if last_update_time is not None:
            self.last_update_time = last_update_time

    @property
    def is_firewall_active(self):
        """Gets the is_firewall_active of this RimeGetServiceMetricsResponse.  # noqa: E501


        :return: The is_firewall_active of this RimeGetServiceMetricsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_firewall_active

    @is_firewall_active.setter
    def is_firewall_active(self, is_firewall_active):
        """Sets the is_firewall_active of this RimeGetServiceMetricsResponse.


        :param is_firewall_active: The is_firewall_active of this RimeGetServiceMetricsResponse.  # noqa: E501
        :type: bool
        """

        self._is_firewall_active = is_firewall_active

    @property
    def model_task(self):
        """Gets the model_task of this RimeGetServiceMetricsResponse.  # noqa: E501


        :return: The model_task of this RimeGetServiceMetricsResponse.  # noqa: E501
        :rtype: RimeModelTask
        """
        return self._model_task

    @model_task.setter
    def model_task(self, model_task):
        """Sets the model_task of this RimeGetServiceMetricsResponse.


        :param model_task: The model_task of this RimeGetServiceMetricsResponse.  # noqa: E501
        :type: RimeModelTask
        """

        self._model_task = model_task

    @property
    def input_type(self):
        """Gets the input_type of this RimeGetServiceMetricsResponse.  # noqa: E501


        :return: The input_type of this RimeGetServiceMetricsResponse.  # noqa: E501
        :rtype: RimeDataType
        """
        return self._input_type

    @input_type.setter
    def input_type(self, input_type):
        """Sets the input_type of this RimeGetServiceMetricsResponse.


        :param input_type: The input_type of this RimeGetServiceMetricsResponse.  # noqa: E501
        :type: RimeDataType
        """

        self._input_type = input_type

    @property
    def num_features(self):
        """Gets the num_features of this RimeGetServiceMetricsResponse.  # noqa: E501


        :return: The num_features of this RimeGetServiceMetricsResponse.  # noqa: E501
        :rtype: str
        """
        return self._num_features

    @num_features.setter
    def num_features(self, num_features):
        """Sets the num_features of this RimeGetServiceMetricsResponse.


        :param num_features: The num_features of this RimeGetServiceMetricsResponse.  # noqa: E501
        :type: str
        """

        self._num_features = num_features

    @property
    def last_batch_size(self):
        """Gets the last_batch_size of this RimeGetServiceMetricsResponse.  # noqa: E501


        :return: The last_batch_size of this RimeGetServiceMetricsResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_batch_size

    @last_batch_size.setter
    def last_batch_size(self, last_batch_size):
        """Sets the last_batch_size of this RimeGetServiceMetricsResponse.


        :param last_batch_size: The last_batch_size of this RimeGetServiceMetricsResponse.  # noqa: E501
        :type: str
        """

        self._last_batch_size = last_batch_size

    @property
    def last_update_time(self):
        """Gets the last_update_time of this RimeGetServiceMetricsResponse.  # noqa: E501

        This is timestamp string in UTC.  # noqa: E501

        :return: The last_update_time of this RimeGetServiceMetricsResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this RimeGetServiceMetricsResponse.

        This is timestamp string in UTC.  # noqa: E501

        :param last_update_time: The last_update_time of this RimeGetServiceMetricsResponse.  # noqa: E501
        :type: str
        """

        self._last_update_time = last_update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeGetServiceMetricsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeGetServiceMetricsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
