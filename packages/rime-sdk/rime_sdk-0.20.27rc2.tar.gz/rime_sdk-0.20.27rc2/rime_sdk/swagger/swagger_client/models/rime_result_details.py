# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeResultDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'firewall_id': 'str',
        'created_time_epoch_seconds': 'datetime',
        'request_id': 'str',
        'model_scores': 'list[float]',
        'data': 'str'
    }

    attribute_map = {
        'firewall_id': 'firewallId',
        'created_time_epoch_seconds': 'createdTimeEpochSeconds',
        'request_id': 'requestId',
        'model_scores': 'modelScores',
        'data': 'data'
    }

    def __init__(self, firewall_id=None, created_time_epoch_seconds=None, request_id=None, model_scores=None, data=None):  # noqa: E501
        """RimeResultDetails - a model defined in Swagger"""  # noqa: E501
        self._firewall_id = None
        self._created_time_epoch_seconds = None
        self._request_id = None
        self._model_scores = None
        self._data = None
        self.discriminator = None
        if firewall_id is not None:
            self.firewall_id = firewall_id
        if created_time_epoch_seconds is not None:
            self.created_time_epoch_seconds = created_time_epoch_seconds
        if request_id is not None:
            self.request_id = request_id
        if model_scores is not None:
            self.model_scores = model_scores
        if data is not None:
            self.data = data

    @property
    def firewall_id(self):
        """Gets the firewall_id of this RimeResultDetails.  # noqa: E501

        Firewall ID (UUIDv4).  # noqa: E501

        :return: The firewall_id of this RimeResultDetails.  # noqa: E501
        :rtype: str
        """
        return self._firewall_id

    @firewall_id.setter
    def firewall_id(self, firewall_id):
        """Sets the firewall_id of this RimeResultDetails.

        Firewall ID (UUIDv4).  # noqa: E501

        :param firewall_id: The firewall_id of this RimeResultDetails.  # noqa: E501
        :type: str
        """

        self._firewall_id = firewall_id

    @property
    def created_time_epoch_seconds(self):
        """Gets the created_time_epoch_seconds of this RimeResultDetails.  # noqa: E501


        :return: The created_time_epoch_seconds of this RimeResultDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._created_time_epoch_seconds

    @created_time_epoch_seconds.setter
    def created_time_epoch_seconds(self, created_time_epoch_seconds):
        """Sets the created_time_epoch_seconds of this RimeResultDetails.


        :param created_time_epoch_seconds: The created_time_epoch_seconds of this RimeResultDetails.  # noqa: E501
        :type: datetime
        """

        self._created_time_epoch_seconds = created_time_epoch_seconds

    @property
    def request_id(self):
        """Gets the request_id of this RimeResultDetails.  # noqa: E501


        :return: The request_id of this RimeResultDetails.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this RimeResultDetails.


        :param request_id: The request_id of this RimeResultDetails.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def model_scores(self):
        """Gets the model_scores of this RimeResultDetails.  # noqa: E501


        :return: The model_scores of this RimeResultDetails.  # noqa: E501
        :rtype: list[float]
        """
        return self._model_scores

    @model_scores.setter
    def model_scores(self, model_scores):
        """Sets the model_scores of this RimeResultDetails.


        :param model_scores: The model_scores of this RimeResultDetails.  # noqa: E501
        :type: list[float]
        """

        self._model_scores = model_scores

    @property
    def data(self):
        """Gets the data of this RimeResultDetails.  # noqa: E501


        :return: The data of this RimeResultDetails.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this RimeResultDetails.


        :param data: The data of this RimeResultDetails.  # noqa: E501
        :type: str
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeResultDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeResultDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
