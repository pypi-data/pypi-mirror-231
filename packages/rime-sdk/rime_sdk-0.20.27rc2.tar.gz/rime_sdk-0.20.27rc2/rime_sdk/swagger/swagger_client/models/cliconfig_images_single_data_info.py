# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CliconfigImagesSingleDataInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'single_data_file_info': 'CliconfigImagesSingleDataFileInfo',
        'single_params': 'CliconfigUnstructuredSingleDataInfoParams',
        'load_path': 'str'
    }

    attribute_map = {
        'single_data_file_info': 'singleDataFileInfo',
        'single_params': 'singleParams',
        'load_path': 'loadPath'
    }

    def __init__(self, single_data_file_info=None, single_params=None, load_path=None):  # noqa: E501
        """CliconfigImagesSingleDataInfo - a model defined in Swagger"""  # noqa: E501
        self._single_data_file_info = None
        self._single_params = None
        self._load_path = None
        self.discriminator = None
        if single_data_file_info is not None:
            self.single_data_file_info = single_data_file_info
        if single_params is not None:
            self.single_params = single_params
        if load_path is not None:
            self.load_path = load_path

    @property
    def single_data_file_info(self):
        """Gets the single_data_file_info of this CliconfigImagesSingleDataInfo.  # noqa: E501


        :return: The single_data_file_info of this CliconfigImagesSingleDataInfo.  # noqa: E501
        :rtype: CliconfigImagesSingleDataFileInfo
        """
        return self._single_data_file_info

    @single_data_file_info.setter
    def single_data_file_info(self, single_data_file_info):
        """Sets the single_data_file_info of this CliconfigImagesSingleDataInfo.


        :param single_data_file_info: The single_data_file_info of this CliconfigImagesSingleDataInfo.  # noqa: E501
        :type: CliconfigImagesSingleDataFileInfo
        """

        self._single_data_file_info = single_data_file_info

    @property
    def single_params(self):
        """Gets the single_params of this CliconfigImagesSingleDataInfo.  # noqa: E501


        :return: The single_params of this CliconfigImagesSingleDataInfo.  # noqa: E501
        :rtype: CliconfigUnstructuredSingleDataInfoParams
        """
        return self._single_params

    @single_params.setter
    def single_params(self, single_params):
        """Sets the single_params of this CliconfigImagesSingleDataInfo.


        :param single_params: The single_params of this CliconfigImagesSingleDataInfo.  # noqa: E501
        :type: CliconfigUnstructuredSingleDataInfoParams
        """

        self._single_params = single_params

    @property
    def load_path(self):
        """Gets the load_path of this CliconfigImagesSingleDataInfo.  # noqa: E501


        :return: The load_path of this CliconfigImagesSingleDataInfo.  # noqa: E501
        :rtype: str
        """
        return self._load_path

    @load_path.setter
    def load_path(self, load_path):
        """Sets the load_path of this CliconfigImagesSingleDataInfo.


        :param load_path: The load_path of this CliconfigImagesSingleDataInfo.  # noqa: E501
        :type: str
        """

        self._load_path = load_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CliconfigImagesSingleDataInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CliconfigImagesSingleDataInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
