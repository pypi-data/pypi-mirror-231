# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TestrunresultTestCase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'test_run_id': 'str',
        'features': 'list[str]',
        'test_batch_type': 'str',
        'status': 'RimeTestCaseStatus',
        'severity': 'RimeTestSeverity',
        'importance_score': 'float',
        'category': 'str',
        'metrics': 'list[RimeTestMetric]',
        'feature_id': 'str',
        'test_case_id': 'str',
        'display': 'TestrunresultTestCaseDisplay'
    }

    attribute_map = {
        'test_run_id': 'testRunId',
        'features': 'features',
        'test_batch_type': 'testBatchType',
        'status': 'status',
        'severity': 'severity',
        'importance_score': 'importanceScore',
        'category': 'category',
        'metrics': 'metrics',
        'feature_id': 'featureId',
        'test_case_id': 'testCaseId',
        'display': 'display'
    }

    def __init__(self, test_run_id=None, features=None, test_batch_type=None, status=None, severity=None, importance_score=None, category=None, metrics=None, feature_id=None, test_case_id=None, display=None):  # noqa: E501
        """TestrunresultTestCase - a model defined in Swagger"""  # noqa: E501
        self._test_run_id = None
        self._features = None
        self._test_batch_type = None
        self._status = None
        self._severity = None
        self._importance_score = None
        self._category = None
        self._metrics = None
        self._feature_id = None
        self._test_case_id = None
        self._display = None
        self.discriminator = None
        if test_run_id is not None:
            self.test_run_id = test_run_id
        if features is not None:
            self.features = features
        if test_batch_type is not None:
            self.test_batch_type = test_batch_type
        if status is not None:
            self.status = status
        if severity is not None:
            self.severity = severity
        if importance_score is not None:
            self.importance_score = importance_score
        if category is not None:
            self.category = category
        if metrics is not None:
            self.metrics = metrics
        if feature_id is not None:
            self.feature_id = feature_id
        if test_case_id is not None:
            self.test_case_id = test_case_id
        if display is not None:
            self.display = display

    @property
    def test_run_id(self):
        """Gets the test_run_id of this TestrunresultTestCase.  # noqa: E501

        Information about the parent entities - test run, test batch, and features.  # noqa: E501

        :return: The test_run_id of this TestrunresultTestCase.  # noqa: E501
        :rtype: str
        """
        return self._test_run_id

    @test_run_id.setter
    def test_run_id(self, test_run_id):
        """Sets the test_run_id of this TestrunresultTestCase.

        Information about the parent entities - test run, test batch, and features.  # noqa: E501

        :param test_run_id: The test_run_id of this TestrunresultTestCase.  # noqa: E501
        :type: str
        """

        self._test_run_id = test_run_id

    @property
    def features(self):
        """Gets the features of this TestrunresultTestCase.  # noqa: E501


        :return: The features of this TestrunresultTestCase.  # noqa: E501
        :rtype: list[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this TestrunresultTestCase.


        :param features: The features of this TestrunresultTestCase.  # noqa: E501
        :type: list[str]
        """

        self._features = features

    @property
    def test_batch_type(self):
        """Gets the test_batch_type of this TestrunresultTestCase.  # noqa: E501


        :return: The test_batch_type of this TestrunresultTestCase.  # noqa: E501
        :rtype: str
        """
        return self._test_batch_type

    @test_batch_type.setter
    def test_batch_type(self, test_batch_type):
        """Sets the test_batch_type of this TestrunresultTestCase.


        :param test_batch_type: The test_batch_type of this TestrunresultTestCase.  # noqa: E501
        :type: str
        """

        self._test_batch_type = test_batch_type

    @property
    def status(self):
        """Gets the status of this TestrunresultTestCase.  # noqa: E501


        :return: The status of this TestrunresultTestCase.  # noqa: E501
        :rtype: RimeTestCaseStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TestrunresultTestCase.


        :param status: The status of this TestrunresultTestCase.  # noqa: E501
        :type: RimeTestCaseStatus
        """

        self._status = status

    @property
    def severity(self):
        """Gets the severity of this TestrunresultTestCase.  # noqa: E501


        :return: The severity of this TestrunresultTestCase.  # noqa: E501
        :rtype: RimeTestSeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this TestrunresultTestCase.


        :param severity: The severity of this TestrunresultTestCase.  # noqa: E501
        :type: RimeTestSeverity
        """

        self._severity = severity

    @property
    def importance_score(self):
        """Gets the importance_score of this TestrunresultTestCase.  # noqa: E501

        Model impact of the test case.  # noqa: E501

        :return: The importance_score of this TestrunresultTestCase.  # noqa: E501
        :rtype: float
        """
        return self._importance_score

    @importance_score.setter
    def importance_score(self, importance_score):
        """Sets the importance_score of this TestrunresultTestCase.

        Model impact of the test case.  # noqa: E501

        :param importance_score: The importance_score of this TestrunresultTestCase.  # noqa: E501
        :type: float
        """

        self._importance_score = importance_score

    @property
    def category(self):
        """Gets the category of this TestrunresultTestCase.  # noqa: E501


        :return: The category of this TestrunresultTestCase.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this TestrunresultTestCase.


        :param category: The category of this TestrunresultTestCase.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def metrics(self):
        """Gets the metrics of this TestrunresultTestCase.  # noqa: E501


        :return: The metrics of this TestrunresultTestCase.  # noqa: E501
        :rtype: list[RimeTestMetric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this TestrunresultTestCase.


        :param metrics: The metrics of this TestrunresultTestCase.  # noqa: E501
        :type: list[RimeTestMetric]
        """

        self._metrics = metrics

    @property
    def feature_id(self):
        """Gets the feature_id of this TestrunresultTestCase.  # noqa: E501

        Optional feature ID if the test case is associated with a feature. This may be empty for modalities that do not have features or test cases that pertain to two or more features, such as subset tests.  # noqa: E501

        :return: The feature_id of this TestrunresultTestCase.  # noqa: E501
        :rtype: str
        """
        return self._feature_id

    @feature_id.setter
    def feature_id(self, feature_id):
        """Sets the feature_id of this TestrunresultTestCase.

        Optional feature ID if the test case is associated with a feature. This may be empty for modalities that do not have features or test cases that pertain to two or more features, such as subset tests.  # noqa: E501

        :param feature_id: The feature_id of this TestrunresultTestCase.  # noqa: E501
        :type: str
        """

        self._feature_id = feature_id

    @property
    def test_case_id(self):
        """Gets the test_case_id of this TestrunresultTestCase.  # noqa: E501

        Together with the Test run ID and the test batch type, this forms the primary key for the test case.  # noqa: E501

        :return: The test_case_id of this TestrunresultTestCase.  # noqa: E501
        :rtype: str
        """
        return self._test_case_id

    @test_case_id.setter
    def test_case_id(self, test_case_id):
        """Sets the test_case_id of this TestrunresultTestCase.

        Together with the Test run ID and the test batch type, this forms the primary key for the test case.  # noqa: E501

        :param test_case_id: The test_case_id of this TestrunresultTestCase.  # noqa: E501
        :type: str
        """

        self._test_case_id = test_case_id

    @property
    def display(self):
        """Gets the display of this TestrunresultTestCase.  # noqa: E501


        :return: The display of this TestrunresultTestCase.  # noqa: E501
        :rtype: TestrunresultTestCaseDisplay
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this TestrunresultTestCase.


        :param display: The display of this TestrunresultTestCase.  # noqa: E501
        :type: TestrunresultTestCaseDisplay
        """

        self._display = display

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestrunresultTestCase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestrunresultTestCase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
