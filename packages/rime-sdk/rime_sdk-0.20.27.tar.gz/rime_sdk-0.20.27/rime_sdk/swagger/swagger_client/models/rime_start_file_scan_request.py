# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeStartFileScanRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_info': 'FilescanningModelFileInfo',
        'custom_image_type': 'RimeCustomImageType',
        'resource_request_info': 'RimeResourceRequestInfo',
        'workspace_id': 'str',
        'agent_id': 'str'
    }

    attribute_map = {
        'file_info': 'fileInfo',
        'custom_image_type': 'customImageType',
        'resource_request_info': 'resourceRequestInfo',
        'workspace_id': 'workspaceId',
        'agent_id': 'agentId'
    }

    def __init__(self, file_info=None, custom_image_type=None, resource_request_info=None, workspace_id=None, agent_id=None):  # noqa: E501
        """RimeStartFileScanRequest - a model defined in Swagger"""  # noqa: E501
        self._file_info = None
        self._custom_image_type = None
        self._resource_request_info = None
        self._workspace_id = None
        self._agent_id = None
        self.discriminator = None
        if file_info is not None:
            self.file_info = file_info
        if custom_image_type is not None:
            self.custom_image_type = custom_image_type
        if resource_request_info is not None:
            self.resource_request_info = resource_request_info
        if workspace_id is not None:
            self.workspace_id = workspace_id
        if agent_id is not None:
            self.agent_id = agent_id

    @property
    def file_info(self):
        """Gets the file_info of this RimeStartFileScanRequest.  # noqa: E501


        :return: The file_info of this RimeStartFileScanRequest.  # noqa: E501
        :rtype: FilescanningModelFileInfo
        """
        return self._file_info

    @file_info.setter
    def file_info(self, file_info):
        """Sets the file_info of this RimeStartFileScanRequest.


        :param file_info: The file_info of this RimeStartFileScanRequest.  # noqa: E501
        :type: FilescanningModelFileInfo
        """

        self._file_info = file_info

    @property
    def custom_image_type(self):
        """Gets the custom_image_type of this RimeStartFileScanRequest.  # noqa: E501


        :return: The custom_image_type of this RimeStartFileScanRequest.  # noqa: E501
        :rtype: RimeCustomImageType
        """
        return self._custom_image_type

    @custom_image_type.setter
    def custom_image_type(self, custom_image_type):
        """Sets the custom_image_type of this RimeStartFileScanRequest.


        :param custom_image_type: The custom_image_type of this RimeStartFileScanRequest.  # noqa: E501
        :type: RimeCustomImageType
        """

        self._custom_image_type = custom_image_type

    @property
    def resource_request_info(self):
        """Gets the resource_request_info of this RimeStartFileScanRequest.  # noqa: E501


        :return: The resource_request_info of this RimeStartFileScanRequest.  # noqa: E501
        :rtype: RimeResourceRequestInfo
        """
        return self._resource_request_info

    @resource_request_info.setter
    def resource_request_info(self, resource_request_info):
        """Sets the resource_request_info of this RimeStartFileScanRequest.


        :param resource_request_info: The resource_request_info of this RimeStartFileScanRequest.  # noqa: E501
        :type: RimeResourceRequestInfo
        """

        self._resource_request_info = resource_request_info

    @property
    def workspace_id(self):
        """Gets the workspace_id of this RimeStartFileScanRequest.  # noqa: E501

        workspace_id is the workspace the file scanning job belongs to. If not specified, server will attempt to read the workspace from the request context.  # noqa: E501

        :return: The workspace_id of this RimeStartFileScanRequest.  # noqa: E501
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this RimeStartFileScanRequest.

        workspace_id is the workspace the file scanning job belongs to. If not specified, server will attempt to read the workspace from the request context.  # noqa: E501

        :param workspace_id: The workspace_id of this RimeStartFileScanRequest.  # noqa: E501
        :type: str
        """

        self._workspace_id = workspace_id

    @property
    def agent_id(self):
        """Gets the agent_id of this RimeStartFileScanRequest.  # noqa: E501

        agent_id is the agent this job should be run on. If not specified, the default agent for the workspace is used.  # noqa: E501

        :return: The agent_id of this RimeStartFileScanRequest.  # noqa: E501
        :rtype: str
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """Sets the agent_id of this RimeStartFileScanRequest.

        agent_id is the agent this job should be run on. If not specified, the default agent for the workspace is used.  # noqa: E501

        :param agent_id: The agent_id of this RimeStartFileScanRequest.  # noqa: E501
        :type: str
        """

        self._agent_id = agent_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeStartFileScanRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeStartFileScanRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
