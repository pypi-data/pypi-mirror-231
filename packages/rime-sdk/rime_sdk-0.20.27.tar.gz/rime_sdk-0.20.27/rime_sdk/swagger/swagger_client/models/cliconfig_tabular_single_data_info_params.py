# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CliconfigTabularSingleDataInfoParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'label_col': 'str',
        'pred_col': 'str',
        'nrows': 'str',
        'categorical_features': 'list[str]',
        'protected_features': 'list[str]',
        'features_not_in_model': 'list[str]',
        'loading_kwargs': 'str',
        'feature_type_path': 'str',
        'ranking_info': 'CliconfigRankingInfo',
        'timestamp_col': 'str',
        'pred_path': 'str',
        'embeddings': 'list[CliconfigEmbeddingInfo]',
        'nrows_per_time_bin': 'str',
        'sample': 'bool',
        'intersections': 'list[TabularSingleDataInfoParamsFeatureIntersection]'
    }

    attribute_map = {
        'label_col': 'labelCol',
        'pred_col': 'predCol',
        'nrows': 'nrows',
        'categorical_features': 'categoricalFeatures',
        'protected_features': 'protectedFeatures',
        'features_not_in_model': 'featuresNotInModel',
        'loading_kwargs': 'loadingKwargs',
        'feature_type_path': 'featureTypePath',
        'ranking_info': 'rankingInfo',
        'timestamp_col': 'timestampCol',
        'pred_path': 'predPath',
        'embeddings': 'embeddings',
        'nrows_per_time_bin': 'nrowsPerTimeBin',
        'sample': 'sample',
        'intersections': 'intersections'
    }

    def __init__(self, label_col=None, pred_col=None, nrows=None, categorical_features=None, protected_features=None, features_not_in_model=None, loading_kwargs=None, feature_type_path=None, ranking_info=None, timestamp_col=None, pred_path=None, embeddings=None, nrows_per_time_bin=None, sample=None, intersections=None):  # noqa: E501
        """CliconfigTabularSingleDataInfoParams - a model defined in Swagger"""  # noqa: E501
        self._label_col = None
        self._pred_col = None
        self._nrows = None
        self._categorical_features = None
        self._protected_features = None
        self._features_not_in_model = None
        self._loading_kwargs = None
        self._feature_type_path = None
        self._ranking_info = None
        self._timestamp_col = None
        self._pred_path = None
        self._embeddings = None
        self._nrows_per_time_bin = None
        self._sample = None
        self._intersections = None
        self.discriminator = None
        if label_col is not None:
            self.label_col = label_col
        if pred_col is not None:
            self.pred_col = pred_col
        if nrows is not None:
            self.nrows = nrows
        if categorical_features is not None:
            self.categorical_features = categorical_features
        if protected_features is not None:
            self.protected_features = protected_features
        if features_not_in_model is not None:
            self.features_not_in_model = features_not_in_model
        if loading_kwargs is not None:
            self.loading_kwargs = loading_kwargs
        if feature_type_path is not None:
            self.feature_type_path = feature_type_path
        if ranking_info is not None:
            self.ranking_info = ranking_info
        if timestamp_col is not None:
            self.timestamp_col = timestamp_col
        if pred_path is not None:
            self.pred_path = pred_path
        if embeddings is not None:
            self.embeddings = embeddings
        if nrows_per_time_bin is not None:
            self.nrows_per_time_bin = nrows_per_time_bin
        if sample is not None:
            self.sample = sample
        if intersections is not None:
            self.intersections = intersections

    @property
    def label_col(self):
        """Gets the label_col of this CliconfigTabularSingleDataInfoParams.  # noqa: E501


        :return: The label_col of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :rtype: str
        """
        return self._label_col

    @label_col.setter
    def label_col(self, label_col):
        """Sets the label_col of this CliconfigTabularSingleDataInfoParams.


        :param label_col: The label_col of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :type: str
        """

        self._label_col = label_col

    @property
    def pred_col(self):
        """Gets the pred_col of this CliconfigTabularSingleDataInfoParams.  # noqa: E501


        :return: The pred_col of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :rtype: str
        """
        return self._pred_col

    @pred_col.setter
    def pred_col(self, pred_col):
        """Sets the pred_col of this CliconfigTabularSingleDataInfoParams.


        :param pred_col: The pred_col of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :type: str
        """

        self._pred_col = pred_col

    @property
    def nrows(self):
        """Gets the nrows of this CliconfigTabularSingleDataInfoParams.  # noqa: E501


        :return: The nrows of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :rtype: str
        """
        return self._nrows

    @nrows.setter
    def nrows(self, nrows):
        """Sets the nrows of this CliconfigTabularSingleDataInfoParams.


        :param nrows: The nrows of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :type: str
        """

        self._nrows = nrows

    @property
    def categorical_features(self):
        """Gets the categorical_features of this CliconfigTabularSingleDataInfoParams.  # noqa: E501


        :return: The categorical_features of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._categorical_features

    @categorical_features.setter
    def categorical_features(self, categorical_features):
        """Sets the categorical_features of this CliconfigTabularSingleDataInfoParams.


        :param categorical_features: The categorical_features of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :type: list[str]
        """

        self._categorical_features = categorical_features

    @property
    def protected_features(self):
        """Gets the protected_features of this CliconfigTabularSingleDataInfoParams.  # noqa: E501


        :return: The protected_features of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._protected_features

    @protected_features.setter
    def protected_features(self, protected_features):
        """Sets the protected_features of this CliconfigTabularSingleDataInfoParams.


        :param protected_features: The protected_features of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :type: list[str]
        """

        self._protected_features = protected_features

    @property
    def features_not_in_model(self):
        """Gets the features_not_in_model of this CliconfigTabularSingleDataInfoParams.  # noqa: E501


        :return: The features_not_in_model of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._features_not_in_model

    @features_not_in_model.setter
    def features_not_in_model(self, features_not_in_model):
        """Sets the features_not_in_model of this CliconfigTabularSingleDataInfoParams.


        :param features_not_in_model: The features_not_in_model of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :type: list[str]
        """

        self._features_not_in_model = features_not_in_model

    @property
    def loading_kwargs(self):
        """Gets the loading_kwargs of this CliconfigTabularSingleDataInfoParams.  # noqa: E501


        :return: The loading_kwargs of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :rtype: str
        """
        return self._loading_kwargs

    @loading_kwargs.setter
    def loading_kwargs(self, loading_kwargs):
        """Sets the loading_kwargs of this CliconfigTabularSingleDataInfoParams.


        :param loading_kwargs: The loading_kwargs of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :type: str
        """

        self._loading_kwargs = loading_kwargs

    @property
    def feature_type_path(self):
        """Gets the feature_type_path of this CliconfigTabularSingleDataInfoParams.  # noqa: E501


        :return: The feature_type_path of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :rtype: str
        """
        return self._feature_type_path

    @feature_type_path.setter
    def feature_type_path(self, feature_type_path):
        """Sets the feature_type_path of this CliconfigTabularSingleDataInfoParams.


        :param feature_type_path: The feature_type_path of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :type: str
        """

        self._feature_type_path = feature_type_path

    @property
    def ranking_info(self):
        """Gets the ranking_info of this CliconfigTabularSingleDataInfoParams.  # noqa: E501


        :return: The ranking_info of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :rtype: CliconfigRankingInfo
        """
        return self._ranking_info

    @ranking_info.setter
    def ranking_info(self, ranking_info):
        """Sets the ranking_info of this CliconfigTabularSingleDataInfoParams.


        :param ranking_info: The ranking_info of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :type: CliconfigRankingInfo
        """

        self._ranking_info = ranking_info

    @property
    def timestamp_col(self):
        """Gets the timestamp_col of this CliconfigTabularSingleDataInfoParams.  # noqa: E501


        :return: The timestamp_col of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :rtype: str
        """
        return self._timestamp_col

    @timestamp_col.setter
    def timestamp_col(self, timestamp_col):
        """Sets the timestamp_col of this CliconfigTabularSingleDataInfoParams.


        :param timestamp_col: The timestamp_col of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :type: str
        """

        self._timestamp_col = timestamp_col

    @property
    def pred_path(self):
        """Gets the pred_path of this CliconfigTabularSingleDataInfoParams.  # noqa: E501


        :return: The pred_path of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :rtype: str
        """
        return self._pred_path

    @pred_path.setter
    def pred_path(self, pred_path):
        """Sets the pred_path of this CliconfigTabularSingleDataInfoParams.


        :param pred_path: The pred_path of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :type: str
        """

        self._pred_path = pred_path

    @property
    def embeddings(self):
        """Gets the embeddings of this CliconfigTabularSingleDataInfoParams.  # noqa: E501


        :return: The embeddings of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :rtype: list[CliconfigEmbeddingInfo]
        """
        return self._embeddings

    @embeddings.setter
    def embeddings(self, embeddings):
        """Sets the embeddings of this CliconfigTabularSingleDataInfoParams.


        :param embeddings: The embeddings of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :type: list[CliconfigEmbeddingInfo]
        """

        self._embeddings = embeddings

    @property
    def nrows_per_time_bin(self):
        """Gets the nrows_per_time_bin of this CliconfigTabularSingleDataInfoParams.  # noqa: E501


        :return: The nrows_per_time_bin of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :rtype: str
        """
        return self._nrows_per_time_bin

    @nrows_per_time_bin.setter
    def nrows_per_time_bin(self, nrows_per_time_bin):
        """Sets the nrows_per_time_bin of this CliconfigTabularSingleDataInfoParams.


        :param nrows_per_time_bin: The nrows_per_time_bin of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :type: str
        """

        self._nrows_per_time_bin = nrows_per_time_bin

    @property
    def sample(self):
        """Gets the sample of this CliconfigTabularSingleDataInfoParams.  # noqa: E501


        :return: The sample of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :rtype: bool
        """
        return self._sample

    @sample.setter
    def sample(self, sample):
        """Sets the sample of this CliconfigTabularSingleDataInfoParams.


        :param sample: The sample of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :type: bool
        """

        self._sample = sample

    @property
    def intersections(self):
        """Gets the intersections of this CliconfigTabularSingleDataInfoParams.  # noqa: E501


        :return: The intersections of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :rtype: list[TabularSingleDataInfoParamsFeatureIntersection]
        """
        return self._intersections

    @intersections.setter
    def intersections(self, intersections):
        """Sets the intersections of this CliconfigTabularSingleDataInfoParams.


        :param intersections: The intersections of this CliconfigTabularSingleDataInfoParams.  # noqa: E501
        :type: list[TabularSingleDataInfoParamsFeatureIntersection]
        """

        self._intersections = intersections

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CliconfigTabularSingleDataInfoParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CliconfigTabularSingleDataInfoParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
