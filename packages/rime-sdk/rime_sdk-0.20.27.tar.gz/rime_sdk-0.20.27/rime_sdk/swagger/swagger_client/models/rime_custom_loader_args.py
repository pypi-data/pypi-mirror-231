# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeCustomLoaderArgs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'load_path': 'str',
        'load_func_name': 'str',
        'loader_kwargs_json': 'str'
    }

    attribute_map = {
        'load_path': 'loadPath',
        'load_func_name': 'loadFuncName',
        'loader_kwargs_json': 'loaderKwargsJson'
    }

    def __init__(self, load_path=None, load_func_name=None, loader_kwargs_json=None):  # noqa: E501
        """RimeCustomLoaderArgs - a model defined in Swagger"""  # noqa: E501
        self._load_path = None
        self._load_func_name = None
        self._loader_kwargs_json = None
        self.discriminator = None
        if load_path is not None:
            self.load_path = load_path
        if load_func_name is not None:
            self.load_func_name = load_func_name
        if loader_kwargs_json is not None:
            self.loader_kwargs_json = loader_kwargs_json

    @property
    def load_path(self):
        """Gets the load_path of this RimeCustomLoaderArgs.  # noqa: E501


        :return: The load_path of this RimeCustomLoaderArgs.  # noqa: E501
        :rtype: str
        """
        return self._load_path

    @load_path.setter
    def load_path(self, load_path):
        """Sets the load_path of this RimeCustomLoaderArgs.


        :param load_path: The load_path of this RimeCustomLoaderArgs.  # noqa: E501
        :type: str
        """

        self._load_path = load_path

    @property
    def load_func_name(self):
        """Gets the load_func_name of this RimeCustomLoaderArgs.  # noqa: E501


        :return: The load_func_name of this RimeCustomLoaderArgs.  # noqa: E501
        :rtype: str
        """
        return self._load_func_name

    @load_func_name.setter
    def load_func_name(self, load_func_name):
        """Sets the load_func_name of this RimeCustomLoaderArgs.


        :param load_func_name: The load_func_name of this RimeCustomLoaderArgs.  # noqa: E501
        :type: str
        """

        self._load_func_name = load_func_name

    @property
    def loader_kwargs_json(self):
        """Gets the loader_kwargs_json of this RimeCustomLoaderArgs.  # noqa: E501


        :return: The loader_kwargs_json of this RimeCustomLoaderArgs.  # noqa: E501
        :rtype: str
        """
        return self._loader_kwargs_json

    @loader_kwargs_json.setter
    def loader_kwargs_json(self, loader_kwargs_json):
        """Sets the loader_kwargs_json of this RimeCustomLoaderArgs.


        :param loader_kwargs_json: The loader_kwargs_json of this RimeCustomLoaderArgs.  # noqa: E501
        :type: str
        """

        self._loader_kwargs_json = loader_kwargs_json

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeCustomLoaderArgs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeCustomLoaderArgs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
