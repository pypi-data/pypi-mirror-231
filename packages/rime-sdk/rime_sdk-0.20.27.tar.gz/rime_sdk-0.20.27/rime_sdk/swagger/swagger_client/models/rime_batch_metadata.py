# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeBatchMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'test_run_ids': 'list[str]',
        'bin_size': 'RimeBinSize',
        'threshold_infos': 'list[RimeThresholdInfo]'
    }

    attribute_map = {
        'test_run_ids': 'testRunIds',
        'bin_size': 'binSize',
        'threshold_infos': 'thresholdInfos'
    }

    def __init__(self, test_run_ids=None, bin_size=None, threshold_infos=None):  # noqa: E501
        """RimeBatchMetadata - a model defined in Swagger"""  # noqa: E501
        self._test_run_ids = None
        self._bin_size = None
        self._threshold_infos = None
        self.discriminator = None
        if test_run_ids is not None:
            self.test_run_ids = test_run_ids
        if bin_size is not None:
            self.bin_size = bin_size
        if threshold_infos is not None:
            self.threshold_infos = threshold_infos

    @property
    def test_run_ids(self):
        """Gets the test_run_ids of this RimeBatchMetadata.  # noqa: E501


        :return: The test_run_ids of this RimeBatchMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._test_run_ids

    @test_run_ids.setter
    def test_run_ids(self, test_run_ids):
        """Sets the test_run_ids of this RimeBatchMetadata.


        :param test_run_ids: The test_run_ids of this RimeBatchMetadata.  # noqa: E501
        :type: list[str]
        """

        self._test_run_ids = test_run_ids

    @property
    def bin_size(self):
        """Gets the bin_size of this RimeBatchMetadata.  # noqa: E501


        :return: The bin_size of this RimeBatchMetadata.  # noqa: E501
        :rtype: RimeBinSize
        """
        return self._bin_size

    @bin_size.setter
    def bin_size(self, bin_size):
        """Sets the bin_size of this RimeBatchMetadata.


        :param bin_size: The bin_size of this RimeBatchMetadata.  # noqa: E501
        :type: RimeBinSize
        """

        self._bin_size = bin_size

    @property
    def threshold_infos(self):
        """Gets the threshold_infos of this RimeBatchMetadata.  # noqa: E501

        The `threshold_info_map` is a set of key-value pairs that match a summary metric name with the corresponding threshold information used to determine severity and alerting behavior.  # noqa: E501

        :return: The threshold_infos of this RimeBatchMetadata.  # noqa: E501
        :rtype: list[RimeThresholdInfo]
        """
        return self._threshold_infos

    @threshold_infos.setter
    def threshold_infos(self, threshold_infos):
        """Sets the threshold_infos of this RimeBatchMetadata.

        The `threshold_info_map` is a set of key-value pairs that match a summary metric name with the corresponding threshold information used to determine severity and alerting behavior.  # noqa: E501

        :param threshold_infos: The threshold_infos of this RimeBatchMetadata.  # noqa: E501
        :type: list[RimeThresholdInfo]
        """

        self._threshold_infos = threshold_infos

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeBatchMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeBatchMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
