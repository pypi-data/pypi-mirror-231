# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeMonitoredMetric(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'category': 'str',
        'y_axis_label': 'str',
        'number': 'float',
        'percentiles': 'RimePercentiles',
        'severity': 'RimeTestSeverity'
    }

    attribute_map = {
        'name': 'name',
        'category': 'category',
        'y_axis_label': 'yAxisLabel',
        'number': 'number',
        'percentiles': 'percentiles',
        'severity': 'severity'
    }

    def __init__(self, name=None, category=None, y_axis_label=None, number=None, percentiles=None, severity=None):  # noqa: E501
        """RimeMonitoredMetric - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._category = None
        self._y_axis_label = None
        self._number = None
        self._percentiles = None
        self._severity = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if category is not None:
            self.category = category
        if y_axis_label is not None:
            self.y_axis_label = y_axis_label
        if number is not None:
            self.number = number
        if percentiles is not None:
            self.percentiles = percentiles
        if severity is not None:
            self.severity = severity

    @property
    def name(self):
        """Gets the name of this RimeMonitoredMetric.  # noqa: E501


        :return: The name of this RimeMonitoredMetric.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RimeMonitoredMetric.


        :param name: The name of this RimeMonitoredMetric.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def category(self):
        """Gets the category of this RimeMonitoredMetric.  # noqa: E501


        :return: The category of this RimeMonitoredMetric.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this RimeMonitoredMetric.


        :param category: The category of this RimeMonitoredMetric.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def y_axis_label(self):
        """Gets the y_axis_label of this RimeMonitoredMetric.  # noqa: E501


        :return: The y_axis_label of this RimeMonitoredMetric.  # noqa: E501
        :rtype: str
        """
        return self._y_axis_label

    @y_axis_label.setter
    def y_axis_label(self, y_axis_label):
        """Sets the y_axis_label of this RimeMonitoredMetric.


        :param y_axis_label: The y_axis_label of this RimeMonitoredMetric.  # noqa: E501
        :type: str
        """

        self._y_axis_label = y_axis_label

    @property
    def number(self):
        """Gets the number of this RimeMonitoredMetric.  # noqa: E501


        :return: The number of this RimeMonitoredMetric.  # noqa: E501
        :rtype: float
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this RimeMonitoredMetric.


        :param number: The number of this RimeMonitoredMetric.  # noqa: E501
        :type: float
        """

        self._number = number

    @property
    def percentiles(self):
        """Gets the percentiles of this RimeMonitoredMetric.  # noqa: E501


        :return: The percentiles of this RimeMonitoredMetric.  # noqa: E501
        :rtype: RimePercentiles
        """
        return self._percentiles

    @percentiles.setter
    def percentiles(self, percentiles):
        """Sets the percentiles of this RimeMonitoredMetric.


        :param percentiles: The percentiles of this RimeMonitoredMetric.  # noqa: E501
        :type: RimePercentiles
        """

        self._percentiles = percentiles

    @property
    def severity(self):
        """Gets the severity of this RimeMonitoredMetric.  # noqa: E501


        :return: The severity of this RimeMonitoredMetric.  # noqa: E501
        :rtype: RimeTestSeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this RimeMonitoredMetric.


        :param severity: The severity of this RimeMonitoredMetric.  # noqa: E501
        :type: RimeTestSeverity
        """

        self._severity = severity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeMonitoredMetric, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeMonitoredMetric):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
