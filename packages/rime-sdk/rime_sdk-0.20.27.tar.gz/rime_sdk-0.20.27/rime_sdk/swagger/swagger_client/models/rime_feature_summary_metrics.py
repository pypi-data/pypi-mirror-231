# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeFeatureSummaryMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'num_failing_rows': 'str',
        'drift_statistic': 'RimeNamedDouble',
        'pairwise_drift_statistics': 'dict(str, RimeNamedDouble)'
    }

    attribute_map = {
        'num_failing_rows': 'numFailingRows',
        'drift_statistic': 'driftStatistic',
        'pairwise_drift_statistics': 'pairwiseDriftStatistics'
    }

    def __init__(self, num_failing_rows=None, drift_statistic=None, pairwise_drift_statistics=None):  # noqa: E501
        """RimeFeatureSummaryMetrics - a model defined in Swagger"""  # noqa: E501
        self._num_failing_rows = None
        self._drift_statistic = None
        self._pairwise_drift_statistics = None
        self.discriminator = None
        if num_failing_rows is not None:
            self.num_failing_rows = num_failing_rows
        if drift_statistic is not None:
            self.drift_statistic = drift_statistic
        if pairwise_drift_statistics is not None:
            self.pairwise_drift_statistics = pairwise_drift_statistics

    @property
    def num_failing_rows(self):
        """Gets the num_failing_rows of this RimeFeatureSummaryMetrics.  # noqa: E501


        :return: The num_failing_rows of this RimeFeatureSummaryMetrics.  # noqa: E501
        :rtype: str
        """
        return self._num_failing_rows

    @num_failing_rows.setter
    def num_failing_rows(self, num_failing_rows):
        """Sets the num_failing_rows of this RimeFeatureSummaryMetrics.


        :param num_failing_rows: The num_failing_rows of this RimeFeatureSummaryMetrics.  # noqa: E501
        :type: str
        """

        self._num_failing_rows = num_failing_rows

    @property
    def drift_statistic(self):
        """Gets the drift_statistic of this RimeFeatureSummaryMetrics.  # noqa: E501


        :return: The drift_statistic of this RimeFeatureSummaryMetrics.  # noqa: E501
        :rtype: RimeNamedDouble
        """
        return self._drift_statistic

    @drift_statistic.setter
    def drift_statistic(self, drift_statistic):
        """Sets the drift_statistic of this RimeFeatureSummaryMetrics.


        :param drift_statistic: The drift_statistic of this RimeFeatureSummaryMetrics.  # noqa: E501
        :type: RimeNamedDouble
        """

        self._drift_statistic = drift_statistic

    @property
    def pairwise_drift_statistics(self):
        """Gets the pairwise_drift_statistics of this RimeFeatureSummaryMetrics.  # noqa: E501


        :return: The pairwise_drift_statistics of this RimeFeatureSummaryMetrics.  # noqa: E501
        :rtype: dict(str, RimeNamedDouble)
        """
        return self._pairwise_drift_statistics

    @pairwise_drift_statistics.setter
    def pairwise_drift_statistics(self, pairwise_drift_statistics):
        """Sets the pairwise_drift_statistics of this RimeFeatureSummaryMetrics.


        :param pairwise_drift_statistics: The pairwise_drift_statistics of this RimeFeatureSummaryMetrics.  # noqa: E501
        :type: dict(str, RimeNamedDouble)
        """

        self._pairwise_drift_statistics = pairwise_drift_statistics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeFeatureSummaryMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeFeatureSummaryMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
