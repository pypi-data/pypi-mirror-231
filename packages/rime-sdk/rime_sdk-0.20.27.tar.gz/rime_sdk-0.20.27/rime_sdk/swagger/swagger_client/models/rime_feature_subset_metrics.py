# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeFeatureSubsetMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subset_name': 'str',
        'metric_series_lists': 'list[FeatureSubsetMetricsTestMetricSeries]',
        'returned_intervals': 'list[RimeTimeRange]'
    }

    attribute_map = {
        'subset_name': 'subsetName',
        'metric_series_lists': 'metricSeriesLists',
        'returned_intervals': 'returnedIntervals'
    }

    def __init__(self, subset_name=None, metric_series_lists=None, returned_intervals=None):  # noqa: E501
        """RimeFeatureSubsetMetrics - a model defined in Swagger"""  # noqa: E501
        self._subset_name = None
        self._metric_series_lists = None
        self._returned_intervals = None
        self.discriminator = None
        if subset_name is not None:
            self.subset_name = subset_name
        if metric_series_lists is not None:
            self.metric_series_lists = metric_series_lists
        if returned_intervals is not None:
            self.returned_intervals = returned_intervals

    @property
    def subset_name(self):
        """Gets the subset_name of this RimeFeatureSubsetMetrics.  # noqa: E501


        :return: The subset_name of this RimeFeatureSubsetMetrics.  # noqa: E501
        :rtype: str
        """
        return self._subset_name

    @subset_name.setter
    def subset_name(self, subset_name):
        """Sets the subset_name of this RimeFeatureSubsetMetrics.


        :param subset_name: The subset_name of this RimeFeatureSubsetMetrics.  # noqa: E501
        :type: str
        """

        self._subset_name = subset_name

    @property
    def metric_series_lists(self):
        """Gets the metric_series_lists of this RimeFeatureSubsetMetrics.  # noqa: E501

        Each list in the array is a time series of values for a specific metric.  # noqa: E501

        :return: The metric_series_lists of this RimeFeatureSubsetMetrics.  # noqa: E501
        :rtype: list[FeatureSubsetMetricsTestMetricSeries]
        """
        return self._metric_series_lists

    @metric_series_lists.setter
    def metric_series_lists(self, metric_series_lists):
        """Sets the metric_series_lists of this RimeFeatureSubsetMetrics.

        Each list in the array is a time series of values for a specific metric.  # noqa: E501

        :param metric_series_lists: The metric_series_lists of this RimeFeatureSubsetMetrics.  # noqa: E501
        :type: list[FeatureSubsetMetricsTestMetricSeries]
        """

        self._metric_series_lists = metric_series_lists

    @property
    def returned_intervals(self):
        """Gets the returned_intervals of this RimeFeatureSubsetMetrics.  # noqa: E501

        Send the time intervals associated with the list of metrics provided.  # noqa: E501

        :return: The returned_intervals of this RimeFeatureSubsetMetrics.  # noqa: E501
        :rtype: list[RimeTimeRange]
        """
        return self._returned_intervals

    @returned_intervals.setter
    def returned_intervals(self, returned_intervals):
        """Sets the returned_intervals of this RimeFeatureSubsetMetrics.

        Send the time intervals associated with the list of metrics provided.  # noqa: E501

        :param returned_intervals: The returned_intervals of this RimeFeatureSubsetMetrics.  # noqa: E501
        :type: list[RimeTimeRange]
        """

        self._returned_intervals = returned_intervals

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeFeatureSubsetMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeFeatureSubsetMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
