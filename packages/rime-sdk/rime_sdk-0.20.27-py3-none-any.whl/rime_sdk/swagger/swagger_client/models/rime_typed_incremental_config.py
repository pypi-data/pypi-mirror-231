# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeTypedIncrementalConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tabular_incremental_config': 'RimeTabularIncrementalConfig',
        'nlp_incremental_config': 'RimeNLPIncrementalConfig',
        'images_incremental_config': 'RimeImagesIncrementalConfig',
        'include_model': 'bool'
    }

    attribute_map = {
        'tabular_incremental_config': 'tabularIncrementalConfig',
        'nlp_incremental_config': 'nlpIncrementalConfig',
        'images_incremental_config': 'imagesIncrementalConfig',
        'include_model': 'includeModel'
    }

    def __init__(self, tabular_incremental_config=None, nlp_incremental_config=None, images_incremental_config=None, include_model=None):  # noqa: E501
        """RimeTypedIncrementalConfig - a model defined in Swagger"""  # noqa: E501
        self._tabular_incremental_config = None
        self._nlp_incremental_config = None
        self._images_incremental_config = None
        self._include_model = None
        self.discriminator = None
        if tabular_incremental_config is not None:
            self.tabular_incremental_config = tabular_incremental_config
        if nlp_incremental_config is not None:
            self.nlp_incremental_config = nlp_incremental_config
        if images_incremental_config is not None:
            self.images_incremental_config = images_incremental_config
        if include_model is not None:
            self.include_model = include_model

    @property
    def tabular_incremental_config(self):
        """Gets the tabular_incremental_config of this RimeTypedIncrementalConfig.  # noqa: E501


        :return: The tabular_incremental_config of this RimeTypedIncrementalConfig.  # noqa: E501
        :rtype: RimeTabularIncrementalConfig
        """
        return self._tabular_incremental_config

    @tabular_incremental_config.setter
    def tabular_incremental_config(self, tabular_incremental_config):
        """Sets the tabular_incremental_config of this RimeTypedIncrementalConfig.


        :param tabular_incremental_config: The tabular_incremental_config of this RimeTypedIncrementalConfig.  # noqa: E501
        :type: RimeTabularIncrementalConfig
        """

        self._tabular_incremental_config = tabular_incremental_config

    @property
    def nlp_incremental_config(self):
        """Gets the nlp_incremental_config of this RimeTypedIncrementalConfig.  # noqa: E501


        :return: The nlp_incremental_config of this RimeTypedIncrementalConfig.  # noqa: E501
        :rtype: RimeNLPIncrementalConfig
        """
        return self._nlp_incremental_config

    @nlp_incremental_config.setter
    def nlp_incremental_config(self, nlp_incremental_config):
        """Sets the nlp_incremental_config of this RimeTypedIncrementalConfig.


        :param nlp_incremental_config: The nlp_incremental_config of this RimeTypedIncrementalConfig.  # noqa: E501
        :type: RimeNLPIncrementalConfig
        """

        self._nlp_incremental_config = nlp_incremental_config

    @property
    def images_incremental_config(self):
        """Gets the images_incremental_config of this RimeTypedIncrementalConfig.  # noqa: E501


        :return: The images_incremental_config of this RimeTypedIncrementalConfig.  # noqa: E501
        :rtype: RimeImagesIncrementalConfig
        """
        return self._images_incremental_config

    @images_incremental_config.setter
    def images_incremental_config(self, images_incremental_config):
        """Sets the images_incremental_config of this RimeTypedIncrementalConfig.


        :param images_incremental_config: The images_incremental_config of this RimeTypedIncrementalConfig.  # noqa: E501
        :type: RimeImagesIncrementalConfig
        """

        self._images_incremental_config = images_incremental_config

    @property
    def include_model(self):
        """Gets the include_model of this RimeTypedIncrementalConfig.  # noqa: E501


        :return: The include_model of this RimeTypedIncrementalConfig.  # noqa: E501
        :rtype: bool
        """
        return self._include_model

    @include_model.setter
    def include_model(self, include_model):
        """Sets the include_model of this RimeTypedIncrementalConfig.


        :param include_model: The include_model of this RimeTypedIncrementalConfig.  # noqa: E501
        :type: bool
        """

        self._include_model = include_model

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeTypedIncrementalConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeTypedIncrementalConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
