# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeCategoryTestResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'severity': 'RimeTestSeverity',
        'suggestion': 'RimeSuggestion',
        'category_metrics': 'list[RimeCategoryMetric]',
        'test_batch_types': 'list[str]',
        'description': 'str',
        'severity_counts': 'RimeSeverityCounts',
        'failing_test_types': 'list[str]',
        'duration': 'float',
        'category_importance': 'float'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'severity': 'severity',
        'suggestion': 'suggestion',
        'category_metrics': 'categoryMetrics',
        'test_batch_types': 'testBatchTypes',
        'description': 'description',
        'severity_counts': 'severityCounts',
        'failing_test_types': 'failingTestTypes',
        'duration': 'duration',
        'category_importance': 'categoryImportance'
    }

    def __init__(self, id=None, name=None, severity=None, suggestion=None, category_metrics=None, test_batch_types=None, description=None, severity_counts=None, failing_test_types=None, duration=None, category_importance=None):  # noqa: E501
        """RimeCategoryTestResult - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._severity = None
        self._suggestion = None
        self._category_metrics = None
        self._test_batch_types = None
        self._description = None
        self._severity_counts = None
        self._failing_test_types = None
        self._duration = None
        self._category_importance = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if severity is not None:
            self.severity = severity
        if suggestion is not None:
            self.suggestion = suggestion
        if category_metrics is not None:
            self.category_metrics = category_metrics
        if test_batch_types is not None:
            self.test_batch_types = test_batch_types
        if description is not None:
            self.description = description
        if severity_counts is not None:
            self.severity_counts = severity_counts
        if failing_test_types is not None:
            self.failing_test_types = failing_test_types
        if duration is not None:
            self.duration = duration
        if category_importance is not None:
            self.category_importance = category_importance

    @property
    def id(self):
        """Gets the id of this RimeCategoryTestResult.  # noqa: E501


        :return: The id of this RimeCategoryTestResult.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RimeCategoryTestResult.


        :param id: The id of this RimeCategoryTestResult.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RimeCategoryTestResult.  # noqa: E501


        :return: The name of this RimeCategoryTestResult.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RimeCategoryTestResult.


        :param name: The name of this RimeCategoryTestResult.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def severity(self):
        """Gets the severity of this RimeCategoryTestResult.  # noqa: E501


        :return: The severity of this RimeCategoryTestResult.  # noqa: E501
        :rtype: RimeTestSeverity
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this RimeCategoryTestResult.


        :param severity: The severity of this RimeCategoryTestResult.  # noqa: E501
        :type: RimeTestSeverity
        """

        self._severity = severity

    @property
    def suggestion(self):
        """Gets the suggestion of this RimeCategoryTestResult.  # noqa: E501


        :return: The suggestion of this RimeCategoryTestResult.  # noqa: E501
        :rtype: RimeSuggestion
        """
        return self._suggestion

    @suggestion.setter
    def suggestion(self, suggestion):
        """Sets the suggestion of this RimeCategoryTestResult.


        :param suggestion: The suggestion of this RimeCategoryTestResult.  # noqa: E501
        :type: RimeSuggestion
        """

        self._suggestion = suggestion

    @property
    def category_metrics(self):
        """Gets the category_metrics of this RimeCategoryTestResult.  # noqa: E501


        :return: The category_metrics of this RimeCategoryTestResult.  # noqa: E501
        :rtype: list[RimeCategoryMetric]
        """
        return self._category_metrics

    @category_metrics.setter
    def category_metrics(self, category_metrics):
        """Sets the category_metrics of this RimeCategoryTestResult.


        :param category_metrics: The category_metrics of this RimeCategoryTestResult.  # noqa: E501
        :type: list[RimeCategoryMetric]
        """

        self._category_metrics = category_metrics

    @property
    def test_batch_types(self):
        """Gets the test_batch_types of this RimeCategoryTestResult.  # noqa: E501


        :return: The test_batch_types of this RimeCategoryTestResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._test_batch_types

    @test_batch_types.setter
    def test_batch_types(self, test_batch_types):
        """Sets the test_batch_types of this RimeCategoryTestResult.


        :param test_batch_types: The test_batch_types of this RimeCategoryTestResult.  # noqa: E501
        :type: list[str]
        """

        self._test_batch_types = test_batch_types

    @property
    def description(self):
        """Gets the description of this RimeCategoryTestResult.  # noqa: E501


        :return: The description of this RimeCategoryTestResult.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RimeCategoryTestResult.


        :param description: The description of this RimeCategoryTestResult.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def severity_counts(self):
        """Gets the severity_counts of this RimeCategoryTestResult.  # noqa: E501


        :return: The severity_counts of this RimeCategoryTestResult.  # noqa: E501
        :rtype: RimeSeverityCounts
        """
        return self._severity_counts

    @severity_counts.setter
    def severity_counts(self, severity_counts):
        """Sets the severity_counts of this RimeCategoryTestResult.


        :param severity_counts: The severity_counts of this RimeCategoryTestResult.  # noqa: E501
        :type: RimeSeverityCounts
        """

        self._severity_counts = severity_counts

    @property
    def failing_test_types(self):
        """Gets the failing_test_types of this RimeCategoryTestResult.  # noqa: E501


        :return: The failing_test_types of this RimeCategoryTestResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._failing_test_types

    @failing_test_types.setter
    def failing_test_types(self, failing_test_types):
        """Sets the failing_test_types of this RimeCategoryTestResult.


        :param failing_test_types: The failing_test_types of this RimeCategoryTestResult.  # noqa: E501
        :type: list[str]
        """

        self._failing_test_types = failing_test_types

    @property
    def duration(self):
        """Gets the duration of this RimeCategoryTestResult.  # noqa: E501


        :return: The duration of this RimeCategoryTestResult.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this RimeCategoryTestResult.


        :param duration: The duration of this RimeCategoryTestResult.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def category_importance(self):
        """Gets the category_importance of this RimeCategoryTestResult.  # noqa: E501


        :return: The category_importance of this RimeCategoryTestResult.  # noqa: E501
        :rtype: float
        """
        return self._category_importance

    @category_importance.setter
    def category_importance(self, category_importance):
        """Sets the category_importance of this RimeCategoryTestResult.


        :param category_importance: The category_importance of this RimeCategoryTestResult.  # noqa: E501
        :type: float
        """

        self._category_importance = category_importance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeCategoryTestResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeCategoryTestResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
