# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeAnnotatedProject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project': 'RimeProject',
        'last_test_run_time': 'datetime',
        'test_run_count': 'str',
        'test_run_count_mappings': 'list[RimeTestRunCountMapping]',
        'web_app_url': 'RimeSafeURL'
    }

    attribute_map = {
        'project': 'project',
        'last_test_run_time': 'lastTestRunTime',
        'test_run_count': 'testRunCount',
        'test_run_count_mappings': 'testRunCountMappings',
        'web_app_url': 'webAppUrl'
    }

    def __init__(self, project=None, last_test_run_time=None, test_run_count=None, test_run_count_mappings=None, web_app_url=None):  # noqa: E501
        """RimeAnnotatedProject - a model defined in Swagger"""  # noqa: E501
        self._project = None
        self._last_test_run_time = None
        self._test_run_count = None
        self._test_run_count_mappings = None
        self._web_app_url = None
        self.discriminator = None
        if project is not None:
            self.project = project
        if last_test_run_time is not None:
            self.last_test_run_time = last_test_run_time
        if test_run_count is not None:
            self.test_run_count = test_run_count
        if test_run_count_mappings is not None:
            self.test_run_count_mappings = test_run_count_mappings
        if web_app_url is not None:
            self.web_app_url = web_app_url

    @property
    def project(self):
        """Gets the project of this RimeAnnotatedProject.  # noqa: E501


        :return: The project of this RimeAnnotatedProject.  # noqa: E501
        :rtype: RimeProject
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this RimeAnnotatedProject.


        :param project: The project of this RimeAnnotatedProject.  # noqa: E501
        :type: RimeProject
        """

        self._project = project

    @property
    def last_test_run_time(self):
        """Gets the last_test_run_time of this RimeAnnotatedProject.  # noqa: E501


        :return: The last_test_run_time of this RimeAnnotatedProject.  # noqa: E501
        :rtype: datetime
        """
        return self._last_test_run_time

    @last_test_run_time.setter
    def last_test_run_time(self, last_test_run_time):
        """Sets the last_test_run_time of this RimeAnnotatedProject.


        :param last_test_run_time: The last_test_run_time of this RimeAnnotatedProject.  # noqa: E501
        :type: datetime
        """

        self._last_test_run_time = last_test_run_time

    @property
    def test_run_count(self):
        """Gets the test_run_count of this RimeAnnotatedProject.  # noqa: E501

        This unsigned int field just computes the total testRun count. TODO: deprecate this in favor of the map of (testType->count).  # noqa: E501

        :return: The test_run_count of this RimeAnnotatedProject.  # noqa: E501
        :rtype: str
        """
        return self._test_run_count

    @test_run_count.setter
    def test_run_count(self, test_run_count):
        """Sets the test_run_count of this RimeAnnotatedProject.

        This unsigned int field just computes the total testRun count. TODO: deprecate this in favor of the map of (testType->count).  # noqa: E501

        :param test_run_count: The test_run_count of this RimeAnnotatedProject.  # noqa: E501
        :type: str
        """

        self._test_run_count = test_run_count

    @property
    def test_run_count_mappings(self):
        """Gets the test_run_count_mappings of this RimeAnnotatedProject.  # noqa: E501


        :return: The test_run_count_mappings of this RimeAnnotatedProject.  # noqa: E501
        :rtype: list[RimeTestRunCountMapping]
        """
        return self._test_run_count_mappings

    @test_run_count_mappings.setter
    def test_run_count_mappings(self, test_run_count_mappings):
        """Sets the test_run_count_mappings of this RimeAnnotatedProject.


        :param test_run_count_mappings: The test_run_count_mappings of this RimeAnnotatedProject.  # noqa: E501
        :type: list[RimeTestRunCountMapping]
        """

        self._test_run_count_mappings = test_run_count_mappings

    @property
    def web_app_url(self):
        """Gets the web_app_url of this RimeAnnotatedProject.  # noqa: E501


        :return: The web_app_url of this RimeAnnotatedProject.  # noqa: E501
        :rtype: RimeSafeURL
        """
        return self._web_app_url

    @web_app_url.setter
    def web_app_url(self, web_app_url):
        """Sets the web_app_url of this RimeAnnotatedProject.


        :param web_app_url: The web_app_url of this RimeAnnotatedProject.  # noqa: E501
        :type: RimeSafeURL
        """

        self._web_app_url = web_app_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeAnnotatedProject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeAnnotatedProject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
