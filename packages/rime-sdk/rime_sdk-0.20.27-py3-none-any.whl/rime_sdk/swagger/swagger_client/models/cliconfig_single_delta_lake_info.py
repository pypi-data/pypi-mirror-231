# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CliconfigSingleDeltaLakeInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'server_hostname': 'str',
        'http_path': 'str',
        'table_name': 'str',
        'start_time': 'str',
        'end_time': 'str',
        'time_col': 'str'
    }

    attribute_map = {
        'server_hostname': 'serverHostname',
        'http_path': 'httpPath',
        'table_name': 'tableName',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'time_col': 'timeCol'
    }

    def __init__(self, server_hostname=None, http_path=None, table_name=None, start_time=None, end_time=None, time_col=None):  # noqa: E501
        """CliconfigSingleDeltaLakeInfo - a model defined in Swagger"""  # noqa: E501
        self._server_hostname = None
        self._http_path = None
        self._table_name = None
        self._start_time = None
        self._end_time = None
        self._time_col = None
        self.discriminator = None
        if server_hostname is not None:
            self.server_hostname = server_hostname
        if http_path is not None:
            self.http_path = http_path
        if table_name is not None:
            self.table_name = table_name
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if time_col is not None:
            self.time_col = time_col

    @property
    def server_hostname(self):
        """Gets the server_hostname of this CliconfigSingleDeltaLakeInfo.  # noqa: E501

        The following fields will be filled by the Model Testing Server.  # noqa: E501

        :return: The server_hostname of this CliconfigSingleDeltaLakeInfo.  # noqa: E501
        :rtype: str
        """
        return self._server_hostname

    @server_hostname.setter
    def server_hostname(self, server_hostname):
        """Sets the server_hostname of this CliconfigSingleDeltaLakeInfo.

        The following fields will be filled by the Model Testing Server.  # noqa: E501

        :param server_hostname: The server_hostname of this CliconfigSingleDeltaLakeInfo.  # noqa: E501
        :type: str
        """

        self._server_hostname = server_hostname

    @property
    def http_path(self):
        """Gets the http_path of this CliconfigSingleDeltaLakeInfo.  # noqa: E501


        :return: The http_path of this CliconfigSingleDeltaLakeInfo.  # noqa: E501
        :rtype: str
        """
        return self._http_path

    @http_path.setter
    def http_path(self, http_path):
        """Sets the http_path of this CliconfigSingleDeltaLakeInfo.


        :param http_path: The http_path of this CliconfigSingleDeltaLakeInfo.  # noqa: E501
        :type: str
        """

        self._http_path = http_path

    @property
    def table_name(self):
        """Gets the table_name of this CliconfigSingleDeltaLakeInfo.  # noqa: E501


        :return: The table_name of this CliconfigSingleDeltaLakeInfo.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this CliconfigSingleDeltaLakeInfo.


        :param table_name: The table_name of this CliconfigSingleDeltaLakeInfo.  # noqa: E501
        :type: str
        """

        self._table_name = table_name

    @property
    def start_time(self):
        """Gets the start_time of this CliconfigSingleDeltaLakeInfo.  # noqa: E501


        :return: The start_time of this CliconfigSingleDeltaLakeInfo.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this CliconfigSingleDeltaLakeInfo.


        :param start_time: The start_time of this CliconfigSingleDeltaLakeInfo.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this CliconfigSingleDeltaLakeInfo.  # noqa: E501


        :return: The end_time of this CliconfigSingleDeltaLakeInfo.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this CliconfigSingleDeltaLakeInfo.


        :param end_time: The end_time of this CliconfigSingleDeltaLakeInfo.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def time_col(self):
        """Gets the time_col of this CliconfigSingleDeltaLakeInfo.  # noqa: E501


        :return: The time_col of this CliconfigSingleDeltaLakeInfo.  # noqa: E501
        :rtype: str
        """
        return self._time_col

    @time_col.setter
    def time_col(self, time_col):
        """Sets the time_col of this CliconfigSingleDeltaLakeInfo.


        :param time_col: The time_col of this CliconfigSingleDeltaLakeInfo.  # noqa: E501
        :type: str
        """

        self._time_col = time_col

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CliconfigSingleDeltaLakeInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CliconfigSingleDeltaLakeInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
