# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeIssue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'test_case_id': 'str',
        'test_case_descriptor': 'str',
        'text_template': 'str',
        'num_abnormal_inputs': 'str',
        'drift_statistic': 'RimeNamedDouble',
        'value_counts': 'dict(str, str)',
        'test_type': 'str'
    }

    attribute_map = {
        'test_case_id': 'testCaseId',
        'test_case_descriptor': 'testCaseDescriptor',
        'text_template': 'textTemplate',
        'num_abnormal_inputs': 'numAbnormalInputs',
        'drift_statistic': 'driftStatistic',
        'value_counts': 'valueCounts',
        'test_type': 'testType'
    }

    def __init__(self, test_case_id=None, test_case_descriptor=None, text_template=None, num_abnormal_inputs=None, drift_statistic=None, value_counts=None, test_type=None):  # noqa: E501
        """RimeIssue - a model defined in Swagger"""  # noqa: E501
        self._test_case_id = None
        self._test_case_descriptor = None
        self._text_template = None
        self._num_abnormal_inputs = None
        self._drift_statistic = None
        self._value_counts = None
        self._test_type = None
        self.discriminator = None
        if test_case_id is not None:
            self.test_case_id = test_case_id
        if test_case_descriptor is not None:
            self.test_case_descriptor = test_case_descriptor
        if text_template is not None:
            self.text_template = text_template
        if num_abnormal_inputs is not None:
            self.num_abnormal_inputs = num_abnormal_inputs
        if drift_statistic is not None:
            self.drift_statistic = drift_statistic
        if value_counts is not None:
            self.value_counts = value_counts
        if test_type is not None:
            self.test_type = test_type

    @property
    def test_case_id(self):
        """Gets the test_case_id of this RimeIssue.  # noqa: E501


        :return: The test_case_id of this RimeIssue.  # noqa: E501
        :rtype: str
        """
        return self._test_case_id

    @test_case_id.setter
    def test_case_id(self, test_case_id):
        """Sets the test_case_id of this RimeIssue.


        :param test_case_id: The test_case_id of this RimeIssue.  # noqa: E501
        :type: str
        """

        self._test_case_id = test_case_id

    @property
    def test_case_descriptor(self):
        """Gets the test_case_descriptor of this RimeIssue.  # noqa: E501


        :return: The test_case_descriptor of this RimeIssue.  # noqa: E501
        :rtype: str
        """
        return self._test_case_descriptor

    @test_case_descriptor.setter
    def test_case_descriptor(self, test_case_descriptor):
        """Sets the test_case_descriptor of this RimeIssue.


        :param test_case_descriptor: The test_case_descriptor of this RimeIssue.  # noqa: E501
        :type: str
        """

        self._test_case_descriptor = test_case_descriptor

    @property
    def text_template(self):
        """Gets the text_template of this RimeIssue.  # noqa: E501


        :return: The text_template of this RimeIssue.  # noqa: E501
        :rtype: str
        """
        return self._text_template

    @text_template.setter
    def text_template(self, text_template):
        """Sets the text_template of this RimeIssue.


        :param text_template: The text_template of this RimeIssue.  # noqa: E501
        :type: str
        """

        self._text_template = text_template

    @property
    def num_abnormal_inputs(self):
        """Gets the num_abnormal_inputs of this RimeIssue.  # noqa: E501


        :return: The num_abnormal_inputs of this RimeIssue.  # noqa: E501
        :rtype: str
        """
        return self._num_abnormal_inputs

    @num_abnormal_inputs.setter
    def num_abnormal_inputs(self, num_abnormal_inputs):
        """Sets the num_abnormal_inputs of this RimeIssue.


        :param num_abnormal_inputs: The num_abnormal_inputs of this RimeIssue.  # noqa: E501
        :type: str
        """

        self._num_abnormal_inputs = num_abnormal_inputs

    @property
    def drift_statistic(self):
        """Gets the drift_statistic of this RimeIssue.  # noqa: E501


        :return: The drift_statistic of this RimeIssue.  # noqa: E501
        :rtype: RimeNamedDouble
        """
        return self._drift_statistic

    @drift_statistic.setter
    def drift_statistic(self, drift_statistic):
        """Sets the drift_statistic of this RimeIssue.


        :param drift_statistic: The drift_statistic of this RimeIssue.  # noqa: E501
        :type: RimeNamedDouble
        """

        self._drift_statistic = drift_statistic

    @property
    def value_counts(self):
        """Gets the value_counts of this RimeIssue.  # noqa: E501


        :return: The value_counts of this RimeIssue.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._value_counts

    @value_counts.setter
    def value_counts(self, value_counts):
        """Sets the value_counts of this RimeIssue.


        :param value_counts: The value_counts of this RimeIssue.  # noqa: E501
        :type: dict(str, str)
        """

        self._value_counts = value_counts

    @property
    def test_type(self):
        """Gets the test_type of this RimeIssue.  # noqa: E501


        :return: The test_type of this RimeIssue.  # noqa: E501
        :rtype: str
        """
        return self._test_type

    @test_type.setter
    def test_type(self, test_type):
        """Sets the test_type of this RimeIssue.


        :param test_type: The test_type of this RimeIssue.  # noqa: E501
        :type: str
        """

        self._test_type = test_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeIssue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeIssue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
