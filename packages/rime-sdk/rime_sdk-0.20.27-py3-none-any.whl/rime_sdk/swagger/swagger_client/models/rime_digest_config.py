# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RimeDigestConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'frequency': 'DigestConfigDigestFrequency',
        'hour_offset': 'int'
    }

    attribute_map = {
        'frequency': 'frequency',
        'hour_offset': 'hourOffset'
    }

    def __init__(self, frequency=None, hour_offset=None):  # noqa: E501
        """RimeDigestConfig - a model defined in Swagger"""  # noqa: E501
        self._frequency = None
        self._hour_offset = None
        self.discriminator = None
        if frequency is not None:
            self.frequency = frequency
        if hour_offset is not None:
            self.hour_offset = hour_offset

    @property
    def frequency(self):
        """Gets the frequency of this RimeDigestConfig.  # noqa: E501


        :return: The frequency of this RimeDigestConfig.  # noqa: E501
        :rtype: DigestConfigDigestFrequency
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this RimeDigestConfig.


        :param frequency: The frequency of this RimeDigestConfig.  # noqa: E501
        :type: DigestConfigDigestFrequency
        """

        self._frequency = frequency

    @property
    def hour_offset(self):
        """Gets the hour_offset of this RimeDigestConfig.  # noqa: E501

        This defines the offset in the day when the digest will start. The offset is taken in the configured timezone for the workspace. If not provided in write calls to the backend, a default value will be provided. The default is currently 8 am.  # noqa: E501

        :return: The hour_offset of this RimeDigestConfig.  # noqa: E501
        :rtype: int
        """
        return self._hour_offset

    @hour_offset.setter
    def hour_offset(self, hour_offset):
        """Sets the hour_offset of this RimeDigestConfig.

        This defines the offset in the day when the digest will start. The offset is taken in the configured timezone for the workspace. If not provided in write calls to the backend, a default value will be provided. The default is currently 8 am.  # noqa: E501

        :param hour_offset: The hour_offset of this RimeDigestConfig.  # noqa: E501
        :type: int
        """

        self._hour_offset = hour_offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RimeDigestConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RimeDigestConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
