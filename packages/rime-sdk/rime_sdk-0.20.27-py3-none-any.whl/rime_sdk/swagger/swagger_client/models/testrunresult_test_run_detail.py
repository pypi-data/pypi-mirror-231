# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TestrunresultTestRunDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'test_run_id': 'str',
        'name': 'str',
        'project_id': 'str',
        'testing_type': 'RimeTestType',
        'data_type': 'RimeDataType',
        'model_task': 'RimeModelTask',
        'upload_time': 'datetime',
        'web_app_url': 'RimeSafeURL',
        'data_source_info': 'TestRunDetailDataSourceInfo',
        'model_source_info': 'TestrunresultModelSourceInfo',
        'metrics': 'TestrunresultTestRunMetrics',
        'ct_info': 'TestrunresultCTInfo',
        'status': 'RimeTestTaskStatus',
        'progress': 'str',
        'category_test_ids': 'list[str]'
    }

    attribute_map = {
        'test_run_id': 'testRunId',
        'name': 'name',
        'project_id': 'projectId',
        'testing_type': 'testingType',
        'data_type': 'dataType',
        'model_task': 'modelTask',
        'upload_time': 'uploadTime',
        'web_app_url': 'webAppUrl',
        'data_source_info': 'dataSourceInfo',
        'model_source_info': 'modelSourceInfo',
        'metrics': 'metrics',
        'ct_info': 'ctInfo',
        'status': 'status',
        'progress': 'progress',
        'category_test_ids': 'categoryTestIds'
    }

    def __init__(self, test_run_id=None, name=None, project_id=None, testing_type=None, data_type=None, model_task=None, upload_time=None, web_app_url=None, data_source_info=None, model_source_info=None, metrics=None, ct_info=None, status=None, progress=None, category_test_ids=None):  # noqa: E501
        """TestrunresultTestRunDetail - a model defined in Swagger"""  # noqa: E501
        self._test_run_id = None
        self._name = None
        self._project_id = None
        self._testing_type = None
        self._data_type = None
        self._model_task = None
        self._upload_time = None
        self._web_app_url = None
        self._data_source_info = None
        self._model_source_info = None
        self._metrics = None
        self._ct_info = None
        self._status = None
        self._progress = None
        self._category_test_ids = None
        self.discriminator = None
        if test_run_id is not None:
            self.test_run_id = test_run_id
        if name is not None:
            self.name = name
        if project_id is not None:
            self.project_id = project_id
        if testing_type is not None:
            self.testing_type = testing_type
        if data_type is not None:
            self.data_type = data_type
        if model_task is not None:
            self.model_task = model_task
        if upload_time is not None:
            self.upload_time = upload_time
        if web_app_url is not None:
            self.web_app_url = web_app_url
        if data_source_info is not None:
            self.data_source_info = data_source_info
        if model_source_info is not None:
            self.model_source_info = model_source_info
        if metrics is not None:
            self.metrics = metrics
        if ct_info is not None:
            self.ct_info = ct_info
        if status is not None:
            self.status = status
        if progress is not None:
            self.progress = progress
        if category_test_ids is not None:
            self.category_test_ids = category_test_ids

    @property
    def test_run_id(self):
        """Gets the test_run_id of this TestrunresultTestRunDetail.  # noqa: E501

        RIME engine generated UUID.  # noqa: E501

        :return: The test_run_id of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: str
        """
        return self._test_run_id

    @test_run_id.setter
    def test_run_id(self, test_run_id):
        """Sets the test_run_id of this TestrunresultTestRunDetail.

        RIME engine generated UUID.  # noqa: E501

        :param test_run_id: The test_run_id of this TestrunresultTestRunDetail.  # noqa: E501
        :type: str
        """

        self._test_run_id = test_run_id

    @property
    def name(self):
        """Gets the name of this TestrunresultTestRunDetail.  # noqa: E501


        :return: The name of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TestrunresultTestRunDetail.


        :param name: The name of this TestrunresultTestRunDetail.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def project_id(self):
        """Gets the project_id of this TestrunresultTestRunDetail.  # noqa: E501


        :return: The project_id of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this TestrunresultTestRunDetail.


        :param project_id: The project_id of this TestrunresultTestRunDetail.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def testing_type(self):
        """Gets the testing_type of this TestrunresultTestRunDetail.  # noqa: E501


        :return: The testing_type of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: RimeTestType
        """
        return self._testing_type

    @testing_type.setter
    def testing_type(self, testing_type):
        """Sets the testing_type of this TestrunresultTestRunDetail.


        :param testing_type: The testing_type of this TestrunresultTestRunDetail.  # noqa: E501
        :type: RimeTestType
        """

        self._testing_type = testing_type

    @property
    def data_type(self):
        """Gets the data_type of this TestrunresultTestRunDetail.  # noqa: E501


        :return: The data_type of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: RimeDataType
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this TestrunresultTestRunDetail.


        :param data_type: The data_type of this TestrunresultTestRunDetail.  # noqa: E501
        :type: RimeDataType
        """

        self._data_type = data_type

    @property
    def model_task(self):
        """Gets the model_task of this TestrunresultTestRunDetail.  # noqa: E501


        :return: The model_task of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: RimeModelTask
        """
        return self._model_task

    @model_task.setter
    def model_task(self, model_task):
        """Sets the model_task of this TestrunresultTestRunDetail.


        :param model_task: The model_task of this TestrunresultTestRunDetail.  # noqa: E501
        :type: RimeModelTask
        """

        self._model_task = model_task

    @property
    def upload_time(self):
        """Gets the upload_time of this TestrunresultTestRunDetail.  # noqa: E501


        :return: The upload_time of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: datetime
        """
        return self._upload_time

    @upload_time.setter
    def upload_time(self, upload_time):
        """Sets the upload_time of this TestrunresultTestRunDetail.


        :param upload_time: The upload_time of this TestrunresultTestRunDetail.  # noqa: E501
        :type: datetime
        """

        self._upload_time = upload_time

    @property
    def web_app_url(self):
        """Gets the web_app_url of this TestrunresultTestRunDetail.  # noqa: E501


        :return: The web_app_url of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: RimeSafeURL
        """
        return self._web_app_url

    @web_app_url.setter
    def web_app_url(self, web_app_url):
        """Sets the web_app_url of this TestrunresultTestRunDetail.


        :param web_app_url: The web_app_url of this TestrunresultTestRunDetail.  # noqa: E501
        :type: RimeSafeURL
        """

        self._web_app_url = web_app_url

    @property
    def data_source_info(self):
        """Gets the data_source_info of this TestrunresultTestRunDetail.  # noqa: E501


        :return: The data_source_info of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: TestRunDetailDataSourceInfo
        """
        return self._data_source_info

    @data_source_info.setter
    def data_source_info(self, data_source_info):
        """Sets the data_source_info of this TestrunresultTestRunDetail.


        :param data_source_info: The data_source_info of this TestrunresultTestRunDetail.  # noqa: E501
        :type: TestRunDetailDataSourceInfo
        """

        self._data_source_info = data_source_info

    @property
    def model_source_info(self):
        """Gets the model_source_info of this TestrunresultTestRunDetail.  # noqa: E501


        :return: The model_source_info of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: TestrunresultModelSourceInfo
        """
        return self._model_source_info

    @model_source_info.setter
    def model_source_info(self, model_source_info):
        """Sets the model_source_info of this TestrunresultTestRunDetail.


        :param model_source_info: The model_source_info of this TestrunresultTestRunDetail.  # noqa: E501
        :type: TestrunresultModelSourceInfo
        """

        self._model_source_info = model_source_info

    @property
    def metrics(self):
        """Gets the metrics of this TestrunresultTestRunDetail.  # noqa: E501


        :return: The metrics of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: TestrunresultTestRunMetrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this TestrunresultTestRunDetail.


        :param metrics: The metrics of this TestrunresultTestRunDetail.  # noqa: E501
        :type: TestrunresultTestRunMetrics
        """

        self._metrics = metrics

    @property
    def ct_info(self):
        """Gets the ct_info of this TestrunresultTestRunDetail.  # noqa: E501


        :return: The ct_info of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: TestrunresultCTInfo
        """
        return self._ct_info

    @ct_info.setter
    def ct_info(self, ct_info):
        """Sets the ct_info of this TestrunresultTestRunDetail.


        :param ct_info: The ct_info of this TestrunresultTestRunDetail.  # noqa: E501
        :type: TestrunresultCTInfo
        """

        self._ct_info = ct_info

    @property
    def status(self):
        """Gets the status of this TestrunresultTestRunDetail.  # noqa: E501


        :return: The status of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: RimeTestTaskStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TestrunresultTestRunDetail.


        :param status: The status of this TestrunresultTestRunDetail.  # noqa: E501
        :type: RimeTestTaskStatus
        """

        self._status = status

    @property
    def progress(self):
        """Gets the progress of this TestrunresultTestRunDetail.  # noqa: E501

        Human-readable succinct message about the progress of the test run.  # noqa: E501

        :return: The progress of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: str
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this TestrunresultTestRunDetail.

        Human-readable succinct message about the progress of the test run.  # noqa: E501

        :param progress: The progress of this TestrunresultTestRunDetail.  # noqa: E501
        :type: str
        """

        self._progress = progress

    @property
    def category_test_ids(self):
        """Gets the category_test_ids of this TestrunresultTestRunDetail.  # noqa: E501

        List of child reference to the category tests belonging to this test run.  # noqa: E501

        :return: The category_test_ids of this TestrunresultTestRunDetail.  # noqa: E501
        :rtype: list[str]
        """
        return self._category_test_ids

    @category_test_ids.setter
    def category_test_ids(self, category_test_ids):
        """Sets the category_test_ids of this TestrunresultTestRunDetail.

        List of child reference to the category tests belonging to this test run.  # noqa: E501

        :param category_test_ids: The category_test_ids of this TestrunresultTestRunDetail.  # noqa: E501
        :type: list[str]
        """

        self._category_test_ids = category_test_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestrunresultTestRunDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestrunresultTestRunDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
