# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CliconfigNLPSingleDataInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'single_data_file_info': 'CliconfigNLPSingleDataFileInfo',
        'single_data_loading_info': 'CliconfigSingleDataLoadingInfo',
        'huggingface_single_data_loading_info': 'CliconfigHuggingFaceSingleDataLoadingInfo',
        'single_delta_lake_info': 'CliconfigSingleDeltaLakeInfo',
        'single_data_collector_info': 'CliconfigSingleDataCollectorInfo',
        'single_params': 'CliconfigUnstructuredSingleDataInfoParams'
    }

    attribute_map = {
        'single_data_file_info': 'singleDataFileInfo',
        'single_data_loading_info': 'singleDataLoadingInfo',
        'huggingface_single_data_loading_info': 'huggingfaceSingleDataLoadingInfo',
        'single_delta_lake_info': 'singleDeltaLakeInfo',
        'single_data_collector_info': 'singleDataCollectorInfo',
        'single_params': 'singleParams'
    }

    def __init__(self, single_data_file_info=None, single_data_loading_info=None, huggingface_single_data_loading_info=None, single_delta_lake_info=None, single_data_collector_info=None, single_params=None):  # noqa: E501
        """CliconfigNLPSingleDataInfo - a model defined in Swagger"""  # noqa: E501
        self._single_data_file_info = None
        self._single_data_loading_info = None
        self._huggingface_single_data_loading_info = None
        self._single_delta_lake_info = None
        self._single_data_collector_info = None
        self._single_params = None
        self.discriminator = None
        if single_data_file_info is not None:
            self.single_data_file_info = single_data_file_info
        if single_data_loading_info is not None:
            self.single_data_loading_info = single_data_loading_info
        if huggingface_single_data_loading_info is not None:
            self.huggingface_single_data_loading_info = huggingface_single_data_loading_info
        if single_delta_lake_info is not None:
            self.single_delta_lake_info = single_delta_lake_info
        if single_data_collector_info is not None:
            self.single_data_collector_info = single_data_collector_info
        if single_params is not None:
            self.single_params = single_params

    @property
    def single_data_file_info(self):
        """Gets the single_data_file_info of this CliconfigNLPSingleDataInfo.  # noqa: E501


        :return: The single_data_file_info of this CliconfigNLPSingleDataInfo.  # noqa: E501
        :rtype: CliconfigNLPSingleDataFileInfo
        """
        return self._single_data_file_info

    @single_data_file_info.setter
    def single_data_file_info(self, single_data_file_info):
        """Sets the single_data_file_info of this CliconfigNLPSingleDataInfo.


        :param single_data_file_info: The single_data_file_info of this CliconfigNLPSingleDataInfo.  # noqa: E501
        :type: CliconfigNLPSingleDataFileInfo
        """

        self._single_data_file_info = single_data_file_info

    @property
    def single_data_loading_info(self):
        """Gets the single_data_loading_info of this CliconfigNLPSingleDataInfo.  # noqa: E501


        :return: The single_data_loading_info of this CliconfigNLPSingleDataInfo.  # noqa: E501
        :rtype: CliconfigSingleDataLoadingInfo
        """
        return self._single_data_loading_info

    @single_data_loading_info.setter
    def single_data_loading_info(self, single_data_loading_info):
        """Sets the single_data_loading_info of this CliconfigNLPSingleDataInfo.


        :param single_data_loading_info: The single_data_loading_info of this CliconfigNLPSingleDataInfo.  # noqa: E501
        :type: CliconfigSingleDataLoadingInfo
        """

        self._single_data_loading_info = single_data_loading_info

    @property
    def huggingface_single_data_loading_info(self):
        """Gets the huggingface_single_data_loading_info of this CliconfigNLPSingleDataInfo.  # noqa: E501


        :return: The huggingface_single_data_loading_info of this CliconfigNLPSingleDataInfo.  # noqa: E501
        :rtype: CliconfigHuggingFaceSingleDataLoadingInfo
        """
        return self._huggingface_single_data_loading_info

    @huggingface_single_data_loading_info.setter
    def huggingface_single_data_loading_info(self, huggingface_single_data_loading_info):
        """Sets the huggingface_single_data_loading_info of this CliconfigNLPSingleDataInfo.


        :param huggingface_single_data_loading_info: The huggingface_single_data_loading_info of this CliconfigNLPSingleDataInfo.  # noqa: E501
        :type: CliconfigHuggingFaceSingleDataLoadingInfo
        """

        self._huggingface_single_data_loading_info = huggingface_single_data_loading_info

    @property
    def single_delta_lake_info(self):
        """Gets the single_delta_lake_info of this CliconfigNLPSingleDataInfo.  # noqa: E501


        :return: The single_delta_lake_info of this CliconfigNLPSingleDataInfo.  # noqa: E501
        :rtype: CliconfigSingleDeltaLakeInfo
        """
        return self._single_delta_lake_info

    @single_delta_lake_info.setter
    def single_delta_lake_info(self, single_delta_lake_info):
        """Sets the single_delta_lake_info of this CliconfigNLPSingleDataInfo.


        :param single_delta_lake_info: The single_delta_lake_info of this CliconfigNLPSingleDataInfo.  # noqa: E501
        :type: CliconfigSingleDeltaLakeInfo
        """

        self._single_delta_lake_info = single_delta_lake_info

    @property
    def single_data_collector_info(self):
        """Gets the single_data_collector_info of this CliconfigNLPSingleDataInfo.  # noqa: E501


        :return: The single_data_collector_info of this CliconfigNLPSingleDataInfo.  # noqa: E501
        :rtype: CliconfigSingleDataCollectorInfo
        """
        return self._single_data_collector_info

    @single_data_collector_info.setter
    def single_data_collector_info(self, single_data_collector_info):
        """Sets the single_data_collector_info of this CliconfigNLPSingleDataInfo.


        :param single_data_collector_info: The single_data_collector_info of this CliconfigNLPSingleDataInfo.  # noqa: E501
        :type: CliconfigSingleDataCollectorInfo
        """

        self._single_data_collector_info = single_data_collector_info

    @property
    def single_params(self):
        """Gets the single_params of this CliconfigNLPSingleDataInfo.  # noqa: E501


        :return: The single_params of this CliconfigNLPSingleDataInfo.  # noqa: E501
        :rtype: CliconfigUnstructuredSingleDataInfoParams
        """
        return self._single_params

    @single_params.setter
    def single_params(self, single_params):
        """Sets the single_params of this CliconfigNLPSingleDataInfo.


        :param single_params: The single_params of this CliconfigNLPSingleDataInfo.  # noqa: E501
        :type: CliconfigUnstructuredSingleDataInfoParams
        """

        self._single_params = single_params

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CliconfigNLPSingleDataInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CliconfigNLPSingleDataInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
