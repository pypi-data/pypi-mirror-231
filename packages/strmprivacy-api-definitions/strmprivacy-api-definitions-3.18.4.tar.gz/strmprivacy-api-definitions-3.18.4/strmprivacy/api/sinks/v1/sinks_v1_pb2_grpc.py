# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from strmprivacy.api.sinks.v1 import sinks_v1_pb2 as strmprivacy_dot_api_dot_sinks_dot_v1_dot_sinks__v1__pb2


class SinksServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListSinks = channel.unary_unary(
                '/strmprivacy.api.sinks.v1.SinksService/ListSinks',
                request_serializer=strmprivacy_dot_api_dot_sinks_dot_v1_dot_sinks__v1__pb2.ListSinksRequest.SerializeToString,
                response_deserializer=strmprivacy_dot_api_dot_sinks_dot_v1_dot_sinks__v1__pb2.ListSinksResponse.FromString,
                )
        self.GetSink = channel.unary_unary(
                '/strmprivacy.api.sinks.v1.SinksService/GetSink',
                request_serializer=strmprivacy_dot_api_dot_sinks_dot_v1_dot_sinks__v1__pb2.GetSinkRequest.SerializeToString,
                response_deserializer=strmprivacy_dot_api_dot_sinks_dot_v1_dot_sinks__v1__pb2.GetSinkResponse.FromString,
                )
        self.DeleteSink = channel.unary_unary(
                '/strmprivacy.api.sinks.v1.SinksService/DeleteSink',
                request_serializer=strmprivacy_dot_api_dot_sinks_dot_v1_dot_sinks__v1__pb2.DeleteSinkRequest.SerializeToString,
                response_deserializer=strmprivacy_dot_api_dot_sinks_dot_v1_dot_sinks__v1__pb2.DeleteSinkResponse.FromString,
                )
        self.CreateSink = channel.unary_unary(
                '/strmprivacy.api.sinks.v1.SinksService/CreateSink',
                request_serializer=strmprivacy_dot_api_dot_sinks_dot_v1_dot_sinks__v1__pb2.CreateSinkRequest.SerializeToString,
                response_deserializer=strmprivacy_dot_api_dot_sinks_dot_v1_dot_sinks__v1__pb2.CreateSinkResponse.FromString,
                )


class SinksServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListSinks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSink(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSink(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSink(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SinksServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListSinks': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSinks,
                    request_deserializer=strmprivacy_dot_api_dot_sinks_dot_v1_dot_sinks__v1__pb2.ListSinksRequest.FromString,
                    response_serializer=strmprivacy_dot_api_dot_sinks_dot_v1_dot_sinks__v1__pb2.ListSinksResponse.SerializeToString,
            ),
            'GetSink': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSink,
                    request_deserializer=strmprivacy_dot_api_dot_sinks_dot_v1_dot_sinks__v1__pb2.GetSinkRequest.FromString,
                    response_serializer=strmprivacy_dot_api_dot_sinks_dot_v1_dot_sinks__v1__pb2.GetSinkResponse.SerializeToString,
            ),
            'DeleteSink': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSink,
                    request_deserializer=strmprivacy_dot_api_dot_sinks_dot_v1_dot_sinks__v1__pb2.DeleteSinkRequest.FromString,
                    response_serializer=strmprivacy_dot_api_dot_sinks_dot_v1_dot_sinks__v1__pb2.DeleteSinkResponse.SerializeToString,
            ),
            'CreateSink': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSink,
                    request_deserializer=strmprivacy_dot_api_dot_sinks_dot_v1_dot_sinks__v1__pb2.CreateSinkRequest.FromString,
                    response_serializer=strmprivacy_dot_api_dot_sinks_dot_v1_dot_sinks__v1__pb2.CreateSinkResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'strmprivacy.api.sinks.v1.SinksService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SinksService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListSinks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/strmprivacy.api.sinks.v1.SinksService/ListSinks',
            strmprivacy_dot_api_dot_sinks_dot_v1_dot_sinks__v1__pb2.ListSinksRequest.SerializeToString,
            strmprivacy_dot_api_dot_sinks_dot_v1_dot_sinks__v1__pb2.ListSinksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/strmprivacy.api.sinks.v1.SinksService/GetSink',
            strmprivacy_dot_api_dot_sinks_dot_v1_dot_sinks__v1__pb2.GetSinkRequest.SerializeToString,
            strmprivacy_dot_api_dot_sinks_dot_v1_dot_sinks__v1__pb2.GetSinkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteSink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/strmprivacy.api.sinks.v1.SinksService/DeleteSink',
            strmprivacy_dot_api_dot_sinks_dot_v1_dot_sinks__v1__pb2.DeleteSinkRequest.SerializeToString,
            strmprivacy_dot_api_dot_sinks_dot_v1_dot_sinks__v1__pb2.DeleteSinkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateSink(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/strmprivacy.api.sinks.v1.SinksService/CreateSink',
            strmprivacy_dot_api_dot_sinks_dot_v1_dot_sinks__v1__pb2.CreateSinkRequest.SerializeToString,
            strmprivacy_dot_api_dot_sinks_dot_v1_dot_sinks__v1__pb2.CreateSinkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
