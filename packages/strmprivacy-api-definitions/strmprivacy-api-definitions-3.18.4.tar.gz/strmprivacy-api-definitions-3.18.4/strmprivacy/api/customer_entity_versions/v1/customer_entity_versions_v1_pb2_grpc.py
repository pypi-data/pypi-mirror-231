# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from strmprivacy.api.customer_entity_versions.v1 import customer_entity_versions_v1_pb2 as strmprivacy_dot_api_dot_customer__entity__versions_dot_v1_dot_customer__entity__versions__v1__pb2


class CustomerEntityVersionsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetBatchExporterImage = channel.unary_unary(
                '/strmprivacy.api.customer_entity_versions.v1.CustomerEntityVersionsService/GetBatchExporterImage',
                request_serializer=strmprivacy_dot_api_dot_customer__entity__versions_dot_v1_dot_customer__entity__versions__v1__pb2.GetBatchExporterImageRequest.SerializeToString,
                response_deserializer=strmprivacy_dot_api_dot_customer__entity__versions_dot_v1_dot_customer__entity__versions__v1__pb2.GetBatchExporterImageResponse.FromString,
                )
        self.GetKafkaExporterImage = channel.unary_unary(
                '/strmprivacy.api.customer_entity_versions.v1.CustomerEntityVersionsService/GetKafkaExporterImage',
                request_serializer=strmprivacy_dot_api_dot_customer__entity__versions_dot_v1_dot_customer__entity__versions__v1__pb2.GetKafkaExporterImageRequest.SerializeToString,
                response_deserializer=strmprivacy_dot_api_dot_customer__entity__versions_dot_v1_dot_customer__entity__versions__v1__pb2.GetKafkaExporterImageResponse.FromString,
                )
        self.GetDecrypterImage = channel.unary_unary(
                '/strmprivacy.api.customer_entity_versions.v1.CustomerEntityVersionsService/GetDecrypterImage',
                request_serializer=strmprivacy_dot_api_dot_customer__entity__versions_dot_v1_dot_customer__entity__versions__v1__pb2.GetDecrypterImageRequest.SerializeToString,
                response_deserializer=strmprivacy_dot_api_dot_customer__entity__versions_dot_v1_dot_customer__entity__versions__v1__pb2.GetDecrypterImageResponse.FromString,
                )
        self.GetBatchJobRunnerImage = channel.unary_unary(
                '/strmprivacy.api.customer_entity_versions.v1.CustomerEntityVersionsService/GetBatchJobRunnerImage',
                request_serializer=strmprivacy_dot_api_dot_customer__entity__versions_dot_v1_dot_customer__entity__versions__v1__pb2.GetBatchJobRunnerImageRequest.SerializeToString,
                response_deserializer=strmprivacy_dot_api_dot_customer__entity__versions_dot_v1_dot_customer__entity__versions__v1__pb2.GetBatchJobRunnerImageResponse.FromString,
                )


class CustomerEntityVersionsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetBatchExporterImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetKafkaExporterImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDecrypterImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBatchJobRunnerImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CustomerEntityVersionsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetBatchExporterImage': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBatchExporterImage,
                    request_deserializer=strmprivacy_dot_api_dot_customer__entity__versions_dot_v1_dot_customer__entity__versions__v1__pb2.GetBatchExporterImageRequest.FromString,
                    response_serializer=strmprivacy_dot_api_dot_customer__entity__versions_dot_v1_dot_customer__entity__versions__v1__pb2.GetBatchExporterImageResponse.SerializeToString,
            ),
            'GetKafkaExporterImage': grpc.unary_unary_rpc_method_handler(
                    servicer.GetKafkaExporterImage,
                    request_deserializer=strmprivacy_dot_api_dot_customer__entity__versions_dot_v1_dot_customer__entity__versions__v1__pb2.GetKafkaExporterImageRequest.FromString,
                    response_serializer=strmprivacy_dot_api_dot_customer__entity__versions_dot_v1_dot_customer__entity__versions__v1__pb2.GetKafkaExporterImageResponse.SerializeToString,
            ),
            'GetDecrypterImage': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDecrypterImage,
                    request_deserializer=strmprivacy_dot_api_dot_customer__entity__versions_dot_v1_dot_customer__entity__versions__v1__pb2.GetDecrypterImageRequest.FromString,
                    response_serializer=strmprivacy_dot_api_dot_customer__entity__versions_dot_v1_dot_customer__entity__versions__v1__pb2.GetDecrypterImageResponse.SerializeToString,
            ),
            'GetBatchJobRunnerImage': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBatchJobRunnerImage,
                    request_deserializer=strmprivacy_dot_api_dot_customer__entity__versions_dot_v1_dot_customer__entity__versions__v1__pb2.GetBatchJobRunnerImageRequest.FromString,
                    response_serializer=strmprivacy_dot_api_dot_customer__entity__versions_dot_v1_dot_customer__entity__versions__v1__pb2.GetBatchJobRunnerImageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'strmprivacy.api.customer_entity_versions.v1.CustomerEntityVersionsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CustomerEntityVersionsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetBatchExporterImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/strmprivacy.api.customer_entity_versions.v1.CustomerEntityVersionsService/GetBatchExporterImage',
            strmprivacy_dot_api_dot_customer__entity__versions_dot_v1_dot_customer__entity__versions__v1__pb2.GetBatchExporterImageRequest.SerializeToString,
            strmprivacy_dot_api_dot_customer__entity__versions_dot_v1_dot_customer__entity__versions__v1__pb2.GetBatchExporterImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetKafkaExporterImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/strmprivacy.api.customer_entity_versions.v1.CustomerEntityVersionsService/GetKafkaExporterImage',
            strmprivacy_dot_api_dot_customer__entity__versions_dot_v1_dot_customer__entity__versions__v1__pb2.GetKafkaExporterImageRequest.SerializeToString,
            strmprivacy_dot_api_dot_customer__entity__versions_dot_v1_dot_customer__entity__versions__v1__pb2.GetKafkaExporterImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDecrypterImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/strmprivacy.api.customer_entity_versions.v1.CustomerEntityVersionsService/GetDecrypterImage',
            strmprivacy_dot_api_dot_customer__entity__versions_dot_v1_dot_customer__entity__versions__v1__pb2.GetDecrypterImageRequest.SerializeToString,
            strmprivacy_dot_api_dot_customer__entity__versions_dot_v1_dot_customer__entity__versions__v1__pb2.GetDecrypterImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBatchJobRunnerImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/strmprivacy.api.customer_entity_versions.v1.CustomerEntityVersionsService/GetBatchJobRunnerImage',
            strmprivacy_dot_api_dot_customer__entity__versions_dot_v1_dot_customer__entity__versions__v1__pb2.GetBatchJobRunnerImageRequest.SerializeToString,
            strmprivacy_dot_api_dot_customer__entity__versions_dot_v1_dot_customer__entity__versions__v1__pb2.GetBatchJobRunnerImageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
