# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from strmprivacy.api.kafka_clusters.v1 import kafka_clusters_v1_pb2 as strmprivacy_dot_api_dot_kafka__clusters_dot_v1_dot_kafka__clusters__v1__pb2


class KafkaClustersServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListKafkaClusters = channel.unary_unary(
                '/strmprivacy.api.kafka_clusters.v1.KafkaClustersService/ListKafkaClusters',
                request_serializer=strmprivacy_dot_api_dot_kafka__clusters_dot_v1_dot_kafka__clusters__v1__pb2.ListKafkaClustersRequest.SerializeToString,
                response_deserializer=strmprivacy_dot_api_dot_kafka__clusters_dot_v1_dot_kafka__clusters__v1__pb2.ListKafkaClustersResponse.FromString,
                )
        self.GetKafkaCluster = channel.unary_unary(
                '/strmprivacy.api.kafka_clusters.v1.KafkaClustersService/GetKafkaCluster',
                request_serializer=strmprivacy_dot_api_dot_kafka__clusters_dot_v1_dot_kafka__clusters__v1__pb2.GetKafkaClusterRequest.SerializeToString,
                response_deserializer=strmprivacy_dot_api_dot_kafka__clusters_dot_v1_dot_kafka__clusters__v1__pb2.GetKafkaClusterResponse.FromString,
                )
        self.DeleteKafkaCluster = channel.unary_unary(
                '/strmprivacy.api.kafka_clusters.v1.KafkaClustersService/DeleteKafkaCluster',
                request_serializer=strmprivacy_dot_api_dot_kafka__clusters_dot_v1_dot_kafka__clusters__v1__pb2.DeleteKafkaClusterRequest.SerializeToString,
                response_deserializer=strmprivacy_dot_api_dot_kafka__clusters_dot_v1_dot_kafka__clusters__v1__pb2.DeleteKafkaClusterResponse.FromString,
                )
        self.CreateKafkaCluster = channel.unary_unary(
                '/strmprivacy.api.kafka_clusters.v1.KafkaClustersService/CreateKafkaCluster',
                request_serializer=strmprivacy_dot_api_dot_kafka__clusters_dot_v1_dot_kafka__clusters__v1__pb2.CreateKafkaClusterRequest.SerializeToString,
                response_deserializer=strmprivacy_dot_api_dot_kafka__clusters_dot_v1_dot_kafka__clusters__v1__pb2.CreateKafkaClusterResponse.FromString,
                )


class KafkaClustersServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListKafkaClusters(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetKafkaCluster(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteKafkaCluster(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateKafkaCluster(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KafkaClustersServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListKafkaClusters': grpc.unary_unary_rpc_method_handler(
                    servicer.ListKafkaClusters,
                    request_deserializer=strmprivacy_dot_api_dot_kafka__clusters_dot_v1_dot_kafka__clusters__v1__pb2.ListKafkaClustersRequest.FromString,
                    response_serializer=strmprivacy_dot_api_dot_kafka__clusters_dot_v1_dot_kafka__clusters__v1__pb2.ListKafkaClustersResponse.SerializeToString,
            ),
            'GetKafkaCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.GetKafkaCluster,
                    request_deserializer=strmprivacy_dot_api_dot_kafka__clusters_dot_v1_dot_kafka__clusters__v1__pb2.GetKafkaClusterRequest.FromString,
                    response_serializer=strmprivacy_dot_api_dot_kafka__clusters_dot_v1_dot_kafka__clusters__v1__pb2.GetKafkaClusterResponse.SerializeToString,
            ),
            'DeleteKafkaCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteKafkaCluster,
                    request_deserializer=strmprivacy_dot_api_dot_kafka__clusters_dot_v1_dot_kafka__clusters__v1__pb2.DeleteKafkaClusterRequest.FromString,
                    response_serializer=strmprivacy_dot_api_dot_kafka__clusters_dot_v1_dot_kafka__clusters__v1__pb2.DeleteKafkaClusterResponse.SerializeToString,
            ),
            'CreateKafkaCluster': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateKafkaCluster,
                    request_deserializer=strmprivacy_dot_api_dot_kafka__clusters_dot_v1_dot_kafka__clusters__v1__pb2.CreateKafkaClusterRequest.FromString,
                    response_serializer=strmprivacy_dot_api_dot_kafka__clusters_dot_v1_dot_kafka__clusters__v1__pb2.CreateKafkaClusterResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'strmprivacy.api.kafka_clusters.v1.KafkaClustersService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class KafkaClustersService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListKafkaClusters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/strmprivacy.api.kafka_clusters.v1.KafkaClustersService/ListKafkaClusters',
            strmprivacy_dot_api_dot_kafka__clusters_dot_v1_dot_kafka__clusters__v1__pb2.ListKafkaClustersRequest.SerializeToString,
            strmprivacy_dot_api_dot_kafka__clusters_dot_v1_dot_kafka__clusters__v1__pb2.ListKafkaClustersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetKafkaCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/strmprivacy.api.kafka_clusters.v1.KafkaClustersService/GetKafkaCluster',
            strmprivacy_dot_api_dot_kafka__clusters_dot_v1_dot_kafka__clusters__v1__pb2.GetKafkaClusterRequest.SerializeToString,
            strmprivacy_dot_api_dot_kafka__clusters_dot_v1_dot_kafka__clusters__v1__pb2.GetKafkaClusterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteKafkaCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/strmprivacy.api.kafka_clusters.v1.KafkaClustersService/DeleteKafkaCluster',
            strmprivacy_dot_api_dot_kafka__clusters_dot_v1_dot_kafka__clusters__v1__pb2.DeleteKafkaClusterRequest.SerializeToString,
            strmprivacy_dot_api_dot_kafka__clusters_dot_v1_dot_kafka__clusters__v1__pb2.DeleteKafkaClusterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateKafkaCluster(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/strmprivacy.api.kafka_clusters.v1.KafkaClustersService/CreateKafkaCluster',
            strmprivacy_dot_api_dot_kafka__clusters_dot_v1_dot_kafka__clusters__v1__pb2.CreateKafkaClusterRequest.SerializeToString,
            strmprivacy_dot_api_dot_kafka__clusters_dot_v1_dot_kafka__clusters__v1__pb2.CreateKafkaClusterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
