# coding: utf-8


"""
IGNORE:
    Nutanix Microseg Versioned APIs

    Manage Network Security Policy configuration of Nutanix clusters.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_microseg_py_client.models.common.v1.config.IPv4Address import IPv4Address  # noqa: F401,E501
from ntnx_microseg_py_client.models.microseg.v4.config.AllowType import AllowType  # noqa: F401,E501
from ntnx_microseg_py_client.models.microseg.v4.config.IcmpTypeCodeSpec import IcmpTypeCodeSpec  # noqa: F401,E501
from ntnx_microseg_py_client.models.microseg.v4.config.TcpPortRangeSpec import TcpPortRangeSpec  # noqa: F401,E501
from ntnx_microseg_py_client.models.microseg.v4.config.UdpPortRangeSpec import UdpPortRangeSpec  # noqa: F401,E501

class NSPApplicationRuleSpec(object):

    """A rule for specifying allowed traffic for an application.

    :param secured_group: (:attr:`secured_group`) 
    :type secured_group: required
    :param source_allow_spec: (:attr:`source_allow_spec`) 
    :type source_allow_spec: 
    :param dest_allow_spec: (:attr:`dest_allow_spec`) 
    :type dest_allow_spec: 
    :param source_categories: (:attr:`source_categories`) 
    :type source_categories: 
    :param dest_categories: (:attr:`dest_categories`) 
    :type dest_categories: 
    :param source_subnet: (:attr:`source_subnet`) 
    :type source_subnet: 
    :param dest_subnet: (:attr:`dest_subnet`) 
    :type dest_subnet: 
    :param source_address_group: (:attr:`source_address_group`) A reference to an address group.
    :type source_address_group: 
    :param dest_address_group: (:attr:`dest_address_group`) A reference to an address group.
    :type dest_address_group: 
    :param service_groups: (:attr:`service_groups`) 
    :type service_groups: 
    :param is_all_protocol_allowed: (:attr:`is_all_protocol_allowed`) 
    :type is_all_protocol_allowed: 
    :param tcp_services: (:attr:`tcp_services`) 
    :type tcp_services: 
    :param udp_services: (:attr:`udp_services`) 
    :type udp_services: 
    :param icmp_services: (:attr:`icmp_services`) Icmp Type Code List.
    :type icmp_services: 
    :param network_function_chain_ext_id: (:attr:`network_function_chain_ext_id`) 
    :type network_function_chain_ext_id: 

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'secured_group': 'list[str]',
        'source_allow_spec': 'microseg.v4.config.AllowType',
        'dest_allow_spec': 'microseg.v4.config.AllowType',
        'source_categories': 'list[str]',
        'dest_categories': 'list[str]',
        'source_subnet': 'common.v1.config.IPv4Address',
        'dest_subnet': 'common.v1.config.IPv4Address',
        'source_address_group': 'str',
        'dest_address_group': 'str',
        'service_groups': 'list[str]',
        'is_all_protocol_allowed': 'bool',
        'tcp_services': 'list[microseg.v4.config.TcpPortRangeSpec]',
        'udp_services': 'list[microseg.v4.config.UdpPortRangeSpec]',
        'icmp_services': 'list[microseg.v4.config.IcmpTypeCodeSpec]',
        'network_function_chain_ext_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'secured_group': 'securedGroup',
        'source_allow_spec': 'sourceAllowSpec',
        'dest_allow_spec': 'destAllowSpec',
        'source_categories': 'sourceCategories',
        'dest_categories': 'destCategories',
        'source_subnet': 'sourceSubnet',
        'dest_subnet': 'destSubnet',
        'source_address_group': 'sourceAddressGroup',
        'dest_address_group': 'destAddressGroup',
        'service_groups': 'serviceGroups',
        'is_all_protocol_allowed': 'isAllProtocolAllowed',
        'tcp_services': 'tcpServices',
        'udp_services': 'udpServices',
        'icmp_services': 'icmpServices',
        'network_function_chain_ext_id': 'networkFunctionChainExtId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, secured_group=None, source_allow_spec=None, dest_allow_spec=None, source_categories=None, dest_categories=None, source_subnet=None, dest_subnet=None, source_address_group=None, dest_address_group=None, service_groups=None, is_all_protocol_allowed=None, tcp_services=None, udp_services=None, icmp_services=None, network_function_chain_ext_id=None, *args, **kwargs):  # noqa: E501
        self.__secured_group = None
        self.__source_allow_spec = None
        self.__dest_allow_spec = None
        self.__source_categories = None
        self.__dest_categories = None
        self.__source_subnet = None
        self.__dest_subnet = None
        self.__source_address_group = None
        self.__dest_address_group = None
        self.__service_groups = None
        self.__is_all_protocol_allowed = None
        self.__tcp_services = None
        self.__udp_services = None
        self.__icmp_services = None
        self.__network_function_chain_ext_id = None
        self.discriminator = None
        self.__secured_group = secured_group
        if source_allow_spec is not None:
            self.__source_allow_spec = source_allow_spec
        if dest_allow_spec is not None:
            self.__dest_allow_spec = dest_allow_spec
        if source_categories is not None:
            self.__source_categories = source_categories
        if dest_categories is not None:
            self.__dest_categories = dest_categories
        if source_subnet is not None:
            self.__source_subnet = source_subnet
        if dest_subnet is not None:
            self.__dest_subnet = dest_subnet
        if source_address_group is not None:
            self.__source_address_group = source_address_group
        if dest_address_group is not None:
            self.__dest_address_group = dest_address_group
        if service_groups is not None:
            self.__service_groups = service_groups
        if is_all_protocol_allowed is not None:
            self.__is_all_protocol_allowed = is_all_protocol_allowed
        if tcp_services is not None:
            self.__tcp_services = tcp_services
        if udp_services is not None:
            self.__udp_services = udp_services
        if icmp_services is not None:
            self.__icmp_services = icmp_services
        if network_function_chain_ext_id is not None:
            self.__network_function_chain_ext_id = network_function_chain_ext_id
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'microseg.v4.config.NSPApplicationRuleSpec'

    def _initialize_fq_object_type(self):
        return 'microseg.v4.r0.a1.config.NSPApplicationRuleSpec'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def secured_group(self):
        """
        

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__secured_group

    @secured_group.setter
    def secured_group(self, secured_group):
        if secured_group is None:
            raise ValueError("Invalid value for `secured_group`, must not be `None`")  # noqa: E501

        self.__secured_group = secured_group

    @property
    def source_allow_spec(self):
        """
        

        :type:
            :class:`~ntnx_microseg_py_client.models.microseg.v4.config.AllowType`
        """  # noqa: E501
        return self.__source_allow_spec

    @source_allow_spec.setter
    def source_allow_spec(self, source_allow_spec):

        self.__source_allow_spec = source_allow_spec

    @property
    def dest_allow_spec(self):
        """
        

        :type:
            :class:`~ntnx_microseg_py_client.models.microseg.v4.config.AllowType`
        """  # noqa: E501
        return self.__dest_allow_spec

    @dest_allow_spec.setter
    def dest_allow_spec(self, dest_allow_spec):

        self.__dest_allow_spec = dest_allow_spec

    @property
    def source_categories(self):
        """
        

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__source_categories

    @source_categories.setter
    def source_categories(self, source_categories):

        self.__source_categories = source_categories

    @property
    def dest_categories(self):
        """
        

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__dest_categories

    @dest_categories.setter
    def dest_categories(self, dest_categories):

        self.__dest_categories = dest_categories

    @property
    def source_subnet(self):
        """
        

        :type:
            :class:`~ntnx_microseg_py_client.models.common.v1.config.IPv4Address`
        """  # noqa: E501
        return self.__source_subnet

    @source_subnet.setter
    def source_subnet(self, source_subnet):

        self.__source_subnet = source_subnet

    @property
    def dest_subnet(self):
        """
        

        :type:
            :class:`~ntnx_microseg_py_client.models.common.v1.config.IPv4Address`
        """  # noqa: E501
        return self.__dest_subnet

    @dest_subnet.setter
    def dest_subnet(self, dest_subnet):

        self.__dest_subnet = dest_subnet

    @property
    def source_address_group(self):
        """
        A reference to an address group.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__source_address_group

    @source_address_group.setter
    def source_address_group(self, source_address_group):
        if source_address_group is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', source_address_group):  # noqa: E501
            raise ValueError(r"Invalid value for `source_address_group`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__source_address_group = source_address_group

    @property
    def dest_address_group(self):
        """
        A reference to an address group.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__dest_address_group

    @dest_address_group.setter
    def dest_address_group(self, dest_address_group):
        if dest_address_group is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', dest_address_group):  # noqa: E501
            raise ValueError(r"Invalid value for `dest_address_group`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__dest_address_group = dest_address_group

    @property
    def service_groups(self):
        """
        

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__service_groups

    @service_groups.setter
    def service_groups(self, service_groups):

        self.__service_groups = service_groups

    @property
    def is_all_protocol_allowed(self):
        """
        

        :type:

                :class:`~bool`
        """  # noqa: E501
        return self.__is_all_protocol_allowed

    @is_all_protocol_allowed.setter
    def is_all_protocol_allowed(self, is_all_protocol_allowed):

        self.__is_all_protocol_allowed = is_all_protocol_allowed

    @property
    def tcp_services(self):
        """
        

        :type:
             list[ :class:`~ntnx_microseg_py_client.models.microseg.v4.config.TcpPortRangeSpec` ]
        """  # noqa: E501
        return self.__tcp_services

    @tcp_services.setter
    def tcp_services(self, tcp_services):

        self.__tcp_services = tcp_services

    @property
    def udp_services(self):
        """
        

        :type:
             list[ :class:`~ntnx_microseg_py_client.models.microseg.v4.config.UdpPortRangeSpec` ]
        """  # noqa: E501
        return self.__udp_services

    @udp_services.setter
    def udp_services(self, udp_services):

        self.__udp_services = udp_services

    @property
    def icmp_services(self):
        """
        Icmp Type Code List.

        :type:
             list[ :class:`~ntnx_microseg_py_client.models.microseg.v4.config.IcmpTypeCodeSpec` ]
        """  # noqa: E501
        return self.__icmp_services

    @icmp_services.setter
    def icmp_services(self, icmp_services):

        self.__icmp_services = icmp_services

    @property
    def network_function_chain_ext_id(self):
        """
        

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__network_function_chain_ext_id

    @network_function_chain_ext_id.setter
    def network_function_chain_ext_id(self, network_function_chain_ext_id):
        if network_function_chain_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', network_function_chain_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `network_function_chain_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__network_function_chain_ext_id = network_function_chain_ext_id

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(NSPApplicationRuleSpec, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NSPApplicationRuleSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

