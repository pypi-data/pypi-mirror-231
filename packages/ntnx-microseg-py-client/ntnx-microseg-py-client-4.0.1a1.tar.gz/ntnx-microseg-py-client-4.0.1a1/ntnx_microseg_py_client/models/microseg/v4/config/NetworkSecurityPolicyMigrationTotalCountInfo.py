# coding: utf-8


"""
IGNORE:
    Nutanix Microseg Versioned APIs

    Manage Network Security Policy configuration of Nutanix clusters.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six

class NetworkSecurityPolicyMigrationTotalCountInfo(object):

    """Cumulative Policy counts pre and post Flow migration to FNS 2.0. Contains total count of FNS 2.0 policies that'll be created post successful migration, total count of FNS 1.0 policies before migration and the total count of FNS 2.0 policies which were system generated as a result of FNS 1.0 to FNS 2.0 conversion.<br> 

    :param new_policies_count: (:attr:`new_policies_count`) 
    :type new_policies_count: required
    :param old_policies_count: (:attr:`old_policies_count`) 
    :type old_policies_count: required
    :param system_defined_policies_count: (:attr:`system_defined_policies_count`) Count of isolation policies that would be genrated post migration to FNS 2.0.
    :type system_defined_policies_count: required

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'new_policies_count': 'int',
        'old_policies_count': 'int',
        'system_defined_policies_count': 'int',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'new_policies_count': 'newPoliciesCount',
        'old_policies_count': 'oldPoliciesCount',
        'system_defined_policies_count': 'systemDefinedPoliciesCount',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, new_policies_count=None, old_policies_count=None, system_defined_policies_count=None, *args, **kwargs):  # noqa: E501
        self.__new_policies_count = None
        self.__old_policies_count = None
        self.__system_defined_policies_count = None
        self.discriminator = None
        self.__new_policies_count = new_policies_count
        self.__old_policies_count = old_policies_count
        self.__system_defined_policies_count = system_defined_policies_count
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'microseg.v4.config.NetworkSecurityPolicyMigrationTotalCountInfo'

    def _initialize_fq_object_type(self):
        return 'microseg.v4.r0.a1.config.NetworkSecurityPolicyMigrationTotalCountInfo'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def new_policies_count(self):
        """
        

        :type:

                :class:`~int`
        """  # noqa: E501
        return self.__new_policies_count

    @new_policies_count.setter
    def new_policies_count(self, new_policies_count):
        if new_policies_count is None:
            raise ValueError("Invalid value for `new_policies_count`, must not be `None`")  # noqa: E501

        self.__new_policies_count = new_policies_count

    @property
    def old_policies_count(self):
        """
        

        :type:

                :class:`~int`
        """  # noqa: E501
        return self.__old_policies_count

    @old_policies_count.setter
    def old_policies_count(self, old_policies_count):
        if old_policies_count is None:
            raise ValueError("Invalid value for `old_policies_count`, must not be `None`")  # noqa: E501

        self.__old_policies_count = old_policies_count

    @property
    def system_defined_policies_count(self):
        """
        Count of isolation policies that would be genrated post migration to FNS 2.0.

        :type:

                :class:`~int`
        """  # noqa: E501
        return self.__system_defined_policies_count

    @system_defined_policies_count.setter
    def system_defined_policies_count(self, system_defined_policies_count):
        if system_defined_policies_count is None:
            raise ValueError("Invalid value for `system_defined_policies_count`, must not be `None`")  # noqa: E501

        self.__system_defined_policies_count = system_defined_policies_count

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(NetworkSecurityPolicyMigrationTotalCountInfo, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkSecurityPolicyMigrationTotalCountInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

