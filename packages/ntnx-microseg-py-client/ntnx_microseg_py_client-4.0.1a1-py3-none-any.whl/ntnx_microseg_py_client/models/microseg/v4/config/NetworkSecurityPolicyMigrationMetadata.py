# coding: utf-8


"""
IGNORE:
    Nutanix Microseg Versioned APIs

    Manage Network Security Policy configuration of Nutanix clusters.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_microseg_py_client.models.microseg.v4.config.ConfigMigrationPolicyOptions import ConfigMigrationPolicyOptions  # noqa: F401,E501
from ntnx_microseg_py_client.models.microseg.v4.config.ConfigMigrationPolicyType import ConfigMigrationPolicyType  # noqa: F401,E501
from ntnx_microseg_py_client.models.microseg.v4.config.PolicyState import PolicyState  # noqa: F401,E501

class NetworkSecurityPolicyMigrationMetadata(object):

    """The meta information about a Flow Network Security Policy.<br> The info captures the secured Categories, state of policy, policy type, last modified time, previewId and options.<br> The PreviewId can be used to fetch the complete FNS 2.0 policy preview using Preview GET API.<br> A sample call would look like ``` /microseg/v4.0.a1/flow-migrator/preview/8f094d6c-d7b2-32c2-8223-462c6c5e06db ``` 

    :param description: (:attr:`description`) A user defined annotation for a policy metadata during migration.
    :type description: 
    :param secured_group_category_uuids: (:attr:`secured_group_category_uuids`) List of categories external IDs being secured by the Flow Network Security Policy.
    :type secured_group_category_uuids: required
    :param state: (:attr:`state`) 
    :type state: required
    :param last_update_time: (:attr:`last_update_time`) 
    :type last_update_time: 
    :param type: (:attr:`type`) 
    :type type: 
    :param preview_id: (:attr:`preview_id`) This is a system generated identifier which can be used to preview the complete FNS 2.0 policy corresponding with a FNS 1.0 policy using Preview GET API. A sample call would look like ``` /microseg/v4.0.a1/flow-migrator/preview/8f094d6c-d7b2-32c2-8223-462c6c5e06db ``` 
    :type preview_id: 
    :param options: (:attr:`options`) 
    :type options: 
    :param name: (:attr:`name`) 
    :type name: 

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'description': 'str',
        'secured_group_category_uuids': 'list[str]',
        'state': 'microseg.v4.config.PolicyState',
        'last_update_time': 'datetime',
        'type': 'microseg.v4.config.ConfigMigrationPolicyType',
        'preview_id': 'str',
        'options': 'microseg.v4.config.ConfigMigrationPolicyOptions',
        'name': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'description': 'description',
        'secured_group_category_uuids': 'securedGroupCategoryUuids',
        'state': 'state',
        'last_update_time': 'lastUpdateTime',
        'type': 'type',
        'preview_id': 'previewId',
        'options': 'options',
        'name': 'name',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, description=None, secured_group_category_uuids=None, state=None, last_update_time=None, type=None, preview_id=None, options=None, name=None, *args, **kwargs):  # noqa: E501
        self.__description = None
        self.__secured_group_category_uuids = None
        self.__state = None
        self.__last_update_time = None
        self.__type = None
        self.__preview_id = None
        self.__options = None
        self.__name = None
        self.discriminator = None
        if description is not None:
            self.__description = description
        self.__secured_group_category_uuids = secured_group_category_uuids
        self.__state = state
        if last_update_time is not None:
            self.__last_update_time = last_update_time
        if type is not None:
            self.__type = type
        if preview_id is not None:
            self.__preview_id = preview_id
        if options is not None:
            self.__options = options
        if name is not None:
            self.__name = name
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'microseg.v4.config.NetworkSecurityPolicyMigrationMetadata'

    def _initialize_fq_object_type(self):
        return 'microseg.v4.r0.a1.config.NetworkSecurityPolicyMigrationMetadata'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def description(self):
        """
        A user defined annotation for a policy metadata during migration.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 512:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `512`")  # noqa: E501

        self.__description = description

    @property
    def secured_group_category_uuids(self):
        """
        List of categories external IDs being secured by the Flow Network Security Policy.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__secured_group_category_uuids

    @secured_group_category_uuids.setter
    def secured_group_category_uuids(self, secured_group_category_uuids):
        if secured_group_category_uuids is None:
            raise ValueError("Invalid value for `secured_group_category_uuids`, must not be `None`")  # noqa: E501

        self.__secured_group_category_uuids = secured_group_category_uuids

    @property
    def state(self):
        """
        

        :type:
            :class:`~ntnx_microseg_py_client.models.microseg.v4.config.PolicyState`
        """  # noqa: E501
        return self.__state

    @state.setter
    def state(self, state):
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self.__state = state

    @property
    def last_update_time(self):
        """
        

        :type:

                :class:`~datetime`
        """  # noqa: E501
        return self.__last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):

        self.__last_update_time = last_update_time

    @property
    def type(self):
        """
        

        :type:
            :class:`~ntnx_microseg_py_client.models.microseg.v4.config.ConfigMigrationPolicyType`
        """  # noqa: E501
        return self.__type

    @type.setter
    def type(self, type):

        self.__type = type

    @property
    def preview_id(self):
        """
        This is a system generated identifier which can be used to preview the complete FNS 2.0 policy corresponding with a FNS 1.0 policy using Preview GET API. A sample call would look like ``` /microseg/v4.0.a1/flow-migrator/preview/8f094d6c-d7b2-32c2-8223-462c6c5e06db ``` 

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__preview_id

    @preview_id.setter
    def preview_id(self, preview_id):
        if preview_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', preview_id):  # noqa: E501
            raise ValueError(r"Invalid value for `preview_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__preview_id = preview_id

    @property
    def options(self):
        """
        

        :type:
            :class:`~ntnx_microseg_py_client.models.microseg.v4.config.ConfigMigrationPolicyOptions`
        """  # noqa: E501
        return self.__options

    @options.setter
    def options(self, options):

        self.__options = options

    @property
    def name(self):
        """
        

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):

        self.__name = name

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(NetworkSecurityPolicyMigrationMetadata, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkSecurityPolicyMigrationMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

