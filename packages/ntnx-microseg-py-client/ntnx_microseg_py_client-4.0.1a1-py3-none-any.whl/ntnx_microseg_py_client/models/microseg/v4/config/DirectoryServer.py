# coding: utf-8


"""
IGNORE:
    Nutanix Microseg Versioned APIs

    Manage Network Security Policy configuration of Nutanix clusters.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_microseg_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_microseg_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_microseg_py_client.models.microseg.v4.config.DomainController import DomainController  # noqa: F401,E501
from ntnx_microseg_py_client.models.microseg.v4.config.MatchingCriteria import MatchingCriteria  # noqa: F401,E501

class DirectoryServer(ExternalizableAbstractModel):

    """

    :param is_default_category_enabled: (:attr:`is_default_category_enabled`) Enablement status of the default category. (**Default** False)
    :type is_default_category_enabled: 
    :param should_keep_default_category_on_login: (:attr:`should_keep_default_category_on_login`) Retain default category on user login. (**Default** False)
    :type should_keep_default_category_on_login: 
    :param matching_criterias: (:attr:`matching_criterias`) The matching criteria used to determine whether an entity will be categorized by identity categorization. If match type is ALL, all the entities will be categorized.
    :type matching_criterias: 
    :param directory_service_name: (:attr:`directory_service_name`) The name of the directory service that will be used for mapping.
    :type directory_service_name: 
    :param directory_service_ext_id: (:attr:`directory_service_ext_id`) The extId of the directory service that will be used for mapping.
    :type directory_service_ext_id: 
    :param domain_controllers: (:attr:`domain_controllers`) List of domain controllers to be used for event scraping.
    :type domain_controllers: 

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'is_default_category_enabled': 'bool',
        'should_keep_default_category_on_login': 'bool',
        'matching_criterias': 'list[microseg.v4.config.MatchingCriteria]',
        'directory_service_name': 'str',
        'directory_service_ext_id': 'str',
        'domain_controllers': 'list[microseg.v4.config.DomainController]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'is_default_category_enabled': 'isDefaultCategoryEnabled',
        'should_keep_default_category_on_login': 'shouldKeepDefaultCategoryOnLogin',
        'matching_criterias': 'matchingCriterias',
        'directory_service_name': 'directoryServiceName',
        'directory_service_ext_id': 'directoryServiceExtId',
        'domain_controllers': 'domainControllers',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, is_default_category_enabled=False, should_keep_default_category_on_login=False, matching_criterias=None, directory_service_name=None, directory_service_ext_id=None, domain_controllers=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__is_default_category_enabled = None
        self.__should_keep_default_category_on_login = None
        self.__matching_criterias = None
        self.__directory_service_name = None
        self.__directory_service_ext_id = None
        self.__domain_controllers = None
        self.discriminator = None
        if is_default_category_enabled is not None:
            self.__is_default_category_enabled = is_default_category_enabled
        if should_keep_default_category_on_login is not None:
            self.__should_keep_default_category_on_login = should_keep_default_category_on_login
        if matching_criterias is not None:
            self.__matching_criterias = matching_criterias
        if directory_service_name is not None:
            self.__directory_service_name = directory_service_name
        if directory_service_ext_id is not None:
            self.__directory_service_ext_id = directory_service_ext_id
        if domain_controllers is not None:
            self.__domain_controllers = domain_controllers

    def _initialize_object_type(self):
        return 'microseg.v4.config.DirectoryServer'

    def _initialize_fq_object_type(self):
        return 'microseg.v4.r0.a1.config.DirectoryServer'


    @property
    def is_default_category_enabled(self):
        """
        Enablement status of the default category.

        :type:

                :class:`~bool`
        """  # noqa: E501
        return self.__is_default_category_enabled

    @is_default_category_enabled.setter
    def is_default_category_enabled(self, is_default_category_enabled):

        self.__is_default_category_enabled = is_default_category_enabled

    @property
    def should_keep_default_category_on_login(self):
        """
        Retain default category on user login.

        :type:

                :class:`~bool`
        """  # noqa: E501
        return self.__should_keep_default_category_on_login

    @should_keep_default_category_on_login.setter
    def should_keep_default_category_on_login(self, should_keep_default_category_on_login):

        self.__should_keep_default_category_on_login = should_keep_default_category_on_login

    @property
    def matching_criterias(self):
        """
        The matching criteria used to determine whether an entity will be categorized by identity categorization. If match type is ALL, all the entities will be categorized.

        :type:
             list[ :class:`~ntnx_microseg_py_client.models.microseg.v4.config.MatchingCriteria` ]
        """  # noqa: E501
        return self.__matching_criterias

    @matching_criterias.setter
    def matching_criterias(self, matching_criterias):

        self.__matching_criterias = matching_criterias

    @property
    def directory_service_name(self):
        """
        The name of the directory service that will be used for mapping.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__directory_service_name

    @directory_service_name.setter
    def directory_service_name(self, directory_service_name):
        if directory_service_name is not None and len(directory_service_name) > 200:
            raise ValueError("Invalid value for `directory_service_name`, length must be less than or equal to `200`")  # noqa: E501

        self.__directory_service_name = directory_service_name

    @property
    def directory_service_ext_id(self):
        """
        The extId of the directory service that will be used for mapping.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__directory_service_ext_id

    @directory_service_ext_id.setter
    def directory_service_ext_id(self, directory_service_ext_id):
        if directory_service_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', directory_service_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `directory_service_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__directory_service_ext_id = directory_service_ext_id

    @property
    def domain_controllers(self):
        """
        List of domain controllers to be used for event scraping.

        :type:
             list[ :class:`~ntnx_microseg_py_client.models.microseg.v4.config.DomainController` ]
        """  # noqa: E501
        return self.__domain_controllers

    @domain_controllers.setter
    def domain_controllers(self, domain_controllers):

        self.__domain_controllers = domain_controllers

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(DirectoryServer, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectoryServer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

