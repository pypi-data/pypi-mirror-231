# coding: utf-8

"""
    VRt.Studio [ST]

    The version of the OpenAPI document: 6.14.2133

    Generated by OpenAPI Generator: 6.6.0

    Do not edit the code manually

    2023 Veeroute
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist, constr

class OrderCompatibilities(BaseModel):
    """
    Order [compatibilities](#section/Description/Compatibilities). 
    """
    order_features: Optional[conlist(constr(strict=True, max_length=256, min_length=1), max_items=15001, min_items=0, unique_items=True)] = Field(None, description="Order features list.")
    order_restrictions: Optional[conlist(constr(strict=True, max_length=256, min_length=1), max_items=15001, min_items=0, unique_items=True)] = Field(None, description="List of requirements for an order being delivered during the same trip.")
    performer_restrictions: Optional[conlist(constr(strict=True, max_length=256, min_length=1), max_items=1000, min_items=0, unique_items=True)] = Field(None, description="Requirements list for the performer. Used for checking the compatibility of the performer and the order (work). ")
    performer_blacklist: Optional[conlist(constr(strict=True, max_length=256, min_length=1), max_items=1000, min_items=0, unique_items=True)] = Field(None, description="A list of requirements that the performer is not allowed to have. Used for checking the compatibility of the performer and the order (work). This list should not intersect with `performer_restrictions`. ")
    __properties = ["order_features", "order_restrictions", "performer_restrictions", "performer_blacklist"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrderCompatibilities:
        """Create an instance of OrderCompatibilities from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrderCompatibilities:
        """Create an instance of OrderCompatibilities from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return OrderCompatibilities.parse_obj(obj)

        _obj = OrderCompatibilities.parse_obj({
            "order_features": obj.get("order_features"),
            "order_restrictions": obj.get("order_restrictions"),
            "performer_restrictions": obj.get("performer_restrictions"),
            "performer_blacklist": obj.get("performer_blacklist")
        })
        return _obj

