Index: test/esxport/_prepare_search_query_test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"Export testing.\"\"\"\nfrom __future__ import annotations\n\nimport string\nfrom random import choice, randint\nfrom typing import TYPE_CHECKING, Any\nfrom unittest.mock import patch\n\nimport pytest\n\nfrom src.esxport import EsXport\nfrom src.exceptions import IndexNotFoundError\nfrom src.strings import index_not_found, output_fields, sorting_by, using_indexes\n\nif TYPE_CHECKING:\n    from typing_extensions import Self\n\n    from src.click_opt.cli_options import CliOptions\n    from src.elastic import ElasticsearchClient\n\n\n@patch(\"src.esxport.EsXport._validate_fields\")\nclass TestSearchQuery:\n    \"\"\"Tests that a search query with valid input parameters is successful.\"\"\"\n\n    @staticmethod\n    def random_string(str_len: int = 20) -> str:\n        \"\"\"Generates a random string.\"\"\"\n        characters = string.ascii_letters + string.digits\n        return \"\".join(choice(characters) for _ in range(str_len))\n\n    @staticmethod\n    def random_number(upper: int = 100, lower: int = 10000) -> int:\n        \"\"\"Generates a random number.\"\"\"\n        return randint(upper, lower)\n\n    def test_index(\n        self: Self,\n        _: Any,\n        mock_es_client: ElasticsearchClient,\n        cli_options: CliOptions,\n    ) -> None:\n        \"\"\"Arr, matey!.\n\n        Let's test if our search query be successful, with valid input parameters!.\n        \"\"\"\n        random_strings = [self.random_string(10) for _ in range(5)]\n        cli_options.index_prefixes = random_strings\n        indexes = \",\".join(random_strings)\n\n        es_export = EsXport(cli_options, mock_es_client)\n        es_export._prepare_search_query()\n        assert es_export.search_args[\"index\"] == indexes\n\n    def test_all_index(\n        self: Self,\n        _: Any,\n        mock_es_client: ElasticsearchClient,\n        cli_options: CliOptions,\n    ) -> None:\n        \"\"\"Arr, matey!.\n\n        Let's test if our search query be successful, with valid input parameters!.\n        \"\"\"\n        cli_options.index_prefixes = [\"_all\", \"invalid_index\"]\n\n        es_export = EsXport(cli_options, mock_es_client)\n        es_export._check_indexes()\n        assert es_export.opts.index_prefixes == [\"_all\"]\n\n    def test_invalid_index(\n        self: Self,\n        _: Any,\n        mock_es_client: ElasticsearchClient,\n        cli_options: CliOptions,\n    ) -> None:\n        \"\"\"Arr, matey!.\n\n        Let's test if our search query be successful, with valid input parameters!.\n        \"\"\"\n        cli_options.index_prefixes = [\"invalid_index\"]\n        es_export = EsXport(cli_options, mock_es_client)\n\n        with patch.object(es_export.es_client, \"indices_exists\", return_value=False):\n            with pytest.raises(IndexNotFoundError) as exc_info:\n                es_export._check_indexes()\n\n            msg = index_not_found.format(\"invalid_index\", cli_options.url)\n            assert str(exc_info.value) == msg\n\n    def test_size(\n        self: Self,\n        _: Any,\n        mock_es_client: ElasticsearchClient,\n        cli_options: CliOptions,\n    ) -> None:\n        \"\"\"Arr, matey!.\n\n        Let's test if our search query be successful, with valid input parameters!.\n        \"\"\"\n        page_size = randint(100, 9999)\n        cli_options.scroll_size = page_size\n\n        es_export = EsXport(cli_options, mock_es_client)\n        es_export._prepare_search_query()\n        assert es_export.search_args[\"size\"] == page_size\n\n    def test_query(\n        self: Self,\n        _: Any,\n        mock_es_client: ElasticsearchClient,\n        cli_options: CliOptions,\n    ) -> None:\n        \"\"\"Arr, matey!.\n\n        Let's test if our search query be successful, with valid input parameters!.\n        \"\"\"\n        expected_query: dict[str, Any] = {\"query\": {\"match_all\": {}}}\n        cli_options.query = expected_query\n\n        es_export = EsXport(cli_options, mock_es_client)\n        es_export._prepare_search_query()\n        assert es_export.search_args[\"body\"] == expected_query\n\n    def test_terminate_after(\n        self: Self,\n        _: Any,\n        mock_es_client: ElasticsearchClient,\n        cli_options: CliOptions,\n    ) -> None:\n        \"\"\"Arr, matey!.\n\n        Let's test if our search query be successful, with valid input parameters!.\n        \"\"\"\n        random_max = self.random_number()\n        cli_options.max_results = random_max\n\n        es_export = EsXport(cli_options, mock_es_client)\n        es_export._prepare_search_query()\n        assert es_export.search_args[\"terminate_after\"] == random_max\n\n    def test_sort(\n        self: Self,\n        _: Any,\n        mock_es_client: ElasticsearchClient,\n        cli_options: CliOptions,\n    ) -> None:\n        \"\"\"Arr, matey!.\n\n        Let's test if our search query be successful, with valid input parameters!.\n        \"\"\"\n        random_sort = [{self.random_string(): \"asc\"}, {self.random_string(): \"desc\"}]\n        cli_options.sort = random_sort\n\n        es_export = EsXport(cli_options, mock_es_client)\n        es_export._prepare_search_query()\n        assert es_export.search_args[\"sort\"] == random_sort\n\n    def test_debug_option(\n        self: Self,\n        _: Any,\n        mock_es_client: ElasticsearchClient,\n        cli_options: CliOptions,\n        caplog: pytest.LogCaptureFixture,\n    ) -> None:\n        \"\"\"Arr, matey!.\n\n        Let's test if our search query be successful, with valid input parameters!.\n        \"\"\"\n        cli_options.debug = True\n\n        es_export = EsXport(cli_options, mock_es_client)\n        es_export._prepare_search_query()\n        assert caplog.records[0].msg == using_indexes.format(indexes={\", \".join(cli_options.index_prefixes)})\n        assert caplog.records[1].msg.startswith(\"Using query\")\n        assert caplog.records[2].msg == output_fields.format(fields={\", \".join(cli_options.fields)})\n        assert caplog.records[3].msg == sorting_by.format(sort=cli_options.sort)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/esxport/_prepare_search_query_test.py b/test/esxport/_prepare_search_query_test.py
--- a/test/esxport/_prepare_search_query_test.py	(revision fc753fa0a4ce39f5f717877c215ba20e8ad73ced)
+++ b/test/esxport/_prepare_search_query_test.py	(date 1695095997791)
@@ -175,3 +175,14 @@
         assert caplog.records[1].msg.startswith("Using query")
         assert caplog.records[2].msg == output_fields.format(fields={", ".join(cli_options.fields)})
         assert caplog.records[3].msg == sorting_by.format(sort=cli_options.sort)
+
+    def test_custom_output_fields(
+        self: Self,
+        _: Any,
+        esxport_obj: EsXport,
+    ) -> None:
+        """Test if selection only some fields for the output works."""
+        random_strings = [self.random_string(10) for _ in range(5)]
+        esxport_obj.opts.fields = random_strings
+        esxport_obj._prepare_search_query()
+        assert esxport_obj.search_args["_source_includes"] == ",".join(random_strings)
