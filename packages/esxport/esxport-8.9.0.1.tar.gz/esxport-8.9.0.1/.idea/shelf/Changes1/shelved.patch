Index: test/esxport/_export_test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/esxport/_export_test.py b/test/esxport/_export_test.py
new file mode 100644
--- /dev/null	(date 1694970641808)
+++ b/test/esxport/_export_test.py	(date 1694970641808)
@@ -0,0 +1,104 @@
+# Generated by CodiumAI
+from pathlib import Path
+from test.writer.csv_writer_test import TestWriter
+from typing import Self
+from unittest.mock import create_autospec
+
+from src.esxport import EsXport
+
+
+class TestExport:
+    """Tests that the method exports the data with valid arguments."""
+
+    out_file = "test.csv"
+
+    csv_header = ["age", "name"]
+
+    def setup_method(self: Self) -> None:
+        """Create resources."""
+        Path(self.out_file + ".tmp").unlink(missing_ok=True)
+        TestWriter._gen_fake_json()
+
+    def teardown_method(self: Self) -> None:
+        """Cleaer up resources."""
+
+    def test_export_with_valid_arguments(self: Self) -> None:
+        """Arrr!.
+
+        This test be checkin' if the method exports the data properly when given valid arguments. Yo ho ho!.
+        """
+        rows_written = 10
+
+        kwargs = {"delimiter": "@"}
+
+        export = create_autospec(EsXport._export)
+
+        export(headers=self.csv_header, total_records=rows_written, out_file=self.out_file, **kwargs)
+
+        # Assert
+        # Check that the Writer.write method was called with the correct arguments
+        export.assert_called_once_with(
+            headers=self.csv_header,
+            total_records=rows_written,
+            out_file=self.out_file,
+            **kwargs,
+        )
+
+    #  Tests that the method raises an exception when csv_headers is empty
+    # def test_export_with_empty_csv_headers(self):
+    #     """Ahoy!
+    #
+    #     This test be checkin' if the method raises an exception when csv_headers be empty. Shiver me timbers!.
+    #     """
+    #     # Prepare
+    #
+    #
+    #     # Execute and Assert
+    #     with pytest.raises(Exception):
+    #
+    # #  Tests that the method raises an exception when rows_written be 0
+    # def test_export_with_zero_rows_written(self):
+    #     """Avast!
+    #
+    #     This test be checkin' if the method raises an exception when rows_written be 0. Walk the plank!.
+    #     """
+    #
+    #
+    #
+    #     # Execute and Assert
+    #     with pytest.raises(Exception):
+    #
+    # #  Tests that the method raises an exception when output_file be not a string
+    # def test_export_with_non_string_output_file(self):
+    #     """Yo ho ho!
+    #
+    #     This test be checkin' if the method raises an exception when output_file be not a string. Arrr!.
+    #     """
+    #     # Prepare
+    #
+    #     # Execute and Assert
+    #     with pytest.raises(Exception):
+    #
+    # #  Tests that the method raises an exception when csv_headers be not a list
+    # def test_export_with_non_list_csv_headers(self):
+    #     """Ahoy matey!
+    #
+    #     This test be checkin' if the method raises an exception when csv_headers be not a list. Avast!.
+    #     """
+    #     # Prepare
+    #
+    #
+    #     # Execute and Assert
+    #     with pytest.raises(Exception):
+    #
+    # #  Tests that the method raises an exception when rows_written be not an integer
+    # def test_export_with_non_integer_rows_written(self):
+    #     """Arrr!
+    #
+    #     This test be checkin' if the method raises an exception when rows_written be not an integer. Walk the plank!.
+    #     """
+    #     # Prepare
+    #
+    #
+    #     # Execute and Assert
+    #     with pytest.raises(Exception):
