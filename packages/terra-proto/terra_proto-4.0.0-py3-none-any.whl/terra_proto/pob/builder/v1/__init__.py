# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: pob/builder/v1/genesis.proto, pob/builder/v1/query.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....cosmos.base import v1beta1 as ___cosmos_base_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the genesis state of the x/builder module."""

    params: "Params" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters of the x/builder module."""

    max_bundle_size: int = betterproto.uint32_field(1)
    """
    max_bundle_size is the maximum number of transactions that can be bundled
    in a single bundle.
    """

    escrow_account_address: bytes = betterproto.bytes_field(2)
    """
    escrow_account_address is the address of the account that will receive a
    portion of the bid proceeds.
    """

    reserve_fee: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)
    """reserve_fee specifies the bid floor for the auction."""

    min_bid_increment: "___cosmos_base_v1_beta1__.Coin" = betterproto.message_field(4)
    """
    min_bid_increment specifies the minimum amount that the next bid must be
    greater than the previous bid.
    """

    front_running_protection: bool = betterproto.bool_field(5)
    """
    front_running_protection specifies whether front running and sandwich
    attack protection is enabled.
    """

    proposer_fee: str = betterproto.string_field(6)
    """
    proposer_fee defines the portion of the winning bid that goes to the block
    proposer that proposed the block.
    """


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    params: "Params" = betterproto.message_field(1)
    """params defines the parameters of the module."""


class QueryStub(betterproto.ServiceStub):
    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/pob.builder.v1.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryBase(ServiceBase):
    async def params(
        self, query_params_request: "QueryParamsRequest"
    ) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/pob.builder.v1.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
        }
