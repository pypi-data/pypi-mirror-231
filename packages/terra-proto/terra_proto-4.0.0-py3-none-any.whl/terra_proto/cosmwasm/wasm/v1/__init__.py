# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: cosmwasm/wasm/v1/query.proto, cosmwasm/wasm/v1/types.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import betterproto.lib.google.protobuf as betterproto_lib_google_protobuf
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....cosmos.base.query import v1beta1 as ___cosmos_base_query_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class AccessType(betterproto.Enum):
    """AccessType permission types"""

    ACCESS_TYPE_UNSPECIFIED = 0
    """AccessTypeUnspecified placeholder for empty value"""

    ACCESS_TYPE_NOBODY = 1
    """AccessTypeNobody forbidden"""

    ACCESS_TYPE_ONLY_ADDRESS = 2
    """
    AccessTypeOnlyAddress restricted to a single address Deprecated: use
    AccessTypeAnyOfAddresses instead
    """

    ACCESS_TYPE_EVERYBODY = 3
    """AccessTypeEverybody unrestricted"""

    ACCESS_TYPE_ANY_OF_ADDRESSES = 4
    """AccessTypeAnyOfAddresses allow any of the addresses"""


class ContractCodeHistoryOperationType(betterproto.Enum):
    """ContractCodeHistoryOperationType actions that caused a code change"""

    CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED = 0
    """
    ContractCodeHistoryOperationTypeUnspecified placeholder for empty value
    """

    CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT = 1
    """ContractCodeHistoryOperationTypeInit on chain contract instantiation"""

    CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE = 2
    """ContractCodeHistoryOperationTypeMigrate code migration"""

    CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS = 3
    """ContractCodeHistoryOperationTypeGenesis based on genesis data"""


@dataclass(eq=False, repr=False)
class AccessTypeParam(betterproto.Message):
    """AccessTypeParam"""

    value: "AccessType" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class AccessConfig(betterproto.Message):
    """AccessConfig access control type."""

    permission: "AccessType" = betterproto.enum_field(1)
    address: str = betterproto.string_field(2)
    """Address Deprecated: replaced by addresses"""

    addresses: List[str] = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the set of wasm parameters."""

    code_upload_access: "AccessConfig" = betterproto.message_field(1)
    instantiate_default_permission: "AccessType" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class CodeInfo(betterproto.Message):
    """CodeInfo is data for the uploaded contract WASM code"""

    code_hash: bytes = betterproto.bytes_field(1)
    """CodeHash is the unique identifier created by wasmvm"""

    creator: str = betterproto.string_field(2)
    """Creator address who initially stored the code"""

    instantiate_config: "AccessConfig" = betterproto.message_field(5)
    """
    InstantiateConfig access control to apply on contract creation, optional
    """


@dataclass(eq=False, repr=False)
class ContractInfo(betterproto.Message):
    """ContractInfo stores a WASM contract instance"""

    code_id: int = betterproto.uint64_field(1)
    """CodeID is the reference to the stored Wasm code"""

    creator: str = betterproto.string_field(2)
    """Creator address who initially instantiated the contract"""

    admin: str = betterproto.string_field(3)
    """Admin is an optional address that can execute migrations"""

    label: str = betterproto.string_field(4)
    """Label is optional metadata to be stored with a contract instance."""

    created: "AbsoluteTxPosition" = betterproto.message_field(5)
    """Created Tx position when the contract was instantiated."""

    ibc_port_id: str = betterproto.string_field(6)
    extension: "betterproto_lib_google_protobuf.Any" = betterproto.message_field(7)
    """
    Extension is an extension point to store custom metadata within the
    persistence model.
    """


@dataclass(eq=False, repr=False)
class ContractCodeHistoryEntry(betterproto.Message):
    """ContractCodeHistoryEntry metadata to a contract."""

    operation: "ContractCodeHistoryOperationType" = betterproto.enum_field(1)
    code_id: int = betterproto.uint64_field(2)
    """CodeID is the reference to the stored WASM code"""

    updated: "AbsoluteTxPosition" = betterproto.message_field(3)
    """Updated Tx position when the operation was executed."""

    msg: bytes = betterproto.bytes_field(4)


@dataclass(eq=False, repr=False)
class AbsoluteTxPosition(betterproto.Message):
    """
    AbsoluteTxPosition is a unique transaction position that allows for global
    ordering of transactions.
    """

    block_height: int = betterproto.uint64_field(1)
    """BlockHeight is the block the contract was created at"""

    tx_index: int = betterproto.uint64_field(2)
    """
    TxIndex is a monotonic counter within the block (actual transaction index,
    or gas consumed)
    """


@dataclass(eq=False, repr=False)
class Model(betterproto.Message):
    """Model is a struct that holds a KV pair"""

    key: bytes = betterproto.bytes_field(1)
    """hex-encode key to read it better (this is often ascii)"""

    value: bytes = betterproto.bytes_field(2)
    """base64-encode raw value"""


@dataclass(eq=False, repr=False)
class QueryContractInfoRequest(betterproto.Message):
    """
    QueryContractInfoRequest is the request type for the Query/ContractInfo RPC
    method
    """

    address: str = betterproto.string_field(1)
    """address is the address of the contract to query"""


@dataclass(eq=False, repr=False)
class QueryContractInfoResponse(betterproto.Message):
    """
    QueryContractInfoResponse is the response type for the Query/ContractInfo
    RPC method
    """

    address: str = betterproto.string_field(1)
    """address is the address of the contract"""

    contract_info: "ContractInfo" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class QueryContractHistoryRequest(betterproto.Message):
    """
    QueryContractHistoryRequest is the request type for the
    Query/ContractHistory RPC method
    """

    address: str = betterproto.string_field(1)
    """address is the address of the contract to query"""

    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )
    """pagination defines an optional pagination for the request."""


@dataclass(eq=False, repr=False)
class QueryContractHistoryResponse(betterproto.Message):
    """
    QueryContractHistoryResponse is the response type for the
    Query/ContractHistory RPC method
    """

    entries: List["ContractCodeHistoryEntry"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )
    """pagination defines the pagination in the response."""


@dataclass(eq=False, repr=False)
class QueryContractsByCodeRequest(betterproto.Message):
    """
    QueryContractsByCodeRequest is the request type for the
    Query/ContractsByCode RPC method
    """

    code_id: int = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )
    """pagination defines an optional pagination for the request."""


@dataclass(eq=False, repr=False)
class QueryContractsByCodeResponse(betterproto.Message):
    """
    QueryContractsByCodeResponse is the response type for the
    Query/ContractsByCode RPC method
    """

    contracts: List[str] = betterproto.string_field(1)
    """contracts are a set of contract addresses"""

    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )
    """pagination defines the pagination in the response."""


@dataclass(eq=False, repr=False)
class QueryAllContractStateRequest(betterproto.Message):
    """
    QueryAllContractStateRequest is the request type for the
    Query/AllContractState RPC method
    """

    address: str = betterproto.string_field(1)
    """address is the address of the contract"""

    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )
    """pagination defines an optional pagination for the request."""


@dataclass(eq=False, repr=False)
class QueryAllContractStateResponse(betterproto.Message):
    """
    QueryAllContractStateResponse is the response type for the
    Query/AllContractState RPC method
    """

    models: List["Model"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )
    """pagination defines the pagination in the response."""


@dataclass(eq=False, repr=False)
class QueryRawContractStateRequest(betterproto.Message):
    """
    QueryRawContractStateRequest is the request type for the
    Query/RawContractState RPC method
    """

    address: str = betterproto.string_field(1)
    """address is the address of the contract"""

    query_data: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class QueryRawContractStateResponse(betterproto.Message):
    """
    QueryRawContractStateResponse is the response type for the
    Query/RawContractState RPC method
    """

    data: bytes = betterproto.bytes_field(1)
    """Data contains the raw store data"""


@dataclass(eq=False, repr=False)
class QuerySmartContractStateRequest(betterproto.Message):
    """
    QuerySmartContractStateRequest is the request type for the
    Query/SmartContractState RPC method
    """

    address: str = betterproto.string_field(1)
    """address is the address of the contract"""

    query_data: bytes = betterproto.bytes_field(2)
    """QueryData contains the query data passed to the contract"""


@dataclass(eq=False, repr=False)
class QuerySmartContractStateResponse(betterproto.Message):
    """
    QuerySmartContractStateResponse is the response type for the
    Query/SmartContractState RPC method
    """

    data: bytes = betterproto.bytes_field(1)
    """Data contains the json data returned from the smart contract"""


@dataclass(eq=False, repr=False)
class QueryCodeRequest(betterproto.Message):
    """QueryCodeRequest is the request type for the Query/Code RPC method"""

    code_id: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class CodeInfoResponse(betterproto.Message):
    """CodeInfoResponse contains code meta data from CodeInfo"""

    code_id: int = betterproto.uint64_field(1)
    creator: str = betterproto.string_field(2)
    data_hash: bytes = betterproto.bytes_field(3)
    instantiate_permission: "AccessConfig" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class QueryCodeResponse(betterproto.Message):
    """QueryCodeResponse is the response type for the Query/Code RPC method"""

    code_info: "CodeInfoResponse" = betterproto.message_field(1)
    data: bytes = betterproto.bytes_field(2)


@dataclass(eq=False, repr=False)
class QueryCodesRequest(betterproto.Message):
    """QueryCodesRequest is the request type for the Query/Codes RPC method"""

    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(1)
    )
    """pagination defines an optional pagination for the request."""


@dataclass(eq=False, repr=False)
class QueryCodesResponse(betterproto.Message):
    """
    QueryCodesResponse is the response type for the Query/Codes RPC method
    """

    code_infos: List["CodeInfoResponse"] = betterproto.message_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )
    """pagination defines the pagination in the response."""


@dataclass(eq=False, repr=False)
class QueryPinnedCodesRequest(betterproto.Message):
    """
    QueryPinnedCodesRequest is the request type for the Query/PinnedCodes RPC
    method
    """

    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )
    """pagination defines an optional pagination for the request."""


@dataclass(eq=False, repr=False)
class QueryPinnedCodesResponse(betterproto.Message):
    """
    QueryPinnedCodesResponse is the response type for the Query/PinnedCodes RPC
    method
    """

    code_ids: List[int] = betterproto.uint64_field(1)
    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )
    """pagination defines the pagination in the response."""


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    params: "Params" = betterproto.message_field(1)
    """params defines the parameters of the module."""


@dataclass(eq=False, repr=False)
class QueryContractsByCreatorRequest(betterproto.Message):
    """
    QueryContractsByCreatorRequest is the request type for the
    Query/ContractsByCreator RPC method.
    """

    creator_address: str = betterproto.string_field(1)
    """CreatorAddress is the address of contract creator"""

    pagination: "___cosmos_base_query_v1_beta1__.PageRequest" = (
        betterproto.message_field(2)
    )
    """Pagination defines an optional pagination for the request."""


@dataclass(eq=False, repr=False)
class QueryContractsByCreatorResponse(betterproto.Message):
    """
    QueryContractsByCreatorResponse is the response type for the
    Query/ContractsByCreator RPC method.
    """

    contract_addresses: List[str] = betterproto.string_field(1)
    """ContractAddresses result set"""

    pagination: "___cosmos_base_query_v1_beta1__.PageResponse" = (
        betterproto.message_field(2)
    )
    """Pagination defines the pagination in the response."""


class QueryStub(betterproto.ServiceStub):
    async def contract_info(
        self,
        query_contract_info_request: "QueryContractInfoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryContractInfoResponse":
        return await self._unary_unary(
            "/cosmwasm.wasm.v1.Query/ContractInfo",
            query_contract_info_request,
            QueryContractInfoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def contract_history(
        self,
        query_contract_history_request: "QueryContractHistoryRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryContractHistoryResponse":
        return await self._unary_unary(
            "/cosmwasm.wasm.v1.Query/ContractHistory",
            query_contract_history_request,
            QueryContractHistoryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def contracts_by_code(
        self,
        query_contracts_by_code_request: "QueryContractsByCodeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryContractsByCodeResponse":
        return await self._unary_unary(
            "/cosmwasm.wasm.v1.Query/ContractsByCode",
            query_contracts_by_code_request,
            QueryContractsByCodeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def all_contract_state(
        self,
        query_all_contract_state_request: "QueryAllContractStateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryAllContractStateResponse":
        return await self._unary_unary(
            "/cosmwasm.wasm.v1.Query/AllContractState",
            query_all_contract_state_request,
            QueryAllContractStateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def raw_contract_state(
        self,
        query_raw_contract_state_request: "QueryRawContractStateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryRawContractStateResponse":
        return await self._unary_unary(
            "/cosmwasm.wasm.v1.Query/RawContractState",
            query_raw_contract_state_request,
            QueryRawContractStateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def smart_contract_state(
        self,
        query_smart_contract_state_request: "QuerySmartContractStateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QuerySmartContractStateResponse":
        return await self._unary_unary(
            "/cosmwasm.wasm.v1.Query/SmartContractState",
            query_smart_contract_state_request,
            QuerySmartContractStateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def code(
        self,
        query_code_request: "QueryCodeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryCodeResponse":
        return await self._unary_unary(
            "/cosmwasm.wasm.v1.Query/Code",
            query_code_request,
            QueryCodeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def codes(
        self,
        query_codes_request: "QueryCodesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryCodesResponse":
        return await self._unary_unary(
            "/cosmwasm.wasm.v1.Query/Codes",
            query_codes_request,
            QueryCodesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def pinned_codes(
        self,
        query_pinned_codes_request: "QueryPinnedCodesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryPinnedCodesResponse":
        return await self._unary_unary(
            "/cosmwasm.wasm.v1.Query/PinnedCodes",
            query_pinned_codes_request,
            QueryPinnedCodesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/cosmwasm.wasm.v1.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def contracts_by_creator(
        self,
        query_contracts_by_creator_request: "QueryContractsByCreatorRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryContractsByCreatorResponse":
        return await self._unary_unary(
            "/cosmwasm.wasm.v1.Query/ContractsByCreator",
            query_contracts_by_creator_request,
            QueryContractsByCreatorResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryBase(ServiceBase):
    async def contract_info(
        self, query_contract_info_request: "QueryContractInfoRequest"
    ) -> "QueryContractInfoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def contract_history(
        self, query_contract_history_request: "QueryContractHistoryRequest"
    ) -> "QueryContractHistoryResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def contracts_by_code(
        self, query_contracts_by_code_request: "QueryContractsByCodeRequest"
    ) -> "QueryContractsByCodeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def all_contract_state(
        self, query_all_contract_state_request: "QueryAllContractStateRequest"
    ) -> "QueryAllContractStateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def raw_contract_state(
        self, query_raw_contract_state_request: "QueryRawContractStateRequest"
    ) -> "QueryRawContractStateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def smart_contract_state(
        self, query_smart_contract_state_request: "QuerySmartContractStateRequest"
    ) -> "QuerySmartContractStateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def code(self, query_code_request: "QueryCodeRequest") -> "QueryCodeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def codes(
        self, query_codes_request: "QueryCodesRequest"
    ) -> "QueryCodesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def pinned_codes(
        self, query_pinned_codes_request: "QueryPinnedCodesRequest"
    ) -> "QueryPinnedCodesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def params(
        self, query_params_request: "QueryParamsRequest"
    ) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def contracts_by_creator(
        self, query_contracts_by_creator_request: "QueryContractsByCreatorRequest"
    ) -> "QueryContractsByCreatorResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_contract_info(
        self,
        stream: "grpclib.server.Stream[QueryContractInfoRequest, QueryContractInfoResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.contract_info(request)
        await stream.send_message(response)

    async def __rpc_contract_history(
        self,
        stream: "grpclib.server.Stream[QueryContractHistoryRequest, QueryContractHistoryResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.contract_history(request)
        await stream.send_message(response)

    async def __rpc_contracts_by_code(
        self,
        stream: "grpclib.server.Stream[QueryContractsByCodeRequest, QueryContractsByCodeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.contracts_by_code(request)
        await stream.send_message(response)

    async def __rpc_all_contract_state(
        self,
        stream: "grpclib.server.Stream[QueryAllContractStateRequest, QueryAllContractStateResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.all_contract_state(request)
        await stream.send_message(response)

    async def __rpc_raw_contract_state(
        self,
        stream: "grpclib.server.Stream[QueryRawContractStateRequest, QueryRawContractStateResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.raw_contract_state(request)
        await stream.send_message(response)

    async def __rpc_smart_contract_state(
        self,
        stream: "grpclib.server.Stream[QuerySmartContractStateRequest, QuerySmartContractStateResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.smart_contract_state(request)
        await stream.send_message(response)

    async def __rpc_code(
        self, stream: "grpclib.server.Stream[QueryCodeRequest, QueryCodeResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.code(request)
        await stream.send_message(response)

    async def __rpc_codes(
        self, stream: "grpclib.server.Stream[QueryCodesRequest, QueryCodesResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.codes(request)
        await stream.send_message(response)

    async def __rpc_pinned_codes(
        self,
        stream: "grpclib.server.Stream[QueryPinnedCodesRequest, QueryPinnedCodesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.pinned_codes(request)
        await stream.send_message(response)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    async def __rpc_contracts_by_creator(
        self,
        stream: "grpclib.server.Stream[QueryContractsByCreatorRequest, QueryContractsByCreatorResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.contracts_by_creator(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/cosmwasm.wasm.v1.Query/ContractInfo": grpclib.const.Handler(
                self.__rpc_contract_info,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryContractInfoRequest,
                QueryContractInfoResponse,
            ),
            "/cosmwasm.wasm.v1.Query/ContractHistory": grpclib.const.Handler(
                self.__rpc_contract_history,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryContractHistoryRequest,
                QueryContractHistoryResponse,
            ),
            "/cosmwasm.wasm.v1.Query/ContractsByCode": grpclib.const.Handler(
                self.__rpc_contracts_by_code,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryContractsByCodeRequest,
                QueryContractsByCodeResponse,
            ),
            "/cosmwasm.wasm.v1.Query/AllContractState": grpclib.const.Handler(
                self.__rpc_all_contract_state,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryAllContractStateRequest,
                QueryAllContractStateResponse,
            ),
            "/cosmwasm.wasm.v1.Query/RawContractState": grpclib.const.Handler(
                self.__rpc_raw_contract_state,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryRawContractStateRequest,
                QueryRawContractStateResponse,
            ),
            "/cosmwasm.wasm.v1.Query/SmartContractState": grpclib.const.Handler(
                self.__rpc_smart_contract_state,
                grpclib.const.Cardinality.UNARY_UNARY,
                QuerySmartContractStateRequest,
                QuerySmartContractStateResponse,
            ),
            "/cosmwasm.wasm.v1.Query/Code": grpclib.const.Handler(
                self.__rpc_code,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryCodeRequest,
                QueryCodeResponse,
            ),
            "/cosmwasm.wasm.v1.Query/Codes": grpclib.const.Handler(
                self.__rpc_codes,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryCodesRequest,
                QueryCodesResponse,
            ),
            "/cosmwasm.wasm.v1.Query/PinnedCodes": grpclib.const.Handler(
                self.__rpc_pinned_codes,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryPinnedCodesRequest,
                QueryPinnedCodesResponse,
            ),
            "/cosmwasm.wasm.v1.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/cosmwasm.wasm.v1.Query/ContractsByCreator": grpclib.const.Handler(
                self.__rpc_contracts_by_creator,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryContractsByCreatorRequest,
                QueryContractsByCreatorResponse,
            ),
        }
