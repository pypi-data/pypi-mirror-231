# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: osmosis/tokenfactory/v1beta1/authorityMetadata.proto, osmosis/tokenfactory/v1beta1/params.proto, osmosis/tokenfactory/v1beta1/query.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....cosmos.base import v1beta1 as ___cosmos_base_v1_beta1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class DenomAuthorityMetadata(betterproto.Message):
    """
    DenomAuthorityMetadata specifies metadata for addresses that have specific
    capabilities over a token factory denom. Right now there is only one Admin
    permission, but is planned to be extended to the future.
    """

    admin: str = betterproto.string_field(1)
    """Can be empty for no admin, or a valid osmosis address"""


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters for the tokenfactory module."""

    denom_creation_fee: List[
        "___cosmos_base_v1_beta1__.Coin"
    ] = betterproto.message_field(1)
    """
    DenomCreationFee defines the fee to be charged on the creation of a new
    denom. The fee is drawn from the MsgCreateDenom's sender account, and
    transferred to the community pool.
    """

    denom_creation_gas_consume: int = betterproto.uint64_field(2)
    """
    DenomCreationGasConsume defines the gas cost for creating a new denom. This
    is intended as a spam deterrence mechanism. See:
    https://github.com/CosmWasm/token-factory/issues/11
    """


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """
    QueryParamsRequest is the request type for the Query/Params RPC method.
    """

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """
    QueryParamsResponse is the response type for the Query/Params RPC method.
    """

    params: "Params" = betterproto.message_field(1)
    """params defines the parameters of the module."""


@dataclass(eq=False, repr=False)
class QueryDenomAuthorityMetadataRequest(betterproto.Message):
    """
    QueryDenomAuthorityMetadataRequest defines the request structure for the
    DenomAuthorityMetadata gRPC query.
    """

    denom: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryDenomAuthorityMetadataResponse(betterproto.Message):
    """
    QueryDenomAuthorityMetadataResponse defines the response structure for the
    DenomAuthorityMetadata gRPC query.
    """

    authority_metadata: "DenomAuthorityMetadata" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryDenomsFromCreatorRequest(betterproto.Message):
    """
    QueryDenomsFromCreatorRequest defines the request structure for the
    DenomsFromCreator gRPC query.
    """

    creator: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryDenomsFromCreatorResponse(betterproto.Message):
    """
    QueryDenomsFromCreatorRequest defines the response structure for the
    DenomsFromCreator gRPC query.
    """

    denoms: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryBeforeSendHookAddressRequest(betterproto.Message):
    denom: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryBeforeSendHookAddressResponse(betterproto.Message):
    """
    QueryBeforeSendHookAddressResponse defines the response structure for the
    DenomBeforeSendHook gRPC query.
    """

    cosmwasm_address: str = betterproto.string_field(1)


class QueryStub(betterproto.ServiceStub):
    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/osmosis.tokenfactory.v1beta1.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def denom_authority_metadata(
        self,
        query_denom_authority_metadata_request: "QueryDenomAuthorityMetadataRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryDenomAuthorityMetadataResponse":
        return await self._unary_unary(
            "/osmosis.tokenfactory.v1beta1.Query/DenomAuthorityMetadata",
            query_denom_authority_metadata_request,
            QueryDenomAuthorityMetadataResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def denoms_from_creator(
        self,
        query_denoms_from_creator_request: "QueryDenomsFromCreatorRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryDenomsFromCreatorResponse":
        return await self._unary_unary(
            "/osmosis.tokenfactory.v1beta1.Query/DenomsFromCreator",
            query_denoms_from_creator_request,
            QueryDenomsFromCreatorResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def before_send_hook_address(
        self,
        query_before_send_hook_address_request: "QueryBeforeSendHookAddressRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryBeforeSendHookAddressResponse":
        return await self._unary_unary(
            "/osmosis.tokenfactory.v1beta1.Query/BeforeSendHookAddress",
            query_before_send_hook_address_request,
            QueryBeforeSendHookAddressResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryBase(ServiceBase):
    async def params(
        self, query_params_request: "QueryParamsRequest"
    ) -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def denom_authority_metadata(
        self,
        query_denom_authority_metadata_request: "QueryDenomAuthorityMetadataRequest",
    ) -> "QueryDenomAuthorityMetadataResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def denoms_from_creator(
        self, query_denoms_from_creator_request: "QueryDenomsFromCreatorRequest"
    ) -> "QueryDenomsFromCreatorResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def before_send_hook_address(
        self,
        query_before_send_hook_address_request: "QueryBeforeSendHookAddressRequest",
    ) -> "QueryBeforeSendHookAddressResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(
        self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    async def __rpc_denom_authority_metadata(
        self,
        stream: "grpclib.server.Stream[QueryDenomAuthorityMetadataRequest, QueryDenomAuthorityMetadataResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.denom_authority_metadata(request)
        await stream.send_message(response)

    async def __rpc_denoms_from_creator(
        self,
        stream: "grpclib.server.Stream[QueryDenomsFromCreatorRequest, QueryDenomsFromCreatorResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.denoms_from_creator(request)
        await stream.send_message(response)

    async def __rpc_before_send_hook_address(
        self,
        stream: "grpclib.server.Stream[QueryBeforeSendHookAddressRequest, QueryBeforeSendHookAddressResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.before_send_hook_address(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/osmosis.tokenfactory.v1beta1.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/osmosis.tokenfactory.v1beta1.Query/DenomAuthorityMetadata": grpclib.const.Handler(
                self.__rpc_denom_authority_metadata,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDenomAuthorityMetadataRequest,
                QueryDenomAuthorityMetadataResponse,
            ),
            "/osmosis.tokenfactory.v1beta1.Query/DenomsFromCreator": grpclib.const.Handler(
                self.__rpc_denoms_from_creator,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryDenomsFromCreatorRequest,
                QueryDenomsFromCreatorResponse,
            ),
            "/osmosis.tokenfactory.v1beta1.Query/BeforeSendHookAddress": grpclib.const.Handler(
                self.__rpc_before_send_hook_address,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryBeforeSendHookAddressRequest,
                QueryBeforeSendHookAddressResponse,
            ),
        }
