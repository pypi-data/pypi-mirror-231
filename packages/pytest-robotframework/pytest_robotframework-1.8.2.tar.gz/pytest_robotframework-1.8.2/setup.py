# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['pytest_robotframework', 'pytest_robotframework._internal']

package_data = \
{'': ['*']}

install_requires = \
['basedtyping>=0.0.3,<0.2',
 'deepmerge>=1.1.0,<2.0.0',
 'exceptiongroup>=1.1.3,<2.0.0',
 'pytest>=7,<8',
 'robotframework>=6.1.1,<7.0.0']

entry_points = \
{'pytest11': ['robotframework = pytest_robotframework._internal.plugin']}

setup_kwargs = {
    'name': 'pytest-robotframework',
    'version': '1.8.2',
    'description': 'a pytest plugin that can run both python and robotframework tests while generating robot reports for them',
    'long_description': '# pytest-robotframework\n\na pytest plugin that can run both python and robotframework tests while generating robot reports for them\n\n![](https://github.com/DetachHead/pytest-robotframework/assets/57028336/9caabc2e-450e-4db6-bb63-e149a38d49a2)\n\n## install\n\npytest should automatically find and activate the plugin once you install it.\n\n```\npoetry add pytest-robotframework --group=dev\n```\n\n## features\n\n### write robot tests in python\n\n```py\n# you can use both robot and pytest features\nfrom robot.api import logger\nfrom pytest import Cache\n\nfrom pytest_robotframework import keyword\n\n@keyword  # make this function show as a keyword in the robot log\ndef foo():\n    ...\n\n@mark.slow  # gets converted to robot tags\ndef test_foo(cache: Cache):\n    foo()\n```\n\n### run `.robot` tests\n\nto allow for gradual adoption, the plugin also runs regular robot tests as well:\n\n```robot\n*** Settings ***\ntest setup  setup\n\n*** Test Cases ***\nbar\n    [Tags]  asdf  key:value\n    no operation\n\n*** Keywords ***\nsetup\n    log  ran setup\n```\n\nwhich is roughly equivalent to the following python code:\n\n```py\n# conftest.py\nfrom robot.api import logger\nfrom pytest_robotframework import keyword\n\ndef pytest_runtet_setup():\n    foo()\n\n@keyword\ndef foo():\n    logger.info("ran setup")\n```\n\n```py\n# test_foo.py\nfrom pytest import mark\n\n@mark.asdf\n@mark.key("value")\ndef test_bar():\n    ...\n```\n\n### setup/teardown and other hooks\n\nto define a function that runs for each test at setup or teardown, create a `conftest.py` with a `pytest_runtest_setup` and/or `pytest_runtest_teardown` function:\n\n```py\n# ./tests/conftest.py\ndef pytest_runtest_setup():\n    log_in()\n```\n\n```py\n# ./tests/test_suite.py\ndef test_something():\n    """i am logged in now"""\n```\n\nthese hooks appear in the log the same way that the a `.robot` file\'s `Setup` and `Teardown` options in `*** Settings ***` would:\n\n![](https://github.com/DetachHead/pytest-robotframework/assets/57028336/d0b6ee6c-adcd-4f84-9880-9e602c2328f9)\n\nfor more information, see [writing hook functions](https://docs.pytest.org/en/7.1.x/how-to/writing_hook_functions.html). pretty much every pytest hook should work with this plugin\nbut i haven\'t tested them all. please raise an issue if you find one that\'s broken.\n\n### tags/markers\n\npytest markers are converted to tags in the robot log:\n\n```py\nfrom pytest import mark\n\n@mark.slow\ndef test_blazingly_fast_sorting_algorithm():\n    [1,2,3].sort()\n```\n\n![](https://github.com/DetachHead/pytest-robotframework/assets/57028336/f25ee4bd-2f10-42b4-bdef-18a22379bd0d)\n\nmarkers like `skip`, `skipif` and `parameterize` also work how you\'d expect:\n\n```py\nfrom pytest import mark\n\n@mark.parametrize("test_input,expected", [(1, 8), (6, 6)])\ndef test_eval(test_input: int, expected: int):\n    assert test_input == expected\n```\n\n![image](https://github.com/DetachHead/pytest-robotframework/assets/57028336/4361295b-5e44-4c9d-b2f3-839e3901b1eb)\n\n### listeners\n\nyou can define listeners in your `conftest.py` and decorate them with `@listener` to register them as global listeners:\n\n```py\n# conftest.py\nfrom pytest_robotframework import listener\nfrom robot import model, result\nfrom robot.api.interfaces import ListenerV3\nfrom typing_extensions import override\n\n@listener\nclass Listener(ListenerV3):\n    @override\n    def start_test(self, data: model.TestCase result: result.TestCase):\n        ...\n```\n\n### robot suite variables\n\nto set suite-level robot variables, call the `set_variables` function at the top of the test suite:\n\n```py\nfrom robot.libraries.BuiltIn import BuiltIn\nfrom pytest_robotframework import set_variables\n\nset_variables(\n    {\n        "foo": "bar",\n        "baz": ["a", "b"],\n    }\n)\n\ndef test_variables():\n    assert BuiltIn().get_variable_value("$foo") == "bar"\n```\n\n`set_variables` is equivalent to the `*** Variables ***` section in a `.robot` file. all variables are prefixed with `$`. `@` and `&` are not required since `$` variables can store lists and dicts anyway\n\n## config\n\nsince this is a pytest plugin, you should avoid using robot options that have pytest equivalents:\n\n| instead of...                                 | use...                                                                                                                                                                            |\n| :-------------------------------------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `robot --include tag_name`                    | `pytest -m tag_name`                                                                                                                                                              |\n| `robot --skip tag_name`                       | `pytest -m "not tag_name"`                                                                                                                                                        |\n| `robot --test "test name" path/to/test.robot` | `pytest path/to/test.robot::"Test Name"`                                                                                                                                          |\n| `robot --listener Foo`                        | [`@listener` decorator](#listeners)                                                                                                                                               |\n| `robot --dryrun`                              | `pytest --collect-only` (not exactly the same. you should use [a type checker](https://github.com/kotlinisland/basedmypy) on your python tests as a replacement for robot dryrun) |\n| `robot --exitonfailure`                       | `pytest --maxfail=1`                                                                                                                                                              |\n| `robot --rerunfailed`                         | `pytest --lf`                                                                                                                                                                     |\n\nif the robot option you want to use isn\'t mentioned here, check the pytest [command line options](https://docs.pytest.org/en/latest/reference/reference.html#command-line-flags) and [ini options](https://docs.pytest.org/en/latest/reference/reference.html#configuration-options) for a complete list of pytest settings as there are probably many missing from this list.\n\n### specifying robot options directlty\n\nthere are multiple ways you can specify the robot arguments directly. however, arguments that have pytest equivalents should not be set with robot as they will probably cause the plugin to behave incorrectly.\n\n#### `pytest_robot_modify_args` hook\n\nyou can specify a `pytest_robot_modify_args` hook in your `conftest.py` to programmatically modify the arguments\n\n```py\ndef pytest_robot_modify_args(args: list[str], collect_only: bool, session: Session) -> None:\n    if not collect_only:\n        args.extend(["--listener", "Foo"])\n```\n\nnote that not all arguments that the plugin passes to robot will be present in the `args` list. arguments required for the plugin to function (eg. the plugin\'s listeners and prerunmodifiers) cannot be viewed or modified with this hook\n\n#### `--robotargs` pytest argument\n\n```\npytest --robotargs="-d results --listener foo.Foo"\n```\n\n#### `ROBOT_OPTIONS` environment variable\n\n```\nROBOT_OPTIONS="-d results --listener foo.Foo"\n```\n\n### enabling pytest assertions in the robot log\n\nby default, only failed assertions will appear in the log. to make passed assertions show up, you\'ll have to add `enable_assertion_pass_hook = true` to your pytest ini options:\n\n```toml\n# pyproject.toml\n[tool.pytest.ini_options]\nenable_assertion_pass_hook = true\n```\n\n![image](https://github.com/DetachHead/pytest-robotframework/assets/57028336/c2525ccf-c1c6-4c06-be79-c36fefd3bed4)\n\n## limitations with python tests\n\nthere are several limitations with using robotframework without the language that this plugin includes workarounds for\n\n### making keywords show in the robot log\n\nby default when writing tests in python, the only keywords that you\'ll see in the robot log are `Setup`, `Run Test` and `Teardown`. this is because robot is not capable of recognizing keywords called outside of robot code. (see [this issue](https://github.com/robotframework/robotframework/issues/4252))\n\nthis plugin has several workarounds for the problem:\n\n#### `@keyword` decorator\n\nif you want a function you wrote to show up as a keyword in the log, decorate it with the `pytest_robotframework.keyword` instead of `robot.api.deco.keyword`\n\n```py\nfrom pytest_robotframework import keyword\n\n@keyword\ndef foo():\n    ...\n```\n\n#### pytest functions are patched by the plugin\n\nmost of the [pytest functions](https://docs.pytest.org/en/7.1.x/reference/reference.html#functions) are patched so that they show as keywords in the robot log\n\n```py\ndef test_foo():\n    with pytest.raises(ZeroDivisionError):\n        logger.info(1 / 0)\n```\n\n![image](https://github.com/DetachHead/pytest-robotframework/assets/57028336/fc15e9a9-578d-4c5d-bc0f-d5d68591c66c)\n\n#### patching third party functions with `keywordify`\n\nif you want a function from a third party module/robot library to be displayed as a keyword, you can patch it with the `keywordify` function:\n\n```py\n# in your conftest.py\n\nfrom pyest_robotframework import keywordify\nimport some_module\n\n# patch a function from the module:\nkeywordify(some_module, "some_function")\n# works on classes too:\nkeywordify(some_module.SomeClass, "some_method")\n```\n\n### `run keyword and continue on failure` doesn\'t continue after the failure\n\nuse the `continue_on_failure` context manager instead\n\n```py\nfrom pytest_robotframework import continue_on_failure\n\ndef test_foo():\n    with continue_on_failure():\n        assert 1 == 2  # marks the test as failed but continues the test\n        logger.info("foo")  # doesn\'t run\n    logger.info("bar")  # does run\n```\n',
    'author': 'DetachHead',
    'author_email': 'detachhead@users.noreply.github.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/detachhead/pytest-robotframework',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
