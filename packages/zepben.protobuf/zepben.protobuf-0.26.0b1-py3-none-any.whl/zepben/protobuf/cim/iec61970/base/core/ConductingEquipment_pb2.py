# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: zepben/protobuf/cim/iec61970/base/core/ConductingEquipment.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from zepben.protobuf.cim.iec61970.base.core import Equipment_pb2 as zepben_dot_protobuf_dot_cim_dot_iec61970_dot_base_dot_core_dot_Equipment__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n@zepben/protobuf/cim/iec61970/base/core/ConductingEquipment.proto\x12&zepben.protobuf.cim.iec61970.base.core\x1a\x36zepben/protobuf/cim/iec61970/base/core/Equipment.proto\"\x84\x01\n\x13\x43onductingEquipment\x12=\n\x02\x65q\x18\x01 \x01(\x0b\x32\x31.zepben.protobuf.cim.iec61970.base.core.Equipment\x12\x17\n\x0f\x62\x61seVoltageMRID\x18\x02 \x01(\t\x12\x15\n\rterminalMRIDs\x18\x03 \x03(\tBW\n*com.zepben.protobuf.cim.iec61970.base.coreP\x01\xaa\x02&Zepben.Protobuf.CIM.IEC61970.Base.Coreb\x06proto3')



_CONDUCTINGEQUIPMENT = DESCRIPTOR.message_types_by_name['ConductingEquipment']
ConductingEquipment = _reflection.GeneratedProtocolMessageType('ConductingEquipment', (_message.Message,), {
  'DESCRIPTOR' : _CONDUCTINGEQUIPMENT,
  '__module__' : 'zepben.protobuf.cim.iec61970.base.core.ConductingEquipment_pb2'
  # @@protoc_insertion_point(class_scope:zepben.protobuf.cim.iec61970.base.core.ConductingEquipment)
  })
_sym_db.RegisterMessage(ConductingEquipment)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\n*com.zepben.protobuf.cim.iec61970.base.coreP\001\252\002&Zepben.Protobuf.CIM.IEC61970.Base.Core'
  _CONDUCTINGEQUIPMENT._serialized_start=165
  _CONDUCTINGEQUIPMENT._serialized_end=297
# @@protoc_insertion_point(module_scope)
