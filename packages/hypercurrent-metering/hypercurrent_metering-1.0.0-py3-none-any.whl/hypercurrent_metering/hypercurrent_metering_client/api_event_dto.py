# coding: utf-8

"""
    HyperCurrent Metering API

    HyperCurrent Metering API  # noqa: E501

    OpenAPI spec version: 1.11.0-SNAPSHOT
    Contact: info@hypercurrent.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApiEventDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'request_id': 'str',
        'event_type': 'str',
        'asset_id': 'str',
        'product_key': 'str',
        'application': 'str',
        'method': 'str',
        'current_millis': 'int',
        'uri': 'str',
        'elapsed_time': 'int',
        'metadata': 'str',
        'response_code': 'int',
        'request_message_size': 'int',
        'response_message_size': 'int',
        'content_type': 'str',
        'remote_host': 'str',
        'user_agent': 'str',
        'correlation_id': 'str',
        'backend_latency': 'float',
        'client_id': 'str'
    }

    attribute_map = {
        'request_id': 'requestId',
        'event_type': 'eventType',
        'asset_id': 'assetId',
        'product_key': 'productKey',
        'application': 'application',
        'method': 'method',
        'current_millis': 'currentMillis',
        'uri': 'uri',
        'elapsed_time': 'elapsedTime',
        'metadata': 'metadata',
        'response_code': 'responseCode',
        'request_message_size': 'requestMessageSize',
        'response_message_size': 'responseMessageSize',
        'content_type': 'contentType',
        'remote_host': 'remoteHost',
        'user_agent': 'userAgent',
        'correlation_id': 'correlationId',
        'backend_latency': 'backendLatency',
        'client_id': 'clientId'
    }

    def __init__(self, request_id=None, event_type=None, asset_id=None, product_key=None, application=None, method=None, current_millis=None, uri=None, elapsed_time=None, metadata=None, response_code=None, request_message_size=None, response_message_size=None, content_type=None, remote_host=None, user_agent=None, correlation_id=None, backend_latency=None, client_id=None):  # noqa: E501
        """ApiEventDTO - a model defined in Swagger"""  # noqa: E501
        self._request_id = None
        self._event_type = None
        self._asset_id = None
        self._product_key = None
        self._application = None
        self._method = None
        self._current_millis = None
        self._uri = None
        self._elapsed_time = None
        self._metadata = None
        self._response_code = None
        self._request_message_size = None
        self._response_message_size = None
        self._content_type = None
        self._remote_host = None
        self._user_agent = None
        self._correlation_id = None
        self._backend_latency = None
        self._client_id = None
        self.discriminator = None
        if request_id is not None:
            self.request_id = request_id
        if event_type is not None:
            self.event_type = event_type
        if asset_id is not None:
            self.asset_id = asset_id
        if product_key is not None:
            self.product_key = product_key
        if application is not None:
            self.application = application
        if method is not None:
            self.method = method
        if current_millis is not None:
            self.current_millis = current_millis
        if uri is not None:
            self.uri = uri
        if elapsed_time is not None:
            self.elapsed_time = elapsed_time
        if metadata is not None:
            self.metadata = metadata
        if response_code is not None:
            self.response_code = response_code
        if request_message_size is not None:
            self.request_message_size = request_message_size
        if response_message_size is not None:
            self.response_message_size = response_message_size
        if content_type is not None:
            self.content_type = content_type
        if remote_host is not None:
            self.remote_host = remote_host
        if user_agent is not None:
            self.user_agent = user_agent
        if correlation_id is not None:
            self.correlation_id = correlation_id
        if backend_latency is not None:
            self.backend_latency = backend_latency
        if client_id is not None:
            self.client_id = client_id

    @property
    def request_id(self):
        """Gets the request_id of this ApiEventDTO.  # noqa: E501


        :return: The request_id of this ApiEventDTO.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this ApiEventDTO.


        :param request_id: The request_id of this ApiEventDTO.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def event_type(self):
        """Gets the event_type of this ApiEventDTO.  # noqa: E501


        :return: The event_type of this ApiEventDTO.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this ApiEventDTO.


        :param event_type: The event_type of this ApiEventDTO.  # noqa: E501
        :type: str
        """
        allowed_values = ["REQUEST", "RESPONSE"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"  # noqa: E501
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def asset_id(self):
        """Gets the asset_id of this ApiEventDTO.  # noqa: E501


        :return: The asset_id of this ApiEventDTO.  # noqa: E501
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this ApiEventDTO.


        :param asset_id: The asset_id of this ApiEventDTO.  # noqa: E501
        :type: str
        """

        self._asset_id = asset_id

    @property
    def product_key(self):
        """Gets the product_key of this ApiEventDTO.  # noqa: E501


        :return: The product_key of this ApiEventDTO.  # noqa: E501
        :rtype: str
        """
        return self._product_key

    @product_key.setter
    def product_key(self, product_key):
        """Sets the product_key of this ApiEventDTO.


        :param product_key: The product_key of this ApiEventDTO.  # noqa: E501
        :type: str
        """

        self._product_key = product_key

    @property
    def application(self):
        """Gets the application of this ApiEventDTO.  # noqa: E501


        :return: The application of this ApiEventDTO.  # noqa: E501
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this ApiEventDTO.


        :param application: The application of this ApiEventDTO.  # noqa: E501
        :type: str
        """

        self._application = application

    @property
    def method(self):
        """Gets the method of this ApiEventDTO.  # noqa: E501


        :return: The method of this ApiEventDTO.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this ApiEventDTO.


        :param method: The method of this ApiEventDTO.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def current_millis(self):
        """Gets the current_millis of this ApiEventDTO.  # noqa: E501


        :return: The current_millis of this ApiEventDTO.  # noqa: E501
        :rtype: int
        """
        return self._current_millis

    @current_millis.setter
    def current_millis(self, current_millis):
        """Sets the current_millis of this ApiEventDTO.


        :param current_millis: The current_millis of this ApiEventDTO.  # noqa: E501
        :type: int
        """

        self._current_millis = current_millis

    @property
    def uri(self):
        """Gets the uri of this ApiEventDTO.  # noqa: E501


        :return: The uri of this ApiEventDTO.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ApiEventDTO.


        :param uri: The uri of this ApiEventDTO.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def elapsed_time(self):
        """Gets the elapsed_time of this ApiEventDTO.  # noqa: E501


        :return: The elapsed_time of this ApiEventDTO.  # noqa: E501
        :rtype: int
        """
        return self._elapsed_time

    @elapsed_time.setter
    def elapsed_time(self, elapsed_time):
        """Sets the elapsed_time of this ApiEventDTO.


        :param elapsed_time: The elapsed_time of this ApiEventDTO.  # noqa: E501
        :type: int
        """

        self._elapsed_time = elapsed_time

    @property
    def metadata(self):
        """Gets the metadata of this ApiEventDTO.  # noqa: E501


        :return: The metadata of this ApiEventDTO.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ApiEventDTO.


        :param metadata: The metadata of this ApiEventDTO.  # noqa: E501
        :type: str
        """

        self._metadata = metadata

    @property
    def response_code(self):
        """Gets the response_code of this ApiEventDTO.  # noqa: E501


        :return: The response_code of this ApiEventDTO.  # noqa: E501
        :rtype: int
        """
        return self._response_code

    @response_code.setter
    def response_code(self, response_code):
        """Sets the response_code of this ApiEventDTO.


        :param response_code: The response_code of this ApiEventDTO.  # noqa: E501
        :type: int
        """

        self._response_code = response_code

    @property
    def request_message_size(self):
        """Gets the request_message_size of this ApiEventDTO.  # noqa: E501


        :return: The request_message_size of this ApiEventDTO.  # noqa: E501
        :rtype: int
        """
        return self._request_message_size

    @request_message_size.setter
    def request_message_size(self, request_message_size):
        """Sets the request_message_size of this ApiEventDTO.


        :param request_message_size: The request_message_size of this ApiEventDTO.  # noqa: E501
        :type: int
        """

        self._request_message_size = request_message_size

    @property
    def response_message_size(self):
        """Gets the response_message_size of this ApiEventDTO.  # noqa: E501


        :return: The response_message_size of this ApiEventDTO.  # noqa: E501
        :rtype: int
        """
        return self._response_message_size

    @response_message_size.setter
    def response_message_size(self, response_message_size):
        """Sets the response_message_size of this ApiEventDTO.


        :param response_message_size: The response_message_size of this ApiEventDTO.  # noqa: E501
        :type: int
        """

        self._response_message_size = response_message_size

    @property
    def content_type(self):
        """Gets the content_type of this ApiEventDTO.  # noqa: E501


        :return: The content_type of this ApiEventDTO.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this ApiEventDTO.


        :param content_type: The content_type of this ApiEventDTO.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def remote_host(self):
        """Gets the remote_host of this ApiEventDTO.  # noqa: E501


        :return: The remote_host of this ApiEventDTO.  # noqa: E501
        :rtype: str
        """
        return self._remote_host

    @remote_host.setter
    def remote_host(self, remote_host):
        """Sets the remote_host of this ApiEventDTO.


        :param remote_host: The remote_host of this ApiEventDTO.  # noqa: E501
        :type: str
        """

        self._remote_host = remote_host

    @property
    def user_agent(self):
        """Gets the user_agent of this ApiEventDTO.  # noqa: E501


        :return: The user_agent of this ApiEventDTO.  # noqa: E501
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this ApiEventDTO.


        :param user_agent: The user_agent of this ApiEventDTO.  # noqa: E501
        :type: str
        """

        self._user_agent = user_agent

    @property
    def correlation_id(self):
        """Gets the correlation_id of this ApiEventDTO.  # noqa: E501


        :return: The correlation_id of this ApiEventDTO.  # noqa: E501
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this ApiEventDTO.


        :param correlation_id: The correlation_id of this ApiEventDTO.  # noqa: E501
        :type: str
        """

        self._correlation_id = correlation_id

    @property
    def backend_latency(self):
        """Gets the backend_latency of this ApiEventDTO.  # noqa: E501


        :return: The backend_latency of this ApiEventDTO.  # noqa: E501
        :rtype: float
        """
        return self._backend_latency

    @backend_latency.setter
    def backend_latency(self, backend_latency):
        """Sets the backend_latency of this ApiEventDTO.


        :param backend_latency: The backend_latency of this ApiEventDTO.  # noqa: E501
        :type: float
        """

        self._backend_latency = backend_latency

    @property
    def client_id(self):
        """Gets the client_id of this ApiEventDTO.  # noqa: E501


        :return: The client_id of this ApiEventDTO.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ApiEventDTO.


        :param client_id: The client_id of this ApiEventDTO.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiEventDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiEventDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
