# yaml-language-server: $schema=https://raw.githubusercontent.com/typeddjango/pytest-mypy-plugins/master/pytest_mypy_plugins/schema.json
- case: Colormap_does_not_accept_str_bool_and_pandas_types
  parametrized:
    - val: '"0"'
      rt: str
    - val: pd.Period("2022-01")
      rt: Period
    - val: pd.Timestamp("2022-01-01")
      rt: Timestamp
    - val: pd.Timedelta(days=1)
      rt: Timedelta
    - val: pd.Interval(left=0, right=1)
      rt: Interval[int]
  mypy_config: |
    force_uppercase_builtins = true
    force_union_syntax = true
  main: |
    import matplotlib
    import pandas as pd

    colors = matplotlib.cm.get_cmap("viridis", 10)
    colors({{ val }})
  out: |
    main:5: error: No overload variant of "__call__" of "Colormap" matches argument type "{{ rt }}"  [call-overload]
    main:5: note: Possible overload variants:
    main:5: note:     def __call__(self, X: Union[int, float], alpha: Optional[float] = ..., bytes: Literal[False] = ...) -> Tuple[floating[Any], floating[Any], floating[Any], floating[Any]]
    main:5: note:     def __call__(self, X: Union[int, float], alpha: Optional[float] = ..., bytes: Literal[True] = ...) -> Tuple[unsignedinteger[_8Bit], unsignedinteger[_8Bit], unsignedinteger[_8Bit], unsignedinteger[_8Bit]]
    main:5: note:     def __call__(self, X: ndarray[Any, dtype[Union[signedinteger[Any], unsignedinteger[Any], floating[Any]]]], alpha: Union[float, Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], None] = ..., bytes: Literal[False] = ...) -> ndarray[Any, dtype[floating[Any]]]
    main:5: note:     def __call__(self, X: ndarray[Any, dtype[Union[signedinteger[Any], unsignedinteger[Any], floating[Any]]]], alpha: Union[float, Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], None] = ..., bytes: Literal[True] = ...) -> ndarray[Any, dtype[unsignedinteger[_8Bit]]]

- case: Colormap_does_not_accept_bool_todo_add_above
  parametrized:
    - val: "False"
      rt: bool
  mypy_config: |
    force_uppercase_builtins = true
    force_union_syntax = true
  expect_fail: true  # `bool` is considered a subclass of `int`: https://github.com/python/mypy/issues/16135
  main: |
    import matplotlib
    import pandas as pd

    colors = matplotlib.cm.get_cmap("viridis", 10)
    colors({{ val }})
  out: |
    main:5: error: No overload variant of "__call__" of "Colormap" matches argument type "{{ rt }}"  [call-overload]
    main:5: note: Possible overload variants:
    main:5: note:     def __call__(self, X: Union[int, float], alpha: Optional[float] = ..., bytes: bool = ...) -> Tuple[float, float, float, float]
    main:5: note:     def __call__(self, X: ndarray[Any, dtype[Union[int, float]]], alpha: Union[float, Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], None] = ..., bytes: bool = ...) -> ndarray[Any, dtype[Tuple[float, float, float, float]]]

- case: Colormap_requires_one_argument
  mypy_config: |
    force_uppercase_builtins = true
    force_union_syntax = true
  main: |
    import matplotlib

    colors = matplotlib.cm.get_cmap("viridis", 10)
    colors()
  out: |
    main:4: error: All overload variants of "__call__" of "Colormap" require at least one argument  [call-overload]
    main:4: note: Possible overload variants:
    main:4: note:     def __call__(self, X: Union[int, float], alpha: Optional[float] = ..., bytes: Literal[False] = ...) -> Tuple[floating[Any], floating[Any], floating[Any], floating[Any]]
    main:4: note:     def __call__(self, X: Union[int, float], alpha: Optional[float] = ..., bytes: Literal[True] = ...) -> Tuple[unsignedinteger[_8Bit], unsignedinteger[_8Bit], unsignedinteger[_8Bit], unsignedinteger[_8Bit]]
    main:4: note:     def __call__(self, X: ndarray[Any, dtype[Union[signedinteger[Any], unsignedinteger[Any], floating[Any]]]], alpha: Union[float, Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], None] = ..., bytes: Literal[False] = ...) -> ndarray[Any, dtype[floating[Any]]]
    main:4: note:     def __call__(self, X: ndarray[Any, dtype[Union[signedinteger[Any], unsignedinteger[Any], floating[Any]]]], alpha: Union[float, Union[_SupportsArray[dtype[Any]], _NestedSequence[_SupportsArray[dtype[Any]]], bool, int, float, complex, str, bytes, _NestedSequence[Union[bool, int, float, complex, str, bytes]]], None] = ..., bytes: Literal[True] = ...) -> ndarray[Any, dtype[unsignedinteger[_8Bit]]]

- case: Colormap_accepts_int_float
  parametrized:
    - val: "0"
    - val: "0.0"
  mypy_config: |
    force_uppercase_builtins = true
    force_union_syntax = true
  main: |
    import matplotlib
    import pandas as pd

    colors = matplotlib.cm.get_cmap("viridis", 10)
    res = colors({{ val }})
    reveal_type(res)  # N: Revealed type is "Tuple[numpy.floating[Any], numpy.floating[Any], numpy.floating[Any], numpy.floating[Any]]"

- case: Colormap_accepts_ndarray_of_int_float
  mypy_config: |
    force_uppercase_builtins = true
    force_union_syntax = true
  main: |
    import matplotlib
    import numpy as np

    no_of_colors = 10
    colors = matplotlib.cm.get_cmap("viridis", no_of_colors)

    test_array = np.linspace(0, 1, no_of_colors, dtype=np.float64)
    res = colors(test_array)
    reveal_type(res)  # N: Revealed type is "numpy.ndarray[Any, numpy.dtype[numpy.floating[Any]]]"

- case: to_rgb
  mypy_config: |
    force_uppercase_builtins = true
    force_union_syntax = true
  main: |
    import matplotlib.colors as colors

    rgb_tuple = colors.to_rgb("red")
    reveal_type(rgb_tuple)  # N: Revealed type is "Tuple[builtins.float, builtins.float, builtins.float]"
