# coding: utf-8


"""
IGNORE:
    Nutanix Dataprotection Versioned APIs

    Business Continuity with full spectrum of Disaster Recovery and Backup solution. Spanning across Single PC, Cross AZ, MultiSite. Configuration of Recovery points, Protection policies, Recovery Plans. Execution and monitoring of back up and recovery orchestrations on OnPrem as well as Cloud.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six

class VolumeGroupSubRecoveryPoint(object):

    """A model that represents volume group Recovery point properties.

    :param volume_group_recovery_point_id: (:attr:`volume_group_recovery_point_id`) The external identifier that can be used to retrieve the volume group Recovery point using its URL.
    :type volume_group_recovery_point_id: 
    :param consistency_group_ext_id: (:attr:`consistency_group_ext_id`) External identifier of the Consistency group which the entity was part of at the time of Recovery point creation.
    :type consistency_group_ext_id: 
    :param location_agnostic_id: (:attr:`location_agnostic_id`) Location agnostic identifier of the Recovery point. This identifier is used to identify the same instances of a Recovery point across different sites.
    :type location_agnostic_id: 
    :param volume_group_ext_id: (:attr:`volume_group_ext_id`) Volume group external identifier which is captured as part of this Recovery point.
    :type volume_group_ext_id: 
    :param volume_group_categories: (:attr:`volume_group_categories`) Category key-value pairs associated with the volume group at the time of Recovery point creation. The category key and value are separated by '/'. For example, a category with key 'dept' and value 'hr' will be represented as 'dept/hr'.
    :type volume_group_categories: 

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'volume_group_recovery_point_id': 'str',
        'consistency_group_ext_id': 'str',
        'location_agnostic_id': 'str',
        'volume_group_ext_id': 'str',
        'volume_group_categories': 'list[str]',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'volume_group_recovery_point_id': 'volumeGroupRecoveryPointId',
        'consistency_group_ext_id': 'consistencyGroupExtId',
        'location_agnostic_id': 'locationAgnosticId',
        'volume_group_ext_id': 'volumeGroupExtId',
        'volume_group_categories': 'volumeGroupCategories',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, volume_group_recovery_point_id=None, consistency_group_ext_id=None, location_agnostic_id=None, volume_group_ext_id=None, volume_group_categories=None, *args, **kwargs):  # noqa: E501
        self.__volume_group_recovery_point_id = None
        self.__consistency_group_ext_id = None
        self.__location_agnostic_id = None
        self.__volume_group_ext_id = None
        self.__volume_group_categories = None
        self.discriminator = None
        if volume_group_recovery_point_id is not None:
            self.__volume_group_recovery_point_id = volume_group_recovery_point_id
        if consistency_group_ext_id is not None:
            self.__consistency_group_ext_id = consistency_group_ext_id
        if location_agnostic_id is not None:
            self.__location_agnostic_id = location_agnostic_id
        if volume_group_ext_id is not None:
            self.__volume_group_ext_id = volume_group_ext_id
        if volume_group_categories is not None:
            self.__volume_group_categories = volume_group_categories
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'dataprotection.v4.config.VolumeGroupSubRecoveryPoint'

    def _initialize_fq_object_type(self):
        return 'dataprotection.v4.r0.a4.config.VolumeGroupSubRecoveryPoint'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def volume_group_recovery_point_id(self):
        """
        The external identifier that can be used to retrieve the volume group Recovery point using its URL.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__volume_group_recovery_point_id

    @volume_group_recovery_point_id.setter
    def volume_group_recovery_point_id(self, volume_group_recovery_point_id):
        if volume_group_recovery_point_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', volume_group_recovery_point_id):  # noqa: E501
            raise ValueError(r"Invalid value for `volume_group_recovery_point_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__volume_group_recovery_point_id = volume_group_recovery_point_id

    @property
    def consistency_group_ext_id(self):
        """
        External identifier of the Consistency group which the entity was part of at the time of Recovery point creation.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__consistency_group_ext_id

    @consistency_group_ext_id.setter
    def consistency_group_ext_id(self, consistency_group_ext_id):
        if consistency_group_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', consistency_group_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `consistency_group_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__consistency_group_ext_id = consistency_group_ext_id

    @property
    def location_agnostic_id(self):
        """
        Location agnostic identifier of the Recovery point. This identifier is used to identify the same instances of a Recovery point across different sites.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__location_agnostic_id

    @location_agnostic_id.setter
    def location_agnostic_id(self, location_agnostic_id):
        if location_agnostic_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', location_agnostic_id):  # noqa: E501
            raise ValueError(r"Invalid value for `location_agnostic_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__location_agnostic_id = location_agnostic_id

    @property
    def volume_group_ext_id(self):
        """
        Volume group external identifier which is captured as part of this Recovery point.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__volume_group_ext_id

    @volume_group_ext_id.setter
    def volume_group_ext_id(self, volume_group_ext_id):
        if volume_group_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', volume_group_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `volume_group_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__volume_group_ext_id = volume_group_ext_id

    @property
    def volume_group_categories(self):
        """
        Category key-value pairs associated with the volume group at the time of Recovery point creation. The category key and value are separated by '/'. For example, a category with key 'dept' and value 'hr' will be represented as 'dept/hr'.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__volume_group_categories

    @volume_group_categories.setter
    def volume_group_categories(self, volume_group_categories):

        self.__volume_group_categories = volume_group_categories

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(VolumeGroupSubRecoveryPoint, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeGroupSubRecoveryPoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

