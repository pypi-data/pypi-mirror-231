# coding: utf-8


"""
IGNORE:
    Nutanix Dataprotection Versioned APIs

    Business Continuity with full spectrum of Disaster Recovery and Backup solution. Spanning across Single PC, Cross AZ, MultiSite. Configuration of Recovery points, Protection policies, Recovery Plans. Execution and monitoring of back up and recovery orchestrations on OnPrem as well as Cloud.  # noqa: E501

    OpenAPI spec version: 4.0.1-alpha-4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_dataprotection_py_client.models.dataprotection.v4.config.AhvVmOverrideSpec import AhvVmOverrideSpec  # noqa: F401,E501
from ntnx_dataprotection_py_client.models.dataprotection.v4.config.EsxiVmOverrideSpec import EsxiVmOverrideSpec  # noqa: F401,E501

class VmRecoveryPointRestorationSpec(object):

    """Specification for the restore action on the VM Recovery point.

    :param ahv_vm_override_spec: (:attr:`ahv_vm_override_spec`) 
    :type ahv_vm_override_spec: 
    :param esxi_vm_override_spec: (:attr:`esxi_vm_override_spec`) 
    :type esxi_vm_override_spec: 
    :param cluster_ext_id: (:attr:`cluster_ext_id`) Recovery points are restored at the associated location reference by default. However, there is no particular location reference associated with Recovery points located on the cloud. In such a case, the client must specify the external identifier of the cluster on which the entity should be restored.
    :type cluster_ext_id: 

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'ahv_vm_override_spec': 'dataprotection.v4.config.AhvVmOverrideSpec',
        'esxi_vm_override_spec': 'dataprotection.v4.config.EsxiVmOverrideSpec',
        'cluster_ext_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'ahv_vm_override_spec': 'ahvVmOverrideSpec',
        'esxi_vm_override_spec': 'esxiVmOverrideSpec',
        'cluster_ext_id': 'clusterExtId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, ahv_vm_override_spec=None, esxi_vm_override_spec=None, cluster_ext_id=None, *args, **kwargs):  # noqa: E501
        self.__ahv_vm_override_spec = None
        self.__esxi_vm_override_spec = None
        self.__cluster_ext_id = None
        self.discriminator = None
        if ahv_vm_override_spec is not None:
            self.__ahv_vm_override_spec = ahv_vm_override_spec
        if esxi_vm_override_spec is not None:
            self.__esxi_vm_override_spec = esxi_vm_override_spec
        if cluster_ext_id is not None:
            self.__cluster_ext_id = cluster_ext_id
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'dataprotection.v4.config.VmRecoveryPointRestorationSpec'

    def _initialize_fq_object_type(self):
        return 'dataprotection.v4.r0.a4.config.VmRecoveryPointRestorationSpec'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def ahv_vm_override_spec(self):
        """
        

        :type:
            :class:`~ntnx_dataprotection_py_client.models.dataprotection.v4.config.AhvVmOverrideSpec`
        """  # noqa: E501
        return self.__ahv_vm_override_spec

    @ahv_vm_override_spec.setter
    def ahv_vm_override_spec(self, ahv_vm_override_spec):

        self.__ahv_vm_override_spec = ahv_vm_override_spec

    @property
    def esxi_vm_override_spec(self):
        """
        

        :type:
            :class:`~ntnx_dataprotection_py_client.models.dataprotection.v4.config.EsxiVmOverrideSpec`
        """  # noqa: E501
        return self.__esxi_vm_override_spec

    @esxi_vm_override_spec.setter
    def esxi_vm_override_spec(self, esxi_vm_override_spec):

        self.__esxi_vm_override_spec = esxi_vm_override_spec

    @property
    def cluster_ext_id(self):
        """
        Recovery points are restored at the associated location reference by default. However, there is no particular location reference associated with Recovery points located on the cloud. In such a case, the client must specify the external identifier of the cluster on which the entity should be restored.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__cluster_ext_id

    @cluster_ext_id.setter
    def cluster_ext_id(self, cluster_ext_id):
        if cluster_ext_id is not None and not re.search('^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$', cluster_ext_id):  # noqa: E501
            raise ValueError(r"Invalid value for `cluster_ext_id`, must be a follow pattern or equal to `/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/`")  # noqa: E501

        self.__cluster_ext_id = cluster_ext_id

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(VmRecoveryPointRestorationSpec, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VmRecoveryPointRestorationSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

