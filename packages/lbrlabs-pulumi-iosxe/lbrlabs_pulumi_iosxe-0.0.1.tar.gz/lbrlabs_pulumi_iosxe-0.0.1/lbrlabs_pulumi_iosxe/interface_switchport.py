# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['InterfaceSwitchportArgs', 'InterfaceSwitchport']

@pulumi.input_type
class InterfaceSwitchportArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 access_vlan: Optional[pulumi.Input[str]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[bool]] = None,
                 mode_access: Optional[pulumi.Input[bool]] = None,
                 mode_dot1q_tunnel: Optional[pulumi.Input[bool]] = None,
                 mode_private_vlan_host: Optional[pulumi.Input[bool]] = None,
                 mode_private_vlan_promiscuous: Optional[pulumi.Input[bool]] = None,
                 mode_private_vlan_trunk: Optional[pulumi.Input[bool]] = None,
                 mode_trunk: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nonegotiate: Optional[pulumi.Input[bool]] = None,
                 trunk_allowed_vlans: Optional[pulumi.Input[str]] = None,
                 trunk_allowed_vlans_none: Optional[pulumi.Input[bool]] = None,
                 trunk_native_vlan: Optional[pulumi.Input[int]] = None,
                 trunk_native_vlan_tag: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a InterfaceSwitchport resource.
        :param pulumi.Input[str] type: Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
               `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Port-channel`
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] host: Set port host
        :param pulumi.Input[bool] mode_access: Set trunking mode to ACCESS unconditionally
        :param pulumi.Input[bool] mode_dot1q_tunnel: set trunking mode to TUNNEL unconditionally
        :param pulumi.Input[bool] mode_private_vlan_host: Set the mode to private-vlan host
        :param pulumi.Input[bool] mode_private_vlan_promiscuous: Set the mode to private-vlan promiscuous
        :param pulumi.Input[bool] mode_private_vlan_trunk: Set the mode to private-vlan trunk
        :param pulumi.Input[bool] mode_trunk: Set trunking mode to TRUNK unconditionally
        :param pulumi.Input[bool] nonegotiate: Device will not engage in negotiation protocol on this interface
        :param pulumi.Input[bool] trunk_allowed_vlans_none: no VLANs
        :param pulumi.Input[int] trunk_native_vlan: - Range: `1`-`4094`
        """
        pulumi.set(__self__, "type", type)
        if access_vlan is not None:
            pulumi.set(__self__, "access_vlan", access_vlan)
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if mode_access is not None:
            pulumi.set(__self__, "mode_access", mode_access)
        if mode_dot1q_tunnel is not None:
            pulumi.set(__self__, "mode_dot1q_tunnel", mode_dot1q_tunnel)
        if mode_private_vlan_host is not None:
            pulumi.set(__self__, "mode_private_vlan_host", mode_private_vlan_host)
        if mode_private_vlan_promiscuous is not None:
            pulumi.set(__self__, "mode_private_vlan_promiscuous", mode_private_vlan_promiscuous)
        if mode_private_vlan_trunk is not None:
            pulumi.set(__self__, "mode_private_vlan_trunk", mode_private_vlan_trunk)
        if mode_trunk is not None:
            pulumi.set(__self__, "mode_trunk", mode_trunk)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nonegotiate is not None:
            pulumi.set(__self__, "nonegotiate", nonegotiate)
        if trunk_allowed_vlans is not None:
            pulumi.set(__self__, "trunk_allowed_vlans", trunk_allowed_vlans)
        if trunk_allowed_vlans_none is not None:
            pulumi.set(__self__, "trunk_allowed_vlans_none", trunk_allowed_vlans_none)
        if trunk_native_vlan is not None:
            pulumi.set(__self__, "trunk_native_vlan", trunk_native_vlan)
        if trunk_native_vlan_tag is not None:
            pulumi.set(__self__, "trunk_native_vlan_tag", trunk_native_vlan_tag)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
        `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Port-channel`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="accessVlan")
    def access_vlan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_vlan")

    @access_vlan.setter
    def access_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_vlan", value)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[bool]]:
        """
        Set port host
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="modeAccess")
    def mode_access(self) -> Optional[pulumi.Input[bool]]:
        """
        Set trunking mode to ACCESS unconditionally
        """
        return pulumi.get(self, "mode_access")

    @mode_access.setter
    def mode_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_access", value)

    @property
    @pulumi.getter(name="modeDot1qTunnel")
    def mode_dot1q_tunnel(self) -> Optional[pulumi.Input[bool]]:
        """
        set trunking mode to TUNNEL unconditionally
        """
        return pulumi.get(self, "mode_dot1q_tunnel")

    @mode_dot1q_tunnel.setter
    def mode_dot1q_tunnel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_dot1q_tunnel", value)

    @property
    @pulumi.getter(name="modePrivateVlanHost")
    def mode_private_vlan_host(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode to private-vlan host
        """
        return pulumi.get(self, "mode_private_vlan_host")

    @mode_private_vlan_host.setter
    def mode_private_vlan_host(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_private_vlan_host", value)

    @property
    @pulumi.getter(name="modePrivateVlanPromiscuous")
    def mode_private_vlan_promiscuous(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode to private-vlan promiscuous
        """
        return pulumi.get(self, "mode_private_vlan_promiscuous")

    @mode_private_vlan_promiscuous.setter
    def mode_private_vlan_promiscuous(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_private_vlan_promiscuous", value)

    @property
    @pulumi.getter(name="modePrivateVlanTrunk")
    def mode_private_vlan_trunk(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode to private-vlan trunk
        """
        return pulumi.get(self, "mode_private_vlan_trunk")

    @mode_private_vlan_trunk.setter
    def mode_private_vlan_trunk(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_private_vlan_trunk", value)

    @property
    @pulumi.getter(name="modeTrunk")
    def mode_trunk(self) -> Optional[pulumi.Input[bool]]:
        """
        Set trunking mode to TRUNK unconditionally
        """
        return pulumi.get(self, "mode_trunk")

    @mode_trunk.setter
    def mode_trunk(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_trunk", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nonegotiate(self) -> Optional[pulumi.Input[bool]]:
        """
        Device will not engage in negotiation protocol on this interface
        """
        return pulumi.get(self, "nonegotiate")

    @nonegotiate.setter
    def nonegotiate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "nonegotiate", value)

    @property
    @pulumi.getter(name="trunkAllowedVlans")
    def trunk_allowed_vlans(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trunk_allowed_vlans")

    @trunk_allowed_vlans.setter
    def trunk_allowed_vlans(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trunk_allowed_vlans", value)

    @property
    @pulumi.getter(name="trunkAllowedVlansNone")
    def trunk_allowed_vlans_none(self) -> Optional[pulumi.Input[bool]]:
        """
        no VLANs
        """
        return pulumi.get(self, "trunk_allowed_vlans_none")

    @trunk_allowed_vlans_none.setter
    def trunk_allowed_vlans_none(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trunk_allowed_vlans_none", value)

    @property
    @pulumi.getter(name="trunkNativeVlan")
    def trunk_native_vlan(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `1`-`4094`
        """
        return pulumi.get(self, "trunk_native_vlan")

    @trunk_native_vlan.setter
    def trunk_native_vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trunk_native_vlan", value)

    @property
    @pulumi.getter(name="trunkNativeVlanTag")
    def trunk_native_vlan_tag(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "trunk_native_vlan_tag")

    @trunk_native_vlan_tag.setter
    def trunk_native_vlan_tag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trunk_native_vlan_tag", value)


@pulumi.input_type
class _InterfaceSwitchportState:
    def __init__(__self__, *,
                 access_vlan: Optional[pulumi.Input[str]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[bool]] = None,
                 mode_access: Optional[pulumi.Input[bool]] = None,
                 mode_dot1q_tunnel: Optional[pulumi.Input[bool]] = None,
                 mode_private_vlan_host: Optional[pulumi.Input[bool]] = None,
                 mode_private_vlan_promiscuous: Optional[pulumi.Input[bool]] = None,
                 mode_private_vlan_trunk: Optional[pulumi.Input[bool]] = None,
                 mode_trunk: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nonegotiate: Optional[pulumi.Input[bool]] = None,
                 trunk_allowed_vlans: Optional[pulumi.Input[str]] = None,
                 trunk_allowed_vlans_none: Optional[pulumi.Input[bool]] = None,
                 trunk_native_vlan: Optional[pulumi.Input[int]] = None,
                 trunk_native_vlan_tag: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering InterfaceSwitchport resources.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] host: Set port host
        :param pulumi.Input[bool] mode_access: Set trunking mode to ACCESS unconditionally
        :param pulumi.Input[bool] mode_dot1q_tunnel: set trunking mode to TUNNEL unconditionally
        :param pulumi.Input[bool] mode_private_vlan_host: Set the mode to private-vlan host
        :param pulumi.Input[bool] mode_private_vlan_promiscuous: Set the mode to private-vlan promiscuous
        :param pulumi.Input[bool] mode_private_vlan_trunk: Set the mode to private-vlan trunk
        :param pulumi.Input[bool] mode_trunk: Set trunking mode to TRUNK unconditionally
        :param pulumi.Input[bool] nonegotiate: Device will not engage in negotiation protocol on this interface
        :param pulumi.Input[bool] trunk_allowed_vlans_none: no VLANs
        :param pulumi.Input[int] trunk_native_vlan: - Range: `1`-`4094`
        :param pulumi.Input[str] type: Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
               `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Port-channel`
        """
        if access_vlan is not None:
            pulumi.set(__self__, "access_vlan", access_vlan)
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if mode_access is not None:
            pulumi.set(__self__, "mode_access", mode_access)
        if mode_dot1q_tunnel is not None:
            pulumi.set(__self__, "mode_dot1q_tunnel", mode_dot1q_tunnel)
        if mode_private_vlan_host is not None:
            pulumi.set(__self__, "mode_private_vlan_host", mode_private_vlan_host)
        if mode_private_vlan_promiscuous is not None:
            pulumi.set(__self__, "mode_private_vlan_promiscuous", mode_private_vlan_promiscuous)
        if mode_private_vlan_trunk is not None:
            pulumi.set(__self__, "mode_private_vlan_trunk", mode_private_vlan_trunk)
        if mode_trunk is not None:
            pulumi.set(__self__, "mode_trunk", mode_trunk)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nonegotiate is not None:
            pulumi.set(__self__, "nonegotiate", nonegotiate)
        if trunk_allowed_vlans is not None:
            pulumi.set(__self__, "trunk_allowed_vlans", trunk_allowed_vlans)
        if trunk_allowed_vlans_none is not None:
            pulumi.set(__self__, "trunk_allowed_vlans_none", trunk_allowed_vlans_none)
        if trunk_native_vlan is not None:
            pulumi.set(__self__, "trunk_native_vlan", trunk_native_vlan)
        if trunk_native_vlan_tag is not None:
            pulumi.set(__self__, "trunk_native_vlan_tag", trunk_native_vlan_tag)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessVlan")
    def access_vlan(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_vlan")

    @access_vlan.setter
    def access_vlan(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_vlan", value)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[bool]]:
        """
        Set port host
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="modeAccess")
    def mode_access(self) -> Optional[pulumi.Input[bool]]:
        """
        Set trunking mode to ACCESS unconditionally
        """
        return pulumi.get(self, "mode_access")

    @mode_access.setter
    def mode_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_access", value)

    @property
    @pulumi.getter(name="modeDot1qTunnel")
    def mode_dot1q_tunnel(self) -> Optional[pulumi.Input[bool]]:
        """
        set trunking mode to TUNNEL unconditionally
        """
        return pulumi.get(self, "mode_dot1q_tunnel")

    @mode_dot1q_tunnel.setter
    def mode_dot1q_tunnel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_dot1q_tunnel", value)

    @property
    @pulumi.getter(name="modePrivateVlanHost")
    def mode_private_vlan_host(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode to private-vlan host
        """
        return pulumi.get(self, "mode_private_vlan_host")

    @mode_private_vlan_host.setter
    def mode_private_vlan_host(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_private_vlan_host", value)

    @property
    @pulumi.getter(name="modePrivateVlanPromiscuous")
    def mode_private_vlan_promiscuous(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode to private-vlan promiscuous
        """
        return pulumi.get(self, "mode_private_vlan_promiscuous")

    @mode_private_vlan_promiscuous.setter
    def mode_private_vlan_promiscuous(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_private_vlan_promiscuous", value)

    @property
    @pulumi.getter(name="modePrivateVlanTrunk")
    def mode_private_vlan_trunk(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode to private-vlan trunk
        """
        return pulumi.get(self, "mode_private_vlan_trunk")

    @mode_private_vlan_trunk.setter
    def mode_private_vlan_trunk(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_private_vlan_trunk", value)

    @property
    @pulumi.getter(name="modeTrunk")
    def mode_trunk(self) -> Optional[pulumi.Input[bool]]:
        """
        Set trunking mode to TRUNK unconditionally
        """
        return pulumi.get(self, "mode_trunk")

    @mode_trunk.setter
    def mode_trunk(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_trunk", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def nonegotiate(self) -> Optional[pulumi.Input[bool]]:
        """
        Device will not engage in negotiation protocol on this interface
        """
        return pulumi.get(self, "nonegotiate")

    @nonegotiate.setter
    def nonegotiate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "nonegotiate", value)

    @property
    @pulumi.getter(name="trunkAllowedVlans")
    def trunk_allowed_vlans(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trunk_allowed_vlans")

    @trunk_allowed_vlans.setter
    def trunk_allowed_vlans(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trunk_allowed_vlans", value)

    @property
    @pulumi.getter(name="trunkAllowedVlansNone")
    def trunk_allowed_vlans_none(self) -> Optional[pulumi.Input[bool]]:
        """
        no VLANs
        """
        return pulumi.get(self, "trunk_allowed_vlans_none")

    @trunk_allowed_vlans_none.setter
    def trunk_allowed_vlans_none(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trunk_allowed_vlans_none", value)

    @property
    @pulumi.getter(name="trunkNativeVlan")
    def trunk_native_vlan(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `1`-`4094`
        """
        return pulumi.get(self, "trunk_native_vlan")

    @trunk_native_vlan.setter
    def trunk_native_vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trunk_native_vlan", value)

    @property
    @pulumi.getter(name="trunkNativeVlanTag")
    def trunk_native_vlan_tag(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "trunk_native_vlan_tag")

    @trunk_native_vlan_tag.setter
    def trunk_native_vlan_tag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trunk_native_vlan_tag", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
        `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Port-channel`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class InterfaceSwitchport(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_vlan: Optional[pulumi.Input[str]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[bool]] = None,
                 mode_access: Optional[pulumi.Input[bool]] = None,
                 mode_dot1q_tunnel: Optional[pulumi.Input[bool]] = None,
                 mode_private_vlan_host: Optional[pulumi.Input[bool]] = None,
                 mode_private_vlan_promiscuous: Optional[pulumi.Input[bool]] = None,
                 mode_private_vlan_trunk: Optional[pulumi.Input[bool]] = None,
                 mode_trunk: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nonegotiate: Optional[pulumi.Input[bool]] = None,
                 trunk_allowed_vlans: Optional[pulumi.Input[str]] = None,
                 trunk_allowed_vlans_none: Optional[pulumi.Input[bool]] = None,
                 trunk_native_vlan: Optional[pulumi.Input[int]] = None,
                 trunk_native_vlan_tag: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource can manage the Interface Switchport configuration.

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_iosxe as iosxe

        example = iosxe.InterfaceSwitchport("example",
            access_vlan="100",
            host=False,
            mode_access=False,
            mode_dot1q_tunnel=False,
            mode_private_vlan_host=False,
            mode_private_vlan_promiscuous=False,
            mode_private_vlan_trunk=False,
            mode_trunk=True,
            nonegotiate=False,
            trunk_allowed_vlans="100,101",
            trunk_native_vlan=100,
            type="GigabitEthernet")
        ```

        ## Import

        ```sh
         $ pulumi import iosxe:index/interfaceSwitchport:InterfaceSwitchport example "Cisco-IOS-XE-native:native/interface/GigabitEthernet=1/0/3/switchport-config/switchport"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] host: Set port host
        :param pulumi.Input[bool] mode_access: Set trunking mode to ACCESS unconditionally
        :param pulumi.Input[bool] mode_dot1q_tunnel: set trunking mode to TUNNEL unconditionally
        :param pulumi.Input[bool] mode_private_vlan_host: Set the mode to private-vlan host
        :param pulumi.Input[bool] mode_private_vlan_promiscuous: Set the mode to private-vlan promiscuous
        :param pulumi.Input[bool] mode_private_vlan_trunk: Set the mode to private-vlan trunk
        :param pulumi.Input[bool] mode_trunk: Set trunking mode to TRUNK unconditionally
        :param pulumi.Input[bool] nonegotiate: Device will not engage in negotiation protocol on this interface
        :param pulumi.Input[bool] trunk_allowed_vlans_none: no VLANs
        :param pulumi.Input[int] trunk_native_vlan: - Range: `1`-`4094`
        :param pulumi.Input[str] type: Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
               `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Port-channel`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InterfaceSwitchportArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the Interface Switchport configuration.

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_iosxe as iosxe

        example = iosxe.InterfaceSwitchport("example",
            access_vlan="100",
            host=False,
            mode_access=False,
            mode_dot1q_tunnel=False,
            mode_private_vlan_host=False,
            mode_private_vlan_promiscuous=False,
            mode_private_vlan_trunk=False,
            mode_trunk=True,
            nonegotiate=False,
            trunk_allowed_vlans="100,101",
            trunk_native_vlan=100,
            type="GigabitEthernet")
        ```

        ## Import

        ```sh
         $ pulumi import iosxe:index/interfaceSwitchport:InterfaceSwitchport example "Cisco-IOS-XE-native:native/interface/GigabitEthernet=1/0/3/switchport-config/switchport"
        ```

        :param str resource_name: The name of the resource.
        :param InterfaceSwitchportArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InterfaceSwitchportArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_vlan: Optional[pulumi.Input[str]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[bool]] = None,
                 mode_access: Optional[pulumi.Input[bool]] = None,
                 mode_dot1q_tunnel: Optional[pulumi.Input[bool]] = None,
                 mode_private_vlan_host: Optional[pulumi.Input[bool]] = None,
                 mode_private_vlan_promiscuous: Optional[pulumi.Input[bool]] = None,
                 mode_private_vlan_trunk: Optional[pulumi.Input[bool]] = None,
                 mode_trunk: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nonegotiate: Optional[pulumi.Input[bool]] = None,
                 trunk_allowed_vlans: Optional[pulumi.Input[str]] = None,
                 trunk_allowed_vlans_none: Optional[pulumi.Input[bool]] = None,
                 trunk_native_vlan: Optional[pulumi.Input[int]] = None,
                 trunk_native_vlan_tag: Optional[pulumi.Input[bool]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InterfaceSwitchportArgs.__new__(InterfaceSwitchportArgs)

            __props__.__dict__["access_vlan"] = access_vlan
            __props__.__dict__["delete_mode"] = delete_mode
            __props__.__dict__["device"] = device
            __props__.__dict__["host"] = host
            __props__.__dict__["mode_access"] = mode_access
            __props__.__dict__["mode_dot1q_tunnel"] = mode_dot1q_tunnel
            __props__.__dict__["mode_private_vlan_host"] = mode_private_vlan_host
            __props__.__dict__["mode_private_vlan_promiscuous"] = mode_private_vlan_promiscuous
            __props__.__dict__["mode_private_vlan_trunk"] = mode_private_vlan_trunk
            __props__.__dict__["mode_trunk"] = mode_trunk
            __props__.__dict__["name"] = name
            __props__.__dict__["nonegotiate"] = nonegotiate
            __props__.__dict__["trunk_allowed_vlans"] = trunk_allowed_vlans
            __props__.__dict__["trunk_allowed_vlans_none"] = trunk_allowed_vlans_none
            __props__.__dict__["trunk_native_vlan"] = trunk_native_vlan
            __props__.__dict__["trunk_native_vlan_tag"] = trunk_native_vlan_tag
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
        super(InterfaceSwitchport, __self__).__init__(
            'iosxe:index/interfaceSwitchport:InterfaceSwitchport',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_vlan: Optional[pulumi.Input[str]] = None,
            delete_mode: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            host: Optional[pulumi.Input[bool]] = None,
            mode_access: Optional[pulumi.Input[bool]] = None,
            mode_dot1q_tunnel: Optional[pulumi.Input[bool]] = None,
            mode_private_vlan_host: Optional[pulumi.Input[bool]] = None,
            mode_private_vlan_promiscuous: Optional[pulumi.Input[bool]] = None,
            mode_private_vlan_trunk: Optional[pulumi.Input[bool]] = None,
            mode_trunk: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nonegotiate: Optional[pulumi.Input[bool]] = None,
            trunk_allowed_vlans: Optional[pulumi.Input[str]] = None,
            trunk_allowed_vlans_none: Optional[pulumi.Input[bool]] = None,
            trunk_native_vlan: Optional[pulumi.Input[int]] = None,
            trunk_native_vlan_tag: Optional[pulumi.Input[bool]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'InterfaceSwitchport':
        """
        Get an existing InterfaceSwitchport resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] host: Set port host
        :param pulumi.Input[bool] mode_access: Set trunking mode to ACCESS unconditionally
        :param pulumi.Input[bool] mode_dot1q_tunnel: set trunking mode to TUNNEL unconditionally
        :param pulumi.Input[bool] mode_private_vlan_host: Set the mode to private-vlan host
        :param pulumi.Input[bool] mode_private_vlan_promiscuous: Set the mode to private-vlan promiscuous
        :param pulumi.Input[bool] mode_private_vlan_trunk: Set the mode to private-vlan trunk
        :param pulumi.Input[bool] mode_trunk: Set trunking mode to TRUNK unconditionally
        :param pulumi.Input[bool] nonegotiate: Device will not engage in negotiation protocol on this interface
        :param pulumi.Input[bool] trunk_allowed_vlans_none: no VLANs
        :param pulumi.Input[int] trunk_native_vlan: - Range: `1`-`4094`
        :param pulumi.Input[str] type: Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
               `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Port-channel`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InterfaceSwitchportState.__new__(_InterfaceSwitchportState)

        __props__.__dict__["access_vlan"] = access_vlan
        __props__.__dict__["delete_mode"] = delete_mode
        __props__.__dict__["device"] = device
        __props__.__dict__["host"] = host
        __props__.__dict__["mode_access"] = mode_access
        __props__.__dict__["mode_dot1q_tunnel"] = mode_dot1q_tunnel
        __props__.__dict__["mode_private_vlan_host"] = mode_private_vlan_host
        __props__.__dict__["mode_private_vlan_promiscuous"] = mode_private_vlan_promiscuous
        __props__.__dict__["mode_private_vlan_trunk"] = mode_private_vlan_trunk
        __props__.__dict__["mode_trunk"] = mode_trunk
        __props__.__dict__["name"] = name
        __props__.__dict__["nonegotiate"] = nonegotiate
        __props__.__dict__["trunk_allowed_vlans"] = trunk_allowed_vlans
        __props__.__dict__["trunk_allowed_vlans_none"] = trunk_allowed_vlans_none
        __props__.__dict__["trunk_native_vlan"] = trunk_native_vlan
        __props__.__dict__["trunk_native_vlan_tag"] = trunk_native_vlan_tag
        __props__.__dict__["type"] = type
        return InterfaceSwitchport(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessVlan")
    def access_vlan(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "access_vlan")

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[Optional[bool]]:
        """
        Set port host
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="modeAccess")
    def mode_access(self) -> pulumi.Output[Optional[bool]]:
        """
        Set trunking mode to ACCESS unconditionally
        """
        return pulumi.get(self, "mode_access")

    @property
    @pulumi.getter(name="modeDot1qTunnel")
    def mode_dot1q_tunnel(self) -> pulumi.Output[Optional[bool]]:
        """
        set trunking mode to TUNNEL unconditionally
        """
        return pulumi.get(self, "mode_dot1q_tunnel")

    @property
    @pulumi.getter(name="modePrivateVlanHost")
    def mode_private_vlan_host(self) -> pulumi.Output[Optional[bool]]:
        """
        Set the mode to private-vlan host
        """
        return pulumi.get(self, "mode_private_vlan_host")

    @property
    @pulumi.getter(name="modePrivateVlanPromiscuous")
    def mode_private_vlan_promiscuous(self) -> pulumi.Output[Optional[bool]]:
        """
        Set the mode to private-vlan promiscuous
        """
        return pulumi.get(self, "mode_private_vlan_promiscuous")

    @property
    @pulumi.getter(name="modePrivateVlanTrunk")
    def mode_private_vlan_trunk(self) -> pulumi.Output[Optional[bool]]:
        """
        Set the mode to private-vlan trunk
        """
        return pulumi.get(self, "mode_private_vlan_trunk")

    @property
    @pulumi.getter(name="modeTrunk")
    def mode_trunk(self) -> pulumi.Output[Optional[bool]]:
        """
        Set trunking mode to TRUNK unconditionally
        """
        return pulumi.get(self, "mode_trunk")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nonegotiate(self) -> pulumi.Output[Optional[bool]]:
        """
        Device will not engage in negotiation protocol on this interface
        """
        return pulumi.get(self, "nonegotiate")

    @property
    @pulumi.getter(name="trunkAllowedVlans")
    def trunk_allowed_vlans(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "trunk_allowed_vlans")

    @property
    @pulumi.getter(name="trunkAllowedVlansNone")
    def trunk_allowed_vlans_none(self) -> pulumi.Output[Optional[bool]]:
        """
        no VLANs
        """
        return pulumi.get(self, "trunk_allowed_vlans_none")

    @property
    @pulumi.getter(name="trunkNativeVlan")
    def trunk_native_vlan(self) -> pulumi.Output[Optional[int]]:
        """
        - Range: `1`-`4094`
        """
        return pulumi.get(self, "trunk_native_vlan")

    @property
    @pulumi.getter(name="trunkNativeVlanTag")
    def trunk_native_vlan_tag(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "trunk_native_vlan_tag")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
        `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Port-channel`
        """
        return pulumi.get(self, "type")

