# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetBfdTemplateSingleHopResult',
    'AwaitableGetBfdTemplateSingleHopResult',
    'get_bfd_template_single_hop',
    'get_bfd_template_single_hop_output',
]

@pulumi.output_type
class GetBfdTemplateSingleHopResult:
    """
    A collection of values returned by getBfdTemplateSingleHop.
    """
    def __init__(__self__, authentication_md5_keychain=None, authentication_meticulous_md5_keychain=None, authentication_meticulous_sha1_keychain=None, authentication_sha1_keychain=None, dampening_half_time=None, dampening_max_suppressing_time=None, dampening_suppress_time=None, dampening_unsuppress_time=None, device=None, echo=None, id=None, interval_microseconds_min_rx=None, interval_microseconds_min_tx=None, interval_milliseconds_both=None, interval_milliseconds_min_rx=None, interval_milliseconds_min_tx=None, interval_milliseconds_multiplier=None, name=None):
        if authentication_md5_keychain and not isinstance(authentication_md5_keychain, str):
            raise TypeError("Expected argument 'authentication_md5_keychain' to be a str")
        pulumi.set(__self__, "authentication_md5_keychain", authentication_md5_keychain)
        if authentication_meticulous_md5_keychain and not isinstance(authentication_meticulous_md5_keychain, str):
            raise TypeError("Expected argument 'authentication_meticulous_md5_keychain' to be a str")
        pulumi.set(__self__, "authentication_meticulous_md5_keychain", authentication_meticulous_md5_keychain)
        if authentication_meticulous_sha1_keychain and not isinstance(authentication_meticulous_sha1_keychain, str):
            raise TypeError("Expected argument 'authentication_meticulous_sha1_keychain' to be a str")
        pulumi.set(__self__, "authentication_meticulous_sha1_keychain", authentication_meticulous_sha1_keychain)
        if authentication_sha1_keychain and not isinstance(authentication_sha1_keychain, str):
            raise TypeError("Expected argument 'authentication_sha1_keychain' to be a str")
        pulumi.set(__self__, "authentication_sha1_keychain", authentication_sha1_keychain)
        if dampening_half_time and not isinstance(dampening_half_time, int):
            raise TypeError("Expected argument 'dampening_half_time' to be a int")
        pulumi.set(__self__, "dampening_half_time", dampening_half_time)
        if dampening_max_suppressing_time and not isinstance(dampening_max_suppressing_time, int):
            raise TypeError("Expected argument 'dampening_max_suppressing_time' to be a int")
        pulumi.set(__self__, "dampening_max_suppressing_time", dampening_max_suppressing_time)
        if dampening_suppress_time and not isinstance(dampening_suppress_time, int):
            raise TypeError("Expected argument 'dampening_suppress_time' to be a int")
        pulumi.set(__self__, "dampening_suppress_time", dampening_suppress_time)
        if dampening_unsuppress_time and not isinstance(dampening_unsuppress_time, int):
            raise TypeError("Expected argument 'dampening_unsuppress_time' to be a int")
        pulumi.set(__self__, "dampening_unsuppress_time", dampening_unsuppress_time)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if echo and not isinstance(echo, bool):
            raise TypeError("Expected argument 'echo' to be a bool")
        pulumi.set(__self__, "echo", echo)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interval_microseconds_min_rx and not isinstance(interval_microseconds_min_rx, int):
            raise TypeError("Expected argument 'interval_microseconds_min_rx' to be a int")
        pulumi.set(__self__, "interval_microseconds_min_rx", interval_microseconds_min_rx)
        if interval_microseconds_min_tx and not isinstance(interval_microseconds_min_tx, int):
            raise TypeError("Expected argument 'interval_microseconds_min_tx' to be a int")
        pulumi.set(__self__, "interval_microseconds_min_tx", interval_microseconds_min_tx)
        if interval_milliseconds_both and not isinstance(interval_milliseconds_both, int):
            raise TypeError("Expected argument 'interval_milliseconds_both' to be a int")
        pulumi.set(__self__, "interval_milliseconds_both", interval_milliseconds_both)
        if interval_milliseconds_min_rx and not isinstance(interval_milliseconds_min_rx, int):
            raise TypeError("Expected argument 'interval_milliseconds_min_rx' to be a int")
        pulumi.set(__self__, "interval_milliseconds_min_rx", interval_milliseconds_min_rx)
        if interval_milliseconds_min_tx and not isinstance(interval_milliseconds_min_tx, int):
            raise TypeError("Expected argument 'interval_milliseconds_min_tx' to be a int")
        pulumi.set(__self__, "interval_milliseconds_min_tx", interval_milliseconds_min_tx)
        if interval_milliseconds_multiplier and not isinstance(interval_milliseconds_multiplier, int):
            raise TypeError("Expected argument 'interval_milliseconds_multiplier' to be a int")
        pulumi.set(__self__, "interval_milliseconds_multiplier", interval_milliseconds_multiplier)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="authenticationMd5Keychain")
    def authentication_md5_keychain(self) -> str:
        """
        keychain name
        """
        return pulumi.get(self, "authentication_md5_keychain")

    @property
    @pulumi.getter(name="authenticationMeticulousMd5Keychain")
    def authentication_meticulous_md5_keychain(self) -> str:
        """
        keychain name
        """
        return pulumi.get(self, "authentication_meticulous_md5_keychain")

    @property
    @pulumi.getter(name="authenticationMeticulousSha1Keychain")
    def authentication_meticulous_sha1_keychain(self) -> str:
        """
        keychain name
        """
        return pulumi.get(self, "authentication_meticulous_sha1_keychain")

    @property
    @pulumi.getter(name="authenticationSha1Keychain")
    def authentication_sha1_keychain(self) -> str:
        """
        keychain name
        """
        return pulumi.get(self, "authentication_sha1_keychain")

    @property
    @pulumi.getter(name="dampeningHalfTime")
    def dampening_half_time(self) -> int:
        """
        Half-life time for the penalty
        """
        return pulumi.get(self, "dampening_half_time")

    @property
    @pulumi.getter(name="dampeningMaxSuppressingTime")
    def dampening_max_suppressing_time(self) -> int:
        """
        Maximum duration to suppress a session
        """
        return pulumi.get(self, "dampening_max_suppressing_time")

    @property
    @pulumi.getter(name="dampeningSuppressTime")
    def dampening_suppress_time(self) -> int:
        """
        Value to start suppressing a session
        """
        return pulumi.get(self, "dampening_suppress_time")

    @property
    @pulumi.getter(name="dampeningUnsuppressTime")
    def dampening_unsuppress_time(self) -> int:
        """
        Value to unsuppress a session
        """
        return pulumi.get(self, "dampening_unsuppress_time")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def echo(self) -> bool:
        """
        Use echo adjunct as bfd detection mechanism
        """
        return pulumi.get(self, "echo")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The path of the retrieved object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="intervalMicrosecondsMinRx")
    def interval_microseconds_min_rx(self) -> int:
        """
        Minimum receive interval capability
        """
        return pulumi.get(self, "interval_microseconds_min_rx")

    @property
    @pulumi.getter(name="intervalMicrosecondsMinTx")
    def interval_microseconds_min_tx(self) -> int:
        """
        Minimum transmit interval capability
        """
        return pulumi.get(self, "interval_microseconds_min_tx")

    @property
    @pulumi.getter(name="intervalMillisecondsBoth")
    def interval_milliseconds_both(self) -> int:
        """
        Minimum transmit and receive interval capability
        """
        return pulumi.get(self, "interval_milliseconds_both")

    @property
    @pulumi.getter(name="intervalMillisecondsMinRx")
    def interval_milliseconds_min_rx(self) -> int:
        """
        Minimum receive interval capability
        """
        return pulumi.get(self, "interval_milliseconds_min_rx")

    @property
    @pulumi.getter(name="intervalMillisecondsMinTx")
    def interval_milliseconds_min_tx(self) -> int:
        """
        Minimum transmit interval capability
        """
        return pulumi.get(self, "interval_milliseconds_min_tx")

    @property
    @pulumi.getter(name="intervalMillisecondsMultiplier")
    def interval_milliseconds_multiplier(self) -> int:
        """
        Multiplier value used to compute holddown
        """
        return pulumi.get(self, "interval_milliseconds_multiplier")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


class AwaitableGetBfdTemplateSingleHopResult(GetBfdTemplateSingleHopResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBfdTemplateSingleHopResult(
            authentication_md5_keychain=self.authentication_md5_keychain,
            authentication_meticulous_md5_keychain=self.authentication_meticulous_md5_keychain,
            authentication_meticulous_sha1_keychain=self.authentication_meticulous_sha1_keychain,
            authentication_sha1_keychain=self.authentication_sha1_keychain,
            dampening_half_time=self.dampening_half_time,
            dampening_max_suppressing_time=self.dampening_max_suppressing_time,
            dampening_suppress_time=self.dampening_suppress_time,
            dampening_unsuppress_time=self.dampening_unsuppress_time,
            device=self.device,
            echo=self.echo,
            id=self.id,
            interval_microseconds_min_rx=self.interval_microseconds_min_rx,
            interval_microseconds_min_tx=self.interval_microseconds_min_tx,
            interval_milliseconds_both=self.interval_milliseconds_both,
            interval_milliseconds_min_rx=self.interval_milliseconds_min_rx,
            interval_milliseconds_min_tx=self.interval_milliseconds_min_tx,
            interval_milliseconds_multiplier=self.interval_milliseconds_multiplier,
            name=self.name)


def get_bfd_template_single_hop(device: Optional[str] = None,
                                name: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBfdTemplateSingleHopResult:
    """
    This data source can read the BFD Template Single Hop configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.get_bfd_template_single_hop(name="SH-TEMPLATE-1")
    ```


    :param str device: A device name from the provider configuration.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:index/getBfdTemplateSingleHop:getBfdTemplateSingleHop', __args__, opts=opts, typ=GetBfdTemplateSingleHopResult).value

    return AwaitableGetBfdTemplateSingleHopResult(
        authentication_md5_keychain=pulumi.get(__ret__, 'authentication_md5_keychain'),
        authentication_meticulous_md5_keychain=pulumi.get(__ret__, 'authentication_meticulous_md5_keychain'),
        authentication_meticulous_sha1_keychain=pulumi.get(__ret__, 'authentication_meticulous_sha1_keychain'),
        authentication_sha1_keychain=pulumi.get(__ret__, 'authentication_sha1_keychain'),
        dampening_half_time=pulumi.get(__ret__, 'dampening_half_time'),
        dampening_max_suppressing_time=pulumi.get(__ret__, 'dampening_max_suppressing_time'),
        dampening_suppress_time=pulumi.get(__ret__, 'dampening_suppress_time'),
        dampening_unsuppress_time=pulumi.get(__ret__, 'dampening_unsuppress_time'),
        device=pulumi.get(__ret__, 'device'),
        echo=pulumi.get(__ret__, 'echo'),
        id=pulumi.get(__ret__, 'id'),
        interval_microseconds_min_rx=pulumi.get(__ret__, 'interval_microseconds_min_rx'),
        interval_microseconds_min_tx=pulumi.get(__ret__, 'interval_microseconds_min_tx'),
        interval_milliseconds_both=pulumi.get(__ret__, 'interval_milliseconds_both'),
        interval_milliseconds_min_rx=pulumi.get(__ret__, 'interval_milliseconds_min_rx'),
        interval_milliseconds_min_tx=pulumi.get(__ret__, 'interval_milliseconds_min_tx'),
        interval_milliseconds_multiplier=pulumi.get(__ret__, 'interval_milliseconds_multiplier'),
        name=pulumi.get(__ret__, 'name'))


@_utilities.lift_output_func(get_bfd_template_single_hop)
def get_bfd_template_single_hop_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                                       name: Optional[pulumi.Input[str]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBfdTemplateSingleHopResult]:
    """
    This data source can read the BFD Template Single Hop configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.get_bfd_template_single_hop(name="SH-TEMPLATE-1")
    ```


    :param str device: A device name from the provider configuration.
    """
    ...
