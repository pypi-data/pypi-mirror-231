# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetRadiusResult',
    'AwaitableGetRadiusResult',
    'get_radius',
    'get_radius_output',
]

@pulumi.output_type
class GetRadiusResult:
    """
    A collection of values returned by getRadius.
    """
    def __init__(__self__, accounting_port=None, authentication_port=None, automate_tester_ignore_acct_port=None, automate_tester_probe_on_config=None, automate_tester_username=None, device=None, id=None, ipv4_address=None, key=None, name=None, pac_key=None, pac_key_encryption=None, retransmit=None, timeout=None):
        if accounting_port and not isinstance(accounting_port, int):
            raise TypeError("Expected argument 'accounting_port' to be a int")
        pulumi.set(__self__, "accounting_port", accounting_port)
        if authentication_port and not isinstance(authentication_port, int):
            raise TypeError("Expected argument 'authentication_port' to be a int")
        pulumi.set(__self__, "authentication_port", authentication_port)
        if automate_tester_ignore_acct_port and not isinstance(automate_tester_ignore_acct_port, bool):
            raise TypeError("Expected argument 'automate_tester_ignore_acct_port' to be a bool")
        pulumi.set(__self__, "automate_tester_ignore_acct_port", automate_tester_ignore_acct_port)
        if automate_tester_probe_on_config and not isinstance(automate_tester_probe_on_config, bool):
            raise TypeError("Expected argument 'automate_tester_probe_on_config' to be a bool")
        pulumi.set(__self__, "automate_tester_probe_on_config", automate_tester_probe_on_config)
        if automate_tester_username and not isinstance(automate_tester_username, str):
            raise TypeError("Expected argument 'automate_tester_username' to be a str")
        pulumi.set(__self__, "automate_tester_username", automate_tester_username)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ipv4_address and not isinstance(ipv4_address, str):
            raise TypeError("Expected argument 'ipv4_address' to be a str")
        pulumi.set(__self__, "ipv4_address", ipv4_address)
        if key and not isinstance(key, str):
            raise TypeError("Expected argument 'key' to be a str")
        pulumi.set(__self__, "key", key)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if pac_key and not isinstance(pac_key, str):
            raise TypeError("Expected argument 'pac_key' to be a str")
        pulumi.set(__self__, "pac_key", pac_key)
        if pac_key_encryption and not isinstance(pac_key_encryption, str):
            raise TypeError("Expected argument 'pac_key_encryption' to be a str")
        pulumi.set(__self__, "pac_key_encryption", pac_key_encryption)
        if retransmit and not isinstance(retransmit, int):
            raise TypeError("Expected argument 'retransmit' to be a int")
        pulumi.set(__self__, "retransmit", retransmit)
        if timeout and not isinstance(timeout, int):
            raise TypeError("Expected argument 'timeout' to be a int")
        pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="accountingPort")
    def accounting_port(self) -> int:
        """
        UDP port for RADIUS accounting server (default is 1813)
        """
        return pulumi.get(self, "accounting_port")

    @property
    @pulumi.getter(name="authenticationPort")
    def authentication_port(self) -> int:
        """
        UDP port for RADIUS authentication server (default is 1812)
        """
        return pulumi.get(self, "authentication_port")

    @property
    @pulumi.getter(name="automateTesterIgnoreAcctPort")
    def automate_tester_ignore_acct_port(self) -> bool:
        """
        Do not test accounting ports of the servers.
        """
        return pulumi.get(self, "automate_tester_ignore_acct_port")

    @property
    @pulumi.getter(name="automateTesterProbeOnConfig")
    def automate_tester_probe_on_config(self) -> bool:
        """
        Send a packet to verify the server status
        """
        return pulumi.get(self, "automate_tester_probe_on_config")

    @property
    @pulumi.getter(name="automateTesterUsername")
    def automate_tester_username(self) -> str:
        return pulumi.get(self, "automate_tester_username")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The path of the retrieved object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> str:
        """
        IPv4 address or Hostname for radius server
        """
        return pulumi.get(self, "ipv4_address")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name for the radius server configuration
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pacKey")
    def pac_key(self) -> str:
        """
        The UNENCRYPTED (cleartext) server key
        """
        return pulumi.get(self, "pac_key")

    @property
    @pulumi.getter(name="pacKeyEncryption")
    def pac_key_encryption(self) -> str:
        """
        0 - Specifies an UNENCRYPTED key will follow 6 - Specifies an ENCRYPTED key will follow 7 - Specifies HIDDEN key will follow
        """
        return pulumi.get(self, "pac_key_encryption")

    @property
    @pulumi.getter
    def retransmit(self) -> int:
        """
        Number of retries to active server (overrides default)
        """
        return pulumi.get(self, "retransmit")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        """
        Time to wait for a RADIUS server to reply (overrides default)
        """
        return pulumi.get(self, "timeout")


class AwaitableGetRadiusResult(GetRadiusResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRadiusResult(
            accounting_port=self.accounting_port,
            authentication_port=self.authentication_port,
            automate_tester_ignore_acct_port=self.automate_tester_ignore_acct_port,
            automate_tester_probe_on_config=self.automate_tester_probe_on_config,
            automate_tester_username=self.automate_tester_username,
            device=self.device,
            id=self.id,
            ipv4_address=self.ipv4_address,
            key=self.key,
            name=self.name,
            pac_key=self.pac_key,
            pac_key_encryption=self.pac_key_encryption,
            retransmit=self.retransmit,
            timeout=self.timeout)


def get_radius(device: Optional[str] = None,
               name: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRadiusResult:
    """
    This data source can read the Radius configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.get_radius(name="radius_10.10.15.12")
    ```


    :param str device: A device name from the provider configuration.
    :param str name: Name for the radius server configuration
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:index/getRadius:getRadius', __args__, opts=opts, typ=GetRadiusResult).value

    return AwaitableGetRadiusResult(
        accounting_port=pulumi.get(__ret__, 'accounting_port'),
        authentication_port=pulumi.get(__ret__, 'authentication_port'),
        automate_tester_ignore_acct_port=pulumi.get(__ret__, 'automate_tester_ignore_acct_port'),
        automate_tester_probe_on_config=pulumi.get(__ret__, 'automate_tester_probe_on_config'),
        automate_tester_username=pulumi.get(__ret__, 'automate_tester_username'),
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        ipv4_address=pulumi.get(__ret__, 'ipv4_address'),
        key=pulumi.get(__ret__, 'key'),
        name=pulumi.get(__ret__, 'name'),
        pac_key=pulumi.get(__ret__, 'pac_key'),
        pac_key_encryption=pulumi.get(__ret__, 'pac_key_encryption'),
        retransmit=pulumi.get(__ret__, 'retransmit'),
        timeout=pulumi.get(__ret__, 'timeout'))


@_utilities.lift_output_func(get_radius)
def get_radius_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                      name: Optional[pulumi.Input[str]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRadiusResult]:
    """
    This data source can read the Radius configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.get_radius(name="radius_10.10.15.12")
    ```


    :param str device: A device name from the provider configuration.
    :param str name: Name for the radius server configuration
    """
    ...
