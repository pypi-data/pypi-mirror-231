# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetNtpResult',
    'AwaitableGetNtpResult',
    'get_ntp',
    'get_ntp_output',
]

@pulumi.output_type
class GetNtpResult:
    """
    A collection of values returned by getNtp.
    """
    def __init__(__self__, access_group_peer_acl=None, access_group_query_only_acl=None, access_group_serve_acl=None, access_group_serve_only_acl=None, authenticate=None, authentication_keys=None, clock_period=None, device=None, id=None, logging=None, master=None, master_stratum=None, passive=None, peer_vrfs=None, peers=None, server_vrfs=None, servers=None, trap_source_forty_gigabit_ethernet=None, trap_source_gigabit_ethernet=None, trap_source_hundred_gig_e=None, trap_source_loopback=None, trap_source_port_channel=None, trap_source_port_channel_subinterface=None, trap_source_ten_gigabit_ethernet=None, trap_source_vlan=None, update_calendar=None):
        if access_group_peer_acl and not isinstance(access_group_peer_acl, str):
            raise TypeError("Expected argument 'access_group_peer_acl' to be a str")
        pulumi.set(__self__, "access_group_peer_acl", access_group_peer_acl)
        if access_group_query_only_acl and not isinstance(access_group_query_only_acl, str):
            raise TypeError("Expected argument 'access_group_query_only_acl' to be a str")
        pulumi.set(__self__, "access_group_query_only_acl", access_group_query_only_acl)
        if access_group_serve_acl and not isinstance(access_group_serve_acl, str):
            raise TypeError("Expected argument 'access_group_serve_acl' to be a str")
        pulumi.set(__self__, "access_group_serve_acl", access_group_serve_acl)
        if access_group_serve_only_acl and not isinstance(access_group_serve_only_acl, str):
            raise TypeError("Expected argument 'access_group_serve_only_acl' to be a str")
        pulumi.set(__self__, "access_group_serve_only_acl", access_group_serve_only_acl)
        if authenticate and not isinstance(authenticate, bool):
            raise TypeError("Expected argument 'authenticate' to be a bool")
        pulumi.set(__self__, "authenticate", authenticate)
        if authentication_keys and not isinstance(authentication_keys, list):
            raise TypeError("Expected argument 'authentication_keys' to be a list")
        pulumi.set(__self__, "authentication_keys", authentication_keys)
        if clock_period and not isinstance(clock_period, int):
            raise TypeError("Expected argument 'clock_period' to be a int")
        pulumi.set(__self__, "clock_period", clock_period)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if logging and not isinstance(logging, bool):
            raise TypeError("Expected argument 'logging' to be a bool")
        pulumi.set(__self__, "logging", logging)
        if master and not isinstance(master, bool):
            raise TypeError("Expected argument 'master' to be a bool")
        pulumi.set(__self__, "master", master)
        if master_stratum and not isinstance(master_stratum, int):
            raise TypeError("Expected argument 'master_stratum' to be a int")
        pulumi.set(__self__, "master_stratum", master_stratum)
        if passive and not isinstance(passive, bool):
            raise TypeError("Expected argument 'passive' to be a bool")
        pulumi.set(__self__, "passive", passive)
        if peer_vrfs and not isinstance(peer_vrfs, list):
            raise TypeError("Expected argument 'peer_vrfs' to be a list")
        pulumi.set(__self__, "peer_vrfs", peer_vrfs)
        if peers and not isinstance(peers, list):
            raise TypeError("Expected argument 'peers' to be a list")
        pulumi.set(__self__, "peers", peers)
        if server_vrfs and not isinstance(server_vrfs, list):
            raise TypeError("Expected argument 'server_vrfs' to be a list")
        pulumi.set(__self__, "server_vrfs", server_vrfs)
        if servers and not isinstance(servers, list):
            raise TypeError("Expected argument 'servers' to be a list")
        pulumi.set(__self__, "servers", servers)
        if trap_source_forty_gigabit_ethernet and not isinstance(trap_source_forty_gigabit_ethernet, str):
            raise TypeError("Expected argument 'trap_source_forty_gigabit_ethernet' to be a str")
        pulumi.set(__self__, "trap_source_forty_gigabit_ethernet", trap_source_forty_gigabit_ethernet)
        if trap_source_gigabit_ethernet and not isinstance(trap_source_gigabit_ethernet, str):
            raise TypeError("Expected argument 'trap_source_gigabit_ethernet' to be a str")
        pulumi.set(__self__, "trap_source_gigabit_ethernet", trap_source_gigabit_ethernet)
        if trap_source_hundred_gig_e and not isinstance(trap_source_hundred_gig_e, str):
            raise TypeError("Expected argument 'trap_source_hundred_gig_e' to be a str")
        pulumi.set(__self__, "trap_source_hundred_gig_e", trap_source_hundred_gig_e)
        if trap_source_loopback and not isinstance(trap_source_loopback, int):
            raise TypeError("Expected argument 'trap_source_loopback' to be a int")
        pulumi.set(__self__, "trap_source_loopback", trap_source_loopback)
        if trap_source_port_channel and not isinstance(trap_source_port_channel, int):
            raise TypeError("Expected argument 'trap_source_port_channel' to be a int")
        pulumi.set(__self__, "trap_source_port_channel", trap_source_port_channel)
        if trap_source_port_channel_subinterface and not isinstance(trap_source_port_channel_subinterface, str):
            raise TypeError("Expected argument 'trap_source_port_channel_subinterface' to be a str")
        pulumi.set(__self__, "trap_source_port_channel_subinterface", trap_source_port_channel_subinterface)
        if trap_source_ten_gigabit_ethernet and not isinstance(trap_source_ten_gigabit_ethernet, str):
            raise TypeError("Expected argument 'trap_source_ten_gigabit_ethernet' to be a str")
        pulumi.set(__self__, "trap_source_ten_gigabit_ethernet", trap_source_ten_gigabit_ethernet)
        if trap_source_vlan and not isinstance(trap_source_vlan, int):
            raise TypeError("Expected argument 'trap_source_vlan' to be a int")
        pulumi.set(__self__, "trap_source_vlan", trap_source_vlan)
        if update_calendar and not isinstance(update_calendar, bool):
            raise TypeError("Expected argument 'update_calendar' to be a bool")
        pulumi.set(__self__, "update_calendar", update_calendar)

    @property
    @pulumi.getter(name="accessGroupPeerAcl")
    def access_group_peer_acl(self) -> str:
        return pulumi.get(self, "access_group_peer_acl")

    @property
    @pulumi.getter(name="accessGroupQueryOnlyAcl")
    def access_group_query_only_acl(self) -> str:
        return pulumi.get(self, "access_group_query_only_acl")

    @property
    @pulumi.getter(name="accessGroupServeAcl")
    def access_group_serve_acl(self) -> str:
        return pulumi.get(self, "access_group_serve_acl")

    @property
    @pulumi.getter(name="accessGroupServeOnlyAcl")
    def access_group_serve_only_acl(self) -> str:
        return pulumi.get(self, "access_group_serve_only_acl")

    @property
    @pulumi.getter
    def authenticate(self) -> bool:
        """
        Authenticate time sources
        """
        return pulumi.get(self, "authenticate")

    @property
    @pulumi.getter(name="authenticationKeys")
    def authentication_keys(self) -> Sequence['outputs.GetNtpAuthenticationKeyResult']:
        """
        Authentication key for trusted time sources
        """
        return pulumi.get(self, "authentication_keys")

    @property
    @pulumi.getter(name="clockPeriod")
    def clock_period(self) -> int:
        """
        Length of hardware clock tick
        """
        return pulumi.get(self, "clock_period")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The path of the retrieved object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def logging(self) -> bool:
        """
        Enable NTP message logging
        """
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter
    def master(self) -> bool:
        """
        Act as NTP master clock
        """
        return pulumi.get(self, "master")

    @property
    @pulumi.getter(name="masterStratum")
    def master_stratum(self) -> int:
        return pulumi.get(self, "master_stratum")

    @property
    @pulumi.getter
    def passive(self) -> bool:
        """
        NTP passive mode
        """
        return pulumi.get(self, "passive")

    @property
    @pulumi.getter(name="peerVrfs")
    def peer_vrfs(self) -> Sequence['outputs.GetNtpPeerVrfResult']:
        """
        VPN Routing/Forwarding Information
        """
        return pulumi.get(self, "peer_vrfs")

    @property
    @pulumi.getter
    def peers(self) -> Sequence['outputs.GetNtpPeerResult']:
        return pulumi.get(self, "peers")

    @property
    @pulumi.getter(name="serverVrfs")
    def server_vrfs(self) -> Sequence['outputs.GetNtpServerVrfResult']:
        """
        VPN Routing/Forwarding Information
        """
        return pulumi.get(self, "server_vrfs")

    @property
    @pulumi.getter
    def servers(self) -> Sequence['outputs.GetNtpServerResult']:
        return pulumi.get(self, "servers")

    @property
    @pulumi.getter(name="trapSourceFortyGigabitEthernet")
    def trap_source_forty_gigabit_ethernet(self) -> str:
        """
        Forty GigabitEthernet
        """
        return pulumi.get(self, "trap_source_forty_gigabit_ethernet")

    @property
    @pulumi.getter(name="trapSourceGigabitEthernet")
    def trap_source_gigabit_ethernet(self) -> str:
        """
        GigabitEthernet IEEE 802.3z
        """
        return pulumi.get(self, "trap_source_gigabit_ethernet")

    @property
    @pulumi.getter(name="trapSourceHundredGigE")
    def trap_source_hundred_gig_e(self) -> str:
        """
        Hundred GigabitEthernet
        """
        return pulumi.get(self, "trap_source_hundred_gig_e")

    @property
    @pulumi.getter(name="trapSourceLoopback")
    def trap_source_loopback(self) -> int:
        """
        Loopback interface
        """
        return pulumi.get(self, "trap_source_loopback")

    @property
    @pulumi.getter(name="trapSourcePortChannel")
    def trap_source_port_channel(self) -> int:
        """
        Ethernet Channel of interfaces
        """
        return pulumi.get(self, "trap_source_port_channel")

    @property
    @pulumi.getter(name="trapSourcePortChannelSubinterface")
    def trap_source_port_channel_subinterface(self) -> str:
        return pulumi.get(self, "trap_source_port_channel_subinterface")

    @property
    @pulumi.getter(name="trapSourceTenGigabitEthernet")
    def trap_source_ten_gigabit_ethernet(self) -> str:
        """
        Ten Gigabit Ethernet
        """
        return pulumi.get(self, "trap_source_ten_gigabit_ethernet")

    @property
    @pulumi.getter(name="trapSourceVlan")
    def trap_source_vlan(self) -> int:
        """
        Iosxr Vlans
        """
        return pulumi.get(self, "trap_source_vlan")

    @property
    @pulumi.getter(name="updateCalendar")
    def update_calendar(self) -> bool:
        """
        Periodically update calendar with NTP time
        """
        return pulumi.get(self, "update_calendar")


class AwaitableGetNtpResult(GetNtpResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNtpResult(
            access_group_peer_acl=self.access_group_peer_acl,
            access_group_query_only_acl=self.access_group_query_only_acl,
            access_group_serve_acl=self.access_group_serve_acl,
            access_group_serve_only_acl=self.access_group_serve_only_acl,
            authenticate=self.authenticate,
            authentication_keys=self.authentication_keys,
            clock_period=self.clock_period,
            device=self.device,
            id=self.id,
            logging=self.logging,
            master=self.master,
            master_stratum=self.master_stratum,
            passive=self.passive,
            peer_vrfs=self.peer_vrfs,
            peers=self.peers,
            server_vrfs=self.server_vrfs,
            servers=self.servers,
            trap_source_forty_gigabit_ethernet=self.trap_source_forty_gigabit_ethernet,
            trap_source_gigabit_ethernet=self.trap_source_gigabit_ethernet,
            trap_source_hundred_gig_e=self.trap_source_hundred_gig_e,
            trap_source_loopback=self.trap_source_loopback,
            trap_source_port_channel=self.trap_source_port_channel,
            trap_source_port_channel_subinterface=self.trap_source_port_channel_subinterface,
            trap_source_ten_gigabit_ethernet=self.trap_source_ten_gigabit_ethernet,
            trap_source_vlan=self.trap_source_vlan,
            update_calendar=self.update_calendar)


def get_ntp(device: Optional[str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNtpResult:
    """
    This data source can read the NTP configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.get_ntp()
    ```


    :param str device: A device name from the provider configuration.
    """
    __args__ = dict()
    __args__['device'] = device
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:index/getNtp:getNtp', __args__, opts=opts, typ=GetNtpResult).value

    return AwaitableGetNtpResult(
        access_group_peer_acl=pulumi.get(__ret__, 'access_group_peer_acl'),
        access_group_query_only_acl=pulumi.get(__ret__, 'access_group_query_only_acl'),
        access_group_serve_acl=pulumi.get(__ret__, 'access_group_serve_acl'),
        access_group_serve_only_acl=pulumi.get(__ret__, 'access_group_serve_only_acl'),
        authenticate=pulumi.get(__ret__, 'authenticate'),
        authentication_keys=pulumi.get(__ret__, 'authentication_keys'),
        clock_period=pulumi.get(__ret__, 'clock_period'),
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        logging=pulumi.get(__ret__, 'logging'),
        master=pulumi.get(__ret__, 'master'),
        master_stratum=pulumi.get(__ret__, 'master_stratum'),
        passive=pulumi.get(__ret__, 'passive'),
        peer_vrfs=pulumi.get(__ret__, 'peer_vrfs'),
        peers=pulumi.get(__ret__, 'peers'),
        server_vrfs=pulumi.get(__ret__, 'server_vrfs'),
        servers=pulumi.get(__ret__, 'servers'),
        trap_source_forty_gigabit_ethernet=pulumi.get(__ret__, 'trap_source_forty_gigabit_ethernet'),
        trap_source_gigabit_ethernet=pulumi.get(__ret__, 'trap_source_gigabit_ethernet'),
        trap_source_hundred_gig_e=pulumi.get(__ret__, 'trap_source_hundred_gig_e'),
        trap_source_loopback=pulumi.get(__ret__, 'trap_source_loopback'),
        trap_source_port_channel=pulumi.get(__ret__, 'trap_source_port_channel'),
        trap_source_port_channel_subinterface=pulumi.get(__ret__, 'trap_source_port_channel_subinterface'),
        trap_source_ten_gigabit_ethernet=pulumi.get(__ret__, 'trap_source_ten_gigabit_ethernet'),
        trap_source_vlan=pulumi.get(__ret__, 'trap_source_vlan'),
        update_calendar=pulumi.get(__ret__, 'update_calendar'))


@_utilities.lift_output_func(get_ntp)
def get_ntp_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNtpResult]:
    """
    This data source can read the NTP configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.get_ntp()
    ```


    :param str device: A device name from the provider configuration.
    """
    ...
