# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetTemplateResult',
    'AwaitableGetTemplateResult',
    'get_template',
    'get_template_output',
]

@pulumi.output_type
class GetTemplateResult:
    """
    A collection of values returned by getTemplate.
    """
    def __init__(__self__, access_session_closed=None, access_session_control_direction=None, access_session_host_mode=None, access_session_interface_template_sticky=None, access_session_interface_template_sticky_timer=None, access_session_monitor=None, access_session_port_control=None, authentication_periodic=None, authentication_timer_reauthenticate_range=None, authentication_timer_reauthenticate_server=None, cts_manual=None, cts_manual_policy_static_sgt=None, cts_manual_policy_static_trusted=None, cts_manual_propagate_sgt=None, cts_role_based_enforcement=None, device=None, device_tracking=None, device_tracking_attach_policies=None, device_tracking_vlan_range=None, dot1x_max_reauth_req=None, dot1x_max_req=None, dot1x_pae=None, dot1x_timeout_tx_period=None, id=None, ip_access_groups=None, ip_dhcp_snooping_limit_rate=None, ip_dhcp_snooping_trust=None, load_interval=None, mab=None, mab_eap=None, service_policy_input=None, service_policy_output=None, service_policy_type_control_subscriber=None, source_template=None, spanning_tree_bpduguard_enable=None, spanning_tree_portfast=None, spanning_tree_portfast_disable=None, spanning_tree_portfast_edge=None, spanning_tree_portfast_network=None, spanning_tree_service_policy=None, storm_control_action_shutdown=None, storm_control_action_trap=None, storm_control_broadcast_level_bps_threshold=None, storm_control_broadcast_level_pps_threshold=None, storm_control_broadcast_level_threshold=None, storm_control_multicast_level_bps_threshold=None, storm_control_multicast_level_pps_threshold=None, storm_control_multicast_level_threshold=None, subscriber_aging_inactivity_timer_probe=None, subscriber_aging_inactivity_timer_value=None, subscriber_aging_probe=None, switchport_access_vlan=None, switchport_block_unicast=None, switchport_mode_access=None, switchport_mode_trunk=None, switchport_nonegotiate=None, switchport_port_security=None, switchport_port_security_aging_static=None, switchport_port_security_aging_time=None, switchport_port_security_aging_type=None, switchport_port_security_aging_type_inactivity=None, switchport_port_security_maximum_ranges=None, switchport_port_security_violation_protect=None, switchport_port_security_violation_restrict=None, switchport_port_security_violation_shutdown=None, switchport_private_vlan_host_association_primary_range=None, switchport_private_vlan_host_association_secondary_range=None, switchport_trunk_allowed_vlans=None, switchport_trunk_allowed_vlans_all=None, switchport_trunk_allowed_vlans_none=None, switchport_trunk_native_vlan_tag=None, switchport_trunk_native_vlan_vlan_id=None, switchport_voice_vlan=None, template_name=None):
        if access_session_closed and not isinstance(access_session_closed, bool):
            raise TypeError("Expected argument 'access_session_closed' to be a bool")
        pulumi.set(__self__, "access_session_closed", access_session_closed)
        if access_session_control_direction and not isinstance(access_session_control_direction, str):
            raise TypeError("Expected argument 'access_session_control_direction' to be a str")
        pulumi.set(__self__, "access_session_control_direction", access_session_control_direction)
        if access_session_host_mode and not isinstance(access_session_host_mode, str):
            raise TypeError("Expected argument 'access_session_host_mode' to be a str")
        pulumi.set(__self__, "access_session_host_mode", access_session_host_mode)
        if access_session_interface_template_sticky and not isinstance(access_session_interface_template_sticky, bool):
            raise TypeError("Expected argument 'access_session_interface_template_sticky' to be a bool")
        pulumi.set(__self__, "access_session_interface_template_sticky", access_session_interface_template_sticky)
        if access_session_interface_template_sticky_timer and not isinstance(access_session_interface_template_sticky_timer, int):
            raise TypeError("Expected argument 'access_session_interface_template_sticky_timer' to be a int")
        pulumi.set(__self__, "access_session_interface_template_sticky_timer", access_session_interface_template_sticky_timer)
        if access_session_monitor and not isinstance(access_session_monitor, bool):
            raise TypeError("Expected argument 'access_session_monitor' to be a bool")
        pulumi.set(__self__, "access_session_monitor", access_session_monitor)
        if access_session_port_control and not isinstance(access_session_port_control, str):
            raise TypeError("Expected argument 'access_session_port_control' to be a str")
        pulumi.set(__self__, "access_session_port_control", access_session_port_control)
        if authentication_periodic and not isinstance(authentication_periodic, bool):
            raise TypeError("Expected argument 'authentication_periodic' to be a bool")
        pulumi.set(__self__, "authentication_periodic", authentication_periodic)
        if authentication_timer_reauthenticate_range and not isinstance(authentication_timer_reauthenticate_range, int):
            raise TypeError("Expected argument 'authentication_timer_reauthenticate_range' to be a int")
        pulumi.set(__self__, "authentication_timer_reauthenticate_range", authentication_timer_reauthenticate_range)
        if authentication_timer_reauthenticate_server and not isinstance(authentication_timer_reauthenticate_server, bool):
            raise TypeError("Expected argument 'authentication_timer_reauthenticate_server' to be a bool")
        pulumi.set(__self__, "authentication_timer_reauthenticate_server", authentication_timer_reauthenticate_server)
        if cts_manual and not isinstance(cts_manual, bool):
            raise TypeError("Expected argument 'cts_manual' to be a bool")
        pulumi.set(__self__, "cts_manual", cts_manual)
        if cts_manual_policy_static_sgt and not isinstance(cts_manual_policy_static_sgt, int):
            raise TypeError("Expected argument 'cts_manual_policy_static_sgt' to be a int")
        pulumi.set(__self__, "cts_manual_policy_static_sgt", cts_manual_policy_static_sgt)
        if cts_manual_policy_static_trusted and not isinstance(cts_manual_policy_static_trusted, bool):
            raise TypeError("Expected argument 'cts_manual_policy_static_trusted' to be a bool")
        pulumi.set(__self__, "cts_manual_policy_static_trusted", cts_manual_policy_static_trusted)
        if cts_manual_propagate_sgt and not isinstance(cts_manual_propagate_sgt, bool):
            raise TypeError("Expected argument 'cts_manual_propagate_sgt' to be a bool")
        pulumi.set(__self__, "cts_manual_propagate_sgt", cts_manual_propagate_sgt)
        if cts_role_based_enforcement and not isinstance(cts_role_based_enforcement, bool):
            raise TypeError("Expected argument 'cts_role_based_enforcement' to be a bool")
        pulumi.set(__self__, "cts_role_based_enforcement", cts_role_based_enforcement)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if device_tracking and not isinstance(device_tracking, bool):
            raise TypeError("Expected argument 'device_tracking' to be a bool")
        pulumi.set(__self__, "device_tracking", device_tracking)
        if device_tracking_attach_policies and not isinstance(device_tracking_attach_policies, list):
            raise TypeError("Expected argument 'device_tracking_attach_policies' to be a list")
        pulumi.set(__self__, "device_tracking_attach_policies", device_tracking_attach_policies)
        if device_tracking_vlan_range and not isinstance(device_tracking_vlan_range, str):
            raise TypeError("Expected argument 'device_tracking_vlan_range' to be a str")
        pulumi.set(__self__, "device_tracking_vlan_range", device_tracking_vlan_range)
        if dot1x_max_reauth_req and not isinstance(dot1x_max_reauth_req, int):
            raise TypeError("Expected argument 'dot1x_max_reauth_req' to be a int")
        pulumi.set(__self__, "dot1x_max_reauth_req", dot1x_max_reauth_req)
        if dot1x_max_req and not isinstance(dot1x_max_req, int):
            raise TypeError("Expected argument 'dot1x_max_req' to be a int")
        pulumi.set(__self__, "dot1x_max_req", dot1x_max_req)
        if dot1x_pae and not isinstance(dot1x_pae, str):
            raise TypeError("Expected argument 'dot1x_pae' to be a str")
        pulumi.set(__self__, "dot1x_pae", dot1x_pae)
        if dot1x_timeout_tx_period and not isinstance(dot1x_timeout_tx_period, int):
            raise TypeError("Expected argument 'dot1x_timeout_tx_period' to be a int")
        pulumi.set(__self__, "dot1x_timeout_tx_period", dot1x_timeout_tx_period)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_access_groups and not isinstance(ip_access_groups, list):
            raise TypeError("Expected argument 'ip_access_groups' to be a list")
        pulumi.set(__self__, "ip_access_groups", ip_access_groups)
        if ip_dhcp_snooping_limit_rate and not isinstance(ip_dhcp_snooping_limit_rate, int):
            raise TypeError("Expected argument 'ip_dhcp_snooping_limit_rate' to be a int")
        pulumi.set(__self__, "ip_dhcp_snooping_limit_rate", ip_dhcp_snooping_limit_rate)
        if ip_dhcp_snooping_trust and not isinstance(ip_dhcp_snooping_trust, bool):
            raise TypeError("Expected argument 'ip_dhcp_snooping_trust' to be a bool")
        pulumi.set(__self__, "ip_dhcp_snooping_trust", ip_dhcp_snooping_trust)
        if load_interval and not isinstance(load_interval, int):
            raise TypeError("Expected argument 'load_interval' to be a int")
        pulumi.set(__self__, "load_interval", load_interval)
        if mab and not isinstance(mab, bool):
            raise TypeError("Expected argument 'mab' to be a bool")
        pulumi.set(__self__, "mab", mab)
        if mab_eap and not isinstance(mab_eap, bool):
            raise TypeError("Expected argument 'mab_eap' to be a bool")
        pulumi.set(__self__, "mab_eap", mab_eap)
        if service_policy_input and not isinstance(service_policy_input, str):
            raise TypeError("Expected argument 'service_policy_input' to be a str")
        pulumi.set(__self__, "service_policy_input", service_policy_input)
        if service_policy_output and not isinstance(service_policy_output, str):
            raise TypeError("Expected argument 'service_policy_output' to be a str")
        pulumi.set(__self__, "service_policy_output", service_policy_output)
        if service_policy_type_control_subscriber and not isinstance(service_policy_type_control_subscriber, str):
            raise TypeError("Expected argument 'service_policy_type_control_subscriber' to be a str")
        pulumi.set(__self__, "service_policy_type_control_subscriber", service_policy_type_control_subscriber)
        if source_template and not isinstance(source_template, str):
            raise TypeError("Expected argument 'source_template' to be a str")
        pulumi.set(__self__, "source_template", source_template)
        if spanning_tree_bpduguard_enable and not isinstance(spanning_tree_bpduguard_enable, bool):
            raise TypeError("Expected argument 'spanning_tree_bpduguard_enable' to be a bool")
        pulumi.set(__self__, "spanning_tree_bpduguard_enable", spanning_tree_bpduguard_enable)
        if spanning_tree_portfast and not isinstance(spanning_tree_portfast, bool):
            raise TypeError("Expected argument 'spanning_tree_portfast' to be a bool")
        pulumi.set(__self__, "spanning_tree_portfast", spanning_tree_portfast)
        if spanning_tree_portfast_disable and not isinstance(spanning_tree_portfast_disable, bool):
            raise TypeError("Expected argument 'spanning_tree_portfast_disable' to be a bool")
        pulumi.set(__self__, "spanning_tree_portfast_disable", spanning_tree_portfast_disable)
        if spanning_tree_portfast_edge and not isinstance(spanning_tree_portfast_edge, bool):
            raise TypeError("Expected argument 'spanning_tree_portfast_edge' to be a bool")
        pulumi.set(__self__, "spanning_tree_portfast_edge", spanning_tree_portfast_edge)
        if spanning_tree_portfast_network and not isinstance(spanning_tree_portfast_network, bool):
            raise TypeError("Expected argument 'spanning_tree_portfast_network' to be a bool")
        pulumi.set(__self__, "spanning_tree_portfast_network", spanning_tree_portfast_network)
        if spanning_tree_service_policy and not isinstance(spanning_tree_service_policy, bool):
            raise TypeError("Expected argument 'spanning_tree_service_policy' to be a bool")
        pulumi.set(__self__, "spanning_tree_service_policy", spanning_tree_service_policy)
        if storm_control_action_shutdown and not isinstance(storm_control_action_shutdown, bool):
            raise TypeError("Expected argument 'storm_control_action_shutdown' to be a bool")
        pulumi.set(__self__, "storm_control_action_shutdown", storm_control_action_shutdown)
        if storm_control_action_trap and not isinstance(storm_control_action_trap, bool):
            raise TypeError("Expected argument 'storm_control_action_trap' to be a bool")
        pulumi.set(__self__, "storm_control_action_trap", storm_control_action_trap)
        if storm_control_broadcast_level_bps_threshold and not isinstance(storm_control_broadcast_level_bps_threshold, float):
            raise TypeError("Expected argument 'storm_control_broadcast_level_bps_threshold' to be a float")
        pulumi.set(__self__, "storm_control_broadcast_level_bps_threshold", storm_control_broadcast_level_bps_threshold)
        if storm_control_broadcast_level_pps_threshold and not isinstance(storm_control_broadcast_level_pps_threshold, str):
            raise TypeError("Expected argument 'storm_control_broadcast_level_pps_threshold' to be a str")
        pulumi.set(__self__, "storm_control_broadcast_level_pps_threshold", storm_control_broadcast_level_pps_threshold)
        if storm_control_broadcast_level_threshold and not isinstance(storm_control_broadcast_level_threshold, float):
            raise TypeError("Expected argument 'storm_control_broadcast_level_threshold' to be a float")
        pulumi.set(__self__, "storm_control_broadcast_level_threshold", storm_control_broadcast_level_threshold)
        if storm_control_multicast_level_bps_threshold and not isinstance(storm_control_multicast_level_bps_threshold, float):
            raise TypeError("Expected argument 'storm_control_multicast_level_bps_threshold' to be a float")
        pulumi.set(__self__, "storm_control_multicast_level_bps_threshold", storm_control_multicast_level_bps_threshold)
        if storm_control_multicast_level_pps_threshold and not isinstance(storm_control_multicast_level_pps_threshold, str):
            raise TypeError("Expected argument 'storm_control_multicast_level_pps_threshold' to be a str")
        pulumi.set(__self__, "storm_control_multicast_level_pps_threshold", storm_control_multicast_level_pps_threshold)
        if storm_control_multicast_level_threshold and not isinstance(storm_control_multicast_level_threshold, float):
            raise TypeError("Expected argument 'storm_control_multicast_level_threshold' to be a float")
        pulumi.set(__self__, "storm_control_multicast_level_threshold", storm_control_multicast_level_threshold)
        if subscriber_aging_inactivity_timer_probe and not isinstance(subscriber_aging_inactivity_timer_probe, bool):
            raise TypeError("Expected argument 'subscriber_aging_inactivity_timer_probe' to be a bool")
        pulumi.set(__self__, "subscriber_aging_inactivity_timer_probe", subscriber_aging_inactivity_timer_probe)
        if subscriber_aging_inactivity_timer_value and not isinstance(subscriber_aging_inactivity_timer_value, int):
            raise TypeError("Expected argument 'subscriber_aging_inactivity_timer_value' to be a int")
        pulumi.set(__self__, "subscriber_aging_inactivity_timer_value", subscriber_aging_inactivity_timer_value)
        if subscriber_aging_probe and not isinstance(subscriber_aging_probe, bool):
            raise TypeError("Expected argument 'subscriber_aging_probe' to be a bool")
        pulumi.set(__self__, "subscriber_aging_probe", subscriber_aging_probe)
        if switchport_access_vlan and not isinstance(switchport_access_vlan, int):
            raise TypeError("Expected argument 'switchport_access_vlan' to be a int")
        pulumi.set(__self__, "switchport_access_vlan", switchport_access_vlan)
        if switchport_block_unicast and not isinstance(switchport_block_unicast, bool):
            raise TypeError("Expected argument 'switchport_block_unicast' to be a bool")
        pulumi.set(__self__, "switchport_block_unicast", switchport_block_unicast)
        if switchport_mode_access and not isinstance(switchport_mode_access, bool):
            raise TypeError("Expected argument 'switchport_mode_access' to be a bool")
        pulumi.set(__self__, "switchport_mode_access", switchport_mode_access)
        if switchport_mode_trunk and not isinstance(switchport_mode_trunk, bool):
            raise TypeError("Expected argument 'switchport_mode_trunk' to be a bool")
        pulumi.set(__self__, "switchport_mode_trunk", switchport_mode_trunk)
        if switchport_nonegotiate and not isinstance(switchport_nonegotiate, bool):
            raise TypeError("Expected argument 'switchport_nonegotiate' to be a bool")
        pulumi.set(__self__, "switchport_nonegotiate", switchport_nonegotiate)
        if switchport_port_security and not isinstance(switchport_port_security, bool):
            raise TypeError("Expected argument 'switchport_port_security' to be a bool")
        pulumi.set(__self__, "switchport_port_security", switchport_port_security)
        if switchport_port_security_aging_static and not isinstance(switchport_port_security_aging_static, bool):
            raise TypeError("Expected argument 'switchport_port_security_aging_static' to be a bool")
        pulumi.set(__self__, "switchport_port_security_aging_static", switchport_port_security_aging_static)
        if switchport_port_security_aging_time and not isinstance(switchport_port_security_aging_time, int):
            raise TypeError("Expected argument 'switchport_port_security_aging_time' to be a int")
        pulumi.set(__self__, "switchport_port_security_aging_time", switchport_port_security_aging_time)
        if switchport_port_security_aging_type and not isinstance(switchport_port_security_aging_type, bool):
            raise TypeError("Expected argument 'switchport_port_security_aging_type' to be a bool")
        pulumi.set(__self__, "switchport_port_security_aging_type", switchport_port_security_aging_type)
        if switchport_port_security_aging_type_inactivity and not isinstance(switchport_port_security_aging_type_inactivity, bool):
            raise TypeError("Expected argument 'switchport_port_security_aging_type_inactivity' to be a bool")
        pulumi.set(__self__, "switchport_port_security_aging_type_inactivity", switchport_port_security_aging_type_inactivity)
        if switchport_port_security_maximum_ranges and not isinstance(switchport_port_security_maximum_ranges, list):
            raise TypeError("Expected argument 'switchport_port_security_maximum_ranges' to be a list")
        pulumi.set(__self__, "switchport_port_security_maximum_ranges", switchport_port_security_maximum_ranges)
        if switchport_port_security_violation_protect and not isinstance(switchport_port_security_violation_protect, bool):
            raise TypeError("Expected argument 'switchport_port_security_violation_protect' to be a bool")
        pulumi.set(__self__, "switchport_port_security_violation_protect", switchport_port_security_violation_protect)
        if switchport_port_security_violation_restrict and not isinstance(switchport_port_security_violation_restrict, bool):
            raise TypeError("Expected argument 'switchport_port_security_violation_restrict' to be a bool")
        pulumi.set(__self__, "switchport_port_security_violation_restrict", switchport_port_security_violation_restrict)
        if switchport_port_security_violation_shutdown and not isinstance(switchport_port_security_violation_shutdown, bool):
            raise TypeError("Expected argument 'switchport_port_security_violation_shutdown' to be a bool")
        pulumi.set(__self__, "switchport_port_security_violation_shutdown", switchport_port_security_violation_shutdown)
        if switchport_private_vlan_host_association_primary_range and not isinstance(switchport_private_vlan_host_association_primary_range, int):
            raise TypeError("Expected argument 'switchport_private_vlan_host_association_primary_range' to be a int")
        pulumi.set(__self__, "switchport_private_vlan_host_association_primary_range", switchport_private_vlan_host_association_primary_range)
        if switchport_private_vlan_host_association_secondary_range and not isinstance(switchport_private_vlan_host_association_secondary_range, int):
            raise TypeError("Expected argument 'switchport_private_vlan_host_association_secondary_range' to be a int")
        pulumi.set(__self__, "switchport_private_vlan_host_association_secondary_range", switchport_private_vlan_host_association_secondary_range)
        if switchport_trunk_allowed_vlans and not isinstance(switchport_trunk_allowed_vlans, str):
            raise TypeError("Expected argument 'switchport_trunk_allowed_vlans' to be a str")
        pulumi.set(__self__, "switchport_trunk_allowed_vlans", switchport_trunk_allowed_vlans)
        if switchport_trunk_allowed_vlans_all and not isinstance(switchport_trunk_allowed_vlans_all, bool):
            raise TypeError("Expected argument 'switchport_trunk_allowed_vlans_all' to be a bool")
        pulumi.set(__self__, "switchport_trunk_allowed_vlans_all", switchport_trunk_allowed_vlans_all)
        if switchport_trunk_allowed_vlans_none and not isinstance(switchport_trunk_allowed_vlans_none, bool):
            raise TypeError("Expected argument 'switchport_trunk_allowed_vlans_none' to be a bool")
        pulumi.set(__self__, "switchport_trunk_allowed_vlans_none", switchport_trunk_allowed_vlans_none)
        if switchport_trunk_native_vlan_tag and not isinstance(switchport_trunk_native_vlan_tag, bool):
            raise TypeError("Expected argument 'switchport_trunk_native_vlan_tag' to be a bool")
        pulumi.set(__self__, "switchport_trunk_native_vlan_tag", switchport_trunk_native_vlan_tag)
        if switchport_trunk_native_vlan_vlan_id and not isinstance(switchport_trunk_native_vlan_vlan_id, int):
            raise TypeError("Expected argument 'switchport_trunk_native_vlan_vlan_id' to be a int")
        pulumi.set(__self__, "switchport_trunk_native_vlan_vlan_id", switchport_trunk_native_vlan_vlan_id)
        if switchport_voice_vlan and not isinstance(switchport_voice_vlan, int):
            raise TypeError("Expected argument 'switchport_voice_vlan' to be a int")
        pulumi.set(__self__, "switchport_voice_vlan", switchport_voice_vlan)
        if template_name and not isinstance(template_name, str):
            raise TypeError("Expected argument 'template_name' to be a str")
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="accessSessionClosed")
    def access_session_closed(self) -> bool:
        """
        Enable closed access on port (disabled by default, i.e. open access)
        """
        return pulumi.get(self, "access_session_closed")

    @property
    @pulumi.getter(name="accessSessionControlDirection")
    def access_session_control_direction(self) -> str:
        """
        Set the control-direction on the interface
        """
        return pulumi.get(self, "access_session_control_direction")

    @property
    @pulumi.getter(name="accessSessionHostMode")
    def access_session_host_mode(self) -> str:
        """
        Set the Host mode for authentication on this interface
        """
        return pulumi.get(self, "access_session_host_mode")

    @property
    @pulumi.getter(name="accessSessionInterfaceTemplateSticky")
    def access_session_interface_template_sticky(self) -> bool:
        """
        Interface templates set to sticky
        """
        return pulumi.get(self, "access_session_interface_template_sticky")

    @property
    @pulumi.getter(name="accessSessionInterfaceTemplateStickyTimer")
    def access_session_interface_template_sticky_timer(self) -> int:
        """
        Sticky timer value
        """
        return pulumi.get(self, "access_session_interface_template_sticky_timer")

    @property
    @pulumi.getter(name="accessSessionMonitor")
    def access_session_monitor(self) -> bool:
        """
        Apply template to monitor access sessions on the port
        """
        return pulumi.get(self, "access_session_monitor")

    @property
    @pulumi.getter(name="accessSessionPortControl")
    def access_session_port_control(self) -> str:
        """
        Set the port-control value
        """
        return pulumi.get(self, "access_session_port_control")

    @property
    @pulumi.getter(name="authenticationPeriodic")
    def authentication_periodic(self) -> bool:
        """
        Enable or Disable Reauthentication for this port
        """
        return pulumi.get(self, "authentication_periodic")

    @property
    @pulumi.getter(name="authenticationTimerReauthenticateRange")
    def authentication_timer_reauthenticate_range(self) -> int:
        """
        Enter a value between 1 and 65535
        """
        return pulumi.get(self, "authentication_timer_reauthenticate_range")

    @property
    @pulumi.getter(name="authenticationTimerReauthenticateServer")
    def authentication_timer_reauthenticate_server(self) -> bool:
        """
        Obtain re-authentication timeout value from the server
        """
        return pulumi.get(self, "authentication_timer_reauthenticate_server")

    @property
    @pulumi.getter(name="ctsManual")
    def cts_manual(self) -> bool:
        """
        Supply local configuration for CTS parameters
        """
        return pulumi.get(self, "cts_manual")

    @property
    @pulumi.getter(name="ctsManualPolicyStaticSgt")
    def cts_manual_policy_static_sgt(self) -> int:
        """
        Source Security Group Tag to apply to untagged or non-trusted incoming traffic
        """
        return pulumi.get(self, "cts_manual_policy_static_sgt")

    @property
    @pulumi.getter(name="ctsManualPolicyStaticTrusted")
    def cts_manual_policy_static_trusted(self) -> bool:
        """
        Trust the Source Group Tags (SGT) that the peer uses for sending
        """
        return pulumi.get(self, "cts_manual_policy_static_trusted")

    @property
    @pulumi.getter(name="ctsManualPropagateSgt")
    def cts_manual_propagate_sgt(self) -> bool:
        """
        CTS SGT Propagation configuration
        """
        return pulumi.get(self, "cts_manual_propagate_sgt")

    @property
    @pulumi.getter(name="ctsRoleBasedEnforcement")
    def cts_role_based_enforcement(self) -> bool:
        """
        Enable Role-based Access Control enforcement
        """
        return pulumi.get(self, "cts_role_based_enforcement")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="deviceTracking")
    def device_tracking(self) -> bool:
        """
        Configure device-tracking on the interface
        """
        return pulumi.get(self, "device_tracking")

    @property
    @pulumi.getter(name="deviceTrackingAttachPolicies")
    def device_tracking_attach_policies(self) -> Sequence['outputs.GetTemplateDeviceTrackingAttachPolicyResult']:
        """
        policy name for device tracking
        """
        return pulumi.get(self, "device_tracking_attach_policies")

    @property
    @pulumi.getter(name="deviceTrackingVlanRange")
    def device_tracking_vlan_range(self) -> str:
        """
        VLAN IDs of the VLANs for which this policy applies
        """
        return pulumi.get(self, "device_tracking_vlan_range")

    @property
    @pulumi.getter(name="dot1xMaxReauthReq")
    def dot1x_max_reauth_req(self) -> int:
        """
        Max No. of Reauthentication Attempts
        """
        return pulumi.get(self, "dot1x_max_reauth_req")

    @property
    @pulumi.getter(name="dot1xMaxReq")
    def dot1x_max_req(self) -> int:
        """
        Max No. of Retries
        """
        return pulumi.get(self, "dot1x_max_req")

    @property
    @pulumi.getter(name="dot1xPae")
    def dot1x_pae(self) -> str:
        """
        Set 802.1x interface pae type
        """
        return pulumi.get(self, "dot1x_pae")

    @property
    @pulumi.getter(name="dot1xTimeoutTxPeriod")
    def dot1x_timeout_tx_period(self) -> int:
        """
        Timeout for supplicant retries
        """
        return pulumi.get(self, "dot1x_timeout_tx_period")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The path of the retrieved object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAccessGroups")
    def ip_access_groups(self) -> Sequence['outputs.GetTemplateIpAccessGroupResult']:
        """
        Access control list for IP packets
        """
        return pulumi.get(self, "ip_access_groups")

    @property
    @pulumi.getter(name="ipDhcpSnoopingLimitRate")
    def ip_dhcp_snooping_limit_rate(self) -> int:
        """
        DHCP snooping rate limit
        """
        return pulumi.get(self, "ip_dhcp_snooping_limit_rate")

    @property
    @pulumi.getter(name="ipDhcpSnoopingTrust")
    def ip_dhcp_snooping_trust(self) -> bool:
        """
        DHCP Snooping trust config
        """
        return pulumi.get(self, "ip_dhcp_snooping_trust")

    @property
    @pulumi.getter(name="loadInterval")
    def load_interval(self) -> int:
        """
        Load interval delay in seconds
        """
        return pulumi.get(self, "load_interval")

    @property
    @pulumi.getter
    def mab(self) -> bool:
        """
        MAC Authentication Bypass Interface Config Commands
        """
        return pulumi.get(self, "mab")

    @property
    @pulumi.getter(name="mabEap")
    def mab_eap(self) -> bool:
        """
        Use EAP authentication for MAC Auth Bypass
        """
        return pulumi.get(self, "mab_eap")

    @property
    @pulumi.getter(name="servicePolicyInput")
    def service_policy_input(self) -> str:
        """
        policy-map name
        """
        return pulumi.get(self, "service_policy_input")

    @property
    @pulumi.getter(name="servicePolicyOutput")
    def service_policy_output(self) -> str:
        """
        policy-map name
        """
        return pulumi.get(self, "service_policy_output")

    @property
    @pulumi.getter(name="servicePolicyTypeControlSubscriber")
    def service_policy_type_control_subscriber(self) -> str:
        """
        Apply a subscriber control policy to the interface
        """
        return pulumi.get(self, "service_policy_type_control_subscriber")

    @property
    @pulumi.getter(name="sourceTemplate")
    def source_template(self) -> str:
        """
        Get config from a template
        """
        return pulumi.get(self, "source_template")

    @property
    @pulumi.getter(name="spanningTreeBpduguardEnable")
    def spanning_tree_bpduguard_enable(self) -> bool:
        """
        Enable BPDU guard for this interface
        """
        return pulumi.get(self, "spanning_tree_bpduguard_enable")

    @property
    @pulumi.getter(name="spanningTreePortfast")
    def spanning_tree_portfast(self) -> bool:
        """
        Portfast options for the interface
        """
        return pulumi.get(self, "spanning_tree_portfast")

    @property
    @pulumi.getter(name="spanningTreePortfastDisable")
    def spanning_tree_portfast_disable(self) -> bool:
        """
        Disable portfast for this interface
        """
        return pulumi.get(self, "spanning_tree_portfast_disable")

    @property
    @pulumi.getter(name="spanningTreePortfastEdge")
    def spanning_tree_portfast_edge(self) -> bool:
        """
        Enable portfast edge on the interface
        """
        return pulumi.get(self, "spanning_tree_portfast_edge")

    @property
    @pulumi.getter(name="spanningTreePortfastNetwork")
    def spanning_tree_portfast_network(self) -> bool:
        """
        Enable portfast network on the interface
        """
        return pulumi.get(self, "spanning_tree_portfast_network")

    @property
    @pulumi.getter(name="spanningTreeServicePolicy")
    def spanning_tree_service_policy(self) -> bool:
        """
        help
        """
        return pulumi.get(self, "spanning_tree_service_policy")

    @property
    @pulumi.getter(name="stormControlActionShutdown")
    def storm_control_action_shutdown(self) -> bool:
        """
        Shutdown this interface if a storm occurs
        """
        return pulumi.get(self, "storm_control_action_shutdown")

    @property
    @pulumi.getter(name="stormControlActionTrap")
    def storm_control_action_trap(self) -> bool:
        """
        Send SNMP trap if a storm occurs
        """
        return pulumi.get(self, "storm_control_action_trap")

    @property
    @pulumi.getter(name="stormControlBroadcastLevelBpsThreshold")
    def storm_control_broadcast_level_bps_threshold(self) -> float:
        """
        Enter threshold
        """
        return pulumi.get(self, "storm_control_broadcast_level_bps_threshold")

    @property
    @pulumi.getter(name="stormControlBroadcastLevelPpsThreshold")
    def storm_control_broadcast_level_pps_threshold(self) -> str:
        """
        Enter threshold
        """
        return pulumi.get(self, "storm_control_broadcast_level_pps_threshold")

    @property
    @pulumi.getter(name="stormControlBroadcastLevelThreshold")
    def storm_control_broadcast_level_threshold(self) -> float:
        """
        Enter threshold
        """
        return pulumi.get(self, "storm_control_broadcast_level_threshold")

    @property
    @pulumi.getter(name="stormControlMulticastLevelBpsThreshold")
    def storm_control_multicast_level_bps_threshold(self) -> float:
        """
        Enter threshold
        """
        return pulumi.get(self, "storm_control_multicast_level_bps_threshold")

    @property
    @pulumi.getter(name="stormControlMulticastLevelPpsThreshold")
    def storm_control_multicast_level_pps_threshold(self) -> str:
        """
        Enter threshold
        """
        return pulumi.get(self, "storm_control_multicast_level_pps_threshold")

    @property
    @pulumi.getter(name="stormControlMulticastLevelThreshold")
    def storm_control_multicast_level_threshold(self) -> float:
        """
        Enter threshold
        """
        return pulumi.get(self, "storm_control_multicast_level_threshold")

    @property
    @pulumi.getter(name="subscriberAgingInactivityTimerProbe")
    def subscriber_aging_inactivity_timer_probe(self) -> bool:
        """
        ARP probe
        """
        return pulumi.get(self, "subscriber_aging_inactivity_timer_probe")

    @property
    @pulumi.getter(name="subscriberAgingInactivityTimerValue")
    def subscriber_aging_inactivity_timer_value(self) -> int:
        """
        Enter a value between 1 and 65535 in seconds
        """
        return pulumi.get(self, "subscriber_aging_inactivity_timer_value")

    @property
    @pulumi.getter(name="subscriberAgingProbe")
    def subscriber_aging_probe(self) -> bool:
        """
        ARP probe
        """
        return pulumi.get(self, "subscriber_aging_probe")

    @property
    @pulumi.getter(name="switchportAccessVlan")
    def switchport_access_vlan(self) -> int:
        """
        VLAN ID of the VLAN when this port is in access mode
        """
        return pulumi.get(self, "switchport_access_vlan")

    @property
    @pulumi.getter(name="switchportBlockUnicast")
    def switchport_block_unicast(self) -> bool:
        """
        Block unknown unicast addresses
        """
        return pulumi.get(self, "switchport_block_unicast")

    @property
    @pulumi.getter(name="switchportModeAccess")
    def switchport_mode_access(self) -> bool:
        """
        Set trunking mode to ACCESS unconditionally
        """
        return pulumi.get(self, "switchport_mode_access")

    @property
    @pulumi.getter(name="switchportModeTrunk")
    def switchport_mode_trunk(self) -> bool:
        """
        Set trunking mode to TRUNK unconditionally
        """
        return pulumi.get(self, "switchport_mode_trunk")

    @property
    @pulumi.getter(name="switchportNonegotiate")
    def switchport_nonegotiate(self) -> bool:
        """
        Device will not engage in negotiation protocol on this interface
        """
        return pulumi.get(self, "switchport_nonegotiate")

    @property
    @pulumi.getter(name="switchportPortSecurity")
    def switchport_port_security(self) -> bool:
        """
        Security related command
        """
        return pulumi.get(self, "switchport_port_security")

    @property
    @pulumi.getter(name="switchportPortSecurityAgingStatic")
    def switchport_port_security_aging_static(self) -> bool:
        """
        Enable aging for configured secure addresses
        """
        return pulumi.get(self, "switchport_port_security_aging_static")

    @property
    @pulumi.getter(name="switchportPortSecurityAgingTime")
    def switchport_port_security_aging_time(self) -> int:
        """
        Port-security aging time
        """
        return pulumi.get(self, "switchport_port_security_aging_time")

    @property
    @pulumi.getter(name="switchportPortSecurityAgingType")
    def switchport_port_security_aging_type(self) -> bool:
        """
        Port-security aging type
        """
        return pulumi.get(self, "switchport_port_security_aging_type")

    @property
    @pulumi.getter(name="switchportPortSecurityAgingTypeInactivity")
    def switchport_port_security_aging_type_inactivity(self) -> bool:
        """
        Aging based on inactivity time period
        """
        return pulumi.get(self, "switchport_port_security_aging_type_inactivity")

    @property
    @pulumi.getter(name="switchportPortSecurityMaximumRanges")
    def switchport_port_security_maximum_ranges(self) -> Sequence['outputs.GetTemplateSwitchportPortSecurityMaximumRangeResult']:
        return pulumi.get(self, "switchport_port_security_maximum_ranges")

    @property
    @pulumi.getter(name="switchportPortSecurityViolationProtect")
    def switchport_port_security_violation_protect(self) -> bool:
        """
        Security violation protect mode
        """
        return pulumi.get(self, "switchport_port_security_violation_protect")

    @property
    @pulumi.getter(name="switchportPortSecurityViolationRestrict")
    def switchport_port_security_violation_restrict(self) -> bool:
        """
        Security violation restrict mode
        """
        return pulumi.get(self, "switchport_port_security_violation_restrict")

    @property
    @pulumi.getter(name="switchportPortSecurityViolationShutdown")
    def switchport_port_security_violation_shutdown(self) -> bool:
        """
        Security violation shutdown mode
        """
        return pulumi.get(self, "switchport_port_security_violation_shutdown")

    @property
    @pulumi.getter(name="switchportPrivateVlanHostAssociationPrimaryRange")
    def switchport_private_vlan_host_association_primary_range(self) -> int:
        """
        Primary normal range VLAN ID of the private VLAN port association
        """
        return pulumi.get(self, "switchport_private_vlan_host_association_primary_range")

    @property
    @pulumi.getter(name="switchportPrivateVlanHostAssociationSecondaryRange")
    def switchport_private_vlan_host_association_secondary_range(self) -> int:
        """
        Secondary normal range VLAN ID of the private VLAN host port association
        """
        return pulumi.get(self, "switchport_private_vlan_host_association_secondary_range")

    @property
    @pulumi.getter(name="switchportTrunkAllowedVlans")
    def switchport_trunk_allowed_vlans(self) -> str:
        """
        VLAN IDs of the allowed VLANs when this port is in trunking mode
        """
        return pulumi.get(self, "switchport_trunk_allowed_vlans")

    @property
    @pulumi.getter(name="switchportTrunkAllowedVlansAll")
    def switchport_trunk_allowed_vlans_all(self) -> bool:
        """
        all VLANs
        """
        return pulumi.get(self, "switchport_trunk_allowed_vlans_all")

    @property
    @pulumi.getter(name="switchportTrunkAllowedVlansNone")
    def switchport_trunk_allowed_vlans_none(self) -> bool:
        """
        no VLANs
        """
        return pulumi.get(self, "switchport_trunk_allowed_vlans_none")

    @property
    @pulumi.getter(name="switchportTrunkNativeVlanTag")
    def switchport_trunk_native_vlan_tag(self) -> bool:
        """
        Set native VLAN tagging state
        """
        return pulumi.get(self, "switchport_trunk_native_vlan_tag")

    @property
    @pulumi.getter(name="switchportTrunkNativeVlanVlanId")
    def switchport_trunk_native_vlan_vlan_id(self) -> int:
        """
        VLAN ID of the native VLAN when this port is in trunking mode
        """
        return pulumi.get(self, "switchport_trunk_native_vlan_vlan_id")

    @property
    @pulumi.getter(name="switchportVoiceVlan")
    def switchport_voice_vlan(self) -> int:
        """
        Vlan for voice traffic
        """
        return pulumi.get(self, "switchport_voice_vlan")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> str:
        """
        Template name
        """
        return pulumi.get(self, "template_name")


class AwaitableGetTemplateResult(GetTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTemplateResult(
            access_session_closed=self.access_session_closed,
            access_session_control_direction=self.access_session_control_direction,
            access_session_host_mode=self.access_session_host_mode,
            access_session_interface_template_sticky=self.access_session_interface_template_sticky,
            access_session_interface_template_sticky_timer=self.access_session_interface_template_sticky_timer,
            access_session_monitor=self.access_session_monitor,
            access_session_port_control=self.access_session_port_control,
            authentication_periodic=self.authentication_periodic,
            authentication_timer_reauthenticate_range=self.authentication_timer_reauthenticate_range,
            authentication_timer_reauthenticate_server=self.authentication_timer_reauthenticate_server,
            cts_manual=self.cts_manual,
            cts_manual_policy_static_sgt=self.cts_manual_policy_static_sgt,
            cts_manual_policy_static_trusted=self.cts_manual_policy_static_trusted,
            cts_manual_propagate_sgt=self.cts_manual_propagate_sgt,
            cts_role_based_enforcement=self.cts_role_based_enforcement,
            device=self.device,
            device_tracking=self.device_tracking,
            device_tracking_attach_policies=self.device_tracking_attach_policies,
            device_tracking_vlan_range=self.device_tracking_vlan_range,
            dot1x_max_reauth_req=self.dot1x_max_reauth_req,
            dot1x_max_req=self.dot1x_max_req,
            dot1x_pae=self.dot1x_pae,
            dot1x_timeout_tx_period=self.dot1x_timeout_tx_period,
            id=self.id,
            ip_access_groups=self.ip_access_groups,
            ip_dhcp_snooping_limit_rate=self.ip_dhcp_snooping_limit_rate,
            ip_dhcp_snooping_trust=self.ip_dhcp_snooping_trust,
            load_interval=self.load_interval,
            mab=self.mab,
            mab_eap=self.mab_eap,
            service_policy_input=self.service_policy_input,
            service_policy_output=self.service_policy_output,
            service_policy_type_control_subscriber=self.service_policy_type_control_subscriber,
            source_template=self.source_template,
            spanning_tree_bpduguard_enable=self.spanning_tree_bpduguard_enable,
            spanning_tree_portfast=self.spanning_tree_portfast,
            spanning_tree_portfast_disable=self.spanning_tree_portfast_disable,
            spanning_tree_portfast_edge=self.spanning_tree_portfast_edge,
            spanning_tree_portfast_network=self.spanning_tree_portfast_network,
            spanning_tree_service_policy=self.spanning_tree_service_policy,
            storm_control_action_shutdown=self.storm_control_action_shutdown,
            storm_control_action_trap=self.storm_control_action_trap,
            storm_control_broadcast_level_bps_threshold=self.storm_control_broadcast_level_bps_threshold,
            storm_control_broadcast_level_pps_threshold=self.storm_control_broadcast_level_pps_threshold,
            storm_control_broadcast_level_threshold=self.storm_control_broadcast_level_threshold,
            storm_control_multicast_level_bps_threshold=self.storm_control_multicast_level_bps_threshold,
            storm_control_multicast_level_pps_threshold=self.storm_control_multicast_level_pps_threshold,
            storm_control_multicast_level_threshold=self.storm_control_multicast_level_threshold,
            subscriber_aging_inactivity_timer_probe=self.subscriber_aging_inactivity_timer_probe,
            subscriber_aging_inactivity_timer_value=self.subscriber_aging_inactivity_timer_value,
            subscriber_aging_probe=self.subscriber_aging_probe,
            switchport_access_vlan=self.switchport_access_vlan,
            switchport_block_unicast=self.switchport_block_unicast,
            switchport_mode_access=self.switchport_mode_access,
            switchport_mode_trunk=self.switchport_mode_trunk,
            switchport_nonegotiate=self.switchport_nonegotiate,
            switchport_port_security=self.switchport_port_security,
            switchport_port_security_aging_static=self.switchport_port_security_aging_static,
            switchport_port_security_aging_time=self.switchport_port_security_aging_time,
            switchport_port_security_aging_type=self.switchport_port_security_aging_type,
            switchport_port_security_aging_type_inactivity=self.switchport_port_security_aging_type_inactivity,
            switchport_port_security_maximum_ranges=self.switchport_port_security_maximum_ranges,
            switchport_port_security_violation_protect=self.switchport_port_security_violation_protect,
            switchport_port_security_violation_restrict=self.switchport_port_security_violation_restrict,
            switchport_port_security_violation_shutdown=self.switchport_port_security_violation_shutdown,
            switchport_private_vlan_host_association_primary_range=self.switchport_private_vlan_host_association_primary_range,
            switchport_private_vlan_host_association_secondary_range=self.switchport_private_vlan_host_association_secondary_range,
            switchport_trunk_allowed_vlans=self.switchport_trunk_allowed_vlans,
            switchport_trunk_allowed_vlans_all=self.switchport_trunk_allowed_vlans_all,
            switchport_trunk_allowed_vlans_none=self.switchport_trunk_allowed_vlans_none,
            switchport_trunk_native_vlan_tag=self.switchport_trunk_native_vlan_tag,
            switchport_trunk_native_vlan_vlan_id=self.switchport_trunk_native_vlan_vlan_id,
            switchport_voice_vlan=self.switchport_voice_vlan,
            template_name=self.template_name)


def get_template(device: Optional[str] = None,
                 template_name: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTemplateResult:
    """
    This data source can read the Template configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.get_template(template_name="TEMP1")
    ```


    :param str device: A device name from the provider configuration.
    :param str template_name: Template name
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['templateName'] = template_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:index/getTemplate:getTemplate', __args__, opts=opts, typ=GetTemplateResult).value

    return AwaitableGetTemplateResult(
        access_session_closed=pulumi.get(__ret__, 'access_session_closed'),
        access_session_control_direction=pulumi.get(__ret__, 'access_session_control_direction'),
        access_session_host_mode=pulumi.get(__ret__, 'access_session_host_mode'),
        access_session_interface_template_sticky=pulumi.get(__ret__, 'access_session_interface_template_sticky'),
        access_session_interface_template_sticky_timer=pulumi.get(__ret__, 'access_session_interface_template_sticky_timer'),
        access_session_monitor=pulumi.get(__ret__, 'access_session_monitor'),
        access_session_port_control=pulumi.get(__ret__, 'access_session_port_control'),
        authentication_periodic=pulumi.get(__ret__, 'authentication_periodic'),
        authentication_timer_reauthenticate_range=pulumi.get(__ret__, 'authentication_timer_reauthenticate_range'),
        authentication_timer_reauthenticate_server=pulumi.get(__ret__, 'authentication_timer_reauthenticate_server'),
        cts_manual=pulumi.get(__ret__, 'cts_manual'),
        cts_manual_policy_static_sgt=pulumi.get(__ret__, 'cts_manual_policy_static_sgt'),
        cts_manual_policy_static_trusted=pulumi.get(__ret__, 'cts_manual_policy_static_trusted'),
        cts_manual_propagate_sgt=pulumi.get(__ret__, 'cts_manual_propagate_sgt'),
        cts_role_based_enforcement=pulumi.get(__ret__, 'cts_role_based_enforcement'),
        device=pulumi.get(__ret__, 'device'),
        device_tracking=pulumi.get(__ret__, 'device_tracking'),
        device_tracking_attach_policies=pulumi.get(__ret__, 'device_tracking_attach_policies'),
        device_tracking_vlan_range=pulumi.get(__ret__, 'device_tracking_vlan_range'),
        dot1x_max_reauth_req=pulumi.get(__ret__, 'dot1x_max_reauth_req'),
        dot1x_max_req=pulumi.get(__ret__, 'dot1x_max_req'),
        dot1x_pae=pulumi.get(__ret__, 'dot1x_pae'),
        dot1x_timeout_tx_period=pulumi.get(__ret__, 'dot1x_timeout_tx_period'),
        id=pulumi.get(__ret__, 'id'),
        ip_access_groups=pulumi.get(__ret__, 'ip_access_groups'),
        ip_dhcp_snooping_limit_rate=pulumi.get(__ret__, 'ip_dhcp_snooping_limit_rate'),
        ip_dhcp_snooping_trust=pulumi.get(__ret__, 'ip_dhcp_snooping_trust'),
        load_interval=pulumi.get(__ret__, 'load_interval'),
        mab=pulumi.get(__ret__, 'mab'),
        mab_eap=pulumi.get(__ret__, 'mab_eap'),
        service_policy_input=pulumi.get(__ret__, 'service_policy_input'),
        service_policy_output=pulumi.get(__ret__, 'service_policy_output'),
        service_policy_type_control_subscriber=pulumi.get(__ret__, 'service_policy_type_control_subscriber'),
        source_template=pulumi.get(__ret__, 'source_template'),
        spanning_tree_bpduguard_enable=pulumi.get(__ret__, 'spanning_tree_bpduguard_enable'),
        spanning_tree_portfast=pulumi.get(__ret__, 'spanning_tree_portfast'),
        spanning_tree_portfast_disable=pulumi.get(__ret__, 'spanning_tree_portfast_disable'),
        spanning_tree_portfast_edge=pulumi.get(__ret__, 'spanning_tree_portfast_edge'),
        spanning_tree_portfast_network=pulumi.get(__ret__, 'spanning_tree_portfast_network'),
        spanning_tree_service_policy=pulumi.get(__ret__, 'spanning_tree_service_policy'),
        storm_control_action_shutdown=pulumi.get(__ret__, 'storm_control_action_shutdown'),
        storm_control_action_trap=pulumi.get(__ret__, 'storm_control_action_trap'),
        storm_control_broadcast_level_bps_threshold=pulumi.get(__ret__, 'storm_control_broadcast_level_bps_threshold'),
        storm_control_broadcast_level_pps_threshold=pulumi.get(__ret__, 'storm_control_broadcast_level_pps_threshold'),
        storm_control_broadcast_level_threshold=pulumi.get(__ret__, 'storm_control_broadcast_level_threshold'),
        storm_control_multicast_level_bps_threshold=pulumi.get(__ret__, 'storm_control_multicast_level_bps_threshold'),
        storm_control_multicast_level_pps_threshold=pulumi.get(__ret__, 'storm_control_multicast_level_pps_threshold'),
        storm_control_multicast_level_threshold=pulumi.get(__ret__, 'storm_control_multicast_level_threshold'),
        subscriber_aging_inactivity_timer_probe=pulumi.get(__ret__, 'subscriber_aging_inactivity_timer_probe'),
        subscriber_aging_inactivity_timer_value=pulumi.get(__ret__, 'subscriber_aging_inactivity_timer_value'),
        subscriber_aging_probe=pulumi.get(__ret__, 'subscriber_aging_probe'),
        switchport_access_vlan=pulumi.get(__ret__, 'switchport_access_vlan'),
        switchport_block_unicast=pulumi.get(__ret__, 'switchport_block_unicast'),
        switchport_mode_access=pulumi.get(__ret__, 'switchport_mode_access'),
        switchport_mode_trunk=pulumi.get(__ret__, 'switchport_mode_trunk'),
        switchport_nonegotiate=pulumi.get(__ret__, 'switchport_nonegotiate'),
        switchport_port_security=pulumi.get(__ret__, 'switchport_port_security'),
        switchport_port_security_aging_static=pulumi.get(__ret__, 'switchport_port_security_aging_static'),
        switchport_port_security_aging_time=pulumi.get(__ret__, 'switchport_port_security_aging_time'),
        switchport_port_security_aging_type=pulumi.get(__ret__, 'switchport_port_security_aging_type'),
        switchport_port_security_aging_type_inactivity=pulumi.get(__ret__, 'switchport_port_security_aging_type_inactivity'),
        switchport_port_security_maximum_ranges=pulumi.get(__ret__, 'switchport_port_security_maximum_ranges'),
        switchport_port_security_violation_protect=pulumi.get(__ret__, 'switchport_port_security_violation_protect'),
        switchport_port_security_violation_restrict=pulumi.get(__ret__, 'switchport_port_security_violation_restrict'),
        switchport_port_security_violation_shutdown=pulumi.get(__ret__, 'switchport_port_security_violation_shutdown'),
        switchport_private_vlan_host_association_primary_range=pulumi.get(__ret__, 'switchport_private_vlan_host_association_primary_range'),
        switchport_private_vlan_host_association_secondary_range=pulumi.get(__ret__, 'switchport_private_vlan_host_association_secondary_range'),
        switchport_trunk_allowed_vlans=pulumi.get(__ret__, 'switchport_trunk_allowed_vlans'),
        switchport_trunk_allowed_vlans_all=pulumi.get(__ret__, 'switchport_trunk_allowed_vlans_all'),
        switchport_trunk_allowed_vlans_none=pulumi.get(__ret__, 'switchport_trunk_allowed_vlans_none'),
        switchport_trunk_native_vlan_tag=pulumi.get(__ret__, 'switchport_trunk_native_vlan_tag'),
        switchport_trunk_native_vlan_vlan_id=pulumi.get(__ret__, 'switchport_trunk_native_vlan_vlan_id'),
        switchport_voice_vlan=pulumi.get(__ret__, 'switchport_voice_vlan'),
        template_name=pulumi.get(__ret__, 'template_name'))


@_utilities.lift_output_func(get_template)
def get_template_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                        template_name: Optional[pulumi.Input[str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTemplateResult]:
    """
    This data source can read the Template configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.get_template(template_name="TEMP1")
    ```


    :param str device: A device name from the provider configuration.
    :param str template_name: Template name
    """
    ...
