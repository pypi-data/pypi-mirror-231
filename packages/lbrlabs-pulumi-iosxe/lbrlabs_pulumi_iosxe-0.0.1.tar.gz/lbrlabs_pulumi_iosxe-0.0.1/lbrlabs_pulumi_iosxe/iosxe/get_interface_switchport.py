# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetInterfaceSwitchportResult',
    'AwaitableGetInterfaceSwitchportResult',
    'get_interface_switchport',
    'get_interface_switchport_output',
]

@pulumi.output_type
class GetInterfaceSwitchportResult:
    """
    A collection of values returned by getInterfaceSwitchport.
    """
    def __init__(__self__, access_vlan=None, device=None, host=None, id=None, mode_access=None, mode_dot1q_tunnel=None, mode_private_vlan_host=None, mode_private_vlan_promiscuous=None, mode_private_vlan_trunk=None, mode_trunk=None, name=None, nonegotiate=None, trunk_allowed_vlans=None, trunk_allowed_vlans_none=None, trunk_native_vlan=None, trunk_native_vlan_tag=None, type=None):
        if access_vlan and not isinstance(access_vlan, str):
            raise TypeError("Expected argument 'access_vlan' to be a str")
        pulumi.set(__self__, "access_vlan", access_vlan)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if host and not isinstance(host, bool):
            raise TypeError("Expected argument 'host' to be a bool")
        pulumi.set(__self__, "host", host)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if mode_access and not isinstance(mode_access, bool):
            raise TypeError("Expected argument 'mode_access' to be a bool")
        pulumi.set(__self__, "mode_access", mode_access)
        if mode_dot1q_tunnel and not isinstance(mode_dot1q_tunnel, bool):
            raise TypeError("Expected argument 'mode_dot1q_tunnel' to be a bool")
        pulumi.set(__self__, "mode_dot1q_tunnel", mode_dot1q_tunnel)
        if mode_private_vlan_host and not isinstance(mode_private_vlan_host, bool):
            raise TypeError("Expected argument 'mode_private_vlan_host' to be a bool")
        pulumi.set(__self__, "mode_private_vlan_host", mode_private_vlan_host)
        if mode_private_vlan_promiscuous and not isinstance(mode_private_vlan_promiscuous, bool):
            raise TypeError("Expected argument 'mode_private_vlan_promiscuous' to be a bool")
        pulumi.set(__self__, "mode_private_vlan_promiscuous", mode_private_vlan_promiscuous)
        if mode_private_vlan_trunk and not isinstance(mode_private_vlan_trunk, bool):
            raise TypeError("Expected argument 'mode_private_vlan_trunk' to be a bool")
        pulumi.set(__self__, "mode_private_vlan_trunk", mode_private_vlan_trunk)
        if mode_trunk and not isinstance(mode_trunk, bool):
            raise TypeError("Expected argument 'mode_trunk' to be a bool")
        pulumi.set(__self__, "mode_trunk", mode_trunk)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if nonegotiate and not isinstance(nonegotiate, bool):
            raise TypeError("Expected argument 'nonegotiate' to be a bool")
        pulumi.set(__self__, "nonegotiate", nonegotiate)
        if trunk_allowed_vlans and not isinstance(trunk_allowed_vlans, str):
            raise TypeError("Expected argument 'trunk_allowed_vlans' to be a str")
        pulumi.set(__self__, "trunk_allowed_vlans", trunk_allowed_vlans)
        if trunk_allowed_vlans_none and not isinstance(trunk_allowed_vlans_none, bool):
            raise TypeError("Expected argument 'trunk_allowed_vlans_none' to be a bool")
        pulumi.set(__self__, "trunk_allowed_vlans_none", trunk_allowed_vlans_none)
        if trunk_native_vlan and not isinstance(trunk_native_vlan, int):
            raise TypeError("Expected argument 'trunk_native_vlan' to be a int")
        pulumi.set(__self__, "trunk_native_vlan", trunk_native_vlan)
        if trunk_native_vlan_tag and not isinstance(trunk_native_vlan_tag, bool):
            raise TypeError("Expected argument 'trunk_native_vlan_tag' to be a bool")
        pulumi.set(__self__, "trunk_native_vlan_tag", trunk_native_vlan_tag)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessVlan")
    def access_vlan(self) -> str:
        return pulumi.get(self, "access_vlan")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def host(self) -> bool:
        """
        Set port host
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The path of the retrieved object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modeAccess")
    def mode_access(self) -> bool:
        """
        Set trunking mode to ACCESS unconditionally
        """
        return pulumi.get(self, "mode_access")

    @property
    @pulumi.getter(name="modeDot1qTunnel")
    def mode_dot1q_tunnel(self) -> bool:
        """
        set trunking mode to TUNNEL unconditionally
        """
        return pulumi.get(self, "mode_dot1q_tunnel")

    @property
    @pulumi.getter(name="modePrivateVlanHost")
    def mode_private_vlan_host(self) -> bool:
        """
        Set the mode to private-vlan host
        """
        return pulumi.get(self, "mode_private_vlan_host")

    @property
    @pulumi.getter(name="modePrivateVlanPromiscuous")
    def mode_private_vlan_promiscuous(self) -> bool:
        """
        Set the mode to private-vlan promiscuous
        """
        return pulumi.get(self, "mode_private_vlan_promiscuous")

    @property
    @pulumi.getter(name="modePrivateVlanTrunk")
    def mode_private_vlan_trunk(self) -> bool:
        """
        Set the mode to private-vlan trunk
        """
        return pulumi.get(self, "mode_private_vlan_trunk")

    @property
    @pulumi.getter(name="modeTrunk")
    def mode_trunk(self) -> bool:
        """
        Set trunking mode to TRUNK unconditionally
        """
        return pulumi.get(self, "mode_trunk")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nonegotiate(self) -> bool:
        """
        Device will not engage in negotiation protocol on this interface
        """
        return pulumi.get(self, "nonegotiate")

    @property
    @pulumi.getter(name="trunkAllowedVlans")
    def trunk_allowed_vlans(self) -> str:
        return pulumi.get(self, "trunk_allowed_vlans")

    @property
    @pulumi.getter(name="trunkAllowedVlansNone")
    def trunk_allowed_vlans_none(self) -> bool:
        """
        no VLANs
        """
        return pulumi.get(self, "trunk_allowed_vlans_none")

    @property
    @pulumi.getter(name="trunkNativeVlan")
    def trunk_native_vlan(self) -> int:
        return pulumi.get(self, "trunk_native_vlan")

    @property
    @pulumi.getter(name="trunkNativeVlanTag")
    def trunk_native_vlan_tag(self) -> bool:
        return pulumi.get(self, "trunk_native_vlan_tag")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Interface type
        """
        return pulumi.get(self, "type")


class AwaitableGetInterfaceSwitchportResult(GetInterfaceSwitchportResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInterfaceSwitchportResult(
            access_vlan=self.access_vlan,
            device=self.device,
            host=self.host,
            id=self.id,
            mode_access=self.mode_access,
            mode_dot1q_tunnel=self.mode_dot1q_tunnel,
            mode_private_vlan_host=self.mode_private_vlan_host,
            mode_private_vlan_promiscuous=self.mode_private_vlan_promiscuous,
            mode_private_vlan_trunk=self.mode_private_vlan_trunk,
            mode_trunk=self.mode_trunk,
            name=self.name,
            nonegotiate=self.nonegotiate,
            trunk_allowed_vlans=self.trunk_allowed_vlans,
            trunk_allowed_vlans_none=self.trunk_allowed_vlans_none,
            trunk_native_vlan=self.trunk_native_vlan,
            trunk_native_vlan_tag=self.trunk_native_vlan_tag,
            type=self.type)


def get_interface_switchport(device: Optional[str] = None,
                             name: Optional[str] = None,
                             type: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInterfaceSwitchportResult:
    """
    This data source can read the Interface Switchport configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.iosxe.get_interface_switchport(name="1/0/3",
        type="GigabitEthernet")
    ```


    :param str device: A device name from the provider configuration.
    :param str type: Interface type
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['name'] = name
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:iosxe/getInterfaceSwitchport:getInterfaceSwitchport', __args__, opts=opts, typ=GetInterfaceSwitchportResult).value

    return AwaitableGetInterfaceSwitchportResult(
        access_vlan=pulumi.get(__ret__, 'access_vlan'),
        device=pulumi.get(__ret__, 'device'),
        host=pulumi.get(__ret__, 'host'),
        id=pulumi.get(__ret__, 'id'),
        mode_access=pulumi.get(__ret__, 'mode_access'),
        mode_dot1q_tunnel=pulumi.get(__ret__, 'mode_dot1q_tunnel'),
        mode_private_vlan_host=pulumi.get(__ret__, 'mode_private_vlan_host'),
        mode_private_vlan_promiscuous=pulumi.get(__ret__, 'mode_private_vlan_promiscuous'),
        mode_private_vlan_trunk=pulumi.get(__ret__, 'mode_private_vlan_trunk'),
        mode_trunk=pulumi.get(__ret__, 'mode_trunk'),
        name=pulumi.get(__ret__, 'name'),
        nonegotiate=pulumi.get(__ret__, 'nonegotiate'),
        trunk_allowed_vlans=pulumi.get(__ret__, 'trunk_allowed_vlans'),
        trunk_allowed_vlans_none=pulumi.get(__ret__, 'trunk_allowed_vlans_none'),
        trunk_native_vlan=pulumi.get(__ret__, 'trunk_native_vlan'),
        trunk_native_vlan_tag=pulumi.get(__ret__, 'trunk_native_vlan_tag'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_interface_switchport)
def get_interface_switchport_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                                    name: Optional[pulumi.Input[str]] = None,
                                    type: Optional[pulumi.Input[str]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInterfaceSwitchportResult]:
    """
    This data source can read the Interface Switchport configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.iosxe.get_interface_switchport(name="1/0/3",
        type="GigabitEthernet")
    ```


    :param str device: A device name from the provider configuration.
    :param str type: Interface type
    """
    ...
