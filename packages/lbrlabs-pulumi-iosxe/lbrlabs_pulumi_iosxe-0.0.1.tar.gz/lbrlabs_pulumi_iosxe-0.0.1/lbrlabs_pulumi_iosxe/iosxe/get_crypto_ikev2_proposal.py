# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetCryptoIkev2ProposalResult',
    'AwaitableGetCryptoIkev2ProposalResult',
    'get_crypto_ikev2_proposal',
    'get_crypto_ikev2_proposal_output',
]

@pulumi.output_type
class GetCryptoIkev2ProposalResult:
    """
    A collection of values returned by getCryptoIkev2Proposal.
    """
    def __init__(__self__, device=None, encryption_aes_cbc128=None, encryption_aes_cbc192=None, encryption_aes_cbc256=None, encryption_aes_gcm128=None, encryption_aes_gcm256=None, encryption_en3des=None, group_fifteen=None, group_fourteen=None, group_nineteen=None, group_one=None, group_sixteen=None, group_twenty=None, group_twenty_four=None, group_twenty_one=None, group_two=None, id=None, integrity_md5=None, integrity_sha1=None, integrity_sha256=None, integrity_sha384=None, integrity_sha512=None, name=None, prf_md5=None, prf_sha1=None, prf_sha256=None, prf_sha384=None, prf_sha512=None):
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if encryption_aes_cbc128 and not isinstance(encryption_aes_cbc128, bool):
            raise TypeError("Expected argument 'encryption_aes_cbc128' to be a bool")
        pulumi.set(__self__, "encryption_aes_cbc128", encryption_aes_cbc128)
        if encryption_aes_cbc192 and not isinstance(encryption_aes_cbc192, bool):
            raise TypeError("Expected argument 'encryption_aes_cbc192' to be a bool")
        pulumi.set(__self__, "encryption_aes_cbc192", encryption_aes_cbc192)
        if encryption_aes_cbc256 and not isinstance(encryption_aes_cbc256, bool):
            raise TypeError("Expected argument 'encryption_aes_cbc256' to be a bool")
        pulumi.set(__self__, "encryption_aes_cbc256", encryption_aes_cbc256)
        if encryption_aes_gcm128 and not isinstance(encryption_aes_gcm128, bool):
            raise TypeError("Expected argument 'encryption_aes_gcm128' to be a bool")
        pulumi.set(__self__, "encryption_aes_gcm128", encryption_aes_gcm128)
        if encryption_aes_gcm256 and not isinstance(encryption_aes_gcm256, bool):
            raise TypeError("Expected argument 'encryption_aes_gcm256' to be a bool")
        pulumi.set(__self__, "encryption_aes_gcm256", encryption_aes_gcm256)
        if encryption_en3des and not isinstance(encryption_en3des, bool):
            raise TypeError("Expected argument 'encryption_en3des' to be a bool")
        pulumi.set(__self__, "encryption_en3des", encryption_en3des)
        if group_fifteen and not isinstance(group_fifteen, bool):
            raise TypeError("Expected argument 'group_fifteen' to be a bool")
        pulumi.set(__self__, "group_fifteen", group_fifteen)
        if group_fourteen and not isinstance(group_fourteen, bool):
            raise TypeError("Expected argument 'group_fourteen' to be a bool")
        pulumi.set(__self__, "group_fourteen", group_fourteen)
        if group_nineteen and not isinstance(group_nineteen, bool):
            raise TypeError("Expected argument 'group_nineteen' to be a bool")
        pulumi.set(__self__, "group_nineteen", group_nineteen)
        if group_one and not isinstance(group_one, bool):
            raise TypeError("Expected argument 'group_one' to be a bool")
        pulumi.set(__self__, "group_one", group_one)
        if group_sixteen and not isinstance(group_sixteen, bool):
            raise TypeError("Expected argument 'group_sixteen' to be a bool")
        pulumi.set(__self__, "group_sixteen", group_sixteen)
        if group_twenty and not isinstance(group_twenty, bool):
            raise TypeError("Expected argument 'group_twenty' to be a bool")
        pulumi.set(__self__, "group_twenty", group_twenty)
        if group_twenty_four and not isinstance(group_twenty_four, bool):
            raise TypeError("Expected argument 'group_twenty_four' to be a bool")
        pulumi.set(__self__, "group_twenty_four", group_twenty_four)
        if group_twenty_one and not isinstance(group_twenty_one, bool):
            raise TypeError("Expected argument 'group_twenty_one' to be a bool")
        pulumi.set(__self__, "group_twenty_one", group_twenty_one)
        if group_two and not isinstance(group_two, bool):
            raise TypeError("Expected argument 'group_two' to be a bool")
        pulumi.set(__self__, "group_two", group_two)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if integrity_md5 and not isinstance(integrity_md5, bool):
            raise TypeError("Expected argument 'integrity_md5' to be a bool")
        pulumi.set(__self__, "integrity_md5", integrity_md5)
        if integrity_sha1 and not isinstance(integrity_sha1, bool):
            raise TypeError("Expected argument 'integrity_sha1' to be a bool")
        pulumi.set(__self__, "integrity_sha1", integrity_sha1)
        if integrity_sha256 and not isinstance(integrity_sha256, bool):
            raise TypeError("Expected argument 'integrity_sha256' to be a bool")
        pulumi.set(__self__, "integrity_sha256", integrity_sha256)
        if integrity_sha384 and not isinstance(integrity_sha384, bool):
            raise TypeError("Expected argument 'integrity_sha384' to be a bool")
        pulumi.set(__self__, "integrity_sha384", integrity_sha384)
        if integrity_sha512 and not isinstance(integrity_sha512, bool):
            raise TypeError("Expected argument 'integrity_sha512' to be a bool")
        pulumi.set(__self__, "integrity_sha512", integrity_sha512)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if prf_md5 and not isinstance(prf_md5, bool):
            raise TypeError("Expected argument 'prf_md5' to be a bool")
        pulumi.set(__self__, "prf_md5", prf_md5)
        if prf_sha1 and not isinstance(prf_sha1, bool):
            raise TypeError("Expected argument 'prf_sha1' to be a bool")
        pulumi.set(__self__, "prf_sha1", prf_sha1)
        if prf_sha256 and not isinstance(prf_sha256, bool):
            raise TypeError("Expected argument 'prf_sha256' to be a bool")
        pulumi.set(__self__, "prf_sha256", prf_sha256)
        if prf_sha384 and not isinstance(prf_sha384, bool):
            raise TypeError("Expected argument 'prf_sha384' to be a bool")
        pulumi.set(__self__, "prf_sha384", prf_sha384)
        if prf_sha512 and not isinstance(prf_sha512, bool):
            raise TypeError("Expected argument 'prf_sha512' to be a bool")
        pulumi.set(__self__, "prf_sha512", prf_sha512)

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="encryptionAesCbc128")
    def encryption_aes_cbc128(self) -> bool:
        """
        AES-CBC-128
        """
        return pulumi.get(self, "encryption_aes_cbc128")

    @property
    @pulumi.getter(name="encryptionAesCbc192")
    def encryption_aes_cbc192(self) -> bool:
        """
        AES-CBC-192
        """
        return pulumi.get(self, "encryption_aes_cbc192")

    @property
    @pulumi.getter(name="encryptionAesCbc256")
    def encryption_aes_cbc256(self) -> bool:
        """
        AES-CBC-256
        """
        return pulumi.get(self, "encryption_aes_cbc256")

    @property
    @pulumi.getter(name="encryptionAesGcm128")
    def encryption_aes_gcm128(self) -> bool:
        """
        Combined-mode,128 bit key,16 byte ICV(Authentication Tag)
        """
        return pulumi.get(self, "encryption_aes_gcm128")

    @property
    @pulumi.getter(name="encryptionAesGcm256")
    def encryption_aes_gcm256(self) -> bool:
        """
        Combined-mode,256 bit key,16 byte ICV(Authentication Tag)
        """
        return pulumi.get(self, "encryption_aes_gcm256")

    @property
    @pulumi.getter(name="encryptionEn3des")
    def encryption_en3des(self) -> bool:
        """
        3DES
        """
        return pulumi.get(self, "encryption_en3des")

    @property
    @pulumi.getter(name="groupFifteen")
    def group_fifteen(self) -> bool:
        """
        DH 3072 MODP
        """
        return pulumi.get(self, "group_fifteen")

    @property
    @pulumi.getter(name="groupFourteen")
    def group_fourteen(self) -> bool:
        """
        DH 2048 MODP
        """
        return pulumi.get(self, "group_fourteen")

    @property
    @pulumi.getter(name="groupNineteen")
    def group_nineteen(self) -> bool:
        """
        DH 256 ECP
        """
        return pulumi.get(self, "group_nineteen")

    @property
    @pulumi.getter(name="groupOne")
    def group_one(self) -> bool:
        """
        DH 768 MODP
        """
        return pulumi.get(self, "group_one")

    @property
    @pulumi.getter(name="groupSixteen")
    def group_sixteen(self) -> bool:
        """
        DH 4096 MODP
        """
        return pulumi.get(self, "group_sixteen")

    @property
    @pulumi.getter(name="groupTwenty")
    def group_twenty(self) -> bool:
        """
        DH 384 ECP
        """
        return pulumi.get(self, "group_twenty")

    @property
    @pulumi.getter(name="groupTwentyFour")
    def group_twenty_four(self) -> bool:
        """
        DH 2048 (256 subgroup) MODP
        """
        return pulumi.get(self, "group_twenty_four")

    @property
    @pulumi.getter(name="groupTwentyOne")
    def group_twenty_one(self) -> bool:
        """
        DH 521 ECP
        """
        return pulumi.get(self, "group_twenty_one")

    @property
    @pulumi.getter(name="groupTwo")
    def group_two(self) -> bool:
        """
        DH 1024 MODP
        """
        return pulumi.get(self, "group_two")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The path of the retrieved object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="integrityMd5")
    def integrity_md5(self) -> bool:
        """
        Message Digest 5
        """
        return pulumi.get(self, "integrity_md5")

    @property
    @pulumi.getter(name="integritySha1")
    def integrity_sha1(self) -> bool:
        """
        Secure Hash Standard
        """
        return pulumi.get(self, "integrity_sha1")

    @property
    @pulumi.getter(name="integritySha256")
    def integrity_sha256(self) -> bool:
        """
        Secure Hash Standard 2 (256 bit)
        """
        return pulumi.get(self, "integrity_sha256")

    @property
    @pulumi.getter(name="integritySha384")
    def integrity_sha384(self) -> bool:
        """
        Secure Hash Standard 2 (384 bit)
        """
        return pulumi.get(self, "integrity_sha384")

    @property
    @pulumi.getter(name="integritySha512")
    def integrity_sha512(self) -> bool:
        """
        Secure Hash Standard 2 (512 bit)
        """
        return pulumi.get(self, "integrity_sha512")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="prfMd5")
    def prf_md5(self) -> bool:
        """
        Message Digest 5
        """
        return pulumi.get(self, "prf_md5")

    @property
    @pulumi.getter(name="prfSha1")
    def prf_sha1(self) -> bool:
        """
        Secure Hash Standard
        """
        return pulumi.get(self, "prf_sha1")

    @property
    @pulumi.getter(name="prfSha256")
    def prf_sha256(self) -> bool:
        """
        Secure Hash Standard 2 (256 bit)
        """
        return pulumi.get(self, "prf_sha256")

    @property
    @pulumi.getter(name="prfSha384")
    def prf_sha384(self) -> bool:
        """
        Secure Hash Standard 2 (384 bit)
        """
        return pulumi.get(self, "prf_sha384")

    @property
    @pulumi.getter(name="prfSha512")
    def prf_sha512(self) -> bool:
        """
        Secure Hash Standard 2 (512 bit)
        """
        return pulumi.get(self, "prf_sha512")


class AwaitableGetCryptoIkev2ProposalResult(GetCryptoIkev2ProposalResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCryptoIkev2ProposalResult(
            device=self.device,
            encryption_aes_cbc128=self.encryption_aes_cbc128,
            encryption_aes_cbc192=self.encryption_aes_cbc192,
            encryption_aes_cbc256=self.encryption_aes_cbc256,
            encryption_aes_gcm128=self.encryption_aes_gcm128,
            encryption_aes_gcm256=self.encryption_aes_gcm256,
            encryption_en3des=self.encryption_en3des,
            group_fifteen=self.group_fifteen,
            group_fourteen=self.group_fourteen,
            group_nineteen=self.group_nineteen,
            group_one=self.group_one,
            group_sixteen=self.group_sixteen,
            group_twenty=self.group_twenty,
            group_twenty_four=self.group_twenty_four,
            group_twenty_one=self.group_twenty_one,
            group_two=self.group_two,
            id=self.id,
            integrity_md5=self.integrity_md5,
            integrity_sha1=self.integrity_sha1,
            integrity_sha256=self.integrity_sha256,
            integrity_sha384=self.integrity_sha384,
            integrity_sha512=self.integrity_sha512,
            name=self.name,
            prf_md5=self.prf_md5,
            prf_sha1=self.prf_sha1,
            prf_sha256=self.prf_sha256,
            prf_sha384=self.prf_sha384,
            prf_sha512=self.prf_sha512)


def get_crypto_ikev2_proposal(device: Optional[str] = None,
                              name: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCryptoIkev2ProposalResult:
    """
    This data source can read the Crypto IKEv2 Proposal configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.iosxe.get_crypto_ikev2_proposal(name="PROPOSAL1")
    ```


    :param str device: A device name from the provider configuration.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:iosxe/getCryptoIkev2Proposal:getCryptoIkev2Proposal', __args__, opts=opts, typ=GetCryptoIkev2ProposalResult).value

    return AwaitableGetCryptoIkev2ProposalResult(
        device=pulumi.get(__ret__, 'device'),
        encryption_aes_cbc128=pulumi.get(__ret__, 'encryption_aes_cbc128'),
        encryption_aes_cbc192=pulumi.get(__ret__, 'encryption_aes_cbc192'),
        encryption_aes_cbc256=pulumi.get(__ret__, 'encryption_aes_cbc256'),
        encryption_aes_gcm128=pulumi.get(__ret__, 'encryption_aes_gcm128'),
        encryption_aes_gcm256=pulumi.get(__ret__, 'encryption_aes_gcm256'),
        encryption_en3des=pulumi.get(__ret__, 'encryption_en3des'),
        group_fifteen=pulumi.get(__ret__, 'group_fifteen'),
        group_fourteen=pulumi.get(__ret__, 'group_fourteen'),
        group_nineteen=pulumi.get(__ret__, 'group_nineteen'),
        group_one=pulumi.get(__ret__, 'group_one'),
        group_sixteen=pulumi.get(__ret__, 'group_sixteen'),
        group_twenty=pulumi.get(__ret__, 'group_twenty'),
        group_twenty_four=pulumi.get(__ret__, 'group_twenty_four'),
        group_twenty_one=pulumi.get(__ret__, 'group_twenty_one'),
        group_two=pulumi.get(__ret__, 'group_two'),
        id=pulumi.get(__ret__, 'id'),
        integrity_md5=pulumi.get(__ret__, 'integrity_md5'),
        integrity_sha1=pulumi.get(__ret__, 'integrity_sha1'),
        integrity_sha256=pulumi.get(__ret__, 'integrity_sha256'),
        integrity_sha384=pulumi.get(__ret__, 'integrity_sha384'),
        integrity_sha512=pulumi.get(__ret__, 'integrity_sha512'),
        name=pulumi.get(__ret__, 'name'),
        prf_md5=pulumi.get(__ret__, 'prf_md5'),
        prf_sha1=pulumi.get(__ret__, 'prf_sha1'),
        prf_sha256=pulumi.get(__ret__, 'prf_sha256'),
        prf_sha384=pulumi.get(__ret__, 'prf_sha384'),
        prf_sha512=pulumi.get(__ret__, 'prf_sha512'))


@_utilities.lift_output_func(get_crypto_ikev2_proposal)
def get_crypto_ikev2_proposal_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                                     name: Optional[pulumi.Input[str]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCryptoIkev2ProposalResult]:
    """
    This data source can read the Crypto IKEv2 Proposal configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.iosxe.get_crypto_ikev2_proposal(name="PROPOSAL1")
    ```


    :param str device: A device name from the provider configuration.
    """
    ...
