# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetCryptoIpsecProfileResult',
    'AwaitableGetCryptoIpsecProfileResult',
    'get_crypto_ipsec_profile',
    'get_crypto_ipsec_profile_output',
]

@pulumi.output_type
class GetCryptoIpsecProfileResult:
    """
    A collection of values returned by getCryptoIpsecProfile.
    """
    def __init__(__self__, device=None, id=None, name=None, set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile=None, set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile=None, set_transform_sets=None):
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile and not isinstance(set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile, str):
            raise TypeError("Expected argument 'set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile' to be a str")
        pulumi.set(__self__, "set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile", set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile)
        if set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile and not isinstance(set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile, str):
            raise TypeError("Expected argument 'set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile' to be a str")
        pulumi.set(__self__, "set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile", set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile)
        if set_transform_sets and not isinstance(set_transform_sets, list):
            raise TypeError("Expected argument 'set_transform_sets' to be a list")
        pulumi.set(__self__, "set_transform_sets", set_transform_sets)

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The path of the retrieved object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="setIsakmpProfileIkev2ProfileIkev2ProfileCaseIkev2Profile")
    def set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile(self) -> str:
        """
        Specify ikev2 Profile
        """
        return pulumi.get(self, "set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile")

    @property
    @pulumi.getter(name="setIsakmpProfileIkev2ProfileIsakmpProfileCaseIsakmpProfile")
    def set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile(self) -> str:
        """
        Specify isakmp Profile
        """
        return pulumi.get(self, "set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile")

    @property
    @pulumi.getter(name="setTransformSets")
    def set_transform_sets(self) -> Sequence[str]:
        """
        Specify list of transform sets in priority order
        """
        return pulumi.get(self, "set_transform_sets")


class AwaitableGetCryptoIpsecProfileResult(GetCryptoIpsecProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCryptoIpsecProfileResult(
            device=self.device,
            id=self.id,
            name=self.name,
            set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile=self.set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile,
            set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile=self.set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile,
            set_transform_sets=self.set_transform_sets)


def get_crypto_ipsec_profile(device: Optional[str] = None,
                             name: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCryptoIpsecProfileResult:
    """
    This data source can read the Crypto IPSec Profile configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.iosxe.get_crypto_ipsec_profile(name="vpn200")
    ```


    :param str device: A device name from the provider configuration.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:iosxe/getCryptoIpsecProfile:getCryptoIpsecProfile', __args__, opts=opts, typ=GetCryptoIpsecProfileResult).value

    return AwaitableGetCryptoIpsecProfileResult(
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile=pulumi.get(__ret__, 'set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile'),
        set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile=pulumi.get(__ret__, 'set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile'),
        set_transform_sets=pulumi.get(__ret__, 'set_transform_sets'))


@_utilities.lift_output_func(get_crypto_ipsec_profile)
def get_crypto_ipsec_profile_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                                    name: Optional[pulumi.Input[str]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCryptoIpsecProfileResult]:
    """
    This data source can read the Crypto IPSec Profile configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.iosxe.get_crypto_ipsec_profile(name="vpn200")
    ```


    :param str device: A device name from the provider configuration.
    """
    ...
