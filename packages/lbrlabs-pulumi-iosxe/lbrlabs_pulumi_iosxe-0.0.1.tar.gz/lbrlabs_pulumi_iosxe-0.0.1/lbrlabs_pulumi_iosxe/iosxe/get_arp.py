# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetArpResult',
    'AwaitableGetArpResult',
    'get_arp',
    'get_arp_output',
]

@pulumi.output_type
class GetArpResult:
    """
    A collection of values returned by getArp.
    """
    def __init__(__self__, device=None, entry_learn=None, id=None, incomplete_entries=None, inspection_filters=None, inspection_log_buffer_entries=None, inspection_log_buffer_logs_entries=None, inspection_log_buffer_logs_interval=None, inspection_validate_allow_zeros=None, inspection_validate_dst_mac=None, inspection_validate_ip=None, inspection_validate_src_mac=None, inspection_vlan=None, proxy_disable=None):
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if entry_learn and not isinstance(entry_learn, int):
            raise TypeError("Expected argument 'entry_learn' to be a int")
        pulumi.set(__self__, "entry_learn", entry_learn)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if incomplete_entries and not isinstance(incomplete_entries, int):
            raise TypeError("Expected argument 'incomplete_entries' to be a int")
        pulumi.set(__self__, "incomplete_entries", incomplete_entries)
        if inspection_filters and not isinstance(inspection_filters, list):
            raise TypeError("Expected argument 'inspection_filters' to be a list")
        pulumi.set(__self__, "inspection_filters", inspection_filters)
        if inspection_log_buffer_entries and not isinstance(inspection_log_buffer_entries, int):
            raise TypeError("Expected argument 'inspection_log_buffer_entries' to be a int")
        pulumi.set(__self__, "inspection_log_buffer_entries", inspection_log_buffer_entries)
        if inspection_log_buffer_logs_entries and not isinstance(inspection_log_buffer_logs_entries, int):
            raise TypeError("Expected argument 'inspection_log_buffer_logs_entries' to be a int")
        pulumi.set(__self__, "inspection_log_buffer_logs_entries", inspection_log_buffer_logs_entries)
        if inspection_log_buffer_logs_interval and not isinstance(inspection_log_buffer_logs_interval, int):
            raise TypeError("Expected argument 'inspection_log_buffer_logs_interval' to be a int")
        pulumi.set(__self__, "inspection_log_buffer_logs_interval", inspection_log_buffer_logs_interval)
        if inspection_validate_allow_zeros and not isinstance(inspection_validate_allow_zeros, bool):
            raise TypeError("Expected argument 'inspection_validate_allow_zeros' to be a bool")
        pulumi.set(__self__, "inspection_validate_allow_zeros", inspection_validate_allow_zeros)
        if inspection_validate_dst_mac and not isinstance(inspection_validate_dst_mac, bool):
            raise TypeError("Expected argument 'inspection_validate_dst_mac' to be a bool")
        pulumi.set(__self__, "inspection_validate_dst_mac", inspection_validate_dst_mac)
        if inspection_validate_ip and not isinstance(inspection_validate_ip, bool):
            raise TypeError("Expected argument 'inspection_validate_ip' to be a bool")
        pulumi.set(__self__, "inspection_validate_ip", inspection_validate_ip)
        if inspection_validate_src_mac and not isinstance(inspection_validate_src_mac, bool):
            raise TypeError("Expected argument 'inspection_validate_src_mac' to be a bool")
        pulumi.set(__self__, "inspection_validate_src_mac", inspection_validate_src_mac)
        if inspection_vlan and not isinstance(inspection_vlan, str):
            raise TypeError("Expected argument 'inspection_vlan' to be a str")
        pulumi.set(__self__, "inspection_vlan", inspection_vlan)
        if proxy_disable and not isinstance(proxy_disable, bool):
            raise TypeError("Expected argument 'proxy_disable' to be a bool")
        pulumi.set(__self__, "proxy_disable", proxy_disable)

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="entryLearn")
    def entry_learn(self) -> int:
        """
        Maximum learn entry limit
        """
        return pulumi.get(self, "entry_learn")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The path of the retrieved object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="incompleteEntries")
    def incomplete_entries(self) -> int:
        """
        Specify the number of IP addresses to resolve
        """
        return pulumi.get(self, "incomplete_entries")

    @property
    @pulumi.getter(name="inspectionFilters")
    def inspection_filters(self) -> Sequence['outputs.GetArpInspectionFilterResult']:
        """
        Specify ARP acl to be applied
        """
        return pulumi.get(self, "inspection_filters")

    @property
    @pulumi.getter(name="inspectionLogBufferEntries")
    def inspection_log_buffer_entries(self) -> int:
        """
        Number of entries for log buffer
        """
        return pulumi.get(self, "inspection_log_buffer_entries")

    @property
    @pulumi.getter(name="inspectionLogBufferLogsEntries")
    def inspection_log_buffer_logs_entries(self) -> int:
        """
        Number of entries for log buffer
        """
        return pulumi.get(self, "inspection_log_buffer_logs_entries")

    @property
    @pulumi.getter(name="inspectionLogBufferLogsInterval")
    def inspection_log_buffer_logs_interval(self) -> int:
        """
        Interval for controlling logging rate
        """
        return pulumi.get(self, "inspection_log_buffer_logs_interval")

    @property
    @pulumi.getter(name="inspectionValidateAllowZeros")
    def inspection_validate_allow_zeros(self) -> bool:
        """
        Allow 0.0.0.0 sender IP address
        """
        return pulumi.get(self, "inspection_validate_allow_zeros")

    @property
    @pulumi.getter(name="inspectionValidateDstMac")
    def inspection_validate_dst_mac(self) -> bool:
        """
        Validate destination MAC address
        """
        return pulumi.get(self, "inspection_validate_dst_mac")

    @property
    @pulumi.getter(name="inspectionValidateIp")
    def inspection_validate_ip(self) -> bool:
        """
        Validate IP addresses
        """
        return pulumi.get(self, "inspection_validate_ip")

    @property
    @pulumi.getter(name="inspectionValidateSrcMac")
    def inspection_validate_src_mac(self) -> bool:
        """
        Validate source MAC address
        """
        return pulumi.get(self, "inspection_validate_src_mac")

    @property
    @pulumi.getter(name="inspectionVlan")
    def inspection_vlan(self) -> str:
        """
        Enable/Disable ARP Inspection on vlans
        """
        return pulumi.get(self, "inspection_vlan")

    @property
    @pulumi.getter(name="proxyDisable")
    def proxy_disable(self) -> bool:
        """
        Disable proxy ARP on all interfaces
        """
        return pulumi.get(self, "proxy_disable")


class AwaitableGetArpResult(GetArpResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetArpResult(
            device=self.device,
            entry_learn=self.entry_learn,
            id=self.id,
            incomplete_entries=self.incomplete_entries,
            inspection_filters=self.inspection_filters,
            inspection_log_buffer_entries=self.inspection_log_buffer_entries,
            inspection_log_buffer_logs_entries=self.inspection_log_buffer_logs_entries,
            inspection_log_buffer_logs_interval=self.inspection_log_buffer_logs_interval,
            inspection_validate_allow_zeros=self.inspection_validate_allow_zeros,
            inspection_validate_dst_mac=self.inspection_validate_dst_mac,
            inspection_validate_ip=self.inspection_validate_ip,
            inspection_validate_src_mac=self.inspection_validate_src_mac,
            inspection_vlan=self.inspection_vlan,
            proxy_disable=self.proxy_disable)


def get_arp(device: Optional[str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetArpResult:
    """
    This data source can read the ARP configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.iosxe.get_arp()
    ```


    :param str device: A device name from the provider configuration.
    """
    __args__ = dict()
    __args__['device'] = device
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:iosxe/getArp:getArp', __args__, opts=opts, typ=GetArpResult).value

    return AwaitableGetArpResult(
        device=pulumi.get(__ret__, 'device'),
        entry_learn=pulumi.get(__ret__, 'entry_learn'),
        id=pulumi.get(__ret__, 'id'),
        incomplete_entries=pulumi.get(__ret__, 'incomplete_entries'),
        inspection_filters=pulumi.get(__ret__, 'inspection_filters'),
        inspection_log_buffer_entries=pulumi.get(__ret__, 'inspection_log_buffer_entries'),
        inspection_log_buffer_logs_entries=pulumi.get(__ret__, 'inspection_log_buffer_logs_entries'),
        inspection_log_buffer_logs_interval=pulumi.get(__ret__, 'inspection_log_buffer_logs_interval'),
        inspection_validate_allow_zeros=pulumi.get(__ret__, 'inspection_validate_allow_zeros'),
        inspection_validate_dst_mac=pulumi.get(__ret__, 'inspection_validate_dst_mac'),
        inspection_validate_ip=pulumi.get(__ret__, 'inspection_validate_ip'),
        inspection_validate_src_mac=pulumi.get(__ret__, 'inspection_validate_src_mac'),
        inspection_vlan=pulumi.get(__ret__, 'inspection_vlan'),
        proxy_disable=pulumi.get(__ret__, 'proxy_disable'))


@_utilities.lift_output_func(get_arp)
def get_arp_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetArpResult]:
    """
    This data source can read the ARP configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.iosxe.get_arp()
    ```


    :param str device: A device name from the provider configuration.
    """
    ...
