# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SystemArgs', 'System']

@pulumi.input_type
class SystemArgs:
    def __init__(__self__, *,
                 device: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 ip_domain_lookup: Optional[pulumi.Input[bool]] = None,
                 ip_domain_name: Optional[pulumi.Input[str]] = None,
                 ip_multicast_routing: Optional[pulumi.Input[bool]] = None,
                 ip_multicast_routing_distributed: Optional[pulumi.Input[bool]] = None,
                 ip_routing: Optional[pulumi.Input[bool]] = None,
                 ip_source_route: Optional[pulumi.Input[bool]] = None,
                 ipv6_unicast_routing: Optional[pulumi.Input[bool]] = None,
                 login_delay: Optional[pulumi.Input[int]] = None,
                 login_on_failure: Optional[pulumi.Input[bool]] = None,
                 login_on_failure_log: Optional[pulumi.Input[bool]] = None,
                 login_on_success: Optional[pulumi.Input[bool]] = None,
                 login_on_success_log: Optional[pulumi.Input[bool]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 multicast_routing_switch: Optional[pulumi.Input[bool]] = None,
                 multicast_routing_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input['SystemMulticastRoutingVrfArgs']]]] = None):
        """
        The set of arguments for constructing a System resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] hostname: Set system's network name
        :param pulumi.Input[bool] ip_domain_lookup: Enable IP Domain Name System hostname translation
        :param pulumi.Input[str] ip_domain_name: Define the default domain name
        :param pulumi.Input[bool] ip_multicast_routing: Enable IP multicast forwarding
        :param pulumi.Input[bool] ip_multicast_routing_distributed: Distributed multicast switching
        :param pulumi.Input[bool] ip_routing: Enable or disable IP routing
        :param pulumi.Input[bool] ip_source_route: Process packets with source routing header options
        :param pulumi.Input[bool] ipv6_unicast_routing: Enable unicast routing
        :param pulumi.Input[int] login_delay: Set delay between successive fail login - Range: `1`-`10`
        :param pulumi.Input[bool] login_on_failure: Set options for failed login attempt
        :param pulumi.Input[bool] login_on_failure_log: Generate syslogs on failure logins
        :param pulumi.Input[bool] login_on_success: Set options for successful login attempt
        :param pulumi.Input[bool] login_on_success_log: Generate syslogs on successful logins
        :param pulumi.Input[int] mtu: - Range: `1500`-`9198`
        :param pulumi.Input[bool] multicast_routing_switch: Enable IP multicast forwarding, some XE devices use this option instead of `multicast_routing`.
        :param pulumi.Input[Sequence[pulumi.Input['SystemMulticastRoutingVrfArgs']]] multicast_routing_vrfs: Select VPN Routing/Forwarding instance
        """
        if device is not None:
            pulumi.set(__self__, "device", device)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ip_domain_lookup is not None:
            pulumi.set(__self__, "ip_domain_lookup", ip_domain_lookup)
        if ip_domain_name is not None:
            pulumi.set(__self__, "ip_domain_name", ip_domain_name)
        if ip_multicast_routing is not None:
            pulumi.set(__self__, "ip_multicast_routing", ip_multicast_routing)
        if ip_multicast_routing_distributed is not None:
            pulumi.set(__self__, "ip_multicast_routing_distributed", ip_multicast_routing_distributed)
        if ip_routing is not None:
            pulumi.set(__self__, "ip_routing", ip_routing)
        if ip_source_route is not None:
            pulumi.set(__self__, "ip_source_route", ip_source_route)
        if ipv6_unicast_routing is not None:
            pulumi.set(__self__, "ipv6_unicast_routing", ipv6_unicast_routing)
        if login_delay is not None:
            pulumi.set(__self__, "login_delay", login_delay)
        if login_on_failure is not None:
            pulumi.set(__self__, "login_on_failure", login_on_failure)
        if login_on_failure_log is not None:
            pulumi.set(__self__, "login_on_failure_log", login_on_failure_log)
        if login_on_success is not None:
            pulumi.set(__self__, "login_on_success", login_on_success)
        if login_on_success_log is not None:
            pulumi.set(__self__, "login_on_success_log", login_on_success_log)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if multicast_routing_switch is not None:
            pulumi.set(__self__, "multicast_routing_switch", multicast_routing_switch)
        if multicast_routing_vrfs is not None:
            pulumi.set(__self__, "multicast_routing_vrfs", multicast_routing_vrfs)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Set system's network name
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="ipDomainLookup")
    def ip_domain_lookup(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IP Domain Name System hostname translation
        """
        return pulumi.get(self, "ip_domain_lookup")

    @ip_domain_lookup.setter
    def ip_domain_lookup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_domain_lookup", value)

    @property
    @pulumi.getter(name="ipDomainName")
    def ip_domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        Define the default domain name
        """
        return pulumi.get(self, "ip_domain_name")

    @ip_domain_name.setter
    def ip_domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_domain_name", value)

    @property
    @pulumi.getter(name="ipMulticastRouting")
    def ip_multicast_routing(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IP multicast forwarding
        """
        return pulumi.get(self, "ip_multicast_routing")

    @ip_multicast_routing.setter
    def ip_multicast_routing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_multicast_routing", value)

    @property
    @pulumi.getter(name="ipMulticastRoutingDistributed")
    def ip_multicast_routing_distributed(self) -> Optional[pulumi.Input[bool]]:
        """
        Distributed multicast switching
        """
        return pulumi.get(self, "ip_multicast_routing_distributed")

    @ip_multicast_routing_distributed.setter
    def ip_multicast_routing_distributed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_multicast_routing_distributed", value)

    @property
    @pulumi.getter(name="ipRouting")
    def ip_routing(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable or disable IP routing
        """
        return pulumi.get(self, "ip_routing")

    @ip_routing.setter
    def ip_routing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_routing", value)

    @property
    @pulumi.getter(name="ipSourceRoute")
    def ip_source_route(self) -> Optional[pulumi.Input[bool]]:
        """
        Process packets with source routing header options
        """
        return pulumi.get(self, "ip_source_route")

    @ip_source_route.setter
    def ip_source_route(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_source_route", value)

    @property
    @pulumi.getter(name="ipv6UnicastRouting")
    def ipv6_unicast_routing(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable unicast routing
        """
        return pulumi.get(self, "ipv6_unicast_routing")

    @ipv6_unicast_routing.setter
    def ipv6_unicast_routing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipv6_unicast_routing", value)

    @property
    @pulumi.getter(name="loginDelay")
    def login_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Set delay between successive fail login - Range: `1`-`10`
        """
        return pulumi.get(self, "login_delay")

    @login_delay.setter
    def login_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "login_delay", value)

    @property
    @pulumi.getter(name="loginOnFailure")
    def login_on_failure(self) -> Optional[pulumi.Input[bool]]:
        """
        Set options for failed login attempt
        """
        return pulumi.get(self, "login_on_failure")

    @login_on_failure.setter
    def login_on_failure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "login_on_failure", value)

    @property
    @pulumi.getter(name="loginOnFailureLog")
    def login_on_failure_log(self) -> Optional[pulumi.Input[bool]]:
        """
        Generate syslogs on failure logins
        """
        return pulumi.get(self, "login_on_failure_log")

    @login_on_failure_log.setter
    def login_on_failure_log(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "login_on_failure_log", value)

    @property
    @pulumi.getter(name="loginOnSuccess")
    def login_on_success(self) -> Optional[pulumi.Input[bool]]:
        """
        Set options for successful login attempt
        """
        return pulumi.get(self, "login_on_success")

    @login_on_success.setter
    def login_on_success(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "login_on_success", value)

    @property
    @pulumi.getter(name="loginOnSuccessLog")
    def login_on_success_log(self) -> Optional[pulumi.Input[bool]]:
        """
        Generate syslogs on successful logins
        """
        return pulumi.get(self, "login_on_success_log")

    @login_on_success_log.setter
    def login_on_success_log(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "login_on_success_log", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `1500`-`9198`
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter(name="multicastRoutingSwitch")
    def multicast_routing_switch(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IP multicast forwarding, some XE devices use this option instead of `multicast_routing`.
        """
        return pulumi.get(self, "multicast_routing_switch")

    @multicast_routing_switch.setter
    def multicast_routing_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multicast_routing_switch", value)

    @property
    @pulumi.getter(name="multicastRoutingVrfs")
    def multicast_routing_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemMulticastRoutingVrfArgs']]]]:
        """
        Select VPN Routing/Forwarding instance
        """
        return pulumi.get(self, "multicast_routing_vrfs")

    @multicast_routing_vrfs.setter
    def multicast_routing_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemMulticastRoutingVrfArgs']]]]):
        pulumi.set(self, "multicast_routing_vrfs", value)


@pulumi.input_type
class _SystemState:
    def __init__(__self__, *,
                 device: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 ip_domain_lookup: Optional[pulumi.Input[bool]] = None,
                 ip_domain_name: Optional[pulumi.Input[str]] = None,
                 ip_multicast_routing: Optional[pulumi.Input[bool]] = None,
                 ip_multicast_routing_distributed: Optional[pulumi.Input[bool]] = None,
                 ip_routing: Optional[pulumi.Input[bool]] = None,
                 ip_source_route: Optional[pulumi.Input[bool]] = None,
                 ipv6_unicast_routing: Optional[pulumi.Input[bool]] = None,
                 login_delay: Optional[pulumi.Input[int]] = None,
                 login_on_failure: Optional[pulumi.Input[bool]] = None,
                 login_on_failure_log: Optional[pulumi.Input[bool]] = None,
                 login_on_success: Optional[pulumi.Input[bool]] = None,
                 login_on_success_log: Optional[pulumi.Input[bool]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 multicast_routing_switch: Optional[pulumi.Input[bool]] = None,
                 multicast_routing_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input['SystemMulticastRoutingVrfArgs']]]] = None):
        """
        Input properties used for looking up and filtering System resources.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] hostname: Set system's network name
        :param pulumi.Input[bool] ip_domain_lookup: Enable IP Domain Name System hostname translation
        :param pulumi.Input[str] ip_domain_name: Define the default domain name
        :param pulumi.Input[bool] ip_multicast_routing: Enable IP multicast forwarding
        :param pulumi.Input[bool] ip_multicast_routing_distributed: Distributed multicast switching
        :param pulumi.Input[bool] ip_routing: Enable or disable IP routing
        :param pulumi.Input[bool] ip_source_route: Process packets with source routing header options
        :param pulumi.Input[bool] ipv6_unicast_routing: Enable unicast routing
        :param pulumi.Input[int] login_delay: Set delay between successive fail login - Range: `1`-`10`
        :param pulumi.Input[bool] login_on_failure: Set options for failed login attempt
        :param pulumi.Input[bool] login_on_failure_log: Generate syslogs on failure logins
        :param pulumi.Input[bool] login_on_success: Set options for successful login attempt
        :param pulumi.Input[bool] login_on_success_log: Generate syslogs on successful logins
        :param pulumi.Input[int] mtu: - Range: `1500`-`9198`
        :param pulumi.Input[bool] multicast_routing_switch: Enable IP multicast forwarding, some XE devices use this option instead of `multicast_routing`.
        :param pulumi.Input[Sequence[pulumi.Input['SystemMulticastRoutingVrfArgs']]] multicast_routing_vrfs: Select VPN Routing/Forwarding instance
        """
        if device is not None:
            pulumi.set(__self__, "device", device)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if ip_domain_lookup is not None:
            pulumi.set(__self__, "ip_domain_lookup", ip_domain_lookup)
        if ip_domain_name is not None:
            pulumi.set(__self__, "ip_domain_name", ip_domain_name)
        if ip_multicast_routing is not None:
            pulumi.set(__self__, "ip_multicast_routing", ip_multicast_routing)
        if ip_multicast_routing_distributed is not None:
            pulumi.set(__self__, "ip_multicast_routing_distributed", ip_multicast_routing_distributed)
        if ip_routing is not None:
            pulumi.set(__self__, "ip_routing", ip_routing)
        if ip_source_route is not None:
            pulumi.set(__self__, "ip_source_route", ip_source_route)
        if ipv6_unicast_routing is not None:
            pulumi.set(__self__, "ipv6_unicast_routing", ipv6_unicast_routing)
        if login_delay is not None:
            pulumi.set(__self__, "login_delay", login_delay)
        if login_on_failure is not None:
            pulumi.set(__self__, "login_on_failure", login_on_failure)
        if login_on_failure_log is not None:
            pulumi.set(__self__, "login_on_failure_log", login_on_failure_log)
        if login_on_success is not None:
            pulumi.set(__self__, "login_on_success", login_on_success)
        if login_on_success_log is not None:
            pulumi.set(__self__, "login_on_success_log", login_on_success_log)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if multicast_routing_switch is not None:
            pulumi.set(__self__, "multicast_routing_switch", multicast_routing_switch)
        if multicast_routing_vrfs is not None:
            pulumi.set(__self__, "multicast_routing_vrfs", multicast_routing_vrfs)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        """
        Set system's network name
        """
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="ipDomainLookup")
    def ip_domain_lookup(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IP Domain Name System hostname translation
        """
        return pulumi.get(self, "ip_domain_lookup")

    @ip_domain_lookup.setter
    def ip_domain_lookup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_domain_lookup", value)

    @property
    @pulumi.getter(name="ipDomainName")
    def ip_domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        Define the default domain name
        """
        return pulumi.get(self, "ip_domain_name")

    @ip_domain_name.setter
    def ip_domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_domain_name", value)

    @property
    @pulumi.getter(name="ipMulticastRouting")
    def ip_multicast_routing(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IP multicast forwarding
        """
        return pulumi.get(self, "ip_multicast_routing")

    @ip_multicast_routing.setter
    def ip_multicast_routing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_multicast_routing", value)

    @property
    @pulumi.getter(name="ipMulticastRoutingDistributed")
    def ip_multicast_routing_distributed(self) -> Optional[pulumi.Input[bool]]:
        """
        Distributed multicast switching
        """
        return pulumi.get(self, "ip_multicast_routing_distributed")

    @ip_multicast_routing_distributed.setter
    def ip_multicast_routing_distributed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_multicast_routing_distributed", value)

    @property
    @pulumi.getter(name="ipRouting")
    def ip_routing(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable or disable IP routing
        """
        return pulumi.get(self, "ip_routing")

    @ip_routing.setter
    def ip_routing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_routing", value)

    @property
    @pulumi.getter(name="ipSourceRoute")
    def ip_source_route(self) -> Optional[pulumi.Input[bool]]:
        """
        Process packets with source routing header options
        """
        return pulumi.get(self, "ip_source_route")

    @ip_source_route.setter
    def ip_source_route(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_source_route", value)

    @property
    @pulumi.getter(name="ipv6UnicastRouting")
    def ipv6_unicast_routing(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable unicast routing
        """
        return pulumi.get(self, "ipv6_unicast_routing")

    @ipv6_unicast_routing.setter
    def ipv6_unicast_routing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipv6_unicast_routing", value)

    @property
    @pulumi.getter(name="loginDelay")
    def login_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Set delay between successive fail login - Range: `1`-`10`
        """
        return pulumi.get(self, "login_delay")

    @login_delay.setter
    def login_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "login_delay", value)

    @property
    @pulumi.getter(name="loginOnFailure")
    def login_on_failure(self) -> Optional[pulumi.Input[bool]]:
        """
        Set options for failed login attempt
        """
        return pulumi.get(self, "login_on_failure")

    @login_on_failure.setter
    def login_on_failure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "login_on_failure", value)

    @property
    @pulumi.getter(name="loginOnFailureLog")
    def login_on_failure_log(self) -> Optional[pulumi.Input[bool]]:
        """
        Generate syslogs on failure logins
        """
        return pulumi.get(self, "login_on_failure_log")

    @login_on_failure_log.setter
    def login_on_failure_log(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "login_on_failure_log", value)

    @property
    @pulumi.getter(name="loginOnSuccess")
    def login_on_success(self) -> Optional[pulumi.Input[bool]]:
        """
        Set options for successful login attempt
        """
        return pulumi.get(self, "login_on_success")

    @login_on_success.setter
    def login_on_success(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "login_on_success", value)

    @property
    @pulumi.getter(name="loginOnSuccessLog")
    def login_on_success_log(self) -> Optional[pulumi.Input[bool]]:
        """
        Generate syslogs on successful logins
        """
        return pulumi.get(self, "login_on_success_log")

    @login_on_success_log.setter
    def login_on_success_log(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "login_on_success_log", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `1500`-`9198`
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter(name="multicastRoutingSwitch")
    def multicast_routing_switch(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IP multicast forwarding, some XE devices use this option instead of `multicast_routing`.
        """
        return pulumi.get(self, "multicast_routing_switch")

    @multicast_routing_switch.setter
    def multicast_routing_switch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multicast_routing_switch", value)

    @property
    @pulumi.getter(name="multicastRoutingVrfs")
    def multicast_routing_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SystemMulticastRoutingVrfArgs']]]]:
        """
        Select VPN Routing/Forwarding instance
        """
        return pulumi.get(self, "multicast_routing_vrfs")

    @multicast_routing_vrfs.setter
    def multicast_routing_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SystemMulticastRoutingVrfArgs']]]]):
        pulumi.set(self, "multicast_routing_vrfs", value)


class System(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 ip_domain_lookup: Optional[pulumi.Input[bool]] = None,
                 ip_domain_name: Optional[pulumi.Input[str]] = None,
                 ip_multicast_routing: Optional[pulumi.Input[bool]] = None,
                 ip_multicast_routing_distributed: Optional[pulumi.Input[bool]] = None,
                 ip_routing: Optional[pulumi.Input[bool]] = None,
                 ip_source_route: Optional[pulumi.Input[bool]] = None,
                 ipv6_unicast_routing: Optional[pulumi.Input[bool]] = None,
                 login_delay: Optional[pulumi.Input[int]] = None,
                 login_on_failure: Optional[pulumi.Input[bool]] = None,
                 login_on_failure_log: Optional[pulumi.Input[bool]] = None,
                 login_on_success: Optional[pulumi.Input[bool]] = None,
                 login_on_success_log: Optional[pulumi.Input[bool]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 multicast_routing_switch: Optional[pulumi.Input[bool]] = None,
                 multicast_routing_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemMulticastRoutingVrfArgs']]]]] = None,
                 __props__=None):
        """
        This resource can manage the System configuration.

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_iosxe as iosxe

        example = iosxe.iosxe.System("example",
            hostname="ROUTER-1",
            ip_domain_lookup=False,
            ip_domain_name="test.com",
            ip_source_route=False,
            ipv6_unicast_routing=True,
            login_delay=10,
            login_on_failure=True,
            login_on_failure_log=True,
            login_on_success=True,
            login_on_success_log=True,
            multicast_routing_vrfs=[iosxe.iosxe.SystemMulticastRoutingVrfArgs(
                vrf="VRF1",
            )])
        ```

        ## Import

        ```sh
         $ pulumi import iosxe:iosxe/system:System example "Cisco-IOS-XE-native:native"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] hostname: Set system's network name
        :param pulumi.Input[bool] ip_domain_lookup: Enable IP Domain Name System hostname translation
        :param pulumi.Input[str] ip_domain_name: Define the default domain name
        :param pulumi.Input[bool] ip_multicast_routing: Enable IP multicast forwarding
        :param pulumi.Input[bool] ip_multicast_routing_distributed: Distributed multicast switching
        :param pulumi.Input[bool] ip_routing: Enable or disable IP routing
        :param pulumi.Input[bool] ip_source_route: Process packets with source routing header options
        :param pulumi.Input[bool] ipv6_unicast_routing: Enable unicast routing
        :param pulumi.Input[int] login_delay: Set delay between successive fail login - Range: `1`-`10`
        :param pulumi.Input[bool] login_on_failure: Set options for failed login attempt
        :param pulumi.Input[bool] login_on_failure_log: Generate syslogs on failure logins
        :param pulumi.Input[bool] login_on_success: Set options for successful login attempt
        :param pulumi.Input[bool] login_on_success_log: Generate syslogs on successful logins
        :param pulumi.Input[int] mtu: - Range: `1500`-`9198`
        :param pulumi.Input[bool] multicast_routing_switch: Enable IP multicast forwarding, some XE devices use this option instead of `multicast_routing`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemMulticastRoutingVrfArgs']]]] multicast_routing_vrfs: Select VPN Routing/Forwarding instance
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SystemArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the System configuration.

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_iosxe as iosxe

        example = iosxe.iosxe.System("example",
            hostname="ROUTER-1",
            ip_domain_lookup=False,
            ip_domain_name="test.com",
            ip_source_route=False,
            ipv6_unicast_routing=True,
            login_delay=10,
            login_on_failure=True,
            login_on_failure_log=True,
            login_on_success=True,
            login_on_success_log=True,
            multicast_routing_vrfs=[iosxe.iosxe.SystemMulticastRoutingVrfArgs(
                vrf="VRF1",
            )])
        ```

        ## Import

        ```sh
         $ pulumi import iosxe:iosxe/system:System example "Cisco-IOS-XE-native:native"
        ```

        :param str resource_name: The name of the resource.
        :param SystemArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 ip_domain_lookup: Optional[pulumi.Input[bool]] = None,
                 ip_domain_name: Optional[pulumi.Input[str]] = None,
                 ip_multicast_routing: Optional[pulumi.Input[bool]] = None,
                 ip_multicast_routing_distributed: Optional[pulumi.Input[bool]] = None,
                 ip_routing: Optional[pulumi.Input[bool]] = None,
                 ip_source_route: Optional[pulumi.Input[bool]] = None,
                 ipv6_unicast_routing: Optional[pulumi.Input[bool]] = None,
                 login_delay: Optional[pulumi.Input[int]] = None,
                 login_on_failure: Optional[pulumi.Input[bool]] = None,
                 login_on_failure_log: Optional[pulumi.Input[bool]] = None,
                 login_on_success: Optional[pulumi.Input[bool]] = None,
                 login_on_success_log: Optional[pulumi.Input[bool]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 multicast_routing_switch: Optional[pulumi.Input[bool]] = None,
                 multicast_routing_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemMulticastRoutingVrfArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemArgs.__new__(SystemArgs)

            __props__.__dict__["device"] = device
            __props__.__dict__["hostname"] = hostname
            __props__.__dict__["ip_domain_lookup"] = ip_domain_lookup
            __props__.__dict__["ip_domain_name"] = ip_domain_name
            __props__.__dict__["ip_multicast_routing"] = ip_multicast_routing
            __props__.__dict__["ip_multicast_routing_distributed"] = ip_multicast_routing_distributed
            __props__.__dict__["ip_routing"] = ip_routing
            __props__.__dict__["ip_source_route"] = ip_source_route
            __props__.__dict__["ipv6_unicast_routing"] = ipv6_unicast_routing
            __props__.__dict__["login_delay"] = login_delay
            __props__.__dict__["login_on_failure"] = login_on_failure
            __props__.__dict__["login_on_failure_log"] = login_on_failure_log
            __props__.__dict__["login_on_success"] = login_on_success
            __props__.__dict__["login_on_success_log"] = login_on_success_log
            __props__.__dict__["mtu"] = mtu
            __props__.__dict__["multicast_routing_switch"] = multicast_routing_switch
            __props__.__dict__["multicast_routing_vrfs"] = multicast_routing_vrfs
        super(System, __self__).__init__(
            'iosxe:iosxe/system:System',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            device: Optional[pulumi.Input[str]] = None,
            hostname: Optional[pulumi.Input[str]] = None,
            ip_domain_lookup: Optional[pulumi.Input[bool]] = None,
            ip_domain_name: Optional[pulumi.Input[str]] = None,
            ip_multicast_routing: Optional[pulumi.Input[bool]] = None,
            ip_multicast_routing_distributed: Optional[pulumi.Input[bool]] = None,
            ip_routing: Optional[pulumi.Input[bool]] = None,
            ip_source_route: Optional[pulumi.Input[bool]] = None,
            ipv6_unicast_routing: Optional[pulumi.Input[bool]] = None,
            login_delay: Optional[pulumi.Input[int]] = None,
            login_on_failure: Optional[pulumi.Input[bool]] = None,
            login_on_failure_log: Optional[pulumi.Input[bool]] = None,
            login_on_success: Optional[pulumi.Input[bool]] = None,
            login_on_success_log: Optional[pulumi.Input[bool]] = None,
            mtu: Optional[pulumi.Input[int]] = None,
            multicast_routing_switch: Optional[pulumi.Input[bool]] = None,
            multicast_routing_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemMulticastRoutingVrfArgs']]]]] = None) -> 'System':
        """
        Get an existing System resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] hostname: Set system's network name
        :param pulumi.Input[bool] ip_domain_lookup: Enable IP Domain Name System hostname translation
        :param pulumi.Input[str] ip_domain_name: Define the default domain name
        :param pulumi.Input[bool] ip_multicast_routing: Enable IP multicast forwarding
        :param pulumi.Input[bool] ip_multicast_routing_distributed: Distributed multicast switching
        :param pulumi.Input[bool] ip_routing: Enable or disable IP routing
        :param pulumi.Input[bool] ip_source_route: Process packets with source routing header options
        :param pulumi.Input[bool] ipv6_unicast_routing: Enable unicast routing
        :param pulumi.Input[int] login_delay: Set delay between successive fail login - Range: `1`-`10`
        :param pulumi.Input[bool] login_on_failure: Set options for failed login attempt
        :param pulumi.Input[bool] login_on_failure_log: Generate syslogs on failure logins
        :param pulumi.Input[bool] login_on_success: Set options for successful login attempt
        :param pulumi.Input[bool] login_on_success_log: Generate syslogs on successful logins
        :param pulumi.Input[int] mtu: - Range: `1500`-`9198`
        :param pulumi.Input[bool] multicast_routing_switch: Enable IP multicast forwarding, some XE devices use this option instead of `multicast_routing`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SystemMulticastRoutingVrfArgs']]]] multicast_routing_vrfs: Select VPN Routing/Forwarding instance
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemState.__new__(_SystemState)

        __props__.__dict__["device"] = device
        __props__.__dict__["hostname"] = hostname
        __props__.__dict__["ip_domain_lookup"] = ip_domain_lookup
        __props__.__dict__["ip_domain_name"] = ip_domain_name
        __props__.__dict__["ip_multicast_routing"] = ip_multicast_routing
        __props__.__dict__["ip_multicast_routing_distributed"] = ip_multicast_routing_distributed
        __props__.__dict__["ip_routing"] = ip_routing
        __props__.__dict__["ip_source_route"] = ip_source_route
        __props__.__dict__["ipv6_unicast_routing"] = ipv6_unicast_routing
        __props__.__dict__["login_delay"] = login_delay
        __props__.__dict__["login_on_failure"] = login_on_failure
        __props__.__dict__["login_on_failure_log"] = login_on_failure_log
        __props__.__dict__["login_on_success"] = login_on_success
        __props__.__dict__["login_on_success_log"] = login_on_success_log
        __props__.__dict__["mtu"] = mtu
        __props__.__dict__["multicast_routing_switch"] = multicast_routing_switch
        __props__.__dict__["multicast_routing_vrfs"] = multicast_routing_vrfs
        return System(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def hostname(self) -> pulumi.Output[Optional[str]]:
        """
        Set system's network name
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="ipDomainLookup")
    def ip_domain_lookup(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable IP Domain Name System hostname translation
        """
        return pulumi.get(self, "ip_domain_lookup")

    @property
    @pulumi.getter(name="ipDomainName")
    def ip_domain_name(self) -> pulumi.Output[Optional[str]]:
        """
        Define the default domain name
        """
        return pulumi.get(self, "ip_domain_name")

    @property
    @pulumi.getter(name="ipMulticastRouting")
    def ip_multicast_routing(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable IP multicast forwarding
        """
        return pulumi.get(self, "ip_multicast_routing")

    @property
    @pulumi.getter(name="ipMulticastRoutingDistributed")
    def ip_multicast_routing_distributed(self) -> pulumi.Output[Optional[bool]]:
        """
        Distributed multicast switching
        """
        return pulumi.get(self, "ip_multicast_routing_distributed")

    @property
    @pulumi.getter(name="ipRouting")
    def ip_routing(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable or disable IP routing
        """
        return pulumi.get(self, "ip_routing")

    @property
    @pulumi.getter(name="ipSourceRoute")
    def ip_source_route(self) -> pulumi.Output[Optional[bool]]:
        """
        Process packets with source routing header options
        """
        return pulumi.get(self, "ip_source_route")

    @property
    @pulumi.getter(name="ipv6UnicastRouting")
    def ipv6_unicast_routing(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable unicast routing
        """
        return pulumi.get(self, "ipv6_unicast_routing")

    @property
    @pulumi.getter(name="loginDelay")
    def login_delay(self) -> pulumi.Output[Optional[int]]:
        """
        Set delay between successive fail login - Range: `1`-`10`
        """
        return pulumi.get(self, "login_delay")

    @property
    @pulumi.getter(name="loginOnFailure")
    def login_on_failure(self) -> pulumi.Output[Optional[bool]]:
        """
        Set options for failed login attempt
        """
        return pulumi.get(self, "login_on_failure")

    @property
    @pulumi.getter(name="loginOnFailureLog")
    def login_on_failure_log(self) -> pulumi.Output[Optional[bool]]:
        """
        Generate syslogs on failure logins
        """
        return pulumi.get(self, "login_on_failure_log")

    @property
    @pulumi.getter(name="loginOnSuccess")
    def login_on_success(self) -> pulumi.Output[Optional[bool]]:
        """
        Set options for successful login attempt
        """
        return pulumi.get(self, "login_on_success")

    @property
    @pulumi.getter(name="loginOnSuccessLog")
    def login_on_success_log(self) -> pulumi.Output[Optional[bool]]:
        """
        Generate syslogs on successful logins
        """
        return pulumi.get(self, "login_on_success_log")

    @property
    @pulumi.getter
    def mtu(self) -> pulumi.Output[Optional[int]]:
        """
        - Range: `1500`-`9198`
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter(name="multicastRoutingSwitch")
    def multicast_routing_switch(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable IP multicast forwarding, some XE devices use this option instead of `multicast_routing`.
        """
        return pulumi.get(self, "multicast_routing_switch")

    @property
    @pulumi.getter(name="multicastRoutingVrfs")
    def multicast_routing_vrfs(self) -> pulumi.Output[Optional[Sequence['outputs.SystemMulticastRoutingVrf']]]:
        """
        Select VPN Routing/Forwarding instance
        """
        return pulumi.get(self, "multicast_routing_vrfs")

