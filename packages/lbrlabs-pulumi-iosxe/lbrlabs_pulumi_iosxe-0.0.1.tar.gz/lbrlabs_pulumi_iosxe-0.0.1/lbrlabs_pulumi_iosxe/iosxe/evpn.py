# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['EvpnArgs', 'Evpn']

@pulumi.input_type
class EvpnArgs:
    def __init__(__self__, *,
                 default_gateway_advertise: Optional[pulumi.Input[bool]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 ip_duplication_limit: Optional[pulumi.Input[int]] = None,
                 ip_duplication_time: Optional[pulumi.Input[int]] = None,
                 logging_peer_state: Optional[pulumi.Input[bool]] = None,
                 mac_duplication_limit: Optional[pulumi.Input[int]] = None,
                 mac_duplication_time: Optional[pulumi.Input[int]] = None,
                 replication_type_ingress: Optional[pulumi.Input[bool]] = None,
                 replication_type_mp2mp: Optional[pulumi.Input[bool]] = None,
                 replication_type_p2mp: Optional[pulumi.Input[bool]] = None,
                 replication_type_static: Optional[pulumi.Input[bool]] = None,
                 route_target_auto_vni: Optional[pulumi.Input[bool]] = None,
                 router_id_loopback: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Evpn resource.
        :param pulumi.Input[bool] default_gateway_advertise: Advertise Default Gateway MAC/IP routes
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] ip_duplication_limit: Number of IP moves within specified time interval - Range: `2`-`1000`
        :param pulumi.Input[int] ip_duplication_time: IP duplication timer - Range: `10`-`36000`
        :param pulumi.Input[bool] logging_peer_state: Peer state transition logging
        :param pulumi.Input[int] mac_duplication_limit: Number of MAC moves within specified time interval - Range: `2`-`1000`
        :param pulumi.Input[int] mac_duplication_time: MAC duplication timer - Range: `10`-`36000`
        :param pulumi.Input[bool] replication_type_ingress: Ingress replication
        :param pulumi.Input[bool] replication_type_mp2mp: mp2mp replication
        :param pulumi.Input[bool] replication_type_p2mp: p2mp replication
        :param pulumi.Input[bool] replication_type_static: Static replication
        :param pulumi.Input[bool] route_target_auto_vni: Set vni-based route-target
        :param pulumi.Input[int] router_id_loopback: Loopback interface - Range: `0`-`2147483647`
        """
        if default_gateway_advertise is not None:
            pulumi.set(__self__, "default_gateway_advertise", default_gateway_advertise)
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if ip_duplication_limit is not None:
            pulumi.set(__self__, "ip_duplication_limit", ip_duplication_limit)
        if ip_duplication_time is not None:
            pulumi.set(__self__, "ip_duplication_time", ip_duplication_time)
        if logging_peer_state is not None:
            pulumi.set(__self__, "logging_peer_state", logging_peer_state)
        if mac_duplication_limit is not None:
            pulumi.set(__self__, "mac_duplication_limit", mac_duplication_limit)
        if mac_duplication_time is not None:
            pulumi.set(__self__, "mac_duplication_time", mac_duplication_time)
        if replication_type_ingress is not None:
            pulumi.set(__self__, "replication_type_ingress", replication_type_ingress)
        if replication_type_mp2mp is not None:
            pulumi.set(__self__, "replication_type_mp2mp", replication_type_mp2mp)
        if replication_type_p2mp is not None:
            pulumi.set(__self__, "replication_type_p2mp", replication_type_p2mp)
        if replication_type_static is not None:
            pulumi.set(__self__, "replication_type_static", replication_type_static)
        if route_target_auto_vni is not None:
            pulumi.set(__self__, "route_target_auto_vni", route_target_auto_vni)
        if router_id_loopback is not None:
            pulumi.set(__self__, "router_id_loopback", router_id_loopback)

    @property
    @pulumi.getter(name="defaultGatewayAdvertise")
    def default_gateway_advertise(self) -> Optional[pulumi.Input[bool]]:
        """
        Advertise Default Gateway MAC/IP routes
        """
        return pulumi.get(self, "default_gateway_advertise")

    @default_gateway_advertise.setter
    def default_gateway_advertise(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_gateway_advertise", value)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="ipDuplicationLimit")
    def ip_duplication_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Number of IP moves within specified time interval - Range: `2`-`1000`
        """
        return pulumi.get(self, "ip_duplication_limit")

    @ip_duplication_limit.setter
    def ip_duplication_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip_duplication_limit", value)

    @property
    @pulumi.getter(name="ipDuplicationTime")
    def ip_duplication_time(self) -> Optional[pulumi.Input[int]]:
        """
        IP duplication timer - Range: `10`-`36000`
        """
        return pulumi.get(self, "ip_duplication_time")

    @ip_duplication_time.setter
    def ip_duplication_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip_duplication_time", value)

    @property
    @pulumi.getter(name="loggingPeerState")
    def logging_peer_state(self) -> Optional[pulumi.Input[bool]]:
        """
        Peer state transition logging
        """
        return pulumi.get(self, "logging_peer_state")

    @logging_peer_state.setter
    def logging_peer_state(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logging_peer_state", value)

    @property
    @pulumi.getter(name="macDuplicationLimit")
    def mac_duplication_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Number of MAC moves within specified time interval - Range: `2`-`1000`
        """
        return pulumi.get(self, "mac_duplication_limit")

    @mac_duplication_limit.setter
    def mac_duplication_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mac_duplication_limit", value)

    @property
    @pulumi.getter(name="macDuplicationTime")
    def mac_duplication_time(self) -> Optional[pulumi.Input[int]]:
        """
        MAC duplication timer - Range: `10`-`36000`
        """
        return pulumi.get(self, "mac_duplication_time")

    @mac_duplication_time.setter
    def mac_duplication_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mac_duplication_time", value)

    @property
    @pulumi.getter(name="replicationTypeIngress")
    def replication_type_ingress(self) -> Optional[pulumi.Input[bool]]:
        """
        Ingress replication
        """
        return pulumi.get(self, "replication_type_ingress")

    @replication_type_ingress.setter
    def replication_type_ingress(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "replication_type_ingress", value)

    @property
    @pulumi.getter(name="replicationTypeMp2mp")
    def replication_type_mp2mp(self) -> Optional[pulumi.Input[bool]]:
        """
        mp2mp replication
        """
        return pulumi.get(self, "replication_type_mp2mp")

    @replication_type_mp2mp.setter
    def replication_type_mp2mp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "replication_type_mp2mp", value)

    @property
    @pulumi.getter(name="replicationTypeP2mp")
    def replication_type_p2mp(self) -> Optional[pulumi.Input[bool]]:
        """
        p2mp replication
        """
        return pulumi.get(self, "replication_type_p2mp")

    @replication_type_p2mp.setter
    def replication_type_p2mp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "replication_type_p2mp", value)

    @property
    @pulumi.getter(name="replicationTypeStatic")
    def replication_type_static(self) -> Optional[pulumi.Input[bool]]:
        """
        Static replication
        """
        return pulumi.get(self, "replication_type_static")

    @replication_type_static.setter
    def replication_type_static(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "replication_type_static", value)

    @property
    @pulumi.getter(name="routeTargetAutoVni")
    def route_target_auto_vni(self) -> Optional[pulumi.Input[bool]]:
        """
        Set vni-based route-target
        """
        return pulumi.get(self, "route_target_auto_vni")

    @route_target_auto_vni.setter
    def route_target_auto_vni(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "route_target_auto_vni", value)

    @property
    @pulumi.getter(name="routerIdLoopback")
    def router_id_loopback(self) -> Optional[pulumi.Input[int]]:
        """
        Loopback interface - Range: `0`-`2147483647`
        """
        return pulumi.get(self, "router_id_loopback")

    @router_id_loopback.setter
    def router_id_loopback(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "router_id_loopback", value)


@pulumi.input_type
class _EvpnState:
    def __init__(__self__, *,
                 default_gateway_advertise: Optional[pulumi.Input[bool]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 ip_duplication_limit: Optional[pulumi.Input[int]] = None,
                 ip_duplication_time: Optional[pulumi.Input[int]] = None,
                 logging_peer_state: Optional[pulumi.Input[bool]] = None,
                 mac_duplication_limit: Optional[pulumi.Input[int]] = None,
                 mac_duplication_time: Optional[pulumi.Input[int]] = None,
                 replication_type_ingress: Optional[pulumi.Input[bool]] = None,
                 replication_type_mp2mp: Optional[pulumi.Input[bool]] = None,
                 replication_type_p2mp: Optional[pulumi.Input[bool]] = None,
                 replication_type_static: Optional[pulumi.Input[bool]] = None,
                 route_target_auto_vni: Optional[pulumi.Input[bool]] = None,
                 router_id_loopback: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Evpn resources.
        :param pulumi.Input[bool] default_gateway_advertise: Advertise Default Gateway MAC/IP routes
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] ip_duplication_limit: Number of IP moves within specified time interval - Range: `2`-`1000`
        :param pulumi.Input[int] ip_duplication_time: IP duplication timer - Range: `10`-`36000`
        :param pulumi.Input[bool] logging_peer_state: Peer state transition logging
        :param pulumi.Input[int] mac_duplication_limit: Number of MAC moves within specified time interval - Range: `2`-`1000`
        :param pulumi.Input[int] mac_duplication_time: MAC duplication timer - Range: `10`-`36000`
        :param pulumi.Input[bool] replication_type_ingress: Ingress replication
        :param pulumi.Input[bool] replication_type_mp2mp: mp2mp replication
        :param pulumi.Input[bool] replication_type_p2mp: p2mp replication
        :param pulumi.Input[bool] replication_type_static: Static replication
        :param pulumi.Input[bool] route_target_auto_vni: Set vni-based route-target
        :param pulumi.Input[int] router_id_loopback: Loopback interface - Range: `0`-`2147483647`
        """
        if default_gateway_advertise is not None:
            pulumi.set(__self__, "default_gateway_advertise", default_gateway_advertise)
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if ip_duplication_limit is not None:
            pulumi.set(__self__, "ip_duplication_limit", ip_duplication_limit)
        if ip_duplication_time is not None:
            pulumi.set(__self__, "ip_duplication_time", ip_duplication_time)
        if logging_peer_state is not None:
            pulumi.set(__self__, "logging_peer_state", logging_peer_state)
        if mac_duplication_limit is not None:
            pulumi.set(__self__, "mac_duplication_limit", mac_duplication_limit)
        if mac_duplication_time is not None:
            pulumi.set(__self__, "mac_duplication_time", mac_duplication_time)
        if replication_type_ingress is not None:
            pulumi.set(__self__, "replication_type_ingress", replication_type_ingress)
        if replication_type_mp2mp is not None:
            pulumi.set(__self__, "replication_type_mp2mp", replication_type_mp2mp)
        if replication_type_p2mp is not None:
            pulumi.set(__self__, "replication_type_p2mp", replication_type_p2mp)
        if replication_type_static is not None:
            pulumi.set(__self__, "replication_type_static", replication_type_static)
        if route_target_auto_vni is not None:
            pulumi.set(__self__, "route_target_auto_vni", route_target_auto_vni)
        if router_id_loopback is not None:
            pulumi.set(__self__, "router_id_loopback", router_id_loopback)

    @property
    @pulumi.getter(name="defaultGatewayAdvertise")
    def default_gateway_advertise(self) -> Optional[pulumi.Input[bool]]:
        """
        Advertise Default Gateway MAC/IP routes
        """
        return pulumi.get(self, "default_gateway_advertise")

    @default_gateway_advertise.setter
    def default_gateway_advertise(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_gateway_advertise", value)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="ipDuplicationLimit")
    def ip_duplication_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Number of IP moves within specified time interval - Range: `2`-`1000`
        """
        return pulumi.get(self, "ip_duplication_limit")

    @ip_duplication_limit.setter
    def ip_duplication_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip_duplication_limit", value)

    @property
    @pulumi.getter(name="ipDuplicationTime")
    def ip_duplication_time(self) -> Optional[pulumi.Input[int]]:
        """
        IP duplication timer - Range: `10`-`36000`
        """
        return pulumi.get(self, "ip_duplication_time")

    @ip_duplication_time.setter
    def ip_duplication_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip_duplication_time", value)

    @property
    @pulumi.getter(name="loggingPeerState")
    def logging_peer_state(self) -> Optional[pulumi.Input[bool]]:
        """
        Peer state transition logging
        """
        return pulumi.get(self, "logging_peer_state")

    @logging_peer_state.setter
    def logging_peer_state(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logging_peer_state", value)

    @property
    @pulumi.getter(name="macDuplicationLimit")
    def mac_duplication_limit(self) -> Optional[pulumi.Input[int]]:
        """
        Number of MAC moves within specified time interval - Range: `2`-`1000`
        """
        return pulumi.get(self, "mac_duplication_limit")

    @mac_duplication_limit.setter
    def mac_duplication_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mac_duplication_limit", value)

    @property
    @pulumi.getter(name="macDuplicationTime")
    def mac_duplication_time(self) -> Optional[pulumi.Input[int]]:
        """
        MAC duplication timer - Range: `10`-`36000`
        """
        return pulumi.get(self, "mac_duplication_time")

    @mac_duplication_time.setter
    def mac_duplication_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mac_duplication_time", value)

    @property
    @pulumi.getter(name="replicationTypeIngress")
    def replication_type_ingress(self) -> Optional[pulumi.Input[bool]]:
        """
        Ingress replication
        """
        return pulumi.get(self, "replication_type_ingress")

    @replication_type_ingress.setter
    def replication_type_ingress(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "replication_type_ingress", value)

    @property
    @pulumi.getter(name="replicationTypeMp2mp")
    def replication_type_mp2mp(self) -> Optional[pulumi.Input[bool]]:
        """
        mp2mp replication
        """
        return pulumi.get(self, "replication_type_mp2mp")

    @replication_type_mp2mp.setter
    def replication_type_mp2mp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "replication_type_mp2mp", value)

    @property
    @pulumi.getter(name="replicationTypeP2mp")
    def replication_type_p2mp(self) -> Optional[pulumi.Input[bool]]:
        """
        p2mp replication
        """
        return pulumi.get(self, "replication_type_p2mp")

    @replication_type_p2mp.setter
    def replication_type_p2mp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "replication_type_p2mp", value)

    @property
    @pulumi.getter(name="replicationTypeStatic")
    def replication_type_static(self) -> Optional[pulumi.Input[bool]]:
        """
        Static replication
        """
        return pulumi.get(self, "replication_type_static")

    @replication_type_static.setter
    def replication_type_static(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "replication_type_static", value)

    @property
    @pulumi.getter(name="routeTargetAutoVni")
    def route_target_auto_vni(self) -> Optional[pulumi.Input[bool]]:
        """
        Set vni-based route-target
        """
        return pulumi.get(self, "route_target_auto_vni")

    @route_target_auto_vni.setter
    def route_target_auto_vni(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "route_target_auto_vni", value)

    @property
    @pulumi.getter(name="routerIdLoopback")
    def router_id_loopback(self) -> Optional[pulumi.Input[int]]:
        """
        Loopback interface - Range: `0`-`2147483647`
        """
        return pulumi.get(self, "router_id_loopback")

    @router_id_loopback.setter
    def router_id_loopback(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "router_id_loopback", value)


class Evpn(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_gateway_advertise: Optional[pulumi.Input[bool]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 ip_duplication_limit: Optional[pulumi.Input[int]] = None,
                 ip_duplication_time: Optional[pulumi.Input[int]] = None,
                 logging_peer_state: Optional[pulumi.Input[bool]] = None,
                 mac_duplication_limit: Optional[pulumi.Input[int]] = None,
                 mac_duplication_time: Optional[pulumi.Input[int]] = None,
                 replication_type_ingress: Optional[pulumi.Input[bool]] = None,
                 replication_type_mp2mp: Optional[pulumi.Input[bool]] = None,
                 replication_type_p2mp: Optional[pulumi.Input[bool]] = None,
                 replication_type_static: Optional[pulumi.Input[bool]] = None,
                 route_target_auto_vni: Optional[pulumi.Input[bool]] = None,
                 router_id_loopback: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        This resource can manage the EVPN configuration.

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_iosxe as iosxe

        example = iosxe.iosxe.Evpn("example",
            default_gateway_advertise=True,
            ip_duplication_limit=10,
            ip_duplication_time=100,
            logging_peer_state=True,
            mac_duplication_limit=10,
            mac_duplication_time=100,
            replication_type_ingress=False,
            replication_type_mp2mp=False,
            replication_type_p2mp=False,
            replication_type_static=True,
            route_target_auto_vni=True,
            router_id_loopback=100)
        ```

        ## Import

        ```sh
         $ pulumi import iosxe:iosxe/evpn:Evpn example "Cisco-IOS-XE-native:native/l2vpn/Cisco-IOS-XE-l2vpn:evpn_cont/evpn"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] default_gateway_advertise: Advertise Default Gateway MAC/IP routes
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] ip_duplication_limit: Number of IP moves within specified time interval - Range: `2`-`1000`
        :param pulumi.Input[int] ip_duplication_time: IP duplication timer - Range: `10`-`36000`
        :param pulumi.Input[bool] logging_peer_state: Peer state transition logging
        :param pulumi.Input[int] mac_duplication_limit: Number of MAC moves within specified time interval - Range: `2`-`1000`
        :param pulumi.Input[int] mac_duplication_time: MAC duplication timer - Range: `10`-`36000`
        :param pulumi.Input[bool] replication_type_ingress: Ingress replication
        :param pulumi.Input[bool] replication_type_mp2mp: mp2mp replication
        :param pulumi.Input[bool] replication_type_p2mp: p2mp replication
        :param pulumi.Input[bool] replication_type_static: Static replication
        :param pulumi.Input[bool] route_target_auto_vni: Set vni-based route-target
        :param pulumi.Input[int] router_id_loopback: Loopback interface - Range: `0`-`2147483647`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[EvpnArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the EVPN configuration.

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_iosxe as iosxe

        example = iosxe.iosxe.Evpn("example",
            default_gateway_advertise=True,
            ip_duplication_limit=10,
            ip_duplication_time=100,
            logging_peer_state=True,
            mac_duplication_limit=10,
            mac_duplication_time=100,
            replication_type_ingress=False,
            replication_type_mp2mp=False,
            replication_type_p2mp=False,
            replication_type_static=True,
            route_target_auto_vni=True,
            router_id_loopback=100)
        ```

        ## Import

        ```sh
         $ pulumi import iosxe:iosxe/evpn:Evpn example "Cisco-IOS-XE-native:native/l2vpn/Cisco-IOS-XE-l2vpn:evpn_cont/evpn"
        ```

        :param str resource_name: The name of the resource.
        :param EvpnArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EvpnArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_gateway_advertise: Optional[pulumi.Input[bool]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 ip_duplication_limit: Optional[pulumi.Input[int]] = None,
                 ip_duplication_time: Optional[pulumi.Input[int]] = None,
                 logging_peer_state: Optional[pulumi.Input[bool]] = None,
                 mac_duplication_limit: Optional[pulumi.Input[int]] = None,
                 mac_duplication_time: Optional[pulumi.Input[int]] = None,
                 replication_type_ingress: Optional[pulumi.Input[bool]] = None,
                 replication_type_mp2mp: Optional[pulumi.Input[bool]] = None,
                 replication_type_p2mp: Optional[pulumi.Input[bool]] = None,
                 replication_type_static: Optional[pulumi.Input[bool]] = None,
                 route_target_auto_vni: Optional[pulumi.Input[bool]] = None,
                 router_id_loopback: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EvpnArgs.__new__(EvpnArgs)

            __props__.__dict__["default_gateway_advertise"] = default_gateway_advertise
            __props__.__dict__["delete_mode"] = delete_mode
            __props__.__dict__["device"] = device
            __props__.__dict__["ip_duplication_limit"] = ip_duplication_limit
            __props__.__dict__["ip_duplication_time"] = ip_duplication_time
            __props__.__dict__["logging_peer_state"] = logging_peer_state
            __props__.__dict__["mac_duplication_limit"] = mac_duplication_limit
            __props__.__dict__["mac_duplication_time"] = mac_duplication_time
            __props__.__dict__["replication_type_ingress"] = replication_type_ingress
            __props__.__dict__["replication_type_mp2mp"] = replication_type_mp2mp
            __props__.__dict__["replication_type_p2mp"] = replication_type_p2mp
            __props__.__dict__["replication_type_static"] = replication_type_static
            __props__.__dict__["route_target_auto_vni"] = route_target_auto_vni
            __props__.__dict__["router_id_loopback"] = router_id_loopback
        super(Evpn, __self__).__init__(
            'iosxe:iosxe/evpn:Evpn',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            default_gateway_advertise: Optional[pulumi.Input[bool]] = None,
            delete_mode: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            ip_duplication_limit: Optional[pulumi.Input[int]] = None,
            ip_duplication_time: Optional[pulumi.Input[int]] = None,
            logging_peer_state: Optional[pulumi.Input[bool]] = None,
            mac_duplication_limit: Optional[pulumi.Input[int]] = None,
            mac_duplication_time: Optional[pulumi.Input[int]] = None,
            replication_type_ingress: Optional[pulumi.Input[bool]] = None,
            replication_type_mp2mp: Optional[pulumi.Input[bool]] = None,
            replication_type_p2mp: Optional[pulumi.Input[bool]] = None,
            replication_type_static: Optional[pulumi.Input[bool]] = None,
            route_target_auto_vni: Optional[pulumi.Input[bool]] = None,
            router_id_loopback: Optional[pulumi.Input[int]] = None) -> 'Evpn':
        """
        Get an existing Evpn resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] default_gateway_advertise: Advertise Default Gateway MAC/IP routes
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] ip_duplication_limit: Number of IP moves within specified time interval - Range: `2`-`1000`
        :param pulumi.Input[int] ip_duplication_time: IP duplication timer - Range: `10`-`36000`
        :param pulumi.Input[bool] logging_peer_state: Peer state transition logging
        :param pulumi.Input[int] mac_duplication_limit: Number of MAC moves within specified time interval - Range: `2`-`1000`
        :param pulumi.Input[int] mac_duplication_time: MAC duplication timer - Range: `10`-`36000`
        :param pulumi.Input[bool] replication_type_ingress: Ingress replication
        :param pulumi.Input[bool] replication_type_mp2mp: mp2mp replication
        :param pulumi.Input[bool] replication_type_p2mp: p2mp replication
        :param pulumi.Input[bool] replication_type_static: Static replication
        :param pulumi.Input[bool] route_target_auto_vni: Set vni-based route-target
        :param pulumi.Input[int] router_id_loopback: Loopback interface - Range: `0`-`2147483647`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EvpnState.__new__(_EvpnState)

        __props__.__dict__["default_gateway_advertise"] = default_gateway_advertise
        __props__.__dict__["delete_mode"] = delete_mode
        __props__.__dict__["device"] = device
        __props__.__dict__["ip_duplication_limit"] = ip_duplication_limit
        __props__.__dict__["ip_duplication_time"] = ip_duplication_time
        __props__.__dict__["logging_peer_state"] = logging_peer_state
        __props__.__dict__["mac_duplication_limit"] = mac_duplication_limit
        __props__.__dict__["mac_duplication_time"] = mac_duplication_time
        __props__.__dict__["replication_type_ingress"] = replication_type_ingress
        __props__.__dict__["replication_type_mp2mp"] = replication_type_mp2mp
        __props__.__dict__["replication_type_p2mp"] = replication_type_p2mp
        __props__.__dict__["replication_type_static"] = replication_type_static
        __props__.__dict__["route_target_auto_vni"] = route_target_auto_vni
        __props__.__dict__["router_id_loopback"] = router_id_loopback
        return Evpn(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="defaultGatewayAdvertise")
    def default_gateway_advertise(self) -> pulumi.Output[Optional[bool]]:
        """
        Advertise Default Gateway MAC/IP routes
        """
        return pulumi.get(self, "default_gateway_advertise")

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="ipDuplicationLimit")
    def ip_duplication_limit(self) -> pulumi.Output[Optional[int]]:
        """
        Number of IP moves within specified time interval - Range: `2`-`1000`
        """
        return pulumi.get(self, "ip_duplication_limit")

    @property
    @pulumi.getter(name="ipDuplicationTime")
    def ip_duplication_time(self) -> pulumi.Output[Optional[int]]:
        """
        IP duplication timer - Range: `10`-`36000`
        """
        return pulumi.get(self, "ip_duplication_time")

    @property
    @pulumi.getter(name="loggingPeerState")
    def logging_peer_state(self) -> pulumi.Output[Optional[bool]]:
        """
        Peer state transition logging
        """
        return pulumi.get(self, "logging_peer_state")

    @property
    @pulumi.getter(name="macDuplicationLimit")
    def mac_duplication_limit(self) -> pulumi.Output[Optional[int]]:
        """
        Number of MAC moves within specified time interval - Range: `2`-`1000`
        """
        return pulumi.get(self, "mac_duplication_limit")

    @property
    @pulumi.getter(name="macDuplicationTime")
    def mac_duplication_time(self) -> pulumi.Output[Optional[int]]:
        """
        MAC duplication timer - Range: `10`-`36000`
        """
        return pulumi.get(self, "mac_duplication_time")

    @property
    @pulumi.getter(name="replicationTypeIngress")
    def replication_type_ingress(self) -> pulumi.Output[Optional[bool]]:
        """
        Ingress replication
        """
        return pulumi.get(self, "replication_type_ingress")

    @property
    @pulumi.getter(name="replicationTypeMp2mp")
    def replication_type_mp2mp(self) -> pulumi.Output[Optional[bool]]:
        """
        mp2mp replication
        """
        return pulumi.get(self, "replication_type_mp2mp")

    @property
    @pulumi.getter(name="replicationTypeP2mp")
    def replication_type_p2mp(self) -> pulumi.Output[Optional[bool]]:
        """
        p2mp replication
        """
        return pulumi.get(self, "replication_type_p2mp")

    @property
    @pulumi.getter(name="replicationTypeStatic")
    def replication_type_static(self) -> pulumi.Output[Optional[bool]]:
        """
        Static replication
        """
        return pulumi.get(self, "replication_type_static")

    @property
    @pulumi.getter(name="routeTargetAutoVni")
    def route_target_auto_vni(self) -> pulumi.Output[Optional[bool]]:
        """
        Set vni-based route-target
        """
        return pulumi.get(self, "route_target_auto_vni")

    @property
    @pulumi.getter(name="routerIdLoopback")
    def router_id_loopback(self) -> pulumi.Output[Optional[int]]:
        """
        Loopback interface - Range: `0`-`2147483647`
        """
        return pulumi.get(self, "router_id_loopback")

