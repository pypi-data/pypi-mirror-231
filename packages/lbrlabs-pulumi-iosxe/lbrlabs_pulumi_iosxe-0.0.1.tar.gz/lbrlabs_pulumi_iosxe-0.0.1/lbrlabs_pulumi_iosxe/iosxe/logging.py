# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LoggingArgs', 'Logging']

@pulumi.input_type
class LoggingArgs:
    def __init__(__self__, *,
                 buffered_severity: Optional[pulumi.Input[str]] = None,
                 buffered_size: Optional[pulumi.Input[int]] = None,
                 console_severity: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 facility: Optional[pulumi.Input[str]] = None,
                 file_max_size: Optional[pulumi.Input[int]] = None,
                 file_min_size: Optional[pulumi.Input[int]] = None,
                 file_name: Optional[pulumi.Input[str]] = None,
                 file_severity: Optional[pulumi.Input[str]] = None,
                 history_severity: Optional[pulumi.Input[str]] = None,
                 history_size: Optional[pulumi.Input[int]] = None,
                 ipv4_hosts: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostArgs']]]] = None,
                 ipv4_vrf_hosts: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4VrfHostArgs']]]] = None,
                 ipv6_hosts: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv6HostArgs']]]] = None,
                 ipv6_vrf_hosts: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv6VrfHostArgs']]]] = None,
                 monitor_severity: Optional[pulumi.Input[str]] = None,
                 origin_id_name: Optional[pulumi.Input[str]] = None,
                 origin_id_type: Optional[pulumi.Input[str]] = None,
                 source_interface: Optional[pulumi.Input[str]] = None,
                 source_interfaces_vrves: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingSourceInterfacesVrfArgs']]]] = None,
                 trap: Optional[pulumi.Input[bool]] = None,
                 trap_severity: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Logging resource.
        :param pulumi.Input[str] buffered_severity: Logging severity level
        :param pulumi.Input[int] buffered_size: Logging buffer size - Range: `4096`-`2147483647`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] facility: Facility parameter for syslog messages - Choices: `auth`, `cron`, `daemon`, `kern`, `local0`, `local1`, `local2`,
               `local3`, `local4`, `local5`, `local6`, `local7`, `lpr`, `mail`, `news`, `sys10`, `sys11`, `sys12`, `sys13`, `sys14`,
               `sys9`, `syslog`, `user`, `uucp`
        :param pulumi.Input[int] file_max_size: - Range: `0`-`4294967295`
        :param pulumi.Input[int] file_min_size: - Range: `0`-`4294967295`
        :param pulumi.Input[int] history_size: Set history table size - Range: `0`-`65535`
        :param pulumi.Input[str] origin_id_name: Define a unique text string as ID
        :param pulumi.Input[str] origin_id_type: Use origin hostname/ip/ipv6 as ID - Choices: `hostname`, `ip`, `ipv6`
        :param pulumi.Input[Sequence[pulumi.Input['LoggingSourceInterfacesVrfArgs']]] source_interfaces_vrves: Specify interface and vrf for source address in logging transactions
        :param pulumi.Input[bool] trap: Set trap server logging level
        """
        if buffered_severity is not None:
            pulumi.set(__self__, "buffered_severity", buffered_severity)
        if buffered_size is not None:
            pulumi.set(__self__, "buffered_size", buffered_size)
        if console_severity is not None:
            pulumi.set(__self__, "console_severity", console_severity)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if file_max_size is not None:
            pulumi.set(__self__, "file_max_size", file_max_size)
        if file_min_size is not None:
            pulumi.set(__self__, "file_min_size", file_min_size)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)
        if file_severity is not None:
            pulumi.set(__self__, "file_severity", file_severity)
        if history_severity is not None:
            pulumi.set(__self__, "history_severity", history_severity)
        if history_size is not None:
            pulumi.set(__self__, "history_size", history_size)
        if ipv4_hosts is not None:
            pulumi.set(__self__, "ipv4_hosts", ipv4_hosts)
        if ipv4_vrf_hosts is not None:
            pulumi.set(__self__, "ipv4_vrf_hosts", ipv4_vrf_hosts)
        if ipv6_hosts is not None:
            pulumi.set(__self__, "ipv6_hosts", ipv6_hosts)
        if ipv6_vrf_hosts is not None:
            pulumi.set(__self__, "ipv6_vrf_hosts", ipv6_vrf_hosts)
        if monitor_severity is not None:
            pulumi.set(__self__, "monitor_severity", monitor_severity)
        if origin_id_name is not None:
            pulumi.set(__self__, "origin_id_name", origin_id_name)
        if origin_id_type is not None:
            pulumi.set(__self__, "origin_id_type", origin_id_type)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interfaces_vrves is not None:
            pulumi.set(__self__, "source_interfaces_vrves", source_interfaces_vrves)
        if trap is not None:
            pulumi.set(__self__, "trap", trap)
        if trap_severity is not None:
            pulumi.set(__self__, "trap_severity", trap_severity)

    @property
    @pulumi.getter(name="bufferedSeverity")
    def buffered_severity(self) -> Optional[pulumi.Input[str]]:
        """
        Logging severity level
        """
        return pulumi.get(self, "buffered_severity")

    @buffered_severity.setter
    def buffered_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffered_severity", value)

    @property
    @pulumi.getter(name="bufferedSize")
    def buffered_size(self) -> Optional[pulumi.Input[int]]:
        """
        Logging buffer size - Range: `4096`-`2147483647`
        """
        return pulumi.get(self, "buffered_size")

    @buffered_size.setter
    def buffered_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "buffered_size", value)

    @property
    @pulumi.getter(name="consoleSeverity")
    def console_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "console_severity")

    @console_severity.setter
    def console_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "console_severity", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def facility(self) -> Optional[pulumi.Input[str]]:
        """
        Facility parameter for syslog messages - Choices: `auth`, `cron`, `daemon`, `kern`, `local0`, `local1`, `local2`,
        `local3`, `local4`, `local5`, `local6`, `local7`, `lpr`, `mail`, `news`, `sys10`, `sys11`, `sys12`, `sys13`, `sys14`,
        `sys9`, `syslog`, `user`, `uucp`
        """
        return pulumi.get(self, "facility")

    @facility.setter
    def facility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facility", value)

    @property
    @pulumi.getter(name="fileMaxSize")
    def file_max_size(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "file_max_size")

    @file_max_size.setter
    def file_max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_max_size", value)

    @property
    @pulumi.getter(name="fileMinSize")
    def file_min_size(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "file_min_size")

    @file_min_size.setter
    def file_min_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_min_size", value)

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_name", value)

    @property
    @pulumi.getter(name="fileSeverity")
    def file_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_severity")

    @file_severity.setter
    def file_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_severity", value)

    @property
    @pulumi.getter(name="historySeverity")
    def history_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "history_severity")

    @history_severity.setter
    def history_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "history_severity", value)

    @property
    @pulumi.getter(name="historySize")
    def history_size(self) -> Optional[pulumi.Input[int]]:
        """
        Set history table size - Range: `0`-`65535`
        """
        return pulumi.get(self, "history_size")

    @history_size.setter
    def history_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "history_size", value)

    @property
    @pulumi.getter(name="ipv4Hosts")
    def ipv4_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostArgs']]]]:
        return pulumi.get(self, "ipv4_hosts")

    @ipv4_hosts.setter
    def ipv4_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostArgs']]]]):
        pulumi.set(self, "ipv4_hosts", value)

    @property
    @pulumi.getter(name="ipv4VrfHosts")
    def ipv4_vrf_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4VrfHostArgs']]]]:
        return pulumi.get(self, "ipv4_vrf_hosts")

    @ipv4_vrf_hosts.setter
    def ipv4_vrf_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4VrfHostArgs']]]]):
        pulumi.set(self, "ipv4_vrf_hosts", value)

    @property
    @pulumi.getter(name="ipv6Hosts")
    def ipv6_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv6HostArgs']]]]:
        return pulumi.get(self, "ipv6_hosts")

    @ipv6_hosts.setter
    def ipv6_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv6HostArgs']]]]):
        pulumi.set(self, "ipv6_hosts", value)

    @property
    @pulumi.getter(name="ipv6VrfHosts")
    def ipv6_vrf_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv6VrfHostArgs']]]]:
        return pulumi.get(self, "ipv6_vrf_hosts")

    @ipv6_vrf_hosts.setter
    def ipv6_vrf_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv6VrfHostArgs']]]]):
        pulumi.set(self, "ipv6_vrf_hosts", value)

    @property
    @pulumi.getter(name="monitorSeverity")
    def monitor_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "monitor_severity")

    @monitor_severity.setter
    def monitor_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_severity", value)

    @property
    @pulumi.getter(name="originIdName")
    def origin_id_name(self) -> Optional[pulumi.Input[str]]:
        """
        Define a unique text string as ID
        """
        return pulumi.get(self, "origin_id_name")

    @origin_id_name.setter
    def origin_id_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin_id_name", value)

    @property
    @pulumi.getter(name="originIdType")
    def origin_id_type(self) -> Optional[pulumi.Input[str]]:
        """
        Use origin hostname/ip/ipv6 as ID - Choices: `hostname`, `ip`, `ipv6`
        """
        return pulumi.get(self, "origin_id_type")

    @origin_id_type.setter
    def origin_id_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin_id_type", value)

    @property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_interface")

    @source_interface.setter
    def source_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_interface", value)

    @property
    @pulumi.getter(name="sourceInterfacesVrves")
    def source_interfaces_vrves(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoggingSourceInterfacesVrfArgs']]]]:
        """
        Specify interface and vrf for source address in logging transactions
        """
        return pulumi.get(self, "source_interfaces_vrves")

    @source_interfaces_vrves.setter
    def source_interfaces_vrves(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingSourceInterfacesVrfArgs']]]]):
        pulumi.set(self, "source_interfaces_vrves", value)

    @property
    @pulumi.getter
    def trap(self) -> Optional[pulumi.Input[bool]]:
        """
        Set trap server logging level
        """
        return pulumi.get(self, "trap")

    @trap.setter
    def trap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trap", value)

    @property
    @pulumi.getter(name="trapSeverity")
    def trap_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trap_severity")

    @trap_severity.setter
    def trap_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_severity", value)


@pulumi.input_type
class _LoggingState:
    def __init__(__self__, *,
                 buffered_severity: Optional[pulumi.Input[str]] = None,
                 buffered_size: Optional[pulumi.Input[int]] = None,
                 console_severity: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 facility: Optional[pulumi.Input[str]] = None,
                 file_max_size: Optional[pulumi.Input[int]] = None,
                 file_min_size: Optional[pulumi.Input[int]] = None,
                 file_name: Optional[pulumi.Input[str]] = None,
                 file_severity: Optional[pulumi.Input[str]] = None,
                 history_severity: Optional[pulumi.Input[str]] = None,
                 history_size: Optional[pulumi.Input[int]] = None,
                 ipv4_hosts: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostArgs']]]] = None,
                 ipv4_vrf_hosts: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4VrfHostArgs']]]] = None,
                 ipv6_hosts: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv6HostArgs']]]] = None,
                 ipv6_vrf_hosts: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv6VrfHostArgs']]]] = None,
                 monitor_severity: Optional[pulumi.Input[str]] = None,
                 origin_id_name: Optional[pulumi.Input[str]] = None,
                 origin_id_type: Optional[pulumi.Input[str]] = None,
                 source_interface: Optional[pulumi.Input[str]] = None,
                 source_interfaces_vrves: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingSourceInterfacesVrfArgs']]]] = None,
                 trap: Optional[pulumi.Input[bool]] = None,
                 trap_severity: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Logging resources.
        :param pulumi.Input[str] buffered_severity: Logging severity level
        :param pulumi.Input[int] buffered_size: Logging buffer size - Range: `4096`-`2147483647`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] facility: Facility parameter for syslog messages - Choices: `auth`, `cron`, `daemon`, `kern`, `local0`, `local1`, `local2`,
               `local3`, `local4`, `local5`, `local6`, `local7`, `lpr`, `mail`, `news`, `sys10`, `sys11`, `sys12`, `sys13`, `sys14`,
               `sys9`, `syslog`, `user`, `uucp`
        :param pulumi.Input[int] file_max_size: - Range: `0`-`4294967295`
        :param pulumi.Input[int] file_min_size: - Range: `0`-`4294967295`
        :param pulumi.Input[int] history_size: Set history table size - Range: `0`-`65535`
        :param pulumi.Input[str] origin_id_name: Define a unique text string as ID
        :param pulumi.Input[str] origin_id_type: Use origin hostname/ip/ipv6 as ID - Choices: `hostname`, `ip`, `ipv6`
        :param pulumi.Input[Sequence[pulumi.Input['LoggingSourceInterfacesVrfArgs']]] source_interfaces_vrves: Specify interface and vrf for source address in logging transactions
        :param pulumi.Input[bool] trap: Set trap server logging level
        """
        if buffered_severity is not None:
            pulumi.set(__self__, "buffered_severity", buffered_severity)
        if buffered_size is not None:
            pulumi.set(__self__, "buffered_size", buffered_size)
        if console_severity is not None:
            pulumi.set(__self__, "console_severity", console_severity)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if facility is not None:
            pulumi.set(__self__, "facility", facility)
        if file_max_size is not None:
            pulumi.set(__self__, "file_max_size", file_max_size)
        if file_min_size is not None:
            pulumi.set(__self__, "file_min_size", file_min_size)
        if file_name is not None:
            pulumi.set(__self__, "file_name", file_name)
        if file_severity is not None:
            pulumi.set(__self__, "file_severity", file_severity)
        if history_severity is not None:
            pulumi.set(__self__, "history_severity", history_severity)
        if history_size is not None:
            pulumi.set(__self__, "history_size", history_size)
        if ipv4_hosts is not None:
            pulumi.set(__self__, "ipv4_hosts", ipv4_hosts)
        if ipv4_vrf_hosts is not None:
            pulumi.set(__self__, "ipv4_vrf_hosts", ipv4_vrf_hosts)
        if ipv6_hosts is not None:
            pulumi.set(__self__, "ipv6_hosts", ipv6_hosts)
        if ipv6_vrf_hosts is not None:
            pulumi.set(__self__, "ipv6_vrf_hosts", ipv6_vrf_hosts)
        if monitor_severity is not None:
            pulumi.set(__self__, "monitor_severity", monitor_severity)
        if origin_id_name is not None:
            pulumi.set(__self__, "origin_id_name", origin_id_name)
        if origin_id_type is not None:
            pulumi.set(__self__, "origin_id_type", origin_id_type)
        if source_interface is not None:
            pulumi.set(__self__, "source_interface", source_interface)
        if source_interfaces_vrves is not None:
            pulumi.set(__self__, "source_interfaces_vrves", source_interfaces_vrves)
        if trap is not None:
            pulumi.set(__self__, "trap", trap)
        if trap_severity is not None:
            pulumi.set(__self__, "trap_severity", trap_severity)

    @property
    @pulumi.getter(name="bufferedSeverity")
    def buffered_severity(self) -> Optional[pulumi.Input[str]]:
        """
        Logging severity level
        """
        return pulumi.get(self, "buffered_severity")

    @buffered_severity.setter
    def buffered_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "buffered_severity", value)

    @property
    @pulumi.getter(name="bufferedSize")
    def buffered_size(self) -> Optional[pulumi.Input[int]]:
        """
        Logging buffer size - Range: `4096`-`2147483647`
        """
        return pulumi.get(self, "buffered_size")

    @buffered_size.setter
    def buffered_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "buffered_size", value)

    @property
    @pulumi.getter(name="consoleSeverity")
    def console_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "console_severity")

    @console_severity.setter
    def console_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "console_severity", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def facility(self) -> Optional[pulumi.Input[str]]:
        """
        Facility parameter for syslog messages - Choices: `auth`, `cron`, `daemon`, `kern`, `local0`, `local1`, `local2`,
        `local3`, `local4`, `local5`, `local6`, `local7`, `lpr`, `mail`, `news`, `sys10`, `sys11`, `sys12`, `sys13`, `sys14`,
        `sys9`, `syslog`, `user`, `uucp`
        """
        return pulumi.get(self, "facility")

    @facility.setter
    def facility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facility", value)

    @property
    @pulumi.getter(name="fileMaxSize")
    def file_max_size(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "file_max_size")

    @file_max_size.setter
    def file_max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_max_size", value)

    @property
    @pulumi.getter(name="fileMinSize")
    def file_min_size(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "file_min_size")

    @file_min_size.setter
    def file_min_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_min_size", value)

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_name")

    @file_name.setter
    def file_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_name", value)

    @property
    @pulumi.getter(name="fileSeverity")
    def file_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_severity")

    @file_severity.setter
    def file_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_severity", value)

    @property
    @pulumi.getter(name="historySeverity")
    def history_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "history_severity")

    @history_severity.setter
    def history_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "history_severity", value)

    @property
    @pulumi.getter(name="historySize")
    def history_size(self) -> Optional[pulumi.Input[int]]:
        """
        Set history table size - Range: `0`-`65535`
        """
        return pulumi.get(self, "history_size")

    @history_size.setter
    def history_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "history_size", value)

    @property
    @pulumi.getter(name="ipv4Hosts")
    def ipv4_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostArgs']]]]:
        return pulumi.get(self, "ipv4_hosts")

    @ipv4_hosts.setter
    def ipv4_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostArgs']]]]):
        pulumi.set(self, "ipv4_hosts", value)

    @property
    @pulumi.getter(name="ipv4VrfHosts")
    def ipv4_vrf_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4VrfHostArgs']]]]:
        return pulumi.get(self, "ipv4_vrf_hosts")

    @ipv4_vrf_hosts.setter
    def ipv4_vrf_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4VrfHostArgs']]]]):
        pulumi.set(self, "ipv4_vrf_hosts", value)

    @property
    @pulumi.getter(name="ipv6Hosts")
    def ipv6_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv6HostArgs']]]]:
        return pulumi.get(self, "ipv6_hosts")

    @ipv6_hosts.setter
    def ipv6_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv6HostArgs']]]]):
        pulumi.set(self, "ipv6_hosts", value)

    @property
    @pulumi.getter(name="ipv6VrfHosts")
    def ipv6_vrf_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv6VrfHostArgs']]]]:
        return pulumi.get(self, "ipv6_vrf_hosts")

    @ipv6_vrf_hosts.setter
    def ipv6_vrf_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv6VrfHostArgs']]]]):
        pulumi.set(self, "ipv6_vrf_hosts", value)

    @property
    @pulumi.getter(name="monitorSeverity")
    def monitor_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "monitor_severity")

    @monitor_severity.setter
    def monitor_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_severity", value)

    @property
    @pulumi.getter(name="originIdName")
    def origin_id_name(self) -> Optional[pulumi.Input[str]]:
        """
        Define a unique text string as ID
        """
        return pulumi.get(self, "origin_id_name")

    @origin_id_name.setter
    def origin_id_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin_id_name", value)

    @property
    @pulumi.getter(name="originIdType")
    def origin_id_type(self) -> Optional[pulumi.Input[str]]:
        """
        Use origin hostname/ip/ipv6 as ID - Choices: `hostname`, `ip`, `ipv6`
        """
        return pulumi.get(self, "origin_id_type")

    @origin_id_type.setter
    def origin_id_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin_id_type", value)

    @property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_interface")

    @source_interface.setter
    def source_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_interface", value)

    @property
    @pulumi.getter(name="sourceInterfacesVrves")
    def source_interfaces_vrves(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoggingSourceInterfacesVrfArgs']]]]:
        """
        Specify interface and vrf for source address in logging transactions
        """
        return pulumi.get(self, "source_interfaces_vrves")

    @source_interfaces_vrves.setter
    def source_interfaces_vrves(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingSourceInterfacesVrfArgs']]]]):
        pulumi.set(self, "source_interfaces_vrves", value)

    @property
    @pulumi.getter
    def trap(self) -> Optional[pulumi.Input[bool]]:
        """
        Set trap server logging level
        """
        return pulumi.get(self, "trap")

    @trap.setter
    def trap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trap", value)

    @property
    @pulumi.getter(name="trapSeverity")
    def trap_severity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trap_severity")

    @trap_severity.setter
    def trap_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_severity", value)


class Logging(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 buffered_severity: Optional[pulumi.Input[str]] = None,
                 buffered_size: Optional[pulumi.Input[int]] = None,
                 console_severity: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 facility: Optional[pulumi.Input[str]] = None,
                 file_max_size: Optional[pulumi.Input[int]] = None,
                 file_min_size: Optional[pulumi.Input[int]] = None,
                 file_name: Optional[pulumi.Input[str]] = None,
                 file_severity: Optional[pulumi.Input[str]] = None,
                 history_severity: Optional[pulumi.Input[str]] = None,
                 history_size: Optional[pulumi.Input[int]] = None,
                 ipv4_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingIpv4HostArgs']]]]] = None,
                 ipv4_vrf_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingIpv4VrfHostArgs']]]]] = None,
                 ipv6_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingIpv6HostArgs']]]]] = None,
                 ipv6_vrf_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingIpv6VrfHostArgs']]]]] = None,
                 monitor_severity: Optional[pulumi.Input[str]] = None,
                 origin_id_name: Optional[pulumi.Input[str]] = None,
                 origin_id_type: Optional[pulumi.Input[str]] = None,
                 source_interface: Optional[pulumi.Input[str]] = None,
                 source_interfaces_vrves: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingSourceInterfacesVrfArgs']]]]] = None,
                 trap: Optional[pulumi.Input[bool]] = None,
                 trap_severity: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource can manage the Logging configuration.

        ## Import

        ```sh
         $ pulumi import iosxe:iosxe/logging:Logging example "Cisco-IOS-XE-native:native/logging"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] buffered_severity: Logging severity level
        :param pulumi.Input[int] buffered_size: Logging buffer size - Range: `4096`-`2147483647`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] facility: Facility parameter for syslog messages - Choices: `auth`, `cron`, `daemon`, `kern`, `local0`, `local1`, `local2`,
               `local3`, `local4`, `local5`, `local6`, `local7`, `lpr`, `mail`, `news`, `sys10`, `sys11`, `sys12`, `sys13`, `sys14`,
               `sys9`, `syslog`, `user`, `uucp`
        :param pulumi.Input[int] file_max_size: - Range: `0`-`4294967295`
        :param pulumi.Input[int] file_min_size: - Range: `0`-`4294967295`
        :param pulumi.Input[int] history_size: Set history table size - Range: `0`-`65535`
        :param pulumi.Input[str] origin_id_name: Define a unique text string as ID
        :param pulumi.Input[str] origin_id_type: Use origin hostname/ip/ipv6 as ID - Choices: `hostname`, `ip`, `ipv6`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingSourceInterfacesVrfArgs']]]] source_interfaces_vrves: Specify interface and vrf for source address in logging transactions
        :param pulumi.Input[bool] trap: Set trap server logging level
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[LoggingArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the Logging configuration.

        ## Import

        ```sh
         $ pulumi import iosxe:iosxe/logging:Logging example "Cisco-IOS-XE-native:native/logging"
        ```

        :param str resource_name: The name of the resource.
        :param LoggingArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LoggingArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 buffered_severity: Optional[pulumi.Input[str]] = None,
                 buffered_size: Optional[pulumi.Input[int]] = None,
                 console_severity: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 facility: Optional[pulumi.Input[str]] = None,
                 file_max_size: Optional[pulumi.Input[int]] = None,
                 file_min_size: Optional[pulumi.Input[int]] = None,
                 file_name: Optional[pulumi.Input[str]] = None,
                 file_severity: Optional[pulumi.Input[str]] = None,
                 history_severity: Optional[pulumi.Input[str]] = None,
                 history_size: Optional[pulumi.Input[int]] = None,
                 ipv4_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingIpv4HostArgs']]]]] = None,
                 ipv4_vrf_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingIpv4VrfHostArgs']]]]] = None,
                 ipv6_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingIpv6HostArgs']]]]] = None,
                 ipv6_vrf_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingIpv6VrfHostArgs']]]]] = None,
                 monitor_severity: Optional[pulumi.Input[str]] = None,
                 origin_id_name: Optional[pulumi.Input[str]] = None,
                 origin_id_type: Optional[pulumi.Input[str]] = None,
                 source_interface: Optional[pulumi.Input[str]] = None,
                 source_interfaces_vrves: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingSourceInterfacesVrfArgs']]]]] = None,
                 trap: Optional[pulumi.Input[bool]] = None,
                 trap_severity: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LoggingArgs.__new__(LoggingArgs)

            __props__.__dict__["buffered_severity"] = buffered_severity
            __props__.__dict__["buffered_size"] = buffered_size
            __props__.__dict__["console_severity"] = console_severity
            __props__.__dict__["device"] = device
            __props__.__dict__["facility"] = facility
            __props__.__dict__["file_max_size"] = file_max_size
            __props__.__dict__["file_min_size"] = file_min_size
            __props__.__dict__["file_name"] = file_name
            __props__.__dict__["file_severity"] = file_severity
            __props__.__dict__["history_severity"] = history_severity
            __props__.__dict__["history_size"] = history_size
            __props__.__dict__["ipv4_hosts"] = ipv4_hosts
            __props__.__dict__["ipv4_vrf_hosts"] = ipv4_vrf_hosts
            __props__.__dict__["ipv6_hosts"] = ipv6_hosts
            __props__.__dict__["ipv6_vrf_hosts"] = ipv6_vrf_hosts
            __props__.__dict__["monitor_severity"] = monitor_severity
            __props__.__dict__["origin_id_name"] = origin_id_name
            __props__.__dict__["origin_id_type"] = origin_id_type
            __props__.__dict__["source_interface"] = source_interface
            __props__.__dict__["source_interfaces_vrves"] = source_interfaces_vrves
            __props__.__dict__["trap"] = trap
            __props__.__dict__["trap_severity"] = trap_severity
        super(Logging, __self__).__init__(
            'iosxe:iosxe/logging:Logging',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            buffered_severity: Optional[pulumi.Input[str]] = None,
            buffered_size: Optional[pulumi.Input[int]] = None,
            console_severity: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            facility: Optional[pulumi.Input[str]] = None,
            file_max_size: Optional[pulumi.Input[int]] = None,
            file_min_size: Optional[pulumi.Input[int]] = None,
            file_name: Optional[pulumi.Input[str]] = None,
            file_severity: Optional[pulumi.Input[str]] = None,
            history_severity: Optional[pulumi.Input[str]] = None,
            history_size: Optional[pulumi.Input[int]] = None,
            ipv4_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingIpv4HostArgs']]]]] = None,
            ipv4_vrf_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingIpv4VrfHostArgs']]]]] = None,
            ipv6_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingIpv6HostArgs']]]]] = None,
            ipv6_vrf_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingIpv6VrfHostArgs']]]]] = None,
            monitor_severity: Optional[pulumi.Input[str]] = None,
            origin_id_name: Optional[pulumi.Input[str]] = None,
            origin_id_type: Optional[pulumi.Input[str]] = None,
            source_interface: Optional[pulumi.Input[str]] = None,
            source_interfaces_vrves: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingSourceInterfacesVrfArgs']]]]] = None,
            trap: Optional[pulumi.Input[bool]] = None,
            trap_severity: Optional[pulumi.Input[str]] = None) -> 'Logging':
        """
        Get an existing Logging resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] buffered_severity: Logging severity level
        :param pulumi.Input[int] buffered_size: Logging buffer size - Range: `4096`-`2147483647`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] facility: Facility parameter for syslog messages - Choices: `auth`, `cron`, `daemon`, `kern`, `local0`, `local1`, `local2`,
               `local3`, `local4`, `local5`, `local6`, `local7`, `lpr`, `mail`, `news`, `sys10`, `sys11`, `sys12`, `sys13`, `sys14`,
               `sys9`, `syslog`, `user`, `uucp`
        :param pulumi.Input[int] file_max_size: - Range: `0`-`4294967295`
        :param pulumi.Input[int] file_min_size: - Range: `0`-`4294967295`
        :param pulumi.Input[int] history_size: Set history table size - Range: `0`-`65535`
        :param pulumi.Input[str] origin_id_name: Define a unique text string as ID
        :param pulumi.Input[str] origin_id_type: Use origin hostname/ip/ipv6 as ID - Choices: `hostname`, `ip`, `ipv6`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingSourceInterfacesVrfArgs']]]] source_interfaces_vrves: Specify interface and vrf for source address in logging transactions
        :param pulumi.Input[bool] trap: Set trap server logging level
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LoggingState.__new__(_LoggingState)

        __props__.__dict__["buffered_severity"] = buffered_severity
        __props__.__dict__["buffered_size"] = buffered_size
        __props__.__dict__["console_severity"] = console_severity
        __props__.__dict__["device"] = device
        __props__.__dict__["facility"] = facility
        __props__.__dict__["file_max_size"] = file_max_size
        __props__.__dict__["file_min_size"] = file_min_size
        __props__.__dict__["file_name"] = file_name
        __props__.__dict__["file_severity"] = file_severity
        __props__.__dict__["history_severity"] = history_severity
        __props__.__dict__["history_size"] = history_size
        __props__.__dict__["ipv4_hosts"] = ipv4_hosts
        __props__.__dict__["ipv4_vrf_hosts"] = ipv4_vrf_hosts
        __props__.__dict__["ipv6_hosts"] = ipv6_hosts
        __props__.__dict__["ipv6_vrf_hosts"] = ipv6_vrf_hosts
        __props__.__dict__["monitor_severity"] = monitor_severity
        __props__.__dict__["origin_id_name"] = origin_id_name
        __props__.__dict__["origin_id_type"] = origin_id_type
        __props__.__dict__["source_interface"] = source_interface
        __props__.__dict__["source_interfaces_vrves"] = source_interfaces_vrves
        __props__.__dict__["trap"] = trap
        __props__.__dict__["trap_severity"] = trap_severity
        return Logging(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bufferedSeverity")
    def buffered_severity(self) -> pulumi.Output[Optional[str]]:
        """
        Logging severity level
        """
        return pulumi.get(self, "buffered_severity")

    @property
    @pulumi.getter(name="bufferedSize")
    def buffered_size(self) -> pulumi.Output[Optional[int]]:
        """
        Logging buffer size - Range: `4096`-`2147483647`
        """
        return pulumi.get(self, "buffered_size")

    @property
    @pulumi.getter(name="consoleSeverity")
    def console_severity(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "console_severity")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def facility(self) -> pulumi.Output[Optional[str]]:
        """
        Facility parameter for syslog messages - Choices: `auth`, `cron`, `daemon`, `kern`, `local0`, `local1`, `local2`,
        `local3`, `local4`, `local5`, `local6`, `local7`, `lpr`, `mail`, `news`, `sys10`, `sys11`, `sys12`, `sys13`, `sys14`,
        `sys9`, `syslog`, `user`, `uucp`
        """
        return pulumi.get(self, "facility")

    @property
    @pulumi.getter(name="fileMaxSize")
    def file_max_size(self) -> pulumi.Output[Optional[int]]:
        """
        - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "file_max_size")

    @property
    @pulumi.getter(name="fileMinSize")
    def file_min_size(self) -> pulumi.Output[Optional[int]]:
        """
        - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "file_min_size")

    @property
    @pulumi.getter(name="fileName")
    def file_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "file_name")

    @property
    @pulumi.getter(name="fileSeverity")
    def file_severity(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "file_severity")

    @property
    @pulumi.getter(name="historySeverity")
    def history_severity(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "history_severity")

    @property
    @pulumi.getter(name="historySize")
    def history_size(self) -> pulumi.Output[Optional[int]]:
        """
        Set history table size - Range: `0`-`65535`
        """
        return pulumi.get(self, "history_size")

    @property
    @pulumi.getter(name="ipv4Hosts")
    def ipv4_hosts(self) -> pulumi.Output[Optional[Sequence['outputs.LoggingIpv4Host']]]:
        return pulumi.get(self, "ipv4_hosts")

    @property
    @pulumi.getter(name="ipv4VrfHosts")
    def ipv4_vrf_hosts(self) -> pulumi.Output[Optional[Sequence['outputs.LoggingIpv4VrfHost']]]:
        return pulumi.get(self, "ipv4_vrf_hosts")

    @property
    @pulumi.getter(name="ipv6Hosts")
    def ipv6_hosts(self) -> pulumi.Output[Optional[Sequence['outputs.LoggingIpv6Host']]]:
        return pulumi.get(self, "ipv6_hosts")

    @property
    @pulumi.getter(name="ipv6VrfHosts")
    def ipv6_vrf_hosts(self) -> pulumi.Output[Optional[Sequence['outputs.LoggingIpv6VrfHost']]]:
        return pulumi.get(self, "ipv6_vrf_hosts")

    @property
    @pulumi.getter(name="monitorSeverity")
    def monitor_severity(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "monitor_severity")

    @property
    @pulumi.getter(name="originIdName")
    def origin_id_name(self) -> pulumi.Output[Optional[str]]:
        """
        Define a unique text string as ID
        """
        return pulumi.get(self, "origin_id_name")

    @property
    @pulumi.getter(name="originIdType")
    def origin_id_type(self) -> pulumi.Output[Optional[str]]:
        """
        Use origin hostname/ip/ipv6 as ID - Choices: `hostname`, `ip`, `ipv6`
        """
        return pulumi.get(self, "origin_id_type")

    @property
    @pulumi.getter(name="sourceInterface")
    def source_interface(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "source_interface")

    @property
    @pulumi.getter(name="sourceInterfacesVrves")
    def source_interfaces_vrves(self) -> pulumi.Output[Optional[Sequence['outputs.LoggingSourceInterfacesVrf']]]:
        """
        Specify interface and vrf for source address in logging transactions
        """
        return pulumi.get(self, "source_interfaces_vrves")

    @property
    @pulumi.getter
    def trap(self) -> pulumi.Output[Optional[bool]]:
        """
        Set trap server logging level
        """
        return pulumi.get(self, "trap")

    @property
    @pulumi.getter(name="trapSeverity")
    def trap_severity(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "trap_severity")

