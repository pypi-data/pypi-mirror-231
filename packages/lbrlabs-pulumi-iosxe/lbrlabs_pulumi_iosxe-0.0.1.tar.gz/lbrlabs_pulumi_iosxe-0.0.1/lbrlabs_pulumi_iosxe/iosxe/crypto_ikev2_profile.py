# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CryptoIkev2ProfileArgs', 'CryptoIkev2Profile']

@pulumi.input_type
class CryptoIkev2ProfileArgs:
    def __init__(__self__, *,
                 authentication_local_pre_share: Optional[pulumi.Input[bool]] = None,
                 authentication_remote_pre_share: Optional[pulumi.Input[bool]] = None,
                 config_exchange_request: Optional[pulumi.Input[bool]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 dpd_interval: Optional[pulumi.Input[int]] = None,
                 dpd_query: Optional[pulumi.Input[str]] = None,
                 dpd_retry: Optional[pulumi.Input[int]] = None,
                 identity_local_address: Optional[pulumi.Input[str]] = None,
                 identity_local_key_id: Optional[pulumi.Input[str]] = None,
                 keyring_local: Optional[pulumi.Input[str]] = None,
                 match_address_local_ip: Optional[pulumi.Input[str]] = None,
                 match_fvrf: Optional[pulumi.Input[str]] = None,
                 match_fvrf_any: Optional[pulumi.Input[bool]] = None,
                 match_identity_remote_ipv4_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs']]]] = None,
                 match_identity_remote_ipv6_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match_identity_remote_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match_inbound_only: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CryptoIkev2Profile resource.
        :param pulumi.Input[bool] authentication_local_pre_share: Pre-Shared Key
        :param pulumi.Input[bool] authentication_remote_pre_share: Pre-Shared Key
        :param pulumi.Input[bool] config_exchange_request: enable config-exchange request
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] description: Specify a description of this profile
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] dpd_interval: - Range: `10`-`3600`
        :param pulumi.Input[str] dpd_query: - Choices: `on-demand`, `periodic`
        :param pulumi.Input[int] dpd_retry: - Range: `2`-`60`
        :param pulumi.Input[str] identity_local_address: address
        :param pulumi.Input[str] identity_local_key_id: key-id opaque string - proprietary types of identification key-id string
        :param pulumi.Input[str] keyring_local: Keyring name
        :param pulumi.Input[bool] match_fvrf_any: Any fvrf
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_identity_remote_keys: key-id opaque string
        :param pulumi.Input[bool] match_inbound_only: Match the profile for incoming connections only
        """
        if authentication_local_pre_share is not None:
            pulumi.set(__self__, "authentication_local_pre_share", authentication_local_pre_share)
        if authentication_remote_pre_share is not None:
            pulumi.set(__self__, "authentication_remote_pre_share", authentication_remote_pre_share)
        if config_exchange_request is not None:
            pulumi.set(__self__, "config_exchange_request", config_exchange_request)
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if dpd_interval is not None:
            pulumi.set(__self__, "dpd_interval", dpd_interval)
        if dpd_query is not None:
            pulumi.set(__self__, "dpd_query", dpd_query)
        if dpd_retry is not None:
            pulumi.set(__self__, "dpd_retry", dpd_retry)
        if identity_local_address is not None:
            pulumi.set(__self__, "identity_local_address", identity_local_address)
        if identity_local_key_id is not None:
            pulumi.set(__self__, "identity_local_key_id", identity_local_key_id)
        if keyring_local is not None:
            pulumi.set(__self__, "keyring_local", keyring_local)
        if match_address_local_ip is not None:
            pulumi.set(__self__, "match_address_local_ip", match_address_local_ip)
        if match_fvrf is not None:
            pulumi.set(__self__, "match_fvrf", match_fvrf)
        if match_fvrf_any is not None:
            pulumi.set(__self__, "match_fvrf_any", match_fvrf_any)
        if match_identity_remote_ipv4_addresses is not None:
            pulumi.set(__self__, "match_identity_remote_ipv4_addresses", match_identity_remote_ipv4_addresses)
        if match_identity_remote_ipv6_prefixes is not None:
            pulumi.set(__self__, "match_identity_remote_ipv6_prefixes", match_identity_remote_ipv6_prefixes)
        if match_identity_remote_keys is not None:
            pulumi.set(__self__, "match_identity_remote_keys", match_identity_remote_keys)
        if match_inbound_only is not None:
            pulumi.set(__self__, "match_inbound_only", match_inbound_only)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="authenticationLocalPreShare")
    def authentication_local_pre_share(self) -> Optional[pulumi.Input[bool]]:
        """
        Pre-Shared Key
        """
        return pulumi.get(self, "authentication_local_pre_share")

    @authentication_local_pre_share.setter
    def authentication_local_pre_share(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authentication_local_pre_share", value)

    @property
    @pulumi.getter(name="authenticationRemotePreShare")
    def authentication_remote_pre_share(self) -> Optional[pulumi.Input[bool]]:
        """
        Pre-Shared Key
        """
        return pulumi.get(self, "authentication_remote_pre_share")

    @authentication_remote_pre_share.setter
    def authentication_remote_pre_share(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authentication_remote_pre_share", value)

    @property
    @pulumi.getter(name="configExchangeRequest")
    def config_exchange_request(self) -> Optional[pulumi.Input[bool]]:
        """
        enable config-exchange request
        """
        return pulumi.get(self, "config_exchange_request")

    @config_exchange_request.setter
    def config_exchange_request(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "config_exchange_request", value)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a description of this profile
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="dpdInterval")
    def dpd_interval(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `10`-`3600`
        """
        return pulumi.get(self, "dpd_interval")

    @dpd_interval.setter
    def dpd_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dpd_interval", value)

    @property
    @pulumi.getter(name="dpdQuery")
    def dpd_query(self) -> Optional[pulumi.Input[str]]:
        """
        - Choices: `on-demand`, `periodic`
        """
        return pulumi.get(self, "dpd_query")

    @dpd_query.setter
    def dpd_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dpd_query", value)

    @property
    @pulumi.getter(name="dpdRetry")
    def dpd_retry(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `2`-`60`
        """
        return pulumi.get(self, "dpd_retry")

    @dpd_retry.setter
    def dpd_retry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dpd_retry", value)

    @property
    @pulumi.getter(name="identityLocalAddress")
    def identity_local_address(self) -> Optional[pulumi.Input[str]]:
        """
        address
        """
        return pulumi.get(self, "identity_local_address")

    @identity_local_address.setter
    def identity_local_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_local_address", value)

    @property
    @pulumi.getter(name="identityLocalKeyId")
    def identity_local_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        key-id opaque string - proprietary types of identification key-id string
        """
        return pulumi.get(self, "identity_local_key_id")

    @identity_local_key_id.setter
    def identity_local_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_local_key_id", value)

    @property
    @pulumi.getter(name="keyringLocal")
    def keyring_local(self) -> Optional[pulumi.Input[str]]:
        """
        Keyring name
        """
        return pulumi.get(self, "keyring_local")

    @keyring_local.setter
    def keyring_local(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyring_local", value)

    @property
    @pulumi.getter(name="matchAddressLocalIp")
    def match_address_local_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_address_local_ip")

    @match_address_local_ip.setter
    def match_address_local_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_address_local_ip", value)

    @property
    @pulumi.getter(name="matchFvrf")
    def match_fvrf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_fvrf")

    @match_fvrf.setter
    def match_fvrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_fvrf", value)

    @property
    @pulumi.getter(name="matchFvrfAny")
    def match_fvrf_any(self) -> Optional[pulumi.Input[bool]]:
        """
        Any fvrf
        """
        return pulumi.get(self, "match_fvrf_any")

    @match_fvrf_any.setter
    def match_fvrf_any(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "match_fvrf_any", value)

    @property
    @pulumi.getter(name="matchIdentityRemoteIpv4Addresses")
    def match_identity_remote_ipv4_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs']]]]:
        return pulumi.get(self, "match_identity_remote_ipv4_addresses")

    @match_identity_remote_ipv4_addresses.setter
    def match_identity_remote_ipv4_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs']]]]):
        pulumi.set(self, "match_identity_remote_ipv4_addresses", value)

    @property
    @pulumi.getter(name="matchIdentityRemoteIpv6Prefixes")
    def match_identity_remote_ipv6_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "match_identity_remote_ipv6_prefixes")

    @match_identity_remote_ipv6_prefixes.setter
    def match_identity_remote_ipv6_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "match_identity_remote_ipv6_prefixes", value)

    @property
    @pulumi.getter(name="matchIdentityRemoteKeys")
    def match_identity_remote_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        key-id opaque string
        """
        return pulumi.get(self, "match_identity_remote_keys")

    @match_identity_remote_keys.setter
    def match_identity_remote_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "match_identity_remote_keys", value)

    @property
    @pulumi.getter(name="matchInboundOnly")
    def match_inbound_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Match the profile for incoming connections only
        """
        return pulumi.get(self, "match_inbound_only")

    @match_inbound_only.setter
    def match_inbound_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "match_inbound_only", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _CryptoIkev2ProfileState:
    def __init__(__self__, *,
                 authentication_local_pre_share: Optional[pulumi.Input[bool]] = None,
                 authentication_remote_pre_share: Optional[pulumi.Input[bool]] = None,
                 config_exchange_request: Optional[pulumi.Input[bool]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 dpd_interval: Optional[pulumi.Input[int]] = None,
                 dpd_query: Optional[pulumi.Input[str]] = None,
                 dpd_retry: Optional[pulumi.Input[int]] = None,
                 identity_local_address: Optional[pulumi.Input[str]] = None,
                 identity_local_key_id: Optional[pulumi.Input[str]] = None,
                 keyring_local: Optional[pulumi.Input[str]] = None,
                 match_address_local_ip: Optional[pulumi.Input[str]] = None,
                 match_fvrf: Optional[pulumi.Input[str]] = None,
                 match_fvrf_any: Optional[pulumi.Input[bool]] = None,
                 match_identity_remote_ipv4_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs']]]] = None,
                 match_identity_remote_ipv6_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match_identity_remote_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match_inbound_only: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CryptoIkev2Profile resources.
        :param pulumi.Input[bool] authentication_local_pre_share: Pre-Shared Key
        :param pulumi.Input[bool] authentication_remote_pre_share: Pre-Shared Key
        :param pulumi.Input[bool] config_exchange_request: enable config-exchange request
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] description: Specify a description of this profile
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] dpd_interval: - Range: `10`-`3600`
        :param pulumi.Input[str] dpd_query: - Choices: `on-demand`, `periodic`
        :param pulumi.Input[int] dpd_retry: - Range: `2`-`60`
        :param pulumi.Input[str] identity_local_address: address
        :param pulumi.Input[str] identity_local_key_id: key-id opaque string - proprietary types of identification key-id string
        :param pulumi.Input[str] keyring_local: Keyring name
        :param pulumi.Input[bool] match_fvrf_any: Any fvrf
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_identity_remote_keys: key-id opaque string
        :param pulumi.Input[bool] match_inbound_only: Match the profile for incoming connections only
        """
        if authentication_local_pre_share is not None:
            pulumi.set(__self__, "authentication_local_pre_share", authentication_local_pre_share)
        if authentication_remote_pre_share is not None:
            pulumi.set(__self__, "authentication_remote_pre_share", authentication_remote_pre_share)
        if config_exchange_request is not None:
            pulumi.set(__self__, "config_exchange_request", config_exchange_request)
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if dpd_interval is not None:
            pulumi.set(__self__, "dpd_interval", dpd_interval)
        if dpd_query is not None:
            pulumi.set(__self__, "dpd_query", dpd_query)
        if dpd_retry is not None:
            pulumi.set(__self__, "dpd_retry", dpd_retry)
        if identity_local_address is not None:
            pulumi.set(__self__, "identity_local_address", identity_local_address)
        if identity_local_key_id is not None:
            pulumi.set(__self__, "identity_local_key_id", identity_local_key_id)
        if keyring_local is not None:
            pulumi.set(__self__, "keyring_local", keyring_local)
        if match_address_local_ip is not None:
            pulumi.set(__self__, "match_address_local_ip", match_address_local_ip)
        if match_fvrf is not None:
            pulumi.set(__self__, "match_fvrf", match_fvrf)
        if match_fvrf_any is not None:
            pulumi.set(__self__, "match_fvrf_any", match_fvrf_any)
        if match_identity_remote_ipv4_addresses is not None:
            pulumi.set(__self__, "match_identity_remote_ipv4_addresses", match_identity_remote_ipv4_addresses)
        if match_identity_remote_ipv6_prefixes is not None:
            pulumi.set(__self__, "match_identity_remote_ipv6_prefixes", match_identity_remote_ipv6_prefixes)
        if match_identity_remote_keys is not None:
            pulumi.set(__self__, "match_identity_remote_keys", match_identity_remote_keys)
        if match_inbound_only is not None:
            pulumi.set(__self__, "match_inbound_only", match_inbound_only)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="authenticationLocalPreShare")
    def authentication_local_pre_share(self) -> Optional[pulumi.Input[bool]]:
        """
        Pre-Shared Key
        """
        return pulumi.get(self, "authentication_local_pre_share")

    @authentication_local_pre_share.setter
    def authentication_local_pre_share(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authentication_local_pre_share", value)

    @property
    @pulumi.getter(name="authenticationRemotePreShare")
    def authentication_remote_pre_share(self) -> Optional[pulumi.Input[bool]]:
        """
        Pre-Shared Key
        """
        return pulumi.get(self, "authentication_remote_pre_share")

    @authentication_remote_pre_share.setter
    def authentication_remote_pre_share(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authentication_remote_pre_share", value)

    @property
    @pulumi.getter(name="configExchangeRequest")
    def config_exchange_request(self) -> Optional[pulumi.Input[bool]]:
        """
        enable config-exchange request
        """
        return pulumi.get(self, "config_exchange_request")

    @config_exchange_request.setter
    def config_exchange_request(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "config_exchange_request", value)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a description of this profile
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="dpdInterval")
    def dpd_interval(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `10`-`3600`
        """
        return pulumi.get(self, "dpd_interval")

    @dpd_interval.setter
    def dpd_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dpd_interval", value)

    @property
    @pulumi.getter(name="dpdQuery")
    def dpd_query(self) -> Optional[pulumi.Input[str]]:
        """
        - Choices: `on-demand`, `periodic`
        """
        return pulumi.get(self, "dpd_query")

    @dpd_query.setter
    def dpd_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dpd_query", value)

    @property
    @pulumi.getter(name="dpdRetry")
    def dpd_retry(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `2`-`60`
        """
        return pulumi.get(self, "dpd_retry")

    @dpd_retry.setter
    def dpd_retry(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dpd_retry", value)

    @property
    @pulumi.getter(name="identityLocalAddress")
    def identity_local_address(self) -> Optional[pulumi.Input[str]]:
        """
        address
        """
        return pulumi.get(self, "identity_local_address")

    @identity_local_address.setter
    def identity_local_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_local_address", value)

    @property
    @pulumi.getter(name="identityLocalKeyId")
    def identity_local_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        key-id opaque string - proprietary types of identification key-id string
        """
        return pulumi.get(self, "identity_local_key_id")

    @identity_local_key_id.setter
    def identity_local_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_local_key_id", value)

    @property
    @pulumi.getter(name="keyringLocal")
    def keyring_local(self) -> Optional[pulumi.Input[str]]:
        """
        Keyring name
        """
        return pulumi.get(self, "keyring_local")

    @keyring_local.setter
    def keyring_local(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keyring_local", value)

    @property
    @pulumi.getter(name="matchAddressLocalIp")
    def match_address_local_ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_address_local_ip")

    @match_address_local_ip.setter
    def match_address_local_ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_address_local_ip", value)

    @property
    @pulumi.getter(name="matchFvrf")
    def match_fvrf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_fvrf")

    @match_fvrf.setter
    def match_fvrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_fvrf", value)

    @property
    @pulumi.getter(name="matchFvrfAny")
    def match_fvrf_any(self) -> Optional[pulumi.Input[bool]]:
        """
        Any fvrf
        """
        return pulumi.get(self, "match_fvrf_any")

    @match_fvrf_any.setter
    def match_fvrf_any(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "match_fvrf_any", value)

    @property
    @pulumi.getter(name="matchIdentityRemoteIpv4Addresses")
    def match_identity_remote_ipv4_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs']]]]:
        return pulumi.get(self, "match_identity_remote_ipv4_addresses")

    @match_identity_remote_ipv4_addresses.setter
    def match_identity_remote_ipv4_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs']]]]):
        pulumi.set(self, "match_identity_remote_ipv4_addresses", value)

    @property
    @pulumi.getter(name="matchIdentityRemoteIpv6Prefixes")
    def match_identity_remote_ipv6_prefixes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "match_identity_remote_ipv6_prefixes")

    @match_identity_remote_ipv6_prefixes.setter
    def match_identity_remote_ipv6_prefixes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "match_identity_remote_ipv6_prefixes", value)

    @property
    @pulumi.getter(name="matchIdentityRemoteKeys")
    def match_identity_remote_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        key-id opaque string
        """
        return pulumi.get(self, "match_identity_remote_keys")

    @match_identity_remote_keys.setter
    def match_identity_remote_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "match_identity_remote_keys", value)

    @property
    @pulumi.getter(name="matchInboundOnly")
    def match_inbound_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Match the profile for incoming connections only
        """
        return pulumi.get(self, "match_inbound_only")

    @match_inbound_only.setter
    def match_inbound_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "match_inbound_only", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class CryptoIkev2Profile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication_local_pre_share: Optional[pulumi.Input[bool]] = None,
                 authentication_remote_pre_share: Optional[pulumi.Input[bool]] = None,
                 config_exchange_request: Optional[pulumi.Input[bool]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 dpd_interval: Optional[pulumi.Input[int]] = None,
                 dpd_query: Optional[pulumi.Input[str]] = None,
                 dpd_retry: Optional[pulumi.Input[int]] = None,
                 identity_local_address: Optional[pulumi.Input[str]] = None,
                 identity_local_key_id: Optional[pulumi.Input[str]] = None,
                 keyring_local: Optional[pulumi.Input[str]] = None,
                 match_address_local_ip: Optional[pulumi.Input[str]] = None,
                 match_fvrf: Optional[pulumi.Input[str]] = None,
                 match_fvrf_any: Optional[pulumi.Input[bool]] = None,
                 match_identity_remote_ipv4_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs']]]]] = None,
                 match_identity_remote_ipv6_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match_identity_remote_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match_inbound_only: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource can manage the Crypto IKEv2 Profile configuration.

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_iosxe as iosxe

        example = iosxe.iosxe.CryptoIkev2Profile("example",
            authentication_local_pre_share=True,
            authentication_remote_pre_share=True,
            config_exchange_request=False,
            description="My description",
            dpd_interval=10,
            dpd_query="periodic",
            dpd_retry=2,
            identity_local_key_id="key1",
            keyring_local="test",
            match_address_local_ip="1.2.3.4",
            match_fvrf_any=True,
            match_identity_remote_ipv4_addresses=[iosxe.iosxe.CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs(
                address="1.2.3.4",
                mask="255.255.255.0",
            )],
            match_identity_remote_keys=["key1"])
        ```

        ## Import

        ```sh
         $ pulumi import iosxe:iosxe/cryptoIkev2Profile:CryptoIkev2Profile example "Cisco-IOS-XE-native:native/crypto/Cisco-IOS-XE-crypto:ikev2/profile=profile1"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] authentication_local_pre_share: Pre-Shared Key
        :param pulumi.Input[bool] authentication_remote_pre_share: Pre-Shared Key
        :param pulumi.Input[bool] config_exchange_request: enable config-exchange request
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] description: Specify a description of this profile
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] dpd_interval: - Range: `10`-`3600`
        :param pulumi.Input[str] dpd_query: - Choices: `on-demand`, `periodic`
        :param pulumi.Input[int] dpd_retry: - Range: `2`-`60`
        :param pulumi.Input[str] identity_local_address: address
        :param pulumi.Input[str] identity_local_key_id: key-id opaque string - proprietary types of identification key-id string
        :param pulumi.Input[str] keyring_local: Keyring name
        :param pulumi.Input[bool] match_fvrf_any: Any fvrf
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_identity_remote_keys: key-id opaque string
        :param pulumi.Input[bool] match_inbound_only: Match the profile for incoming connections only
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CryptoIkev2ProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the Crypto IKEv2 Profile configuration.

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_iosxe as iosxe

        example = iosxe.iosxe.CryptoIkev2Profile("example",
            authentication_local_pre_share=True,
            authentication_remote_pre_share=True,
            config_exchange_request=False,
            description="My description",
            dpd_interval=10,
            dpd_query="periodic",
            dpd_retry=2,
            identity_local_key_id="key1",
            keyring_local="test",
            match_address_local_ip="1.2.3.4",
            match_fvrf_any=True,
            match_identity_remote_ipv4_addresses=[iosxe.iosxe.CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs(
                address="1.2.3.4",
                mask="255.255.255.0",
            )],
            match_identity_remote_keys=["key1"])
        ```

        ## Import

        ```sh
         $ pulumi import iosxe:iosxe/cryptoIkev2Profile:CryptoIkev2Profile example "Cisco-IOS-XE-native:native/crypto/Cisco-IOS-XE-crypto:ikev2/profile=profile1"
        ```

        :param str resource_name: The name of the resource.
        :param CryptoIkev2ProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CryptoIkev2ProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication_local_pre_share: Optional[pulumi.Input[bool]] = None,
                 authentication_remote_pre_share: Optional[pulumi.Input[bool]] = None,
                 config_exchange_request: Optional[pulumi.Input[bool]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 dpd_interval: Optional[pulumi.Input[int]] = None,
                 dpd_query: Optional[pulumi.Input[str]] = None,
                 dpd_retry: Optional[pulumi.Input[int]] = None,
                 identity_local_address: Optional[pulumi.Input[str]] = None,
                 identity_local_key_id: Optional[pulumi.Input[str]] = None,
                 keyring_local: Optional[pulumi.Input[str]] = None,
                 match_address_local_ip: Optional[pulumi.Input[str]] = None,
                 match_fvrf: Optional[pulumi.Input[str]] = None,
                 match_fvrf_any: Optional[pulumi.Input[bool]] = None,
                 match_identity_remote_ipv4_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs']]]]] = None,
                 match_identity_remote_ipv6_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match_identity_remote_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match_inbound_only: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CryptoIkev2ProfileArgs.__new__(CryptoIkev2ProfileArgs)

            __props__.__dict__["authentication_local_pre_share"] = authentication_local_pre_share
            __props__.__dict__["authentication_remote_pre_share"] = authentication_remote_pre_share
            __props__.__dict__["config_exchange_request"] = config_exchange_request
            __props__.__dict__["delete_mode"] = delete_mode
            __props__.__dict__["description"] = description
            __props__.__dict__["device"] = device
            __props__.__dict__["dpd_interval"] = dpd_interval
            __props__.__dict__["dpd_query"] = dpd_query
            __props__.__dict__["dpd_retry"] = dpd_retry
            __props__.__dict__["identity_local_address"] = identity_local_address
            __props__.__dict__["identity_local_key_id"] = identity_local_key_id
            __props__.__dict__["keyring_local"] = keyring_local
            __props__.__dict__["match_address_local_ip"] = match_address_local_ip
            __props__.__dict__["match_fvrf"] = match_fvrf
            __props__.__dict__["match_fvrf_any"] = match_fvrf_any
            __props__.__dict__["match_identity_remote_ipv4_addresses"] = match_identity_remote_ipv4_addresses
            __props__.__dict__["match_identity_remote_ipv6_prefixes"] = match_identity_remote_ipv6_prefixes
            __props__.__dict__["match_identity_remote_keys"] = match_identity_remote_keys
            __props__.__dict__["match_inbound_only"] = match_inbound_only
            __props__.__dict__["name"] = name
        super(CryptoIkev2Profile, __self__).__init__(
            'iosxe:iosxe/cryptoIkev2Profile:CryptoIkev2Profile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authentication_local_pre_share: Optional[pulumi.Input[bool]] = None,
            authentication_remote_pre_share: Optional[pulumi.Input[bool]] = None,
            config_exchange_request: Optional[pulumi.Input[bool]] = None,
            delete_mode: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            dpd_interval: Optional[pulumi.Input[int]] = None,
            dpd_query: Optional[pulumi.Input[str]] = None,
            dpd_retry: Optional[pulumi.Input[int]] = None,
            identity_local_address: Optional[pulumi.Input[str]] = None,
            identity_local_key_id: Optional[pulumi.Input[str]] = None,
            keyring_local: Optional[pulumi.Input[str]] = None,
            match_address_local_ip: Optional[pulumi.Input[str]] = None,
            match_fvrf: Optional[pulumi.Input[str]] = None,
            match_fvrf_any: Optional[pulumi.Input[bool]] = None,
            match_identity_remote_ipv4_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs']]]]] = None,
            match_identity_remote_ipv6_prefixes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            match_identity_remote_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            match_inbound_only: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'CryptoIkev2Profile':
        """
        Get an existing CryptoIkev2Profile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] authentication_local_pre_share: Pre-Shared Key
        :param pulumi.Input[bool] authentication_remote_pre_share: Pre-Shared Key
        :param pulumi.Input[bool] config_exchange_request: enable config-exchange request
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] description: Specify a description of this profile
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] dpd_interval: - Range: `10`-`3600`
        :param pulumi.Input[str] dpd_query: - Choices: `on-demand`, `periodic`
        :param pulumi.Input[int] dpd_retry: - Range: `2`-`60`
        :param pulumi.Input[str] identity_local_address: address
        :param pulumi.Input[str] identity_local_key_id: key-id opaque string - proprietary types of identification key-id string
        :param pulumi.Input[str] keyring_local: Keyring name
        :param pulumi.Input[bool] match_fvrf_any: Any fvrf
        :param pulumi.Input[Sequence[pulumi.Input[str]]] match_identity_remote_keys: key-id opaque string
        :param pulumi.Input[bool] match_inbound_only: Match the profile for incoming connections only
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CryptoIkev2ProfileState.__new__(_CryptoIkev2ProfileState)

        __props__.__dict__["authentication_local_pre_share"] = authentication_local_pre_share
        __props__.__dict__["authentication_remote_pre_share"] = authentication_remote_pre_share
        __props__.__dict__["config_exchange_request"] = config_exchange_request
        __props__.__dict__["delete_mode"] = delete_mode
        __props__.__dict__["description"] = description
        __props__.__dict__["device"] = device
        __props__.__dict__["dpd_interval"] = dpd_interval
        __props__.__dict__["dpd_query"] = dpd_query
        __props__.__dict__["dpd_retry"] = dpd_retry
        __props__.__dict__["identity_local_address"] = identity_local_address
        __props__.__dict__["identity_local_key_id"] = identity_local_key_id
        __props__.__dict__["keyring_local"] = keyring_local
        __props__.__dict__["match_address_local_ip"] = match_address_local_ip
        __props__.__dict__["match_fvrf"] = match_fvrf
        __props__.__dict__["match_fvrf_any"] = match_fvrf_any
        __props__.__dict__["match_identity_remote_ipv4_addresses"] = match_identity_remote_ipv4_addresses
        __props__.__dict__["match_identity_remote_ipv6_prefixes"] = match_identity_remote_ipv6_prefixes
        __props__.__dict__["match_identity_remote_keys"] = match_identity_remote_keys
        __props__.__dict__["match_inbound_only"] = match_inbound_only
        __props__.__dict__["name"] = name
        return CryptoIkev2Profile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authenticationLocalPreShare")
    def authentication_local_pre_share(self) -> pulumi.Output[Optional[bool]]:
        """
        Pre-Shared Key
        """
        return pulumi.get(self, "authentication_local_pre_share")

    @property
    @pulumi.getter(name="authenticationRemotePreShare")
    def authentication_remote_pre_share(self) -> pulumi.Output[Optional[bool]]:
        """
        Pre-Shared Key
        """
        return pulumi.get(self, "authentication_remote_pre_share")

    @property
    @pulumi.getter(name="configExchangeRequest")
    def config_exchange_request(self) -> pulumi.Output[Optional[bool]]:
        """
        enable config-exchange request
        """
        return pulumi.get(self, "config_exchange_request")

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Specify a description of this profile
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="dpdInterval")
    def dpd_interval(self) -> pulumi.Output[Optional[int]]:
        """
        - Range: `10`-`3600`
        """
        return pulumi.get(self, "dpd_interval")

    @property
    @pulumi.getter(name="dpdQuery")
    def dpd_query(self) -> pulumi.Output[Optional[str]]:
        """
        - Choices: `on-demand`, `periodic`
        """
        return pulumi.get(self, "dpd_query")

    @property
    @pulumi.getter(name="dpdRetry")
    def dpd_retry(self) -> pulumi.Output[Optional[int]]:
        """
        - Range: `2`-`60`
        """
        return pulumi.get(self, "dpd_retry")

    @property
    @pulumi.getter(name="identityLocalAddress")
    def identity_local_address(self) -> pulumi.Output[Optional[str]]:
        """
        address
        """
        return pulumi.get(self, "identity_local_address")

    @property
    @pulumi.getter(name="identityLocalKeyId")
    def identity_local_key_id(self) -> pulumi.Output[Optional[str]]:
        """
        key-id opaque string - proprietary types of identification key-id string
        """
        return pulumi.get(self, "identity_local_key_id")

    @property
    @pulumi.getter(name="keyringLocal")
    def keyring_local(self) -> pulumi.Output[Optional[str]]:
        """
        Keyring name
        """
        return pulumi.get(self, "keyring_local")

    @property
    @pulumi.getter(name="matchAddressLocalIp")
    def match_address_local_ip(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "match_address_local_ip")

    @property
    @pulumi.getter(name="matchFvrf")
    def match_fvrf(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "match_fvrf")

    @property
    @pulumi.getter(name="matchFvrfAny")
    def match_fvrf_any(self) -> pulumi.Output[Optional[bool]]:
        """
        Any fvrf
        """
        return pulumi.get(self, "match_fvrf_any")

    @property
    @pulumi.getter(name="matchIdentityRemoteIpv4Addresses")
    def match_identity_remote_ipv4_addresses(self) -> pulumi.Output[Optional[Sequence['outputs.CryptoIkev2ProfileMatchIdentityRemoteIpv4Address']]]:
        return pulumi.get(self, "match_identity_remote_ipv4_addresses")

    @property
    @pulumi.getter(name="matchIdentityRemoteIpv6Prefixes")
    def match_identity_remote_ipv6_prefixes(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "match_identity_remote_ipv6_prefixes")

    @property
    @pulumi.getter(name="matchIdentityRemoteKeys")
    def match_identity_remote_keys(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        key-id opaque string
        """
        return pulumi.get(self, "match_identity_remote_keys")

    @property
    @pulumi.getter(name="matchInboundOnly")
    def match_inbound_only(self) -> pulumi.Output[Optional[bool]]:
        """
        Match the profile for incoming connections only
        """
        return pulumi.get(self, "match_inbound_only")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

