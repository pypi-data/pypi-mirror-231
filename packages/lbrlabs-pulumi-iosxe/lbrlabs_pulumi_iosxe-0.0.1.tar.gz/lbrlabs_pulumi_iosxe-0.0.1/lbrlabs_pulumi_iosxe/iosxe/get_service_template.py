# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetServiceTemplateResult',
    'AwaitableGetServiceTemplateResult',
    'get_service_template',
    'get_service_template_output',
]

@pulumi.output_type
class GetServiceTemplateResult:
    """
    A collection of values returned by getServiceTemplate.
    """
    def __init__(__self__, absolute_timer=None, access_groups=None, description=None, device=None, dns_acl_preauth=None, ianctivity_timer=None, id=None, inactivity_timer_probe=None, interface_templates=None, linksec_policy=None, mdns_service_policy=None, name=None, redirect_append_client_mac=None, redirect_append_switch_mac=None, redirect_url=None, redirect_url_match_acl=None, redirect_url_match_action=None, service_policy_qos_input=None, service_policy_qos_output=None, sgt=None, tags=None, tunnel_capwap_name=None, vlan=None, vnid=None, voice_vlan=None):
        if absolute_timer and not isinstance(absolute_timer, int):
            raise TypeError("Expected argument 'absolute_timer' to be a int")
        pulumi.set(__self__, "absolute_timer", absolute_timer)
        if access_groups and not isinstance(access_groups, list):
            raise TypeError("Expected argument 'access_groups' to be a list")
        pulumi.set(__self__, "access_groups", access_groups)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if dns_acl_preauth and not isinstance(dns_acl_preauth, str):
            raise TypeError("Expected argument 'dns_acl_preauth' to be a str")
        pulumi.set(__self__, "dns_acl_preauth", dns_acl_preauth)
        if ianctivity_timer and not isinstance(ianctivity_timer, int):
            raise TypeError("Expected argument 'ianctivity_timer' to be a int")
        pulumi.set(__self__, "ianctivity_timer", ianctivity_timer)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if inactivity_timer_probe and not isinstance(inactivity_timer_probe, bool):
            raise TypeError("Expected argument 'inactivity_timer_probe' to be a bool")
        pulumi.set(__self__, "inactivity_timer_probe", inactivity_timer_probe)
        if interface_templates and not isinstance(interface_templates, list):
            raise TypeError("Expected argument 'interface_templates' to be a list")
        pulumi.set(__self__, "interface_templates", interface_templates)
        if linksec_policy and not isinstance(linksec_policy, str):
            raise TypeError("Expected argument 'linksec_policy' to be a str")
        pulumi.set(__self__, "linksec_policy", linksec_policy)
        if mdns_service_policy and not isinstance(mdns_service_policy, str):
            raise TypeError("Expected argument 'mdns_service_policy' to be a str")
        pulumi.set(__self__, "mdns_service_policy", mdns_service_policy)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if redirect_append_client_mac and not isinstance(redirect_append_client_mac, str):
            raise TypeError("Expected argument 'redirect_append_client_mac' to be a str")
        pulumi.set(__self__, "redirect_append_client_mac", redirect_append_client_mac)
        if redirect_append_switch_mac and not isinstance(redirect_append_switch_mac, str):
            raise TypeError("Expected argument 'redirect_append_switch_mac' to be a str")
        pulumi.set(__self__, "redirect_append_switch_mac", redirect_append_switch_mac)
        if redirect_url and not isinstance(redirect_url, str):
            raise TypeError("Expected argument 'redirect_url' to be a str")
        pulumi.set(__self__, "redirect_url", redirect_url)
        if redirect_url_match_acl and not isinstance(redirect_url_match_acl, str):
            raise TypeError("Expected argument 'redirect_url_match_acl' to be a str")
        pulumi.set(__self__, "redirect_url_match_acl", redirect_url_match_acl)
        if redirect_url_match_action and not isinstance(redirect_url_match_action, str):
            raise TypeError("Expected argument 'redirect_url_match_action' to be a str")
        pulumi.set(__self__, "redirect_url_match_action", redirect_url_match_action)
        if service_policy_qos_input and not isinstance(service_policy_qos_input, str):
            raise TypeError("Expected argument 'service_policy_qos_input' to be a str")
        pulumi.set(__self__, "service_policy_qos_input", service_policy_qos_input)
        if service_policy_qos_output and not isinstance(service_policy_qos_output, str):
            raise TypeError("Expected argument 'service_policy_qos_output' to be a str")
        pulumi.set(__self__, "service_policy_qos_output", service_policy_qos_output)
        if sgt and not isinstance(sgt, int):
            raise TypeError("Expected argument 'sgt' to be a int")
        pulumi.set(__self__, "sgt", sgt)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if tunnel_capwap_name and not isinstance(tunnel_capwap_name, str):
            raise TypeError("Expected argument 'tunnel_capwap_name' to be a str")
        pulumi.set(__self__, "tunnel_capwap_name", tunnel_capwap_name)
        if vlan and not isinstance(vlan, int):
            raise TypeError("Expected argument 'vlan' to be a int")
        pulumi.set(__self__, "vlan", vlan)
        if vnid and not isinstance(vnid, str):
            raise TypeError("Expected argument 'vnid' to be a str")
        pulumi.set(__self__, "vnid", vnid)
        if voice_vlan and not isinstance(voice_vlan, bool):
            raise TypeError("Expected argument 'voice_vlan' to be a bool")
        pulumi.set(__self__, "voice_vlan", voice_vlan)

    @property
    @pulumi.getter(name="absoluteTimer")
    def absolute_timer(self) -> int:
        """
        Enter a value between 1 and 1073741823
        """
        return pulumi.get(self, "absolute_timer")

    @property
    @pulumi.getter(name="accessGroups")
    def access_groups(self) -> Sequence['outputs.GetServiceTemplateAccessGroupResult']:
        """
        Access list to be applied
        """
        return pulumi.get(self, "access_groups")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Enter a description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="dnsAclPreauth")
    def dns_acl_preauth(self) -> str:
        """
        pre-authentication
        """
        return pulumi.get(self, "dns_acl_preauth")

    @property
    @pulumi.getter(name="ianctivityTimer")
    def ianctivity_timer(self) -> int:
        """
        Enter a value between 1 and 65535
        """
        return pulumi.get(self, "ianctivity_timer")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The path of the retrieved object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inactivityTimerProbe")
    def inactivity_timer_probe(self) -> bool:
        """
        ARP probe
        """
        return pulumi.get(self, "inactivity_timer_probe")

    @property
    @pulumi.getter(name="interfaceTemplates")
    def interface_templates(self) -> Sequence['outputs.GetServiceTemplateInterfaceTemplateResult']:
        """
        Interface template to be applied
        """
        return pulumi.get(self, "interface_templates")

    @property
    @pulumi.getter(name="linksecPolicy")
    def linksec_policy(self) -> str:
        """
        Set the link security policy
        """
        return pulumi.get(self, "linksec_policy")

    @property
    @pulumi.getter(name="mdnsServicePolicy")
    def mdns_service_policy(self) -> str:
        """
        mdns policy to be applied
        """
        return pulumi.get(self, "mdns_service_policy")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Specify a template name (maximum 48 characters)
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="redirectAppendClientMac")
    def redirect_append_client_mac(self) -> str:
        """
        Append client Mac Address in redirect URL
        """
        return pulumi.get(self, "redirect_append_client_mac")

    @property
    @pulumi.getter(name="redirectAppendSwitchMac")
    def redirect_append_switch_mac(self) -> str:
        """
        Append switch Mac Address in redirect URL
        """
        return pulumi.get(self, "redirect_append_switch_mac")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> str:
        """
        Specify a valid URL
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="redirectUrlMatchAcl")
    def redirect_url_match_acl(self) -> str:
        """
        Specify the access list name
        """
        return pulumi.get(self, "redirect_url_match_acl")

    @property
    @pulumi.getter(name="redirectUrlMatchAction")
    def redirect_url_match_action(self) -> str:
        return pulumi.get(self, "redirect_url_match_action")

    @property
    @pulumi.getter(name="servicePolicyQosInput")
    def service_policy_qos_input(self) -> str:
        """
        Configure input Qos policy
        """
        return pulumi.get(self, "service_policy_qos_input")

    @property
    @pulumi.getter(name="servicePolicyQosOutput")
    def service_policy_qos_output(self) -> str:
        """
        Configure output Qos policy
        """
        return pulumi.get(self, "service_policy_qos_output")

    @property
    @pulumi.getter
    def sgt(self) -> int:
        """
        SGT tag
        """
        return pulumi.get(self, "sgt")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetServiceTemplateTagResult']:
        """
        tag name
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tunnelCapwapName")
    def tunnel_capwap_name(self) -> str:
        """
        tunnel profile name
        """
        return pulumi.get(self, "tunnel_capwap_name")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        """
        Vlan to be applied
        """
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter
    def vnid(self) -> str:
        """
        Vnid to be applied
        """
        return pulumi.get(self, "vnid")

    @property
    @pulumi.getter(name="voiceVlan")
    def voice_vlan(self) -> bool:
        """
        Critical voice vlan
        """
        return pulumi.get(self, "voice_vlan")


class AwaitableGetServiceTemplateResult(GetServiceTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceTemplateResult(
            absolute_timer=self.absolute_timer,
            access_groups=self.access_groups,
            description=self.description,
            device=self.device,
            dns_acl_preauth=self.dns_acl_preauth,
            ianctivity_timer=self.ianctivity_timer,
            id=self.id,
            inactivity_timer_probe=self.inactivity_timer_probe,
            interface_templates=self.interface_templates,
            linksec_policy=self.linksec_policy,
            mdns_service_policy=self.mdns_service_policy,
            name=self.name,
            redirect_append_client_mac=self.redirect_append_client_mac,
            redirect_append_switch_mac=self.redirect_append_switch_mac,
            redirect_url=self.redirect_url,
            redirect_url_match_acl=self.redirect_url_match_acl,
            redirect_url_match_action=self.redirect_url_match_action,
            service_policy_qos_input=self.service_policy_qos_input,
            service_policy_qos_output=self.service_policy_qos_output,
            sgt=self.sgt,
            tags=self.tags,
            tunnel_capwap_name=self.tunnel_capwap_name,
            vlan=self.vlan,
            vnid=self.vnid,
            voice_vlan=self.voice_vlan)


def get_service_template(device: Optional[str] = None,
                         name: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceTemplateResult:
    """
    This data source can read the Service Template configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.iosxe.get_service_template(name="MY_TEMPLATE")
    ```


    :param str device: A device name from the provider configuration.
    :param str name: Specify a template name (maximum 48 characters)
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:iosxe/getServiceTemplate:getServiceTemplate', __args__, opts=opts, typ=GetServiceTemplateResult).value

    return AwaitableGetServiceTemplateResult(
        absolute_timer=pulumi.get(__ret__, 'absolute_timer'),
        access_groups=pulumi.get(__ret__, 'access_groups'),
        description=pulumi.get(__ret__, 'description'),
        device=pulumi.get(__ret__, 'device'),
        dns_acl_preauth=pulumi.get(__ret__, 'dns_acl_preauth'),
        ianctivity_timer=pulumi.get(__ret__, 'ianctivity_timer'),
        id=pulumi.get(__ret__, 'id'),
        inactivity_timer_probe=pulumi.get(__ret__, 'inactivity_timer_probe'),
        interface_templates=pulumi.get(__ret__, 'interface_templates'),
        linksec_policy=pulumi.get(__ret__, 'linksec_policy'),
        mdns_service_policy=pulumi.get(__ret__, 'mdns_service_policy'),
        name=pulumi.get(__ret__, 'name'),
        redirect_append_client_mac=pulumi.get(__ret__, 'redirect_append_client_mac'),
        redirect_append_switch_mac=pulumi.get(__ret__, 'redirect_append_switch_mac'),
        redirect_url=pulumi.get(__ret__, 'redirect_url'),
        redirect_url_match_acl=pulumi.get(__ret__, 'redirect_url_match_acl'),
        redirect_url_match_action=pulumi.get(__ret__, 'redirect_url_match_action'),
        service_policy_qos_input=pulumi.get(__ret__, 'service_policy_qos_input'),
        service_policy_qos_output=pulumi.get(__ret__, 'service_policy_qos_output'),
        sgt=pulumi.get(__ret__, 'sgt'),
        tags=pulumi.get(__ret__, 'tags'),
        tunnel_capwap_name=pulumi.get(__ret__, 'tunnel_capwap_name'),
        vlan=pulumi.get(__ret__, 'vlan'),
        vnid=pulumi.get(__ret__, 'vnid'),
        voice_vlan=pulumi.get(__ret__, 'voice_vlan'))


@_utilities.lift_output_func(get_service_template)
def get_service_template_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                                name: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetServiceTemplateResult]:
    """
    This data source can read the Service Template configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.iosxe.get_service_template(name="MY_TEMPLATE")
    ```


    :param str device: A device name from the provider configuration.
    :param str name: Specify a template name (maximum 48 characters)
    """
    ...
