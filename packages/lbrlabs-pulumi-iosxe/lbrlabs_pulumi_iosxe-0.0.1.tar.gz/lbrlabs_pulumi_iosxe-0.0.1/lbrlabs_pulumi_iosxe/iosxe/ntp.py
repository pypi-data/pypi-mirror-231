# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NtpArgs', 'Ntp']

@pulumi.input_type
class NtpArgs:
    def __init__(__self__, *,
                 access_group_peer_acl: Optional[pulumi.Input[str]] = None,
                 access_group_query_only_acl: Optional[pulumi.Input[str]] = None,
                 access_group_serve_acl: Optional[pulumi.Input[str]] = None,
                 access_group_serve_only_acl: Optional[pulumi.Input[str]] = None,
                 authenticate: Optional[pulumi.Input[bool]] = None,
                 authentication_keys: Optional[pulumi.Input[Sequence[pulumi.Input['NtpAuthenticationKeyArgs']]]] = None,
                 clock_period: Optional[pulumi.Input[int]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 logging: Optional[pulumi.Input[bool]] = None,
                 master: Optional[pulumi.Input[bool]] = None,
                 master_stratum: Optional[pulumi.Input[int]] = None,
                 passive: Optional[pulumi.Input[bool]] = None,
                 peer_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input['NtpPeerVrfArgs']]]] = None,
                 peers: Optional[pulumi.Input[Sequence[pulumi.Input['NtpPeerArgs']]]] = None,
                 server_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input['NtpServerVrfArgs']]]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input['NtpServerArgs']]]] = None,
                 trap_source_forty_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 trap_source_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 trap_source_hundred_gig_e: Optional[pulumi.Input[str]] = None,
                 trap_source_loopback: Optional[pulumi.Input[int]] = None,
                 trap_source_port_channel: Optional[pulumi.Input[int]] = None,
                 trap_source_port_channel_subinterface: Optional[pulumi.Input[str]] = None,
                 trap_source_ten_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 trap_source_vlan: Optional[pulumi.Input[int]] = None,
                 update_calendar: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Ntp resource.
        :param pulumi.Input[bool] authenticate: Authenticate time sources
        :param pulumi.Input[Sequence[pulumi.Input['NtpAuthenticationKeyArgs']]] authentication_keys: Authentication key for trusted time sources
        :param pulumi.Input[int] clock_period: Length of hardware clock tick - Range: `0`-`4294967295`
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] logging: Enable NTP message logging
        :param pulumi.Input[bool] master: Act as NTP master clock
        :param pulumi.Input[int] master_stratum: - Range: `1`-`15`
        :param pulumi.Input[bool] passive: NTP passive mode
        :param pulumi.Input[Sequence[pulumi.Input['NtpPeerVrfArgs']]] peer_vrfs: VPN Routing/Forwarding Information
        :param pulumi.Input[Sequence[pulumi.Input['NtpServerVrfArgs']]] server_vrfs: VPN Routing/Forwarding Information
        :param pulumi.Input[str] trap_source_forty_gigabit_ethernet: Forty GigabitEthernet
        :param pulumi.Input[str] trap_source_gigabit_ethernet: GigabitEthernet IEEE 802.3z
        :param pulumi.Input[str] trap_source_hundred_gig_e: Hundred GigabitEthernet
        :param pulumi.Input[int] trap_source_loopback: Loopback interface - Range: `0`-`2147483647`
        :param pulumi.Input[int] trap_source_port_channel: Ethernet Channel of interfaces - Range: `0`-`4294967295`
        :param pulumi.Input[str] trap_source_ten_gigabit_ethernet: Ten Gigabit Ethernet
        :param pulumi.Input[int] trap_source_vlan: Iosxr Vlans - Range: `0`-`65535`
        :param pulumi.Input[bool] update_calendar: Periodically update calendar with NTP time
        """
        if access_group_peer_acl is not None:
            pulumi.set(__self__, "access_group_peer_acl", access_group_peer_acl)
        if access_group_query_only_acl is not None:
            pulumi.set(__self__, "access_group_query_only_acl", access_group_query_only_acl)
        if access_group_serve_acl is not None:
            pulumi.set(__self__, "access_group_serve_acl", access_group_serve_acl)
        if access_group_serve_only_acl is not None:
            pulumi.set(__self__, "access_group_serve_only_acl", access_group_serve_only_acl)
        if authenticate is not None:
            pulumi.set(__self__, "authenticate", authenticate)
        if authentication_keys is not None:
            pulumi.set(__self__, "authentication_keys", authentication_keys)
        if clock_period is not None:
            pulumi.set(__self__, "clock_period", clock_period)
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if master is not None:
            pulumi.set(__self__, "master", master)
        if master_stratum is not None:
            pulumi.set(__self__, "master_stratum", master_stratum)
        if passive is not None:
            pulumi.set(__self__, "passive", passive)
        if peer_vrfs is not None:
            pulumi.set(__self__, "peer_vrfs", peer_vrfs)
        if peers is not None:
            pulumi.set(__self__, "peers", peers)
        if server_vrfs is not None:
            pulumi.set(__self__, "server_vrfs", server_vrfs)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if trap_source_forty_gigabit_ethernet is not None:
            pulumi.set(__self__, "trap_source_forty_gigabit_ethernet", trap_source_forty_gigabit_ethernet)
        if trap_source_gigabit_ethernet is not None:
            pulumi.set(__self__, "trap_source_gigabit_ethernet", trap_source_gigabit_ethernet)
        if trap_source_hundred_gig_e is not None:
            pulumi.set(__self__, "trap_source_hundred_gig_e", trap_source_hundred_gig_e)
        if trap_source_loopback is not None:
            pulumi.set(__self__, "trap_source_loopback", trap_source_loopback)
        if trap_source_port_channel is not None:
            pulumi.set(__self__, "trap_source_port_channel", trap_source_port_channel)
        if trap_source_port_channel_subinterface is not None:
            pulumi.set(__self__, "trap_source_port_channel_subinterface", trap_source_port_channel_subinterface)
        if trap_source_ten_gigabit_ethernet is not None:
            pulumi.set(__self__, "trap_source_ten_gigabit_ethernet", trap_source_ten_gigabit_ethernet)
        if trap_source_vlan is not None:
            pulumi.set(__self__, "trap_source_vlan", trap_source_vlan)
        if update_calendar is not None:
            pulumi.set(__self__, "update_calendar", update_calendar)

    @property
    @pulumi.getter(name="accessGroupPeerAcl")
    def access_group_peer_acl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_group_peer_acl")

    @access_group_peer_acl.setter
    def access_group_peer_acl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_group_peer_acl", value)

    @property
    @pulumi.getter(name="accessGroupQueryOnlyAcl")
    def access_group_query_only_acl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_group_query_only_acl")

    @access_group_query_only_acl.setter
    def access_group_query_only_acl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_group_query_only_acl", value)

    @property
    @pulumi.getter(name="accessGroupServeAcl")
    def access_group_serve_acl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_group_serve_acl")

    @access_group_serve_acl.setter
    def access_group_serve_acl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_group_serve_acl", value)

    @property
    @pulumi.getter(name="accessGroupServeOnlyAcl")
    def access_group_serve_only_acl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_group_serve_only_acl")

    @access_group_serve_only_acl.setter
    def access_group_serve_only_acl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_group_serve_only_acl", value)

    @property
    @pulumi.getter
    def authenticate(self) -> Optional[pulumi.Input[bool]]:
        """
        Authenticate time sources
        """
        return pulumi.get(self, "authenticate")

    @authenticate.setter
    def authenticate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authenticate", value)

    @property
    @pulumi.getter(name="authenticationKeys")
    def authentication_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NtpAuthenticationKeyArgs']]]]:
        """
        Authentication key for trusted time sources
        """
        return pulumi.get(self, "authentication_keys")

    @authentication_keys.setter
    def authentication_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NtpAuthenticationKeyArgs']]]]):
        pulumi.set(self, "authentication_keys", value)

    @property
    @pulumi.getter(name="clockPeriod")
    def clock_period(self) -> Optional[pulumi.Input[int]]:
        """
        Length of hardware clock tick - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "clock_period")

    @clock_period.setter
    def clock_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "clock_period", value)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable NTP message logging
        """
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logging", value)

    @property
    @pulumi.getter
    def master(self) -> Optional[pulumi.Input[bool]]:
        """
        Act as NTP master clock
        """
        return pulumi.get(self, "master")

    @master.setter
    def master(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "master", value)

    @property
    @pulumi.getter(name="masterStratum")
    def master_stratum(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `1`-`15`
        """
        return pulumi.get(self, "master_stratum")

    @master_stratum.setter
    def master_stratum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "master_stratum", value)

    @property
    @pulumi.getter
    def passive(self) -> Optional[pulumi.Input[bool]]:
        """
        NTP passive mode
        """
        return pulumi.get(self, "passive")

    @passive.setter
    def passive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "passive", value)

    @property
    @pulumi.getter(name="peerVrfs")
    def peer_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NtpPeerVrfArgs']]]]:
        """
        VPN Routing/Forwarding Information
        """
        return pulumi.get(self, "peer_vrfs")

    @peer_vrfs.setter
    def peer_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NtpPeerVrfArgs']]]]):
        pulumi.set(self, "peer_vrfs", value)

    @property
    @pulumi.getter
    def peers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NtpPeerArgs']]]]:
        return pulumi.get(self, "peers")

    @peers.setter
    def peers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NtpPeerArgs']]]]):
        pulumi.set(self, "peers", value)

    @property
    @pulumi.getter(name="serverVrfs")
    def server_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NtpServerVrfArgs']]]]:
        """
        VPN Routing/Forwarding Information
        """
        return pulumi.get(self, "server_vrfs")

    @server_vrfs.setter
    def server_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NtpServerVrfArgs']]]]):
        pulumi.set(self, "server_vrfs", value)

    @property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NtpServerArgs']]]]:
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NtpServerArgs']]]]):
        pulumi.set(self, "servers", value)

    @property
    @pulumi.getter(name="trapSourceFortyGigabitEthernet")
    def trap_source_forty_gigabit_ethernet(self) -> Optional[pulumi.Input[str]]:
        """
        Forty GigabitEthernet
        """
        return pulumi.get(self, "trap_source_forty_gigabit_ethernet")

    @trap_source_forty_gigabit_ethernet.setter
    def trap_source_forty_gigabit_ethernet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_source_forty_gigabit_ethernet", value)

    @property
    @pulumi.getter(name="trapSourceGigabitEthernet")
    def trap_source_gigabit_ethernet(self) -> Optional[pulumi.Input[str]]:
        """
        GigabitEthernet IEEE 802.3z
        """
        return pulumi.get(self, "trap_source_gigabit_ethernet")

    @trap_source_gigabit_ethernet.setter
    def trap_source_gigabit_ethernet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_source_gigabit_ethernet", value)

    @property
    @pulumi.getter(name="trapSourceHundredGigE")
    def trap_source_hundred_gig_e(self) -> Optional[pulumi.Input[str]]:
        """
        Hundred GigabitEthernet
        """
        return pulumi.get(self, "trap_source_hundred_gig_e")

    @trap_source_hundred_gig_e.setter
    def trap_source_hundred_gig_e(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_source_hundred_gig_e", value)

    @property
    @pulumi.getter(name="trapSourceLoopback")
    def trap_source_loopback(self) -> Optional[pulumi.Input[int]]:
        """
        Loopback interface - Range: `0`-`2147483647`
        """
        return pulumi.get(self, "trap_source_loopback")

    @trap_source_loopback.setter
    def trap_source_loopback(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_source_loopback", value)

    @property
    @pulumi.getter(name="trapSourcePortChannel")
    def trap_source_port_channel(self) -> Optional[pulumi.Input[int]]:
        """
        Ethernet Channel of interfaces - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "trap_source_port_channel")

    @trap_source_port_channel.setter
    def trap_source_port_channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_source_port_channel", value)

    @property
    @pulumi.getter(name="trapSourcePortChannelSubinterface")
    def trap_source_port_channel_subinterface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trap_source_port_channel_subinterface")

    @trap_source_port_channel_subinterface.setter
    def trap_source_port_channel_subinterface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_source_port_channel_subinterface", value)

    @property
    @pulumi.getter(name="trapSourceTenGigabitEthernet")
    def trap_source_ten_gigabit_ethernet(self) -> Optional[pulumi.Input[str]]:
        """
        Ten Gigabit Ethernet
        """
        return pulumi.get(self, "trap_source_ten_gigabit_ethernet")

    @trap_source_ten_gigabit_ethernet.setter
    def trap_source_ten_gigabit_ethernet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_source_ten_gigabit_ethernet", value)

    @property
    @pulumi.getter(name="trapSourceVlan")
    def trap_source_vlan(self) -> Optional[pulumi.Input[int]]:
        """
        Iosxr Vlans - Range: `0`-`65535`
        """
        return pulumi.get(self, "trap_source_vlan")

    @trap_source_vlan.setter
    def trap_source_vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_source_vlan", value)

    @property
    @pulumi.getter(name="updateCalendar")
    def update_calendar(self) -> Optional[pulumi.Input[bool]]:
        """
        Periodically update calendar with NTP time
        """
        return pulumi.get(self, "update_calendar")

    @update_calendar.setter
    def update_calendar(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "update_calendar", value)


@pulumi.input_type
class _NtpState:
    def __init__(__self__, *,
                 access_group_peer_acl: Optional[pulumi.Input[str]] = None,
                 access_group_query_only_acl: Optional[pulumi.Input[str]] = None,
                 access_group_serve_acl: Optional[pulumi.Input[str]] = None,
                 access_group_serve_only_acl: Optional[pulumi.Input[str]] = None,
                 authenticate: Optional[pulumi.Input[bool]] = None,
                 authentication_keys: Optional[pulumi.Input[Sequence[pulumi.Input['NtpAuthenticationKeyArgs']]]] = None,
                 clock_period: Optional[pulumi.Input[int]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 logging: Optional[pulumi.Input[bool]] = None,
                 master: Optional[pulumi.Input[bool]] = None,
                 master_stratum: Optional[pulumi.Input[int]] = None,
                 passive: Optional[pulumi.Input[bool]] = None,
                 peer_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input['NtpPeerVrfArgs']]]] = None,
                 peers: Optional[pulumi.Input[Sequence[pulumi.Input['NtpPeerArgs']]]] = None,
                 server_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input['NtpServerVrfArgs']]]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input['NtpServerArgs']]]] = None,
                 trap_source_forty_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 trap_source_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 trap_source_hundred_gig_e: Optional[pulumi.Input[str]] = None,
                 trap_source_loopback: Optional[pulumi.Input[int]] = None,
                 trap_source_port_channel: Optional[pulumi.Input[int]] = None,
                 trap_source_port_channel_subinterface: Optional[pulumi.Input[str]] = None,
                 trap_source_ten_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 trap_source_vlan: Optional[pulumi.Input[int]] = None,
                 update_calendar: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Ntp resources.
        :param pulumi.Input[bool] authenticate: Authenticate time sources
        :param pulumi.Input[Sequence[pulumi.Input['NtpAuthenticationKeyArgs']]] authentication_keys: Authentication key for trusted time sources
        :param pulumi.Input[int] clock_period: Length of hardware clock tick - Range: `0`-`4294967295`
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] logging: Enable NTP message logging
        :param pulumi.Input[bool] master: Act as NTP master clock
        :param pulumi.Input[int] master_stratum: - Range: `1`-`15`
        :param pulumi.Input[bool] passive: NTP passive mode
        :param pulumi.Input[Sequence[pulumi.Input['NtpPeerVrfArgs']]] peer_vrfs: VPN Routing/Forwarding Information
        :param pulumi.Input[Sequence[pulumi.Input['NtpServerVrfArgs']]] server_vrfs: VPN Routing/Forwarding Information
        :param pulumi.Input[str] trap_source_forty_gigabit_ethernet: Forty GigabitEthernet
        :param pulumi.Input[str] trap_source_gigabit_ethernet: GigabitEthernet IEEE 802.3z
        :param pulumi.Input[str] trap_source_hundred_gig_e: Hundred GigabitEthernet
        :param pulumi.Input[int] trap_source_loopback: Loopback interface - Range: `0`-`2147483647`
        :param pulumi.Input[int] trap_source_port_channel: Ethernet Channel of interfaces - Range: `0`-`4294967295`
        :param pulumi.Input[str] trap_source_ten_gigabit_ethernet: Ten Gigabit Ethernet
        :param pulumi.Input[int] trap_source_vlan: Iosxr Vlans - Range: `0`-`65535`
        :param pulumi.Input[bool] update_calendar: Periodically update calendar with NTP time
        """
        if access_group_peer_acl is not None:
            pulumi.set(__self__, "access_group_peer_acl", access_group_peer_acl)
        if access_group_query_only_acl is not None:
            pulumi.set(__self__, "access_group_query_only_acl", access_group_query_only_acl)
        if access_group_serve_acl is not None:
            pulumi.set(__self__, "access_group_serve_acl", access_group_serve_acl)
        if access_group_serve_only_acl is not None:
            pulumi.set(__self__, "access_group_serve_only_acl", access_group_serve_only_acl)
        if authenticate is not None:
            pulumi.set(__self__, "authenticate", authenticate)
        if authentication_keys is not None:
            pulumi.set(__self__, "authentication_keys", authentication_keys)
        if clock_period is not None:
            pulumi.set(__self__, "clock_period", clock_period)
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if master is not None:
            pulumi.set(__self__, "master", master)
        if master_stratum is not None:
            pulumi.set(__self__, "master_stratum", master_stratum)
        if passive is not None:
            pulumi.set(__self__, "passive", passive)
        if peer_vrfs is not None:
            pulumi.set(__self__, "peer_vrfs", peer_vrfs)
        if peers is not None:
            pulumi.set(__self__, "peers", peers)
        if server_vrfs is not None:
            pulumi.set(__self__, "server_vrfs", server_vrfs)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if trap_source_forty_gigabit_ethernet is not None:
            pulumi.set(__self__, "trap_source_forty_gigabit_ethernet", trap_source_forty_gigabit_ethernet)
        if trap_source_gigabit_ethernet is not None:
            pulumi.set(__self__, "trap_source_gigabit_ethernet", trap_source_gigabit_ethernet)
        if trap_source_hundred_gig_e is not None:
            pulumi.set(__self__, "trap_source_hundred_gig_e", trap_source_hundred_gig_e)
        if trap_source_loopback is not None:
            pulumi.set(__self__, "trap_source_loopback", trap_source_loopback)
        if trap_source_port_channel is not None:
            pulumi.set(__self__, "trap_source_port_channel", trap_source_port_channel)
        if trap_source_port_channel_subinterface is not None:
            pulumi.set(__self__, "trap_source_port_channel_subinterface", trap_source_port_channel_subinterface)
        if trap_source_ten_gigabit_ethernet is not None:
            pulumi.set(__self__, "trap_source_ten_gigabit_ethernet", trap_source_ten_gigabit_ethernet)
        if trap_source_vlan is not None:
            pulumi.set(__self__, "trap_source_vlan", trap_source_vlan)
        if update_calendar is not None:
            pulumi.set(__self__, "update_calendar", update_calendar)

    @property
    @pulumi.getter(name="accessGroupPeerAcl")
    def access_group_peer_acl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_group_peer_acl")

    @access_group_peer_acl.setter
    def access_group_peer_acl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_group_peer_acl", value)

    @property
    @pulumi.getter(name="accessGroupQueryOnlyAcl")
    def access_group_query_only_acl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_group_query_only_acl")

    @access_group_query_only_acl.setter
    def access_group_query_only_acl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_group_query_only_acl", value)

    @property
    @pulumi.getter(name="accessGroupServeAcl")
    def access_group_serve_acl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_group_serve_acl")

    @access_group_serve_acl.setter
    def access_group_serve_acl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_group_serve_acl", value)

    @property
    @pulumi.getter(name="accessGroupServeOnlyAcl")
    def access_group_serve_only_acl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_group_serve_only_acl")

    @access_group_serve_only_acl.setter
    def access_group_serve_only_acl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_group_serve_only_acl", value)

    @property
    @pulumi.getter
    def authenticate(self) -> Optional[pulumi.Input[bool]]:
        """
        Authenticate time sources
        """
        return pulumi.get(self, "authenticate")

    @authenticate.setter
    def authenticate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authenticate", value)

    @property
    @pulumi.getter(name="authenticationKeys")
    def authentication_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NtpAuthenticationKeyArgs']]]]:
        """
        Authentication key for trusted time sources
        """
        return pulumi.get(self, "authentication_keys")

    @authentication_keys.setter
    def authentication_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NtpAuthenticationKeyArgs']]]]):
        pulumi.set(self, "authentication_keys", value)

    @property
    @pulumi.getter(name="clockPeriod")
    def clock_period(self) -> Optional[pulumi.Input[int]]:
        """
        Length of hardware clock tick - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "clock_period")

    @clock_period.setter
    def clock_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "clock_period", value)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable NTP message logging
        """
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logging", value)

    @property
    @pulumi.getter
    def master(self) -> Optional[pulumi.Input[bool]]:
        """
        Act as NTP master clock
        """
        return pulumi.get(self, "master")

    @master.setter
    def master(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "master", value)

    @property
    @pulumi.getter(name="masterStratum")
    def master_stratum(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `1`-`15`
        """
        return pulumi.get(self, "master_stratum")

    @master_stratum.setter
    def master_stratum(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "master_stratum", value)

    @property
    @pulumi.getter
    def passive(self) -> Optional[pulumi.Input[bool]]:
        """
        NTP passive mode
        """
        return pulumi.get(self, "passive")

    @passive.setter
    def passive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "passive", value)

    @property
    @pulumi.getter(name="peerVrfs")
    def peer_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NtpPeerVrfArgs']]]]:
        """
        VPN Routing/Forwarding Information
        """
        return pulumi.get(self, "peer_vrfs")

    @peer_vrfs.setter
    def peer_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NtpPeerVrfArgs']]]]):
        pulumi.set(self, "peer_vrfs", value)

    @property
    @pulumi.getter
    def peers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NtpPeerArgs']]]]:
        return pulumi.get(self, "peers")

    @peers.setter
    def peers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NtpPeerArgs']]]]):
        pulumi.set(self, "peers", value)

    @property
    @pulumi.getter(name="serverVrfs")
    def server_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NtpServerVrfArgs']]]]:
        """
        VPN Routing/Forwarding Information
        """
        return pulumi.get(self, "server_vrfs")

    @server_vrfs.setter
    def server_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NtpServerVrfArgs']]]]):
        pulumi.set(self, "server_vrfs", value)

    @property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NtpServerArgs']]]]:
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NtpServerArgs']]]]):
        pulumi.set(self, "servers", value)

    @property
    @pulumi.getter(name="trapSourceFortyGigabitEthernet")
    def trap_source_forty_gigabit_ethernet(self) -> Optional[pulumi.Input[str]]:
        """
        Forty GigabitEthernet
        """
        return pulumi.get(self, "trap_source_forty_gigabit_ethernet")

    @trap_source_forty_gigabit_ethernet.setter
    def trap_source_forty_gigabit_ethernet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_source_forty_gigabit_ethernet", value)

    @property
    @pulumi.getter(name="trapSourceGigabitEthernet")
    def trap_source_gigabit_ethernet(self) -> Optional[pulumi.Input[str]]:
        """
        GigabitEthernet IEEE 802.3z
        """
        return pulumi.get(self, "trap_source_gigabit_ethernet")

    @trap_source_gigabit_ethernet.setter
    def trap_source_gigabit_ethernet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_source_gigabit_ethernet", value)

    @property
    @pulumi.getter(name="trapSourceHundredGigE")
    def trap_source_hundred_gig_e(self) -> Optional[pulumi.Input[str]]:
        """
        Hundred GigabitEthernet
        """
        return pulumi.get(self, "trap_source_hundred_gig_e")

    @trap_source_hundred_gig_e.setter
    def trap_source_hundred_gig_e(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_source_hundred_gig_e", value)

    @property
    @pulumi.getter(name="trapSourceLoopback")
    def trap_source_loopback(self) -> Optional[pulumi.Input[int]]:
        """
        Loopback interface - Range: `0`-`2147483647`
        """
        return pulumi.get(self, "trap_source_loopback")

    @trap_source_loopback.setter
    def trap_source_loopback(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_source_loopback", value)

    @property
    @pulumi.getter(name="trapSourcePortChannel")
    def trap_source_port_channel(self) -> Optional[pulumi.Input[int]]:
        """
        Ethernet Channel of interfaces - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "trap_source_port_channel")

    @trap_source_port_channel.setter
    def trap_source_port_channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_source_port_channel", value)

    @property
    @pulumi.getter(name="trapSourcePortChannelSubinterface")
    def trap_source_port_channel_subinterface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trap_source_port_channel_subinterface")

    @trap_source_port_channel_subinterface.setter
    def trap_source_port_channel_subinterface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_source_port_channel_subinterface", value)

    @property
    @pulumi.getter(name="trapSourceTenGigabitEthernet")
    def trap_source_ten_gigabit_ethernet(self) -> Optional[pulumi.Input[str]]:
        """
        Ten Gigabit Ethernet
        """
        return pulumi.get(self, "trap_source_ten_gigabit_ethernet")

    @trap_source_ten_gigabit_ethernet.setter
    def trap_source_ten_gigabit_ethernet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_source_ten_gigabit_ethernet", value)

    @property
    @pulumi.getter(name="trapSourceVlan")
    def trap_source_vlan(self) -> Optional[pulumi.Input[int]]:
        """
        Iosxr Vlans - Range: `0`-`65535`
        """
        return pulumi.get(self, "trap_source_vlan")

    @trap_source_vlan.setter
    def trap_source_vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_source_vlan", value)

    @property
    @pulumi.getter(name="updateCalendar")
    def update_calendar(self) -> Optional[pulumi.Input[bool]]:
        """
        Periodically update calendar with NTP time
        """
        return pulumi.get(self, "update_calendar")

    @update_calendar.setter
    def update_calendar(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "update_calendar", value)


class Ntp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_group_peer_acl: Optional[pulumi.Input[str]] = None,
                 access_group_query_only_acl: Optional[pulumi.Input[str]] = None,
                 access_group_serve_acl: Optional[pulumi.Input[str]] = None,
                 access_group_serve_only_acl: Optional[pulumi.Input[str]] = None,
                 authenticate: Optional[pulumi.Input[bool]] = None,
                 authentication_keys: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpAuthenticationKeyArgs']]]]] = None,
                 clock_period: Optional[pulumi.Input[int]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 logging: Optional[pulumi.Input[bool]] = None,
                 master: Optional[pulumi.Input[bool]] = None,
                 master_stratum: Optional[pulumi.Input[int]] = None,
                 passive: Optional[pulumi.Input[bool]] = None,
                 peer_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpPeerVrfArgs']]]]] = None,
                 peers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpPeerArgs']]]]] = None,
                 server_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpServerVrfArgs']]]]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpServerArgs']]]]] = None,
                 trap_source_forty_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 trap_source_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 trap_source_hundred_gig_e: Optional[pulumi.Input[str]] = None,
                 trap_source_loopback: Optional[pulumi.Input[int]] = None,
                 trap_source_port_channel: Optional[pulumi.Input[int]] = None,
                 trap_source_port_channel_subinterface: Optional[pulumi.Input[str]] = None,
                 trap_source_ten_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 trap_source_vlan: Optional[pulumi.Input[int]] = None,
                 update_calendar: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        This resource can manage the NTP configuration.

        ## Import

        ```sh
         $ pulumi import iosxe:iosxe/ntp:Ntp example "Cisco-IOS-XE-native:native/ntp"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] authenticate: Authenticate time sources
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpAuthenticationKeyArgs']]]] authentication_keys: Authentication key for trusted time sources
        :param pulumi.Input[int] clock_period: Length of hardware clock tick - Range: `0`-`4294967295`
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] logging: Enable NTP message logging
        :param pulumi.Input[bool] master: Act as NTP master clock
        :param pulumi.Input[int] master_stratum: - Range: `1`-`15`
        :param pulumi.Input[bool] passive: NTP passive mode
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpPeerVrfArgs']]]] peer_vrfs: VPN Routing/Forwarding Information
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpServerVrfArgs']]]] server_vrfs: VPN Routing/Forwarding Information
        :param pulumi.Input[str] trap_source_forty_gigabit_ethernet: Forty GigabitEthernet
        :param pulumi.Input[str] trap_source_gigabit_ethernet: GigabitEthernet IEEE 802.3z
        :param pulumi.Input[str] trap_source_hundred_gig_e: Hundred GigabitEthernet
        :param pulumi.Input[int] trap_source_loopback: Loopback interface - Range: `0`-`2147483647`
        :param pulumi.Input[int] trap_source_port_channel: Ethernet Channel of interfaces - Range: `0`-`4294967295`
        :param pulumi.Input[str] trap_source_ten_gigabit_ethernet: Ten Gigabit Ethernet
        :param pulumi.Input[int] trap_source_vlan: Iosxr Vlans - Range: `0`-`65535`
        :param pulumi.Input[bool] update_calendar: Periodically update calendar with NTP time
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[NtpArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the NTP configuration.

        ## Import

        ```sh
         $ pulumi import iosxe:iosxe/ntp:Ntp example "Cisco-IOS-XE-native:native/ntp"
        ```

        :param str resource_name: The name of the resource.
        :param NtpArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NtpArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_group_peer_acl: Optional[pulumi.Input[str]] = None,
                 access_group_query_only_acl: Optional[pulumi.Input[str]] = None,
                 access_group_serve_acl: Optional[pulumi.Input[str]] = None,
                 access_group_serve_only_acl: Optional[pulumi.Input[str]] = None,
                 authenticate: Optional[pulumi.Input[bool]] = None,
                 authentication_keys: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpAuthenticationKeyArgs']]]]] = None,
                 clock_period: Optional[pulumi.Input[int]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 logging: Optional[pulumi.Input[bool]] = None,
                 master: Optional[pulumi.Input[bool]] = None,
                 master_stratum: Optional[pulumi.Input[int]] = None,
                 passive: Optional[pulumi.Input[bool]] = None,
                 peer_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpPeerVrfArgs']]]]] = None,
                 peers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpPeerArgs']]]]] = None,
                 server_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpServerVrfArgs']]]]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpServerArgs']]]]] = None,
                 trap_source_forty_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 trap_source_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 trap_source_hundred_gig_e: Optional[pulumi.Input[str]] = None,
                 trap_source_loopback: Optional[pulumi.Input[int]] = None,
                 trap_source_port_channel: Optional[pulumi.Input[int]] = None,
                 trap_source_port_channel_subinterface: Optional[pulumi.Input[str]] = None,
                 trap_source_ten_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 trap_source_vlan: Optional[pulumi.Input[int]] = None,
                 update_calendar: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NtpArgs.__new__(NtpArgs)

            __props__.__dict__["access_group_peer_acl"] = access_group_peer_acl
            __props__.__dict__["access_group_query_only_acl"] = access_group_query_only_acl
            __props__.__dict__["access_group_serve_acl"] = access_group_serve_acl
            __props__.__dict__["access_group_serve_only_acl"] = access_group_serve_only_acl
            __props__.__dict__["authenticate"] = authenticate
            __props__.__dict__["authentication_keys"] = authentication_keys
            __props__.__dict__["clock_period"] = clock_period
            __props__.__dict__["delete_mode"] = delete_mode
            __props__.__dict__["device"] = device
            __props__.__dict__["logging"] = logging
            __props__.__dict__["master"] = master
            __props__.__dict__["master_stratum"] = master_stratum
            __props__.__dict__["passive"] = passive
            __props__.__dict__["peer_vrfs"] = peer_vrfs
            __props__.__dict__["peers"] = peers
            __props__.__dict__["server_vrfs"] = server_vrfs
            __props__.__dict__["servers"] = servers
            __props__.__dict__["trap_source_forty_gigabit_ethernet"] = trap_source_forty_gigabit_ethernet
            __props__.__dict__["trap_source_gigabit_ethernet"] = trap_source_gigabit_ethernet
            __props__.__dict__["trap_source_hundred_gig_e"] = trap_source_hundred_gig_e
            __props__.__dict__["trap_source_loopback"] = trap_source_loopback
            __props__.__dict__["trap_source_port_channel"] = trap_source_port_channel
            __props__.__dict__["trap_source_port_channel_subinterface"] = trap_source_port_channel_subinterface
            __props__.__dict__["trap_source_ten_gigabit_ethernet"] = trap_source_ten_gigabit_ethernet
            __props__.__dict__["trap_source_vlan"] = trap_source_vlan
            __props__.__dict__["update_calendar"] = update_calendar
        super(Ntp, __self__).__init__(
            'iosxe:iosxe/ntp:Ntp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_group_peer_acl: Optional[pulumi.Input[str]] = None,
            access_group_query_only_acl: Optional[pulumi.Input[str]] = None,
            access_group_serve_acl: Optional[pulumi.Input[str]] = None,
            access_group_serve_only_acl: Optional[pulumi.Input[str]] = None,
            authenticate: Optional[pulumi.Input[bool]] = None,
            authentication_keys: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpAuthenticationKeyArgs']]]]] = None,
            clock_period: Optional[pulumi.Input[int]] = None,
            delete_mode: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            logging: Optional[pulumi.Input[bool]] = None,
            master: Optional[pulumi.Input[bool]] = None,
            master_stratum: Optional[pulumi.Input[int]] = None,
            passive: Optional[pulumi.Input[bool]] = None,
            peer_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpPeerVrfArgs']]]]] = None,
            peers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpPeerArgs']]]]] = None,
            server_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpServerVrfArgs']]]]] = None,
            servers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpServerArgs']]]]] = None,
            trap_source_forty_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
            trap_source_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
            trap_source_hundred_gig_e: Optional[pulumi.Input[str]] = None,
            trap_source_loopback: Optional[pulumi.Input[int]] = None,
            trap_source_port_channel: Optional[pulumi.Input[int]] = None,
            trap_source_port_channel_subinterface: Optional[pulumi.Input[str]] = None,
            trap_source_ten_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
            trap_source_vlan: Optional[pulumi.Input[int]] = None,
            update_calendar: Optional[pulumi.Input[bool]] = None) -> 'Ntp':
        """
        Get an existing Ntp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] authenticate: Authenticate time sources
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpAuthenticationKeyArgs']]]] authentication_keys: Authentication key for trusted time sources
        :param pulumi.Input[int] clock_period: Length of hardware clock tick - Range: `0`-`4294967295`
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] logging: Enable NTP message logging
        :param pulumi.Input[bool] master: Act as NTP master clock
        :param pulumi.Input[int] master_stratum: - Range: `1`-`15`
        :param pulumi.Input[bool] passive: NTP passive mode
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpPeerVrfArgs']]]] peer_vrfs: VPN Routing/Forwarding Information
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NtpServerVrfArgs']]]] server_vrfs: VPN Routing/Forwarding Information
        :param pulumi.Input[str] trap_source_forty_gigabit_ethernet: Forty GigabitEthernet
        :param pulumi.Input[str] trap_source_gigabit_ethernet: GigabitEthernet IEEE 802.3z
        :param pulumi.Input[str] trap_source_hundred_gig_e: Hundred GigabitEthernet
        :param pulumi.Input[int] trap_source_loopback: Loopback interface - Range: `0`-`2147483647`
        :param pulumi.Input[int] trap_source_port_channel: Ethernet Channel of interfaces - Range: `0`-`4294967295`
        :param pulumi.Input[str] trap_source_ten_gigabit_ethernet: Ten Gigabit Ethernet
        :param pulumi.Input[int] trap_source_vlan: Iosxr Vlans - Range: `0`-`65535`
        :param pulumi.Input[bool] update_calendar: Periodically update calendar with NTP time
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NtpState.__new__(_NtpState)

        __props__.__dict__["access_group_peer_acl"] = access_group_peer_acl
        __props__.__dict__["access_group_query_only_acl"] = access_group_query_only_acl
        __props__.__dict__["access_group_serve_acl"] = access_group_serve_acl
        __props__.__dict__["access_group_serve_only_acl"] = access_group_serve_only_acl
        __props__.__dict__["authenticate"] = authenticate
        __props__.__dict__["authentication_keys"] = authentication_keys
        __props__.__dict__["clock_period"] = clock_period
        __props__.__dict__["delete_mode"] = delete_mode
        __props__.__dict__["device"] = device
        __props__.__dict__["logging"] = logging
        __props__.__dict__["master"] = master
        __props__.__dict__["master_stratum"] = master_stratum
        __props__.__dict__["passive"] = passive
        __props__.__dict__["peer_vrfs"] = peer_vrfs
        __props__.__dict__["peers"] = peers
        __props__.__dict__["server_vrfs"] = server_vrfs
        __props__.__dict__["servers"] = servers
        __props__.__dict__["trap_source_forty_gigabit_ethernet"] = trap_source_forty_gigabit_ethernet
        __props__.__dict__["trap_source_gigabit_ethernet"] = trap_source_gigabit_ethernet
        __props__.__dict__["trap_source_hundred_gig_e"] = trap_source_hundred_gig_e
        __props__.__dict__["trap_source_loopback"] = trap_source_loopback
        __props__.__dict__["trap_source_port_channel"] = trap_source_port_channel
        __props__.__dict__["trap_source_port_channel_subinterface"] = trap_source_port_channel_subinterface
        __props__.__dict__["trap_source_ten_gigabit_ethernet"] = trap_source_ten_gigabit_ethernet
        __props__.__dict__["trap_source_vlan"] = trap_source_vlan
        __props__.__dict__["update_calendar"] = update_calendar
        return Ntp(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessGroupPeerAcl")
    def access_group_peer_acl(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "access_group_peer_acl")

    @property
    @pulumi.getter(name="accessGroupQueryOnlyAcl")
    def access_group_query_only_acl(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "access_group_query_only_acl")

    @property
    @pulumi.getter(name="accessGroupServeAcl")
    def access_group_serve_acl(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "access_group_serve_acl")

    @property
    @pulumi.getter(name="accessGroupServeOnlyAcl")
    def access_group_serve_only_acl(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "access_group_serve_only_acl")

    @property
    @pulumi.getter
    def authenticate(self) -> pulumi.Output[Optional[bool]]:
        """
        Authenticate time sources
        """
        return pulumi.get(self, "authenticate")

    @property
    @pulumi.getter(name="authenticationKeys")
    def authentication_keys(self) -> pulumi.Output[Optional[Sequence['outputs.NtpAuthenticationKey']]]:
        """
        Authentication key for trusted time sources
        """
        return pulumi.get(self, "authentication_keys")

    @property
    @pulumi.getter(name="clockPeriod")
    def clock_period(self) -> pulumi.Output[Optional[int]]:
        """
        Length of hardware clock tick - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "clock_period")

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def logging(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable NTP message logging
        """
        return pulumi.get(self, "logging")

    @property
    @pulumi.getter
    def master(self) -> pulumi.Output[Optional[bool]]:
        """
        Act as NTP master clock
        """
        return pulumi.get(self, "master")

    @property
    @pulumi.getter(name="masterStratum")
    def master_stratum(self) -> pulumi.Output[Optional[int]]:
        """
        - Range: `1`-`15`
        """
        return pulumi.get(self, "master_stratum")

    @property
    @pulumi.getter
    def passive(self) -> pulumi.Output[Optional[bool]]:
        """
        NTP passive mode
        """
        return pulumi.get(self, "passive")

    @property
    @pulumi.getter(name="peerVrfs")
    def peer_vrfs(self) -> pulumi.Output[Optional[Sequence['outputs.NtpPeerVrf']]]:
        """
        VPN Routing/Forwarding Information
        """
        return pulumi.get(self, "peer_vrfs")

    @property
    @pulumi.getter
    def peers(self) -> pulumi.Output[Optional[Sequence['outputs.NtpPeer']]]:
        return pulumi.get(self, "peers")

    @property
    @pulumi.getter(name="serverVrfs")
    def server_vrfs(self) -> pulumi.Output[Optional[Sequence['outputs.NtpServerVrf']]]:
        """
        VPN Routing/Forwarding Information
        """
        return pulumi.get(self, "server_vrfs")

    @property
    @pulumi.getter
    def servers(self) -> pulumi.Output[Optional[Sequence['outputs.NtpServer']]]:
        return pulumi.get(self, "servers")

    @property
    @pulumi.getter(name="trapSourceFortyGigabitEthernet")
    def trap_source_forty_gigabit_ethernet(self) -> pulumi.Output[Optional[str]]:
        """
        Forty GigabitEthernet
        """
        return pulumi.get(self, "trap_source_forty_gigabit_ethernet")

    @property
    @pulumi.getter(name="trapSourceGigabitEthernet")
    def trap_source_gigabit_ethernet(self) -> pulumi.Output[Optional[str]]:
        """
        GigabitEthernet IEEE 802.3z
        """
        return pulumi.get(self, "trap_source_gigabit_ethernet")

    @property
    @pulumi.getter(name="trapSourceHundredGigE")
    def trap_source_hundred_gig_e(self) -> pulumi.Output[Optional[str]]:
        """
        Hundred GigabitEthernet
        """
        return pulumi.get(self, "trap_source_hundred_gig_e")

    @property
    @pulumi.getter(name="trapSourceLoopback")
    def trap_source_loopback(self) -> pulumi.Output[Optional[int]]:
        """
        Loopback interface - Range: `0`-`2147483647`
        """
        return pulumi.get(self, "trap_source_loopback")

    @property
    @pulumi.getter(name="trapSourcePortChannel")
    def trap_source_port_channel(self) -> pulumi.Output[Optional[int]]:
        """
        Ethernet Channel of interfaces - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "trap_source_port_channel")

    @property
    @pulumi.getter(name="trapSourcePortChannelSubinterface")
    def trap_source_port_channel_subinterface(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "trap_source_port_channel_subinterface")

    @property
    @pulumi.getter(name="trapSourceTenGigabitEthernet")
    def trap_source_ten_gigabit_ethernet(self) -> pulumi.Output[Optional[str]]:
        """
        Ten Gigabit Ethernet
        """
        return pulumi.get(self, "trap_source_ten_gigabit_ethernet")

    @property
    @pulumi.getter(name="trapSourceVlan")
    def trap_source_vlan(self) -> pulumi.Output[Optional[int]]:
        """
        Iosxr Vlans - Range: `0`-`65535`
        """
        return pulumi.get(self, "trap_source_vlan")

    @property
    @pulumi.getter(name="updateCalendar")
    def update_calendar(self) -> pulumi.Output[Optional[bool]]:
        """
        Periodically update calendar with NTP time
        """
        return pulumi.get(self, "update_calendar")

