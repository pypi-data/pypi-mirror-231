# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ServiceTemplateArgs', 'ServiceTemplate']

@pulumi.input_type
class ServiceTemplateArgs:
    def __init__(__self__, *,
                 absolute_timer: Optional[pulumi.Input[int]] = None,
                 access_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTemplateAccessGroupArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 dns_acl_preauth: Optional[pulumi.Input[str]] = None,
                 ianctivity_timer: Optional[pulumi.Input[int]] = None,
                 inactivity_timer_probe: Optional[pulumi.Input[bool]] = None,
                 interface_templates: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTemplateInterfaceTemplateArgs']]]] = None,
                 linksec_policy: Optional[pulumi.Input[str]] = None,
                 mdns_service_policy: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 redirect_append_client_mac: Optional[pulumi.Input[str]] = None,
                 redirect_append_switch_mac: Optional[pulumi.Input[str]] = None,
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 redirect_url_match_acl: Optional[pulumi.Input[str]] = None,
                 redirect_url_match_action: Optional[pulumi.Input[str]] = None,
                 service_policy_qos_input: Optional[pulumi.Input[str]] = None,
                 service_policy_qos_output: Optional[pulumi.Input[str]] = None,
                 sgt: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTemplateTagArgs']]]] = None,
                 tunnel_capwap_name: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None,
                 vnid: Optional[pulumi.Input[str]] = None,
                 voice_vlan: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a ServiceTemplate resource.
        :param pulumi.Input[int] absolute_timer: Enter a value between 1 and 1073741823 - Range: `1`-`1073741823`
        :param pulumi.Input[Sequence[pulumi.Input['ServiceTemplateAccessGroupArgs']]] access_groups: Access list to be applied
        :param pulumi.Input[str] description: Enter a description
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] dns_acl_preauth: pre-authentication
        :param pulumi.Input[int] ianctivity_timer: Enter a value between 1 and 65535 - Range: `1`-`65535`
        :param pulumi.Input[bool] inactivity_timer_probe: ARP probe
        :param pulumi.Input[Sequence[pulumi.Input['ServiceTemplateInterfaceTemplateArgs']]] interface_templates: Interface template to be applied
        :param pulumi.Input[str] linksec_policy: Set the link security policy - Choices: `must-not-secure`, `must-secure`, `should-secure`
        :param pulumi.Input[str] mdns_service_policy: mdns policy to be applied
        :param pulumi.Input[str] name: Specify a template name (maximum 48 characters)
        :param pulumi.Input[str] redirect_append_client_mac: Append client Mac Address in redirect URL
        :param pulumi.Input[str] redirect_append_switch_mac: Append switch Mac Address in redirect URL
        :param pulumi.Input[str] redirect_url: Specify a valid URL
        :param pulumi.Input[str] redirect_url_match_acl: Specify the access list name
        :param pulumi.Input[str] redirect_url_match_action: - Choices: `one-time-redirect`, `redirect-on-no-match`
        :param pulumi.Input[str] service_policy_qos_input: Configure input Qos policy
        :param pulumi.Input[str] service_policy_qos_output: Configure output Qos policy
        :param pulumi.Input[int] sgt: SGT tag - Range: `2`-`65519`
        :param pulumi.Input[Sequence[pulumi.Input['ServiceTemplateTagArgs']]] tags: tag name
        :param pulumi.Input[str] tunnel_capwap_name: tunnel profile name
        :param pulumi.Input[int] vlan: Vlan to be applied - Range: `1`-`4094`
        :param pulumi.Input[str] vnid: Vnid to be applied
        :param pulumi.Input[bool] voice_vlan: Critical voice vlan
        """
        if absolute_timer is not None:
            pulumi.set(__self__, "absolute_timer", absolute_timer)
        if access_groups is not None:
            pulumi.set(__self__, "access_groups", access_groups)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if dns_acl_preauth is not None:
            pulumi.set(__self__, "dns_acl_preauth", dns_acl_preauth)
        if ianctivity_timer is not None:
            pulumi.set(__self__, "ianctivity_timer", ianctivity_timer)
        if inactivity_timer_probe is not None:
            pulumi.set(__self__, "inactivity_timer_probe", inactivity_timer_probe)
        if interface_templates is not None:
            pulumi.set(__self__, "interface_templates", interface_templates)
        if linksec_policy is not None:
            pulumi.set(__self__, "linksec_policy", linksec_policy)
        if mdns_service_policy is not None:
            pulumi.set(__self__, "mdns_service_policy", mdns_service_policy)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if redirect_append_client_mac is not None:
            pulumi.set(__self__, "redirect_append_client_mac", redirect_append_client_mac)
        if redirect_append_switch_mac is not None:
            pulumi.set(__self__, "redirect_append_switch_mac", redirect_append_switch_mac)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if redirect_url_match_acl is not None:
            pulumi.set(__self__, "redirect_url_match_acl", redirect_url_match_acl)
        if redirect_url_match_action is not None:
            pulumi.set(__self__, "redirect_url_match_action", redirect_url_match_action)
        if service_policy_qos_input is not None:
            pulumi.set(__self__, "service_policy_qos_input", service_policy_qos_input)
        if service_policy_qos_output is not None:
            pulumi.set(__self__, "service_policy_qos_output", service_policy_qos_output)
        if sgt is not None:
            pulumi.set(__self__, "sgt", sgt)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tunnel_capwap_name is not None:
            pulumi.set(__self__, "tunnel_capwap_name", tunnel_capwap_name)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)
        if vnid is not None:
            pulumi.set(__self__, "vnid", vnid)
        if voice_vlan is not None:
            pulumi.set(__self__, "voice_vlan", voice_vlan)

    @property
    @pulumi.getter(name="absoluteTimer")
    def absolute_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Enter a value between 1 and 1073741823 - Range: `1`-`1073741823`
        """
        return pulumi.get(self, "absolute_timer")

    @absolute_timer.setter
    def absolute_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "absolute_timer", value)

    @property
    @pulumi.getter(name="accessGroups")
    def access_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTemplateAccessGroupArgs']]]]:
        """
        Access list to be applied
        """
        return pulumi.get(self, "access_groups")

    @access_groups.setter
    def access_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTemplateAccessGroupArgs']]]]):
        pulumi.set(self, "access_groups", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Enter a description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="dnsAclPreauth")
    def dns_acl_preauth(self) -> Optional[pulumi.Input[str]]:
        """
        pre-authentication
        """
        return pulumi.get(self, "dns_acl_preauth")

    @dns_acl_preauth.setter
    def dns_acl_preauth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_acl_preauth", value)

    @property
    @pulumi.getter(name="ianctivityTimer")
    def ianctivity_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Enter a value between 1 and 65535 - Range: `1`-`65535`
        """
        return pulumi.get(self, "ianctivity_timer")

    @ianctivity_timer.setter
    def ianctivity_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ianctivity_timer", value)

    @property
    @pulumi.getter(name="inactivityTimerProbe")
    def inactivity_timer_probe(self) -> Optional[pulumi.Input[bool]]:
        """
        ARP probe
        """
        return pulumi.get(self, "inactivity_timer_probe")

    @inactivity_timer_probe.setter
    def inactivity_timer_probe(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inactivity_timer_probe", value)

    @property
    @pulumi.getter(name="interfaceTemplates")
    def interface_templates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTemplateInterfaceTemplateArgs']]]]:
        """
        Interface template to be applied
        """
        return pulumi.get(self, "interface_templates")

    @interface_templates.setter
    def interface_templates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTemplateInterfaceTemplateArgs']]]]):
        pulumi.set(self, "interface_templates", value)

    @property
    @pulumi.getter(name="linksecPolicy")
    def linksec_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Set the link security policy - Choices: `must-not-secure`, `must-secure`, `should-secure`
        """
        return pulumi.get(self, "linksec_policy")

    @linksec_policy.setter
    def linksec_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "linksec_policy", value)

    @property
    @pulumi.getter(name="mdnsServicePolicy")
    def mdns_service_policy(self) -> Optional[pulumi.Input[str]]:
        """
        mdns policy to be applied
        """
        return pulumi.get(self, "mdns_service_policy")

    @mdns_service_policy.setter
    def mdns_service_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mdns_service_policy", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a template name (maximum 48 characters)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="redirectAppendClientMac")
    def redirect_append_client_mac(self) -> Optional[pulumi.Input[str]]:
        """
        Append client Mac Address in redirect URL
        """
        return pulumi.get(self, "redirect_append_client_mac")

    @redirect_append_client_mac.setter
    def redirect_append_client_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_append_client_mac", value)

    @property
    @pulumi.getter(name="redirectAppendSwitchMac")
    def redirect_append_switch_mac(self) -> Optional[pulumi.Input[str]]:
        """
        Append switch Mac Address in redirect URL
        """
        return pulumi.get(self, "redirect_append_switch_mac")

    @redirect_append_switch_mac.setter
    def redirect_append_switch_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_append_switch_mac", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a valid URL
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="redirectUrlMatchAcl")
    def redirect_url_match_acl(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the access list name
        """
        return pulumi.get(self, "redirect_url_match_acl")

    @redirect_url_match_acl.setter
    def redirect_url_match_acl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url_match_acl", value)

    @property
    @pulumi.getter(name="redirectUrlMatchAction")
    def redirect_url_match_action(self) -> Optional[pulumi.Input[str]]:
        """
        - Choices: `one-time-redirect`, `redirect-on-no-match`
        """
        return pulumi.get(self, "redirect_url_match_action")

    @redirect_url_match_action.setter
    def redirect_url_match_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url_match_action", value)

    @property
    @pulumi.getter(name="servicePolicyQosInput")
    def service_policy_qos_input(self) -> Optional[pulumi.Input[str]]:
        """
        Configure input Qos policy
        """
        return pulumi.get(self, "service_policy_qos_input")

    @service_policy_qos_input.setter
    def service_policy_qos_input(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_policy_qos_input", value)

    @property
    @pulumi.getter(name="servicePolicyQosOutput")
    def service_policy_qos_output(self) -> Optional[pulumi.Input[str]]:
        """
        Configure output Qos policy
        """
        return pulumi.get(self, "service_policy_qos_output")

    @service_policy_qos_output.setter
    def service_policy_qos_output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_policy_qos_output", value)

    @property
    @pulumi.getter
    def sgt(self) -> Optional[pulumi.Input[int]]:
        """
        SGT tag - Range: `2`-`65519`
        """
        return pulumi.get(self, "sgt")

    @sgt.setter
    def sgt(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sgt", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTemplateTagArgs']]]]:
        """
        tag name
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTemplateTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tunnelCapwapName")
    def tunnel_capwap_name(self) -> Optional[pulumi.Input[str]]:
        """
        tunnel profile name
        """
        return pulumi.get(self, "tunnel_capwap_name")

    @tunnel_capwap_name.setter
    def tunnel_capwap_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_capwap_name", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        """
        Vlan to be applied - Range: `1`-`4094`
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)

    @property
    @pulumi.getter
    def vnid(self) -> Optional[pulumi.Input[str]]:
        """
        Vnid to be applied
        """
        return pulumi.get(self, "vnid")

    @vnid.setter
    def vnid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vnid", value)

    @property
    @pulumi.getter(name="voiceVlan")
    def voice_vlan(self) -> Optional[pulumi.Input[bool]]:
        """
        Critical voice vlan
        """
        return pulumi.get(self, "voice_vlan")

    @voice_vlan.setter
    def voice_vlan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "voice_vlan", value)


@pulumi.input_type
class _ServiceTemplateState:
    def __init__(__self__, *,
                 absolute_timer: Optional[pulumi.Input[int]] = None,
                 access_groups: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTemplateAccessGroupArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 dns_acl_preauth: Optional[pulumi.Input[str]] = None,
                 ianctivity_timer: Optional[pulumi.Input[int]] = None,
                 inactivity_timer_probe: Optional[pulumi.Input[bool]] = None,
                 interface_templates: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTemplateInterfaceTemplateArgs']]]] = None,
                 linksec_policy: Optional[pulumi.Input[str]] = None,
                 mdns_service_policy: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 redirect_append_client_mac: Optional[pulumi.Input[str]] = None,
                 redirect_append_switch_mac: Optional[pulumi.Input[str]] = None,
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 redirect_url_match_acl: Optional[pulumi.Input[str]] = None,
                 redirect_url_match_action: Optional[pulumi.Input[str]] = None,
                 service_policy_qos_input: Optional[pulumi.Input[str]] = None,
                 service_policy_qos_output: Optional[pulumi.Input[str]] = None,
                 sgt: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTemplateTagArgs']]]] = None,
                 tunnel_capwap_name: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None,
                 vnid: Optional[pulumi.Input[str]] = None,
                 voice_vlan: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering ServiceTemplate resources.
        :param pulumi.Input[int] absolute_timer: Enter a value between 1 and 1073741823 - Range: `1`-`1073741823`
        :param pulumi.Input[Sequence[pulumi.Input['ServiceTemplateAccessGroupArgs']]] access_groups: Access list to be applied
        :param pulumi.Input[str] description: Enter a description
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] dns_acl_preauth: pre-authentication
        :param pulumi.Input[int] ianctivity_timer: Enter a value between 1 and 65535 - Range: `1`-`65535`
        :param pulumi.Input[bool] inactivity_timer_probe: ARP probe
        :param pulumi.Input[Sequence[pulumi.Input['ServiceTemplateInterfaceTemplateArgs']]] interface_templates: Interface template to be applied
        :param pulumi.Input[str] linksec_policy: Set the link security policy - Choices: `must-not-secure`, `must-secure`, `should-secure`
        :param pulumi.Input[str] mdns_service_policy: mdns policy to be applied
        :param pulumi.Input[str] name: Specify a template name (maximum 48 characters)
        :param pulumi.Input[str] redirect_append_client_mac: Append client Mac Address in redirect URL
        :param pulumi.Input[str] redirect_append_switch_mac: Append switch Mac Address in redirect URL
        :param pulumi.Input[str] redirect_url: Specify a valid URL
        :param pulumi.Input[str] redirect_url_match_acl: Specify the access list name
        :param pulumi.Input[str] redirect_url_match_action: - Choices: `one-time-redirect`, `redirect-on-no-match`
        :param pulumi.Input[str] service_policy_qos_input: Configure input Qos policy
        :param pulumi.Input[str] service_policy_qos_output: Configure output Qos policy
        :param pulumi.Input[int] sgt: SGT tag - Range: `2`-`65519`
        :param pulumi.Input[Sequence[pulumi.Input['ServiceTemplateTagArgs']]] tags: tag name
        :param pulumi.Input[str] tunnel_capwap_name: tunnel profile name
        :param pulumi.Input[int] vlan: Vlan to be applied - Range: `1`-`4094`
        :param pulumi.Input[str] vnid: Vnid to be applied
        :param pulumi.Input[bool] voice_vlan: Critical voice vlan
        """
        if absolute_timer is not None:
            pulumi.set(__self__, "absolute_timer", absolute_timer)
        if access_groups is not None:
            pulumi.set(__self__, "access_groups", access_groups)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if dns_acl_preauth is not None:
            pulumi.set(__self__, "dns_acl_preauth", dns_acl_preauth)
        if ianctivity_timer is not None:
            pulumi.set(__self__, "ianctivity_timer", ianctivity_timer)
        if inactivity_timer_probe is not None:
            pulumi.set(__self__, "inactivity_timer_probe", inactivity_timer_probe)
        if interface_templates is not None:
            pulumi.set(__self__, "interface_templates", interface_templates)
        if linksec_policy is not None:
            pulumi.set(__self__, "linksec_policy", linksec_policy)
        if mdns_service_policy is not None:
            pulumi.set(__self__, "mdns_service_policy", mdns_service_policy)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if redirect_append_client_mac is not None:
            pulumi.set(__self__, "redirect_append_client_mac", redirect_append_client_mac)
        if redirect_append_switch_mac is not None:
            pulumi.set(__self__, "redirect_append_switch_mac", redirect_append_switch_mac)
        if redirect_url is not None:
            pulumi.set(__self__, "redirect_url", redirect_url)
        if redirect_url_match_acl is not None:
            pulumi.set(__self__, "redirect_url_match_acl", redirect_url_match_acl)
        if redirect_url_match_action is not None:
            pulumi.set(__self__, "redirect_url_match_action", redirect_url_match_action)
        if service_policy_qos_input is not None:
            pulumi.set(__self__, "service_policy_qos_input", service_policy_qos_input)
        if service_policy_qos_output is not None:
            pulumi.set(__self__, "service_policy_qos_output", service_policy_qos_output)
        if sgt is not None:
            pulumi.set(__self__, "sgt", sgt)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tunnel_capwap_name is not None:
            pulumi.set(__self__, "tunnel_capwap_name", tunnel_capwap_name)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)
        if vnid is not None:
            pulumi.set(__self__, "vnid", vnid)
        if voice_vlan is not None:
            pulumi.set(__self__, "voice_vlan", voice_vlan)

    @property
    @pulumi.getter(name="absoluteTimer")
    def absolute_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Enter a value between 1 and 1073741823 - Range: `1`-`1073741823`
        """
        return pulumi.get(self, "absolute_timer")

    @absolute_timer.setter
    def absolute_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "absolute_timer", value)

    @property
    @pulumi.getter(name="accessGroups")
    def access_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTemplateAccessGroupArgs']]]]:
        """
        Access list to be applied
        """
        return pulumi.get(self, "access_groups")

    @access_groups.setter
    def access_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTemplateAccessGroupArgs']]]]):
        pulumi.set(self, "access_groups", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Enter a description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="dnsAclPreauth")
    def dns_acl_preauth(self) -> Optional[pulumi.Input[str]]:
        """
        pre-authentication
        """
        return pulumi.get(self, "dns_acl_preauth")

    @dns_acl_preauth.setter
    def dns_acl_preauth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_acl_preauth", value)

    @property
    @pulumi.getter(name="ianctivityTimer")
    def ianctivity_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Enter a value between 1 and 65535 - Range: `1`-`65535`
        """
        return pulumi.get(self, "ianctivity_timer")

    @ianctivity_timer.setter
    def ianctivity_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ianctivity_timer", value)

    @property
    @pulumi.getter(name="inactivityTimerProbe")
    def inactivity_timer_probe(self) -> Optional[pulumi.Input[bool]]:
        """
        ARP probe
        """
        return pulumi.get(self, "inactivity_timer_probe")

    @inactivity_timer_probe.setter
    def inactivity_timer_probe(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inactivity_timer_probe", value)

    @property
    @pulumi.getter(name="interfaceTemplates")
    def interface_templates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTemplateInterfaceTemplateArgs']]]]:
        """
        Interface template to be applied
        """
        return pulumi.get(self, "interface_templates")

    @interface_templates.setter
    def interface_templates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTemplateInterfaceTemplateArgs']]]]):
        pulumi.set(self, "interface_templates", value)

    @property
    @pulumi.getter(name="linksecPolicy")
    def linksec_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Set the link security policy - Choices: `must-not-secure`, `must-secure`, `should-secure`
        """
        return pulumi.get(self, "linksec_policy")

    @linksec_policy.setter
    def linksec_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "linksec_policy", value)

    @property
    @pulumi.getter(name="mdnsServicePolicy")
    def mdns_service_policy(self) -> Optional[pulumi.Input[str]]:
        """
        mdns policy to be applied
        """
        return pulumi.get(self, "mdns_service_policy")

    @mdns_service_policy.setter
    def mdns_service_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mdns_service_policy", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a template name (maximum 48 characters)
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="redirectAppendClientMac")
    def redirect_append_client_mac(self) -> Optional[pulumi.Input[str]]:
        """
        Append client Mac Address in redirect URL
        """
        return pulumi.get(self, "redirect_append_client_mac")

    @redirect_append_client_mac.setter
    def redirect_append_client_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_append_client_mac", value)

    @property
    @pulumi.getter(name="redirectAppendSwitchMac")
    def redirect_append_switch_mac(self) -> Optional[pulumi.Input[str]]:
        """
        Append switch Mac Address in redirect URL
        """
        return pulumi.get(self, "redirect_append_switch_mac")

    @redirect_append_switch_mac.setter
    def redirect_append_switch_mac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_append_switch_mac", value)

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a valid URL
        """
        return pulumi.get(self, "redirect_url")

    @redirect_url.setter
    def redirect_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url", value)

    @property
    @pulumi.getter(name="redirectUrlMatchAcl")
    def redirect_url_match_acl(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the access list name
        """
        return pulumi.get(self, "redirect_url_match_acl")

    @redirect_url_match_acl.setter
    def redirect_url_match_acl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url_match_acl", value)

    @property
    @pulumi.getter(name="redirectUrlMatchAction")
    def redirect_url_match_action(self) -> Optional[pulumi.Input[str]]:
        """
        - Choices: `one-time-redirect`, `redirect-on-no-match`
        """
        return pulumi.get(self, "redirect_url_match_action")

    @redirect_url_match_action.setter
    def redirect_url_match_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_url_match_action", value)

    @property
    @pulumi.getter(name="servicePolicyQosInput")
    def service_policy_qos_input(self) -> Optional[pulumi.Input[str]]:
        """
        Configure input Qos policy
        """
        return pulumi.get(self, "service_policy_qos_input")

    @service_policy_qos_input.setter
    def service_policy_qos_input(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_policy_qos_input", value)

    @property
    @pulumi.getter(name="servicePolicyQosOutput")
    def service_policy_qos_output(self) -> Optional[pulumi.Input[str]]:
        """
        Configure output Qos policy
        """
        return pulumi.get(self, "service_policy_qos_output")

    @service_policy_qos_output.setter
    def service_policy_qos_output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_policy_qos_output", value)

    @property
    @pulumi.getter
    def sgt(self) -> Optional[pulumi.Input[int]]:
        """
        SGT tag - Range: `2`-`65519`
        """
        return pulumi.get(self, "sgt")

    @sgt.setter
    def sgt(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sgt", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTemplateTagArgs']]]]:
        """
        tag name
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceTemplateTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tunnelCapwapName")
    def tunnel_capwap_name(self) -> Optional[pulumi.Input[str]]:
        """
        tunnel profile name
        """
        return pulumi.get(self, "tunnel_capwap_name")

    @tunnel_capwap_name.setter
    def tunnel_capwap_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_capwap_name", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[int]]:
        """
        Vlan to be applied - Range: `1`-`4094`
        """
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan", value)

    @property
    @pulumi.getter
    def vnid(self) -> Optional[pulumi.Input[str]]:
        """
        Vnid to be applied
        """
        return pulumi.get(self, "vnid")

    @vnid.setter
    def vnid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vnid", value)

    @property
    @pulumi.getter(name="voiceVlan")
    def voice_vlan(self) -> Optional[pulumi.Input[bool]]:
        """
        Critical voice vlan
        """
        return pulumi.get(self, "voice_vlan")

    @voice_vlan.setter
    def voice_vlan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "voice_vlan", value)


class ServiceTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 absolute_timer: Optional[pulumi.Input[int]] = None,
                 access_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceTemplateAccessGroupArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 dns_acl_preauth: Optional[pulumi.Input[str]] = None,
                 ianctivity_timer: Optional[pulumi.Input[int]] = None,
                 inactivity_timer_probe: Optional[pulumi.Input[bool]] = None,
                 interface_templates: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceTemplateInterfaceTemplateArgs']]]]] = None,
                 linksec_policy: Optional[pulumi.Input[str]] = None,
                 mdns_service_policy: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 redirect_append_client_mac: Optional[pulumi.Input[str]] = None,
                 redirect_append_switch_mac: Optional[pulumi.Input[str]] = None,
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 redirect_url_match_acl: Optional[pulumi.Input[str]] = None,
                 redirect_url_match_action: Optional[pulumi.Input[str]] = None,
                 service_policy_qos_input: Optional[pulumi.Input[str]] = None,
                 service_policy_qos_output: Optional[pulumi.Input[str]] = None,
                 sgt: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceTemplateTagArgs']]]]] = None,
                 tunnel_capwap_name: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None,
                 vnid: Optional[pulumi.Input[str]] = None,
                 voice_vlan: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        This resource can manage the Service Template configuration.

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_iosxe as iosxe

        example = iosxe.ServiceTemplate("example",
            absolute_timer=45,
            access_groups=[iosxe.ServiceTemplateAccessGroupArgs(
                name="ag1",
            )],
            description="service_template_desc",
            dns_acl_preauth="dns_acl_name",
            ianctivity_timer=25,
            inactivity_timer_probe=False,
            interface_templates=[iosxe.ServiceTemplateInterfaceTemplateArgs(
                name="template1",
            )],
            linksec_policy="must-secure",
            redirect_append_client_mac="00:01:00:01:00:01",
            redirect_append_switch_mac="00:01:00:01:00:02",
            redirect_url="valid_url",
            redirect_url_match_acl="acl_name",
            redirect_url_match_action="redirect-on-no-match",
            service_policy_qos_input="input_qos",
            service_policy_qos_output="output_qos",
            sgt=57,
            tags=[iosxe.ServiceTemplateTagArgs(
                name="tag_name",
            )],
            tunnel_capwap_name="TUN1",
            vlan=27,
            vnid="12345",
            voice_vlan=False)
        ```

        ## Import

        ```sh
         $ pulumi import iosxe:index/serviceTemplate:ServiceTemplate example "Cisco-IOS-XE-native:native/Cisco-IOS-XE-switch:service-template=MY_TEMPLATE"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] absolute_timer: Enter a value between 1 and 1073741823 - Range: `1`-`1073741823`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceTemplateAccessGroupArgs']]]] access_groups: Access list to be applied
        :param pulumi.Input[str] description: Enter a description
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] dns_acl_preauth: pre-authentication
        :param pulumi.Input[int] ianctivity_timer: Enter a value between 1 and 65535 - Range: `1`-`65535`
        :param pulumi.Input[bool] inactivity_timer_probe: ARP probe
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceTemplateInterfaceTemplateArgs']]]] interface_templates: Interface template to be applied
        :param pulumi.Input[str] linksec_policy: Set the link security policy - Choices: `must-not-secure`, `must-secure`, `should-secure`
        :param pulumi.Input[str] mdns_service_policy: mdns policy to be applied
        :param pulumi.Input[str] name: Specify a template name (maximum 48 characters)
        :param pulumi.Input[str] redirect_append_client_mac: Append client Mac Address in redirect URL
        :param pulumi.Input[str] redirect_append_switch_mac: Append switch Mac Address in redirect URL
        :param pulumi.Input[str] redirect_url: Specify a valid URL
        :param pulumi.Input[str] redirect_url_match_acl: Specify the access list name
        :param pulumi.Input[str] redirect_url_match_action: - Choices: `one-time-redirect`, `redirect-on-no-match`
        :param pulumi.Input[str] service_policy_qos_input: Configure input Qos policy
        :param pulumi.Input[str] service_policy_qos_output: Configure output Qos policy
        :param pulumi.Input[int] sgt: SGT tag - Range: `2`-`65519`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceTemplateTagArgs']]]] tags: tag name
        :param pulumi.Input[str] tunnel_capwap_name: tunnel profile name
        :param pulumi.Input[int] vlan: Vlan to be applied - Range: `1`-`4094`
        :param pulumi.Input[str] vnid: Vnid to be applied
        :param pulumi.Input[bool] voice_vlan: Critical voice vlan
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ServiceTemplateArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the Service Template configuration.

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_iosxe as iosxe

        example = iosxe.ServiceTemplate("example",
            absolute_timer=45,
            access_groups=[iosxe.ServiceTemplateAccessGroupArgs(
                name="ag1",
            )],
            description="service_template_desc",
            dns_acl_preauth="dns_acl_name",
            ianctivity_timer=25,
            inactivity_timer_probe=False,
            interface_templates=[iosxe.ServiceTemplateInterfaceTemplateArgs(
                name="template1",
            )],
            linksec_policy="must-secure",
            redirect_append_client_mac="00:01:00:01:00:01",
            redirect_append_switch_mac="00:01:00:01:00:02",
            redirect_url="valid_url",
            redirect_url_match_acl="acl_name",
            redirect_url_match_action="redirect-on-no-match",
            service_policy_qos_input="input_qos",
            service_policy_qos_output="output_qos",
            sgt=57,
            tags=[iosxe.ServiceTemplateTagArgs(
                name="tag_name",
            )],
            tunnel_capwap_name="TUN1",
            vlan=27,
            vnid="12345",
            voice_vlan=False)
        ```

        ## Import

        ```sh
         $ pulumi import iosxe:index/serviceTemplate:ServiceTemplate example "Cisco-IOS-XE-native:native/Cisco-IOS-XE-switch:service-template=MY_TEMPLATE"
        ```

        :param str resource_name: The name of the resource.
        :param ServiceTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 absolute_timer: Optional[pulumi.Input[int]] = None,
                 access_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceTemplateAccessGroupArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 dns_acl_preauth: Optional[pulumi.Input[str]] = None,
                 ianctivity_timer: Optional[pulumi.Input[int]] = None,
                 inactivity_timer_probe: Optional[pulumi.Input[bool]] = None,
                 interface_templates: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceTemplateInterfaceTemplateArgs']]]]] = None,
                 linksec_policy: Optional[pulumi.Input[str]] = None,
                 mdns_service_policy: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 redirect_append_client_mac: Optional[pulumi.Input[str]] = None,
                 redirect_append_switch_mac: Optional[pulumi.Input[str]] = None,
                 redirect_url: Optional[pulumi.Input[str]] = None,
                 redirect_url_match_acl: Optional[pulumi.Input[str]] = None,
                 redirect_url_match_action: Optional[pulumi.Input[str]] = None,
                 service_policy_qos_input: Optional[pulumi.Input[str]] = None,
                 service_policy_qos_output: Optional[pulumi.Input[str]] = None,
                 sgt: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceTemplateTagArgs']]]]] = None,
                 tunnel_capwap_name: Optional[pulumi.Input[str]] = None,
                 vlan: Optional[pulumi.Input[int]] = None,
                 vnid: Optional[pulumi.Input[str]] = None,
                 voice_vlan: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceTemplateArgs.__new__(ServiceTemplateArgs)

            __props__.__dict__["absolute_timer"] = absolute_timer
            __props__.__dict__["access_groups"] = access_groups
            __props__.__dict__["description"] = description
            __props__.__dict__["device"] = device
            __props__.__dict__["dns_acl_preauth"] = dns_acl_preauth
            __props__.__dict__["ianctivity_timer"] = ianctivity_timer
            __props__.__dict__["inactivity_timer_probe"] = inactivity_timer_probe
            __props__.__dict__["interface_templates"] = interface_templates
            __props__.__dict__["linksec_policy"] = linksec_policy
            __props__.__dict__["mdns_service_policy"] = mdns_service_policy
            __props__.__dict__["name"] = name
            __props__.__dict__["redirect_append_client_mac"] = redirect_append_client_mac
            __props__.__dict__["redirect_append_switch_mac"] = redirect_append_switch_mac
            __props__.__dict__["redirect_url"] = redirect_url
            __props__.__dict__["redirect_url_match_acl"] = redirect_url_match_acl
            __props__.__dict__["redirect_url_match_action"] = redirect_url_match_action
            __props__.__dict__["service_policy_qos_input"] = service_policy_qos_input
            __props__.__dict__["service_policy_qos_output"] = service_policy_qos_output
            __props__.__dict__["sgt"] = sgt
            __props__.__dict__["tags"] = tags
            __props__.__dict__["tunnel_capwap_name"] = tunnel_capwap_name
            __props__.__dict__["vlan"] = vlan
            __props__.__dict__["vnid"] = vnid
            __props__.__dict__["voice_vlan"] = voice_vlan
        super(ServiceTemplate, __self__).__init__(
            'iosxe:index/serviceTemplate:ServiceTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            absolute_timer: Optional[pulumi.Input[int]] = None,
            access_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceTemplateAccessGroupArgs']]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            dns_acl_preauth: Optional[pulumi.Input[str]] = None,
            ianctivity_timer: Optional[pulumi.Input[int]] = None,
            inactivity_timer_probe: Optional[pulumi.Input[bool]] = None,
            interface_templates: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceTemplateInterfaceTemplateArgs']]]]] = None,
            linksec_policy: Optional[pulumi.Input[str]] = None,
            mdns_service_policy: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            redirect_append_client_mac: Optional[pulumi.Input[str]] = None,
            redirect_append_switch_mac: Optional[pulumi.Input[str]] = None,
            redirect_url: Optional[pulumi.Input[str]] = None,
            redirect_url_match_acl: Optional[pulumi.Input[str]] = None,
            redirect_url_match_action: Optional[pulumi.Input[str]] = None,
            service_policy_qos_input: Optional[pulumi.Input[str]] = None,
            service_policy_qos_output: Optional[pulumi.Input[str]] = None,
            sgt: Optional[pulumi.Input[int]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceTemplateTagArgs']]]]] = None,
            tunnel_capwap_name: Optional[pulumi.Input[str]] = None,
            vlan: Optional[pulumi.Input[int]] = None,
            vnid: Optional[pulumi.Input[str]] = None,
            voice_vlan: Optional[pulumi.Input[bool]] = None) -> 'ServiceTemplate':
        """
        Get an existing ServiceTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] absolute_timer: Enter a value between 1 and 1073741823 - Range: `1`-`1073741823`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceTemplateAccessGroupArgs']]]] access_groups: Access list to be applied
        :param pulumi.Input[str] description: Enter a description
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] dns_acl_preauth: pre-authentication
        :param pulumi.Input[int] ianctivity_timer: Enter a value between 1 and 65535 - Range: `1`-`65535`
        :param pulumi.Input[bool] inactivity_timer_probe: ARP probe
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceTemplateInterfaceTemplateArgs']]]] interface_templates: Interface template to be applied
        :param pulumi.Input[str] linksec_policy: Set the link security policy - Choices: `must-not-secure`, `must-secure`, `should-secure`
        :param pulumi.Input[str] mdns_service_policy: mdns policy to be applied
        :param pulumi.Input[str] name: Specify a template name (maximum 48 characters)
        :param pulumi.Input[str] redirect_append_client_mac: Append client Mac Address in redirect URL
        :param pulumi.Input[str] redirect_append_switch_mac: Append switch Mac Address in redirect URL
        :param pulumi.Input[str] redirect_url: Specify a valid URL
        :param pulumi.Input[str] redirect_url_match_acl: Specify the access list name
        :param pulumi.Input[str] redirect_url_match_action: - Choices: `one-time-redirect`, `redirect-on-no-match`
        :param pulumi.Input[str] service_policy_qos_input: Configure input Qos policy
        :param pulumi.Input[str] service_policy_qos_output: Configure output Qos policy
        :param pulumi.Input[int] sgt: SGT tag - Range: `2`-`65519`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceTemplateTagArgs']]]] tags: tag name
        :param pulumi.Input[str] tunnel_capwap_name: tunnel profile name
        :param pulumi.Input[int] vlan: Vlan to be applied - Range: `1`-`4094`
        :param pulumi.Input[str] vnid: Vnid to be applied
        :param pulumi.Input[bool] voice_vlan: Critical voice vlan
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceTemplateState.__new__(_ServiceTemplateState)

        __props__.__dict__["absolute_timer"] = absolute_timer
        __props__.__dict__["access_groups"] = access_groups
        __props__.__dict__["description"] = description
        __props__.__dict__["device"] = device
        __props__.__dict__["dns_acl_preauth"] = dns_acl_preauth
        __props__.__dict__["ianctivity_timer"] = ianctivity_timer
        __props__.__dict__["inactivity_timer_probe"] = inactivity_timer_probe
        __props__.__dict__["interface_templates"] = interface_templates
        __props__.__dict__["linksec_policy"] = linksec_policy
        __props__.__dict__["mdns_service_policy"] = mdns_service_policy
        __props__.__dict__["name"] = name
        __props__.__dict__["redirect_append_client_mac"] = redirect_append_client_mac
        __props__.__dict__["redirect_append_switch_mac"] = redirect_append_switch_mac
        __props__.__dict__["redirect_url"] = redirect_url
        __props__.__dict__["redirect_url_match_acl"] = redirect_url_match_acl
        __props__.__dict__["redirect_url_match_action"] = redirect_url_match_action
        __props__.__dict__["service_policy_qos_input"] = service_policy_qos_input
        __props__.__dict__["service_policy_qos_output"] = service_policy_qos_output
        __props__.__dict__["sgt"] = sgt
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tunnel_capwap_name"] = tunnel_capwap_name
        __props__.__dict__["vlan"] = vlan
        __props__.__dict__["vnid"] = vnid
        __props__.__dict__["voice_vlan"] = voice_vlan
        return ServiceTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="absoluteTimer")
    def absolute_timer(self) -> pulumi.Output[Optional[int]]:
        """
        Enter a value between 1 and 1073741823 - Range: `1`-`1073741823`
        """
        return pulumi.get(self, "absolute_timer")

    @property
    @pulumi.getter(name="accessGroups")
    def access_groups(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceTemplateAccessGroup']]]:
        """
        Access list to be applied
        """
        return pulumi.get(self, "access_groups")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Enter a description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="dnsAclPreauth")
    def dns_acl_preauth(self) -> pulumi.Output[Optional[str]]:
        """
        pre-authentication
        """
        return pulumi.get(self, "dns_acl_preauth")

    @property
    @pulumi.getter(name="ianctivityTimer")
    def ianctivity_timer(self) -> pulumi.Output[Optional[int]]:
        """
        Enter a value between 1 and 65535 - Range: `1`-`65535`
        """
        return pulumi.get(self, "ianctivity_timer")

    @property
    @pulumi.getter(name="inactivityTimerProbe")
    def inactivity_timer_probe(self) -> pulumi.Output[Optional[bool]]:
        """
        ARP probe
        """
        return pulumi.get(self, "inactivity_timer_probe")

    @property
    @pulumi.getter(name="interfaceTemplates")
    def interface_templates(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceTemplateInterfaceTemplate']]]:
        """
        Interface template to be applied
        """
        return pulumi.get(self, "interface_templates")

    @property
    @pulumi.getter(name="linksecPolicy")
    def linksec_policy(self) -> pulumi.Output[Optional[str]]:
        """
        Set the link security policy - Choices: `must-not-secure`, `must-secure`, `should-secure`
        """
        return pulumi.get(self, "linksec_policy")

    @property
    @pulumi.getter(name="mdnsServicePolicy")
    def mdns_service_policy(self) -> pulumi.Output[Optional[str]]:
        """
        mdns policy to be applied
        """
        return pulumi.get(self, "mdns_service_policy")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Specify a template name (maximum 48 characters)
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="redirectAppendClientMac")
    def redirect_append_client_mac(self) -> pulumi.Output[Optional[str]]:
        """
        Append client Mac Address in redirect URL
        """
        return pulumi.get(self, "redirect_append_client_mac")

    @property
    @pulumi.getter(name="redirectAppendSwitchMac")
    def redirect_append_switch_mac(self) -> pulumi.Output[Optional[str]]:
        """
        Append switch Mac Address in redirect URL
        """
        return pulumi.get(self, "redirect_append_switch_mac")

    @property
    @pulumi.getter(name="redirectUrl")
    def redirect_url(self) -> pulumi.Output[Optional[str]]:
        """
        Specify a valid URL
        """
        return pulumi.get(self, "redirect_url")

    @property
    @pulumi.getter(name="redirectUrlMatchAcl")
    def redirect_url_match_acl(self) -> pulumi.Output[Optional[str]]:
        """
        Specify the access list name
        """
        return pulumi.get(self, "redirect_url_match_acl")

    @property
    @pulumi.getter(name="redirectUrlMatchAction")
    def redirect_url_match_action(self) -> pulumi.Output[Optional[str]]:
        """
        - Choices: `one-time-redirect`, `redirect-on-no-match`
        """
        return pulumi.get(self, "redirect_url_match_action")

    @property
    @pulumi.getter(name="servicePolicyQosInput")
    def service_policy_qos_input(self) -> pulumi.Output[Optional[str]]:
        """
        Configure input Qos policy
        """
        return pulumi.get(self, "service_policy_qos_input")

    @property
    @pulumi.getter(name="servicePolicyQosOutput")
    def service_policy_qos_output(self) -> pulumi.Output[Optional[str]]:
        """
        Configure output Qos policy
        """
        return pulumi.get(self, "service_policy_qos_output")

    @property
    @pulumi.getter
    def sgt(self) -> pulumi.Output[Optional[int]]:
        """
        SGT tag - Range: `2`-`65519`
        """
        return pulumi.get(self, "sgt")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceTemplateTag']]]:
        """
        tag name
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tunnelCapwapName")
    def tunnel_capwap_name(self) -> pulumi.Output[Optional[str]]:
        """
        tunnel profile name
        """
        return pulumi.get(self, "tunnel_capwap_name")

    @property
    @pulumi.getter
    def vlan(self) -> pulumi.Output[Optional[int]]:
        """
        Vlan to be applied - Range: `1`-`4094`
        """
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter
    def vnid(self) -> pulumi.Output[Optional[str]]:
        """
        Vnid to be applied
        """
        return pulumi.get(self, "vnid")

    @property
    @pulumi.getter(name="voiceVlan")
    def voice_vlan(self) -> pulumi.Output[Optional[bool]]:
        """
        Critical voice vlan
        """
        return pulumi.get(self, "voice_vlan")

