# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetInterfaceLoopbackResult',
    'AwaitableGetInterfaceLoopbackResult',
    'get_interface_loopback',
    'get_interface_loopback_output',
]

@pulumi.output_type
class GetInterfaceLoopbackResult:
    """
    A collection of values returned by getInterfaceLoopback.
    """
    def __init__(__self__, arp_timeout=None, description=None, device=None, id=None, ip_access_group_in=None, ip_access_group_in_enable=None, ip_access_group_out=None, ip_access_group_out_enable=None, ip_proxy_arp=None, ip_redirects=None, ip_unreachables=None, ipv4_address=None, ipv4_address_mask=None, ipv6_address_autoconfig_default=None, ipv6_address_dhcp=None, ipv6_addresses=None, ipv6_enable=None, ipv6_link_local_addresses=None, ipv6_mtu=None, ipv6_nd_ra_suppress_all=None, name=None, shutdown=None, vrf_forwarding=None):
        if arp_timeout and not isinstance(arp_timeout, int):
            raise TypeError("Expected argument 'arp_timeout' to be a int")
        pulumi.set(__self__, "arp_timeout", arp_timeout)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_access_group_in and not isinstance(ip_access_group_in, str):
            raise TypeError("Expected argument 'ip_access_group_in' to be a str")
        pulumi.set(__self__, "ip_access_group_in", ip_access_group_in)
        if ip_access_group_in_enable and not isinstance(ip_access_group_in_enable, bool):
            raise TypeError("Expected argument 'ip_access_group_in_enable' to be a bool")
        pulumi.set(__self__, "ip_access_group_in_enable", ip_access_group_in_enable)
        if ip_access_group_out and not isinstance(ip_access_group_out, str):
            raise TypeError("Expected argument 'ip_access_group_out' to be a str")
        pulumi.set(__self__, "ip_access_group_out", ip_access_group_out)
        if ip_access_group_out_enable and not isinstance(ip_access_group_out_enable, bool):
            raise TypeError("Expected argument 'ip_access_group_out_enable' to be a bool")
        pulumi.set(__self__, "ip_access_group_out_enable", ip_access_group_out_enable)
        if ip_proxy_arp and not isinstance(ip_proxy_arp, bool):
            raise TypeError("Expected argument 'ip_proxy_arp' to be a bool")
        pulumi.set(__self__, "ip_proxy_arp", ip_proxy_arp)
        if ip_redirects and not isinstance(ip_redirects, bool):
            raise TypeError("Expected argument 'ip_redirects' to be a bool")
        pulumi.set(__self__, "ip_redirects", ip_redirects)
        if ip_unreachables and not isinstance(ip_unreachables, bool):
            raise TypeError("Expected argument 'ip_unreachables' to be a bool")
        pulumi.set(__self__, "ip_unreachables", ip_unreachables)
        if ipv4_address and not isinstance(ipv4_address, str):
            raise TypeError("Expected argument 'ipv4_address' to be a str")
        pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_address_mask and not isinstance(ipv4_address_mask, str):
            raise TypeError("Expected argument 'ipv4_address_mask' to be a str")
        pulumi.set(__self__, "ipv4_address_mask", ipv4_address_mask)
        if ipv6_address_autoconfig_default and not isinstance(ipv6_address_autoconfig_default, bool):
            raise TypeError("Expected argument 'ipv6_address_autoconfig_default' to be a bool")
        pulumi.set(__self__, "ipv6_address_autoconfig_default", ipv6_address_autoconfig_default)
        if ipv6_address_dhcp and not isinstance(ipv6_address_dhcp, bool):
            raise TypeError("Expected argument 'ipv6_address_dhcp' to be a bool")
        pulumi.set(__self__, "ipv6_address_dhcp", ipv6_address_dhcp)
        if ipv6_addresses and not isinstance(ipv6_addresses, list):
            raise TypeError("Expected argument 'ipv6_addresses' to be a list")
        pulumi.set(__self__, "ipv6_addresses", ipv6_addresses)
        if ipv6_enable and not isinstance(ipv6_enable, bool):
            raise TypeError("Expected argument 'ipv6_enable' to be a bool")
        pulumi.set(__self__, "ipv6_enable", ipv6_enable)
        if ipv6_link_local_addresses and not isinstance(ipv6_link_local_addresses, list):
            raise TypeError("Expected argument 'ipv6_link_local_addresses' to be a list")
        pulumi.set(__self__, "ipv6_link_local_addresses", ipv6_link_local_addresses)
        if ipv6_mtu and not isinstance(ipv6_mtu, int):
            raise TypeError("Expected argument 'ipv6_mtu' to be a int")
        pulumi.set(__self__, "ipv6_mtu", ipv6_mtu)
        if ipv6_nd_ra_suppress_all and not isinstance(ipv6_nd_ra_suppress_all, bool):
            raise TypeError("Expected argument 'ipv6_nd_ra_suppress_all' to be a bool")
        pulumi.set(__self__, "ipv6_nd_ra_suppress_all", ipv6_nd_ra_suppress_all)
        if name and not isinstance(name, int):
            raise TypeError("Expected argument 'name' to be a int")
        pulumi.set(__self__, "name", name)
        if shutdown and not isinstance(shutdown, bool):
            raise TypeError("Expected argument 'shutdown' to be a bool")
        pulumi.set(__self__, "shutdown", shutdown)
        if vrf_forwarding and not isinstance(vrf_forwarding, str):
            raise TypeError("Expected argument 'vrf_forwarding' to be a str")
        pulumi.set(__self__, "vrf_forwarding", vrf_forwarding)

    @property
    @pulumi.getter(name="arpTimeout")
    def arp_timeout(self) -> int:
        """
        Set ARP cache timeout
        """
        return pulumi.get(self, "arp_timeout")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Interface specific description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The path of the retrieved object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAccessGroupIn")
    def ip_access_group_in(self) -> str:
        return pulumi.get(self, "ip_access_group_in")

    @property
    @pulumi.getter(name="ipAccessGroupInEnable")
    def ip_access_group_in_enable(self) -> bool:
        """
        inbound packets
        """
        return pulumi.get(self, "ip_access_group_in_enable")

    @property
    @pulumi.getter(name="ipAccessGroupOut")
    def ip_access_group_out(self) -> str:
        return pulumi.get(self, "ip_access_group_out")

    @property
    @pulumi.getter(name="ipAccessGroupOutEnable")
    def ip_access_group_out_enable(self) -> bool:
        """
        outbound packets
        """
        return pulumi.get(self, "ip_access_group_out_enable")

    @property
    @pulumi.getter(name="ipProxyArp")
    def ip_proxy_arp(self) -> bool:
        """
        Enable proxy ARP
        """
        return pulumi.get(self, "ip_proxy_arp")

    @property
    @pulumi.getter(name="ipRedirects")
    def ip_redirects(self) -> bool:
        """
        Enable sending ICMP Redirect messages
        """
        return pulumi.get(self, "ip_redirects")

    @property
    @pulumi.getter(name="ipUnreachables")
    def ip_unreachables(self) -> bool:
        """
        Enable sending ICMP Unreachable messages
        """
        return pulumi.get(self, "ip_unreachables")

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> str:
        return pulumi.get(self, "ipv4_address")

    @property
    @pulumi.getter(name="ipv4AddressMask")
    def ipv4_address_mask(self) -> str:
        return pulumi.get(self, "ipv4_address_mask")

    @property
    @pulumi.getter(name="ipv6AddressAutoconfigDefault")
    def ipv6_address_autoconfig_default(self) -> bool:
        """
        Insert default route
        """
        return pulumi.get(self, "ipv6_address_autoconfig_default")

    @property
    @pulumi.getter(name="ipv6AddressDhcp")
    def ipv6_address_dhcp(self) -> bool:
        """
        Obtain IPv6 address from DHCP server
        """
        return pulumi.get(self, "ipv6_address_dhcp")

    @property
    @pulumi.getter(name="ipv6Addresses")
    def ipv6_addresses(self) -> Sequence['outputs.GetInterfaceLoopbackIpv6AddressResult']:
        return pulumi.get(self, "ipv6_addresses")

    @property
    @pulumi.getter(name="ipv6Enable")
    def ipv6_enable(self) -> bool:
        """
        Enable IPv6 on interface
        """
        return pulumi.get(self, "ipv6_enable")

    @property
    @pulumi.getter(name="ipv6LinkLocalAddresses")
    def ipv6_link_local_addresses(self) -> Sequence['outputs.GetInterfaceLoopbackIpv6LinkLocalAddressResult']:
        return pulumi.get(self, "ipv6_link_local_addresses")

    @property
    @pulumi.getter(name="ipv6Mtu")
    def ipv6_mtu(self) -> int:
        """
        Set IPv6 Maximum Transmission Unit
        """
        return pulumi.get(self, "ipv6_mtu")

    @property
    @pulumi.getter(name="ipv6NdRaSuppressAll")
    def ipv6_nd_ra_suppress_all(self) -> bool:
        """
        Suppress all IPv6 RA
        """
        return pulumi.get(self, "ipv6_nd_ra_suppress_all")

    @property
    @pulumi.getter
    def name(self) -> int:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def shutdown(self) -> bool:
        """
        Shutdown the selected interface
        """
        return pulumi.get(self, "shutdown")

    @property
    @pulumi.getter(name="vrfForwarding")
    def vrf_forwarding(self) -> str:
        """
        Configure forwarding table
        """
        return pulumi.get(self, "vrf_forwarding")


class AwaitableGetInterfaceLoopbackResult(GetInterfaceLoopbackResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInterfaceLoopbackResult(
            arp_timeout=self.arp_timeout,
            description=self.description,
            device=self.device,
            id=self.id,
            ip_access_group_in=self.ip_access_group_in,
            ip_access_group_in_enable=self.ip_access_group_in_enable,
            ip_access_group_out=self.ip_access_group_out,
            ip_access_group_out_enable=self.ip_access_group_out_enable,
            ip_proxy_arp=self.ip_proxy_arp,
            ip_redirects=self.ip_redirects,
            ip_unreachables=self.ip_unreachables,
            ipv4_address=self.ipv4_address,
            ipv4_address_mask=self.ipv4_address_mask,
            ipv6_address_autoconfig_default=self.ipv6_address_autoconfig_default,
            ipv6_address_dhcp=self.ipv6_address_dhcp,
            ipv6_addresses=self.ipv6_addresses,
            ipv6_enable=self.ipv6_enable,
            ipv6_link_local_addresses=self.ipv6_link_local_addresses,
            ipv6_mtu=self.ipv6_mtu,
            ipv6_nd_ra_suppress_all=self.ipv6_nd_ra_suppress_all,
            name=self.name,
            shutdown=self.shutdown,
            vrf_forwarding=self.vrf_forwarding)


def get_interface_loopback(device: Optional[str] = None,
                           name: Optional[int] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInterfaceLoopbackResult:
    """
    This data source can read the Interface Loopback configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.get_interface_loopback(name=100)
    ```


    :param str device: A device name from the provider configuration.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:index/getInterfaceLoopback:getInterfaceLoopback', __args__, opts=opts, typ=GetInterfaceLoopbackResult).value

    return AwaitableGetInterfaceLoopbackResult(
        arp_timeout=pulumi.get(__ret__, 'arp_timeout'),
        description=pulumi.get(__ret__, 'description'),
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        ip_access_group_in=pulumi.get(__ret__, 'ip_access_group_in'),
        ip_access_group_in_enable=pulumi.get(__ret__, 'ip_access_group_in_enable'),
        ip_access_group_out=pulumi.get(__ret__, 'ip_access_group_out'),
        ip_access_group_out_enable=pulumi.get(__ret__, 'ip_access_group_out_enable'),
        ip_proxy_arp=pulumi.get(__ret__, 'ip_proxy_arp'),
        ip_redirects=pulumi.get(__ret__, 'ip_redirects'),
        ip_unreachables=pulumi.get(__ret__, 'ip_unreachables'),
        ipv4_address=pulumi.get(__ret__, 'ipv4_address'),
        ipv4_address_mask=pulumi.get(__ret__, 'ipv4_address_mask'),
        ipv6_address_autoconfig_default=pulumi.get(__ret__, 'ipv6_address_autoconfig_default'),
        ipv6_address_dhcp=pulumi.get(__ret__, 'ipv6_address_dhcp'),
        ipv6_addresses=pulumi.get(__ret__, 'ipv6_addresses'),
        ipv6_enable=pulumi.get(__ret__, 'ipv6_enable'),
        ipv6_link_local_addresses=pulumi.get(__ret__, 'ipv6_link_local_addresses'),
        ipv6_mtu=pulumi.get(__ret__, 'ipv6_mtu'),
        ipv6_nd_ra_suppress_all=pulumi.get(__ret__, 'ipv6_nd_ra_suppress_all'),
        name=pulumi.get(__ret__, 'name'),
        shutdown=pulumi.get(__ret__, 'shutdown'),
        vrf_forwarding=pulumi.get(__ret__, 'vrf_forwarding'))


@_utilities.lift_output_func(get_interface_loopback)
def get_interface_loopback_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                                  name: Optional[pulumi.Input[int]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInterfaceLoopbackResult]:
    """
    This data source can read the Interface Loopback configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.get_interface_loopback(name=100)
    ```


    :param str device: A device name from the provider configuration.
    """
    ...
