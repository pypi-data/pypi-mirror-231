# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetCryptoIpsecTransformSetResult',
    'AwaitableGetCryptoIpsecTransformSetResult',
    'get_crypto_ipsec_transform_set',
    'get_crypto_ipsec_transform_set_output',
]

@pulumi.output_type
class GetCryptoIpsecTransformSetResult:
    """
    A collection of values returned by getCryptoIpsecTransformSet.
    """
    def __init__(__self__, device=None, esp=None, esp_hmac=None, id=None, mode_tunnel=None, name=None):
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if esp and not isinstance(esp, str):
            raise TypeError("Expected argument 'esp' to be a str")
        pulumi.set(__self__, "esp", esp)
        if esp_hmac and not isinstance(esp_hmac, str):
            raise TypeError("Expected argument 'esp_hmac' to be a str")
        pulumi.set(__self__, "esp_hmac", esp_hmac)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if mode_tunnel and not isinstance(mode_tunnel, bool):
            raise TypeError("Expected argument 'mode_tunnel' to be a bool")
        pulumi.set(__self__, "mode_tunnel", mode_tunnel)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def esp(self) -> str:
        return pulumi.get(self, "esp")

    @property
    @pulumi.getter(name="espHmac")
    def esp_hmac(self) -> str:
        return pulumi.get(self, "esp_hmac")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The path of the retrieved object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modeTunnel")
    def mode_tunnel(self) -> bool:
        """
        tunnel (datagram encapsulation) mode
        """
        return pulumi.get(self, "mode_tunnel")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


class AwaitableGetCryptoIpsecTransformSetResult(GetCryptoIpsecTransformSetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCryptoIpsecTransformSetResult(
            device=self.device,
            esp=self.esp,
            esp_hmac=self.esp_hmac,
            id=self.id,
            mode_tunnel=self.mode_tunnel,
            name=self.name)


def get_crypto_ipsec_transform_set(device: Optional[str] = None,
                                   name: Optional[str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCryptoIpsecTransformSetResult:
    """
    This data source can read the Crypto IPSec Transform Set configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.get_crypto_ipsec_transform_set(name="TEST")
    ```


    :param str device: A device name from the provider configuration.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:index/getCryptoIpsecTransformSet:getCryptoIpsecTransformSet', __args__, opts=opts, typ=GetCryptoIpsecTransformSetResult).value

    return AwaitableGetCryptoIpsecTransformSetResult(
        device=pulumi.get(__ret__, 'device'),
        esp=pulumi.get(__ret__, 'esp'),
        esp_hmac=pulumi.get(__ret__, 'esp_hmac'),
        id=pulumi.get(__ret__, 'id'),
        mode_tunnel=pulumi.get(__ret__, 'mode_tunnel'),
        name=pulumi.get(__ret__, 'name'))


@_utilities.lift_output_func(get_crypto_ipsec_transform_set)
def get_crypto_ipsec_transform_set_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                                          name: Optional[pulumi.Input[str]] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCryptoIpsecTransformSetResult]:
    """
    This data source can read the Crypto IPSec Transform Set configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.get_crypto_ipsec_transform_set(name="TEST")
    ```


    :param str device: A device name from the provider configuration.
    """
    ...
