# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SnmpServerArgs', 'SnmpServer']

@pulumi.input_type
class SnmpServerArgs:
    def __init__(__self__, *,
                 chassis_id: Optional[pulumi.Input[str]] = None,
                 contact: Optional[pulumi.Input[str]] = None,
                 contexts: Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerContextArgs']]]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 enable_informs: Optional[pulumi.Input[bool]] = None,
                 enable_logging_getop: Optional[pulumi.Input[bool]] = None,
                 enable_logging_setop: Optional[pulumi.Input[bool]] = None,
                 enable_traps: Optional[pulumi.Input[bool]] = None,
                 enable_traps_auth_framework_sec_violation: Optional[pulumi.Input[bool]] = None,
                 enable_traps_bfd: Optional[pulumi.Input[bool]] = None,
                 enable_traps_bgp_cbgp2: Optional[pulumi.Input[bool]] = None,
                 enable_traps_bridge_newroot: Optional[pulumi.Input[bool]] = None,
                 enable_traps_bridge_topologychange: Optional[pulumi.Input[bool]] = None,
                 enable_traps_bulkstat_collection: Optional[pulumi.Input[bool]] = None,
                 enable_traps_bulkstat_transfer: Optional[pulumi.Input[bool]] = None,
                 enable_traps_call_home_message_send_fail: Optional[pulumi.Input[bool]] = None,
                 enable_traps_call_home_server_fail: Optional[pulumi.Input[bool]] = None,
                 enable_traps_cef_inconsistency: Optional[pulumi.Input[bool]] = None,
                 enable_traps_cef_peer_fib_state_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_cef_peer_state_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_cef_resource_failure: Optional[pulumi.Input[bool]] = None,
                 enable_traps_config: Optional[pulumi.Input[bool]] = None,
                 enable_traps_config_copy: Optional[pulumi.Input[bool]] = None,
                 enable_traps_config_ctid: Optional[pulumi.Input[bool]] = None,
                 enable_traps_cpu_threshold: Optional[pulumi.Input[bool]] = None,
                 enable_traps_dhcp: Optional[pulumi.Input[bool]] = None,
                 enable_traps_eigrp: Optional[pulumi.Input[bool]] = None,
                 enable_traps_energywise: Optional[pulumi.Input[bool]] = None,
                 enable_traps_entity: Optional[pulumi.Input[bool]] = None,
                 enable_traps_entity_diag_boot_up_fail: Optional[pulumi.Input[bool]] = None,
                 enable_traps_entity_diag_hm_test_recover: Optional[pulumi.Input[bool]] = None,
                 enable_traps_entity_diag_hm_thresh_reached: Optional[pulumi.Input[bool]] = None,
                 enable_traps_entity_diag_scheduled_test_fail: Optional[pulumi.Input[bool]] = None,
                 enable_traps_entity_perf_throughput_notif: Optional[pulumi.Input[bool]] = None,
                 enable_traps_envmon: Optional[pulumi.Input[bool]] = None,
                 enable_traps_errdisable: Optional[pulumi.Input[bool]] = None,
                 enable_traps_event_manager: Optional[pulumi.Input[bool]] = None,
                 enable_traps_fast_reroute_protected: Optional[pulumi.Input[bool]] = None,
                 enable_traps_flash_insertion: Optional[pulumi.Input[bool]] = None,
                 enable_traps_flash_lowspace: Optional[pulumi.Input[bool]] = None,
                 enable_traps_flash_removal: Optional[pulumi.Input[bool]] = None,
                 enable_traps_flowmon: Optional[pulumi.Input[bool]] = None,
                 enable_traps_fru_ctrl: Optional[pulumi.Input[bool]] = None,
                 enable_traps_hsrp: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ike_policy_add: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ike_policy_delete: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ike_tunnel_start: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ike_tunnel_stop: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipmulticast: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsec_cryptomap_add: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsec_cryptomap_attach: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsec_cryptomap_delete: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsec_cryptomap_detach: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsec_too_many_sas: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsec_tunnel_start: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsec_tunnel_stop: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsla: Optional[pulumi.Input[bool]] = None,
                 enable_traps_isis: Optional[pulumi.Input[bool]] = None,
                 enable_traps_license: Optional[pulumi.Input[bool]] = None,
                 enable_traps_local_auth: Optional[pulumi.Input[bool]] = None,
                 enable_traps_mac_notification_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_mac_notification_move: Optional[pulumi.Input[bool]] = None,
                 enable_traps_mac_notification_threshold: Optional[pulumi.Input[bool]] = None,
                 enable_traps_memory_bufferpeak: Optional[pulumi.Input[bool]] = None,
                 enable_traps_mpls_ldp: Optional[pulumi.Input[bool]] = None,
                 enable_traps_mpls_rfc_ldp: Optional[pulumi.Input[bool]] = None,
                 enable_traps_mpls_traffic_eng: Optional[pulumi.Input[bool]] = None,
                 enable_traps_mpls_vpn: Optional[pulumi.Input[bool]] = None,
                 enable_traps_msdp: Optional[pulumi.Input[bool]] = None,
                 enable_traps_nhrp_nhc: Optional[pulumi.Input[bool]] = None,
                 enable_traps_nhrp_nhp: Optional[pulumi.Input[bool]] = None,
                 enable_traps_nhrp_nhs: Optional[pulumi.Input[bool]] = None,
                 enable_traps_nhrp_quota_exceeded: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_config_errors: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_config_lsa: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_config_retransmit: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_config_state_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_errors_enable: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_lsa_enable: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_nssa_trans_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_retransmit_enable: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_shamlink_interface: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_shamlink_neighbor: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospfv3_config_errors: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospfv3_config_state_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_pim_invalid_pim_message: Optional[pulumi.Input[bool]] = None,
                 enable_traps_pim_neighbor_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_pim_rp_mapping_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_port_security: Optional[pulumi.Input[bool]] = None,
                 enable_traps_power_ethernet_group: Optional[pulumi.Input[str]] = None,
                 enable_traps_power_ethernet_police: Optional[pulumi.Input[bool]] = None,
                 enable_traps_pw_vc: Optional[pulumi.Input[bool]] = None,
                 enable_traps_rep: Optional[pulumi.Input[bool]] = None,
                 enable_traps_rf: Optional[pulumi.Input[bool]] = None,
                 enable_traps_smart_license: Optional[pulumi.Input[bool]] = None,
                 enable_traps_snmp_authentication: Optional[pulumi.Input[bool]] = None,
                 enable_traps_snmp_coldstart: Optional[pulumi.Input[bool]] = None,
                 enable_traps_snmp_linkdown: Optional[pulumi.Input[bool]] = None,
                 enable_traps_snmp_linkup: Optional[pulumi.Input[bool]] = None,
                 enable_traps_snmp_warmstart: Optional[pulumi.Input[bool]] = None,
                 enable_traps_stackwise: Optional[pulumi.Input[bool]] = None,
                 enable_traps_stpx_inconsistency: Optional[pulumi.Input[bool]] = None,
                 enable_traps_stpx_loop_inconsistency: Optional[pulumi.Input[bool]] = None,
                 enable_traps_stpx_root_inconsistency: Optional[pulumi.Input[bool]] = None,
                 enable_traps_syslog: Optional[pulumi.Input[bool]] = None,
                 enable_traps_transceiver_all: Optional[pulumi.Input[bool]] = None,
                 enable_traps_tty: Optional[pulumi.Input[bool]] = None,
                 enable_traps_udld_link_fail_rpt: Optional[pulumi.Input[bool]] = None,
                 enable_traps_udld_status_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vlan_membership: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vlancreate: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vlandelete: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vrfmib_vnet_trunk_down: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vrfmib_vnet_trunk_up: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vrfmib_vrf_down: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vrfmib_vrf_up: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vtp: Optional[pulumi.Input[bool]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerHostArgs']]]] = None,
                 ifindex_persist: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 packetsize: Optional[pulumi.Input[int]] = None,
                 queue_length: Optional[pulumi.Input[int]] = None,
                 snmp_communities: Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerSnmpCommunityArgs']]]] = None,
                 source_interface_informs_forty_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 source_interface_informs_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 source_interface_informs_hundred_gig_e: Optional[pulumi.Input[str]] = None,
                 source_interface_informs_loopback: Optional[pulumi.Input[int]] = None,
                 source_interface_informs_port_channel: Optional[pulumi.Input[int]] = None,
                 source_interface_informs_port_channel_subinterface: Optional[pulumi.Input[str]] = None,
                 source_interface_informs_ten_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 source_interface_informs_vlan: Optional[pulumi.Input[int]] = None,
                 source_interface_traps_forty_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 source_interface_traps_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 source_interface_traps_hundred_gig_e: Optional[pulumi.Input[str]] = None,
                 source_interface_traps_loopback: Optional[pulumi.Input[int]] = None,
                 source_interface_traps_port_channel: Optional[pulumi.Input[int]] = None,
                 source_interface_traps_port_channel_subinterface: Optional[pulumi.Input[str]] = None,
                 source_interface_traps_ten_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 source_interface_traps_vlan: Optional[pulumi.Input[int]] = None,
                 system_shutdown: Optional[pulumi.Input[bool]] = None,
                 trap_source_forty_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 trap_source_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 trap_source_hundred_gig_e: Optional[pulumi.Input[str]] = None,
                 trap_source_loopback: Optional[pulumi.Input[int]] = None,
                 trap_source_port_channel: Optional[pulumi.Input[int]] = None,
                 trap_source_port_channel_subinterface: Optional[pulumi.Input[str]] = None,
                 trap_source_ten_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 trap_source_vlan: Optional[pulumi.Input[int]] = None,
                 views: Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerViewArgs']]]] = None):
        """
        The set of arguments for constructing a SnmpServer resource.
        :param pulumi.Input[str] chassis_id: String to uniquely identify this chassis
        :param pulumi.Input[str] contact: Text for mib object sysContact
        :param pulumi.Input[Sequence[pulumi.Input['SnmpServerContextArgs']]] contexts: Create/Delete a context apart from default
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] enable_informs: Enable SNMP Informs
        :param pulumi.Input[bool] enable_logging_getop: Enable SNMP GET Operation logging
        :param pulumi.Input[bool] enable_logging_setop: Enable SNMP SET Operation logging
        :param pulumi.Input[bool] enable_traps: Enable SNMP Traps
        :param pulumi.Input[bool] enable_traps_bgp_cbgp2: Enable BGP MIBv2 traps
        :param pulumi.Input[bool] enable_traps_bulkstat_collection: Enable Data-Collection-MIB Collection notifications
        :param pulumi.Input[bool] enable_traps_bulkstat_transfer: Enable Data-Collection-MIB Transfer notifications
        :param pulumi.Input[bool] enable_traps_config: Enable SNMP config traps
        :param pulumi.Input[bool] enable_traps_config_copy: Enable SNMP config-copy traps
        :param pulumi.Input[bool] enable_traps_cpu_threshold: Allow CPU utilization threshold violation traps
        :param pulumi.Input[bool] enable_traps_dhcp: Enable SNMP dhcp traps
        :param pulumi.Input[bool] enable_traps_eigrp: Enable SNMP EIGRP traps
        :param pulumi.Input[bool] enable_traps_entity: Enable SNMP entity traps
        :param pulumi.Input[bool] enable_traps_entity_diag_boot_up_fail: Enable SNMP ceDiagBootUpFailedNotif traps
        :param pulumi.Input[bool] enable_traps_entity_diag_hm_test_recover: Enable SNMP ceDiagHMTestRecoverNotif traps
        :param pulumi.Input[bool] enable_traps_entity_diag_hm_thresh_reached: Enable SNMP ceDiagHMThresholdReachedNotif traps
        :param pulumi.Input[bool] enable_traps_entity_diag_scheduled_test_fail: Enable SNMP ceDiagScheduledTestFailedNotif traps
        :param pulumi.Input[bool] enable_traps_entity_perf_throughput_notif: Enable ENTITY PERFORMANCE MIB throughput traps
        :param pulumi.Input[bool] enable_traps_envmon: Enable SNMP environmental monitor traps
        :param pulumi.Input[bool] enable_traps_errdisable: Enable SNMP errdisable notifications
        :param pulumi.Input[bool] enable_traps_event_manager: Enable SNMP Embedded Event Manager traps
        :param pulumi.Input[bool] enable_traps_flash_insertion: Enable SNMP Flash Insertion notifications
        :param pulumi.Input[bool] enable_traps_flash_lowspace: Enable SNMP Flash Lowspace notifications
        :param pulumi.Input[bool] enable_traps_flash_removal: Enable SNMP Flash Removal notifications
        :param pulumi.Input[bool] enable_traps_flowmon: Enable SNMP flowmon notifications
        :param pulumi.Input[bool] enable_traps_fru_ctrl: Enable SNMP entity FRU control traps
        :param pulumi.Input[bool] enable_traps_hsrp: Enable SNMP HSRP traps
        :param pulumi.Input[bool] enable_traps_ike_policy_add: Enable IKE Policy add trap
        :param pulumi.Input[bool] enable_traps_ike_policy_delete: Enable IKE Policy delete trap
        :param pulumi.Input[bool] enable_traps_ike_tunnel_start: Enable IKE Tunnel start trap
        :param pulumi.Input[bool] enable_traps_ike_tunnel_stop: Enable IKE Tunnel stop trap
        :param pulumi.Input[bool] enable_traps_ipmulticast: Enable SNMP ipmulticast traps
        :param pulumi.Input[bool] enable_traps_ipsec_cryptomap_add: Enable IPsec Cryptomap add trap
        :param pulumi.Input[bool] enable_traps_ipsec_cryptomap_attach: Enable IPsec Cryptomap Attach trap
        :param pulumi.Input[bool] enable_traps_ipsec_cryptomap_delete: Enable IPsec Cryptomap delete trap
        :param pulumi.Input[bool] enable_traps_ipsec_cryptomap_detach: Enable IPsec Cryptomap Detach trap
        :param pulumi.Input[bool] enable_traps_ipsec_too_many_sas: Enable IPsec Tunnel Start trap
        :param pulumi.Input[bool] enable_traps_ipsec_tunnel_start: Enable IPsec Tunnel Start trap
        :param pulumi.Input[bool] enable_traps_ipsec_tunnel_stop: Enable IPsec Tunnel Stop trap
        :param pulumi.Input[bool] enable_traps_ipsla: Enable IPSLA traps traps
        :param pulumi.Input[bool] enable_traps_isis: Enable ISIS traps traps
        :param pulumi.Input[bool] enable_traps_license: Enable license traps
        :param pulumi.Input[bool] enable_traps_local_auth: Enable SNMP local auth traps
        :param pulumi.Input[bool] enable_traps_mac_notification_change: Enable SNMP Change traps
        :param pulumi.Input[bool] enable_traps_mac_notification_move: Enable SNMP Move traps
        :param pulumi.Input[bool] enable_traps_mac_notification_threshold: Enable SNMP Threshold traps
        :param pulumi.Input[bool] enable_traps_memory_bufferpeak: Enable SNMP Memory Bufferpeak traps
        :param pulumi.Input[bool] enable_traps_mpls_ldp: SNMP MPLS label distribution protocol traps
        :param pulumi.Input[bool] enable_traps_msdp: Enable SNMP MSDP traps
        :param pulumi.Input[bool] enable_traps_ospf_config_errors: Enable all traps of errors
        :param pulumi.Input[bool] enable_traps_ospf_config_lsa: Enable all traps of lsa
        :param pulumi.Input[bool] enable_traps_ospf_config_retransmit: Enable all traps of retransmit
        :param pulumi.Input[bool] enable_traps_ospf_config_state_change: Enable all traps of state-change
        :param pulumi.Input[bool] enable_traps_ospf_errors_enable: Enable all traps of errors
        :param pulumi.Input[bool] enable_traps_ospf_lsa_enable: Enable all traps of lsa
        :param pulumi.Input[bool] enable_traps_ospf_nssa_trans_change: Nssa translator state changes
        :param pulumi.Input[bool] enable_traps_ospf_retransmit_enable: Enable all traps of retransmit
        :param pulumi.Input[bool] enable_traps_ospf_shamlink_interface: Sham link interface state changes
        :param pulumi.Input[bool] enable_traps_ospf_shamlink_neighbor: Sham link neighbor state changes
        :param pulumi.Input[bool] enable_traps_ospfv3_config_errors: Enable all traps of errors
        :param pulumi.Input[bool] enable_traps_ospfv3_config_state_change: Enable all traps of state-change
        :param pulumi.Input[bool] enable_traps_pim_invalid_pim_message: Enable invalid pim message trap
        :param pulumi.Input[bool] enable_traps_pim_neighbor_change: Enable neighbor change trap
        :param pulumi.Input[bool] enable_traps_pim_rp_mapping_change: Enable rp mapping change trap
        :param pulumi.Input[bool] enable_traps_port_security: Enable SNMP port security traps
        :param pulumi.Input[str] enable_traps_power_ethernet_group: Enable SNMP inline power group based traps
        :param pulumi.Input[bool] enable_traps_power_ethernet_police: Enable Policing Trap
        :param pulumi.Input[bool] enable_traps_rf: Enable all SNMP traps defined in CISCO-RF-MIB
        :param pulumi.Input[bool] enable_traps_smart_license: Enable smart license traps
        :param pulumi.Input[bool] enable_traps_snmp_authentication: Enable authentication trap
        :param pulumi.Input[bool] enable_traps_snmp_coldstart: Enable coldStart trap
        :param pulumi.Input[bool] enable_traps_snmp_linkdown: Enable linkDown trap
        :param pulumi.Input[bool] enable_traps_snmp_linkup: Enable linkUp trap
        :param pulumi.Input[bool] enable_traps_snmp_warmstart: Enable warmStart trap
        :param pulumi.Input[bool] enable_traps_stackwise: Enable SNMP stackwise traps
        :param pulumi.Input[bool] enable_traps_syslog: Enable SNMP syslog traps
        :param pulumi.Input[bool] enable_traps_tty: Enable TCP connection traps
        :param pulumi.Input[bool] enable_traps_udld_link_fail_rpt: Enable SNMP cudldpFastHelloLinkFailRptNotification traps
        :param pulumi.Input[bool] enable_traps_udld_status_change: Enable SNMP cudldpFastHelloStatusChangeNotification traps
        :param pulumi.Input[Sequence[pulumi.Input['SnmpServerHostArgs']]] hosts: Specify hosts keyed by (ip-address, community-or-user)
        :param pulumi.Input[bool] ifindex_persist: Persist interface indices
        :param pulumi.Input[str] location: Text for mib object sysLocation
        :param pulumi.Input[int] packetsize: Largest SNMP packet size - Range: `484`-`17892`
        :param pulumi.Input[int] queue_length: Message queue length for each TRAP host - Range: `1`-`5000`
        :param pulumi.Input[Sequence[pulumi.Input['SnmpServerSnmpCommunityArgs']]] snmp_communities: Enable SNMP; set community string and access privs
        :param pulumi.Input[str] source_interface_informs_forty_gigabit_ethernet: Forty GigabitEthernet
        :param pulumi.Input[str] source_interface_informs_gigabit_ethernet: GigabitEthernet IEEE 802.3z
        :param pulumi.Input[str] source_interface_informs_hundred_gig_e: Hundred GigabitEthernet
        :param pulumi.Input[int] source_interface_informs_loopback: Loopback interface - Range: `0`-`2147483647`
        :param pulumi.Input[int] source_interface_informs_port_channel: Ethernet Channel of interfaces - Range: `0`-`4294967295`
        :param pulumi.Input[str] source_interface_informs_ten_gigabit_ethernet: Ten Gigabit Ethernet
        :param pulumi.Input[int] source_interface_informs_vlan: Iosxr Vlans - Range: `0`-`65535`
        :param pulumi.Input[str] source_interface_traps_forty_gigabit_ethernet: Forty GigabitEthernet
        :param pulumi.Input[str] source_interface_traps_gigabit_ethernet: GigabitEthernet IEEE 802.3z
        :param pulumi.Input[str] source_interface_traps_hundred_gig_e: Hundred GigabitEthernet
        :param pulumi.Input[int] source_interface_traps_loopback: Loopback interface - Range: `0`-`2147483647`
        :param pulumi.Input[int] source_interface_traps_port_channel: Ethernet Channel of interfaces - Range: `0`-`4294967295`
        :param pulumi.Input[str] source_interface_traps_ten_gigabit_ethernet: Ten Gigabit Ethernet
        :param pulumi.Input[int] source_interface_traps_vlan: Iosxr Vlans - Range: `0`-`65535`
        :param pulumi.Input[bool] system_shutdown: Enable use of the SNMP reload command
        :param pulumi.Input[str] trap_source_forty_gigabit_ethernet: Forty GigabitEthernet
        :param pulumi.Input[str] trap_source_gigabit_ethernet: GigabitEthernet IEEE 802.3z
        :param pulumi.Input[str] trap_source_hundred_gig_e: Hundred GigabitEthernet
        :param pulumi.Input[int] trap_source_loopback: Loopback interface - Range: `0`-`2147483647`
        :param pulumi.Input[int] trap_source_port_channel: Ethernet Channel of interfaces - Range: `0`-`4294967295`
        :param pulumi.Input[str] trap_source_ten_gigabit_ethernet: Ten Gigabit Ethernet
        :param pulumi.Input[int] trap_source_vlan: Iosxr Vlans - Range: `0`-`65535`
        :param pulumi.Input[Sequence[pulumi.Input['SnmpServerViewArgs']]] views: Define an SNMPv2 MIB view
        """
        if chassis_id is not None:
            pulumi.set(__self__, "chassis_id", chassis_id)
        if contact is not None:
            pulumi.set(__self__, "contact", contact)
        if contexts is not None:
            pulumi.set(__self__, "contexts", contexts)
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if enable_informs is not None:
            pulumi.set(__self__, "enable_informs", enable_informs)
        if enable_logging_getop is not None:
            pulumi.set(__self__, "enable_logging_getop", enable_logging_getop)
        if enable_logging_setop is not None:
            pulumi.set(__self__, "enable_logging_setop", enable_logging_setop)
        if enable_traps is not None:
            pulumi.set(__self__, "enable_traps", enable_traps)
        if enable_traps_auth_framework_sec_violation is not None:
            pulumi.set(__self__, "enable_traps_auth_framework_sec_violation", enable_traps_auth_framework_sec_violation)
        if enable_traps_bfd is not None:
            pulumi.set(__self__, "enable_traps_bfd", enable_traps_bfd)
        if enable_traps_bgp_cbgp2 is not None:
            pulumi.set(__self__, "enable_traps_bgp_cbgp2", enable_traps_bgp_cbgp2)
        if enable_traps_bridge_newroot is not None:
            pulumi.set(__self__, "enable_traps_bridge_newroot", enable_traps_bridge_newroot)
        if enable_traps_bridge_topologychange is not None:
            pulumi.set(__self__, "enable_traps_bridge_topologychange", enable_traps_bridge_topologychange)
        if enable_traps_bulkstat_collection is not None:
            pulumi.set(__self__, "enable_traps_bulkstat_collection", enable_traps_bulkstat_collection)
        if enable_traps_bulkstat_transfer is not None:
            pulumi.set(__self__, "enable_traps_bulkstat_transfer", enable_traps_bulkstat_transfer)
        if enable_traps_call_home_message_send_fail is not None:
            pulumi.set(__self__, "enable_traps_call_home_message_send_fail", enable_traps_call_home_message_send_fail)
        if enable_traps_call_home_server_fail is not None:
            pulumi.set(__self__, "enable_traps_call_home_server_fail", enable_traps_call_home_server_fail)
        if enable_traps_cef_inconsistency is not None:
            pulumi.set(__self__, "enable_traps_cef_inconsistency", enable_traps_cef_inconsistency)
        if enable_traps_cef_peer_fib_state_change is not None:
            pulumi.set(__self__, "enable_traps_cef_peer_fib_state_change", enable_traps_cef_peer_fib_state_change)
        if enable_traps_cef_peer_state_change is not None:
            pulumi.set(__self__, "enable_traps_cef_peer_state_change", enable_traps_cef_peer_state_change)
        if enable_traps_cef_resource_failure is not None:
            pulumi.set(__self__, "enable_traps_cef_resource_failure", enable_traps_cef_resource_failure)
        if enable_traps_config is not None:
            pulumi.set(__self__, "enable_traps_config", enable_traps_config)
        if enable_traps_config_copy is not None:
            pulumi.set(__self__, "enable_traps_config_copy", enable_traps_config_copy)
        if enable_traps_config_ctid is not None:
            pulumi.set(__self__, "enable_traps_config_ctid", enable_traps_config_ctid)
        if enable_traps_cpu_threshold is not None:
            pulumi.set(__self__, "enable_traps_cpu_threshold", enable_traps_cpu_threshold)
        if enable_traps_dhcp is not None:
            pulumi.set(__self__, "enable_traps_dhcp", enable_traps_dhcp)
        if enable_traps_eigrp is not None:
            pulumi.set(__self__, "enable_traps_eigrp", enable_traps_eigrp)
        if enable_traps_energywise is not None:
            pulumi.set(__self__, "enable_traps_energywise", enable_traps_energywise)
        if enable_traps_entity is not None:
            pulumi.set(__self__, "enable_traps_entity", enable_traps_entity)
        if enable_traps_entity_diag_boot_up_fail is not None:
            pulumi.set(__self__, "enable_traps_entity_diag_boot_up_fail", enable_traps_entity_diag_boot_up_fail)
        if enable_traps_entity_diag_hm_test_recover is not None:
            pulumi.set(__self__, "enable_traps_entity_diag_hm_test_recover", enable_traps_entity_diag_hm_test_recover)
        if enable_traps_entity_diag_hm_thresh_reached is not None:
            pulumi.set(__self__, "enable_traps_entity_diag_hm_thresh_reached", enable_traps_entity_diag_hm_thresh_reached)
        if enable_traps_entity_diag_scheduled_test_fail is not None:
            pulumi.set(__self__, "enable_traps_entity_diag_scheduled_test_fail", enable_traps_entity_diag_scheduled_test_fail)
        if enable_traps_entity_perf_throughput_notif is not None:
            pulumi.set(__self__, "enable_traps_entity_perf_throughput_notif", enable_traps_entity_perf_throughput_notif)
        if enable_traps_envmon is not None:
            pulumi.set(__self__, "enable_traps_envmon", enable_traps_envmon)
        if enable_traps_errdisable is not None:
            pulumi.set(__self__, "enable_traps_errdisable", enable_traps_errdisable)
        if enable_traps_event_manager is not None:
            pulumi.set(__self__, "enable_traps_event_manager", enable_traps_event_manager)
        if enable_traps_fast_reroute_protected is not None:
            pulumi.set(__self__, "enable_traps_fast_reroute_protected", enable_traps_fast_reroute_protected)
        if enable_traps_flash_insertion is not None:
            pulumi.set(__self__, "enable_traps_flash_insertion", enable_traps_flash_insertion)
        if enable_traps_flash_lowspace is not None:
            pulumi.set(__self__, "enable_traps_flash_lowspace", enable_traps_flash_lowspace)
        if enable_traps_flash_removal is not None:
            pulumi.set(__self__, "enable_traps_flash_removal", enable_traps_flash_removal)
        if enable_traps_flowmon is not None:
            pulumi.set(__self__, "enable_traps_flowmon", enable_traps_flowmon)
        if enable_traps_fru_ctrl is not None:
            pulumi.set(__self__, "enable_traps_fru_ctrl", enable_traps_fru_ctrl)
        if enable_traps_hsrp is not None:
            pulumi.set(__self__, "enable_traps_hsrp", enable_traps_hsrp)
        if enable_traps_ike_policy_add is not None:
            pulumi.set(__self__, "enable_traps_ike_policy_add", enable_traps_ike_policy_add)
        if enable_traps_ike_policy_delete is not None:
            pulumi.set(__self__, "enable_traps_ike_policy_delete", enable_traps_ike_policy_delete)
        if enable_traps_ike_tunnel_start is not None:
            pulumi.set(__self__, "enable_traps_ike_tunnel_start", enable_traps_ike_tunnel_start)
        if enable_traps_ike_tunnel_stop is not None:
            pulumi.set(__self__, "enable_traps_ike_tunnel_stop", enable_traps_ike_tunnel_stop)
        if enable_traps_ipmulticast is not None:
            pulumi.set(__self__, "enable_traps_ipmulticast", enable_traps_ipmulticast)
        if enable_traps_ipsec_cryptomap_add is not None:
            pulumi.set(__self__, "enable_traps_ipsec_cryptomap_add", enable_traps_ipsec_cryptomap_add)
        if enable_traps_ipsec_cryptomap_attach is not None:
            pulumi.set(__self__, "enable_traps_ipsec_cryptomap_attach", enable_traps_ipsec_cryptomap_attach)
        if enable_traps_ipsec_cryptomap_delete is not None:
            pulumi.set(__self__, "enable_traps_ipsec_cryptomap_delete", enable_traps_ipsec_cryptomap_delete)
        if enable_traps_ipsec_cryptomap_detach is not None:
            pulumi.set(__self__, "enable_traps_ipsec_cryptomap_detach", enable_traps_ipsec_cryptomap_detach)
        if enable_traps_ipsec_too_many_sas is not None:
            pulumi.set(__self__, "enable_traps_ipsec_too_many_sas", enable_traps_ipsec_too_many_sas)
        if enable_traps_ipsec_tunnel_start is not None:
            pulumi.set(__self__, "enable_traps_ipsec_tunnel_start", enable_traps_ipsec_tunnel_start)
        if enable_traps_ipsec_tunnel_stop is not None:
            pulumi.set(__self__, "enable_traps_ipsec_tunnel_stop", enable_traps_ipsec_tunnel_stop)
        if enable_traps_ipsla is not None:
            pulumi.set(__self__, "enable_traps_ipsla", enable_traps_ipsla)
        if enable_traps_isis is not None:
            pulumi.set(__self__, "enable_traps_isis", enable_traps_isis)
        if enable_traps_license is not None:
            pulumi.set(__self__, "enable_traps_license", enable_traps_license)
        if enable_traps_local_auth is not None:
            pulumi.set(__self__, "enable_traps_local_auth", enable_traps_local_auth)
        if enable_traps_mac_notification_change is not None:
            pulumi.set(__self__, "enable_traps_mac_notification_change", enable_traps_mac_notification_change)
        if enable_traps_mac_notification_move is not None:
            pulumi.set(__self__, "enable_traps_mac_notification_move", enable_traps_mac_notification_move)
        if enable_traps_mac_notification_threshold is not None:
            pulumi.set(__self__, "enable_traps_mac_notification_threshold", enable_traps_mac_notification_threshold)
        if enable_traps_memory_bufferpeak is not None:
            pulumi.set(__self__, "enable_traps_memory_bufferpeak", enable_traps_memory_bufferpeak)
        if enable_traps_mpls_ldp is not None:
            pulumi.set(__self__, "enable_traps_mpls_ldp", enable_traps_mpls_ldp)
        if enable_traps_mpls_rfc_ldp is not None:
            pulumi.set(__self__, "enable_traps_mpls_rfc_ldp", enable_traps_mpls_rfc_ldp)
        if enable_traps_mpls_traffic_eng is not None:
            pulumi.set(__self__, "enable_traps_mpls_traffic_eng", enable_traps_mpls_traffic_eng)
        if enable_traps_mpls_vpn is not None:
            pulumi.set(__self__, "enable_traps_mpls_vpn", enable_traps_mpls_vpn)
        if enable_traps_msdp is not None:
            pulumi.set(__self__, "enable_traps_msdp", enable_traps_msdp)
        if enable_traps_nhrp_nhc is not None:
            pulumi.set(__self__, "enable_traps_nhrp_nhc", enable_traps_nhrp_nhc)
        if enable_traps_nhrp_nhp is not None:
            pulumi.set(__self__, "enable_traps_nhrp_nhp", enable_traps_nhrp_nhp)
        if enable_traps_nhrp_nhs is not None:
            pulumi.set(__self__, "enable_traps_nhrp_nhs", enable_traps_nhrp_nhs)
        if enable_traps_nhrp_quota_exceeded is not None:
            pulumi.set(__self__, "enable_traps_nhrp_quota_exceeded", enable_traps_nhrp_quota_exceeded)
        if enable_traps_ospf_config_errors is not None:
            pulumi.set(__self__, "enable_traps_ospf_config_errors", enable_traps_ospf_config_errors)
        if enable_traps_ospf_config_lsa is not None:
            pulumi.set(__self__, "enable_traps_ospf_config_lsa", enable_traps_ospf_config_lsa)
        if enable_traps_ospf_config_retransmit is not None:
            pulumi.set(__self__, "enable_traps_ospf_config_retransmit", enable_traps_ospf_config_retransmit)
        if enable_traps_ospf_config_state_change is not None:
            pulumi.set(__self__, "enable_traps_ospf_config_state_change", enable_traps_ospf_config_state_change)
        if enable_traps_ospf_errors_enable is not None:
            pulumi.set(__self__, "enable_traps_ospf_errors_enable", enable_traps_ospf_errors_enable)
        if enable_traps_ospf_lsa_enable is not None:
            pulumi.set(__self__, "enable_traps_ospf_lsa_enable", enable_traps_ospf_lsa_enable)
        if enable_traps_ospf_nssa_trans_change is not None:
            pulumi.set(__self__, "enable_traps_ospf_nssa_trans_change", enable_traps_ospf_nssa_trans_change)
        if enable_traps_ospf_retransmit_enable is not None:
            pulumi.set(__self__, "enable_traps_ospf_retransmit_enable", enable_traps_ospf_retransmit_enable)
        if enable_traps_ospf_shamlink_interface is not None:
            pulumi.set(__self__, "enable_traps_ospf_shamlink_interface", enable_traps_ospf_shamlink_interface)
        if enable_traps_ospf_shamlink_neighbor is not None:
            pulumi.set(__self__, "enable_traps_ospf_shamlink_neighbor", enable_traps_ospf_shamlink_neighbor)
        if enable_traps_ospfv3_config_errors is not None:
            pulumi.set(__self__, "enable_traps_ospfv3_config_errors", enable_traps_ospfv3_config_errors)
        if enable_traps_ospfv3_config_state_change is not None:
            pulumi.set(__self__, "enable_traps_ospfv3_config_state_change", enable_traps_ospfv3_config_state_change)
        if enable_traps_pim_invalid_pim_message is not None:
            pulumi.set(__self__, "enable_traps_pim_invalid_pim_message", enable_traps_pim_invalid_pim_message)
        if enable_traps_pim_neighbor_change is not None:
            pulumi.set(__self__, "enable_traps_pim_neighbor_change", enable_traps_pim_neighbor_change)
        if enable_traps_pim_rp_mapping_change is not None:
            pulumi.set(__self__, "enable_traps_pim_rp_mapping_change", enable_traps_pim_rp_mapping_change)
        if enable_traps_port_security is not None:
            pulumi.set(__self__, "enable_traps_port_security", enable_traps_port_security)
        if enable_traps_power_ethernet_group is not None:
            pulumi.set(__self__, "enable_traps_power_ethernet_group", enable_traps_power_ethernet_group)
        if enable_traps_power_ethernet_police is not None:
            pulumi.set(__self__, "enable_traps_power_ethernet_police", enable_traps_power_ethernet_police)
        if enable_traps_pw_vc is not None:
            pulumi.set(__self__, "enable_traps_pw_vc", enable_traps_pw_vc)
        if enable_traps_rep is not None:
            pulumi.set(__self__, "enable_traps_rep", enable_traps_rep)
        if enable_traps_rf is not None:
            pulumi.set(__self__, "enable_traps_rf", enable_traps_rf)
        if enable_traps_smart_license is not None:
            pulumi.set(__self__, "enable_traps_smart_license", enable_traps_smart_license)
        if enable_traps_snmp_authentication is not None:
            pulumi.set(__self__, "enable_traps_snmp_authentication", enable_traps_snmp_authentication)
        if enable_traps_snmp_coldstart is not None:
            pulumi.set(__self__, "enable_traps_snmp_coldstart", enable_traps_snmp_coldstart)
        if enable_traps_snmp_linkdown is not None:
            pulumi.set(__self__, "enable_traps_snmp_linkdown", enable_traps_snmp_linkdown)
        if enable_traps_snmp_linkup is not None:
            pulumi.set(__self__, "enable_traps_snmp_linkup", enable_traps_snmp_linkup)
        if enable_traps_snmp_warmstart is not None:
            pulumi.set(__self__, "enable_traps_snmp_warmstart", enable_traps_snmp_warmstart)
        if enable_traps_stackwise is not None:
            pulumi.set(__self__, "enable_traps_stackwise", enable_traps_stackwise)
        if enable_traps_stpx_inconsistency is not None:
            pulumi.set(__self__, "enable_traps_stpx_inconsistency", enable_traps_stpx_inconsistency)
        if enable_traps_stpx_loop_inconsistency is not None:
            pulumi.set(__self__, "enable_traps_stpx_loop_inconsistency", enable_traps_stpx_loop_inconsistency)
        if enable_traps_stpx_root_inconsistency is not None:
            pulumi.set(__self__, "enable_traps_stpx_root_inconsistency", enable_traps_stpx_root_inconsistency)
        if enable_traps_syslog is not None:
            pulumi.set(__self__, "enable_traps_syslog", enable_traps_syslog)
        if enable_traps_transceiver_all is not None:
            pulumi.set(__self__, "enable_traps_transceiver_all", enable_traps_transceiver_all)
        if enable_traps_tty is not None:
            pulumi.set(__self__, "enable_traps_tty", enable_traps_tty)
        if enable_traps_udld_link_fail_rpt is not None:
            pulumi.set(__self__, "enable_traps_udld_link_fail_rpt", enable_traps_udld_link_fail_rpt)
        if enable_traps_udld_status_change is not None:
            pulumi.set(__self__, "enable_traps_udld_status_change", enable_traps_udld_status_change)
        if enable_traps_vlan_membership is not None:
            pulumi.set(__self__, "enable_traps_vlan_membership", enable_traps_vlan_membership)
        if enable_traps_vlancreate is not None:
            pulumi.set(__self__, "enable_traps_vlancreate", enable_traps_vlancreate)
        if enable_traps_vlandelete is not None:
            pulumi.set(__self__, "enable_traps_vlandelete", enable_traps_vlandelete)
        if enable_traps_vrfmib_vnet_trunk_down is not None:
            pulumi.set(__self__, "enable_traps_vrfmib_vnet_trunk_down", enable_traps_vrfmib_vnet_trunk_down)
        if enable_traps_vrfmib_vnet_trunk_up is not None:
            pulumi.set(__self__, "enable_traps_vrfmib_vnet_trunk_up", enable_traps_vrfmib_vnet_trunk_up)
        if enable_traps_vrfmib_vrf_down is not None:
            pulumi.set(__self__, "enable_traps_vrfmib_vrf_down", enable_traps_vrfmib_vrf_down)
        if enable_traps_vrfmib_vrf_up is not None:
            pulumi.set(__self__, "enable_traps_vrfmib_vrf_up", enable_traps_vrfmib_vrf_up)
        if enable_traps_vtp is not None:
            pulumi.set(__self__, "enable_traps_vtp", enable_traps_vtp)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if ifindex_persist is not None:
            pulumi.set(__self__, "ifindex_persist", ifindex_persist)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if packetsize is not None:
            pulumi.set(__self__, "packetsize", packetsize)
        if queue_length is not None:
            pulumi.set(__self__, "queue_length", queue_length)
        if snmp_communities is not None:
            pulumi.set(__self__, "snmp_communities", snmp_communities)
        if source_interface_informs_forty_gigabit_ethernet is not None:
            pulumi.set(__self__, "source_interface_informs_forty_gigabit_ethernet", source_interface_informs_forty_gigabit_ethernet)
        if source_interface_informs_gigabit_ethernet is not None:
            pulumi.set(__self__, "source_interface_informs_gigabit_ethernet", source_interface_informs_gigabit_ethernet)
        if source_interface_informs_hundred_gig_e is not None:
            pulumi.set(__self__, "source_interface_informs_hundred_gig_e", source_interface_informs_hundred_gig_e)
        if source_interface_informs_loopback is not None:
            pulumi.set(__self__, "source_interface_informs_loopback", source_interface_informs_loopback)
        if source_interface_informs_port_channel is not None:
            pulumi.set(__self__, "source_interface_informs_port_channel", source_interface_informs_port_channel)
        if source_interface_informs_port_channel_subinterface is not None:
            pulumi.set(__self__, "source_interface_informs_port_channel_subinterface", source_interface_informs_port_channel_subinterface)
        if source_interface_informs_ten_gigabit_ethernet is not None:
            pulumi.set(__self__, "source_interface_informs_ten_gigabit_ethernet", source_interface_informs_ten_gigabit_ethernet)
        if source_interface_informs_vlan is not None:
            pulumi.set(__self__, "source_interface_informs_vlan", source_interface_informs_vlan)
        if source_interface_traps_forty_gigabit_ethernet is not None:
            pulumi.set(__self__, "source_interface_traps_forty_gigabit_ethernet", source_interface_traps_forty_gigabit_ethernet)
        if source_interface_traps_gigabit_ethernet is not None:
            pulumi.set(__self__, "source_interface_traps_gigabit_ethernet", source_interface_traps_gigabit_ethernet)
        if source_interface_traps_hundred_gig_e is not None:
            pulumi.set(__self__, "source_interface_traps_hundred_gig_e", source_interface_traps_hundred_gig_e)
        if source_interface_traps_loopback is not None:
            pulumi.set(__self__, "source_interface_traps_loopback", source_interface_traps_loopback)
        if source_interface_traps_port_channel is not None:
            pulumi.set(__self__, "source_interface_traps_port_channel", source_interface_traps_port_channel)
        if source_interface_traps_port_channel_subinterface is not None:
            pulumi.set(__self__, "source_interface_traps_port_channel_subinterface", source_interface_traps_port_channel_subinterface)
        if source_interface_traps_ten_gigabit_ethernet is not None:
            pulumi.set(__self__, "source_interface_traps_ten_gigabit_ethernet", source_interface_traps_ten_gigabit_ethernet)
        if source_interface_traps_vlan is not None:
            pulumi.set(__self__, "source_interface_traps_vlan", source_interface_traps_vlan)
        if system_shutdown is not None:
            pulumi.set(__self__, "system_shutdown", system_shutdown)
        if trap_source_forty_gigabit_ethernet is not None:
            pulumi.set(__self__, "trap_source_forty_gigabit_ethernet", trap_source_forty_gigabit_ethernet)
        if trap_source_gigabit_ethernet is not None:
            pulumi.set(__self__, "trap_source_gigabit_ethernet", trap_source_gigabit_ethernet)
        if trap_source_hundred_gig_e is not None:
            pulumi.set(__self__, "trap_source_hundred_gig_e", trap_source_hundred_gig_e)
        if trap_source_loopback is not None:
            pulumi.set(__self__, "trap_source_loopback", trap_source_loopback)
        if trap_source_port_channel is not None:
            pulumi.set(__self__, "trap_source_port_channel", trap_source_port_channel)
        if trap_source_port_channel_subinterface is not None:
            pulumi.set(__self__, "trap_source_port_channel_subinterface", trap_source_port_channel_subinterface)
        if trap_source_ten_gigabit_ethernet is not None:
            pulumi.set(__self__, "trap_source_ten_gigabit_ethernet", trap_source_ten_gigabit_ethernet)
        if trap_source_vlan is not None:
            pulumi.set(__self__, "trap_source_vlan", trap_source_vlan)
        if views is not None:
            pulumi.set(__self__, "views", views)

    @property
    @pulumi.getter(name="chassisId")
    def chassis_id(self) -> Optional[pulumi.Input[str]]:
        """
        String to uniquely identify this chassis
        """
        return pulumi.get(self, "chassis_id")

    @chassis_id.setter
    def chassis_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chassis_id", value)

    @property
    @pulumi.getter
    def contact(self) -> Optional[pulumi.Input[str]]:
        """
        Text for mib object sysContact
        """
        return pulumi.get(self, "contact")

    @contact.setter
    def contact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contact", value)

    @property
    @pulumi.getter
    def contexts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerContextArgs']]]]:
        """
        Create/Delete a context apart from default
        """
        return pulumi.get(self, "contexts")

    @contexts.setter
    def contexts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerContextArgs']]]]):
        pulumi.set(self, "contexts", value)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="enableInforms")
    def enable_informs(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP Informs
        """
        return pulumi.get(self, "enable_informs")

    @enable_informs.setter
    def enable_informs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_informs", value)

    @property
    @pulumi.getter(name="enableLoggingGetop")
    def enable_logging_getop(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP GET Operation logging
        """
        return pulumi.get(self, "enable_logging_getop")

    @enable_logging_getop.setter
    def enable_logging_getop(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_logging_getop", value)

    @property
    @pulumi.getter(name="enableLoggingSetop")
    def enable_logging_setop(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP SET Operation logging
        """
        return pulumi.get(self, "enable_logging_setop")

    @enable_logging_setop.setter
    def enable_logging_setop(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_logging_setop", value)

    @property
    @pulumi.getter(name="enableTraps")
    def enable_traps(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP Traps
        """
        return pulumi.get(self, "enable_traps")

    @enable_traps.setter
    def enable_traps(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps", value)

    @property
    @pulumi.getter(name="enableTrapsAuthFrameworkSecViolation")
    def enable_traps_auth_framework_sec_violation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_auth_framework_sec_violation")

    @enable_traps_auth_framework_sec_violation.setter
    def enable_traps_auth_framework_sec_violation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_auth_framework_sec_violation", value)

    @property
    @pulumi.getter(name="enableTrapsBfd")
    def enable_traps_bfd(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_bfd")

    @enable_traps_bfd.setter
    def enable_traps_bfd(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_bfd", value)

    @property
    @pulumi.getter(name="enableTrapsBgpCbgp2")
    def enable_traps_bgp_cbgp2(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable BGP MIBv2 traps
        """
        return pulumi.get(self, "enable_traps_bgp_cbgp2")

    @enable_traps_bgp_cbgp2.setter
    def enable_traps_bgp_cbgp2(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_bgp_cbgp2", value)

    @property
    @pulumi.getter(name="enableTrapsBridgeNewroot")
    def enable_traps_bridge_newroot(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_bridge_newroot")

    @enable_traps_bridge_newroot.setter
    def enable_traps_bridge_newroot(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_bridge_newroot", value)

    @property
    @pulumi.getter(name="enableTrapsBridgeTopologychange")
    def enable_traps_bridge_topologychange(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_bridge_topologychange")

    @enable_traps_bridge_topologychange.setter
    def enable_traps_bridge_topologychange(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_bridge_topologychange", value)

    @property
    @pulumi.getter(name="enableTrapsBulkstatCollection")
    def enable_traps_bulkstat_collection(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Data-Collection-MIB Collection notifications
        """
        return pulumi.get(self, "enable_traps_bulkstat_collection")

    @enable_traps_bulkstat_collection.setter
    def enable_traps_bulkstat_collection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_bulkstat_collection", value)

    @property
    @pulumi.getter(name="enableTrapsBulkstatTransfer")
    def enable_traps_bulkstat_transfer(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Data-Collection-MIB Transfer notifications
        """
        return pulumi.get(self, "enable_traps_bulkstat_transfer")

    @enable_traps_bulkstat_transfer.setter
    def enable_traps_bulkstat_transfer(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_bulkstat_transfer", value)

    @property
    @pulumi.getter(name="enableTrapsCallHomeMessageSendFail")
    def enable_traps_call_home_message_send_fail(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_call_home_message_send_fail")

    @enable_traps_call_home_message_send_fail.setter
    def enable_traps_call_home_message_send_fail(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_call_home_message_send_fail", value)

    @property
    @pulumi.getter(name="enableTrapsCallHomeServerFail")
    def enable_traps_call_home_server_fail(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_call_home_server_fail")

    @enable_traps_call_home_server_fail.setter
    def enable_traps_call_home_server_fail(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_call_home_server_fail", value)

    @property
    @pulumi.getter(name="enableTrapsCefInconsistency")
    def enable_traps_cef_inconsistency(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_cef_inconsistency")

    @enable_traps_cef_inconsistency.setter
    def enable_traps_cef_inconsistency(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_cef_inconsistency", value)

    @property
    @pulumi.getter(name="enableTrapsCefPeerFibStateChange")
    def enable_traps_cef_peer_fib_state_change(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_cef_peer_fib_state_change")

    @enable_traps_cef_peer_fib_state_change.setter
    def enable_traps_cef_peer_fib_state_change(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_cef_peer_fib_state_change", value)

    @property
    @pulumi.getter(name="enableTrapsCefPeerStateChange")
    def enable_traps_cef_peer_state_change(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_cef_peer_state_change")

    @enable_traps_cef_peer_state_change.setter
    def enable_traps_cef_peer_state_change(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_cef_peer_state_change", value)

    @property
    @pulumi.getter(name="enableTrapsCefResourceFailure")
    def enable_traps_cef_resource_failure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_cef_resource_failure")

    @enable_traps_cef_resource_failure.setter
    def enable_traps_cef_resource_failure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_cef_resource_failure", value)

    @property
    @pulumi.getter(name="enableTrapsConfig")
    def enable_traps_config(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP config traps
        """
        return pulumi.get(self, "enable_traps_config")

    @enable_traps_config.setter
    def enable_traps_config(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_config", value)

    @property
    @pulumi.getter(name="enableTrapsConfigCopy")
    def enable_traps_config_copy(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP config-copy traps
        """
        return pulumi.get(self, "enable_traps_config_copy")

    @enable_traps_config_copy.setter
    def enable_traps_config_copy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_config_copy", value)

    @property
    @pulumi.getter(name="enableTrapsConfigCtid")
    def enable_traps_config_ctid(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_config_ctid")

    @enable_traps_config_ctid.setter
    def enable_traps_config_ctid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_config_ctid", value)

    @property
    @pulumi.getter(name="enableTrapsCpuThreshold")
    def enable_traps_cpu_threshold(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow CPU utilization threshold violation traps
        """
        return pulumi.get(self, "enable_traps_cpu_threshold")

    @enable_traps_cpu_threshold.setter
    def enable_traps_cpu_threshold(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_cpu_threshold", value)

    @property
    @pulumi.getter(name="enableTrapsDhcp")
    def enable_traps_dhcp(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP dhcp traps
        """
        return pulumi.get(self, "enable_traps_dhcp")

    @enable_traps_dhcp.setter
    def enable_traps_dhcp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_dhcp", value)

    @property
    @pulumi.getter(name="enableTrapsEigrp")
    def enable_traps_eigrp(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP EIGRP traps
        """
        return pulumi.get(self, "enable_traps_eigrp")

    @enable_traps_eigrp.setter
    def enable_traps_eigrp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_eigrp", value)

    @property
    @pulumi.getter(name="enableTrapsEnergywise")
    def enable_traps_energywise(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_energywise")

    @enable_traps_energywise.setter
    def enable_traps_energywise(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_energywise", value)

    @property
    @pulumi.getter(name="enableTrapsEntity")
    def enable_traps_entity(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP entity traps
        """
        return pulumi.get(self, "enable_traps_entity")

    @enable_traps_entity.setter
    def enable_traps_entity(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_entity", value)

    @property
    @pulumi.getter(name="enableTrapsEntityDiagBootUpFail")
    def enable_traps_entity_diag_boot_up_fail(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP ceDiagBootUpFailedNotif traps
        """
        return pulumi.get(self, "enable_traps_entity_diag_boot_up_fail")

    @enable_traps_entity_diag_boot_up_fail.setter
    def enable_traps_entity_diag_boot_up_fail(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_entity_diag_boot_up_fail", value)

    @property
    @pulumi.getter(name="enableTrapsEntityDiagHmTestRecover")
    def enable_traps_entity_diag_hm_test_recover(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP ceDiagHMTestRecoverNotif traps
        """
        return pulumi.get(self, "enable_traps_entity_diag_hm_test_recover")

    @enable_traps_entity_diag_hm_test_recover.setter
    def enable_traps_entity_diag_hm_test_recover(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_entity_diag_hm_test_recover", value)

    @property
    @pulumi.getter(name="enableTrapsEntityDiagHmThreshReached")
    def enable_traps_entity_diag_hm_thresh_reached(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP ceDiagHMThresholdReachedNotif traps
        """
        return pulumi.get(self, "enable_traps_entity_diag_hm_thresh_reached")

    @enable_traps_entity_diag_hm_thresh_reached.setter
    def enable_traps_entity_diag_hm_thresh_reached(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_entity_diag_hm_thresh_reached", value)

    @property
    @pulumi.getter(name="enableTrapsEntityDiagScheduledTestFail")
    def enable_traps_entity_diag_scheduled_test_fail(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP ceDiagScheduledTestFailedNotif traps
        """
        return pulumi.get(self, "enable_traps_entity_diag_scheduled_test_fail")

    @enable_traps_entity_diag_scheduled_test_fail.setter
    def enable_traps_entity_diag_scheduled_test_fail(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_entity_diag_scheduled_test_fail", value)

    @property
    @pulumi.getter(name="enableTrapsEntityPerfThroughputNotif")
    def enable_traps_entity_perf_throughput_notif(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable ENTITY PERFORMANCE MIB throughput traps
        """
        return pulumi.get(self, "enable_traps_entity_perf_throughput_notif")

    @enable_traps_entity_perf_throughput_notif.setter
    def enable_traps_entity_perf_throughput_notif(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_entity_perf_throughput_notif", value)

    @property
    @pulumi.getter(name="enableTrapsEnvmon")
    def enable_traps_envmon(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP environmental monitor traps
        """
        return pulumi.get(self, "enable_traps_envmon")

    @enable_traps_envmon.setter
    def enable_traps_envmon(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_envmon", value)

    @property
    @pulumi.getter(name="enableTrapsErrdisable")
    def enable_traps_errdisable(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP errdisable notifications
        """
        return pulumi.get(self, "enable_traps_errdisable")

    @enable_traps_errdisable.setter
    def enable_traps_errdisable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_errdisable", value)

    @property
    @pulumi.getter(name="enableTrapsEventManager")
    def enable_traps_event_manager(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP Embedded Event Manager traps
        """
        return pulumi.get(self, "enable_traps_event_manager")

    @enable_traps_event_manager.setter
    def enable_traps_event_manager(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_event_manager", value)

    @property
    @pulumi.getter(name="enableTrapsFastRerouteProtected")
    def enable_traps_fast_reroute_protected(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_fast_reroute_protected")

    @enable_traps_fast_reroute_protected.setter
    def enable_traps_fast_reroute_protected(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_fast_reroute_protected", value)

    @property
    @pulumi.getter(name="enableTrapsFlashInsertion")
    def enable_traps_flash_insertion(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP Flash Insertion notifications
        """
        return pulumi.get(self, "enable_traps_flash_insertion")

    @enable_traps_flash_insertion.setter
    def enable_traps_flash_insertion(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_flash_insertion", value)

    @property
    @pulumi.getter(name="enableTrapsFlashLowspace")
    def enable_traps_flash_lowspace(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP Flash Lowspace notifications
        """
        return pulumi.get(self, "enable_traps_flash_lowspace")

    @enable_traps_flash_lowspace.setter
    def enable_traps_flash_lowspace(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_flash_lowspace", value)

    @property
    @pulumi.getter(name="enableTrapsFlashRemoval")
    def enable_traps_flash_removal(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP Flash Removal notifications
        """
        return pulumi.get(self, "enable_traps_flash_removal")

    @enable_traps_flash_removal.setter
    def enable_traps_flash_removal(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_flash_removal", value)

    @property
    @pulumi.getter(name="enableTrapsFlowmon")
    def enable_traps_flowmon(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP flowmon notifications
        """
        return pulumi.get(self, "enable_traps_flowmon")

    @enable_traps_flowmon.setter
    def enable_traps_flowmon(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_flowmon", value)

    @property
    @pulumi.getter(name="enableTrapsFruCtrl")
    def enable_traps_fru_ctrl(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP entity FRU control traps
        """
        return pulumi.get(self, "enable_traps_fru_ctrl")

    @enable_traps_fru_ctrl.setter
    def enable_traps_fru_ctrl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_fru_ctrl", value)

    @property
    @pulumi.getter(name="enableTrapsHsrp")
    def enable_traps_hsrp(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP HSRP traps
        """
        return pulumi.get(self, "enable_traps_hsrp")

    @enable_traps_hsrp.setter
    def enable_traps_hsrp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_hsrp", value)

    @property
    @pulumi.getter(name="enableTrapsIkePolicyAdd")
    def enable_traps_ike_policy_add(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IKE Policy add trap
        """
        return pulumi.get(self, "enable_traps_ike_policy_add")

    @enable_traps_ike_policy_add.setter
    def enable_traps_ike_policy_add(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ike_policy_add", value)

    @property
    @pulumi.getter(name="enableTrapsIkePolicyDelete")
    def enable_traps_ike_policy_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IKE Policy delete trap
        """
        return pulumi.get(self, "enable_traps_ike_policy_delete")

    @enable_traps_ike_policy_delete.setter
    def enable_traps_ike_policy_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ike_policy_delete", value)

    @property
    @pulumi.getter(name="enableTrapsIkeTunnelStart")
    def enable_traps_ike_tunnel_start(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IKE Tunnel start trap
        """
        return pulumi.get(self, "enable_traps_ike_tunnel_start")

    @enable_traps_ike_tunnel_start.setter
    def enable_traps_ike_tunnel_start(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ike_tunnel_start", value)

    @property
    @pulumi.getter(name="enableTrapsIkeTunnelStop")
    def enable_traps_ike_tunnel_stop(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IKE Tunnel stop trap
        """
        return pulumi.get(self, "enable_traps_ike_tunnel_stop")

    @enable_traps_ike_tunnel_stop.setter
    def enable_traps_ike_tunnel_stop(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ike_tunnel_stop", value)

    @property
    @pulumi.getter(name="enableTrapsIpmulticast")
    def enable_traps_ipmulticast(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP ipmulticast traps
        """
        return pulumi.get(self, "enable_traps_ipmulticast")

    @enable_traps_ipmulticast.setter
    def enable_traps_ipmulticast(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ipmulticast", value)

    @property
    @pulumi.getter(name="enableTrapsIpsecCryptomapAdd")
    def enable_traps_ipsec_cryptomap_add(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IPsec Cryptomap add trap
        """
        return pulumi.get(self, "enable_traps_ipsec_cryptomap_add")

    @enable_traps_ipsec_cryptomap_add.setter
    def enable_traps_ipsec_cryptomap_add(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ipsec_cryptomap_add", value)

    @property
    @pulumi.getter(name="enableTrapsIpsecCryptomapAttach")
    def enable_traps_ipsec_cryptomap_attach(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IPsec Cryptomap Attach trap
        """
        return pulumi.get(self, "enable_traps_ipsec_cryptomap_attach")

    @enable_traps_ipsec_cryptomap_attach.setter
    def enable_traps_ipsec_cryptomap_attach(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ipsec_cryptomap_attach", value)

    @property
    @pulumi.getter(name="enableTrapsIpsecCryptomapDelete")
    def enable_traps_ipsec_cryptomap_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IPsec Cryptomap delete trap
        """
        return pulumi.get(self, "enable_traps_ipsec_cryptomap_delete")

    @enable_traps_ipsec_cryptomap_delete.setter
    def enable_traps_ipsec_cryptomap_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ipsec_cryptomap_delete", value)

    @property
    @pulumi.getter(name="enableTrapsIpsecCryptomapDetach")
    def enable_traps_ipsec_cryptomap_detach(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IPsec Cryptomap Detach trap
        """
        return pulumi.get(self, "enable_traps_ipsec_cryptomap_detach")

    @enable_traps_ipsec_cryptomap_detach.setter
    def enable_traps_ipsec_cryptomap_detach(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ipsec_cryptomap_detach", value)

    @property
    @pulumi.getter(name="enableTrapsIpsecTooManySas")
    def enable_traps_ipsec_too_many_sas(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IPsec Tunnel Start trap
        """
        return pulumi.get(self, "enable_traps_ipsec_too_many_sas")

    @enable_traps_ipsec_too_many_sas.setter
    def enable_traps_ipsec_too_many_sas(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ipsec_too_many_sas", value)

    @property
    @pulumi.getter(name="enableTrapsIpsecTunnelStart")
    def enable_traps_ipsec_tunnel_start(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IPsec Tunnel Start trap
        """
        return pulumi.get(self, "enable_traps_ipsec_tunnel_start")

    @enable_traps_ipsec_tunnel_start.setter
    def enable_traps_ipsec_tunnel_start(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ipsec_tunnel_start", value)

    @property
    @pulumi.getter(name="enableTrapsIpsecTunnelStop")
    def enable_traps_ipsec_tunnel_stop(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IPsec Tunnel Stop trap
        """
        return pulumi.get(self, "enable_traps_ipsec_tunnel_stop")

    @enable_traps_ipsec_tunnel_stop.setter
    def enable_traps_ipsec_tunnel_stop(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ipsec_tunnel_stop", value)

    @property
    @pulumi.getter(name="enableTrapsIpsla")
    def enable_traps_ipsla(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IPSLA traps traps
        """
        return pulumi.get(self, "enable_traps_ipsla")

    @enable_traps_ipsla.setter
    def enable_traps_ipsla(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ipsla", value)

    @property
    @pulumi.getter(name="enableTrapsIsis")
    def enable_traps_isis(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable ISIS traps traps
        """
        return pulumi.get(self, "enable_traps_isis")

    @enable_traps_isis.setter
    def enable_traps_isis(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_isis", value)

    @property
    @pulumi.getter(name="enableTrapsLicense")
    def enable_traps_license(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable license traps
        """
        return pulumi.get(self, "enable_traps_license")

    @enable_traps_license.setter
    def enable_traps_license(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_license", value)

    @property
    @pulumi.getter(name="enableTrapsLocalAuth")
    def enable_traps_local_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP local auth traps
        """
        return pulumi.get(self, "enable_traps_local_auth")

    @enable_traps_local_auth.setter
    def enable_traps_local_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_local_auth", value)

    @property
    @pulumi.getter(name="enableTrapsMacNotificationChange")
    def enable_traps_mac_notification_change(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP Change traps
        """
        return pulumi.get(self, "enable_traps_mac_notification_change")

    @enable_traps_mac_notification_change.setter
    def enable_traps_mac_notification_change(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_mac_notification_change", value)

    @property
    @pulumi.getter(name="enableTrapsMacNotificationMove")
    def enable_traps_mac_notification_move(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP Move traps
        """
        return pulumi.get(self, "enable_traps_mac_notification_move")

    @enable_traps_mac_notification_move.setter
    def enable_traps_mac_notification_move(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_mac_notification_move", value)

    @property
    @pulumi.getter(name="enableTrapsMacNotificationThreshold")
    def enable_traps_mac_notification_threshold(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP Threshold traps
        """
        return pulumi.get(self, "enable_traps_mac_notification_threshold")

    @enable_traps_mac_notification_threshold.setter
    def enable_traps_mac_notification_threshold(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_mac_notification_threshold", value)

    @property
    @pulumi.getter(name="enableTrapsMemoryBufferpeak")
    def enable_traps_memory_bufferpeak(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP Memory Bufferpeak traps
        """
        return pulumi.get(self, "enable_traps_memory_bufferpeak")

    @enable_traps_memory_bufferpeak.setter
    def enable_traps_memory_bufferpeak(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_memory_bufferpeak", value)

    @property
    @pulumi.getter(name="enableTrapsMplsLdp")
    def enable_traps_mpls_ldp(self) -> Optional[pulumi.Input[bool]]:
        """
        SNMP MPLS label distribution protocol traps
        """
        return pulumi.get(self, "enable_traps_mpls_ldp")

    @enable_traps_mpls_ldp.setter
    def enable_traps_mpls_ldp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_mpls_ldp", value)

    @property
    @pulumi.getter(name="enableTrapsMplsRfcLdp")
    def enable_traps_mpls_rfc_ldp(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_mpls_rfc_ldp")

    @enable_traps_mpls_rfc_ldp.setter
    def enable_traps_mpls_rfc_ldp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_mpls_rfc_ldp", value)

    @property
    @pulumi.getter(name="enableTrapsMplsTrafficEng")
    def enable_traps_mpls_traffic_eng(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_mpls_traffic_eng")

    @enable_traps_mpls_traffic_eng.setter
    def enable_traps_mpls_traffic_eng(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_mpls_traffic_eng", value)

    @property
    @pulumi.getter(name="enableTrapsMplsVpn")
    def enable_traps_mpls_vpn(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_mpls_vpn")

    @enable_traps_mpls_vpn.setter
    def enable_traps_mpls_vpn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_mpls_vpn", value)

    @property
    @pulumi.getter(name="enableTrapsMsdp")
    def enable_traps_msdp(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP MSDP traps
        """
        return pulumi.get(self, "enable_traps_msdp")

    @enable_traps_msdp.setter
    def enable_traps_msdp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_msdp", value)

    @property
    @pulumi.getter(name="enableTrapsNhrpNhc")
    def enable_traps_nhrp_nhc(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_nhrp_nhc")

    @enable_traps_nhrp_nhc.setter
    def enable_traps_nhrp_nhc(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_nhrp_nhc", value)

    @property
    @pulumi.getter(name="enableTrapsNhrpNhp")
    def enable_traps_nhrp_nhp(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_nhrp_nhp")

    @enable_traps_nhrp_nhp.setter
    def enable_traps_nhrp_nhp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_nhrp_nhp", value)

    @property
    @pulumi.getter(name="enableTrapsNhrpNhs")
    def enable_traps_nhrp_nhs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_nhrp_nhs")

    @enable_traps_nhrp_nhs.setter
    def enable_traps_nhrp_nhs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_nhrp_nhs", value)

    @property
    @pulumi.getter(name="enableTrapsNhrpQuotaExceeded")
    def enable_traps_nhrp_quota_exceeded(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_nhrp_quota_exceeded")

    @enable_traps_nhrp_quota_exceeded.setter
    def enable_traps_nhrp_quota_exceeded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_nhrp_quota_exceeded", value)

    @property
    @pulumi.getter(name="enableTrapsOspfConfigErrors")
    def enable_traps_ospf_config_errors(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable all traps of errors
        """
        return pulumi.get(self, "enable_traps_ospf_config_errors")

    @enable_traps_ospf_config_errors.setter
    def enable_traps_ospf_config_errors(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ospf_config_errors", value)

    @property
    @pulumi.getter(name="enableTrapsOspfConfigLsa")
    def enable_traps_ospf_config_lsa(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable all traps of lsa
        """
        return pulumi.get(self, "enable_traps_ospf_config_lsa")

    @enable_traps_ospf_config_lsa.setter
    def enable_traps_ospf_config_lsa(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ospf_config_lsa", value)

    @property
    @pulumi.getter(name="enableTrapsOspfConfigRetransmit")
    def enable_traps_ospf_config_retransmit(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable all traps of retransmit
        """
        return pulumi.get(self, "enable_traps_ospf_config_retransmit")

    @enable_traps_ospf_config_retransmit.setter
    def enable_traps_ospf_config_retransmit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ospf_config_retransmit", value)

    @property
    @pulumi.getter(name="enableTrapsOspfConfigStateChange")
    def enable_traps_ospf_config_state_change(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable all traps of state-change
        """
        return pulumi.get(self, "enable_traps_ospf_config_state_change")

    @enable_traps_ospf_config_state_change.setter
    def enable_traps_ospf_config_state_change(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ospf_config_state_change", value)

    @property
    @pulumi.getter(name="enableTrapsOspfErrorsEnable")
    def enable_traps_ospf_errors_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable all traps of errors
        """
        return pulumi.get(self, "enable_traps_ospf_errors_enable")

    @enable_traps_ospf_errors_enable.setter
    def enable_traps_ospf_errors_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ospf_errors_enable", value)

    @property
    @pulumi.getter(name="enableTrapsOspfLsaEnable")
    def enable_traps_ospf_lsa_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable all traps of lsa
        """
        return pulumi.get(self, "enable_traps_ospf_lsa_enable")

    @enable_traps_ospf_lsa_enable.setter
    def enable_traps_ospf_lsa_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ospf_lsa_enable", value)

    @property
    @pulumi.getter(name="enableTrapsOspfNssaTransChange")
    def enable_traps_ospf_nssa_trans_change(self) -> Optional[pulumi.Input[bool]]:
        """
        Nssa translator state changes
        """
        return pulumi.get(self, "enable_traps_ospf_nssa_trans_change")

    @enable_traps_ospf_nssa_trans_change.setter
    def enable_traps_ospf_nssa_trans_change(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ospf_nssa_trans_change", value)

    @property
    @pulumi.getter(name="enableTrapsOspfRetransmitEnable")
    def enable_traps_ospf_retransmit_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable all traps of retransmit
        """
        return pulumi.get(self, "enable_traps_ospf_retransmit_enable")

    @enable_traps_ospf_retransmit_enable.setter
    def enable_traps_ospf_retransmit_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ospf_retransmit_enable", value)

    @property
    @pulumi.getter(name="enableTrapsOspfShamlinkInterface")
    def enable_traps_ospf_shamlink_interface(self) -> Optional[pulumi.Input[bool]]:
        """
        Sham link interface state changes
        """
        return pulumi.get(self, "enable_traps_ospf_shamlink_interface")

    @enable_traps_ospf_shamlink_interface.setter
    def enable_traps_ospf_shamlink_interface(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ospf_shamlink_interface", value)

    @property
    @pulumi.getter(name="enableTrapsOspfShamlinkNeighbor")
    def enable_traps_ospf_shamlink_neighbor(self) -> Optional[pulumi.Input[bool]]:
        """
        Sham link neighbor state changes
        """
        return pulumi.get(self, "enable_traps_ospf_shamlink_neighbor")

    @enable_traps_ospf_shamlink_neighbor.setter
    def enable_traps_ospf_shamlink_neighbor(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ospf_shamlink_neighbor", value)

    @property
    @pulumi.getter(name="enableTrapsOspfv3ConfigErrors")
    def enable_traps_ospfv3_config_errors(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable all traps of errors
        """
        return pulumi.get(self, "enable_traps_ospfv3_config_errors")

    @enable_traps_ospfv3_config_errors.setter
    def enable_traps_ospfv3_config_errors(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ospfv3_config_errors", value)

    @property
    @pulumi.getter(name="enableTrapsOspfv3ConfigStateChange")
    def enable_traps_ospfv3_config_state_change(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable all traps of state-change
        """
        return pulumi.get(self, "enable_traps_ospfv3_config_state_change")

    @enable_traps_ospfv3_config_state_change.setter
    def enable_traps_ospfv3_config_state_change(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ospfv3_config_state_change", value)

    @property
    @pulumi.getter(name="enableTrapsPimInvalidPimMessage")
    def enable_traps_pim_invalid_pim_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable invalid pim message trap
        """
        return pulumi.get(self, "enable_traps_pim_invalid_pim_message")

    @enable_traps_pim_invalid_pim_message.setter
    def enable_traps_pim_invalid_pim_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_pim_invalid_pim_message", value)

    @property
    @pulumi.getter(name="enableTrapsPimNeighborChange")
    def enable_traps_pim_neighbor_change(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable neighbor change trap
        """
        return pulumi.get(self, "enable_traps_pim_neighbor_change")

    @enable_traps_pim_neighbor_change.setter
    def enable_traps_pim_neighbor_change(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_pim_neighbor_change", value)

    @property
    @pulumi.getter(name="enableTrapsPimRpMappingChange")
    def enable_traps_pim_rp_mapping_change(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable rp mapping change trap
        """
        return pulumi.get(self, "enable_traps_pim_rp_mapping_change")

    @enable_traps_pim_rp_mapping_change.setter
    def enable_traps_pim_rp_mapping_change(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_pim_rp_mapping_change", value)

    @property
    @pulumi.getter(name="enableTrapsPortSecurity")
    def enable_traps_port_security(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP port security traps
        """
        return pulumi.get(self, "enable_traps_port_security")

    @enable_traps_port_security.setter
    def enable_traps_port_security(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_port_security", value)

    @property
    @pulumi.getter(name="enableTrapsPowerEthernetGroup")
    def enable_traps_power_ethernet_group(self) -> Optional[pulumi.Input[str]]:
        """
        Enable SNMP inline power group based traps
        """
        return pulumi.get(self, "enable_traps_power_ethernet_group")

    @enable_traps_power_ethernet_group.setter
    def enable_traps_power_ethernet_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_traps_power_ethernet_group", value)

    @property
    @pulumi.getter(name="enableTrapsPowerEthernetPolice")
    def enable_traps_power_ethernet_police(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Policing Trap
        """
        return pulumi.get(self, "enable_traps_power_ethernet_police")

    @enable_traps_power_ethernet_police.setter
    def enable_traps_power_ethernet_police(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_power_ethernet_police", value)

    @property
    @pulumi.getter(name="enableTrapsPwVc")
    def enable_traps_pw_vc(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_pw_vc")

    @enable_traps_pw_vc.setter
    def enable_traps_pw_vc(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_pw_vc", value)

    @property
    @pulumi.getter(name="enableTrapsRep")
    def enable_traps_rep(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_rep")

    @enable_traps_rep.setter
    def enable_traps_rep(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_rep", value)

    @property
    @pulumi.getter(name="enableTrapsRf")
    def enable_traps_rf(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable all SNMP traps defined in CISCO-RF-MIB
        """
        return pulumi.get(self, "enable_traps_rf")

    @enable_traps_rf.setter
    def enable_traps_rf(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_rf", value)

    @property
    @pulumi.getter(name="enableTrapsSmartLicense")
    def enable_traps_smart_license(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable smart license traps
        """
        return pulumi.get(self, "enable_traps_smart_license")

    @enable_traps_smart_license.setter
    def enable_traps_smart_license(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_smart_license", value)

    @property
    @pulumi.getter(name="enableTrapsSnmpAuthentication")
    def enable_traps_snmp_authentication(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable authentication trap
        """
        return pulumi.get(self, "enable_traps_snmp_authentication")

    @enable_traps_snmp_authentication.setter
    def enable_traps_snmp_authentication(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_snmp_authentication", value)

    @property
    @pulumi.getter(name="enableTrapsSnmpColdstart")
    def enable_traps_snmp_coldstart(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable coldStart trap
        """
        return pulumi.get(self, "enable_traps_snmp_coldstart")

    @enable_traps_snmp_coldstart.setter
    def enable_traps_snmp_coldstart(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_snmp_coldstart", value)

    @property
    @pulumi.getter(name="enableTrapsSnmpLinkdown")
    def enable_traps_snmp_linkdown(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable linkDown trap
        """
        return pulumi.get(self, "enable_traps_snmp_linkdown")

    @enable_traps_snmp_linkdown.setter
    def enable_traps_snmp_linkdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_snmp_linkdown", value)

    @property
    @pulumi.getter(name="enableTrapsSnmpLinkup")
    def enable_traps_snmp_linkup(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable linkUp trap
        """
        return pulumi.get(self, "enable_traps_snmp_linkup")

    @enable_traps_snmp_linkup.setter
    def enable_traps_snmp_linkup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_snmp_linkup", value)

    @property
    @pulumi.getter(name="enableTrapsSnmpWarmstart")
    def enable_traps_snmp_warmstart(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable warmStart trap
        """
        return pulumi.get(self, "enable_traps_snmp_warmstart")

    @enable_traps_snmp_warmstart.setter
    def enable_traps_snmp_warmstart(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_snmp_warmstart", value)

    @property
    @pulumi.getter(name="enableTrapsStackwise")
    def enable_traps_stackwise(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP stackwise traps
        """
        return pulumi.get(self, "enable_traps_stackwise")

    @enable_traps_stackwise.setter
    def enable_traps_stackwise(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_stackwise", value)

    @property
    @pulumi.getter(name="enableTrapsStpxInconsistency")
    def enable_traps_stpx_inconsistency(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_stpx_inconsistency")

    @enable_traps_stpx_inconsistency.setter
    def enable_traps_stpx_inconsistency(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_stpx_inconsistency", value)

    @property
    @pulumi.getter(name="enableTrapsStpxLoopInconsistency")
    def enable_traps_stpx_loop_inconsistency(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_stpx_loop_inconsistency")

    @enable_traps_stpx_loop_inconsistency.setter
    def enable_traps_stpx_loop_inconsistency(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_stpx_loop_inconsistency", value)

    @property
    @pulumi.getter(name="enableTrapsStpxRootInconsistency")
    def enable_traps_stpx_root_inconsistency(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_stpx_root_inconsistency")

    @enable_traps_stpx_root_inconsistency.setter
    def enable_traps_stpx_root_inconsistency(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_stpx_root_inconsistency", value)

    @property
    @pulumi.getter(name="enableTrapsSyslog")
    def enable_traps_syslog(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP syslog traps
        """
        return pulumi.get(self, "enable_traps_syslog")

    @enable_traps_syslog.setter
    def enable_traps_syslog(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_syslog", value)

    @property
    @pulumi.getter(name="enableTrapsTransceiverAll")
    def enable_traps_transceiver_all(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_transceiver_all")

    @enable_traps_transceiver_all.setter
    def enable_traps_transceiver_all(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_transceiver_all", value)

    @property
    @pulumi.getter(name="enableTrapsTty")
    def enable_traps_tty(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable TCP connection traps
        """
        return pulumi.get(self, "enable_traps_tty")

    @enable_traps_tty.setter
    def enable_traps_tty(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_tty", value)

    @property
    @pulumi.getter(name="enableTrapsUdldLinkFailRpt")
    def enable_traps_udld_link_fail_rpt(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP cudldpFastHelloLinkFailRptNotification traps
        """
        return pulumi.get(self, "enable_traps_udld_link_fail_rpt")

    @enable_traps_udld_link_fail_rpt.setter
    def enable_traps_udld_link_fail_rpt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_udld_link_fail_rpt", value)

    @property
    @pulumi.getter(name="enableTrapsUdldStatusChange")
    def enable_traps_udld_status_change(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP cudldpFastHelloStatusChangeNotification traps
        """
        return pulumi.get(self, "enable_traps_udld_status_change")

    @enable_traps_udld_status_change.setter
    def enable_traps_udld_status_change(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_udld_status_change", value)

    @property
    @pulumi.getter(name="enableTrapsVlanMembership")
    def enable_traps_vlan_membership(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_vlan_membership")

    @enable_traps_vlan_membership.setter
    def enable_traps_vlan_membership(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_vlan_membership", value)

    @property
    @pulumi.getter(name="enableTrapsVlancreate")
    def enable_traps_vlancreate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_vlancreate")

    @enable_traps_vlancreate.setter
    def enable_traps_vlancreate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_vlancreate", value)

    @property
    @pulumi.getter(name="enableTrapsVlandelete")
    def enable_traps_vlandelete(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_vlandelete")

    @enable_traps_vlandelete.setter
    def enable_traps_vlandelete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_vlandelete", value)

    @property
    @pulumi.getter(name="enableTrapsVrfmibVnetTrunkDown")
    def enable_traps_vrfmib_vnet_trunk_down(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_vrfmib_vnet_trunk_down")

    @enable_traps_vrfmib_vnet_trunk_down.setter
    def enable_traps_vrfmib_vnet_trunk_down(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_vrfmib_vnet_trunk_down", value)

    @property
    @pulumi.getter(name="enableTrapsVrfmibVnetTrunkUp")
    def enable_traps_vrfmib_vnet_trunk_up(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_vrfmib_vnet_trunk_up")

    @enable_traps_vrfmib_vnet_trunk_up.setter
    def enable_traps_vrfmib_vnet_trunk_up(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_vrfmib_vnet_trunk_up", value)

    @property
    @pulumi.getter(name="enableTrapsVrfmibVrfDown")
    def enable_traps_vrfmib_vrf_down(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_vrfmib_vrf_down")

    @enable_traps_vrfmib_vrf_down.setter
    def enable_traps_vrfmib_vrf_down(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_vrfmib_vrf_down", value)

    @property
    @pulumi.getter(name="enableTrapsVrfmibVrfUp")
    def enable_traps_vrfmib_vrf_up(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_vrfmib_vrf_up")

    @enable_traps_vrfmib_vrf_up.setter
    def enable_traps_vrfmib_vrf_up(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_vrfmib_vrf_up", value)

    @property
    @pulumi.getter(name="enableTrapsVtp")
    def enable_traps_vtp(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_vtp")

    @enable_traps_vtp.setter
    def enable_traps_vtp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_vtp", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerHostArgs']]]]:
        """
        Specify hosts keyed by (ip-address, community-or-user)
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerHostArgs']]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter(name="ifindexPersist")
    def ifindex_persist(self) -> Optional[pulumi.Input[bool]]:
        """
        Persist interface indices
        """
        return pulumi.get(self, "ifindex_persist")

    @ifindex_persist.setter
    def ifindex_persist(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ifindex_persist", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Text for mib object sysLocation
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def packetsize(self) -> Optional[pulumi.Input[int]]:
        """
        Largest SNMP packet size - Range: `484`-`17892`
        """
        return pulumi.get(self, "packetsize")

    @packetsize.setter
    def packetsize(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packetsize", value)

    @property
    @pulumi.getter(name="queueLength")
    def queue_length(self) -> Optional[pulumi.Input[int]]:
        """
        Message queue length for each TRAP host - Range: `1`-`5000`
        """
        return pulumi.get(self, "queue_length")

    @queue_length.setter
    def queue_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "queue_length", value)

    @property
    @pulumi.getter(name="snmpCommunities")
    def snmp_communities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerSnmpCommunityArgs']]]]:
        """
        Enable SNMP; set community string and access privs
        """
        return pulumi.get(self, "snmp_communities")

    @snmp_communities.setter
    def snmp_communities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerSnmpCommunityArgs']]]]):
        pulumi.set(self, "snmp_communities", value)

    @property
    @pulumi.getter(name="sourceInterfaceInformsFortyGigabitEthernet")
    def source_interface_informs_forty_gigabit_ethernet(self) -> Optional[pulumi.Input[str]]:
        """
        Forty GigabitEthernet
        """
        return pulumi.get(self, "source_interface_informs_forty_gigabit_ethernet")

    @source_interface_informs_forty_gigabit_ethernet.setter
    def source_interface_informs_forty_gigabit_ethernet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_interface_informs_forty_gigabit_ethernet", value)

    @property
    @pulumi.getter(name="sourceInterfaceInformsGigabitEthernet")
    def source_interface_informs_gigabit_ethernet(self) -> Optional[pulumi.Input[str]]:
        """
        GigabitEthernet IEEE 802.3z
        """
        return pulumi.get(self, "source_interface_informs_gigabit_ethernet")

    @source_interface_informs_gigabit_ethernet.setter
    def source_interface_informs_gigabit_ethernet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_interface_informs_gigabit_ethernet", value)

    @property
    @pulumi.getter(name="sourceInterfaceInformsHundredGigE")
    def source_interface_informs_hundred_gig_e(self) -> Optional[pulumi.Input[str]]:
        """
        Hundred GigabitEthernet
        """
        return pulumi.get(self, "source_interface_informs_hundred_gig_e")

    @source_interface_informs_hundred_gig_e.setter
    def source_interface_informs_hundred_gig_e(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_interface_informs_hundred_gig_e", value)

    @property
    @pulumi.getter(name="sourceInterfaceInformsLoopback")
    def source_interface_informs_loopback(self) -> Optional[pulumi.Input[int]]:
        """
        Loopback interface - Range: `0`-`2147483647`
        """
        return pulumi.get(self, "source_interface_informs_loopback")

    @source_interface_informs_loopback.setter
    def source_interface_informs_loopback(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_interface_informs_loopback", value)

    @property
    @pulumi.getter(name="sourceInterfaceInformsPortChannel")
    def source_interface_informs_port_channel(self) -> Optional[pulumi.Input[int]]:
        """
        Ethernet Channel of interfaces - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "source_interface_informs_port_channel")

    @source_interface_informs_port_channel.setter
    def source_interface_informs_port_channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_interface_informs_port_channel", value)

    @property
    @pulumi.getter(name="sourceInterfaceInformsPortChannelSubinterface")
    def source_interface_informs_port_channel_subinterface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_interface_informs_port_channel_subinterface")

    @source_interface_informs_port_channel_subinterface.setter
    def source_interface_informs_port_channel_subinterface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_interface_informs_port_channel_subinterface", value)

    @property
    @pulumi.getter(name="sourceInterfaceInformsTenGigabitEthernet")
    def source_interface_informs_ten_gigabit_ethernet(self) -> Optional[pulumi.Input[str]]:
        """
        Ten Gigabit Ethernet
        """
        return pulumi.get(self, "source_interface_informs_ten_gigabit_ethernet")

    @source_interface_informs_ten_gigabit_ethernet.setter
    def source_interface_informs_ten_gigabit_ethernet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_interface_informs_ten_gigabit_ethernet", value)

    @property
    @pulumi.getter(name="sourceInterfaceInformsVlan")
    def source_interface_informs_vlan(self) -> Optional[pulumi.Input[int]]:
        """
        Iosxr Vlans - Range: `0`-`65535`
        """
        return pulumi.get(self, "source_interface_informs_vlan")

    @source_interface_informs_vlan.setter
    def source_interface_informs_vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_interface_informs_vlan", value)

    @property
    @pulumi.getter(name="sourceInterfaceTrapsFortyGigabitEthernet")
    def source_interface_traps_forty_gigabit_ethernet(self) -> Optional[pulumi.Input[str]]:
        """
        Forty GigabitEthernet
        """
        return pulumi.get(self, "source_interface_traps_forty_gigabit_ethernet")

    @source_interface_traps_forty_gigabit_ethernet.setter
    def source_interface_traps_forty_gigabit_ethernet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_interface_traps_forty_gigabit_ethernet", value)

    @property
    @pulumi.getter(name="sourceInterfaceTrapsGigabitEthernet")
    def source_interface_traps_gigabit_ethernet(self) -> Optional[pulumi.Input[str]]:
        """
        GigabitEthernet IEEE 802.3z
        """
        return pulumi.get(self, "source_interface_traps_gigabit_ethernet")

    @source_interface_traps_gigabit_ethernet.setter
    def source_interface_traps_gigabit_ethernet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_interface_traps_gigabit_ethernet", value)

    @property
    @pulumi.getter(name="sourceInterfaceTrapsHundredGigE")
    def source_interface_traps_hundred_gig_e(self) -> Optional[pulumi.Input[str]]:
        """
        Hundred GigabitEthernet
        """
        return pulumi.get(self, "source_interface_traps_hundred_gig_e")

    @source_interface_traps_hundred_gig_e.setter
    def source_interface_traps_hundred_gig_e(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_interface_traps_hundred_gig_e", value)

    @property
    @pulumi.getter(name="sourceInterfaceTrapsLoopback")
    def source_interface_traps_loopback(self) -> Optional[pulumi.Input[int]]:
        """
        Loopback interface - Range: `0`-`2147483647`
        """
        return pulumi.get(self, "source_interface_traps_loopback")

    @source_interface_traps_loopback.setter
    def source_interface_traps_loopback(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_interface_traps_loopback", value)

    @property
    @pulumi.getter(name="sourceInterfaceTrapsPortChannel")
    def source_interface_traps_port_channel(self) -> Optional[pulumi.Input[int]]:
        """
        Ethernet Channel of interfaces - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "source_interface_traps_port_channel")

    @source_interface_traps_port_channel.setter
    def source_interface_traps_port_channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_interface_traps_port_channel", value)

    @property
    @pulumi.getter(name="sourceInterfaceTrapsPortChannelSubinterface")
    def source_interface_traps_port_channel_subinterface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_interface_traps_port_channel_subinterface")

    @source_interface_traps_port_channel_subinterface.setter
    def source_interface_traps_port_channel_subinterface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_interface_traps_port_channel_subinterface", value)

    @property
    @pulumi.getter(name="sourceInterfaceTrapsTenGigabitEthernet")
    def source_interface_traps_ten_gigabit_ethernet(self) -> Optional[pulumi.Input[str]]:
        """
        Ten Gigabit Ethernet
        """
        return pulumi.get(self, "source_interface_traps_ten_gigabit_ethernet")

    @source_interface_traps_ten_gigabit_ethernet.setter
    def source_interface_traps_ten_gigabit_ethernet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_interface_traps_ten_gigabit_ethernet", value)

    @property
    @pulumi.getter(name="sourceInterfaceTrapsVlan")
    def source_interface_traps_vlan(self) -> Optional[pulumi.Input[int]]:
        """
        Iosxr Vlans - Range: `0`-`65535`
        """
        return pulumi.get(self, "source_interface_traps_vlan")

    @source_interface_traps_vlan.setter
    def source_interface_traps_vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_interface_traps_vlan", value)

    @property
    @pulumi.getter(name="systemShutdown")
    def system_shutdown(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable use of the SNMP reload command
        """
        return pulumi.get(self, "system_shutdown")

    @system_shutdown.setter
    def system_shutdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "system_shutdown", value)

    @property
    @pulumi.getter(name="trapSourceFortyGigabitEthernet")
    def trap_source_forty_gigabit_ethernet(self) -> Optional[pulumi.Input[str]]:
        """
        Forty GigabitEthernet
        """
        return pulumi.get(self, "trap_source_forty_gigabit_ethernet")

    @trap_source_forty_gigabit_ethernet.setter
    def trap_source_forty_gigabit_ethernet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_source_forty_gigabit_ethernet", value)

    @property
    @pulumi.getter(name="trapSourceGigabitEthernet")
    def trap_source_gigabit_ethernet(self) -> Optional[pulumi.Input[str]]:
        """
        GigabitEthernet IEEE 802.3z
        """
        return pulumi.get(self, "trap_source_gigabit_ethernet")

    @trap_source_gigabit_ethernet.setter
    def trap_source_gigabit_ethernet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_source_gigabit_ethernet", value)

    @property
    @pulumi.getter(name="trapSourceHundredGigE")
    def trap_source_hundred_gig_e(self) -> Optional[pulumi.Input[str]]:
        """
        Hundred GigabitEthernet
        """
        return pulumi.get(self, "trap_source_hundred_gig_e")

    @trap_source_hundred_gig_e.setter
    def trap_source_hundred_gig_e(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_source_hundred_gig_e", value)

    @property
    @pulumi.getter(name="trapSourceLoopback")
    def trap_source_loopback(self) -> Optional[pulumi.Input[int]]:
        """
        Loopback interface - Range: `0`-`2147483647`
        """
        return pulumi.get(self, "trap_source_loopback")

    @trap_source_loopback.setter
    def trap_source_loopback(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_source_loopback", value)

    @property
    @pulumi.getter(name="trapSourcePortChannel")
    def trap_source_port_channel(self) -> Optional[pulumi.Input[int]]:
        """
        Ethernet Channel of interfaces - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "trap_source_port_channel")

    @trap_source_port_channel.setter
    def trap_source_port_channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_source_port_channel", value)

    @property
    @pulumi.getter(name="trapSourcePortChannelSubinterface")
    def trap_source_port_channel_subinterface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trap_source_port_channel_subinterface")

    @trap_source_port_channel_subinterface.setter
    def trap_source_port_channel_subinterface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_source_port_channel_subinterface", value)

    @property
    @pulumi.getter(name="trapSourceTenGigabitEthernet")
    def trap_source_ten_gigabit_ethernet(self) -> Optional[pulumi.Input[str]]:
        """
        Ten Gigabit Ethernet
        """
        return pulumi.get(self, "trap_source_ten_gigabit_ethernet")

    @trap_source_ten_gigabit_ethernet.setter
    def trap_source_ten_gigabit_ethernet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_source_ten_gigabit_ethernet", value)

    @property
    @pulumi.getter(name="trapSourceVlan")
    def trap_source_vlan(self) -> Optional[pulumi.Input[int]]:
        """
        Iosxr Vlans - Range: `0`-`65535`
        """
        return pulumi.get(self, "trap_source_vlan")

    @trap_source_vlan.setter
    def trap_source_vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_source_vlan", value)

    @property
    @pulumi.getter
    def views(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerViewArgs']]]]:
        """
        Define an SNMPv2 MIB view
        """
        return pulumi.get(self, "views")

    @views.setter
    def views(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerViewArgs']]]]):
        pulumi.set(self, "views", value)


@pulumi.input_type
class _SnmpServerState:
    def __init__(__self__, *,
                 chassis_id: Optional[pulumi.Input[str]] = None,
                 contact: Optional[pulumi.Input[str]] = None,
                 contexts: Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerContextArgs']]]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 enable_informs: Optional[pulumi.Input[bool]] = None,
                 enable_logging_getop: Optional[pulumi.Input[bool]] = None,
                 enable_logging_setop: Optional[pulumi.Input[bool]] = None,
                 enable_traps: Optional[pulumi.Input[bool]] = None,
                 enable_traps_auth_framework_sec_violation: Optional[pulumi.Input[bool]] = None,
                 enable_traps_bfd: Optional[pulumi.Input[bool]] = None,
                 enable_traps_bgp_cbgp2: Optional[pulumi.Input[bool]] = None,
                 enable_traps_bridge_newroot: Optional[pulumi.Input[bool]] = None,
                 enable_traps_bridge_topologychange: Optional[pulumi.Input[bool]] = None,
                 enable_traps_bulkstat_collection: Optional[pulumi.Input[bool]] = None,
                 enable_traps_bulkstat_transfer: Optional[pulumi.Input[bool]] = None,
                 enable_traps_call_home_message_send_fail: Optional[pulumi.Input[bool]] = None,
                 enable_traps_call_home_server_fail: Optional[pulumi.Input[bool]] = None,
                 enable_traps_cef_inconsistency: Optional[pulumi.Input[bool]] = None,
                 enable_traps_cef_peer_fib_state_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_cef_peer_state_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_cef_resource_failure: Optional[pulumi.Input[bool]] = None,
                 enable_traps_config: Optional[pulumi.Input[bool]] = None,
                 enable_traps_config_copy: Optional[pulumi.Input[bool]] = None,
                 enable_traps_config_ctid: Optional[pulumi.Input[bool]] = None,
                 enable_traps_cpu_threshold: Optional[pulumi.Input[bool]] = None,
                 enable_traps_dhcp: Optional[pulumi.Input[bool]] = None,
                 enable_traps_eigrp: Optional[pulumi.Input[bool]] = None,
                 enable_traps_energywise: Optional[pulumi.Input[bool]] = None,
                 enable_traps_entity: Optional[pulumi.Input[bool]] = None,
                 enable_traps_entity_diag_boot_up_fail: Optional[pulumi.Input[bool]] = None,
                 enable_traps_entity_diag_hm_test_recover: Optional[pulumi.Input[bool]] = None,
                 enable_traps_entity_diag_hm_thresh_reached: Optional[pulumi.Input[bool]] = None,
                 enable_traps_entity_diag_scheduled_test_fail: Optional[pulumi.Input[bool]] = None,
                 enable_traps_entity_perf_throughput_notif: Optional[pulumi.Input[bool]] = None,
                 enable_traps_envmon: Optional[pulumi.Input[bool]] = None,
                 enable_traps_errdisable: Optional[pulumi.Input[bool]] = None,
                 enable_traps_event_manager: Optional[pulumi.Input[bool]] = None,
                 enable_traps_fast_reroute_protected: Optional[pulumi.Input[bool]] = None,
                 enable_traps_flash_insertion: Optional[pulumi.Input[bool]] = None,
                 enable_traps_flash_lowspace: Optional[pulumi.Input[bool]] = None,
                 enable_traps_flash_removal: Optional[pulumi.Input[bool]] = None,
                 enable_traps_flowmon: Optional[pulumi.Input[bool]] = None,
                 enable_traps_fru_ctrl: Optional[pulumi.Input[bool]] = None,
                 enable_traps_hsrp: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ike_policy_add: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ike_policy_delete: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ike_tunnel_start: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ike_tunnel_stop: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipmulticast: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsec_cryptomap_add: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsec_cryptomap_attach: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsec_cryptomap_delete: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsec_cryptomap_detach: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsec_too_many_sas: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsec_tunnel_start: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsec_tunnel_stop: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsla: Optional[pulumi.Input[bool]] = None,
                 enable_traps_isis: Optional[pulumi.Input[bool]] = None,
                 enable_traps_license: Optional[pulumi.Input[bool]] = None,
                 enable_traps_local_auth: Optional[pulumi.Input[bool]] = None,
                 enable_traps_mac_notification_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_mac_notification_move: Optional[pulumi.Input[bool]] = None,
                 enable_traps_mac_notification_threshold: Optional[pulumi.Input[bool]] = None,
                 enable_traps_memory_bufferpeak: Optional[pulumi.Input[bool]] = None,
                 enable_traps_mpls_ldp: Optional[pulumi.Input[bool]] = None,
                 enable_traps_mpls_rfc_ldp: Optional[pulumi.Input[bool]] = None,
                 enable_traps_mpls_traffic_eng: Optional[pulumi.Input[bool]] = None,
                 enable_traps_mpls_vpn: Optional[pulumi.Input[bool]] = None,
                 enable_traps_msdp: Optional[pulumi.Input[bool]] = None,
                 enable_traps_nhrp_nhc: Optional[pulumi.Input[bool]] = None,
                 enable_traps_nhrp_nhp: Optional[pulumi.Input[bool]] = None,
                 enable_traps_nhrp_nhs: Optional[pulumi.Input[bool]] = None,
                 enable_traps_nhrp_quota_exceeded: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_config_errors: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_config_lsa: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_config_retransmit: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_config_state_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_errors_enable: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_lsa_enable: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_nssa_trans_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_retransmit_enable: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_shamlink_interface: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_shamlink_neighbor: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospfv3_config_errors: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospfv3_config_state_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_pim_invalid_pim_message: Optional[pulumi.Input[bool]] = None,
                 enable_traps_pim_neighbor_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_pim_rp_mapping_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_port_security: Optional[pulumi.Input[bool]] = None,
                 enable_traps_power_ethernet_group: Optional[pulumi.Input[str]] = None,
                 enable_traps_power_ethernet_police: Optional[pulumi.Input[bool]] = None,
                 enable_traps_pw_vc: Optional[pulumi.Input[bool]] = None,
                 enable_traps_rep: Optional[pulumi.Input[bool]] = None,
                 enable_traps_rf: Optional[pulumi.Input[bool]] = None,
                 enable_traps_smart_license: Optional[pulumi.Input[bool]] = None,
                 enable_traps_snmp_authentication: Optional[pulumi.Input[bool]] = None,
                 enable_traps_snmp_coldstart: Optional[pulumi.Input[bool]] = None,
                 enable_traps_snmp_linkdown: Optional[pulumi.Input[bool]] = None,
                 enable_traps_snmp_linkup: Optional[pulumi.Input[bool]] = None,
                 enable_traps_snmp_warmstart: Optional[pulumi.Input[bool]] = None,
                 enable_traps_stackwise: Optional[pulumi.Input[bool]] = None,
                 enable_traps_stpx_inconsistency: Optional[pulumi.Input[bool]] = None,
                 enable_traps_stpx_loop_inconsistency: Optional[pulumi.Input[bool]] = None,
                 enable_traps_stpx_root_inconsistency: Optional[pulumi.Input[bool]] = None,
                 enable_traps_syslog: Optional[pulumi.Input[bool]] = None,
                 enable_traps_transceiver_all: Optional[pulumi.Input[bool]] = None,
                 enable_traps_tty: Optional[pulumi.Input[bool]] = None,
                 enable_traps_udld_link_fail_rpt: Optional[pulumi.Input[bool]] = None,
                 enable_traps_udld_status_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vlan_membership: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vlancreate: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vlandelete: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vrfmib_vnet_trunk_down: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vrfmib_vnet_trunk_up: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vrfmib_vrf_down: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vrfmib_vrf_up: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vtp: Optional[pulumi.Input[bool]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerHostArgs']]]] = None,
                 ifindex_persist: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 packetsize: Optional[pulumi.Input[int]] = None,
                 queue_length: Optional[pulumi.Input[int]] = None,
                 snmp_communities: Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerSnmpCommunityArgs']]]] = None,
                 source_interface_informs_forty_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 source_interface_informs_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 source_interface_informs_hundred_gig_e: Optional[pulumi.Input[str]] = None,
                 source_interface_informs_loopback: Optional[pulumi.Input[int]] = None,
                 source_interface_informs_port_channel: Optional[pulumi.Input[int]] = None,
                 source_interface_informs_port_channel_subinterface: Optional[pulumi.Input[str]] = None,
                 source_interface_informs_ten_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 source_interface_informs_vlan: Optional[pulumi.Input[int]] = None,
                 source_interface_traps_forty_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 source_interface_traps_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 source_interface_traps_hundred_gig_e: Optional[pulumi.Input[str]] = None,
                 source_interface_traps_loopback: Optional[pulumi.Input[int]] = None,
                 source_interface_traps_port_channel: Optional[pulumi.Input[int]] = None,
                 source_interface_traps_port_channel_subinterface: Optional[pulumi.Input[str]] = None,
                 source_interface_traps_ten_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 source_interface_traps_vlan: Optional[pulumi.Input[int]] = None,
                 system_shutdown: Optional[pulumi.Input[bool]] = None,
                 trap_source_forty_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 trap_source_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 trap_source_hundred_gig_e: Optional[pulumi.Input[str]] = None,
                 trap_source_loopback: Optional[pulumi.Input[int]] = None,
                 trap_source_port_channel: Optional[pulumi.Input[int]] = None,
                 trap_source_port_channel_subinterface: Optional[pulumi.Input[str]] = None,
                 trap_source_ten_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 trap_source_vlan: Optional[pulumi.Input[int]] = None,
                 views: Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerViewArgs']]]] = None):
        """
        Input properties used for looking up and filtering SnmpServer resources.
        :param pulumi.Input[str] chassis_id: String to uniquely identify this chassis
        :param pulumi.Input[str] contact: Text for mib object sysContact
        :param pulumi.Input[Sequence[pulumi.Input['SnmpServerContextArgs']]] contexts: Create/Delete a context apart from default
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] enable_informs: Enable SNMP Informs
        :param pulumi.Input[bool] enable_logging_getop: Enable SNMP GET Operation logging
        :param pulumi.Input[bool] enable_logging_setop: Enable SNMP SET Operation logging
        :param pulumi.Input[bool] enable_traps: Enable SNMP Traps
        :param pulumi.Input[bool] enable_traps_bgp_cbgp2: Enable BGP MIBv2 traps
        :param pulumi.Input[bool] enable_traps_bulkstat_collection: Enable Data-Collection-MIB Collection notifications
        :param pulumi.Input[bool] enable_traps_bulkstat_transfer: Enable Data-Collection-MIB Transfer notifications
        :param pulumi.Input[bool] enable_traps_config: Enable SNMP config traps
        :param pulumi.Input[bool] enable_traps_config_copy: Enable SNMP config-copy traps
        :param pulumi.Input[bool] enable_traps_cpu_threshold: Allow CPU utilization threshold violation traps
        :param pulumi.Input[bool] enable_traps_dhcp: Enable SNMP dhcp traps
        :param pulumi.Input[bool] enable_traps_eigrp: Enable SNMP EIGRP traps
        :param pulumi.Input[bool] enable_traps_entity: Enable SNMP entity traps
        :param pulumi.Input[bool] enable_traps_entity_diag_boot_up_fail: Enable SNMP ceDiagBootUpFailedNotif traps
        :param pulumi.Input[bool] enable_traps_entity_diag_hm_test_recover: Enable SNMP ceDiagHMTestRecoverNotif traps
        :param pulumi.Input[bool] enable_traps_entity_diag_hm_thresh_reached: Enable SNMP ceDiagHMThresholdReachedNotif traps
        :param pulumi.Input[bool] enable_traps_entity_diag_scheduled_test_fail: Enable SNMP ceDiagScheduledTestFailedNotif traps
        :param pulumi.Input[bool] enable_traps_entity_perf_throughput_notif: Enable ENTITY PERFORMANCE MIB throughput traps
        :param pulumi.Input[bool] enable_traps_envmon: Enable SNMP environmental monitor traps
        :param pulumi.Input[bool] enable_traps_errdisable: Enable SNMP errdisable notifications
        :param pulumi.Input[bool] enable_traps_event_manager: Enable SNMP Embedded Event Manager traps
        :param pulumi.Input[bool] enable_traps_flash_insertion: Enable SNMP Flash Insertion notifications
        :param pulumi.Input[bool] enable_traps_flash_lowspace: Enable SNMP Flash Lowspace notifications
        :param pulumi.Input[bool] enable_traps_flash_removal: Enable SNMP Flash Removal notifications
        :param pulumi.Input[bool] enable_traps_flowmon: Enable SNMP flowmon notifications
        :param pulumi.Input[bool] enable_traps_fru_ctrl: Enable SNMP entity FRU control traps
        :param pulumi.Input[bool] enable_traps_hsrp: Enable SNMP HSRP traps
        :param pulumi.Input[bool] enable_traps_ike_policy_add: Enable IKE Policy add trap
        :param pulumi.Input[bool] enable_traps_ike_policy_delete: Enable IKE Policy delete trap
        :param pulumi.Input[bool] enable_traps_ike_tunnel_start: Enable IKE Tunnel start trap
        :param pulumi.Input[bool] enable_traps_ike_tunnel_stop: Enable IKE Tunnel stop trap
        :param pulumi.Input[bool] enable_traps_ipmulticast: Enable SNMP ipmulticast traps
        :param pulumi.Input[bool] enable_traps_ipsec_cryptomap_add: Enable IPsec Cryptomap add trap
        :param pulumi.Input[bool] enable_traps_ipsec_cryptomap_attach: Enable IPsec Cryptomap Attach trap
        :param pulumi.Input[bool] enable_traps_ipsec_cryptomap_delete: Enable IPsec Cryptomap delete trap
        :param pulumi.Input[bool] enable_traps_ipsec_cryptomap_detach: Enable IPsec Cryptomap Detach trap
        :param pulumi.Input[bool] enable_traps_ipsec_too_many_sas: Enable IPsec Tunnel Start trap
        :param pulumi.Input[bool] enable_traps_ipsec_tunnel_start: Enable IPsec Tunnel Start trap
        :param pulumi.Input[bool] enable_traps_ipsec_tunnel_stop: Enable IPsec Tunnel Stop trap
        :param pulumi.Input[bool] enable_traps_ipsla: Enable IPSLA traps traps
        :param pulumi.Input[bool] enable_traps_isis: Enable ISIS traps traps
        :param pulumi.Input[bool] enable_traps_license: Enable license traps
        :param pulumi.Input[bool] enable_traps_local_auth: Enable SNMP local auth traps
        :param pulumi.Input[bool] enable_traps_mac_notification_change: Enable SNMP Change traps
        :param pulumi.Input[bool] enable_traps_mac_notification_move: Enable SNMP Move traps
        :param pulumi.Input[bool] enable_traps_mac_notification_threshold: Enable SNMP Threshold traps
        :param pulumi.Input[bool] enable_traps_memory_bufferpeak: Enable SNMP Memory Bufferpeak traps
        :param pulumi.Input[bool] enable_traps_mpls_ldp: SNMP MPLS label distribution protocol traps
        :param pulumi.Input[bool] enable_traps_msdp: Enable SNMP MSDP traps
        :param pulumi.Input[bool] enable_traps_ospf_config_errors: Enable all traps of errors
        :param pulumi.Input[bool] enable_traps_ospf_config_lsa: Enable all traps of lsa
        :param pulumi.Input[bool] enable_traps_ospf_config_retransmit: Enable all traps of retransmit
        :param pulumi.Input[bool] enable_traps_ospf_config_state_change: Enable all traps of state-change
        :param pulumi.Input[bool] enable_traps_ospf_errors_enable: Enable all traps of errors
        :param pulumi.Input[bool] enable_traps_ospf_lsa_enable: Enable all traps of lsa
        :param pulumi.Input[bool] enable_traps_ospf_nssa_trans_change: Nssa translator state changes
        :param pulumi.Input[bool] enable_traps_ospf_retransmit_enable: Enable all traps of retransmit
        :param pulumi.Input[bool] enable_traps_ospf_shamlink_interface: Sham link interface state changes
        :param pulumi.Input[bool] enable_traps_ospf_shamlink_neighbor: Sham link neighbor state changes
        :param pulumi.Input[bool] enable_traps_ospfv3_config_errors: Enable all traps of errors
        :param pulumi.Input[bool] enable_traps_ospfv3_config_state_change: Enable all traps of state-change
        :param pulumi.Input[bool] enable_traps_pim_invalid_pim_message: Enable invalid pim message trap
        :param pulumi.Input[bool] enable_traps_pim_neighbor_change: Enable neighbor change trap
        :param pulumi.Input[bool] enable_traps_pim_rp_mapping_change: Enable rp mapping change trap
        :param pulumi.Input[bool] enable_traps_port_security: Enable SNMP port security traps
        :param pulumi.Input[str] enable_traps_power_ethernet_group: Enable SNMP inline power group based traps
        :param pulumi.Input[bool] enable_traps_power_ethernet_police: Enable Policing Trap
        :param pulumi.Input[bool] enable_traps_rf: Enable all SNMP traps defined in CISCO-RF-MIB
        :param pulumi.Input[bool] enable_traps_smart_license: Enable smart license traps
        :param pulumi.Input[bool] enable_traps_snmp_authentication: Enable authentication trap
        :param pulumi.Input[bool] enable_traps_snmp_coldstart: Enable coldStart trap
        :param pulumi.Input[bool] enable_traps_snmp_linkdown: Enable linkDown trap
        :param pulumi.Input[bool] enable_traps_snmp_linkup: Enable linkUp trap
        :param pulumi.Input[bool] enable_traps_snmp_warmstart: Enable warmStart trap
        :param pulumi.Input[bool] enable_traps_stackwise: Enable SNMP stackwise traps
        :param pulumi.Input[bool] enable_traps_syslog: Enable SNMP syslog traps
        :param pulumi.Input[bool] enable_traps_tty: Enable TCP connection traps
        :param pulumi.Input[bool] enable_traps_udld_link_fail_rpt: Enable SNMP cudldpFastHelloLinkFailRptNotification traps
        :param pulumi.Input[bool] enable_traps_udld_status_change: Enable SNMP cudldpFastHelloStatusChangeNotification traps
        :param pulumi.Input[Sequence[pulumi.Input['SnmpServerHostArgs']]] hosts: Specify hosts keyed by (ip-address, community-or-user)
        :param pulumi.Input[bool] ifindex_persist: Persist interface indices
        :param pulumi.Input[str] location: Text for mib object sysLocation
        :param pulumi.Input[int] packetsize: Largest SNMP packet size - Range: `484`-`17892`
        :param pulumi.Input[int] queue_length: Message queue length for each TRAP host - Range: `1`-`5000`
        :param pulumi.Input[Sequence[pulumi.Input['SnmpServerSnmpCommunityArgs']]] snmp_communities: Enable SNMP; set community string and access privs
        :param pulumi.Input[str] source_interface_informs_forty_gigabit_ethernet: Forty GigabitEthernet
        :param pulumi.Input[str] source_interface_informs_gigabit_ethernet: GigabitEthernet IEEE 802.3z
        :param pulumi.Input[str] source_interface_informs_hundred_gig_e: Hundred GigabitEthernet
        :param pulumi.Input[int] source_interface_informs_loopback: Loopback interface - Range: `0`-`2147483647`
        :param pulumi.Input[int] source_interface_informs_port_channel: Ethernet Channel of interfaces - Range: `0`-`4294967295`
        :param pulumi.Input[str] source_interface_informs_ten_gigabit_ethernet: Ten Gigabit Ethernet
        :param pulumi.Input[int] source_interface_informs_vlan: Iosxr Vlans - Range: `0`-`65535`
        :param pulumi.Input[str] source_interface_traps_forty_gigabit_ethernet: Forty GigabitEthernet
        :param pulumi.Input[str] source_interface_traps_gigabit_ethernet: GigabitEthernet IEEE 802.3z
        :param pulumi.Input[str] source_interface_traps_hundred_gig_e: Hundred GigabitEthernet
        :param pulumi.Input[int] source_interface_traps_loopback: Loopback interface - Range: `0`-`2147483647`
        :param pulumi.Input[int] source_interface_traps_port_channel: Ethernet Channel of interfaces - Range: `0`-`4294967295`
        :param pulumi.Input[str] source_interface_traps_ten_gigabit_ethernet: Ten Gigabit Ethernet
        :param pulumi.Input[int] source_interface_traps_vlan: Iosxr Vlans - Range: `0`-`65535`
        :param pulumi.Input[bool] system_shutdown: Enable use of the SNMP reload command
        :param pulumi.Input[str] trap_source_forty_gigabit_ethernet: Forty GigabitEthernet
        :param pulumi.Input[str] trap_source_gigabit_ethernet: GigabitEthernet IEEE 802.3z
        :param pulumi.Input[str] trap_source_hundred_gig_e: Hundred GigabitEthernet
        :param pulumi.Input[int] trap_source_loopback: Loopback interface - Range: `0`-`2147483647`
        :param pulumi.Input[int] trap_source_port_channel: Ethernet Channel of interfaces - Range: `0`-`4294967295`
        :param pulumi.Input[str] trap_source_ten_gigabit_ethernet: Ten Gigabit Ethernet
        :param pulumi.Input[int] trap_source_vlan: Iosxr Vlans - Range: `0`-`65535`
        :param pulumi.Input[Sequence[pulumi.Input['SnmpServerViewArgs']]] views: Define an SNMPv2 MIB view
        """
        if chassis_id is not None:
            pulumi.set(__self__, "chassis_id", chassis_id)
        if contact is not None:
            pulumi.set(__self__, "contact", contact)
        if contexts is not None:
            pulumi.set(__self__, "contexts", contexts)
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if enable_informs is not None:
            pulumi.set(__self__, "enable_informs", enable_informs)
        if enable_logging_getop is not None:
            pulumi.set(__self__, "enable_logging_getop", enable_logging_getop)
        if enable_logging_setop is not None:
            pulumi.set(__self__, "enable_logging_setop", enable_logging_setop)
        if enable_traps is not None:
            pulumi.set(__self__, "enable_traps", enable_traps)
        if enable_traps_auth_framework_sec_violation is not None:
            pulumi.set(__self__, "enable_traps_auth_framework_sec_violation", enable_traps_auth_framework_sec_violation)
        if enable_traps_bfd is not None:
            pulumi.set(__self__, "enable_traps_bfd", enable_traps_bfd)
        if enable_traps_bgp_cbgp2 is not None:
            pulumi.set(__self__, "enable_traps_bgp_cbgp2", enable_traps_bgp_cbgp2)
        if enable_traps_bridge_newroot is not None:
            pulumi.set(__self__, "enable_traps_bridge_newroot", enable_traps_bridge_newroot)
        if enable_traps_bridge_topologychange is not None:
            pulumi.set(__self__, "enable_traps_bridge_topologychange", enable_traps_bridge_topologychange)
        if enable_traps_bulkstat_collection is not None:
            pulumi.set(__self__, "enable_traps_bulkstat_collection", enable_traps_bulkstat_collection)
        if enable_traps_bulkstat_transfer is not None:
            pulumi.set(__self__, "enable_traps_bulkstat_transfer", enable_traps_bulkstat_transfer)
        if enable_traps_call_home_message_send_fail is not None:
            pulumi.set(__self__, "enable_traps_call_home_message_send_fail", enable_traps_call_home_message_send_fail)
        if enable_traps_call_home_server_fail is not None:
            pulumi.set(__self__, "enable_traps_call_home_server_fail", enable_traps_call_home_server_fail)
        if enable_traps_cef_inconsistency is not None:
            pulumi.set(__self__, "enable_traps_cef_inconsistency", enable_traps_cef_inconsistency)
        if enable_traps_cef_peer_fib_state_change is not None:
            pulumi.set(__self__, "enable_traps_cef_peer_fib_state_change", enable_traps_cef_peer_fib_state_change)
        if enable_traps_cef_peer_state_change is not None:
            pulumi.set(__self__, "enable_traps_cef_peer_state_change", enable_traps_cef_peer_state_change)
        if enable_traps_cef_resource_failure is not None:
            pulumi.set(__self__, "enable_traps_cef_resource_failure", enable_traps_cef_resource_failure)
        if enable_traps_config is not None:
            pulumi.set(__self__, "enable_traps_config", enable_traps_config)
        if enable_traps_config_copy is not None:
            pulumi.set(__self__, "enable_traps_config_copy", enable_traps_config_copy)
        if enable_traps_config_ctid is not None:
            pulumi.set(__self__, "enable_traps_config_ctid", enable_traps_config_ctid)
        if enable_traps_cpu_threshold is not None:
            pulumi.set(__self__, "enable_traps_cpu_threshold", enable_traps_cpu_threshold)
        if enable_traps_dhcp is not None:
            pulumi.set(__self__, "enable_traps_dhcp", enable_traps_dhcp)
        if enable_traps_eigrp is not None:
            pulumi.set(__self__, "enable_traps_eigrp", enable_traps_eigrp)
        if enable_traps_energywise is not None:
            pulumi.set(__self__, "enable_traps_energywise", enable_traps_energywise)
        if enable_traps_entity is not None:
            pulumi.set(__self__, "enable_traps_entity", enable_traps_entity)
        if enable_traps_entity_diag_boot_up_fail is not None:
            pulumi.set(__self__, "enable_traps_entity_diag_boot_up_fail", enable_traps_entity_diag_boot_up_fail)
        if enable_traps_entity_diag_hm_test_recover is not None:
            pulumi.set(__self__, "enable_traps_entity_diag_hm_test_recover", enable_traps_entity_diag_hm_test_recover)
        if enable_traps_entity_diag_hm_thresh_reached is not None:
            pulumi.set(__self__, "enable_traps_entity_diag_hm_thresh_reached", enable_traps_entity_diag_hm_thresh_reached)
        if enable_traps_entity_diag_scheduled_test_fail is not None:
            pulumi.set(__self__, "enable_traps_entity_diag_scheduled_test_fail", enable_traps_entity_diag_scheduled_test_fail)
        if enable_traps_entity_perf_throughput_notif is not None:
            pulumi.set(__self__, "enable_traps_entity_perf_throughput_notif", enable_traps_entity_perf_throughput_notif)
        if enable_traps_envmon is not None:
            pulumi.set(__self__, "enable_traps_envmon", enable_traps_envmon)
        if enable_traps_errdisable is not None:
            pulumi.set(__self__, "enable_traps_errdisable", enable_traps_errdisable)
        if enable_traps_event_manager is not None:
            pulumi.set(__self__, "enable_traps_event_manager", enable_traps_event_manager)
        if enable_traps_fast_reroute_protected is not None:
            pulumi.set(__self__, "enable_traps_fast_reroute_protected", enable_traps_fast_reroute_protected)
        if enable_traps_flash_insertion is not None:
            pulumi.set(__self__, "enable_traps_flash_insertion", enable_traps_flash_insertion)
        if enable_traps_flash_lowspace is not None:
            pulumi.set(__self__, "enable_traps_flash_lowspace", enable_traps_flash_lowspace)
        if enable_traps_flash_removal is not None:
            pulumi.set(__self__, "enable_traps_flash_removal", enable_traps_flash_removal)
        if enable_traps_flowmon is not None:
            pulumi.set(__self__, "enable_traps_flowmon", enable_traps_flowmon)
        if enable_traps_fru_ctrl is not None:
            pulumi.set(__self__, "enable_traps_fru_ctrl", enable_traps_fru_ctrl)
        if enable_traps_hsrp is not None:
            pulumi.set(__self__, "enable_traps_hsrp", enable_traps_hsrp)
        if enable_traps_ike_policy_add is not None:
            pulumi.set(__self__, "enable_traps_ike_policy_add", enable_traps_ike_policy_add)
        if enable_traps_ike_policy_delete is not None:
            pulumi.set(__self__, "enable_traps_ike_policy_delete", enable_traps_ike_policy_delete)
        if enable_traps_ike_tunnel_start is not None:
            pulumi.set(__self__, "enable_traps_ike_tunnel_start", enable_traps_ike_tunnel_start)
        if enable_traps_ike_tunnel_stop is not None:
            pulumi.set(__self__, "enable_traps_ike_tunnel_stop", enable_traps_ike_tunnel_stop)
        if enable_traps_ipmulticast is not None:
            pulumi.set(__self__, "enable_traps_ipmulticast", enable_traps_ipmulticast)
        if enable_traps_ipsec_cryptomap_add is not None:
            pulumi.set(__self__, "enable_traps_ipsec_cryptomap_add", enable_traps_ipsec_cryptomap_add)
        if enable_traps_ipsec_cryptomap_attach is not None:
            pulumi.set(__self__, "enable_traps_ipsec_cryptomap_attach", enable_traps_ipsec_cryptomap_attach)
        if enable_traps_ipsec_cryptomap_delete is not None:
            pulumi.set(__self__, "enable_traps_ipsec_cryptomap_delete", enable_traps_ipsec_cryptomap_delete)
        if enable_traps_ipsec_cryptomap_detach is not None:
            pulumi.set(__self__, "enable_traps_ipsec_cryptomap_detach", enable_traps_ipsec_cryptomap_detach)
        if enable_traps_ipsec_too_many_sas is not None:
            pulumi.set(__self__, "enable_traps_ipsec_too_many_sas", enable_traps_ipsec_too_many_sas)
        if enable_traps_ipsec_tunnel_start is not None:
            pulumi.set(__self__, "enable_traps_ipsec_tunnel_start", enable_traps_ipsec_tunnel_start)
        if enable_traps_ipsec_tunnel_stop is not None:
            pulumi.set(__self__, "enable_traps_ipsec_tunnel_stop", enable_traps_ipsec_tunnel_stop)
        if enable_traps_ipsla is not None:
            pulumi.set(__self__, "enable_traps_ipsla", enable_traps_ipsla)
        if enable_traps_isis is not None:
            pulumi.set(__self__, "enable_traps_isis", enable_traps_isis)
        if enable_traps_license is not None:
            pulumi.set(__self__, "enable_traps_license", enable_traps_license)
        if enable_traps_local_auth is not None:
            pulumi.set(__self__, "enable_traps_local_auth", enable_traps_local_auth)
        if enable_traps_mac_notification_change is not None:
            pulumi.set(__self__, "enable_traps_mac_notification_change", enable_traps_mac_notification_change)
        if enable_traps_mac_notification_move is not None:
            pulumi.set(__self__, "enable_traps_mac_notification_move", enable_traps_mac_notification_move)
        if enable_traps_mac_notification_threshold is not None:
            pulumi.set(__self__, "enable_traps_mac_notification_threshold", enable_traps_mac_notification_threshold)
        if enable_traps_memory_bufferpeak is not None:
            pulumi.set(__self__, "enable_traps_memory_bufferpeak", enable_traps_memory_bufferpeak)
        if enable_traps_mpls_ldp is not None:
            pulumi.set(__self__, "enable_traps_mpls_ldp", enable_traps_mpls_ldp)
        if enable_traps_mpls_rfc_ldp is not None:
            pulumi.set(__self__, "enable_traps_mpls_rfc_ldp", enable_traps_mpls_rfc_ldp)
        if enable_traps_mpls_traffic_eng is not None:
            pulumi.set(__self__, "enable_traps_mpls_traffic_eng", enable_traps_mpls_traffic_eng)
        if enable_traps_mpls_vpn is not None:
            pulumi.set(__self__, "enable_traps_mpls_vpn", enable_traps_mpls_vpn)
        if enable_traps_msdp is not None:
            pulumi.set(__self__, "enable_traps_msdp", enable_traps_msdp)
        if enable_traps_nhrp_nhc is not None:
            pulumi.set(__self__, "enable_traps_nhrp_nhc", enable_traps_nhrp_nhc)
        if enable_traps_nhrp_nhp is not None:
            pulumi.set(__self__, "enable_traps_nhrp_nhp", enable_traps_nhrp_nhp)
        if enable_traps_nhrp_nhs is not None:
            pulumi.set(__self__, "enable_traps_nhrp_nhs", enable_traps_nhrp_nhs)
        if enable_traps_nhrp_quota_exceeded is not None:
            pulumi.set(__self__, "enable_traps_nhrp_quota_exceeded", enable_traps_nhrp_quota_exceeded)
        if enable_traps_ospf_config_errors is not None:
            pulumi.set(__self__, "enable_traps_ospf_config_errors", enable_traps_ospf_config_errors)
        if enable_traps_ospf_config_lsa is not None:
            pulumi.set(__self__, "enable_traps_ospf_config_lsa", enable_traps_ospf_config_lsa)
        if enable_traps_ospf_config_retransmit is not None:
            pulumi.set(__self__, "enable_traps_ospf_config_retransmit", enable_traps_ospf_config_retransmit)
        if enable_traps_ospf_config_state_change is not None:
            pulumi.set(__self__, "enable_traps_ospf_config_state_change", enable_traps_ospf_config_state_change)
        if enable_traps_ospf_errors_enable is not None:
            pulumi.set(__self__, "enable_traps_ospf_errors_enable", enable_traps_ospf_errors_enable)
        if enable_traps_ospf_lsa_enable is not None:
            pulumi.set(__self__, "enable_traps_ospf_lsa_enable", enable_traps_ospf_lsa_enable)
        if enable_traps_ospf_nssa_trans_change is not None:
            pulumi.set(__self__, "enable_traps_ospf_nssa_trans_change", enable_traps_ospf_nssa_trans_change)
        if enable_traps_ospf_retransmit_enable is not None:
            pulumi.set(__self__, "enable_traps_ospf_retransmit_enable", enable_traps_ospf_retransmit_enable)
        if enable_traps_ospf_shamlink_interface is not None:
            pulumi.set(__self__, "enable_traps_ospf_shamlink_interface", enable_traps_ospf_shamlink_interface)
        if enable_traps_ospf_shamlink_neighbor is not None:
            pulumi.set(__self__, "enable_traps_ospf_shamlink_neighbor", enable_traps_ospf_shamlink_neighbor)
        if enable_traps_ospfv3_config_errors is not None:
            pulumi.set(__self__, "enable_traps_ospfv3_config_errors", enable_traps_ospfv3_config_errors)
        if enable_traps_ospfv3_config_state_change is not None:
            pulumi.set(__self__, "enable_traps_ospfv3_config_state_change", enable_traps_ospfv3_config_state_change)
        if enable_traps_pim_invalid_pim_message is not None:
            pulumi.set(__self__, "enable_traps_pim_invalid_pim_message", enable_traps_pim_invalid_pim_message)
        if enable_traps_pim_neighbor_change is not None:
            pulumi.set(__self__, "enable_traps_pim_neighbor_change", enable_traps_pim_neighbor_change)
        if enable_traps_pim_rp_mapping_change is not None:
            pulumi.set(__self__, "enable_traps_pim_rp_mapping_change", enable_traps_pim_rp_mapping_change)
        if enable_traps_port_security is not None:
            pulumi.set(__self__, "enable_traps_port_security", enable_traps_port_security)
        if enable_traps_power_ethernet_group is not None:
            pulumi.set(__self__, "enable_traps_power_ethernet_group", enable_traps_power_ethernet_group)
        if enable_traps_power_ethernet_police is not None:
            pulumi.set(__self__, "enable_traps_power_ethernet_police", enable_traps_power_ethernet_police)
        if enable_traps_pw_vc is not None:
            pulumi.set(__self__, "enable_traps_pw_vc", enable_traps_pw_vc)
        if enable_traps_rep is not None:
            pulumi.set(__self__, "enable_traps_rep", enable_traps_rep)
        if enable_traps_rf is not None:
            pulumi.set(__self__, "enable_traps_rf", enable_traps_rf)
        if enable_traps_smart_license is not None:
            pulumi.set(__self__, "enable_traps_smart_license", enable_traps_smart_license)
        if enable_traps_snmp_authentication is not None:
            pulumi.set(__self__, "enable_traps_snmp_authentication", enable_traps_snmp_authentication)
        if enable_traps_snmp_coldstart is not None:
            pulumi.set(__self__, "enable_traps_snmp_coldstart", enable_traps_snmp_coldstart)
        if enable_traps_snmp_linkdown is not None:
            pulumi.set(__self__, "enable_traps_snmp_linkdown", enable_traps_snmp_linkdown)
        if enable_traps_snmp_linkup is not None:
            pulumi.set(__self__, "enable_traps_snmp_linkup", enable_traps_snmp_linkup)
        if enable_traps_snmp_warmstart is not None:
            pulumi.set(__self__, "enable_traps_snmp_warmstart", enable_traps_snmp_warmstart)
        if enable_traps_stackwise is not None:
            pulumi.set(__self__, "enable_traps_stackwise", enable_traps_stackwise)
        if enable_traps_stpx_inconsistency is not None:
            pulumi.set(__self__, "enable_traps_stpx_inconsistency", enable_traps_stpx_inconsistency)
        if enable_traps_stpx_loop_inconsistency is not None:
            pulumi.set(__self__, "enable_traps_stpx_loop_inconsistency", enable_traps_stpx_loop_inconsistency)
        if enable_traps_stpx_root_inconsistency is not None:
            pulumi.set(__self__, "enable_traps_stpx_root_inconsistency", enable_traps_stpx_root_inconsistency)
        if enable_traps_syslog is not None:
            pulumi.set(__self__, "enable_traps_syslog", enable_traps_syslog)
        if enable_traps_transceiver_all is not None:
            pulumi.set(__self__, "enable_traps_transceiver_all", enable_traps_transceiver_all)
        if enable_traps_tty is not None:
            pulumi.set(__self__, "enable_traps_tty", enable_traps_tty)
        if enable_traps_udld_link_fail_rpt is not None:
            pulumi.set(__self__, "enable_traps_udld_link_fail_rpt", enable_traps_udld_link_fail_rpt)
        if enable_traps_udld_status_change is not None:
            pulumi.set(__self__, "enable_traps_udld_status_change", enable_traps_udld_status_change)
        if enable_traps_vlan_membership is not None:
            pulumi.set(__self__, "enable_traps_vlan_membership", enable_traps_vlan_membership)
        if enable_traps_vlancreate is not None:
            pulumi.set(__self__, "enable_traps_vlancreate", enable_traps_vlancreate)
        if enable_traps_vlandelete is not None:
            pulumi.set(__self__, "enable_traps_vlandelete", enable_traps_vlandelete)
        if enable_traps_vrfmib_vnet_trunk_down is not None:
            pulumi.set(__self__, "enable_traps_vrfmib_vnet_trunk_down", enable_traps_vrfmib_vnet_trunk_down)
        if enable_traps_vrfmib_vnet_trunk_up is not None:
            pulumi.set(__self__, "enable_traps_vrfmib_vnet_trunk_up", enable_traps_vrfmib_vnet_trunk_up)
        if enable_traps_vrfmib_vrf_down is not None:
            pulumi.set(__self__, "enable_traps_vrfmib_vrf_down", enable_traps_vrfmib_vrf_down)
        if enable_traps_vrfmib_vrf_up is not None:
            pulumi.set(__self__, "enable_traps_vrfmib_vrf_up", enable_traps_vrfmib_vrf_up)
        if enable_traps_vtp is not None:
            pulumi.set(__self__, "enable_traps_vtp", enable_traps_vtp)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if ifindex_persist is not None:
            pulumi.set(__self__, "ifindex_persist", ifindex_persist)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if packetsize is not None:
            pulumi.set(__self__, "packetsize", packetsize)
        if queue_length is not None:
            pulumi.set(__self__, "queue_length", queue_length)
        if snmp_communities is not None:
            pulumi.set(__self__, "snmp_communities", snmp_communities)
        if source_interface_informs_forty_gigabit_ethernet is not None:
            pulumi.set(__self__, "source_interface_informs_forty_gigabit_ethernet", source_interface_informs_forty_gigabit_ethernet)
        if source_interface_informs_gigabit_ethernet is not None:
            pulumi.set(__self__, "source_interface_informs_gigabit_ethernet", source_interface_informs_gigabit_ethernet)
        if source_interface_informs_hundred_gig_e is not None:
            pulumi.set(__self__, "source_interface_informs_hundred_gig_e", source_interface_informs_hundred_gig_e)
        if source_interface_informs_loopback is not None:
            pulumi.set(__self__, "source_interface_informs_loopback", source_interface_informs_loopback)
        if source_interface_informs_port_channel is not None:
            pulumi.set(__self__, "source_interface_informs_port_channel", source_interface_informs_port_channel)
        if source_interface_informs_port_channel_subinterface is not None:
            pulumi.set(__self__, "source_interface_informs_port_channel_subinterface", source_interface_informs_port_channel_subinterface)
        if source_interface_informs_ten_gigabit_ethernet is not None:
            pulumi.set(__self__, "source_interface_informs_ten_gigabit_ethernet", source_interface_informs_ten_gigabit_ethernet)
        if source_interface_informs_vlan is not None:
            pulumi.set(__self__, "source_interface_informs_vlan", source_interface_informs_vlan)
        if source_interface_traps_forty_gigabit_ethernet is not None:
            pulumi.set(__self__, "source_interface_traps_forty_gigabit_ethernet", source_interface_traps_forty_gigabit_ethernet)
        if source_interface_traps_gigabit_ethernet is not None:
            pulumi.set(__self__, "source_interface_traps_gigabit_ethernet", source_interface_traps_gigabit_ethernet)
        if source_interface_traps_hundred_gig_e is not None:
            pulumi.set(__self__, "source_interface_traps_hundred_gig_e", source_interface_traps_hundred_gig_e)
        if source_interface_traps_loopback is not None:
            pulumi.set(__self__, "source_interface_traps_loopback", source_interface_traps_loopback)
        if source_interface_traps_port_channel is not None:
            pulumi.set(__self__, "source_interface_traps_port_channel", source_interface_traps_port_channel)
        if source_interface_traps_port_channel_subinterface is not None:
            pulumi.set(__self__, "source_interface_traps_port_channel_subinterface", source_interface_traps_port_channel_subinterface)
        if source_interface_traps_ten_gigabit_ethernet is not None:
            pulumi.set(__self__, "source_interface_traps_ten_gigabit_ethernet", source_interface_traps_ten_gigabit_ethernet)
        if source_interface_traps_vlan is not None:
            pulumi.set(__self__, "source_interface_traps_vlan", source_interface_traps_vlan)
        if system_shutdown is not None:
            pulumi.set(__self__, "system_shutdown", system_shutdown)
        if trap_source_forty_gigabit_ethernet is not None:
            pulumi.set(__self__, "trap_source_forty_gigabit_ethernet", trap_source_forty_gigabit_ethernet)
        if trap_source_gigabit_ethernet is not None:
            pulumi.set(__self__, "trap_source_gigabit_ethernet", trap_source_gigabit_ethernet)
        if trap_source_hundred_gig_e is not None:
            pulumi.set(__self__, "trap_source_hundred_gig_e", trap_source_hundred_gig_e)
        if trap_source_loopback is not None:
            pulumi.set(__self__, "trap_source_loopback", trap_source_loopback)
        if trap_source_port_channel is not None:
            pulumi.set(__self__, "trap_source_port_channel", trap_source_port_channel)
        if trap_source_port_channel_subinterface is not None:
            pulumi.set(__self__, "trap_source_port_channel_subinterface", trap_source_port_channel_subinterface)
        if trap_source_ten_gigabit_ethernet is not None:
            pulumi.set(__self__, "trap_source_ten_gigabit_ethernet", trap_source_ten_gigabit_ethernet)
        if trap_source_vlan is not None:
            pulumi.set(__self__, "trap_source_vlan", trap_source_vlan)
        if views is not None:
            pulumi.set(__self__, "views", views)

    @property
    @pulumi.getter(name="chassisId")
    def chassis_id(self) -> Optional[pulumi.Input[str]]:
        """
        String to uniquely identify this chassis
        """
        return pulumi.get(self, "chassis_id")

    @chassis_id.setter
    def chassis_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chassis_id", value)

    @property
    @pulumi.getter
    def contact(self) -> Optional[pulumi.Input[str]]:
        """
        Text for mib object sysContact
        """
        return pulumi.get(self, "contact")

    @contact.setter
    def contact(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "contact", value)

    @property
    @pulumi.getter
    def contexts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerContextArgs']]]]:
        """
        Create/Delete a context apart from default
        """
        return pulumi.get(self, "contexts")

    @contexts.setter
    def contexts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerContextArgs']]]]):
        pulumi.set(self, "contexts", value)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="enableInforms")
    def enable_informs(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP Informs
        """
        return pulumi.get(self, "enable_informs")

    @enable_informs.setter
    def enable_informs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_informs", value)

    @property
    @pulumi.getter(name="enableLoggingGetop")
    def enable_logging_getop(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP GET Operation logging
        """
        return pulumi.get(self, "enable_logging_getop")

    @enable_logging_getop.setter
    def enable_logging_getop(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_logging_getop", value)

    @property
    @pulumi.getter(name="enableLoggingSetop")
    def enable_logging_setop(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP SET Operation logging
        """
        return pulumi.get(self, "enable_logging_setop")

    @enable_logging_setop.setter
    def enable_logging_setop(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_logging_setop", value)

    @property
    @pulumi.getter(name="enableTraps")
    def enable_traps(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP Traps
        """
        return pulumi.get(self, "enable_traps")

    @enable_traps.setter
    def enable_traps(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps", value)

    @property
    @pulumi.getter(name="enableTrapsAuthFrameworkSecViolation")
    def enable_traps_auth_framework_sec_violation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_auth_framework_sec_violation")

    @enable_traps_auth_framework_sec_violation.setter
    def enable_traps_auth_framework_sec_violation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_auth_framework_sec_violation", value)

    @property
    @pulumi.getter(name="enableTrapsBfd")
    def enable_traps_bfd(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_bfd")

    @enable_traps_bfd.setter
    def enable_traps_bfd(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_bfd", value)

    @property
    @pulumi.getter(name="enableTrapsBgpCbgp2")
    def enable_traps_bgp_cbgp2(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable BGP MIBv2 traps
        """
        return pulumi.get(self, "enable_traps_bgp_cbgp2")

    @enable_traps_bgp_cbgp2.setter
    def enable_traps_bgp_cbgp2(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_bgp_cbgp2", value)

    @property
    @pulumi.getter(name="enableTrapsBridgeNewroot")
    def enable_traps_bridge_newroot(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_bridge_newroot")

    @enable_traps_bridge_newroot.setter
    def enable_traps_bridge_newroot(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_bridge_newroot", value)

    @property
    @pulumi.getter(name="enableTrapsBridgeTopologychange")
    def enable_traps_bridge_topologychange(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_bridge_topologychange")

    @enable_traps_bridge_topologychange.setter
    def enable_traps_bridge_topologychange(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_bridge_topologychange", value)

    @property
    @pulumi.getter(name="enableTrapsBulkstatCollection")
    def enable_traps_bulkstat_collection(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Data-Collection-MIB Collection notifications
        """
        return pulumi.get(self, "enable_traps_bulkstat_collection")

    @enable_traps_bulkstat_collection.setter
    def enable_traps_bulkstat_collection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_bulkstat_collection", value)

    @property
    @pulumi.getter(name="enableTrapsBulkstatTransfer")
    def enable_traps_bulkstat_transfer(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Data-Collection-MIB Transfer notifications
        """
        return pulumi.get(self, "enable_traps_bulkstat_transfer")

    @enable_traps_bulkstat_transfer.setter
    def enable_traps_bulkstat_transfer(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_bulkstat_transfer", value)

    @property
    @pulumi.getter(name="enableTrapsCallHomeMessageSendFail")
    def enable_traps_call_home_message_send_fail(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_call_home_message_send_fail")

    @enable_traps_call_home_message_send_fail.setter
    def enable_traps_call_home_message_send_fail(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_call_home_message_send_fail", value)

    @property
    @pulumi.getter(name="enableTrapsCallHomeServerFail")
    def enable_traps_call_home_server_fail(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_call_home_server_fail")

    @enable_traps_call_home_server_fail.setter
    def enable_traps_call_home_server_fail(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_call_home_server_fail", value)

    @property
    @pulumi.getter(name="enableTrapsCefInconsistency")
    def enable_traps_cef_inconsistency(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_cef_inconsistency")

    @enable_traps_cef_inconsistency.setter
    def enable_traps_cef_inconsistency(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_cef_inconsistency", value)

    @property
    @pulumi.getter(name="enableTrapsCefPeerFibStateChange")
    def enable_traps_cef_peer_fib_state_change(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_cef_peer_fib_state_change")

    @enable_traps_cef_peer_fib_state_change.setter
    def enable_traps_cef_peer_fib_state_change(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_cef_peer_fib_state_change", value)

    @property
    @pulumi.getter(name="enableTrapsCefPeerStateChange")
    def enable_traps_cef_peer_state_change(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_cef_peer_state_change")

    @enable_traps_cef_peer_state_change.setter
    def enable_traps_cef_peer_state_change(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_cef_peer_state_change", value)

    @property
    @pulumi.getter(name="enableTrapsCefResourceFailure")
    def enable_traps_cef_resource_failure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_cef_resource_failure")

    @enable_traps_cef_resource_failure.setter
    def enable_traps_cef_resource_failure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_cef_resource_failure", value)

    @property
    @pulumi.getter(name="enableTrapsConfig")
    def enable_traps_config(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP config traps
        """
        return pulumi.get(self, "enable_traps_config")

    @enable_traps_config.setter
    def enable_traps_config(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_config", value)

    @property
    @pulumi.getter(name="enableTrapsConfigCopy")
    def enable_traps_config_copy(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP config-copy traps
        """
        return pulumi.get(self, "enable_traps_config_copy")

    @enable_traps_config_copy.setter
    def enable_traps_config_copy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_config_copy", value)

    @property
    @pulumi.getter(name="enableTrapsConfigCtid")
    def enable_traps_config_ctid(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_config_ctid")

    @enable_traps_config_ctid.setter
    def enable_traps_config_ctid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_config_ctid", value)

    @property
    @pulumi.getter(name="enableTrapsCpuThreshold")
    def enable_traps_cpu_threshold(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow CPU utilization threshold violation traps
        """
        return pulumi.get(self, "enable_traps_cpu_threshold")

    @enable_traps_cpu_threshold.setter
    def enable_traps_cpu_threshold(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_cpu_threshold", value)

    @property
    @pulumi.getter(name="enableTrapsDhcp")
    def enable_traps_dhcp(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP dhcp traps
        """
        return pulumi.get(self, "enable_traps_dhcp")

    @enable_traps_dhcp.setter
    def enable_traps_dhcp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_dhcp", value)

    @property
    @pulumi.getter(name="enableTrapsEigrp")
    def enable_traps_eigrp(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP EIGRP traps
        """
        return pulumi.get(self, "enable_traps_eigrp")

    @enable_traps_eigrp.setter
    def enable_traps_eigrp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_eigrp", value)

    @property
    @pulumi.getter(name="enableTrapsEnergywise")
    def enable_traps_energywise(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_energywise")

    @enable_traps_energywise.setter
    def enable_traps_energywise(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_energywise", value)

    @property
    @pulumi.getter(name="enableTrapsEntity")
    def enable_traps_entity(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP entity traps
        """
        return pulumi.get(self, "enable_traps_entity")

    @enable_traps_entity.setter
    def enable_traps_entity(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_entity", value)

    @property
    @pulumi.getter(name="enableTrapsEntityDiagBootUpFail")
    def enable_traps_entity_diag_boot_up_fail(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP ceDiagBootUpFailedNotif traps
        """
        return pulumi.get(self, "enable_traps_entity_diag_boot_up_fail")

    @enable_traps_entity_diag_boot_up_fail.setter
    def enable_traps_entity_diag_boot_up_fail(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_entity_diag_boot_up_fail", value)

    @property
    @pulumi.getter(name="enableTrapsEntityDiagHmTestRecover")
    def enable_traps_entity_diag_hm_test_recover(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP ceDiagHMTestRecoverNotif traps
        """
        return pulumi.get(self, "enable_traps_entity_diag_hm_test_recover")

    @enable_traps_entity_diag_hm_test_recover.setter
    def enable_traps_entity_diag_hm_test_recover(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_entity_diag_hm_test_recover", value)

    @property
    @pulumi.getter(name="enableTrapsEntityDiagHmThreshReached")
    def enable_traps_entity_diag_hm_thresh_reached(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP ceDiagHMThresholdReachedNotif traps
        """
        return pulumi.get(self, "enable_traps_entity_diag_hm_thresh_reached")

    @enable_traps_entity_diag_hm_thresh_reached.setter
    def enable_traps_entity_diag_hm_thresh_reached(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_entity_diag_hm_thresh_reached", value)

    @property
    @pulumi.getter(name="enableTrapsEntityDiagScheduledTestFail")
    def enable_traps_entity_diag_scheduled_test_fail(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP ceDiagScheduledTestFailedNotif traps
        """
        return pulumi.get(self, "enable_traps_entity_diag_scheduled_test_fail")

    @enable_traps_entity_diag_scheduled_test_fail.setter
    def enable_traps_entity_diag_scheduled_test_fail(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_entity_diag_scheduled_test_fail", value)

    @property
    @pulumi.getter(name="enableTrapsEntityPerfThroughputNotif")
    def enable_traps_entity_perf_throughput_notif(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable ENTITY PERFORMANCE MIB throughput traps
        """
        return pulumi.get(self, "enable_traps_entity_perf_throughput_notif")

    @enable_traps_entity_perf_throughput_notif.setter
    def enable_traps_entity_perf_throughput_notif(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_entity_perf_throughput_notif", value)

    @property
    @pulumi.getter(name="enableTrapsEnvmon")
    def enable_traps_envmon(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP environmental monitor traps
        """
        return pulumi.get(self, "enable_traps_envmon")

    @enable_traps_envmon.setter
    def enable_traps_envmon(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_envmon", value)

    @property
    @pulumi.getter(name="enableTrapsErrdisable")
    def enable_traps_errdisable(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP errdisable notifications
        """
        return pulumi.get(self, "enable_traps_errdisable")

    @enable_traps_errdisable.setter
    def enable_traps_errdisable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_errdisable", value)

    @property
    @pulumi.getter(name="enableTrapsEventManager")
    def enable_traps_event_manager(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP Embedded Event Manager traps
        """
        return pulumi.get(self, "enable_traps_event_manager")

    @enable_traps_event_manager.setter
    def enable_traps_event_manager(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_event_manager", value)

    @property
    @pulumi.getter(name="enableTrapsFastRerouteProtected")
    def enable_traps_fast_reroute_protected(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_fast_reroute_protected")

    @enable_traps_fast_reroute_protected.setter
    def enable_traps_fast_reroute_protected(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_fast_reroute_protected", value)

    @property
    @pulumi.getter(name="enableTrapsFlashInsertion")
    def enable_traps_flash_insertion(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP Flash Insertion notifications
        """
        return pulumi.get(self, "enable_traps_flash_insertion")

    @enable_traps_flash_insertion.setter
    def enable_traps_flash_insertion(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_flash_insertion", value)

    @property
    @pulumi.getter(name="enableTrapsFlashLowspace")
    def enable_traps_flash_lowspace(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP Flash Lowspace notifications
        """
        return pulumi.get(self, "enable_traps_flash_lowspace")

    @enable_traps_flash_lowspace.setter
    def enable_traps_flash_lowspace(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_flash_lowspace", value)

    @property
    @pulumi.getter(name="enableTrapsFlashRemoval")
    def enable_traps_flash_removal(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP Flash Removal notifications
        """
        return pulumi.get(self, "enable_traps_flash_removal")

    @enable_traps_flash_removal.setter
    def enable_traps_flash_removal(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_flash_removal", value)

    @property
    @pulumi.getter(name="enableTrapsFlowmon")
    def enable_traps_flowmon(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP flowmon notifications
        """
        return pulumi.get(self, "enable_traps_flowmon")

    @enable_traps_flowmon.setter
    def enable_traps_flowmon(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_flowmon", value)

    @property
    @pulumi.getter(name="enableTrapsFruCtrl")
    def enable_traps_fru_ctrl(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP entity FRU control traps
        """
        return pulumi.get(self, "enable_traps_fru_ctrl")

    @enable_traps_fru_ctrl.setter
    def enable_traps_fru_ctrl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_fru_ctrl", value)

    @property
    @pulumi.getter(name="enableTrapsHsrp")
    def enable_traps_hsrp(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP HSRP traps
        """
        return pulumi.get(self, "enable_traps_hsrp")

    @enable_traps_hsrp.setter
    def enable_traps_hsrp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_hsrp", value)

    @property
    @pulumi.getter(name="enableTrapsIkePolicyAdd")
    def enable_traps_ike_policy_add(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IKE Policy add trap
        """
        return pulumi.get(self, "enable_traps_ike_policy_add")

    @enable_traps_ike_policy_add.setter
    def enable_traps_ike_policy_add(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ike_policy_add", value)

    @property
    @pulumi.getter(name="enableTrapsIkePolicyDelete")
    def enable_traps_ike_policy_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IKE Policy delete trap
        """
        return pulumi.get(self, "enable_traps_ike_policy_delete")

    @enable_traps_ike_policy_delete.setter
    def enable_traps_ike_policy_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ike_policy_delete", value)

    @property
    @pulumi.getter(name="enableTrapsIkeTunnelStart")
    def enable_traps_ike_tunnel_start(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IKE Tunnel start trap
        """
        return pulumi.get(self, "enable_traps_ike_tunnel_start")

    @enable_traps_ike_tunnel_start.setter
    def enable_traps_ike_tunnel_start(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ike_tunnel_start", value)

    @property
    @pulumi.getter(name="enableTrapsIkeTunnelStop")
    def enable_traps_ike_tunnel_stop(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IKE Tunnel stop trap
        """
        return pulumi.get(self, "enable_traps_ike_tunnel_stop")

    @enable_traps_ike_tunnel_stop.setter
    def enable_traps_ike_tunnel_stop(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ike_tunnel_stop", value)

    @property
    @pulumi.getter(name="enableTrapsIpmulticast")
    def enable_traps_ipmulticast(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP ipmulticast traps
        """
        return pulumi.get(self, "enable_traps_ipmulticast")

    @enable_traps_ipmulticast.setter
    def enable_traps_ipmulticast(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ipmulticast", value)

    @property
    @pulumi.getter(name="enableTrapsIpsecCryptomapAdd")
    def enable_traps_ipsec_cryptomap_add(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IPsec Cryptomap add trap
        """
        return pulumi.get(self, "enable_traps_ipsec_cryptomap_add")

    @enable_traps_ipsec_cryptomap_add.setter
    def enable_traps_ipsec_cryptomap_add(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ipsec_cryptomap_add", value)

    @property
    @pulumi.getter(name="enableTrapsIpsecCryptomapAttach")
    def enable_traps_ipsec_cryptomap_attach(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IPsec Cryptomap Attach trap
        """
        return pulumi.get(self, "enable_traps_ipsec_cryptomap_attach")

    @enable_traps_ipsec_cryptomap_attach.setter
    def enable_traps_ipsec_cryptomap_attach(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ipsec_cryptomap_attach", value)

    @property
    @pulumi.getter(name="enableTrapsIpsecCryptomapDelete")
    def enable_traps_ipsec_cryptomap_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IPsec Cryptomap delete trap
        """
        return pulumi.get(self, "enable_traps_ipsec_cryptomap_delete")

    @enable_traps_ipsec_cryptomap_delete.setter
    def enable_traps_ipsec_cryptomap_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ipsec_cryptomap_delete", value)

    @property
    @pulumi.getter(name="enableTrapsIpsecCryptomapDetach")
    def enable_traps_ipsec_cryptomap_detach(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IPsec Cryptomap Detach trap
        """
        return pulumi.get(self, "enable_traps_ipsec_cryptomap_detach")

    @enable_traps_ipsec_cryptomap_detach.setter
    def enable_traps_ipsec_cryptomap_detach(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ipsec_cryptomap_detach", value)

    @property
    @pulumi.getter(name="enableTrapsIpsecTooManySas")
    def enable_traps_ipsec_too_many_sas(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IPsec Tunnel Start trap
        """
        return pulumi.get(self, "enable_traps_ipsec_too_many_sas")

    @enable_traps_ipsec_too_many_sas.setter
    def enable_traps_ipsec_too_many_sas(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ipsec_too_many_sas", value)

    @property
    @pulumi.getter(name="enableTrapsIpsecTunnelStart")
    def enable_traps_ipsec_tunnel_start(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IPsec Tunnel Start trap
        """
        return pulumi.get(self, "enable_traps_ipsec_tunnel_start")

    @enable_traps_ipsec_tunnel_start.setter
    def enable_traps_ipsec_tunnel_start(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ipsec_tunnel_start", value)

    @property
    @pulumi.getter(name="enableTrapsIpsecTunnelStop")
    def enable_traps_ipsec_tunnel_stop(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IPsec Tunnel Stop trap
        """
        return pulumi.get(self, "enable_traps_ipsec_tunnel_stop")

    @enable_traps_ipsec_tunnel_stop.setter
    def enable_traps_ipsec_tunnel_stop(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ipsec_tunnel_stop", value)

    @property
    @pulumi.getter(name="enableTrapsIpsla")
    def enable_traps_ipsla(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IPSLA traps traps
        """
        return pulumi.get(self, "enable_traps_ipsla")

    @enable_traps_ipsla.setter
    def enable_traps_ipsla(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ipsla", value)

    @property
    @pulumi.getter(name="enableTrapsIsis")
    def enable_traps_isis(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable ISIS traps traps
        """
        return pulumi.get(self, "enable_traps_isis")

    @enable_traps_isis.setter
    def enable_traps_isis(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_isis", value)

    @property
    @pulumi.getter(name="enableTrapsLicense")
    def enable_traps_license(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable license traps
        """
        return pulumi.get(self, "enable_traps_license")

    @enable_traps_license.setter
    def enable_traps_license(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_license", value)

    @property
    @pulumi.getter(name="enableTrapsLocalAuth")
    def enable_traps_local_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP local auth traps
        """
        return pulumi.get(self, "enable_traps_local_auth")

    @enable_traps_local_auth.setter
    def enable_traps_local_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_local_auth", value)

    @property
    @pulumi.getter(name="enableTrapsMacNotificationChange")
    def enable_traps_mac_notification_change(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP Change traps
        """
        return pulumi.get(self, "enable_traps_mac_notification_change")

    @enable_traps_mac_notification_change.setter
    def enable_traps_mac_notification_change(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_mac_notification_change", value)

    @property
    @pulumi.getter(name="enableTrapsMacNotificationMove")
    def enable_traps_mac_notification_move(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP Move traps
        """
        return pulumi.get(self, "enable_traps_mac_notification_move")

    @enable_traps_mac_notification_move.setter
    def enable_traps_mac_notification_move(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_mac_notification_move", value)

    @property
    @pulumi.getter(name="enableTrapsMacNotificationThreshold")
    def enable_traps_mac_notification_threshold(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP Threshold traps
        """
        return pulumi.get(self, "enable_traps_mac_notification_threshold")

    @enable_traps_mac_notification_threshold.setter
    def enable_traps_mac_notification_threshold(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_mac_notification_threshold", value)

    @property
    @pulumi.getter(name="enableTrapsMemoryBufferpeak")
    def enable_traps_memory_bufferpeak(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP Memory Bufferpeak traps
        """
        return pulumi.get(self, "enable_traps_memory_bufferpeak")

    @enable_traps_memory_bufferpeak.setter
    def enable_traps_memory_bufferpeak(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_memory_bufferpeak", value)

    @property
    @pulumi.getter(name="enableTrapsMplsLdp")
    def enable_traps_mpls_ldp(self) -> Optional[pulumi.Input[bool]]:
        """
        SNMP MPLS label distribution protocol traps
        """
        return pulumi.get(self, "enable_traps_mpls_ldp")

    @enable_traps_mpls_ldp.setter
    def enable_traps_mpls_ldp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_mpls_ldp", value)

    @property
    @pulumi.getter(name="enableTrapsMplsRfcLdp")
    def enable_traps_mpls_rfc_ldp(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_mpls_rfc_ldp")

    @enable_traps_mpls_rfc_ldp.setter
    def enable_traps_mpls_rfc_ldp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_mpls_rfc_ldp", value)

    @property
    @pulumi.getter(name="enableTrapsMplsTrafficEng")
    def enable_traps_mpls_traffic_eng(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_mpls_traffic_eng")

    @enable_traps_mpls_traffic_eng.setter
    def enable_traps_mpls_traffic_eng(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_mpls_traffic_eng", value)

    @property
    @pulumi.getter(name="enableTrapsMplsVpn")
    def enable_traps_mpls_vpn(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_mpls_vpn")

    @enable_traps_mpls_vpn.setter
    def enable_traps_mpls_vpn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_mpls_vpn", value)

    @property
    @pulumi.getter(name="enableTrapsMsdp")
    def enable_traps_msdp(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP MSDP traps
        """
        return pulumi.get(self, "enable_traps_msdp")

    @enable_traps_msdp.setter
    def enable_traps_msdp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_msdp", value)

    @property
    @pulumi.getter(name="enableTrapsNhrpNhc")
    def enable_traps_nhrp_nhc(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_nhrp_nhc")

    @enable_traps_nhrp_nhc.setter
    def enable_traps_nhrp_nhc(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_nhrp_nhc", value)

    @property
    @pulumi.getter(name="enableTrapsNhrpNhp")
    def enable_traps_nhrp_nhp(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_nhrp_nhp")

    @enable_traps_nhrp_nhp.setter
    def enable_traps_nhrp_nhp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_nhrp_nhp", value)

    @property
    @pulumi.getter(name="enableTrapsNhrpNhs")
    def enable_traps_nhrp_nhs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_nhrp_nhs")

    @enable_traps_nhrp_nhs.setter
    def enable_traps_nhrp_nhs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_nhrp_nhs", value)

    @property
    @pulumi.getter(name="enableTrapsNhrpQuotaExceeded")
    def enable_traps_nhrp_quota_exceeded(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_nhrp_quota_exceeded")

    @enable_traps_nhrp_quota_exceeded.setter
    def enable_traps_nhrp_quota_exceeded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_nhrp_quota_exceeded", value)

    @property
    @pulumi.getter(name="enableTrapsOspfConfigErrors")
    def enable_traps_ospf_config_errors(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable all traps of errors
        """
        return pulumi.get(self, "enable_traps_ospf_config_errors")

    @enable_traps_ospf_config_errors.setter
    def enable_traps_ospf_config_errors(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ospf_config_errors", value)

    @property
    @pulumi.getter(name="enableTrapsOspfConfigLsa")
    def enable_traps_ospf_config_lsa(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable all traps of lsa
        """
        return pulumi.get(self, "enable_traps_ospf_config_lsa")

    @enable_traps_ospf_config_lsa.setter
    def enable_traps_ospf_config_lsa(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ospf_config_lsa", value)

    @property
    @pulumi.getter(name="enableTrapsOspfConfigRetransmit")
    def enable_traps_ospf_config_retransmit(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable all traps of retransmit
        """
        return pulumi.get(self, "enable_traps_ospf_config_retransmit")

    @enable_traps_ospf_config_retransmit.setter
    def enable_traps_ospf_config_retransmit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ospf_config_retransmit", value)

    @property
    @pulumi.getter(name="enableTrapsOspfConfigStateChange")
    def enable_traps_ospf_config_state_change(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable all traps of state-change
        """
        return pulumi.get(self, "enable_traps_ospf_config_state_change")

    @enable_traps_ospf_config_state_change.setter
    def enable_traps_ospf_config_state_change(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ospf_config_state_change", value)

    @property
    @pulumi.getter(name="enableTrapsOspfErrorsEnable")
    def enable_traps_ospf_errors_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable all traps of errors
        """
        return pulumi.get(self, "enable_traps_ospf_errors_enable")

    @enable_traps_ospf_errors_enable.setter
    def enable_traps_ospf_errors_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ospf_errors_enable", value)

    @property
    @pulumi.getter(name="enableTrapsOspfLsaEnable")
    def enable_traps_ospf_lsa_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable all traps of lsa
        """
        return pulumi.get(self, "enable_traps_ospf_lsa_enable")

    @enable_traps_ospf_lsa_enable.setter
    def enable_traps_ospf_lsa_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ospf_lsa_enable", value)

    @property
    @pulumi.getter(name="enableTrapsOspfNssaTransChange")
    def enable_traps_ospf_nssa_trans_change(self) -> Optional[pulumi.Input[bool]]:
        """
        Nssa translator state changes
        """
        return pulumi.get(self, "enable_traps_ospf_nssa_trans_change")

    @enable_traps_ospf_nssa_trans_change.setter
    def enable_traps_ospf_nssa_trans_change(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ospf_nssa_trans_change", value)

    @property
    @pulumi.getter(name="enableTrapsOspfRetransmitEnable")
    def enable_traps_ospf_retransmit_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable all traps of retransmit
        """
        return pulumi.get(self, "enable_traps_ospf_retransmit_enable")

    @enable_traps_ospf_retransmit_enable.setter
    def enable_traps_ospf_retransmit_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ospf_retransmit_enable", value)

    @property
    @pulumi.getter(name="enableTrapsOspfShamlinkInterface")
    def enable_traps_ospf_shamlink_interface(self) -> Optional[pulumi.Input[bool]]:
        """
        Sham link interface state changes
        """
        return pulumi.get(self, "enable_traps_ospf_shamlink_interface")

    @enable_traps_ospf_shamlink_interface.setter
    def enable_traps_ospf_shamlink_interface(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ospf_shamlink_interface", value)

    @property
    @pulumi.getter(name="enableTrapsOspfShamlinkNeighbor")
    def enable_traps_ospf_shamlink_neighbor(self) -> Optional[pulumi.Input[bool]]:
        """
        Sham link neighbor state changes
        """
        return pulumi.get(self, "enable_traps_ospf_shamlink_neighbor")

    @enable_traps_ospf_shamlink_neighbor.setter
    def enable_traps_ospf_shamlink_neighbor(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ospf_shamlink_neighbor", value)

    @property
    @pulumi.getter(name="enableTrapsOspfv3ConfigErrors")
    def enable_traps_ospfv3_config_errors(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable all traps of errors
        """
        return pulumi.get(self, "enable_traps_ospfv3_config_errors")

    @enable_traps_ospfv3_config_errors.setter
    def enable_traps_ospfv3_config_errors(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ospfv3_config_errors", value)

    @property
    @pulumi.getter(name="enableTrapsOspfv3ConfigStateChange")
    def enable_traps_ospfv3_config_state_change(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable all traps of state-change
        """
        return pulumi.get(self, "enable_traps_ospfv3_config_state_change")

    @enable_traps_ospfv3_config_state_change.setter
    def enable_traps_ospfv3_config_state_change(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_ospfv3_config_state_change", value)

    @property
    @pulumi.getter(name="enableTrapsPimInvalidPimMessage")
    def enable_traps_pim_invalid_pim_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable invalid pim message trap
        """
        return pulumi.get(self, "enable_traps_pim_invalid_pim_message")

    @enable_traps_pim_invalid_pim_message.setter
    def enable_traps_pim_invalid_pim_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_pim_invalid_pim_message", value)

    @property
    @pulumi.getter(name="enableTrapsPimNeighborChange")
    def enable_traps_pim_neighbor_change(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable neighbor change trap
        """
        return pulumi.get(self, "enable_traps_pim_neighbor_change")

    @enable_traps_pim_neighbor_change.setter
    def enable_traps_pim_neighbor_change(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_pim_neighbor_change", value)

    @property
    @pulumi.getter(name="enableTrapsPimRpMappingChange")
    def enable_traps_pim_rp_mapping_change(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable rp mapping change trap
        """
        return pulumi.get(self, "enable_traps_pim_rp_mapping_change")

    @enable_traps_pim_rp_mapping_change.setter
    def enable_traps_pim_rp_mapping_change(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_pim_rp_mapping_change", value)

    @property
    @pulumi.getter(name="enableTrapsPortSecurity")
    def enable_traps_port_security(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP port security traps
        """
        return pulumi.get(self, "enable_traps_port_security")

    @enable_traps_port_security.setter
    def enable_traps_port_security(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_port_security", value)

    @property
    @pulumi.getter(name="enableTrapsPowerEthernetGroup")
    def enable_traps_power_ethernet_group(self) -> Optional[pulumi.Input[str]]:
        """
        Enable SNMP inline power group based traps
        """
        return pulumi.get(self, "enable_traps_power_ethernet_group")

    @enable_traps_power_ethernet_group.setter
    def enable_traps_power_ethernet_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "enable_traps_power_ethernet_group", value)

    @property
    @pulumi.getter(name="enableTrapsPowerEthernetPolice")
    def enable_traps_power_ethernet_police(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Policing Trap
        """
        return pulumi.get(self, "enable_traps_power_ethernet_police")

    @enable_traps_power_ethernet_police.setter
    def enable_traps_power_ethernet_police(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_power_ethernet_police", value)

    @property
    @pulumi.getter(name="enableTrapsPwVc")
    def enable_traps_pw_vc(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_pw_vc")

    @enable_traps_pw_vc.setter
    def enable_traps_pw_vc(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_pw_vc", value)

    @property
    @pulumi.getter(name="enableTrapsRep")
    def enable_traps_rep(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_rep")

    @enable_traps_rep.setter
    def enable_traps_rep(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_rep", value)

    @property
    @pulumi.getter(name="enableTrapsRf")
    def enable_traps_rf(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable all SNMP traps defined in CISCO-RF-MIB
        """
        return pulumi.get(self, "enable_traps_rf")

    @enable_traps_rf.setter
    def enable_traps_rf(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_rf", value)

    @property
    @pulumi.getter(name="enableTrapsSmartLicense")
    def enable_traps_smart_license(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable smart license traps
        """
        return pulumi.get(self, "enable_traps_smart_license")

    @enable_traps_smart_license.setter
    def enable_traps_smart_license(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_smart_license", value)

    @property
    @pulumi.getter(name="enableTrapsSnmpAuthentication")
    def enable_traps_snmp_authentication(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable authentication trap
        """
        return pulumi.get(self, "enable_traps_snmp_authentication")

    @enable_traps_snmp_authentication.setter
    def enable_traps_snmp_authentication(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_snmp_authentication", value)

    @property
    @pulumi.getter(name="enableTrapsSnmpColdstart")
    def enable_traps_snmp_coldstart(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable coldStart trap
        """
        return pulumi.get(self, "enable_traps_snmp_coldstart")

    @enable_traps_snmp_coldstart.setter
    def enable_traps_snmp_coldstart(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_snmp_coldstart", value)

    @property
    @pulumi.getter(name="enableTrapsSnmpLinkdown")
    def enable_traps_snmp_linkdown(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable linkDown trap
        """
        return pulumi.get(self, "enable_traps_snmp_linkdown")

    @enable_traps_snmp_linkdown.setter
    def enable_traps_snmp_linkdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_snmp_linkdown", value)

    @property
    @pulumi.getter(name="enableTrapsSnmpLinkup")
    def enable_traps_snmp_linkup(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable linkUp trap
        """
        return pulumi.get(self, "enable_traps_snmp_linkup")

    @enable_traps_snmp_linkup.setter
    def enable_traps_snmp_linkup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_snmp_linkup", value)

    @property
    @pulumi.getter(name="enableTrapsSnmpWarmstart")
    def enable_traps_snmp_warmstart(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable warmStart trap
        """
        return pulumi.get(self, "enable_traps_snmp_warmstart")

    @enable_traps_snmp_warmstart.setter
    def enable_traps_snmp_warmstart(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_snmp_warmstart", value)

    @property
    @pulumi.getter(name="enableTrapsStackwise")
    def enable_traps_stackwise(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP stackwise traps
        """
        return pulumi.get(self, "enable_traps_stackwise")

    @enable_traps_stackwise.setter
    def enable_traps_stackwise(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_stackwise", value)

    @property
    @pulumi.getter(name="enableTrapsStpxInconsistency")
    def enable_traps_stpx_inconsistency(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_stpx_inconsistency")

    @enable_traps_stpx_inconsistency.setter
    def enable_traps_stpx_inconsistency(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_stpx_inconsistency", value)

    @property
    @pulumi.getter(name="enableTrapsStpxLoopInconsistency")
    def enable_traps_stpx_loop_inconsistency(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_stpx_loop_inconsistency")

    @enable_traps_stpx_loop_inconsistency.setter
    def enable_traps_stpx_loop_inconsistency(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_stpx_loop_inconsistency", value)

    @property
    @pulumi.getter(name="enableTrapsStpxRootInconsistency")
    def enable_traps_stpx_root_inconsistency(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_stpx_root_inconsistency")

    @enable_traps_stpx_root_inconsistency.setter
    def enable_traps_stpx_root_inconsistency(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_stpx_root_inconsistency", value)

    @property
    @pulumi.getter(name="enableTrapsSyslog")
    def enable_traps_syslog(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP syslog traps
        """
        return pulumi.get(self, "enable_traps_syslog")

    @enable_traps_syslog.setter
    def enable_traps_syslog(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_syslog", value)

    @property
    @pulumi.getter(name="enableTrapsTransceiverAll")
    def enable_traps_transceiver_all(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_transceiver_all")

    @enable_traps_transceiver_all.setter
    def enable_traps_transceiver_all(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_transceiver_all", value)

    @property
    @pulumi.getter(name="enableTrapsTty")
    def enable_traps_tty(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable TCP connection traps
        """
        return pulumi.get(self, "enable_traps_tty")

    @enable_traps_tty.setter
    def enable_traps_tty(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_tty", value)

    @property
    @pulumi.getter(name="enableTrapsUdldLinkFailRpt")
    def enable_traps_udld_link_fail_rpt(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP cudldpFastHelloLinkFailRptNotification traps
        """
        return pulumi.get(self, "enable_traps_udld_link_fail_rpt")

    @enable_traps_udld_link_fail_rpt.setter
    def enable_traps_udld_link_fail_rpt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_udld_link_fail_rpt", value)

    @property
    @pulumi.getter(name="enableTrapsUdldStatusChange")
    def enable_traps_udld_status_change(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable SNMP cudldpFastHelloStatusChangeNotification traps
        """
        return pulumi.get(self, "enable_traps_udld_status_change")

    @enable_traps_udld_status_change.setter
    def enable_traps_udld_status_change(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_udld_status_change", value)

    @property
    @pulumi.getter(name="enableTrapsVlanMembership")
    def enable_traps_vlan_membership(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_vlan_membership")

    @enable_traps_vlan_membership.setter
    def enable_traps_vlan_membership(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_vlan_membership", value)

    @property
    @pulumi.getter(name="enableTrapsVlancreate")
    def enable_traps_vlancreate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_vlancreate")

    @enable_traps_vlancreate.setter
    def enable_traps_vlancreate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_vlancreate", value)

    @property
    @pulumi.getter(name="enableTrapsVlandelete")
    def enable_traps_vlandelete(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_vlandelete")

    @enable_traps_vlandelete.setter
    def enable_traps_vlandelete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_vlandelete", value)

    @property
    @pulumi.getter(name="enableTrapsVrfmibVnetTrunkDown")
    def enable_traps_vrfmib_vnet_trunk_down(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_vrfmib_vnet_trunk_down")

    @enable_traps_vrfmib_vnet_trunk_down.setter
    def enable_traps_vrfmib_vnet_trunk_down(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_vrfmib_vnet_trunk_down", value)

    @property
    @pulumi.getter(name="enableTrapsVrfmibVnetTrunkUp")
    def enable_traps_vrfmib_vnet_trunk_up(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_vrfmib_vnet_trunk_up")

    @enable_traps_vrfmib_vnet_trunk_up.setter
    def enable_traps_vrfmib_vnet_trunk_up(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_vrfmib_vnet_trunk_up", value)

    @property
    @pulumi.getter(name="enableTrapsVrfmibVrfDown")
    def enable_traps_vrfmib_vrf_down(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_vrfmib_vrf_down")

    @enable_traps_vrfmib_vrf_down.setter
    def enable_traps_vrfmib_vrf_down(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_vrfmib_vrf_down", value)

    @property
    @pulumi.getter(name="enableTrapsVrfmibVrfUp")
    def enable_traps_vrfmib_vrf_up(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_vrfmib_vrf_up")

    @enable_traps_vrfmib_vrf_up.setter
    def enable_traps_vrfmib_vrf_up(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_vrfmib_vrf_up", value)

    @property
    @pulumi.getter(name="enableTrapsVtp")
    def enable_traps_vtp(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_traps_vtp")

    @enable_traps_vtp.setter
    def enable_traps_vtp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_traps_vtp", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerHostArgs']]]]:
        """
        Specify hosts keyed by (ip-address, community-or-user)
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerHostArgs']]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter(name="ifindexPersist")
    def ifindex_persist(self) -> Optional[pulumi.Input[bool]]:
        """
        Persist interface indices
        """
        return pulumi.get(self, "ifindex_persist")

    @ifindex_persist.setter
    def ifindex_persist(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ifindex_persist", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        """
        Text for mib object sysLocation
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def packetsize(self) -> Optional[pulumi.Input[int]]:
        """
        Largest SNMP packet size - Range: `484`-`17892`
        """
        return pulumi.get(self, "packetsize")

    @packetsize.setter
    def packetsize(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "packetsize", value)

    @property
    @pulumi.getter(name="queueLength")
    def queue_length(self) -> Optional[pulumi.Input[int]]:
        """
        Message queue length for each TRAP host - Range: `1`-`5000`
        """
        return pulumi.get(self, "queue_length")

    @queue_length.setter
    def queue_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "queue_length", value)

    @property
    @pulumi.getter(name="snmpCommunities")
    def snmp_communities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerSnmpCommunityArgs']]]]:
        """
        Enable SNMP; set community string and access privs
        """
        return pulumi.get(self, "snmp_communities")

    @snmp_communities.setter
    def snmp_communities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerSnmpCommunityArgs']]]]):
        pulumi.set(self, "snmp_communities", value)

    @property
    @pulumi.getter(name="sourceInterfaceInformsFortyGigabitEthernet")
    def source_interface_informs_forty_gigabit_ethernet(self) -> Optional[pulumi.Input[str]]:
        """
        Forty GigabitEthernet
        """
        return pulumi.get(self, "source_interface_informs_forty_gigabit_ethernet")

    @source_interface_informs_forty_gigabit_ethernet.setter
    def source_interface_informs_forty_gigabit_ethernet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_interface_informs_forty_gigabit_ethernet", value)

    @property
    @pulumi.getter(name="sourceInterfaceInformsGigabitEthernet")
    def source_interface_informs_gigabit_ethernet(self) -> Optional[pulumi.Input[str]]:
        """
        GigabitEthernet IEEE 802.3z
        """
        return pulumi.get(self, "source_interface_informs_gigabit_ethernet")

    @source_interface_informs_gigabit_ethernet.setter
    def source_interface_informs_gigabit_ethernet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_interface_informs_gigabit_ethernet", value)

    @property
    @pulumi.getter(name="sourceInterfaceInformsHundredGigE")
    def source_interface_informs_hundred_gig_e(self) -> Optional[pulumi.Input[str]]:
        """
        Hundred GigabitEthernet
        """
        return pulumi.get(self, "source_interface_informs_hundred_gig_e")

    @source_interface_informs_hundred_gig_e.setter
    def source_interface_informs_hundred_gig_e(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_interface_informs_hundred_gig_e", value)

    @property
    @pulumi.getter(name="sourceInterfaceInformsLoopback")
    def source_interface_informs_loopback(self) -> Optional[pulumi.Input[int]]:
        """
        Loopback interface - Range: `0`-`2147483647`
        """
        return pulumi.get(self, "source_interface_informs_loopback")

    @source_interface_informs_loopback.setter
    def source_interface_informs_loopback(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_interface_informs_loopback", value)

    @property
    @pulumi.getter(name="sourceInterfaceInformsPortChannel")
    def source_interface_informs_port_channel(self) -> Optional[pulumi.Input[int]]:
        """
        Ethernet Channel of interfaces - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "source_interface_informs_port_channel")

    @source_interface_informs_port_channel.setter
    def source_interface_informs_port_channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_interface_informs_port_channel", value)

    @property
    @pulumi.getter(name="sourceInterfaceInformsPortChannelSubinterface")
    def source_interface_informs_port_channel_subinterface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_interface_informs_port_channel_subinterface")

    @source_interface_informs_port_channel_subinterface.setter
    def source_interface_informs_port_channel_subinterface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_interface_informs_port_channel_subinterface", value)

    @property
    @pulumi.getter(name="sourceInterfaceInformsTenGigabitEthernet")
    def source_interface_informs_ten_gigabit_ethernet(self) -> Optional[pulumi.Input[str]]:
        """
        Ten Gigabit Ethernet
        """
        return pulumi.get(self, "source_interface_informs_ten_gigabit_ethernet")

    @source_interface_informs_ten_gigabit_ethernet.setter
    def source_interface_informs_ten_gigabit_ethernet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_interface_informs_ten_gigabit_ethernet", value)

    @property
    @pulumi.getter(name="sourceInterfaceInformsVlan")
    def source_interface_informs_vlan(self) -> Optional[pulumi.Input[int]]:
        """
        Iosxr Vlans - Range: `0`-`65535`
        """
        return pulumi.get(self, "source_interface_informs_vlan")

    @source_interface_informs_vlan.setter
    def source_interface_informs_vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_interface_informs_vlan", value)

    @property
    @pulumi.getter(name="sourceInterfaceTrapsFortyGigabitEthernet")
    def source_interface_traps_forty_gigabit_ethernet(self) -> Optional[pulumi.Input[str]]:
        """
        Forty GigabitEthernet
        """
        return pulumi.get(self, "source_interface_traps_forty_gigabit_ethernet")

    @source_interface_traps_forty_gigabit_ethernet.setter
    def source_interface_traps_forty_gigabit_ethernet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_interface_traps_forty_gigabit_ethernet", value)

    @property
    @pulumi.getter(name="sourceInterfaceTrapsGigabitEthernet")
    def source_interface_traps_gigabit_ethernet(self) -> Optional[pulumi.Input[str]]:
        """
        GigabitEthernet IEEE 802.3z
        """
        return pulumi.get(self, "source_interface_traps_gigabit_ethernet")

    @source_interface_traps_gigabit_ethernet.setter
    def source_interface_traps_gigabit_ethernet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_interface_traps_gigabit_ethernet", value)

    @property
    @pulumi.getter(name="sourceInterfaceTrapsHundredGigE")
    def source_interface_traps_hundred_gig_e(self) -> Optional[pulumi.Input[str]]:
        """
        Hundred GigabitEthernet
        """
        return pulumi.get(self, "source_interface_traps_hundred_gig_e")

    @source_interface_traps_hundred_gig_e.setter
    def source_interface_traps_hundred_gig_e(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_interface_traps_hundred_gig_e", value)

    @property
    @pulumi.getter(name="sourceInterfaceTrapsLoopback")
    def source_interface_traps_loopback(self) -> Optional[pulumi.Input[int]]:
        """
        Loopback interface - Range: `0`-`2147483647`
        """
        return pulumi.get(self, "source_interface_traps_loopback")

    @source_interface_traps_loopback.setter
    def source_interface_traps_loopback(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_interface_traps_loopback", value)

    @property
    @pulumi.getter(name="sourceInterfaceTrapsPortChannel")
    def source_interface_traps_port_channel(self) -> Optional[pulumi.Input[int]]:
        """
        Ethernet Channel of interfaces - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "source_interface_traps_port_channel")

    @source_interface_traps_port_channel.setter
    def source_interface_traps_port_channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_interface_traps_port_channel", value)

    @property
    @pulumi.getter(name="sourceInterfaceTrapsPortChannelSubinterface")
    def source_interface_traps_port_channel_subinterface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_interface_traps_port_channel_subinterface")

    @source_interface_traps_port_channel_subinterface.setter
    def source_interface_traps_port_channel_subinterface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_interface_traps_port_channel_subinterface", value)

    @property
    @pulumi.getter(name="sourceInterfaceTrapsTenGigabitEthernet")
    def source_interface_traps_ten_gigabit_ethernet(self) -> Optional[pulumi.Input[str]]:
        """
        Ten Gigabit Ethernet
        """
        return pulumi.get(self, "source_interface_traps_ten_gigabit_ethernet")

    @source_interface_traps_ten_gigabit_ethernet.setter
    def source_interface_traps_ten_gigabit_ethernet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_interface_traps_ten_gigabit_ethernet", value)

    @property
    @pulumi.getter(name="sourceInterfaceTrapsVlan")
    def source_interface_traps_vlan(self) -> Optional[pulumi.Input[int]]:
        """
        Iosxr Vlans - Range: `0`-`65535`
        """
        return pulumi.get(self, "source_interface_traps_vlan")

    @source_interface_traps_vlan.setter
    def source_interface_traps_vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_interface_traps_vlan", value)

    @property
    @pulumi.getter(name="systemShutdown")
    def system_shutdown(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable use of the SNMP reload command
        """
        return pulumi.get(self, "system_shutdown")

    @system_shutdown.setter
    def system_shutdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "system_shutdown", value)

    @property
    @pulumi.getter(name="trapSourceFortyGigabitEthernet")
    def trap_source_forty_gigabit_ethernet(self) -> Optional[pulumi.Input[str]]:
        """
        Forty GigabitEthernet
        """
        return pulumi.get(self, "trap_source_forty_gigabit_ethernet")

    @trap_source_forty_gigabit_ethernet.setter
    def trap_source_forty_gigabit_ethernet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_source_forty_gigabit_ethernet", value)

    @property
    @pulumi.getter(name="trapSourceGigabitEthernet")
    def trap_source_gigabit_ethernet(self) -> Optional[pulumi.Input[str]]:
        """
        GigabitEthernet IEEE 802.3z
        """
        return pulumi.get(self, "trap_source_gigabit_ethernet")

    @trap_source_gigabit_ethernet.setter
    def trap_source_gigabit_ethernet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_source_gigabit_ethernet", value)

    @property
    @pulumi.getter(name="trapSourceHundredGigE")
    def trap_source_hundred_gig_e(self) -> Optional[pulumi.Input[str]]:
        """
        Hundred GigabitEthernet
        """
        return pulumi.get(self, "trap_source_hundred_gig_e")

    @trap_source_hundred_gig_e.setter
    def trap_source_hundred_gig_e(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_source_hundred_gig_e", value)

    @property
    @pulumi.getter(name="trapSourceLoopback")
    def trap_source_loopback(self) -> Optional[pulumi.Input[int]]:
        """
        Loopback interface - Range: `0`-`2147483647`
        """
        return pulumi.get(self, "trap_source_loopback")

    @trap_source_loopback.setter
    def trap_source_loopback(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_source_loopback", value)

    @property
    @pulumi.getter(name="trapSourcePortChannel")
    def trap_source_port_channel(self) -> Optional[pulumi.Input[int]]:
        """
        Ethernet Channel of interfaces - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "trap_source_port_channel")

    @trap_source_port_channel.setter
    def trap_source_port_channel(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_source_port_channel", value)

    @property
    @pulumi.getter(name="trapSourcePortChannelSubinterface")
    def trap_source_port_channel_subinterface(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trap_source_port_channel_subinterface")

    @trap_source_port_channel_subinterface.setter
    def trap_source_port_channel_subinterface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_source_port_channel_subinterface", value)

    @property
    @pulumi.getter(name="trapSourceTenGigabitEthernet")
    def trap_source_ten_gigabit_ethernet(self) -> Optional[pulumi.Input[str]]:
        """
        Ten Gigabit Ethernet
        """
        return pulumi.get(self, "trap_source_ten_gigabit_ethernet")

    @trap_source_ten_gigabit_ethernet.setter
    def trap_source_ten_gigabit_ethernet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trap_source_ten_gigabit_ethernet", value)

    @property
    @pulumi.getter(name="trapSourceVlan")
    def trap_source_vlan(self) -> Optional[pulumi.Input[int]]:
        """
        Iosxr Vlans - Range: `0`-`65535`
        """
        return pulumi.get(self, "trap_source_vlan")

    @trap_source_vlan.setter
    def trap_source_vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trap_source_vlan", value)

    @property
    @pulumi.getter
    def views(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerViewArgs']]]]:
        """
        Define an SNMPv2 MIB view
        """
        return pulumi.get(self, "views")

    @views.setter
    def views(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerViewArgs']]]]):
        pulumi.set(self, "views", value)


class SnmpServer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 chassis_id: Optional[pulumi.Input[str]] = None,
                 contact: Optional[pulumi.Input[str]] = None,
                 contexts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpServerContextArgs']]]]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 enable_informs: Optional[pulumi.Input[bool]] = None,
                 enable_logging_getop: Optional[pulumi.Input[bool]] = None,
                 enable_logging_setop: Optional[pulumi.Input[bool]] = None,
                 enable_traps: Optional[pulumi.Input[bool]] = None,
                 enable_traps_auth_framework_sec_violation: Optional[pulumi.Input[bool]] = None,
                 enable_traps_bfd: Optional[pulumi.Input[bool]] = None,
                 enable_traps_bgp_cbgp2: Optional[pulumi.Input[bool]] = None,
                 enable_traps_bridge_newroot: Optional[pulumi.Input[bool]] = None,
                 enable_traps_bridge_topologychange: Optional[pulumi.Input[bool]] = None,
                 enable_traps_bulkstat_collection: Optional[pulumi.Input[bool]] = None,
                 enable_traps_bulkstat_transfer: Optional[pulumi.Input[bool]] = None,
                 enable_traps_call_home_message_send_fail: Optional[pulumi.Input[bool]] = None,
                 enable_traps_call_home_server_fail: Optional[pulumi.Input[bool]] = None,
                 enable_traps_cef_inconsistency: Optional[pulumi.Input[bool]] = None,
                 enable_traps_cef_peer_fib_state_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_cef_peer_state_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_cef_resource_failure: Optional[pulumi.Input[bool]] = None,
                 enable_traps_config: Optional[pulumi.Input[bool]] = None,
                 enable_traps_config_copy: Optional[pulumi.Input[bool]] = None,
                 enable_traps_config_ctid: Optional[pulumi.Input[bool]] = None,
                 enable_traps_cpu_threshold: Optional[pulumi.Input[bool]] = None,
                 enable_traps_dhcp: Optional[pulumi.Input[bool]] = None,
                 enable_traps_eigrp: Optional[pulumi.Input[bool]] = None,
                 enable_traps_energywise: Optional[pulumi.Input[bool]] = None,
                 enable_traps_entity: Optional[pulumi.Input[bool]] = None,
                 enable_traps_entity_diag_boot_up_fail: Optional[pulumi.Input[bool]] = None,
                 enable_traps_entity_diag_hm_test_recover: Optional[pulumi.Input[bool]] = None,
                 enable_traps_entity_diag_hm_thresh_reached: Optional[pulumi.Input[bool]] = None,
                 enable_traps_entity_diag_scheduled_test_fail: Optional[pulumi.Input[bool]] = None,
                 enable_traps_entity_perf_throughput_notif: Optional[pulumi.Input[bool]] = None,
                 enable_traps_envmon: Optional[pulumi.Input[bool]] = None,
                 enable_traps_errdisable: Optional[pulumi.Input[bool]] = None,
                 enable_traps_event_manager: Optional[pulumi.Input[bool]] = None,
                 enable_traps_fast_reroute_protected: Optional[pulumi.Input[bool]] = None,
                 enable_traps_flash_insertion: Optional[pulumi.Input[bool]] = None,
                 enable_traps_flash_lowspace: Optional[pulumi.Input[bool]] = None,
                 enable_traps_flash_removal: Optional[pulumi.Input[bool]] = None,
                 enable_traps_flowmon: Optional[pulumi.Input[bool]] = None,
                 enable_traps_fru_ctrl: Optional[pulumi.Input[bool]] = None,
                 enable_traps_hsrp: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ike_policy_add: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ike_policy_delete: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ike_tunnel_start: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ike_tunnel_stop: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipmulticast: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsec_cryptomap_add: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsec_cryptomap_attach: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsec_cryptomap_delete: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsec_cryptomap_detach: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsec_too_many_sas: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsec_tunnel_start: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsec_tunnel_stop: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsla: Optional[pulumi.Input[bool]] = None,
                 enable_traps_isis: Optional[pulumi.Input[bool]] = None,
                 enable_traps_license: Optional[pulumi.Input[bool]] = None,
                 enable_traps_local_auth: Optional[pulumi.Input[bool]] = None,
                 enable_traps_mac_notification_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_mac_notification_move: Optional[pulumi.Input[bool]] = None,
                 enable_traps_mac_notification_threshold: Optional[pulumi.Input[bool]] = None,
                 enable_traps_memory_bufferpeak: Optional[pulumi.Input[bool]] = None,
                 enable_traps_mpls_ldp: Optional[pulumi.Input[bool]] = None,
                 enable_traps_mpls_rfc_ldp: Optional[pulumi.Input[bool]] = None,
                 enable_traps_mpls_traffic_eng: Optional[pulumi.Input[bool]] = None,
                 enable_traps_mpls_vpn: Optional[pulumi.Input[bool]] = None,
                 enable_traps_msdp: Optional[pulumi.Input[bool]] = None,
                 enable_traps_nhrp_nhc: Optional[pulumi.Input[bool]] = None,
                 enable_traps_nhrp_nhp: Optional[pulumi.Input[bool]] = None,
                 enable_traps_nhrp_nhs: Optional[pulumi.Input[bool]] = None,
                 enable_traps_nhrp_quota_exceeded: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_config_errors: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_config_lsa: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_config_retransmit: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_config_state_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_errors_enable: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_lsa_enable: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_nssa_trans_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_retransmit_enable: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_shamlink_interface: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_shamlink_neighbor: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospfv3_config_errors: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospfv3_config_state_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_pim_invalid_pim_message: Optional[pulumi.Input[bool]] = None,
                 enable_traps_pim_neighbor_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_pim_rp_mapping_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_port_security: Optional[pulumi.Input[bool]] = None,
                 enable_traps_power_ethernet_group: Optional[pulumi.Input[str]] = None,
                 enable_traps_power_ethernet_police: Optional[pulumi.Input[bool]] = None,
                 enable_traps_pw_vc: Optional[pulumi.Input[bool]] = None,
                 enable_traps_rep: Optional[pulumi.Input[bool]] = None,
                 enable_traps_rf: Optional[pulumi.Input[bool]] = None,
                 enable_traps_smart_license: Optional[pulumi.Input[bool]] = None,
                 enable_traps_snmp_authentication: Optional[pulumi.Input[bool]] = None,
                 enable_traps_snmp_coldstart: Optional[pulumi.Input[bool]] = None,
                 enable_traps_snmp_linkdown: Optional[pulumi.Input[bool]] = None,
                 enable_traps_snmp_linkup: Optional[pulumi.Input[bool]] = None,
                 enable_traps_snmp_warmstart: Optional[pulumi.Input[bool]] = None,
                 enable_traps_stackwise: Optional[pulumi.Input[bool]] = None,
                 enable_traps_stpx_inconsistency: Optional[pulumi.Input[bool]] = None,
                 enable_traps_stpx_loop_inconsistency: Optional[pulumi.Input[bool]] = None,
                 enable_traps_stpx_root_inconsistency: Optional[pulumi.Input[bool]] = None,
                 enable_traps_syslog: Optional[pulumi.Input[bool]] = None,
                 enable_traps_transceiver_all: Optional[pulumi.Input[bool]] = None,
                 enable_traps_tty: Optional[pulumi.Input[bool]] = None,
                 enable_traps_udld_link_fail_rpt: Optional[pulumi.Input[bool]] = None,
                 enable_traps_udld_status_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vlan_membership: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vlancreate: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vlandelete: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vrfmib_vnet_trunk_down: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vrfmib_vnet_trunk_up: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vrfmib_vrf_down: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vrfmib_vrf_up: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vtp: Optional[pulumi.Input[bool]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpServerHostArgs']]]]] = None,
                 ifindex_persist: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 packetsize: Optional[pulumi.Input[int]] = None,
                 queue_length: Optional[pulumi.Input[int]] = None,
                 snmp_communities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpServerSnmpCommunityArgs']]]]] = None,
                 source_interface_informs_forty_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 source_interface_informs_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 source_interface_informs_hundred_gig_e: Optional[pulumi.Input[str]] = None,
                 source_interface_informs_loopback: Optional[pulumi.Input[int]] = None,
                 source_interface_informs_port_channel: Optional[pulumi.Input[int]] = None,
                 source_interface_informs_port_channel_subinterface: Optional[pulumi.Input[str]] = None,
                 source_interface_informs_ten_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 source_interface_informs_vlan: Optional[pulumi.Input[int]] = None,
                 source_interface_traps_forty_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 source_interface_traps_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 source_interface_traps_hundred_gig_e: Optional[pulumi.Input[str]] = None,
                 source_interface_traps_loopback: Optional[pulumi.Input[int]] = None,
                 source_interface_traps_port_channel: Optional[pulumi.Input[int]] = None,
                 source_interface_traps_port_channel_subinterface: Optional[pulumi.Input[str]] = None,
                 source_interface_traps_ten_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 source_interface_traps_vlan: Optional[pulumi.Input[int]] = None,
                 system_shutdown: Optional[pulumi.Input[bool]] = None,
                 trap_source_forty_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 trap_source_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 trap_source_hundred_gig_e: Optional[pulumi.Input[str]] = None,
                 trap_source_loopback: Optional[pulumi.Input[int]] = None,
                 trap_source_port_channel: Optional[pulumi.Input[int]] = None,
                 trap_source_port_channel_subinterface: Optional[pulumi.Input[str]] = None,
                 trap_source_ten_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 trap_source_vlan: Optional[pulumi.Input[int]] = None,
                 views: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpServerViewArgs']]]]] = None,
                 __props__=None):
        """
        This resource can manage the SNMP Server configuration.

        ## Import

        ```sh
         $ pulumi import iosxe:index/snmpServer:SnmpServer example "Cisco-IOS-XE-native:native/snmp-server"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] chassis_id: String to uniquely identify this chassis
        :param pulumi.Input[str] contact: Text for mib object sysContact
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpServerContextArgs']]]] contexts: Create/Delete a context apart from default
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] enable_informs: Enable SNMP Informs
        :param pulumi.Input[bool] enable_logging_getop: Enable SNMP GET Operation logging
        :param pulumi.Input[bool] enable_logging_setop: Enable SNMP SET Operation logging
        :param pulumi.Input[bool] enable_traps: Enable SNMP Traps
        :param pulumi.Input[bool] enable_traps_bgp_cbgp2: Enable BGP MIBv2 traps
        :param pulumi.Input[bool] enable_traps_bulkstat_collection: Enable Data-Collection-MIB Collection notifications
        :param pulumi.Input[bool] enable_traps_bulkstat_transfer: Enable Data-Collection-MIB Transfer notifications
        :param pulumi.Input[bool] enable_traps_config: Enable SNMP config traps
        :param pulumi.Input[bool] enable_traps_config_copy: Enable SNMP config-copy traps
        :param pulumi.Input[bool] enable_traps_cpu_threshold: Allow CPU utilization threshold violation traps
        :param pulumi.Input[bool] enable_traps_dhcp: Enable SNMP dhcp traps
        :param pulumi.Input[bool] enable_traps_eigrp: Enable SNMP EIGRP traps
        :param pulumi.Input[bool] enable_traps_entity: Enable SNMP entity traps
        :param pulumi.Input[bool] enable_traps_entity_diag_boot_up_fail: Enable SNMP ceDiagBootUpFailedNotif traps
        :param pulumi.Input[bool] enable_traps_entity_diag_hm_test_recover: Enable SNMP ceDiagHMTestRecoverNotif traps
        :param pulumi.Input[bool] enable_traps_entity_diag_hm_thresh_reached: Enable SNMP ceDiagHMThresholdReachedNotif traps
        :param pulumi.Input[bool] enable_traps_entity_diag_scheduled_test_fail: Enable SNMP ceDiagScheduledTestFailedNotif traps
        :param pulumi.Input[bool] enable_traps_entity_perf_throughput_notif: Enable ENTITY PERFORMANCE MIB throughput traps
        :param pulumi.Input[bool] enable_traps_envmon: Enable SNMP environmental monitor traps
        :param pulumi.Input[bool] enable_traps_errdisable: Enable SNMP errdisable notifications
        :param pulumi.Input[bool] enable_traps_event_manager: Enable SNMP Embedded Event Manager traps
        :param pulumi.Input[bool] enable_traps_flash_insertion: Enable SNMP Flash Insertion notifications
        :param pulumi.Input[bool] enable_traps_flash_lowspace: Enable SNMP Flash Lowspace notifications
        :param pulumi.Input[bool] enable_traps_flash_removal: Enable SNMP Flash Removal notifications
        :param pulumi.Input[bool] enable_traps_flowmon: Enable SNMP flowmon notifications
        :param pulumi.Input[bool] enable_traps_fru_ctrl: Enable SNMP entity FRU control traps
        :param pulumi.Input[bool] enable_traps_hsrp: Enable SNMP HSRP traps
        :param pulumi.Input[bool] enable_traps_ike_policy_add: Enable IKE Policy add trap
        :param pulumi.Input[bool] enable_traps_ike_policy_delete: Enable IKE Policy delete trap
        :param pulumi.Input[bool] enable_traps_ike_tunnel_start: Enable IKE Tunnel start trap
        :param pulumi.Input[bool] enable_traps_ike_tunnel_stop: Enable IKE Tunnel stop trap
        :param pulumi.Input[bool] enable_traps_ipmulticast: Enable SNMP ipmulticast traps
        :param pulumi.Input[bool] enable_traps_ipsec_cryptomap_add: Enable IPsec Cryptomap add trap
        :param pulumi.Input[bool] enable_traps_ipsec_cryptomap_attach: Enable IPsec Cryptomap Attach trap
        :param pulumi.Input[bool] enable_traps_ipsec_cryptomap_delete: Enable IPsec Cryptomap delete trap
        :param pulumi.Input[bool] enable_traps_ipsec_cryptomap_detach: Enable IPsec Cryptomap Detach trap
        :param pulumi.Input[bool] enable_traps_ipsec_too_many_sas: Enable IPsec Tunnel Start trap
        :param pulumi.Input[bool] enable_traps_ipsec_tunnel_start: Enable IPsec Tunnel Start trap
        :param pulumi.Input[bool] enable_traps_ipsec_tunnel_stop: Enable IPsec Tunnel Stop trap
        :param pulumi.Input[bool] enable_traps_ipsla: Enable IPSLA traps traps
        :param pulumi.Input[bool] enable_traps_isis: Enable ISIS traps traps
        :param pulumi.Input[bool] enable_traps_license: Enable license traps
        :param pulumi.Input[bool] enable_traps_local_auth: Enable SNMP local auth traps
        :param pulumi.Input[bool] enable_traps_mac_notification_change: Enable SNMP Change traps
        :param pulumi.Input[bool] enable_traps_mac_notification_move: Enable SNMP Move traps
        :param pulumi.Input[bool] enable_traps_mac_notification_threshold: Enable SNMP Threshold traps
        :param pulumi.Input[bool] enable_traps_memory_bufferpeak: Enable SNMP Memory Bufferpeak traps
        :param pulumi.Input[bool] enable_traps_mpls_ldp: SNMP MPLS label distribution protocol traps
        :param pulumi.Input[bool] enable_traps_msdp: Enable SNMP MSDP traps
        :param pulumi.Input[bool] enable_traps_ospf_config_errors: Enable all traps of errors
        :param pulumi.Input[bool] enable_traps_ospf_config_lsa: Enable all traps of lsa
        :param pulumi.Input[bool] enable_traps_ospf_config_retransmit: Enable all traps of retransmit
        :param pulumi.Input[bool] enable_traps_ospf_config_state_change: Enable all traps of state-change
        :param pulumi.Input[bool] enable_traps_ospf_errors_enable: Enable all traps of errors
        :param pulumi.Input[bool] enable_traps_ospf_lsa_enable: Enable all traps of lsa
        :param pulumi.Input[bool] enable_traps_ospf_nssa_trans_change: Nssa translator state changes
        :param pulumi.Input[bool] enable_traps_ospf_retransmit_enable: Enable all traps of retransmit
        :param pulumi.Input[bool] enable_traps_ospf_shamlink_interface: Sham link interface state changes
        :param pulumi.Input[bool] enable_traps_ospf_shamlink_neighbor: Sham link neighbor state changes
        :param pulumi.Input[bool] enable_traps_ospfv3_config_errors: Enable all traps of errors
        :param pulumi.Input[bool] enable_traps_ospfv3_config_state_change: Enable all traps of state-change
        :param pulumi.Input[bool] enable_traps_pim_invalid_pim_message: Enable invalid pim message trap
        :param pulumi.Input[bool] enable_traps_pim_neighbor_change: Enable neighbor change trap
        :param pulumi.Input[bool] enable_traps_pim_rp_mapping_change: Enable rp mapping change trap
        :param pulumi.Input[bool] enable_traps_port_security: Enable SNMP port security traps
        :param pulumi.Input[str] enable_traps_power_ethernet_group: Enable SNMP inline power group based traps
        :param pulumi.Input[bool] enable_traps_power_ethernet_police: Enable Policing Trap
        :param pulumi.Input[bool] enable_traps_rf: Enable all SNMP traps defined in CISCO-RF-MIB
        :param pulumi.Input[bool] enable_traps_smart_license: Enable smart license traps
        :param pulumi.Input[bool] enable_traps_snmp_authentication: Enable authentication trap
        :param pulumi.Input[bool] enable_traps_snmp_coldstart: Enable coldStart trap
        :param pulumi.Input[bool] enable_traps_snmp_linkdown: Enable linkDown trap
        :param pulumi.Input[bool] enable_traps_snmp_linkup: Enable linkUp trap
        :param pulumi.Input[bool] enable_traps_snmp_warmstart: Enable warmStart trap
        :param pulumi.Input[bool] enable_traps_stackwise: Enable SNMP stackwise traps
        :param pulumi.Input[bool] enable_traps_syslog: Enable SNMP syslog traps
        :param pulumi.Input[bool] enable_traps_tty: Enable TCP connection traps
        :param pulumi.Input[bool] enable_traps_udld_link_fail_rpt: Enable SNMP cudldpFastHelloLinkFailRptNotification traps
        :param pulumi.Input[bool] enable_traps_udld_status_change: Enable SNMP cudldpFastHelloStatusChangeNotification traps
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpServerHostArgs']]]] hosts: Specify hosts keyed by (ip-address, community-or-user)
        :param pulumi.Input[bool] ifindex_persist: Persist interface indices
        :param pulumi.Input[str] location: Text for mib object sysLocation
        :param pulumi.Input[int] packetsize: Largest SNMP packet size - Range: `484`-`17892`
        :param pulumi.Input[int] queue_length: Message queue length for each TRAP host - Range: `1`-`5000`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpServerSnmpCommunityArgs']]]] snmp_communities: Enable SNMP; set community string and access privs
        :param pulumi.Input[str] source_interface_informs_forty_gigabit_ethernet: Forty GigabitEthernet
        :param pulumi.Input[str] source_interface_informs_gigabit_ethernet: GigabitEthernet IEEE 802.3z
        :param pulumi.Input[str] source_interface_informs_hundred_gig_e: Hundred GigabitEthernet
        :param pulumi.Input[int] source_interface_informs_loopback: Loopback interface - Range: `0`-`2147483647`
        :param pulumi.Input[int] source_interface_informs_port_channel: Ethernet Channel of interfaces - Range: `0`-`4294967295`
        :param pulumi.Input[str] source_interface_informs_ten_gigabit_ethernet: Ten Gigabit Ethernet
        :param pulumi.Input[int] source_interface_informs_vlan: Iosxr Vlans - Range: `0`-`65535`
        :param pulumi.Input[str] source_interface_traps_forty_gigabit_ethernet: Forty GigabitEthernet
        :param pulumi.Input[str] source_interface_traps_gigabit_ethernet: GigabitEthernet IEEE 802.3z
        :param pulumi.Input[str] source_interface_traps_hundred_gig_e: Hundred GigabitEthernet
        :param pulumi.Input[int] source_interface_traps_loopback: Loopback interface - Range: `0`-`2147483647`
        :param pulumi.Input[int] source_interface_traps_port_channel: Ethernet Channel of interfaces - Range: `0`-`4294967295`
        :param pulumi.Input[str] source_interface_traps_ten_gigabit_ethernet: Ten Gigabit Ethernet
        :param pulumi.Input[int] source_interface_traps_vlan: Iosxr Vlans - Range: `0`-`65535`
        :param pulumi.Input[bool] system_shutdown: Enable use of the SNMP reload command
        :param pulumi.Input[str] trap_source_forty_gigabit_ethernet: Forty GigabitEthernet
        :param pulumi.Input[str] trap_source_gigabit_ethernet: GigabitEthernet IEEE 802.3z
        :param pulumi.Input[str] trap_source_hundred_gig_e: Hundred GigabitEthernet
        :param pulumi.Input[int] trap_source_loopback: Loopback interface - Range: `0`-`2147483647`
        :param pulumi.Input[int] trap_source_port_channel: Ethernet Channel of interfaces - Range: `0`-`4294967295`
        :param pulumi.Input[str] trap_source_ten_gigabit_ethernet: Ten Gigabit Ethernet
        :param pulumi.Input[int] trap_source_vlan: Iosxr Vlans - Range: `0`-`65535`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpServerViewArgs']]]] views: Define an SNMPv2 MIB view
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SnmpServerArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the SNMP Server configuration.

        ## Import

        ```sh
         $ pulumi import iosxe:index/snmpServer:SnmpServer example "Cisco-IOS-XE-native:native/snmp-server"
        ```

        :param str resource_name: The name of the resource.
        :param SnmpServerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SnmpServerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 chassis_id: Optional[pulumi.Input[str]] = None,
                 contact: Optional[pulumi.Input[str]] = None,
                 contexts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpServerContextArgs']]]]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 enable_informs: Optional[pulumi.Input[bool]] = None,
                 enable_logging_getop: Optional[pulumi.Input[bool]] = None,
                 enable_logging_setop: Optional[pulumi.Input[bool]] = None,
                 enable_traps: Optional[pulumi.Input[bool]] = None,
                 enable_traps_auth_framework_sec_violation: Optional[pulumi.Input[bool]] = None,
                 enable_traps_bfd: Optional[pulumi.Input[bool]] = None,
                 enable_traps_bgp_cbgp2: Optional[pulumi.Input[bool]] = None,
                 enable_traps_bridge_newroot: Optional[pulumi.Input[bool]] = None,
                 enable_traps_bridge_topologychange: Optional[pulumi.Input[bool]] = None,
                 enable_traps_bulkstat_collection: Optional[pulumi.Input[bool]] = None,
                 enable_traps_bulkstat_transfer: Optional[pulumi.Input[bool]] = None,
                 enable_traps_call_home_message_send_fail: Optional[pulumi.Input[bool]] = None,
                 enable_traps_call_home_server_fail: Optional[pulumi.Input[bool]] = None,
                 enable_traps_cef_inconsistency: Optional[pulumi.Input[bool]] = None,
                 enable_traps_cef_peer_fib_state_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_cef_peer_state_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_cef_resource_failure: Optional[pulumi.Input[bool]] = None,
                 enable_traps_config: Optional[pulumi.Input[bool]] = None,
                 enable_traps_config_copy: Optional[pulumi.Input[bool]] = None,
                 enable_traps_config_ctid: Optional[pulumi.Input[bool]] = None,
                 enable_traps_cpu_threshold: Optional[pulumi.Input[bool]] = None,
                 enable_traps_dhcp: Optional[pulumi.Input[bool]] = None,
                 enable_traps_eigrp: Optional[pulumi.Input[bool]] = None,
                 enable_traps_energywise: Optional[pulumi.Input[bool]] = None,
                 enable_traps_entity: Optional[pulumi.Input[bool]] = None,
                 enable_traps_entity_diag_boot_up_fail: Optional[pulumi.Input[bool]] = None,
                 enable_traps_entity_diag_hm_test_recover: Optional[pulumi.Input[bool]] = None,
                 enable_traps_entity_diag_hm_thresh_reached: Optional[pulumi.Input[bool]] = None,
                 enable_traps_entity_diag_scheduled_test_fail: Optional[pulumi.Input[bool]] = None,
                 enable_traps_entity_perf_throughput_notif: Optional[pulumi.Input[bool]] = None,
                 enable_traps_envmon: Optional[pulumi.Input[bool]] = None,
                 enable_traps_errdisable: Optional[pulumi.Input[bool]] = None,
                 enable_traps_event_manager: Optional[pulumi.Input[bool]] = None,
                 enable_traps_fast_reroute_protected: Optional[pulumi.Input[bool]] = None,
                 enable_traps_flash_insertion: Optional[pulumi.Input[bool]] = None,
                 enable_traps_flash_lowspace: Optional[pulumi.Input[bool]] = None,
                 enable_traps_flash_removal: Optional[pulumi.Input[bool]] = None,
                 enable_traps_flowmon: Optional[pulumi.Input[bool]] = None,
                 enable_traps_fru_ctrl: Optional[pulumi.Input[bool]] = None,
                 enable_traps_hsrp: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ike_policy_add: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ike_policy_delete: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ike_tunnel_start: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ike_tunnel_stop: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipmulticast: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsec_cryptomap_add: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsec_cryptomap_attach: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsec_cryptomap_delete: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsec_cryptomap_detach: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsec_too_many_sas: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsec_tunnel_start: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsec_tunnel_stop: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ipsla: Optional[pulumi.Input[bool]] = None,
                 enable_traps_isis: Optional[pulumi.Input[bool]] = None,
                 enable_traps_license: Optional[pulumi.Input[bool]] = None,
                 enable_traps_local_auth: Optional[pulumi.Input[bool]] = None,
                 enable_traps_mac_notification_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_mac_notification_move: Optional[pulumi.Input[bool]] = None,
                 enable_traps_mac_notification_threshold: Optional[pulumi.Input[bool]] = None,
                 enable_traps_memory_bufferpeak: Optional[pulumi.Input[bool]] = None,
                 enable_traps_mpls_ldp: Optional[pulumi.Input[bool]] = None,
                 enable_traps_mpls_rfc_ldp: Optional[pulumi.Input[bool]] = None,
                 enable_traps_mpls_traffic_eng: Optional[pulumi.Input[bool]] = None,
                 enable_traps_mpls_vpn: Optional[pulumi.Input[bool]] = None,
                 enable_traps_msdp: Optional[pulumi.Input[bool]] = None,
                 enable_traps_nhrp_nhc: Optional[pulumi.Input[bool]] = None,
                 enable_traps_nhrp_nhp: Optional[pulumi.Input[bool]] = None,
                 enable_traps_nhrp_nhs: Optional[pulumi.Input[bool]] = None,
                 enable_traps_nhrp_quota_exceeded: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_config_errors: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_config_lsa: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_config_retransmit: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_config_state_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_errors_enable: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_lsa_enable: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_nssa_trans_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_retransmit_enable: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_shamlink_interface: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospf_shamlink_neighbor: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospfv3_config_errors: Optional[pulumi.Input[bool]] = None,
                 enable_traps_ospfv3_config_state_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_pim_invalid_pim_message: Optional[pulumi.Input[bool]] = None,
                 enable_traps_pim_neighbor_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_pim_rp_mapping_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_port_security: Optional[pulumi.Input[bool]] = None,
                 enable_traps_power_ethernet_group: Optional[pulumi.Input[str]] = None,
                 enable_traps_power_ethernet_police: Optional[pulumi.Input[bool]] = None,
                 enable_traps_pw_vc: Optional[pulumi.Input[bool]] = None,
                 enable_traps_rep: Optional[pulumi.Input[bool]] = None,
                 enable_traps_rf: Optional[pulumi.Input[bool]] = None,
                 enable_traps_smart_license: Optional[pulumi.Input[bool]] = None,
                 enable_traps_snmp_authentication: Optional[pulumi.Input[bool]] = None,
                 enable_traps_snmp_coldstart: Optional[pulumi.Input[bool]] = None,
                 enable_traps_snmp_linkdown: Optional[pulumi.Input[bool]] = None,
                 enable_traps_snmp_linkup: Optional[pulumi.Input[bool]] = None,
                 enable_traps_snmp_warmstart: Optional[pulumi.Input[bool]] = None,
                 enable_traps_stackwise: Optional[pulumi.Input[bool]] = None,
                 enable_traps_stpx_inconsistency: Optional[pulumi.Input[bool]] = None,
                 enable_traps_stpx_loop_inconsistency: Optional[pulumi.Input[bool]] = None,
                 enable_traps_stpx_root_inconsistency: Optional[pulumi.Input[bool]] = None,
                 enable_traps_syslog: Optional[pulumi.Input[bool]] = None,
                 enable_traps_transceiver_all: Optional[pulumi.Input[bool]] = None,
                 enable_traps_tty: Optional[pulumi.Input[bool]] = None,
                 enable_traps_udld_link_fail_rpt: Optional[pulumi.Input[bool]] = None,
                 enable_traps_udld_status_change: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vlan_membership: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vlancreate: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vlandelete: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vrfmib_vnet_trunk_down: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vrfmib_vnet_trunk_up: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vrfmib_vrf_down: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vrfmib_vrf_up: Optional[pulumi.Input[bool]] = None,
                 enable_traps_vtp: Optional[pulumi.Input[bool]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpServerHostArgs']]]]] = None,
                 ifindex_persist: Optional[pulumi.Input[bool]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 packetsize: Optional[pulumi.Input[int]] = None,
                 queue_length: Optional[pulumi.Input[int]] = None,
                 snmp_communities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpServerSnmpCommunityArgs']]]]] = None,
                 source_interface_informs_forty_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 source_interface_informs_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 source_interface_informs_hundred_gig_e: Optional[pulumi.Input[str]] = None,
                 source_interface_informs_loopback: Optional[pulumi.Input[int]] = None,
                 source_interface_informs_port_channel: Optional[pulumi.Input[int]] = None,
                 source_interface_informs_port_channel_subinterface: Optional[pulumi.Input[str]] = None,
                 source_interface_informs_ten_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 source_interface_informs_vlan: Optional[pulumi.Input[int]] = None,
                 source_interface_traps_forty_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 source_interface_traps_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 source_interface_traps_hundred_gig_e: Optional[pulumi.Input[str]] = None,
                 source_interface_traps_loopback: Optional[pulumi.Input[int]] = None,
                 source_interface_traps_port_channel: Optional[pulumi.Input[int]] = None,
                 source_interface_traps_port_channel_subinterface: Optional[pulumi.Input[str]] = None,
                 source_interface_traps_ten_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 source_interface_traps_vlan: Optional[pulumi.Input[int]] = None,
                 system_shutdown: Optional[pulumi.Input[bool]] = None,
                 trap_source_forty_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 trap_source_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 trap_source_hundred_gig_e: Optional[pulumi.Input[str]] = None,
                 trap_source_loopback: Optional[pulumi.Input[int]] = None,
                 trap_source_port_channel: Optional[pulumi.Input[int]] = None,
                 trap_source_port_channel_subinterface: Optional[pulumi.Input[str]] = None,
                 trap_source_ten_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
                 trap_source_vlan: Optional[pulumi.Input[int]] = None,
                 views: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpServerViewArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SnmpServerArgs.__new__(SnmpServerArgs)

            __props__.__dict__["chassis_id"] = chassis_id
            __props__.__dict__["contact"] = contact
            __props__.__dict__["contexts"] = contexts
            __props__.__dict__["delete_mode"] = delete_mode
            __props__.__dict__["device"] = device
            __props__.__dict__["enable_informs"] = enable_informs
            __props__.__dict__["enable_logging_getop"] = enable_logging_getop
            __props__.__dict__["enable_logging_setop"] = enable_logging_setop
            __props__.__dict__["enable_traps"] = enable_traps
            __props__.__dict__["enable_traps_auth_framework_sec_violation"] = enable_traps_auth_framework_sec_violation
            __props__.__dict__["enable_traps_bfd"] = enable_traps_bfd
            __props__.__dict__["enable_traps_bgp_cbgp2"] = enable_traps_bgp_cbgp2
            __props__.__dict__["enable_traps_bridge_newroot"] = enable_traps_bridge_newroot
            __props__.__dict__["enable_traps_bridge_topologychange"] = enable_traps_bridge_topologychange
            __props__.__dict__["enable_traps_bulkstat_collection"] = enable_traps_bulkstat_collection
            __props__.__dict__["enable_traps_bulkstat_transfer"] = enable_traps_bulkstat_transfer
            __props__.__dict__["enable_traps_call_home_message_send_fail"] = enable_traps_call_home_message_send_fail
            __props__.__dict__["enable_traps_call_home_server_fail"] = enable_traps_call_home_server_fail
            __props__.__dict__["enable_traps_cef_inconsistency"] = enable_traps_cef_inconsistency
            __props__.__dict__["enable_traps_cef_peer_fib_state_change"] = enable_traps_cef_peer_fib_state_change
            __props__.__dict__["enable_traps_cef_peer_state_change"] = enable_traps_cef_peer_state_change
            __props__.__dict__["enable_traps_cef_resource_failure"] = enable_traps_cef_resource_failure
            __props__.__dict__["enable_traps_config"] = enable_traps_config
            __props__.__dict__["enable_traps_config_copy"] = enable_traps_config_copy
            __props__.__dict__["enable_traps_config_ctid"] = enable_traps_config_ctid
            __props__.__dict__["enable_traps_cpu_threshold"] = enable_traps_cpu_threshold
            __props__.__dict__["enable_traps_dhcp"] = enable_traps_dhcp
            __props__.__dict__["enable_traps_eigrp"] = enable_traps_eigrp
            __props__.__dict__["enable_traps_energywise"] = enable_traps_energywise
            __props__.__dict__["enable_traps_entity"] = enable_traps_entity
            __props__.__dict__["enable_traps_entity_diag_boot_up_fail"] = enable_traps_entity_diag_boot_up_fail
            __props__.__dict__["enable_traps_entity_diag_hm_test_recover"] = enable_traps_entity_diag_hm_test_recover
            __props__.__dict__["enable_traps_entity_diag_hm_thresh_reached"] = enable_traps_entity_diag_hm_thresh_reached
            __props__.__dict__["enable_traps_entity_diag_scheduled_test_fail"] = enable_traps_entity_diag_scheduled_test_fail
            __props__.__dict__["enable_traps_entity_perf_throughput_notif"] = enable_traps_entity_perf_throughput_notif
            __props__.__dict__["enable_traps_envmon"] = enable_traps_envmon
            __props__.__dict__["enable_traps_errdisable"] = enable_traps_errdisable
            __props__.__dict__["enable_traps_event_manager"] = enable_traps_event_manager
            __props__.__dict__["enable_traps_fast_reroute_protected"] = enable_traps_fast_reroute_protected
            __props__.__dict__["enable_traps_flash_insertion"] = enable_traps_flash_insertion
            __props__.__dict__["enable_traps_flash_lowspace"] = enable_traps_flash_lowspace
            __props__.__dict__["enable_traps_flash_removal"] = enable_traps_flash_removal
            __props__.__dict__["enable_traps_flowmon"] = enable_traps_flowmon
            __props__.__dict__["enable_traps_fru_ctrl"] = enable_traps_fru_ctrl
            __props__.__dict__["enable_traps_hsrp"] = enable_traps_hsrp
            __props__.__dict__["enable_traps_ike_policy_add"] = enable_traps_ike_policy_add
            __props__.__dict__["enable_traps_ike_policy_delete"] = enable_traps_ike_policy_delete
            __props__.__dict__["enable_traps_ike_tunnel_start"] = enable_traps_ike_tunnel_start
            __props__.__dict__["enable_traps_ike_tunnel_stop"] = enable_traps_ike_tunnel_stop
            __props__.__dict__["enable_traps_ipmulticast"] = enable_traps_ipmulticast
            __props__.__dict__["enable_traps_ipsec_cryptomap_add"] = enable_traps_ipsec_cryptomap_add
            __props__.__dict__["enable_traps_ipsec_cryptomap_attach"] = enable_traps_ipsec_cryptomap_attach
            __props__.__dict__["enable_traps_ipsec_cryptomap_delete"] = enable_traps_ipsec_cryptomap_delete
            __props__.__dict__["enable_traps_ipsec_cryptomap_detach"] = enable_traps_ipsec_cryptomap_detach
            __props__.__dict__["enable_traps_ipsec_too_many_sas"] = enable_traps_ipsec_too_many_sas
            __props__.__dict__["enable_traps_ipsec_tunnel_start"] = enable_traps_ipsec_tunnel_start
            __props__.__dict__["enable_traps_ipsec_tunnel_stop"] = enable_traps_ipsec_tunnel_stop
            __props__.__dict__["enable_traps_ipsla"] = enable_traps_ipsla
            __props__.__dict__["enable_traps_isis"] = enable_traps_isis
            __props__.__dict__["enable_traps_license"] = enable_traps_license
            __props__.__dict__["enable_traps_local_auth"] = enable_traps_local_auth
            __props__.__dict__["enable_traps_mac_notification_change"] = enable_traps_mac_notification_change
            __props__.__dict__["enable_traps_mac_notification_move"] = enable_traps_mac_notification_move
            __props__.__dict__["enable_traps_mac_notification_threshold"] = enable_traps_mac_notification_threshold
            __props__.__dict__["enable_traps_memory_bufferpeak"] = enable_traps_memory_bufferpeak
            __props__.__dict__["enable_traps_mpls_ldp"] = enable_traps_mpls_ldp
            __props__.__dict__["enable_traps_mpls_rfc_ldp"] = enable_traps_mpls_rfc_ldp
            __props__.__dict__["enable_traps_mpls_traffic_eng"] = enable_traps_mpls_traffic_eng
            __props__.__dict__["enable_traps_mpls_vpn"] = enable_traps_mpls_vpn
            __props__.__dict__["enable_traps_msdp"] = enable_traps_msdp
            __props__.__dict__["enable_traps_nhrp_nhc"] = enable_traps_nhrp_nhc
            __props__.__dict__["enable_traps_nhrp_nhp"] = enable_traps_nhrp_nhp
            __props__.__dict__["enable_traps_nhrp_nhs"] = enable_traps_nhrp_nhs
            __props__.__dict__["enable_traps_nhrp_quota_exceeded"] = enable_traps_nhrp_quota_exceeded
            __props__.__dict__["enable_traps_ospf_config_errors"] = enable_traps_ospf_config_errors
            __props__.__dict__["enable_traps_ospf_config_lsa"] = enable_traps_ospf_config_lsa
            __props__.__dict__["enable_traps_ospf_config_retransmit"] = enable_traps_ospf_config_retransmit
            __props__.__dict__["enable_traps_ospf_config_state_change"] = enable_traps_ospf_config_state_change
            __props__.__dict__["enable_traps_ospf_errors_enable"] = enable_traps_ospf_errors_enable
            __props__.__dict__["enable_traps_ospf_lsa_enable"] = enable_traps_ospf_lsa_enable
            __props__.__dict__["enable_traps_ospf_nssa_trans_change"] = enable_traps_ospf_nssa_trans_change
            __props__.__dict__["enable_traps_ospf_retransmit_enable"] = enable_traps_ospf_retransmit_enable
            __props__.__dict__["enable_traps_ospf_shamlink_interface"] = enable_traps_ospf_shamlink_interface
            __props__.__dict__["enable_traps_ospf_shamlink_neighbor"] = enable_traps_ospf_shamlink_neighbor
            __props__.__dict__["enable_traps_ospfv3_config_errors"] = enable_traps_ospfv3_config_errors
            __props__.__dict__["enable_traps_ospfv3_config_state_change"] = enable_traps_ospfv3_config_state_change
            __props__.__dict__["enable_traps_pim_invalid_pim_message"] = enable_traps_pim_invalid_pim_message
            __props__.__dict__["enable_traps_pim_neighbor_change"] = enable_traps_pim_neighbor_change
            __props__.__dict__["enable_traps_pim_rp_mapping_change"] = enable_traps_pim_rp_mapping_change
            __props__.__dict__["enable_traps_port_security"] = enable_traps_port_security
            __props__.__dict__["enable_traps_power_ethernet_group"] = enable_traps_power_ethernet_group
            __props__.__dict__["enable_traps_power_ethernet_police"] = enable_traps_power_ethernet_police
            __props__.__dict__["enable_traps_pw_vc"] = enable_traps_pw_vc
            __props__.__dict__["enable_traps_rep"] = enable_traps_rep
            __props__.__dict__["enable_traps_rf"] = enable_traps_rf
            __props__.__dict__["enable_traps_smart_license"] = enable_traps_smart_license
            __props__.__dict__["enable_traps_snmp_authentication"] = enable_traps_snmp_authentication
            __props__.__dict__["enable_traps_snmp_coldstart"] = enable_traps_snmp_coldstart
            __props__.__dict__["enable_traps_snmp_linkdown"] = enable_traps_snmp_linkdown
            __props__.__dict__["enable_traps_snmp_linkup"] = enable_traps_snmp_linkup
            __props__.__dict__["enable_traps_snmp_warmstart"] = enable_traps_snmp_warmstart
            __props__.__dict__["enable_traps_stackwise"] = enable_traps_stackwise
            __props__.__dict__["enable_traps_stpx_inconsistency"] = enable_traps_stpx_inconsistency
            __props__.__dict__["enable_traps_stpx_loop_inconsistency"] = enable_traps_stpx_loop_inconsistency
            __props__.__dict__["enable_traps_stpx_root_inconsistency"] = enable_traps_stpx_root_inconsistency
            __props__.__dict__["enable_traps_syslog"] = enable_traps_syslog
            __props__.__dict__["enable_traps_transceiver_all"] = enable_traps_transceiver_all
            __props__.__dict__["enable_traps_tty"] = enable_traps_tty
            __props__.__dict__["enable_traps_udld_link_fail_rpt"] = enable_traps_udld_link_fail_rpt
            __props__.__dict__["enable_traps_udld_status_change"] = enable_traps_udld_status_change
            __props__.__dict__["enable_traps_vlan_membership"] = enable_traps_vlan_membership
            __props__.__dict__["enable_traps_vlancreate"] = enable_traps_vlancreate
            __props__.__dict__["enable_traps_vlandelete"] = enable_traps_vlandelete
            __props__.__dict__["enable_traps_vrfmib_vnet_trunk_down"] = enable_traps_vrfmib_vnet_trunk_down
            __props__.__dict__["enable_traps_vrfmib_vnet_trunk_up"] = enable_traps_vrfmib_vnet_trunk_up
            __props__.__dict__["enable_traps_vrfmib_vrf_down"] = enable_traps_vrfmib_vrf_down
            __props__.__dict__["enable_traps_vrfmib_vrf_up"] = enable_traps_vrfmib_vrf_up
            __props__.__dict__["enable_traps_vtp"] = enable_traps_vtp
            __props__.__dict__["hosts"] = hosts
            __props__.__dict__["ifindex_persist"] = ifindex_persist
            __props__.__dict__["location"] = location
            __props__.__dict__["packetsize"] = packetsize
            __props__.__dict__["queue_length"] = queue_length
            __props__.__dict__["snmp_communities"] = snmp_communities
            __props__.__dict__["source_interface_informs_forty_gigabit_ethernet"] = source_interface_informs_forty_gigabit_ethernet
            __props__.__dict__["source_interface_informs_gigabit_ethernet"] = source_interface_informs_gigabit_ethernet
            __props__.__dict__["source_interface_informs_hundred_gig_e"] = source_interface_informs_hundred_gig_e
            __props__.__dict__["source_interface_informs_loopback"] = source_interface_informs_loopback
            __props__.__dict__["source_interface_informs_port_channel"] = source_interface_informs_port_channel
            __props__.__dict__["source_interface_informs_port_channel_subinterface"] = source_interface_informs_port_channel_subinterface
            __props__.__dict__["source_interface_informs_ten_gigabit_ethernet"] = source_interface_informs_ten_gigabit_ethernet
            __props__.__dict__["source_interface_informs_vlan"] = source_interface_informs_vlan
            __props__.__dict__["source_interface_traps_forty_gigabit_ethernet"] = source_interface_traps_forty_gigabit_ethernet
            __props__.__dict__["source_interface_traps_gigabit_ethernet"] = source_interface_traps_gigabit_ethernet
            __props__.__dict__["source_interface_traps_hundred_gig_e"] = source_interface_traps_hundred_gig_e
            __props__.__dict__["source_interface_traps_loopback"] = source_interface_traps_loopback
            __props__.__dict__["source_interface_traps_port_channel"] = source_interface_traps_port_channel
            __props__.__dict__["source_interface_traps_port_channel_subinterface"] = source_interface_traps_port_channel_subinterface
            __props__.__dict__["source_interface_traps_ten_gigabit_ethernet"] = source_interface_traps_ten_gigabit_ethernet
            __props__.__dict__["source_interface_traps_vlan"] = source_interface_traps_vlan
            __props__.__dict__["system_shutdown"] = system_shutdown
            __props__.__dict__["trap_source_forty_gigabit_ethernet"] = trap_source_forty_gigabit_ethernet
            __props__.__dict__["trap_source_gigabit_ethernet"] = trap_source_gigabit_ethernet
            __props__.__dict__["trap_source_hundred_gig_e"] = trap_source_hundred_gig_e
            __props__.__dict__["trap_source_loopback"] = trap_source_loopback
            __props__.__dict__["trap_source_port_channel"] = trap_source_port_channel
            __props__.__dict__["trap_source_port_channel_subinterface"] = trap_source_port_channel_subinterface
            __props__.__dict__["trap_source_ten_gigabit_ethernet"] = trap_source_ten_gigabit_ethernet
            __props__.__dict__["trap_source_vlan"] = trap_source_vlan
            __props__.__dict__["views"] = views
        super(SnmpServer, __self__).__init__(
            'iosxe:index/snmpServer:SnmpServer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            chassis_id: Optional[pulumi.Input[str]] = None,
            contact: Optional[pulumi.Input[str]] = None,
            contexts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpServerContextArgs']]]]] = None,
            delete_mode: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            enable_informs: Optional[pulumi.Input[bool]] = None,
            enable_logging_getop: Optional[pulumi.Input[bool]] = None,
            enable_logging_setop: Optional[pulumi.Input[bool]] = None,
            enable_traps: Optional[pulumi.Input[bool]] = None,
            enable_traps_auth_framework_sec_violation: Optional[pulumi.Input[bool]] = None,
            enable_traps_bfd: Optional[pulumi.Input[bool]] = None,
            enable_traps_bgp_cbgp2: Optional[pulumi.Input[bool]] = None,
            enable_traps_bridge_newroot: Optional[pulumi.Input[bool]] = None,
            enable_traps_bridge_topologychange: Optional[pulumi.Input[bool]] = None,
            enable_traps_bulkstat_collection: Optional[pulumi.Input[bool]] = None,
            enable_traps_bulkstat_transfer: Optional[pulumi.Input[bool]] = None,
            enable_traps_call_home_message_send_fail: Optional[pulumi.Input[bool]] = None,
            enable_traps_call_home_server_fail: Optional[pulumi.Input[bool]] = None,
            enable_traps_cef_inconsistency: Optional[pulumi.Input[bool]] = None,
            enable_traps_cef_peer_fib_state_change: Optional[pulumi.Input[bool]] = None,
            enable_traps_cef_peer_state_change: Optional[pulumi.Input[bool]] = None,
            enable_traps_cef_resource_failure: Optional[pulumi.Input[bool]] = None,
            enable_traps_config: Optional[pulumi.Input[bool]] = None,
            enable_traps_config_copy: Optional[pulumi.Input[bool]] = None,
            enable_traps_config_ctid: Optional[pulumi.Input[bool]] = None,
            enable_traps_cpu_threshold: Optional[pulumi.Input[bool]] = None,
            enable_traps_dhcp: Optional[pulumi.Input[bool]] = None,
            enable_traps_eigrp: Optional[pulumi.Input[bool]] = None,
            enable_traps_energywise: Optional[pulumi.Input[bool]] = None,
            enable_traps_entity: Optional[pulumi.Input[bool]] = None,
            enable_traps_entity_diag_boot_up_fail: Optional[pulumi.Input[bool]] = None,
            enable_traps_entity_diag_hm_test_recover: Optional[pulumi.Input[bool]] = None,
            enable_traps_entity_diag_hm_thresh_reached: Optional[pulumi.Input[bool]] = None,
            enable_traps_entity_diag_scheduled_test_fail: Optional[pulumi.Input[bool]] = None,
            enable_traps_entity_perf_throughput_notif: Optional[pulumi.Input[bool]] = None,
            enable_traps_envmon: Optional[pulumi.Input[bool]] = None,
            enable_traps_errdisable: Optional[pulumi.Input[bool]] = None,
            enable_traps_event_manager: Optional[pulumi.Input[bool]] = None,
            enable_traps_fast_reroute_protected: Optional[pulumi.Input[bool]] = None,
            enable_traps_flash_insertion: Optional[pulumi.Input[bool]] = None,
            enable_traps_flash_lowspace: Optional[pulumi.Input[bool]] = None,
            enable_traps_flash_removal: Optional[pulumi.Input[bool]] = None,
            enable_traps_flowmon: Optional[pulumi.Input[bool]] = None,
            enable_traps_fru_ctrl: Optional[pulumi.Input[bool]] = None,
            enable_traps_hsrp: Optional[pulumi.Input[bool]] = None,
            enable_traps_ike_policy_add: Optional[pulumi.Input[bool]] = None,
            enable_traps_ike_policy_delete: Optional[pulumi.Input[bool]] = None,
            enable_traps_ike_tunnel_start: Optional[pulumi.Input[bool]] = None,
            enable_traps_ike_tunnel_stop: Optional[pulumi.Input[bool]] = None,
            enable_traps_ipmulticast: Optional[pulumi.Input[bool]] = None,
            enable_traps_ipsec_cryptomap_add: Optional[pulumi.Input[bool]] = None,
            enable_traps_ipsec_cryptomap_attach: Optional[pulumi.Input[bool]] = None,
            enable_traps_ipsec_cryptomap_delete: Optional[pulumi.Input[bool]] = None,
            enable_traps_ipsec_cryptomap_detach: Optional[pulumi.Input[bool]] = None,
            enable_traps_ipsec_too_many_sas: Optional[pulumi.Input[bool]] = None,
            enable_traps_ipsec_tunnel_start: Optional[pulumi.Input[bool]] = None,
            enable_traps_ipsec_tunnel_stop: Optional[pulumi.Input[bool]] = None,
            enable_traps_ipsla: Optional[pulumi.Input[bool]] = None,
            enable_traps_isis: Optional[pulumi.Input[bool]] = None,
            enable_traps_license: Optional[pulumi.Input[bool]] = None,
            enable_traps_local_auth: Optional[pulumi.Input[bool]] = None,
            enable_traps_mac_notification_change: Optional[pulumi.Input[bool]] = None,
            enable_traps_mac_notification_move: Optional[pulumi.Input[bool]] = None,
            enable_traps_mac_notification_threshold: Optional[pulumi.Input[bool]] = None,
            enable_traps_memory_bufferpeak: Optional[pulumi.Input[bool]] = None,
            enable_traps_mpls_ldp: Optional[pulumi.Input[bool]] = None,
            enable_traps_mpls_rfc_ldp: Optional[pulumi.Input[bool]] = None,
            enable_traps_mpls_traffic_eng: Optional[pulumi.Input[bool]] = None,
            enable_traps_mpls_vpn: Optional[pulumi.Input[bool]] = None,
            enable_traps_msdp: Optional[pulumi.Input[bool]] = None,
            enable_traps_nhrp_nhc: Optional[pulumi.Input[bool]] = None,
            enable_traps_nhrp_nhp: Optional[pulumi.Input[bool]] = None,
            enable_traps_nhrp_nhs: Optional[pulumi.Input[bool]] = None,
            enable_traps_nhrp_quota_exceeded: Optional[pulumi.Input[bool]] = None,
            enable_traps_ospf_config_errors: Optional[pulumi.Input[bool]] = None,
            enable_traps_ospf_config_lsa: Optional[pulumi.Input[bool]] = None,
            enable_traps_ospf_config_retransmit: Optional[pulumi.Input[bool]] = None,
            enable_traps_ospf_config_state_change: Optional[pulumi.Input[bool]] = None,
            enable_traps_ospf_errors_enable: Optional[pulumi.Input[bool]] = None,
            enable_traps_ospf_lsa_enable: Optional[pulumi.Input[bool]] = None,
            enable_traps_ospf_nssa_trans_change: Optional[pulumi.Input[bool]] = None,
            enable_traps_ospf_retransmit_enable: Optional[pulumi.Input[bool]] = None,
            enable_traps_ospf_shamlink_interface: Optional[pulumi.Input[bool]] = None,
            enable_traps_ospf_shamlink_neighbor: Optional[pulumi.Input[bool]] = None,
            enable_traps_ospfv3_config_errors: Optional[pulumi.Input[bool]] = None,
            enable_traps_ospfv3_config_state_change: Optional[pulumi.Input[bool]] = None,
            enable_traps_pim_invalid_pim_message: Optional[pulumi.Input[bool]] = None,
            enable_traps_pim_neighbor_change: Optional[pulumi.Input[bool]] = None,
            enable_traps_pim_rp_mapping_change: Optional[pulumi.Input[bool]] = None,
            enable_traps_port_security: Optional[pulumi.Input[bool]] = None,
            enable_traps_power_ethernet_group: Optional[pulumi.Input[str]] = None,
            enable_traps_power_ethernet_police: Optional[pulumi.Input[bool]] = None,
            enable_traps_pw_vc: Optional[pulumi.Input[bool]] = None,
            enable_traps_rep: Optional[pulumi.Input[bool]] = None,
            enable_traps_rf: Optional[pulumi.Input[bool]] = None,
            enable_traps_smart_license: Optional[pulumi.Input[bool]] = None,
            enable_traps_snmp_authentication: Optional[pulumi.Input[bool]] = None,
            enable_traps_snmp_coldstart: Optional[pulumi.Input[bool]] = None,
            enable_traps_snmp_linkdown: Optional[pulumi.Input[bool]] = None,
            enable_traps_snmp_linkup: Optional[pulumi.Input[bool]] = None,
            enable_traps_snmp_warmstart: Optional[pulumi.Input[bool]] = None,
            enable_traps_stackwise: Optional[pulumi.Input[bool]] = None,
            enable_traps_stpx_inconsistency: Optional[pulumi.Input[bool]] = None,
            enable_traps_stpx_loop_inconsistency: Optional[pulumi.Input[bool]] = None,
            enable_traps_stpx_root_inconsistency: Optional[pulumi.Input[bool]] = None,
            enable_traps_syslog: Optional[pulumi.Input[bool]] = None,
            enable_traps_transceiver_all: Optional[pulumi.Input[bool]] = None,
            enable_traps_tty: Optional[pulumi.Input[bool]] = None,
            enable_traps_udld_link_fail_rpt: Optional[pulumi.Input[bool]] = None,
            enable_traps_udld_status_change: Optional[pulumi.Input[bool]] = None,
            enable_traps_vlan_membership: Optional[pulumi.Input[bool]] = None,
            enable_traps_vlancreate: Optional[pulumi.Input[bool]] = None,
            enable_traps_vlandelete: Optional[pulumi.Input[bool]] = None,
            enable_traps_vrfmib_vnet_trunk_down: Optional[pulumi.Input[bool]] = None,
            enable_traps_vrfmib_vnet_trunk_up: Optional[pulumi.Input[bool]] = None,
            enable_traps_vrfmib_vrf_down: Optional[pulumi.Input[bool]] = None,
            enable_traps_vrfmib_vrf_up: Optional[pulumi.Input[bool]] = None,
            enable_traps_vtp: Optional[pulumi.Input[bool]] = None,
            hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpServerHostArgs']]]]] = None,
            ifindex_persist: Optional[pulumi.Input[bool]] = None,
            location: Optional[pulumi.Input[str]] = None,
            packetsize: Optional[pulumi.Input[int]] = None,
            queue_length: Optional[pulumi.Input[int]] = None,
            snmp_communities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpServerSnmpCommunityArgs']]]]] = None,
            source_interface_informs_forty_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
            source_interface_informs_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
            source_interface_informs_hundred_gig_e: Optional[pulumi.Input[str]] = None,
            source_interface_informs_loopback: Optional[pulumi.Input[int]] = None,
            source_interface_informs_port_channel: Optional[pulumi.Input[int]] = None,
            source_interface_informs_port_channel_subinterface: Optional[pulumi.Input[str]] = None,
            source_interface_informs_ten_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
            source_interface_informs_vlan: Optional[pulumi.Input[int]] = None,
            source_interface_traps_forty_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
            source_interface_traps_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
            source_interface_traps_hundred_gig_e: Optional[pulumi.Input[str]] = None,
            source_interface_traps_loopback: Optional[pulumi.Input[int]] = None,
            source_interface_traps_port_channel: Optional[pulumi.Input[int]] = None,
            source_interface_traps_port_channel_subinterface: Optional[pulumi.Input[str]] = None,
            source_interface_traps_ten_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
            source_interface_traps_vlan: Optional[pulumi.Input[int]] = None,
            system_shutdown: Optional[pulumi.Input[bool]] = None,
            trap_source_forty_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
            trap_source_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
            trap_source_hundred_gig_e: Optional[pulumi.Input[str]] = None,
            trap_source_loopback: Optional[pulumi.Input[int]] = None,
            trap_source_port_channel: Optional[pulumi.Input[int]] = None,
            trap_source_port_channel_subinterface: Optional[pulumi.Input[str]] = None,
            trap_source_ten_gigabit_ethernet: Optional[pulumi.Input[str]] = None,
            trap_source_vlan: Optional[pulumi.Input[int]] = None,
            views: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpServerViewArgs']]]]] = None) -> 'SnmpServer':
        """
        Get an existing SnmpServer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] chassis_id: String to uniquely identify this chassis
        :param pulumi.Input[str] contact: Text for mib object sysContact
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpServerContextArgs']]]] contexts: Create/Delete a context apart from default
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] enable_informs: Enable SNMP Informs
        :param pulumi.Input[bool] enable_logging_getop: Enable SNMP GET Operation logging
        :param pulumi.Input[bool] enable_logging_setop: Enable SNMP SET Operation logging
        :param pulumi.Input[bool] enable_traps: Enable SNMP Traps
        :param pulumi.Input[bool] enable_traps_bgp_cbgp2: Enable BGP MIBv2 traps
        :param pulumi.Input[bool] enable_traps_bulkstat_collection: Enable Data-Collection-MIB Collection notifications
        :param pulumi.Input[bool] enable_traps_bulkstat_transfer: Enable Data-Collection-MIB Transfer notifications
        :param pulumi.Input[bool] enable_traps_config: Enable SNMP config traps
        :param pulumi.Input[bool] enable_traps_config_copy: Enable SNMP config-copy traps
        :param pulumi.Input[bool] enable_traps_cpu_threshold: Allow CPU utilization threshold violation traps
        :param pulumi.Input[bool] enable_traps_dhcp: Enable SNMP dhcp traps
        :param pulumi.Input[bool] enable_traps_eigrp: Enable SNMP EIGRP traps
        :param pulumi.Input[bool] enable_traps_entity: Enable SNMP entity traps
        :param pulumi.Input[bool] enable_traps_entity_diag_boot_up_fail: Enable SNMP ceDiagBootUpFailedNotif traps
        :param pulumi.Input[bool] enable_traps_entity_diag_hm_test_recover: Enable SNMP ceDiagHMTestRecoverNotif traps
        :param pulumi.Input[bool] enable_traps_entity_diag_hm_thresh_reached: Enable SNMP ceDiagHMThresholdReachedNotif traps
        :param pulumi.Input[bool] enable_traps_entity_diag_scheduled_test_fail: Enable SNMP ceDiagScheduledTestFailedNotif traps
        :param pulumi.Input[bool] enable_traps_entity_perf_throughput_notif: Enable ENTITY PERFORMANCE MIB throughput traps
        :param pulumi.Input[bool] enable_traps_envmon: Enable SNMP environmental monitor traps
        :param pulumi.Input[bool] enable_traps_errdisable: Enable SNMP errdisable notifications
        :param pulumi.Input[bool] enable_traps_event_manager: Enable SNMP Embedded Event Manager traps
        :param pulumi.Input[bool] enable_traps_flash_insertion: Enable SNMP Flash Insertion notifications
        :param pulumi.Input[bool] enable_traps_flash_lowspace: Enable SNMP Flash Lowspace notifications
        :param pulumi.Input[bool] enable_traps_flash_removal: Enable SNMP Flash Removal notifications
        :param pulumi.Input[bool] enable_traps_flowmon: Enable SNMP flowmon notifications
        :param pulumi.Input[bool] enable_traps_fru_ctrl: Enable SNMP entity FRU control traps
        :param pulumi.Input[bool] enable_traps_hsrp: Enable SNMP HSRP traps
        :param pulumi.Input[bool] enable_traps_ike_policy_add: Enable IKE Policy add trap
        :param pulumi.Input[bool] enable_traps_ike_policy_delete: Enable IKE Policy delete trap
        :param pulumi.Input[bool] enable_traps_ike_tunnel_start: Enable IKE Tunnel start trap
        :param pulumi.Input[bool] enable_traps_ike_tunnel_stop: Enable IKE Tunnel stop trap
        :param pulumi.Input[bool] enable_traps_ipmulticast: Enable SNMP ipmulticast traps
        :param pulumi.Input[bool] enable_traps_ipsec_cryptomap_add: Enable IPsec Cryptomap add trap
        :param pulumi.Input[bool] enable_traps_ipsec_cryptomap_attach: Enable IPsec Cryptomap Attach trap
        :param pulumi.Input[bool] enable_traps_ipsec_cryptomap_delete: Enable IPsec Cryptomap delete trap
        :param pulumi.Input[bool] enable_traps_ipsec_cryptomap_detach: Enable IPsec Cryptomap Detach trap
        :param pulumi.Input[bool] enable_traps_ipsec_too_many_sas: Enable IPsec Tunnel Start trap
        :param pulumi.Input[bool] enable_traps_ipsec_tunnel_start: Enable IPsec Tunnel Start trap
        :param pulumi.Input[bool] enable_traps_ipsec_tunnel_stop: Enable IPsec Tunnel Stop trap
        :param pulumi.Input[bool] enable_traps_ipsla: Enable IPSLA traps traps
        :param pulumi.Input[bool] enable_traps_isis: Enable ISIS traps traps
        :param pulumi.Input[bool] enable_traps_license: Enable license traps
        :param pulumi.Input[bool] enable_traps_local_auth: Enable SNMP local auth traps
        :param pulumi.Input[bool] enable_traps_mac_notification_change: Enable SNMP Change traps
        :param pulumi.Input[bool] enable_traps_mac_notification_move: Enable SNMP Move traps
        :param pulumi.Input[bool] enable_traps_mac_notification_threshold: Enable SNMP Threshold traps
        :param pulumi.Input[bool] enable_traps_memory_bufferpeak: Enable SNMP Memory Bufferpeak traps
        :param pulumi.Input[bool] enable_traps_mpls_ldp: SNMP MPLS label distribution protocol traps
        :param pulumi.Input[bool] enable_traps_msdp: Enable SNMP MSDP traps
        :param pulumi.Input[bool] enable_traps_ospf_config_errors: Enable all traps of errors
        :param pulumi.Input[bool] enable_traps_ospf_config_lsa: Enable all traps of lsa
        :param pulumi.Input[bool] enable_traps_ospf_config_retransmit: Enable all traps of retransmit
        :param pulumi.Input[bool] enable_traps_ospf_config_state_change: Enable all traps of state-change
        :param pulumi.Input[bool] enable_traps_ospf_errors_enable: Enable all traps of errors
        :param pulumi.Input[bool] enable_traps_ospf_lsa_enable: Enable all traps of lsa
        :param pulumi.Input[bool] enable_traps_ospf_nssa_trans_change: Nssa translator state changes
        :param pulumi.Input[bool] enable_traps_ospf_retransmit_enable: Enable all traps of retransmit
        :param pulumi.Input[bool] enable_traps_ospf_shamlink_interface: Sham link interface state changes
        :param pulumi.Input[bool] enable_traps_ospf_shamlink_neighbor: Sham link neighbor state changes
        :param pulumi.Input[bool] enable_traps_ospfv3_config_errors: Enable all traps of errors
        :param pulumi.Input[bool] enable_traps_ospfv3_config_state_change: Enable all traps of state-change
        :param pulumi.Input[bool] enable_traps_pim_invalid_pim_message: Enable invalid pim message trap
        :param pulumi.Input[bool] enable_traps_pim_neighbor_change: Enable neighbor change trap
        :param pulumi.Input[bool] enable_traps_pim_rp_mapping_change: Enable rp mapping change trap
        :param pulumi.Input[bool] enable_traps_port_security: Enable SNMP port security traps
        :param pulumi.Input[str] enable_traps_power_ethernet_group: Enable SNMP inline power group based traps
        :param pulumi.Input[bool] enable_traps_power_ethernet_police: Enable Policing Trap
        :param pulumi.Input[bool] enable_traps_rf: Enable all SNMP traps defined in CISCO-RF-MIB
        :param pulumi.Input[bool] enable_traps_smart_license: Enable smart license traps
        :param pulumi.Input[bool] enable_traps_snmp_authentication: Enable authentication trap
        :param pulumi.Input[bool] enable_traps_snmp_coldstart: Enable coldStart trap
        :param pulumi.Input[bool] enable_traps_snmp_linkdown: Enable linkDown trap
        :param pulumi.Input[bool] enable_traps_snmp_linkup: Enable linkUp trap
        :param pulumi.Input[bool] enable_traps_snmp_warmstart: Enable warmStart trap
        :param pulumi.Input[bool] enable_traps_stackwise: Enable SNMP stackwise traps
        :param pulumi.Input[bool] enable_traps_syslog: Enable SNMP syslog traps
        :param pulumi.Input[bool] enable_traps_tty: Enable TCP connection traps
        :param pulumi.Input[bool] enable_traps_udld_link_fail_rpt: Enable SNMP cudldpFastHelloLinkFailRptNotification traps
        :param pulumi.Input[bool] enable_traps_udld_status_change: Enable SNMP cudldpFastHelloStatusChangeNotification traps
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpServerHostArgs']]]] hosts: Specify hosts keyed by (ip-address, community-or-user)
        :param pulumi.Input[bool] ifindex_persist: Persist interface indices
        :param pulumi.Input[str] location: Text for mib object sysLocation
        :param pulumi.Input[int] packetsize: Largest SNMP packet size - Range: `484`-`17892`
        :param pulumi.Input[int] queue_length: Message queue length for each TRAP host - Range: `1`-`5000`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpServerSnmpCommunityArgs']]]] snmp_communities: Enable SNMP; set community string and access privs
        :param pulumi.Input[str] source_interface_informs_forty_gigabit_ethernet: Forty GigabitEthernet
        :param pulumi.Input[str] source_interface_informs_gigabit_ethernet: GigabitEthernet IEEE 802.3z
        :param pulumi.Input[str] source_interface_informs_hundred_gig_e: Hundred GigabitEthernet
        :param pulumi.Input[int] source_interface_informs_loopback: Loopback interface - Range: `0`-`2147483647`
        :param pulumi.Input[int] source_interface_informs_port_channel: Ethernet Channel of interfaces - Range: `0`-`4294967295`
        :param pulumi.Input[str] source_interface_informs_ten_gigabit_ethernet: Ten Gigabit Ethernet
        :param pulumi.Input[int] source_interface_informs_vlan: Iosxr Vlans - Range: `0`-`65535`
        :param pulumi.Input[str] source_interface_traps_forty_gigabit_ethernet: Forty GigabitEthernet
        :param pulumi.Input[str] source_interface_traps_gigabit_ethernet: GigabitEthernet IEEE 802.3z
        :param pulumi.Input[str] source_interface_traps_hundred_gig_e: Hundred GigabitEthernet
        :param pulumi.Input[int] source_interface_traps_loopback: Loopback interface - Range: `0`-`2147483647`
        :param pulumi.Input[int] source_interface_traps_port_channel: Ethernet Channel of interfaces - Range: `0`-`4294967295`
        :param pulumi.Input[str] source_interface_traps_ten_gigabit_ethernet: Ten Gigabit Ethernet
        :param pulumi.Input[int] source_interface_traps_vlan: Iosxr Vlans - Range: `0`-`65535`
        :param pulumi.Input[bool] system_shutdown: Enable use of the SNMP reload command
        :param pulumi.Input[str] trap_source_forty_gigabit_ethernet: Forty GigabitEthernet
        :param pulumi.Input[str] trap_source_gigabit_ethernet: GigabitEthernet IEEE 802.3z
        :param pulumi.Input[str] trap_source_hundred_gig_e: Hundred GigabitEthernet
        :param pulumi.Input[int] trap_source_loopback: Loopback interface - Range: `0`-`2147483647`
        :param pulumi.Input[int] trap_source_port_channel: Ethernet Channel of interfaces - Range: `0`-`4294967295`
        :param pulumi.Input[str] trap_source_ten_gigabit_ethernet: Ten Gigabit Ethernet
        :param pulumi.Input[int] trap_source_vlan: Iosxr Vlans - Range: `0`-`65535`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpServerViewArgs']]]] views: Define an SNMPv2 MIB view
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SnmpServerState.__new__(_SnmpServerState)

        __props__.__dict__["chassis_id"] = chassis_id
        __props__.__dict__["contact"] = contact
        __props__.__dict__["contexts"] = contexts
        __props__.__dict__["delete_mode"] = delete_mode
        __props__.__dict__["device"] = device
        __props__.__dict__["enable_informs"] = enable_informs
        __props__.__dict__["enable_logging_getop"] = enable_logging_getop
        __props__.__dict__["enable_logging_setop"] = enable_logging_setop
        __props__.__dict__["enable_traps"] = enable_traps
        __props__.__dict__["enable_traps_auth_framework_sec_violation"] = enable_traps_auth_framework_sec_violation
        __props__.__dict__["enable_traps_bfd"] = enable_traps_bfd
        __props__.__dict__["enable_traps_bgp_cbgp2"] = enable_traps_bgp_cbgp2
        __props__.__dict__["enable_traps_bridge_newroot"] = enable_traps_bridge_newroot
        __props__.__dict__["enable_traps_bridge_topologychange"] = enable_traps_bridge_topologychange
        __props__.__dict__["enable_traps_bulkstat_collection"] = enable_traps_bulkstat_collection
        __props__.__dict__["enable_traps_bulkstat_transfer"] = enable_traps_bulkstat_transfer
        __props__.__dict__["enable_traps_call_home_message_send_fail"] = enable_traps_call_home_message_send_fail
        __props__.__dict__["enable_traps_call_home_server_fail"] = enable_traps_call_home_server_fail
        __props__.__dict__["enable_traps_cef_inconsistency"] = enable_traps_cef_inconsistency
        __props__.__dict__["enable_traps_cef_peer_fib_state_change"] = enable_traps_cef_peer_fib_state_change
        __props__.__dict__["enable_traps_cef_peer_state_change"] = enable_traps_cef_peer_state_change
        __props__.__dict__["enable_traps_cef_resource_failure"] = enable_traps_cef_resource_failure
        __props__.__dict__["enable_traps_config"] = enable_traps_config
        __props__.__dict__["enable_traps_config_copy"] = enable_traps_config_copy
        __props__.__dict__["enable_traps_config_ctid"] = enable_traps_config_ctid
        __props__.__dict__["enable_traps_cpu_threshold"] = enable_traps_cpu_threshold
        __props__.__dict__["enable_traps_dhcp"] = enable_traps_dhcp
        __props__.__dict__["enable_traps_eigrp"] = enable_traps_eigrp
        __props__.__dict__["enable_traps_energywise"] = enable_traps_energywise
        __props__.__dict__["enable_traps_entity"] = enable_traps_entity
        __props__.__dict__["enable_traps_entity_diag_boot_up_fail"] = enable_traps_entity_diag_boot_up_fail
        __props__.__dict__["enable_traps_entity_diag_hm_test_recover"] = enable_traps_entity_diag_hm_test_recover
        __props__.__dict__["enable_traps_entity_diag_hm_thresh_reached"] = enable_traps_entity_diag_hm_thresh_reached
        __props__.__dict__["enable_traps_entity_diag_scheduled_test_fail"] = enable_traps_entity_diag_scheduled_test_fail
        __props__.__dict__["enable_traps_entity_perf_throughput_notif"] = enable_traps_entity_perf_throughput_notif
        __props__.__dict__["enable_traps_envmon"] = enable_traps_envmon
        __props__.__dict__["enable_traps_errdisable"] = enable_traps_errdisable
        __props__.__dict__["enable_traps_event_manager"] = enable_traps_event_manager
        __props__.__dict__["enable_traps_fast_reroute_protected"] = enable_traps_fast_reroute_protected
        __props__.__dict__["enable_traps_flash_insertion"] = enable_traps_flash_insertion
        __props__.__dict__["enable_traps_flash_lowspace"] = enable_traps_flash_lowspace
        __props__.__dict__["enable_traps_flash_removal"] = enable_traps_flash_removal
        __props__.__dict__["enable_traps_flowmon"] = enable_traps_flowmon
        __props__.__dict__["enable_traps_fru_ctrl"] = enable_traps_fru_ctrl
        __props__.__dict__["enable_traps_hsrp"] = enable_traps_hsrp
        __props__.__dict__["enable_traps_ike_policy_add"] = enable_traps_ike_policy_add
        __props__.__dict__["enable_traps_ike_policy_delete"] = enable_traps_ike_policy_delete
        __props__.__dict__["enable_traps_ike_tunnel_start"] = enable_traps_ike_tunnel_start
        __props__.__dict__["enable_traps_ike_tunnel_stop"] = enable_traps_ike_tunnel_stop
        __props__.__dict__["enable_traps_ipmulticast"] = enable_traps_ipmulticast
        __props__.__dict__["enable_traps_ipsec_cryptomap_add"] = enable_traps_ipsec_cryptomap_add
        __props__.__dict__["enable_traps_ipsec_cryptomap_attach"] = enable_traps_ipsec_cryptomap_attach
        __props__.__dict__["enable_traps_ipsec_cryptomap_delete"] = enable_traps_ipsec_cryptomap_delete
        __props__.__dict__["enable_traps_ipsec_cryptomap_detach"] = enable_traps_ipsec_cryptomap_detach
        __props__.__dict__["enable_traps_ipsec_too_many_sas"] = enable_traps_ipsec_too_many_sas
        __props__.__dict__["enable_traps_ipsec_tunnel_start"] = enable_traps_ipsec_tunnel_start
        __props__.__dict__["enable_traps_ipsec_tunnel_stop"] = enable_traps_ipsec_tunnel_stop
        __props__.__dict__["enable_traps_ipsla"] = enable_traps_ipsla
        __props__.__dict__["enable_traps_isis"] = enable_traps_isis
        __props__.__dict__["enable_traps_license"] = enable_traps_license
        __props__.__dict__["enable_traps_local_auth"] = enable_traps_local_auth
        __props__.__dict__["enable_traps_mac_notification_change"] = enable_traps_mac_notification_change
        __props__.__dict__["enable_traps_mac_notification_move"] = enable_traps_mac_notification_move
        __props__.__dict__["enable_traps_mac_notification_threshold"] = enable_traps_mac_notification_threshold
        __props__.__dict__["enable_traps_memory_bufferpeak"] = enable_traps_memory_bufferpeak
        __props__.__dict__["enable_traps_mpls_ldp"] = enable_traps_mpls_ldp
        __props__.__dict__["enable_traps_mpls_rfc_ldp"] = enable_traps_mpls_rfc_ldp
        __props__.__dict__["enable_traps_mpls_traffic_eng"] = enable_traps_mpls_traffic_eng
        __props__.__dict__["enable_traps_mpls_vpn"] = enable_traps_mpls_vpn
        __props__.__dict__["enable_traps_msdp"] = enable_traps_msdp
        __props__.__dict__["enable_traps_nhrp_nhc"] = enable_traps_nhrp_nhc
        __props__.__dict__["enable_traps_nhrp_nhp"] = enable_traps_nhrp_nhp
        __props__.__dict__["enable_traps_nhrp_nhs"] = enable_traps_nhrp_nhs
        __props__.__dict__["enable_traps_nhrp_quota_exceeded"] = enable_traps_nhrp_quota_exceeded
        __props__.__dict__["enable_traps_ospf_config_errors"] = enable_traps_ospf_config_errors
        __props__.__dict__["enable_traps_ospf_config_lsa"] = enable_traps_ospf_config_lsa
        __props__.__dict__["enable_traps_ospf_config_retransmit"] = enable_traps_ospf_config_retransmit
        __props__.__dict__["enable_traps_ospf_config_state_change"] = enable_traps_ospf_config_state_change
        __props__.__dict__["enable_traps_ospf_errors_enable"] = enable_traps_ospf_errors_enable
        __props__.__dict__["enable_traps_ospf_lsa_enable"] = enable_traps_ospf_lsa_enable
        __props__.__dict__["enable_traps_ospf_nssa_trans_change"] = enable_traps_ospf_nssa_trans_change
        __props__.__dict__["enable_traps_ospf_retransmit_enable"] = enable_traps_ospf_retransmit_enable
        __props__.__dict__["enable_traps_ospf_shamlink_interface"] = enable_traps_ospf_shamlink_interface
        __props__.__dict__["enable_traps_ospf_shamlink_neighbor"] = enable_traps_ospf_shamlink_neighbor
        __props__.__dict__["enable_traps_ospfv3_config_errors"] = enable_traps_ospfv3_config_errors
        __props__.__dict__["enable_traps_ospfv3_config_state_change"] = enable_traps_ospfv3_config_state_change
        __props__.__dict__["enable_traps_pim_invalid_pim_message"] = enable_traps_pim_invalid_pim_message
        __props__.__dict__["enable_traps_pim_neighbor_change"] = enable_traps_pim_neighbor_change
        __props__.__dict__["enable_traps_pim_rp_mapping_change"] = enable_traps_pim_rp_mapping_change
        __props__.__dict__["enable_traps_port_security"] = enable_traps_port_security
        __props__.__dict__["enable_traps_power_ethernet_group"] = enable_traps_power_ethernet_group
        __props__.__dict__["enable_traps_power_ethernet_police"] = enable_traps_power_ethernet_police
        __props__.__dict__["enable_traps_pw_vc"] = enable_traps_pw_vc
        __props__.__dict__["enable_traps_rep"] = enable_traps_rep
        __props__.__dict__["enable_traps_rf"] = enable_traps_rf
        __props__.__dict__["enable_traps_smart_license"] = enable_traps_smart_license
        __props__.__dict__["enable_traps_snmp_authentication"] = enable_traps_snmp_authentication
        __props__.__dict__["enable_traps_snmp_coldstart"] = enable_traps_snmp_coldstart
        __props__.__dict__["enable_traps_snmp_linkdown"] = enable_traps_snmp_linkdown
        __props__.__dict__["enable_traps_snmp_linkup"] = enable_traps_snmp_linkup
        __props__.__dict__["enable_traps_snmp_warmstart"] = enable_traps_snmp_warmstart
        __props__.__dict__["enable_traps_stackwise"] = enable_traps_stackwise
        __props__.__dict__["enable_traps_stpx_inconsistency"] = enable_traps_stpx_inconsistency
        __props__.__dict__["enable_traps_stpx_loop_inconsistency"] = enable_traps_stpx_loop_inconsistency
        __props__.__dict__["enable_traps_stpx_root_inconsistency"] = enable_traps_stpx_root_inconsistency
        __props__.__dict__["enable_traps_syslog"] = enable_traps_syslog
        __props__.__dict__["enable_traps_transceiver_all"] = enable_traps_transceiver_all
        __props__.__dict__["enable_traps_tty"] = enable_traps_tty
        __props__.__dict__["enable_traps_udld_link_fail_rpt"] = enable_traps_udld_link_fail_rpt
        __props__.__dict__["enable_traps_udld_status_change"] = enable_traps_udld_status_change
        __props__.__dict__["enable_traps_vlan_membership"] = enable_traps_vlan_membership
        __props__.__dict__["enable_traps_vlancreate"] = enable_traps_vlancreate
        __props__.__dict__["enable_traps_vlandelete"] = enable_traps_vlandelete
        __props__.__dict__["enable_traps_vrfmib_vnet_trunk_down"] = enable_traps_vrfmib_vnet_trunk_down
        __props__.__dict__["enable_traps_vrfmib_vnet_trunk_up"] = enable_traps_vrfmib_vnet_trunk_up
        __props__.__dict__["enable_traps_vrfmib_vrf_down"] = enable_traps_vrfmib_vrf_down
        __props__.__dict__["enable_traps_vrfmib_vrf_up"] = enable_traps_vrfmib_vrf_up
        __props__.__dict__["enable_traps_vtp"] = enable_traps_vtp
        __props__.__dict__["hosts"] = hosts
        __props__.__dict__["ifindex_persist"] = ifindex_persist
        __props__.__dict__["location"] = location
        __props__.__dict__["packetsize"] = packetsize
        __props__.__dict__["queue_length"] = queue_length
        __props__.__dict__["snmp_communities"] = snmp_communities
        __props__.__dict__["source_interface_informs_forty_gigabit_ethernet"] = source_interface_informs_forty_gigabit_ethernet
        __props__.__dict__["source_interface_informs_gigabit_ethernet"] = source_interface_informs_gigabit_ethernet
        __props__.__dict__["source_interface_informs_hundred_gig_e"] = source_interface_informs_hundred_gig_e
        __props__.__dict__["source_interface_informs_loopback"] = source_interface_informs_loopback
        __props__.__dict__["source_interface_informs_port_channel"] = source_interface_informs_port_channel
        __props__.__dict__["source_interface_informs_port_channel_subinterface"] = source_interface_informs_port_channel_subinterface
        __props__.__dict__["source_interface_informs_ten_gigabit_ethernet"] = source_interface_informs_ten_gigabit_ethernet
        __props__.__dict__["source_interface_informs_vlan"] = source_interface_informs_vlan
        __props__.__dict__["source_interface_traps_forty_gigabit_ethernet"] = source_interface_traps_forty_gigabit_ethernet
        __props__.__dict__["source_interface_traps_gigabit_ethernet"] = source_interface_traps_gigabit_ethernet
        __props__.__dict__["source_interface_traps_hundred_gig_e"] = source_interface_traps_hundred_gig_e
        __props__.__dict__["source_interface_traps_loopback"] = source_interface_traps_loopback
        __props__.__dict__["source_interface_traps_port_channel"] = source_interface_traps_port_channel
        __props__.__dict__["source_interface_traps_port_channel_subinterface"] = source_interface_traps_port_channel_subinterface
        __props__.__dict__["source_interface_traps_ten_gigabit_ethernet"] = source_interface_traps_ten_gigabit_ethernet
        __props__.__dict__["source_interface_traps_vlan"] = source_interface_traps_vlan
        __props__.__dict__["system_shutdown"] = system_shutdown
        __props__.__dict__["trap_source_forty_gigabit_ethernet"] = trap_source_forty_gigabit_ethernet
        __props__.__dict__["trap_source_gigabit_ethernet"] = trap_source_gigabit_ethernet
        __props__.__dict__["trap_source_hundred_gig_e"] = trap_source_hundred_gig_e
        __props__.__dict__["trap_source_loopback"] = trap_source_loopback
        __props__.__dict__["trap_source_port_channel"] = trap_source_port_channel
        __props__.__dict__["trap_source_port_channel_subinterface"] = trap_source_port_channel_subinterface
        __props__.__dict__["trap_source_ten_gigabit_ethernet"] = trap_source_ten_gigabit_ethernet
        __props__.__dict__["trap_source_vlan"] = trap_source_vlan
        __props__.__dict__["views"] = views
        return SnmpServer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="chassisId")
    def chassis_id(self) -> pulumi.Output[Optional[str]]:
        """
        String to uniquely identify this chassis
        """
        return pulumi.get(self, "chassis_id")

    @property
    @pulumi.getter
    def contact(self) -> pulumi.Output[Optional[str]]:
        """
        Text for mib object sysContact
        """
        return pulumi.get(self, "contact")

    @property
    @pulumi.getter
    def contexts(self) -> pulumi.Output[Optional[Sequence['outputs.SnmpServerContext']]]:
        """
        Create/Delete a context apart from default
        """
        return pulumi.get(self, "contexts")

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="enableInforms")
    def enable_informs(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP Informs
        """
        return pulumi.get(self, "enable_informs")

    @property
    @pulumi.getter(name="enableLoggingGetop")
    def enable_logging_getop(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP GET Operation logging
        """
        return pulumi.get(self, "enable_logging_getop")

    @property
    @pulumi.getter(name="enableLoggingSetop")
    def enable_logging_setop(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP SET Operation logging
        """
        return pulumi.get(self, "enable_logging_setop")

    @property
    @pulumi.getter(name="enableTraps")
    def enable_traps(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP Traps
        """
        return pulumi.get(self, "enable_traps")

    @property
    @pulumi.getter(name="enableTrapsAuthFrameworkSecViolation")
    def enable_traps_auth_framework_sec_violation(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_auth_framework_sec_violation")

    @property
    @pulumi.getter(name="enableTrapsBfd")
    def enable_traps_bfd(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_bfd")

    @property
    @pulumi.getter(name="enableTrapsBgpCbgp2")
    def enable_traps_bgp_cbgp2(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable BGP MIBv2 traps
        """
        return pulumi.get(self, "enable_traps_bgp_cbgp2")

    @property
    @pulumi.getter(name="enableTrapsBridgeNewroot")
    def enable_traps_bridge_newroot(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_bridge_newroot")

    @property
    @pulumi.getter(name="enableTrapsBridgeTopologychange")
    def enable_traps_bridge_topologychange(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_bridge_topologychange")

    @property
    @pulumi.getter(name="enableTrapsBulkstatCollection")
    def enable_traps_bulkstat_collection(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable Data-Collection-MIB Collection notifications
        """
        return pulumi.get(self, "enable_traps_bulkstat_collection")

    @property
    @pulumi.getter(name="enableTrapsBulkstatTransfer")
    def enable_traps_bulkstat_transfer(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable Data-Collection-MIB Transfer notifications
        """
        return pulumi.get(self, "enable_traps_bulkstat_transfer")

    @property
    @pulumi.getter(name="enableTrapsCallHomeMessageSendFail")
    def enable_traps_call_home_message_send_fail(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_call_home_message_send_fail")

    @property
    @pulumi.getter(name="enableTrapsCallHomeServerFail")
    def enable_traps_call_home_server_fail(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_call_home_server_fail")

    @property
    @pulumi.getter(name="enableTrapsCefInconsistency")
    def enable_traps_cef_inconsistency(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_cef_inconsistency")

    @property
    @pulumi.getter(name="enableTrapsCefPeerFibStateChange")
    def enable_traps_cef_peer_fib_state_change(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_cef_peer_fib_state_change")

    @property
    @pulumi.getter(name="enableTrapsCefPeerStateChange")
    def enable_traps_cef_peer_state_change(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_cef_peer_state_change")

    @property
    @pulumi.getter(name="enableTrapsCefResourceFailure")
    def enable_traps_cef_resource_failure(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_cef_resource_failure")

    @property
    @pulumi.getter(name="enableTrapsConfig")
    def enable_traps_config(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP config traps
        """
        return pulumi.get(self, "enable_traps_config")

    @property
    @pulumi.getter(name="enableTrapsConfigCopy")
    def enable_traps_config_copy(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP config-copy traps
        """
        return pulumi.get(self, "enable_traps_config_copy")

    @property
    @pulumi.getter(name="enableTrapsConfigCtid")
    def enable_traps_config_ctid(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_config_ctid")

    @property
    @pulumi.getter(name="enableTrapsCpuThreshold")
    def enable_traps_cpu_threshold(self) -> pulumi.Output[Optional[bool]]:
        """
        Allow CPU utilization threshold violation traps
        """
        return pulumi.get(self, "enable_traps_cpu_threshold")

    @property
    @pulumi.getter(name="enableTrapsDhcp")
    def enable_traps_dhcp(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP dhcp traps
        """
        return pulumi.get(self, "enable_traps_dhcp")

    @property
    @pulumi.getter(name="enableTrapsEigrp")
    def enable_traps_eigrp(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP EIGRP traps
        """
        return pulumi.get(self, "enable_traps_eigrp")

    @property
    @pulumi.getter(name="enableTrapsEnergywise")
    def enable_traps_energywise(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_energywise")

    @property
    @pulumi.getter(name="enableTrapsEntity")
    def enable_traps_entity(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP entity traps
        """
        return pulumi.get(self, "enable_traps_entity")

    @property
    @pulumi.getter(name="enableTrapsEntityDiagBootUpFail")
    def enable_traps_entity_diag_boot_up_fail(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP ceDiagBootUpFailedNotif traps
        """
        return pulumi.get(self, "enable_traps_entity_diag_boot_up_fail")

    @property
    @pulumi.getter(name="enableTrapsEntityDiagHmTestRecover")
    def enable_traps_entity_diag_hm_test_recover(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP ceDiagHMTestRecoverNotif traps
        """
        return pulumi.get(self, "enable_traps_entity_diag_hm_test_recover")

    @property
    @pulumi.getter(name="enableTrapsEntityDiagHmThreshReached")
    def enable_traps_entity_diag_hm_thresh_reached(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP ceDiagHMThresholdReachedNotif traps
        """
        return pulumi.get(self, "enable_traps_entity_diag_hm_thresh_reached")

    @property
    @pulumi.getter(name="enableTrapsEntityDiagScheduledTestFail")
    def enable_traps_entity_diag_scheduled_test_fail(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP ceDiagScheduledTestFailedNotif traps
        """
        return pulumi.get(self, "enable_traps_entity_diag_scheduled_test_fail")

    @property
    @pulumi.getter(name="enableTrapsEntityPerfThroughputNotif")
    def enable_traps_entity_perf_throughput_notif(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable ENTITY PERFORMANCE MIB throughput traps
        """
        return pulumi.get(self, "enable_traps_entity_perf_throughput_notif")

    @property
    @pulumi.getter(name="enableTrapsEnvmon")
    def enable_traps_envmon(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP environmental monitor traps
        """
        return pulumi.get(self, "enable_traps_envmon")

    @property
    @pulumi.getter(name="enableTrapsErrdisable")
    def enable_traps_errdisable(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP errdisable notifications
        """
        return pulumi.get(self, "enable_traps_errdisable")

    @property
    @pulumi.getter(name="enableTrapsEventManager")
    def enable_traps_event_manager(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP Embedded Event Manager traps
        """
        return pulumi.get(self, "enable_traps_event_manager")

    @property
    @pulumi.getter(name="enableTrapsFastRerouteProtected")
    def enable_traps_fast_reroute_protected(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_fast_reroute_protected")

    @property
    @pulumi.getter(name="enableTrapsFlashInsertion")
    def enable_traps_flash_insertion(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP Flash Insertion notifications
        """
        return pulumi.get(self, "enable_traps_flash_insertion")

    @property
    @pulumi.getter(name="enableTrapsFlashLowspace")
    def enable_traps_flash_lowspace(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP Flash Lowspace notifications
        """
        return pulumi.get(self, "enable_traps_flash_lowspace")

    @property
    @pulumi.getter(name="enableTrapsFlashRemoval")
    def enable_traps_flash_removal(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP Flash Removal notifications
        """
        return pulumi.get(self, "enable_traps_flash_removal")

    @property
    @pulumi.getter(name="enableTrapsFlowmon")
    def enable_traps_flowmon(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP flowmon notifications
        """
        return pulumi.get(self, "enable_traps_flowmon")

    @property
    @pulumi.getter(name="enableTrapsFruCtrl")
    def enable_traps_fru_ctrl(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP entity FRU control traps
        """
        return pulumi.get(self, "enable_traps_fru_ctrl")

    @property
    @pulumi.getter(name="enableTrapsHsrp")
    def enable_traps_hsrp(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP HSRP traps
        """
        return pulumi.get(self, "enable_traps_hsrp")

    @property
    @pulumi.getter(name="enableTrapsIkePolicyAdd")
    def enable_traps_ike_policy_add(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable IKE Policy add trap
        """
        return pulumi.get(self, "enable_traps_ike_policy_add")

    @property
    @pulumi.getter(name="enableTrapsIkePolicyDelete")
    def enable_traps_ike_policy_delete(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable IKE Policy delete trap
        """
        return pulumi.get(self, "enable_traps_ike_policy_delete")

    @property
    @pulumi.getter(name="enableTrapsIkeTunnelStart")
    def enable_traps_ike_tunnel_start(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable IKE Tunnel start trap
        """
        return pulumi.get(self, "enable_traps_ike_tunnel_start")

    @property
    @pulumi.getter(name="enableTrapsIkeTunnelStop")
    def enable_traps_ike_tunnel_stop(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable IKE Tunnel stop trap
        """
        return pulumi.get(self, "enable_traps_ike_tunnel_stop")

    @property
    @pulumi.getter(name="enableTrapsIpmulticast")
    def enable_traps_ipmulticast(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP ipmulticast traps
        """
        return pulumi.get(self, "enable_traps_ipmulticast")

    @property
    @pulumi.getter(name="enableTrapsIpsecCryptomapAdd")
    def enable_traps_ipsec_cryptomap_add(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable IPsec Cryptomap add trap
        """
        return pulumi.get(self, "enable_traps_ipsec_cryptomap_add")

    @property
    @pulumi.getter(name="enableTrapsIpsecCryptomapAttach")
    def enable_traps_ipsec_cryptomap_attach(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable IPsec Cryptomap Attach trap
        """
        return pulumi.get(self, "enable_traps_ipsec_cryptomap_attach")

    @property
    @pulumi.getter(name="enableTrapsIpsecCryptomapDelete")
    def enable_traps_ipsec_cryptomap_delete(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable IPsec Cryptomap delete trap
        """
        return pulumi.get(self, "enable_traps_ipsec_cryptomap_delete")

    @property
    @pulumi.getter(name="enableTrapsIpsecCryptomapDetach")
    def enable_traps_ipsec_cryptomap_detach(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable IPsec Cryptomap Detach trap
        """
        return pulumi.get(self, "enable_traps_ipsec_cryptomap_detach")

    @property
    @pulumi.getter(name="enableTrapsIpsecTooManySas")
    def enable_traps_ipsec_too_many_sas(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable IPsec Tunnel Start trap
        """
        return pulumi.get(self, "enable_traps_ipsec_too_many_sas")

    @property
    @pulumi.getter(name="enableTrapsIpsecTunnelStart")
    def enable_traps_ipsec_tunnel_start(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable IPsec Tunnel Start trap
        """
        return pulumi.get(self, "enable_traps_ipsec_tunnel_start")

    @property
    @pulumi.getter(name="enableTrapsIpsecTunnelStop")
    def enable_traps_ipsec_tunnel_stop(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable IPsec Tunnel Stop trap
        """
        return pulumi.get(self, "enable_traps_ipsec_tunnel_stop")

    @property
    @pulumi.getter(name="enableTrapsIpsla")
    def enable_traps_ipsla(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable IPSLA traps traps
        """
        return pulumi.get(self, "enable_traps_ipsla")

    @property
    @pulumi.getter(name="enableTrapsIsis")
    def enable_traps_isis(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable ISIS traps traps
        """
        return pulumi.get(self, "enable_traps_isis")

    @property
    @pulumi.getter(name="enableTrapsLicense")
    def enable_traps_license(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable license traps
        """
        return pulumi.get(self, "enable_traps_license")

    @property
    @pulumi.getter(name="enableTrapsLocalAuth")
    def enable_traps_local_auth(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP local auth traps
        """
        return pulumi.get(self, "enable_traps_local_auth")

    @property
    @pulumi.getter(name="enableTrapsMacNotificationChange")
    def enable_traps_mac_notification_change(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP Change traps
        """
        return pulumi.get(self, "enable_traps_mac_notification_change")

    @property
    @pulumi.getter(name="enableTrapsMacNotificationMove")
    def enable_traps_mac_notification_move(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP Move traps
        """
        return pulumi.get(self, "enable_traps_mac_notification_move")

    @property
    @pulumi.getter(name="enableTrapsMacNotificationThreshold")
    def enable_traps_mac_notification_threshold(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP Threshold traps
        """
        return pulumi.get(self, "enable_traps_mac_notification_threshold")

    @property
    @pulumi.getter(name="enableTrapsMemoryBufferpeak")
    def enable_traps_memory_bufferpeak(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP Memory Bufferpeak traps
        """
        return pulumi.get(self, "enable_traps_memory_bufferpeak")

    @property
    @pulumi.getter(name="enableTrapsMplsLdp")
    def enable_traps_mpls_ldp(self) -> pulumi.Output[Optional[bool]]:
        """
        SNMP MPLS label distribution protocol traps
        """
        return pulumi.get(self, "enable_traps_mpls_ldp")

    @property
    @pulumi.getter(name="enableTrapsMplsRfcLdp")
    def enable_traps_mpls_rfc_ldp(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_mpls_rfc_ldp")

    @property
    @pulumi.getter(name="enableTrapsMplsTrafficEng")
    def enable_traps_mpls_traffic_eng(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_mpls_traffic_eng")

    @property
    @pulumi.getter(name="enableTrapsMplsVpn")
    def enable_traps_mpls_vpn(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_mpls_vpn")

    @property
    @pulumi.getter(name="enableTrapsMsdp")
    def enable_traps_msdp(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP MSDP traps
        """
        return pulumi.get(self, "enable_traps_msdp")

    @property
    @pulumi.getter(name="enableTrapsNhrpNhc")
    def enable_traps_nhrp_nhc(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_nhrp_nhc")

    @property
    @pulumi.getter(name="enableTrapsNhrpNhp")
    def enable_traps_nhrp_nhp(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_nhrp_nhp")

    @property
    @pulumi.getter(name="enableTrapsNhrpNhs")
    def enable_traps_nhrp_nhs(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_nhrp_nhs")

    @property
    @pulumi.getter(name="enableTrapsNhrpQuotaExceeded")
    def enable_traps_nhrp_quota_exceeded(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_nhrp_quota_exceeded")

    @property
    @pulumi.getter(name="enableTrapsOspfConfigErrors")
    def enable_traps_ospf_config_errors(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable all traps of errors
        """
        return pulumi.get(self, "enable_traps_ospf_config_errors")

    @property
    @pulumi.getter(name="enableTrapsOspfConfigLsa")
    def enable_traps_ospf_config_lsa(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable all traps of lsa
        """
        return pulumi.get(self, "enable_traps_ospf_config_lsa")

    @property
    @pulumi.getter(name="enableTrapsOspfConfigRetransmit")
    def enable_traps_ospf_config_retransmit(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable all traps of retransmit
        """
        return pulumi.get(self, "enable_traps_ospf_config_retransmit")

    @property
    @pulumi.getter(name="enableTrapsOspfConfigStateChange")
    def enable_traps_ospf_config_state_change(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable all traps of state-change
        """
        return pulumi.get(self, "enable_traps_ospf_config_state_change")

    @property
    @pulumi.getter(name="enableTrapsOspfErrorsEnable")
    def enable_traps_ospf_errors_enable(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable all traps of errors
        """
        return pulumi.get(self, "enable_traps_ospf_errors_enable")

    @property
    @pulumi.getter(name="enableTrapsOspfLsaEnable")
    def enable_traps_ospf_lsa_enable(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable all traps of lsa
        """
        return pulumi.get(self, "enable_traps_ospf_lsa_enable")

    @property
    @pulumi.getter(name="enableTrapsOspfNssaTransChange")
    def enable_traps_ospf_nssa_trans_change(self) -> pulumi.Output[Optional[bool]]:
        """
        Nssa translator state changes
        """
        return pulumi.get(self, "enable_traps_ospf_nssa_trans_change")

    @property
    @pulumi.getter(name="enableTrapsOspfRetransmitEnable")
    def enable_traps_ospf_retransmit_enable(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable all traps of retransmit
        """
        return pulumi.get(self, "enable_traps_ospf_retransmit_enable")

    @property
    @pulumi.getter(name="enableTrapsOspfShamlinkInterface")
    def enable_traps_ospf_shamlink_interface(self) -> pulumi.Output[Optional[bool]]:
        """
        Sham link interface state changes
        """
        return pulumi.get(self, "enable_traps_ospf_shamlink_interface")

    @property
    @pulumi.getter(name="enableTrapsOspfShamlinkNeighbor")
    def enable_traps_ospf_shamlink_neighbor(self) -> pulumi.Output[Optional[bool]]:
        """
        Sham link neighbor state changes
        """
        return pulumi.get(self, "enable_traps_ospf_shamlink_neighbor")

    @property
    @pulumi.getter(name="enableTrapsOspfv3ConfigErrors")
    def enable_traps_ospfv3_config_errors(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable all traps of errors
        """
        return pulumi.get(self, "enable_traps_ospfv3_config_errors")

    @property
    @pulumi.getter(name="enableTrapsOspfv3ConfigStateChange")
    def enable_traps_ospfv3_config_state_change(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable all traps of state-change
        """
        return pulumi.get(self, "enable_traps_ospfv3_config_state_change")

    @property
    @pulumi.getter(name="enableTrapsPimInvalidPimMessage")
    def enable_traps_pim_invalid_pim_message(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable invalid pim message trap
        """
        return pulumi.get(self, "enable_traps_pim_invalid_pim_message")

    @property
    @pulumi.getter(name="enableTrapsPimNeighborChange")
    def enable_traps_pim_neighbor_change(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable neighbor change trap
        """
        return pulumi.get(self, "enable_traps_pim_neighbor_change")

    @property
    @pulumi.getter(name="enableTrapsPimRpMappingChange")
    def enable_traps_pim_rp_mapping_change(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable rp mapping change trap
        """
        return pulumi.get(self, "enable_traps_pim_rp_mapping_change")

    @property
    @pulumi.getter(name="enableTrapsPortSecurity")
    def enable_traps_port_security(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP port security traps
        """
        return pulumi.get(self, "enable_traps_port_security")

    @property
    @pulumi.getter(name="enableTrapsPowerEthernetGroup")
    def enable_traps_power_ethernet_group(self) -> pulumi.Output[Optional[str]]:
        """
        Enable SNMP inline power group based traps
        """
        return pulumi.get(self, "enable_traps_power_ethernet_group")

    @property
    @pulumi.getter(name="enableTrapsPowerEthernetPolice")
    def enable_traps_power_ethernet_police(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable Policing Trap
        """
        return pulumi.get(self, "enable_traps_power_ethernet_police")

    @property
    @pulumi.getter(name="enableTrapsPwVc")
    def enable_traps_pw_vc(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_pw_vc")

    @property
    @pulumi.getter(name="enableTrapsRep")
    def enable_traps_rep(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_rep")

    @property
    @pulumi.getter(name="enableTrapsRf")
    def enable_traps_rf(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable all SNMP traps defined in CISCO-RF-MIB
        """
        return pulumi.get(self, "enable_traps_rf")

    @property
    @pulumi.getter(name="enableTrapsSmartLicense")
    def enable_traps_smart_license(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable smart license traps
        """
        return pulumi.get(self, "enable_traps_smart_license")

    @property
    @pulumi.getter(name="enableTrapsSnmpAuthentication")
    def enable_traps_snmp_authentication(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable authentication trap
        """
        return pulumi.get(self, "enable_traps_snmp_authentication")

    @property
    @pulumi.getter(name="enableTrapsSnmpColdstart")
    def enable_traps_snmp_coldstart(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable coldStart trap
        """
        return pulumi.get(self, "enable_traps_snmp_coldstart")

    @property
    @pulumi.getter(name="enableTrapsSnmpLinkdown")
    def enable_traps_snmp_linkdown(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable linkDown trap
        """
        return pulumi.get(self, "enable_traps_snmp_linkdown")

    @property
    @pulumi.getter(name="enableTrapsSnmpLinkup")
    def enable_traps_snmp_linkup(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable linkUp trap
        """
        return pulumi.get(self, "enable_traps_snmp_linkup")

    @property
    @pulumi.getter(name="enableTrapsSnmpWarmstart")
    def enable_traps_snmp_warmstart(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable warmStart trap
        """
        return pulumi.get(self, "enable_traps_snmp_warmstart")

    @property
    @pulumi.getter(name="enableTrapsStackwise")
    def enable_traps_stackwise(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP stackwise traps
        """
        return pulumi.get(self, "enable_traps_stackwise")

    @property
    @pulumi.getter(name="enableTrapsStpxInconsistency")
    def enable_traps_stpx_inconsistency(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_stpx_inconsistency")

    @property
    @pulumi.getter(name="enableTrapsStpxLoopInconsistency")
    def enable_traps_stpx_loop_inconsistency(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_stpx_loop_inconsistency")

    @property
    @pulumi.getter(name="enableTrapsStpxRootInconsistency")
    def enable_traps_stpx_root_inconsistency(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_stpx_root_inconsistency")

    @property
    @pulumi.getter(name="enableTrapsSyslog")
    def enable_traps_syslog(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP syslog traps
        """
        return pulumi.get(self, "enable_traps_syslog")

    @property
    @pulumi.getter(name="enableTrapsTransceiverAll")
    def enable_traps_transceiver_all(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_transceiver_all")

    @property
    @pulumi.getter(name="enableTrapsTty")
    def enable_traps_tty(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable TCP connection traps
        """
        return pulumi.get(self, "enable_traps_tty")

    @property
    @pulumi.getter(name="enableTrapsUdldLinkFailRpt")
    def enable_traps_udld_link_fail_rpt(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP cudldpFastHelloLinkFailRptNotification traps
        """
        return pulumi.get(self, "enable_traps_udld_link_fail_rpt")

    @property
    @pulumi.getter(name="enableTrapsUdldStatusChange")
    def enable_traps_udld_status_change(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable SNMP cudldpFastHelloStatusChangeNotification traps
        """
        return pulumi.get(self, "enable_traps_udld_status_change")

    @property
    @pulumi.getter(name="enableTrapsVlanMembership")
    def enable_traps_vlan_membership(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_vlan_membership")

    @property
    @pulumi.getter(name="enableTrapsVlancreate")
    def enable_traps_vlancreate(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_vlancreate")

    @property
    @pulumi.getter(name="enableTrapsVlandelete")
    def enable_traps_vlandelete(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_vlandelete")

    @property
    @pulumi.getter(name="enableTrapsVrfmibVnetTrunkDown")
    def enable_traps_vrfmib_vnet_trunk_down(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_vrfmib_vnet_trunk_down")

    @property
    @pulumi.getter(name="enableTrapsVrfmibVnetTrunkUp")
    def enable_traps_vrfmib_vnet_trunk_up(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_vrfmib_vnet_trunk_up")

    @property
    @pulumi.getter(name="enableTrapsVrfmibVrfDown")
    def enable_traps_vrfmib_vrf_down(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_vrfmib_vrf_down")

    @property
    @pulumi.getter(name="enableTrapsVrfmibVrfUp")
    def enable_traps_vrfmib_vrf_up(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_vrfmib_vrf_up")

    @property
    @pulumi.getter(name="enableTrapsVtp")
    def enable_traps_vtp(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_traps_vtp")

    @property
    @pulumi.getter
    def hosts(self) -> pulumi.Output[Optional[Sequence['outputs.SnmpServerHost']]]:
        """
        Specify hosts keyed by (ip-address, community-or-user)
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter(name="ifindexPersist")
    def ifindex_persist(self) -> pulumi.Output[Optional[bool]]:
        """
        Persist interface indices
        """
        return pulumi.get(self, "ifindex_persist")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[Optional[str]]:
        """
        Text for mib object sysLocation
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def packetsize(self) -> pulumi.Output[Optional[int]]:
        """
        Largest SNMP packet size - Range: `484`-`17892`
        """
        return pulumi.get(self, "packetsize")

    @property
    @pulumi.getter(name="queueLength")
    def queue_length(self) -> pulumi.Output[Optional[int]]:
        """
        Message queue length for each TRAP host - Range: `1`-`5000`
        """
        return pulumi.get(self, "queue_length")

    @property
    @pulumi.getter(name="snmpCommunities")
    def snmp_communities(self) -> pulumi.Output[Optional[Sequence['outputs.SnmpServerSnmpCommunity']]]:
        """
        Enable SNMP; set community string and access privs
        """
        return pulumi.get(self, "snmp_communities")

    @property
    @pulumi.getter(name="sourceInterfaceInformsFortyGigabitEthernet")
    def source_interface_informs_forty_gigabit_ethernet(self) -> pulumi.Output[Optional[str]]:
        """
        Forty GigabitEthernet
        """
        return pulumi.get(self, "source_interface_informs_forty_gigabit_ethernet")

    @property
    @pulumi.getter(name="sourceInterfaceInformsGigabitEthernet")
    def source_interface_informs_gigabit_ethernet(self) -> pulumi.Output[Optional[str]]:
        """
        GigabitEthernet IEEE 802.3z
        """
        return pulumi.get(self, "source_interface_informs_gigabit_ethernet")

    @property
    @pulumi.getter(name="sourceInterfaceInformsHundredGigE")
    def source_interface_informs_hundred_gig_e(self) -> pulumi.Output[Optional[str]]:
        """
        Hundred GigabitEthernet
        """
        return pulumi.get(self, "source_interface_informs_hundred_gig_e")

    @property
    @pulumi.getter(name="sourceInterfaceInformsLoopback")
    def source_interface_informs_loopback(self) -> pulumi.Output[Optional[int]]:
        """
        Loopback interface - Range: `0`-`2147483647`
        """
        return pulumi.get(self, "source_interface_informs_loopback")

    @property
    @pulumi.getter(name="sourceInterfaceInformsPortChannel")
    def source_interface_informs_port_channel(self) -> pulumi.Output[Optional[int]]:
        """
        Ethernet Channel of interfaces - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "source_interface_informs_port_channel")

    @property
    @pulumi.getter(name="sourceInterfaceInformsPortChannelSubinterface")
    def source_interface_informs_port_channel_subinterface(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "source_interface_informs_port_channel_subinterface")

    @property
    @pulumi.getter(name="sourceInterfaceInformsTenGigabitEthernet")
    def source_interface_informs_ten_gigabit_ethernet(self) -> pulumi.Output[Optional[str]]:
        """
        Ten Gigabit Ethernet
        """
        return pulumi.get(self, "source_interface_informs_ten_gigabit_ethernet")

    @property
    @pulumi.getter(name="sourceInterfaceInformsVlan")
    def source_interface_informs_vlan(self) -> pulumi.Output[Optional[int]]:
        """
        Iosxr Vlans - Range: `0`-`65535`
        """
        return pulumi.get(self, "source_interface_informs_vlan")

    @property
    @pulumi.getter(name="sourceInterfaceTrapsFortyGigabitEthernet")
    def source_interface_traps_forty_gigabit_ethernet(self) -> pulumi.Output[Optional[str]]:
        """
        Forty GigabitEthernet
        """
        return pulumi.get(self, "source_interface_traps_forty_gigabit_ethernet")

    @property
    @pulumi.getter(name="sourceInterfaceTrapsGigabitEthernet")
    def source_interface_traps_gigabit_ethernet(self) -> pulumi.Output[Optional[str]]:
        """
        GigabitEthernet IEEE 802.3z
        """
        return pulumi.get(self, "source_interface_traps_gigabit_ethernet")

    @property
    @pulumi.getter(name="sourceInterfaceTrapsHundredGigE")
    def source_interface_traps_hundred_gig_e(self) -> pulumi.Output[Optional[str]]:
        """
        Hundred GigabitEthernet
        """
        return pulumi.get(self, "source_interface_traps_hundred_gig_e")

    @property
    @pulumi.getter(name="sourceInterfaceTrapsLoopback")
    def source_interface_traps_loopback(self) -> pulumi.Output[Optional[int]]:
        """
        Loopback interface - Range: `0`-`2147483647`
        """
        return pulumi.get(self, "source_interface_traps_loopback")

    @property
    @pulumi.getter(name="sourceInterfaceTrapsPortChannel")
    def source_interface_traps_port_channel(self) -> pulumi.Output[Optional[int]]:
        """
        Ethernet Channel of interfaces - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "source_interface_traps_port_channel")

    @property
    @pulumi.getter(name="sourceInterfaceTrapsPortChannelSubinterface")
    def source_interface_traps_port_channel_subinterface(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "source_interface_traps_port_channel_subinterface")

    @property
    @pulumi.getter(name="sourceInterfaceTrapsTenGigabitEthernet")
    def source_interface_traps_ten_gigabit_ethernet(self) -> pulumi.Output[Optional[str]]:
        """
        Ten Gigabit Ethernet
        """
        return pulumi.get(self, "source_interface_traps_ten_gigabit_ethernet")

    @property
    @pulumi.getter(name="sourceInterfaceTrapsVlan")
    def source_interface_traps_vlan(self) -> pulumi.Output[Optional[int]]:
        """
        Iosxr Vlans - Range: `0`-`65535`
        """
        return pulumi.get(self, "source_interface_traps_vlan")

    @property
    @pulumi.getter(name="systemShutdown")
    def system_shutdown(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable use of the SNMP reload command
        """
        return pulumi.get(self, "system_shutdown")

    @property
    @pulumi.getter(name="trapSourceFortyGigabitEthernet")
    def trap_source_forty_gigabit_ethernet(self) -> pulumi.Output[Optional[str]]:
        """
        Forty GigabitEthernet
        """
        return pulumi.get(self, "trap_source_forty_gigabit_ethernet")

    @property
    @pulumi.getter(name="trapSourceGigabitEthernet")
    def trap_source_gigabit_ethernet(self) -> pulumi.Output[Optional[str]]:
        """
        GigabitEthernet IEEE 802.3z
        """
        return pulumi.get(self, "trap_source_gigabit_ethernet")

    @property
    @pulumi.getter(name="trapSourceHundredGigE")
    def trap_source_hundred_gig_e(self) -> pulumi.Output[Optional[str]]:
        """
        Hundred GigabitEthernet
        """
        return pulumi.get(self, "trap_source_hundred_gig_e")

    @property
    @pulumi.getter(name="trapSourceLoopback")
    def trap_source_loopback(self) -> pulumi.Output[Optional[int]]:
        """
        Loopback interface - Range: `0`-`2147483647`
        """
        return pulumi.get(self, "trap_source_loopback")

    @property
    @pulumi.getter(name="trapSourcePortChannel")
    def trap_source_port_channel(self) -> pulumi.Output[Optional[int]]:
        """
        Ethernet Channel of interfaces - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "trap_source_port_channel")

    @property
    @pulumi.getter(name="trapSourcePortChannelSubinterface")
    def trap_source_port_channel_subinterface(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "trap_source_port_channel_subinterface")

    @property
    @pulumi.getter(name="trapSourceTenGigabitEthernet")
    def trap_source_ten_gigabit_ethernet(self) -> pulumi.Output[Optional[str]]:
        """
        Ten Gigabit Ethernet
        """
        return pulumi.get(self, "trap_source_ten_gigabit_ethernet")

    @property
    @pulumi.getter(name="trapSourceVlan")
    def trap_source_vlan(self) -> pulumi.Output[Optional[int]]:
        """
        Iosxr Vlans - Range: `0`-`65535`
        """
        return pulumi.get(self, "trap_source_vlan")

    @property
    @pulumi.getter
    def views(self) -> pulumi.Output[Optional[Sequence['outputs.SnmpServerView']]]:
        """
        Define an SNMPv2 MIB view
        """
        return pulumi.get(self, "views")

