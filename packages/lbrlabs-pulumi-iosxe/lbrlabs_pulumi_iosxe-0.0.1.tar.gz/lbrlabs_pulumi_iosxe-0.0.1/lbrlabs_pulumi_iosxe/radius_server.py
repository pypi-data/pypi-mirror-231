# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RadiusServerArgs', 'RadiusServer']

@pulumi.input_type
class RadiusServerArgs:
    def __init__(__self__, *,
                 attributes: Optional[pulumi.Input[Sequence[pulumi.Input['RadiusServerAttributeArgs']]]] = None,
                 dead_criteria_time: Optional[pulumi.Input[int]] = None,
                 dead_criteria_tries: Optional[pulumi.Input[int]] = None,
                 deadtime: Optional[pulumi.Input[int]] = None,
                 device: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RadiusServer resource.
        :param pulumi.Input[Sequence[pulumi.Input['RadiusServerAttributeArgs']]] attributes: Customize selected radius attributes
        :param pulumi.Input[int] dead_criteria_time: The time during which no properly formed response must be received from the RADIUS server - Range: `1`-`120`
        :param pulumi.Input[int] dead_criteria_tries: The number of times the router must fail to receive a response from the radius server to mark it as dead - Range:
               `1`-`100`
        :param pulumi.Input[int] deadtime: Time to stop using a server that does not respond - Range: `1`-`1440`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        """
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if dead_criteria_time is not None:
            pulumi.set(__self__, "dead_criteria_time", dead_criteria_time)
        if dead_criteria_tries is not None:
            pulumi.set(__self__, "dead_criteria_tries", dead_criteria_tries)
        if deadtime is not None:
            pulumi.set(__self__, "deadtime", deadtime)
        if device is not None:
            pulumi.set(__self__, "device", device)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RadiusServerAttributeArgs']]]]:
        """
        Customize selected radius attributes
        """
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RadiusServerAttributeArgs']]]]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter(name="deadCriteriaTime")
    def dead_criteria_time(self) -> Optional[pulumi.Input[int]]:
        """
        The time during which no properly formed response must be received from the RADIUS server - Range: `1`-`120`
        """
        return pulumi.get(self, "dead_criteria_time")

    @dead_criteria_time.setter
    def dead_criteria_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dead_criteria_time", value)

    @property
    @pulumi.getter(name="deadCriteriaTries")
    def dead_criteria_tries(self) -> Optional[pulumi.Input[int]]:
        """
        The number of times the router must fail to receive a response from the radius server to mark it as dead - Range:
        `1`-`100`
        """
        return pulumi.get(self, "dead_criteria_tries")

    @dead_criteria_tries.setter
    def dead_criteria_tries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dead_criteria_tries", value)

    @property
    @pulumi.getter
    def deadtime(self) -> Optional[pulumi.Input[int]]:
        """
        Time to stop using a server that does not respond - Range: `1`-`1440`
        """
        return pulumi.get(self, "deadtime")

    @deadtime.setter
    def deadtime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deadtime", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)


@pulumi.input_type
class _RadiusServerState:
    def __init__(__self__, *,
                 attributes: Optional[pulumi.Input[Sequence[pulumi.Input['RadiusServerAttributeArgs']]]] = None,
                 dead_criteria_time: Optional[pulumi.Input[int]] = None,
                 dead_criteria_tries: Optional[pulumi.Input[int]] = None,
                 deadtime: Optional[pulumi.Input[int]] = None,
                 device: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RadiusServer resources.
        :param pulumi.Input[Sequence[pulumi.Input['RadiusServerAttributeArgs']]] attributes: Customize selected radius attributes
        :param pulumi.Input[int] dead_criteria_time: The time during which no properly formed response must be received from the RADIUS server - Range: `1`-`120`
        :param pulumi.Input[int] dead_criteria_tries: The number of times the router must fail to receive a response from the radius server to mark it as dead - Range:
               `1`-`100`
        :param pulumi.Input[int] deadtime: Time to stop using a server that does not respond - Range: `1`-`1440`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        """
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if dead_criteria_time is not None:
            pulumi.set(__self__, "dead_criteria_time", dead_criteria_time)
        if dead_criteria_tries is not None:
            pulumi.set(__self__, "dead_criteria_tries", dead_criteria_tries)
        if deadtime is not None:
            pulumi.set(__self__, "deadtime", deadtime)
        if device is not None:
            pulumi.set(__self__, "device", device)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RadiusServerAttributeArgs']]]]:
        """
        Customize selected radius attributes
        """
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RadiusServerAttributeArgs']]]]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter(name="deadCriteriaTime")
    def dead_criteria_time(self) -> Optional[pulumi.Input[int]]:
        """
        The time during which no properly formed response must be received from the RADIUS server - Range: `1`-`120`
        """
        return pulumi.get(self, "dead_criteria_time")

    @dead_criteria_time.setter
    def dead_criteria_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dead_criteria_time", value)

    @property
    @pulumi.getter(name="deadCriteriaTries")
    def dead_criteria_tries(self) -> Optional[pulumi.Input[int]]:
        """
        The number of times the router must fail to receive a response from the radius server to mark it as dead - Range:
        `1`-`100`
        """
        return pulumi.get(self, "dead_criteria_tries")

    @dead_criteria_tries.setter
    def dead_criteria_tries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dead_criteria_tries", value)

    @property
    @pulumi.getter
    def deadtime(self) -> Optional[pulumi.Input[int]]:
        """
        Time to stop using a server that does not respond - Range: `1`-`1440`
        """
        return pulumi.get(self, "deadtime")

    @deadtime.setter
    def deadtime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "deadtime", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)


class RadiusServer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attributes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RadiusServerAttributeArgs']]]]] = None,
                 dead_criteria_time: Optional[pulumi.Input[int]] = None,
                 dead_criteria_tries: Optional[pulumi.Input[int]] = None,
                 deadtime: Optional[pulumi.Input[int]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource can manage the Radius Server configuration.

        ## Import

        ```sh
         $ pulumi import iosxe:index/radiusServer:RadiusServer example "Cisco-IOS-XE-native:native/radius-server"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RadiusServerAttributeArgs']]]] attributes: Customize selected radius attributes
        :param pulumi.Input[int] dead_criteria_time: The time during which no properly formed response must be received from the RADIUS server - Range: `1`-`120`
        :param pulumi.Input[int] dead_criteria_tries: The number of times the router must fail to receive a response from the radius server to mark it as dead - Range:
               `1`-`100`
        :param pulumi.Input[int] deadtime: Time to stop using a server that does not respond - Range: `1`-`1440`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[RadiusServerArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the Radius Server configuration.

        ## Import

        ```sh
         $ pulumi import iosxe:index/radiusServer:RadiusServer example "Cisco-IOS-XE-native:native/radius-server"
        ```

        :param str resource_name: The name of the resource.
        :param RadiusServerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RadiusServerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attributes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RadiusServerAttributeArgs']]]]] = None,
                 dead_criteria_time: Optional[pulumi.Input[int]] = None,
                 dead_criteria_tries: Optional[pulumi.Input[int]] = None,
                 deadtime: Optional[pulumi.Input[int]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RadiusServerArgs.__new__(RadiusServerArgs)

            __props__.__dict__["attributes"] = attributes
            __props__.__dict__["dead_criteria_time"] = dead_criteria_time
            __props__.__dict__["dead_criteria_tries"] = dead_criteria_tries
            __props__.__dict__["deadtime"] = deadtime
            __props__.__dict__["device"] = device
        super(RadiusServer, __self__).__init__(
            'iosxe:index/radiusServer:RadiusServer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            attributes: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RadiusServerAttributeArgs']]]]] = None,
            dead_criteria_time: Optional[pulumi.Input[int]] = None,
            dead_criteria_tries: Optional[pulumi.Input[int]] = None,
            deadtime: Optional[pulumi.Input[int]] = None,
            device: Optional[pulumi.Input[str]] = None) -> 'RadiusServer':
        """
        Get an existing RadiusServer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RadiusServerAttributeArgs']]]] attributes: Customize selected radius attributes
        :param pulumi.Input[int] dead_criteria_time: The time during which no properly formed response must be received from the RADIUS server - Range: `1`-`120`
        :param pulumi.Input[int] dead_criteria_tries: The number of times the router must fail to receive a response from the radius server to mark it as dead - Range:
               `1`-`100`
        :param pulumi.Input[int] deadtime: Time to stop using a server that does not respond - Range: `1`-`1440`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RadiusServerState.__new__(_RadiusServerState)

        __props__.__dict__["attributes"] = attributes
        __props__.__dict__["dead_criteria_time"] = dead_criteria_time
        __props__.__dict__["dead_criteria_tries"] = dead_criteria_tries
        __props__.__dict__["deadtime"] = deadtime
        __props__.__dict__["device"] = device
        return RadiusServer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def attributes(self) -> pulumi.Output[Optional[Sequence['outputs.RadiusServerAttribute']]]:
        """
        Customize selected radius attributes
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="deadCriteriaTime")
    def dead_criteria_time(self) -> pulumi.Output[Optional[int]]:
        """
        The time during which no properly formed response must be received from the RADIUS server - Range: `1`-`120`
        """
        return pulumi.get(self, "dead_criteria_time")

    @property
    @pulumi.getter(name="deadCriteriaTries")
    def dead_criteria_tries(self) -> pulumi.Output[Optional[int]]:
        """
        The number of times the router must fail to receive a response from the radius server to mark it as dead - Range:
        `1`-`100`
        """
        return pulumi.get(self, "dead_criteria_tries")

    @property
    @pulumi.getter
    def deadtime(self) -> pulumi.Output[Optional[int]]:
        """
        Time to stop using a server that does not respond - Range: `1`-`1440`
        """
        return pulumi.get(self, "deadtime")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

