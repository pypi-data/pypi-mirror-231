# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CdpArgs', 'Cdp']

@pulumi.input_type
class CdpArgs:
    def __init__(__self__, *,
                 device: Optional[pulumi.Input[str]] = None,
                 filter_tlv_list: Optional[pulumi.Input[str]] = None,
                 holdtime: Optional[pulumi.Input[int]] = None,
                 run: Optional[pulumi.Input[bool]] = None,
                 timer: Optional[pulumi.Input[int]] = None,
                 tlv_lists: Optional[pulumi.Input[Sequence[pulumi.Input['CdpTlvListArgs']]]] = None):
        """
        The set of arguments for constructing a Cdp resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] filter_tlv_list: Apply tlv-list globally
        :param pulumi.Input[int] holdtime: Specify the holdtime (in sec) to be sent in packets - Range: `10`-`255`
        :param pulumi.Input[bool] run: Enable CDP
        :param pulumi.Input[int] timer: Specify the rate at which CDP packets are sent (in sec) - Range: `5`-`254`
        :param pulumi.Input[Sequence[pulumi.Input['CdpTlvListArgs']]] tlv_lists: Configure tlv-list
        """
        if device is not None:
            pulumi.set(__self__, "device", device)
        if filter_tlv_list is not None:
            pulumi.set(__self__, "filter_tlv_list", filter_tlv_list)
        if holdtime is not None:
            pulumi.set(__self__, "holdtime", holdtime)
        if run is not None:
            pulumi.set(__self__, "run", run)
        if timer is not None:
            pulumi.set(__self__, "timer", timer)
        if tlv_lists is not None:
            pulumi.set(__self__, "tlv_lists", tlv_lists)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="filterTlvList")
    def filter_tlv_list(self) -> Optional[pulumi.Input[str]]:
        """
        Apply tlv-list globally
        """
        return pulumi.get(self, "filter_tlv_list")

    @filter_tlv_list.setter
    def filter_tlv_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_tlv_list", value)

    @property
    @pulumi.getter
    def holdtime(self) -> Optional[pulumi.Input[int]]:
        """
        Specify the holdtime (in sec) to be sent in packets - Range: `10`-`255`
        """
        return pulumi.get(self, "holdtime")

    @holdtime.setter
    def holdtime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "holdtime", value)

    @property
    @pulumi.getter
    def run(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable CDP
        """
        return pulumi.get(self, "run")

    @run.setter
    def run(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run", value)

    @property
    @pulumi.getter
    def timer(self) -> Optional[pulumi.Input[int]]:
        """
        Specify the rate at which CDP packets are sent (in sec) - Range: `5`-`254`
        """
        return pulumi.get(self, "timer")

    @timer.setter
    def timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timer", value)

    @property
    @pulumi.getter(name="tlvLists")
    def tlv_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CdpTlvListArgs']]]]:
        """
        Configure tlv-list
        """
        return pulumi.get(self, "tlv_lists")

    @tlv_lists.setter
    def tlv_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CdpTlvListArgs']]]]):
        pulumi.set(self, "tlv_lists", value)


@pulumi.input_type
class _CdpState:
    def __init__(__self__, *,
                 device: Optional[pulumi.Input[str]] = None,
                 filter_tlv_list: Optional[pulumi.Input[str]] = None,
                 holdtime: Optional[pulumi.Input[int]] = None,
                 run: Optional[pulumi.Input[bool]] = None,
                 timer: Optional[pulumi.Input[int]] = None,
                 tlv_lists: Optional[pulumi.Input[Sequence[pulumi.Input['CdpTlvListArgs']]]] = None):
        """
        Input properties used for looking up and filtering Cdp resources.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] filter_tlv_list: Apply tlv-list globally
        :param pulumi.Input[int] holdtime: Specify the holdtime (in sec) to be sent in packets - Range: `10`-`255`
        :param pulumi.Input[bool] run: Enable CDP
        :param pulumi.Input[int] timer: Specify the rate at which CDP packets are sent (in sec) - Range: `5`-`254`
        :param pulumi.Input[Sequence[pulumi.Input['CdpTlvListArgs']]] tlv_lists: Configure tlv-list
        """
        if device is not None:
            pulumi.set(__self__, "device", device)
        if filter_tlv_list is not None:
            pulumi.set(__self__, "filter_tlv_list", filter_tlv_list)
        if holdtime is not None:
            pulumi.set(__self__, "holdtime", holdtime)
        if run is not None:
            pulumi.set(__self__, "run", run)
        if timer is not None:
            pulumi.set(__self__, "timer", timer)
        if tlv_lists is not None:
            pulumi.set(__self__, "tlv_lists", tlv_lists)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="filterTlvList")
    def filter_tlv_list(self) -> Optional[pulumi.Input[str]]:
        """
        Apply tlv-list globally
        """
        return pulumi.get(self, "filter_tlv_list")

    @filter_tlv_list.setter
    def filter_tlv_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_tlv_list", value)

    @property
    @pulumi.getter
    def holdtime(self) -> Optional[pulumi.Input[int]]:
        """
        Specify the holdtime (in sec) to be sent in packets - Range: `10`-`255`
        """
        return pulumi.get(self, "holdtime")

    @holdtime.setter
    def holdtime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "holdtime", value)

    @property
    @pulumi.getter
    def run(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable CDP
        """
        return pulumi.get(self, "run")

    @run.setter
    def run(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run", value)

    @property
    @pulumi.getter
    def timer(self) -> Optional[pulumi.Input[int]]:
        """
        Specify the rate at which CDP packets are sent (in sec) - Range: `5`-`254`
        """
        return pulumi.get(self, "timer")

    @timer.setter
    def timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timer", value)

    @property
    @pulumi.getter(name="tlvLists")
    def tlv_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CdpTlvListArgs']]]]:
        """
        Configure tlv-list
        """
        return pulumi.get(self, "tlv_lists")

    @tlv_lists.setter
    def tlv_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CdpTlvListArgs']]]]):
        pulumi.set(self, "tlv_lists", value)


class Cdp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 filter_tlv_list: Optional[pulumi.Input[str]] = None,
                 holdtime: Optional[pulumi.Input[int]] = None,
                 run: Optional[pulumi.Input[bool]] = None,
                 timer: Optional[pulumi.Input[int]] = None,
                 tlv_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CdpTlvListArgs']]]]] = None,
                 __props__=None):
        """
        This resource can manage the CDP configuration.

        ## Import

        ```sh
         $ pulumi import iosxe:index/cdp:Cdp example "Cisco-IOS-XE-native:native/cdp"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] filter_tlv_list: Apply tlv-list globally
        :param pulumi.Input[int] holdtime: Specify the holdtime (in sec) to be sent in packets - Range: `10`-`255`
        :param pulumi.Input[bool] run: Enable CDP
        :param pulumi.Input[int] timer: Specify the rate at which CDP packets are sent (in sec) - Range: `5`-`254`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CdpTlvListArgs']]]] tlv_lists: Configure tlv-list
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CdpArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the CDP configuration.

        ## Import

        ```sh
         $ pulumi import iosxe:index/cdp:Cdp example "Cisco-IOS-XE-native:native/cdp"
        ```

        :param str resource_name: The name of the resource.
        :param CdpArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CdpArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 filter_tlv_list: Optional[pulumi.Input[str]] = None,
                 holdtime: Optional[pulumi.Input[int]] = None,
                 run: Optional[pulumi.Input[bool]] = None,
                 timer: Optional[pulumi.Input[int]] = None,
                 tlv_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CdpTlvListArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CdpArgs.__new__(CdpArgs)

            __props__.__dict__["device"] = device
            __props__.__dict__["filter_tlv_list"] = filter_tlv_list
            __props__.__dict__["holdtime"] = holdtime
            __props__.__dict__["run"] = run
            __props__.__dict__["timer"] = timer
            __props__.__dict__["tlv_lists"] = tlv_lists
        super(Cdp, __self__).__init__(
            'iosxe:index/cdp:Cdp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            device: Optional[pulumi.Input[str]] = None,
            filter_tlv_list: Optional[pulumi.Input[str]] = None,
            holdtime: Optional[pulumi.Input[int]] = None,
            run: Optional[pulumi.Input[bool]] = None,
            timer: Optional[pulumi.Input[int]] = None,
            tlv_lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CdpTlvListArgs']]]]] = None) -> 'Cdp':
        """
        Get an existing Cdp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] filter_tlv_list: Apply tlv-list globally
        :param pulumi.Input[int] holdtime: Specify the holdtime (in sec) to be sent in packets - Range: `10`-`255`
        :param pulumi.Input[bool] run: Enable CDP
        :param pulumi.Input[int] timer: Specify the rate at which CDP packets are sent (in sec) - Range: `5`-`254`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CdpTlvListArgs']]]] tlv_lists: Configure tlv-list
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CdpState.__new__(_CdpState)

        __props__.__dict__["device"] = device
        __props__.__dict__["filter_tlv_list"] = filter_tlv_list
        __props__.__dict__["holdtime"] = holdtime
        __props__.__dict__["run"] = run
        __props__.__dict__["timer"] = timer
        __props__.__dict__["tlv_lists"] = tlv_lists
        return Cdp(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="filterTlvList")
    def filter_tlv_list(self) -> pulumi.Output[Optional[str]]:
        """
        Apply tlv-list globally
        """
        return pulumi.get(self, "filter_tlv_list")

    @property
    @pulumi.getter
    def holdtime(self) -> pulumi.Output[Optional[int]]:
        """
        Specify the holdtime (in sec) to be sent in packets - Range: `10`-`255`
        """
        return pulumi.get(self, "holdtime")

    @property
    @pulumi.getter
    def run(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable CDP
        """
        return pulumi.get(self, "run")

    @property
    @pulumi.getter
    def timer(self) -> pulumi.Output[Optional[int]]:
        """
        Specify the rate at which CDP packets are sent (in sec) - Range: `5`-`254`
        """
        return pulumi.get(self, "timer")

    @property
    @pulumi.getter(name="tlvLists")
    def tlv_lists(self) -> pulumi.Output[Optional[Sequence['outputs.CdpTlvList']]]:
        """
        Configure tlv-list
        """
        return pulumi.get(self, "tlv_lists")

