# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetInterfacePimResult',
    'AwaitableGetInterfacePimResult',
    'get_interface_pim',
    'get_interface_pim_output',
]

@pulumi.output_type
class GetInterfacePimResult:
    """
    A collection of values returned by getInterfacePim.
    """
    def __init__(__self__, bfd=None, border=None, bsr_border=None, dense_mode=None, device=None, dr_priority=None, id=None, name=None, passive=None, sparse_dense_mode=None, sparse_mode=None, type=None):
        if bfd and not isinstance(bfd, bool):
            raise TypeError("Expected argument 'bfd' to be a bool")
        pulumi.set(__self__, "bfd", bfd)
        if border and not isinstance(border, bool):
            raise TypeError("Expected argument 'border' to be a bool")
        pulumi.set(__self__, "border", border)
        if bsr_border and not isinstance(bsr_border, bool):
            raise TypeError("Expected argument 'bsr_border' to be a bool")
        pulumi.set(__self__, "bsr_border", bsr_border)
        if dense_mode and not isinstance(dense_mode, bool):
            raise TypeError("Expected argument 'dense_mode' to be a bool")
        pulumi.set(__self__, "dense_mode", dense_mode)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if dr_priority and not isinstance(dr_priority, int):
            raise TypeError("Expected argument 'dr_priority' to be a int")
        pulumi.set(__self__, "dr_priority", dr_priority)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if passive and not isinstance(passive, bool):
            raise TypeError("Expected argument 'passive' to be a bool")
        pulumi.set(__self__, "passive", passive)
        if sparse_dense_mode and not isinstance(sparse_dense_mode, bool):
            raise TypeError("Expected argument 'sparse_dense_mode' to be a bool")
        pulumi.set(__self__, "sparse_dense_mode", sparse_dense_mode)
        if sparse_mode and not isinstance(sparse_mode, bool):
            raise TypeError("Expected argument 'sparse_mode' to be a bool")
        pulumi.set(__self__, "sparse_mode", sparse_mode)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def bfd(self) -> bool:
        """
        Configure BFD
        """
        return pulumi.get(self, "bfd")

    @property
    @pulumi.getter
    def border(self) -> bool:
        """
        Border of PIM domain
        """
        return pulumi.get(self, "border")

    @property
    @pulumi.getter(name="bsrBorder")
    def bsr_border(self) -> bool:
        """
        Border of PIM domain
        """
        return pulumi.get(self, "bsr_border")

    @property
    @pulumi.getter(name="denseMode")
    def dense_mode(self) -> bool:
        """
        Enable PIM dense-mode operation
        """
        return pulumi.get(self, "dense_mode")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="drPriority")
    def dr_priority(self) -> int:
        """
        PIM router DR priority
        """
        return pulumi.get(self, "dr_priority")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The path of the retrieved object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def passive(self) -> bool:
        """
        Enable PIM passive interface operation
        """
        return pulumi.get(self, "passive")

    @property
    @pulumi.getter(name="sparseDenseMode")
    def sparse_dense_mode(self) -> bool:
        """
        Enable PIM sparse-dense-mode operation
        """
        return pulumi.get(self, "sparse_dense_mode")

    @property
    @pulumi.getter(name="sparseMode")
    def sparse_mode(self) -> bool:
        """
        Enable PIM sparse-mode operation
        """
        return pulumi.get(self, "sparse_mode")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Interface type
        """
        return pulumi.get(self, "type")


class AwaitableGetInterfacePimResult(GetInterfacePimResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInterfacePimResult(
            bfd=self.bfd,
            border=self.border,
            bsr_border=self.bsr_border,
            dense_mode=self.dense_mode,
            device=self.device,
            dr_priority=self.dr_priority,
            id=self.id,
            name=self.name,
            passive=self.passive,
            sparse_dense_mode=self.sparse_dense_mode,
            sparse_mode=self.sparse_mode,
            type=self.type)


def get_interface_pim(device: Optional[str] = None,
                      name: Optional[str] = None,
                      type: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInterfacePimResult:
    """
    This data source can read the Interface PIM configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.get_interface_pim(name="100",
        type="Loopback")
    ```


    :param str device: A device name from the provider configuration.
    :param str type: Interface type
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['name'] = name
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:index/getInterfacePim:getInterfacePim', __args__, opts=opts, typ=GetInterfacePimResult).value

    return AwaitableGetInterfacePimResult(
        bfd=pulumi.get(__ret__, 'bfd'),
        border=pulumi.get(__ret__, 'border'),
        bsr_border=pulumi.get(__ret__, 'bsr_border'),
        dense_mode=pulumi.get(__ret__, 'dense_mode'),
        device=pulumi.get(__ret__, 'device'),
        dr_priority=pulumi.get(__ret__, 'dr_priority'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        passive=pulumi.get(__ret__, 'passive'),
        sparse_dense_mode=pulumi.get(__ret__, 'sparse_dense_mode'),
        sparse_mode=pulumi.get(__ret__, 'sparse_mode'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_interface_pim)
def get_interface_pim_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                             name: Optional[pulumi.Input[str]] = None,
                             type: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInterfacePimResult]:
    """
    This data source can read the Interface PIM configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.get_interface_pim(name="100",
        type="Loopback")
    ```


    :param str device: A device name from the provider configuration.
    :param str type: Interface type
    """
    ...
