# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['BgpNeighborArgs', 'BgpNeighbor']

@pulumi.input_type
class BgpNeighborArgs:
    def __init__(__self__, *,
                 asn: pulumi.Input[str],
                 ip: pulumi.Input[str],
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 disable_connected_check: Optional[pulumi.Input[bool]] = None,
                 ebgp_multihop: Optional[pulumi.Input[bool]] = None,
                 ebgp_multihop_max_hop: Optional[pulumi.Input[int]] = None,
                 fall_over_bfd_check_control_plane_failure: Optional[pulumi.Input[bool]] = None,
                 fall_over_bfd_multi_hop: Optional[pulumi.Input[bool]] = None,
                 fall_over_bfd_single_hop: Optional[pulumi.Input[bool]] = None,
                 fall_over_bfd_strict_mode: Optional[pulumi.Input[bool]] = None,
                 fall_over_default_enable: Optional[pulumi.Input[bool]] = None,
                 fall_over_default_route_map: Optional[pulumi.Input[str]] = None,
                 fall_over_maximum_metric_route_map: Optional[pulumi.Input[str]] = None,
                 local_as: Optional[pulumi.Input[str]] = None,
                 local_as_dual_as: Optional[pulumi.Input[bool]] = None,
                 local_as_no_prepend: Optional[pulumi.Input[bool]] = None,
                 local_as_replace_as: Optional[pulumi.Input[bool]] = None,
                 log_neighbor_changes: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_type: Optional[pulumi.Input[int]] = None,
                 remote_as: Optional[pulumi.Input[str]] = None,
                 shutdown: Optional[pulumi.Input[bool]] = None,
                 timers_holdtime: Optional[pulumi.Input[int]] = None,
                 timers_keepalive_interval: Optional[pulumi.Input[int]] = None,
                 timers_minimum_neighbor_hold: Optional[pulumi.Input[int]] = None,
                 ttl_security_hops: Optional[pulumi.Input[int]] = None,
                 update_source_loopback: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a BgpNeighbor resource.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] description: Neighbor specific description
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] disable_connected_check: one-hop away EBGP peer using loopback address
        :param pulumi.Input[bool] ebgp_multihop: Allow EBGP neighbors not on directly connected networks. For single-hop ebgp peers, delete ebgp-multihop directly.
        :param pulumi.Input[int] ebgp_multihop_max_hop: - Range: `2`-`255`
        :param pulumi.Input[bool] fall_over_bfd_check_control_plane_failure: Retrieve control plane dependent failure info from BFD for BGP GR/NSR operation
        :param pulumi.Input[bool] fall_over_bfd_multi_hop: Force BFD multi-hop to detect failure
        :param pulumi.Input[bool] fall_over_bfd_single_hop: Force BFD single-hop to detect failure
        :param pulumi.Input[bool] fall_over_bfd_strict_mode: Enable BFD strict-mode
        :param pulumi.Input[bool] local_as_dual_as: Accept either real AS or local AS from the ebgp peer
        :param pulumi.Input[bool] local_as_no_prepend: Do not prepend local-as to updates from ebgp peers
        :param pulumi.Input[bool] local_as_replace_as: Replace real AS with local AS in the EBGP updates
        :param pulumi.Input[bool] log_neighbor_changes: Log neighbor up/down and reset reason
        :param pulumi.Input[int] password_type: Encryption type (0 to disable encryption, 7 for proprietary) - Range: `0`-`7`
        :param pulumi.Input[str] remote_as: Specify a BGP peer-group remote-as
        :param pulumi.Input[bool] shutdown: Administratively shut down this neighbor
        :param pulumi.Input[int] timers_holdtime: - Range: `0`-`65535`
        :param pulumi.Input[int] timers_keepalive_interval: - Range: `0`-`65535`
        :param pulumi.Input[int] timers_minimum_neighbor_hold: - Range: `0`-`65535`
        :param pulumi.Input[int] ttl_security_hops: IP hops - Range: `1`-`254`
        :param pulumi.Input[str] update_source_loopback: Loopback interface
        :param pulumi.Input[int] version: Set the BGP version to match a neighbor - Range: `4`-`4`
        """
        pulumi.set(__self__, "asn", asn)
        pulumi.set(__self__, "ip", ip)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if disable_connected_check is not None:
            pulumi.set(__self__, "disable_connected_check", disable_connected_check)
        if ebgp_multihop is not None:
            pulumi.set(__self__, "ebgp_multihop", ebgp_multihop)
        if ebgp_multihop_max_hop is not None:
            pulumi.set(__self__, "ebgp_multihop_max_hop", ebgp_multihop_max_hop)
        if fall_over_bfd_check_control_plane_failure is not None:
            pulumi.set(__self__, "fall_over_bfd_check_control_plane_failure", fall_over_bfd_check_control_plane_failure)
        if fall_over_bfd_multi_hop is not None:
            pulumi.set(__self__, "fall_over_bfd_multi_hop", fall_over_bfd_multi_hop)
        if fall_over_bfd_single_hop is not None:
            pulumi.set(__self__, "fall_over_bfd_single_hop", fall_over_bfd_single_hop)
        if fall_over_bfd_strict_mode is not None:
            pulumi.set(__self__, "fall_over_bfd_strict_mode", fall_over_bfd_strict_mode)
        if fall_over_default_enable is not None:
            pulumi.set(__self__, "fall_over_default_enable", fall_over_default_enable)
        if fall_over_default_route_map is not None:
            pulumi.set(__self__, "fall_over_default_route_map", fall_over_default_route_map)
        if fall_over_maximum_metric_route_map is not None:
            pulumi.set(__self__, "fall_over_maximum_metric_route_map", fall_over_maximum_metric_route_map)
        if local_as is not None:
            pulumi.set(__self__, "local_as", local_as)
        if local_as_dual_as is not None:
            pulumi.set(__self__, "local_as_dual_as", local_as_dual_as)
        if local_as_no_prepend is not None:
            pulumi.set(__self__, "local_as_no_prepend", local_as_no_prepend)
        if local_as_replace_as is not None:
            pulumi.set(__self__, "local_as_replace_as", local_as_replace_as)
        if log_neighbor_changes is not None:
            pulumi.set(__self__, "log_neighbor_changes", log_neighbor_changes)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_type is not None:
            pulumi.set(__self__, "password_type", password_type)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if timers_holdtime is not None:
            pulumi.set(__self__, "timers_holdtime", timers_holdtime)
        if timers_keepalive_interval is not None:
            pulumi.set(__self__, "timers_keepalive_interval", timers_keepalive_interval)
        if timers_minimum_neighbor_hold is not None:
            pulumi.set(__self__, "timers_minimum_neighbor_hold", timers_minimum_neighbor_hold)
        if ttl_security_hops is not None:
            pulumi.set(__self__, "ttl_security_hops", ttl_security_hops)
        if update_source_loopback is not None:
            pulumi.set(__self__, "update_source_loopback", update_source_loopback)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def asn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "asn")

    @asn.setter
    def asn(self, value: pulumi.Input[str]):
        pulumi.set(self, "asn", value)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Neighbor specific description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="disableConnectedCheck")
    def disable_connected_check(self) -> Optional[pulumi.Input[bool]]:
        """
        one-hop away EBGP peer using loopback address
        """
        return pulumi.get(self, "disable_connected_check")

    @disable_connected_check.setter
    def disable_connected_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_connected_check", value)

    @property
    @pulumi.getter(name="ebgpMultihop")
    def ebgp_multihop(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow EBGP neighbors not on directly connected networks. For single-hop ebgp peers, delete ebgp-multihop directly.
        """
        return pulumi.get(self, "ebgp_multihop")

    @ebgp_multihop.setter
    def ebgp_multihop(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ebgp_multihop", value)

    @property
    @pulumi.getter(name="ebgpMultihopMaxHop")
    def ebgp_multihop_max_hop(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `2`-`255`
        """
        return pulumi.get(self, "ebgp_multihop_max_hop")

    @ebgp_multihop_max_hop.setter
    def ebgp_multihop_max_hop(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ebgp_multihop_max_hop", value)

    @property
    @pulumi.getter(name="fallOverBfdCheckControlPlaneFailure")
    def fall_over_bfd_check_control_plane_failure(self) -> Optional[pulumi.Input[bool]]:
        """
        Retrieve control plane dependent failure info from BFD for BGP GR/NSR operation
        """
        return pulumi.get(self, "fall_over_bfd_check_control_plane_failure")

    @fall_over_bfd_check_control_plane_failure.setter
    def fall_over_bfd_check_control_plane_failure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fall_over_bfd_check_control_plane_failure", value)

    @property
    @pulumi.getter(name="fallOverBfdMultiHop")
    def fall_over_bfd_multi_hop(self) -> Optional[pulumi.Input[bool]]:
        """
        Force BFD multi-hop to detect failure
        """
        return pulumi.get(self, "fall_over_bfd_multi_hop")

    @fall_over_bfd_multi_hop.setter
    def fall_over_bfd_multi_hop(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fall_over_bfd_multi_hop", value)

    @property
    @pulumi.getter(name="fallOverBfdSingleHop")
    def fall_over_bfd_single_hop(self) -> Optional[pulumi.Input[bool]]:
        """
        Force BFD single-hop to detect failure
        """
        return pulumi.get(self, "fall_over_bfd_single_hop")

    @fall_over_bfd_single_hop.setter
    def fall_over_bfd_single_hop(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fall_over_bfd_single_hop", value)

    @property
    @pulumi.getter(name="fallOverBfdStrictMode")
    def fall_over_bfd_strict_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable BFD strict-mode
        """
        return pulumi.get(self, "fall_over_bfd_strict_mode")

    @fall_over_bfd_strict_mode.setter
    def fall_over_bfd_strict_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fall_over_bfd_strict_mode", value)

    @property
    @pulumi.getter(name="fallOverDefaultEnable")
    def fall_over_default_enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fall_over_default_enable")

    @fall_over_default_enable.setter
    def fall_over_default_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fall_over_default_enable", value)

    @property
    @pulumi.getter(name="fallOverDefaultRouteMap")
    def fall_over_default_route_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fall_over_default_route_map")

    @fall_over_default_route_map.setter
    def fall_over_default_route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fall_over_default_route_map", value)

    @property
    @pulumi.getter(name="fallOverMaximumMetricRouteMap")
    def fall_over_maximum_metric_route_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fall_over_maximum_metric_route_map")

    @fall_over_maximum_metric_route_map.setter
    def fall_over_maximum_metric_route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fall_over_maximum_metric_route_map", value)

    @property
    @pulumi.getter(name="localAs")
    def local_as(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_as")

    @local_as.setter
    def local_as(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_as", value)

    @property
    @pulumi.getter(name="localAsDualAs")
    def local_as_dual_as(self) -> Optional[pulumi.Input[bool]]:
        """
        Accept either real AS or local AS from the ebgp peer
        """
        return pulumi.get(self, "local_as_dual_as")

    @local_as_dual_as.setter
    def local_as_dual_as(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "local_as_dual_as", value)

    @property
    @pulumi.getter(name="localAsNoPrepend")
    def local_as_no_prepend(self) -> Optional[pulumi.Input[bool]]:
        """
        Do not prepend local-as to updates from ebgp peers
        """
        return pulumi.get(self, "local_as_no_prepend")

    @local_as_no_prepend.setter
    def local_as_no_prepend(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "local_as_no_prepend", value)

    @property
    @pulumi.getter(name="localAsReplaceAs")
    def local_as_replace_as(self) -> Optional[pulumi.Input[bool]]:
        """
        Replace real AS with local AS in the EBGP updates
        """
        return pulumi.get(self, "local_as_replace_as")

    @local_as_replace_as.setter
    def local_as_replace_as(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "local_as_replace_as", value)

    @property
    @pulumi.getter(name="logNeighborChanges")
    def log_neighbor_changes(self) -> Optional[pulumi.Input[bool]]:
        """
        Log neighbor up/down and reset reason
        """
        return pulumi.get(self, "log_neighbor_changes")

    @log_neighbor_changes.setter
    def log_neighbor_changes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_neighbor_changes", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="passwordType")
    def password_type(self) -> Optional[pulumi.Input[int]]:
        """
        Encryption type (0 to disable encryption, 7 for proprietary) - Range: `0`-`7`
        """
        return pulumi.get(self, "password_type")

    @password_type.setter
    def password_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "password_type", value)

    @property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a BGP peer-group remote-as
        """
        return pulumi.get(self, "remote_as")

    @remote_as.setter
    def remote_as(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_as", value)

    @property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[bool]]:
        """
        Administratively shut down this neighbor
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "shutdown", value)

    @property
    @pulumi.getter(name="timersHoldtime")
    def timers_holdtime(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `0`-`65535`
        """
        return pulumi.get(self, "timers_holdtime")

    @timers_holdtime.setter
    def timers_holdtime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timers_holdtime", value)

    @property
    @pulumi.getter(name="timersKeepaliveInterval")
    def timers_keepalive_interval(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `0`-`65535`
        """
        return pulumi.get(self, "timers_keepalive_interval")

    @timers_keepalive_interval.setter
    def timers_keepalive_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timers_keepalive_interval", value)

    @property
    @pulumi.getter(name="timersMinimumNeighborHold")
    def timers_minimum_neighbor_hold(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `0`-`65535`
        """
        return pulumi.get(self, "timers_minimum_neighbor_hold")

    @timers_minimum_neighbor_hold.setter
    def timers_minimum_neighbor_hold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timers_minimum_neighbor_hold", value)

    @property
    @pulumi.getter(name="ttlSecurityHops")
    def ttl_security_hops(self) -> Optional[pulumi.Input[int]]:
        """
        IP hops - Range: `1`-`254`
        """
        return pulumi.get(self, "ttl_security_hops")

    @ttl_security_hops.setter
    def ttl_security_hops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl_security_hops", value)

    @property
    @pulumi.getter(name="updateSourceLoopback")
    def update_source_loopback(self) -> Optional[pulumi.Input[str]]:
        """
        Loopback interface
        """
        return pulumi.get(self, "update_source_loopback")

    @update_source_loopback.setter
    def update_source_loopback(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_source_loopback", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        Set the BGP version to match a neighbor - Range: `4`-`4`
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class _BgpNeighborState:
    def __init__(__self__, *,
                 asn: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 disable_connected_check: Optional[pulumi.Input[bool]] = None,
                 ebgp_multihop: Optional[pulumi.Input[bool]] = None,
                 ebgp_multihop_max_hop: Optional[pulumi.Input[int]] = None,
                 fall_over_bfd_check_control_plane_failure: Optional[pulumi.Input[bool]] = None,
                 fall_over_bfd_multi_hop: Optional[pulumi.Input[bool]] = None,
                 fall_over_bfd_single_hop: Optional[pulumi.Input[bool]] = None,
                 fall_over_bfd_strict_mode: Optional[pulumi.Input[bool]] = None,
                 fall_over_default_enable: Optional[pulumi.Input[bool]] = None,
                 fall_over_default_route_map: Optional[pulumi.Input[str]] = None,
                 fall_over_maximum_metric_route_map: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 local_as: Optional[pulumi.Input[str]] = None,
                 local_as_dual_as: Optional[pulumi.Input[bool]] = None,
                 local_as_no_prepend: Optional[pulumi.Input[bool]] = None,
                 local_as_replace_as: Optional[pulumi.Input[bool]] = None,
                 log_neighbor_changes: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_type: Optional[pulumi.Input[int]] = None,
                 remote_as: Optional[pulumi.Input[str]] = None,
                 shutdown: Optional[pulumi.Input[bool]] = None,
                 timers_holdtime: Optional[pulumi.Input[int]] = None,
                 timers_keepalive_interval: Optional[pulumi.Input[int]] = None,
                 timers_minimum_neighbor_hold: Optional[pulumi.Input[int]] = None,
                 ttl_security_hops: Optional[pulumi.Input[int]] = None,
                 update_source_loopback: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering BgpNeighbor resources.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] description: Neighbor specific description
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] disable_connected_check: one-hop away EBGP peer using loopback address
        :param pulumi.Input[bool] ebgp_multihop: Allow EBGP neighbors not on directly connected networks. For single-hop ebgp peers, delete ebgp-multihop directly.
        :param pulumi.Input[int] ebgp_multihop_max_hop: - Range: `2`-`255`
        :param pulumi.Input[bool] fall_over_bfd_check_control_plane_failure: Retrieve control plane dependent failure info from BFD for BGP GR/NSR operation
        :param pulumi.Input[bool] fall_over_bfd_multi_hop: Force BFD multi-hop to detect failure
        :param pulumi.Input[bool] fall_over_bfd_single_hop: Force BFD single-hop to detect failure
        :param pulumi.Input[bool] fall_over_bfd_strict_mode: Enable BFD strict-mode
        :param pulumi.Input[bool] local_as_dual_as: Accept either real AS or local AS from the ebgp peer
        :param pulumi.Input[bool] local_as_no_prepend: Do not prepend local-as to updates from ebgp peers
        :param pulumi.Input[bool] local_as_replace_as: Replace real AS with local AS in the EBGP updates
        :param pulumi.Input[bool] log_neighbor_changes: Log neighbor up/down and reset reason
        :param pulumi.Input[int] password_type: Encryption type (0 to disable encryption, 7 for proprietary) - Range: `0`-`7`
        :param pulumi.Input[str] remote_as: Specify a BGP peer-group remote-as
        :param pulumi.Input[bool] shutdown: Administratively shut down this neighbor
        :param pulumi.Input[int] timers_holdtime: - Range: `0`-`65535`
        :param pulumi.Input[int] timers_keepalive_interval: - Range: `0`-`65535`
        :param pulumi.Input[int] timers_minimum_neighbor_hold: - Range: `0`-`65535`
        :param pulumi.Input[int] ttl_security_hops: IP hops - Range: `1`-`254`
        :param pulumi.Input[str] update_source_loopback: Loopback interface
        :param pulumi.Input[int] version: Set the BGP version to match a neighbor - Range: `4`-`4`
        """
        if asn is not None:
            pulumi.set(__self__, "asn", asn)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if disable_connected_check is not None:
            pulumi.set(__self__, "disable_connected_check", disable_connected_check)
        if ebgp_multihop is not None:
            pulumi.set(__self__, "ebgp_multihop", ebgp_multihop)
        if ebgp_multihop_max_hop is not None:
            pulumi.set(__self__, "ebgp_multihop_max_hop", ebgp_multihop_max_hop)
        if fall_over_bfd_check_control_plane_failure is not None:
            pulumi.set(__self__, "fall_over_bfd_check_control_plane_failure", fall_over_bfd_check_control_plane_failure)
        if fall_over_bfd_multi_hop is not None:
            pulumi.set(__self__, "fall_over_bfd_multi_hop", fall_over_bfd_multi_hop)
        if fall_over_bfd_single_hop is not None:
            pulumi.set(__self__, "fall_over_bfd_single_hop", fall_over_bfd_single_hop)
        if fall_over_bfd_strict_mode is not None:
            pulumi.set(__self__, "fall_over_bfd_strict_mode", fall_over_bfd_strict_mode)
        if fall_over_default_enable is not None:
            pulumi.set(__self__, "fall_over_default_enable", fall_over_default_enable)
        if fall_over_default_route_map is not None:
            pulumi.set(__self__, "fall_over_default_route_map", fall_over_default_route_map)
        if fall_over_maximum_metric_route_map is not None:
            pulumi.set(__self__, "fall_over_maximum_metric_route_map", fall_over_maximum_metric_route_map)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if local_as is not None:
            pulumi.set(__self__, "local_as", local_as)
        if local_as_dual_as is not None:
            pulumi.set(__self__, "local_as_dual_as", local_as_dual_as)
        if local_as_no_prepend is not None:
            pulumi.set(__self__, "local_as_no_prepend", local_as_no_prepend)
        if local_as_replace_as is not None:
            pulumi.set(__self__, "local_as_replace_as", local_as_replace_as)
        if log_neighbor_changes is not None:
            pulumi.set(__self__, "log_neighbor_changes", log_neighbor_changes)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_type is not None:
            pulumi.set(__self__, "password_type", password_type)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if timers_holdtime is not None:
            pulumi.set(__self__, "timers_holdtime", timers_holdtime)
        if timers_keepalive_interval is not None:
            pulumi.set(__self__, "timers_keepalive_interval", timers_keepalive_interval)
        if timers_minimum_neighbor_hold is not None:
            pulumi.set(__self__, "timers_minimum_neighbor_hold", timers_minimum_neighbor_hold)
        if ttl_security_hops is not None:
            pulumi.set(__self__, "ttl_security_hops", ttl_security_hops)
        if update_source_loopback is not None:
            pulumi.set(__self__, "update_source_loopback", update_source_loopback)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def asn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "asn")

    @asn.setter
    def asn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asn", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Neighbor specific description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="disableConnectedCheck")
    def disable_connected_check(self) -> Optional[pulumi.Input[bool]]:
        """
        one-hop away EBGP peer using loopback address
        """
        return pulumi.get(self, "disable_connected_check")

    @disable_connected_check.setter
    def disable_connected_check(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_connected_check", value)

    @property
    @pulumi.getter(name="ebgpMultihop")
    def ebgp_multihop(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow EBGP neighbors not on directly connected networks. For single-hop ebgp peers, delete ebgp-multihop directly.
        """
        return pulumi.get(self, "ebgp_multihop")

    @ebgp_multihop.setter
    def ebgp_multihop(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ebgp_multihop", value)

    @property
    @pulumi.getter(name="ebgpMultihopMaxHop")
    def ebgp_multihop_max_hop(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `2`-`255`
        """
        return pulumi.get(self, "ebgp_multihop_max_hop")

    @ebgp_multihop_max_hop.setter
    def ebgp_multihop_max_hop(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ebgp_multihop_max_hop", value)

    @property
    @pulumi.getter(name="fallOverBfdCheckControlPlaneFailure")
    def fall_over_bfd_check_control_plane_failure(self) -> Optional[pulumi.Input[bool]]:
        """
        Retrieve control plane dependent failure info from BFD for BGP GR/NSR operation
        """
        return pulumi.get(self, "fall_over_bfd_check_control_plane_failure")

    @fall_over_bfd_check_control_plane_failure.setter
    def fall_over_bfd_check_control_plane_failure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fall_over_bfd_check_control_plane_failure", value)

    @property
    @pulumi.getter(name="fallOverBfdMultiHop")
    def fall_over_bfd_multi_hop(self) -> Optional[pulumi.Input[bool]]:
        """
        Force BFD multi-hop to detect failure
        """
        return pulumi.get(self, "fall_over_bfd_multi_hop")

    @fall_over_bfd_multi_hop.setter
    def fall_over_bfd_multi_hop(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fall_over_bfd_multi_hop", value)

    @property
    @pulumi.getter(name="fallOverBfdSingleHop")
    def fall_over_bfd_single_hop(self) -> Optional[pulumi.Input[bool]]:
        """
        Force BFD single-hop to detect failure
        """
        return pulumi.get(self, "fall_over_bfd_single_hop")

    @fall_over_bfd_single_hop.setter
    def fall_over_bfd_single_hop(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fall_over_bfd_single_hop", value)

    @property
    @pulumi.getter(name="fallOverBfdStrictMode")
    def fall_over_bfd_strict_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable BFD strict-mode
        """
        return pulumi.get(self, "fall_over_bfd_strict_mode")

    @fall_over_bfd_strict_mode.setter
    def fall_over_bfd_strict_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fall_over_bfd_strict_mode", value)

    @property
    @pulumi.getter(name="fallOverDefaultEnable")
    def fall_over_default_enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fall_over_default_enable")

    @fall_over_default_enable.setter
    def fall_over_default_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fall_over_default_enable", value)

    @property
    @pulumi.getter(name="fallOverDefaultRouteMap")
    def fall_over_default_route_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fall_over_default_route_map")

    @fall_over_default_route_map.setter
    def fall_over_default_route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fall_over_default_route_map", value)

    @property
    @pulumi.getter(name="fallOverMaximumMetricRouteMap")
    def fall_over_maximum_metric_route_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fall_over_maximum_metric_route_map")

    @fall_over_maximum_metric_route_map.setter
    def fall_over_maximum_metric_route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fall_over_maximum_metric_route_map", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="localAs")
    def local_as(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "local_as")

    @local_as.setter
    def local_as(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_as", value)

    @property
    @pulumi.getter(name="localAsDualAs")
    def local_as_dual_as(self) -> Optional[pulumi.Input[bool]]:
        """
        Accept either real AS or local AS from the ebgp peer
        """
        return pulumi.get(self, "local_as_dual_as")

    @local_as_dual_as.setter
    def local_as_dual_as(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "local_as_dual_as", value)

    @property
    @pulumi.getter(name="localAsNoPrepend")
    def local_as_no_prepend(self) -> Optional[pulumi.Input[bool]]:
        """
        Do not prepend local-as to updates from ebgp peers
        """
        return pulumi.get(self, "local_as_no_prepend")

    @local_as_no_prepend.setter
    def local_as_no_prepend(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "local_as_no_prepend", value)

    @property
    @pulumi.getter(name="localAsReplaceAs")
    def local_as_replace_as(self) -> Optional[pulumi.Input[bool]]:
        """
        Replace real AS with local AS in the EBGP updates
        """
        return pulumi.get(self, "local_as_replace_as")

    @local_as_replace_as.setter
    def local_as_replace_as(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "local_as_replace_as", value)

    @property
    @pulumi.getter(name="logNeighborChanges")
    def log_neighbor_changes(self) -> Optional[pulumi.Input[bool]]:
        """
        Log neighbor up/down and reset reason
        """
        return pulumi.get(self, "log_neighbor_changes")

    @log_neighbor_changes.setter
    def log_neighbor_changes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_neighbor_changes", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="passwordType")
    def password_type(self) -> Optional[pulumi.Input[int]]:
        """
        Encryption type (0 to disable encryption, 7 for proprietary) - Range: `0`-`7`
        """
        return pulumi.get(self, "password_type")

    @password_type.setter
    def password_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "password_type", value)

    @property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a BGP peer-group remote-as
        """
        return pulumi.get(self, "remote_as")

    @remote_as.setter
    def remote_as(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remote_as", value)

    @property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[bool]]:
        """
        Administratively shut down this neighbor
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "shutdown", value)

    @property
    @pulumi.getter(name="timersHoldtime")
    def timers_holdtime(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `0`-`65535`
        """
        return pulumi.get(self, "timers_holdtime")

    @timers_holdtime.setter
    def timers_holdtime(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timers_holdtime", value)

    @property
    @pulumi.getter(name="timersKeepaliveInterval")
    def timers_keepalive_interval(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `0`-`65535`
        """
        return pulumi.get(self, "timers_keepalive_interval")

    @timers_keepalive_interval.setter
    def timers_keepalive_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timers_keepalive_interval", value)

    @property
    @pulumi.getter(name="timersMinimumNeighborHold")
    def timers_minimum_neighbor_hold(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `0`-`65535`
        """
        return pulumi.get(self, "timers_minimum_neighbor_hold")

    @timers_minimum_neighbor_hold.setter
    def timers_minimum_neighbor_hold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timers_minimum_neighbor_hold", value)

    @property
    @pulumi.getter(name="ttlSecurityHops")
    def ttl_security_hops(self) -> Optional[pulumi.Input[int]]:
        """
        IP hops - Range: `1`-`254`
        """
        return pulumi.get(self, "ttl_security_hops")

    @ttl_security_hops.setter
    def ttl_security_hops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ttl_security_hops", value)

    @property
    @pulumi.getter(name="updateSourceLoopback")
    def update_source_loopback(self) -> Optional[pulumi.Input[str]]:
        """
        Loopback interface
        """
        return pulumi.get(self, "update_source_loopback")

    @update_source_loopback.setter
    def update_source_loopback(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_source_loopback", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        Set the BGP version to match a neighbor - Range: `4`-`4`
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


class BgpNeighbor(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asn: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 disable_connected_check: Optional[pulumi.Input[bool]] = None,
                 ebgp_multihop: Optional[pulumi.Input[bool]] = None,
                 ebgp_multihop_max_hop: Optional[pulumi.Input[int]] = None,
                 fall_over_bfd_check_control_plane_failure: Optional[pulumi.Input[bool]] = None,
                 fall_over_bfd_multi_hop: Optional[pulumi.Input[bool]] = None,
                 fall_over_bfd_single_hop: Optional[pulumi.Input[bool]] = None,
                 fall_over_bfd_strict_mode: Optional[pulumi.Input[bool]] = None,
                 fall_over_default_enable: Optional[pulumi.Input[bool]] = None,
                 fall_over_default_route_map: Optional[pulumi.Input[str]] = None,
                 fall_over_maximum_metric_route_map: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 local_as: Optional[pulumi.Input[str]] = None,
                 local_as_dual_as: Optional[pulumi.Input[bool]] = None,
                 local_as_no_prepend: Optional[pulumi.Input[bool]] = None,
                 local_as_replace_as: Optional[pulumi.Input[bool]] = None,
                 log_neighbor_changes: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_type: Optional[pulumi.Input[int]] = None,
                 remote_as: Optional[pulumi.Input[str]] = None,
                 shutdown: Optional[pulumi.Input[bool]] = None,
                 timers_holdtime: Optional[pulumi.Input[int]] = None,
                 timers_keepalive_interval: Optional[pulumi.Input[int]] = None,
                 timers_minimum_neighbor_hold: Optional[pulumi.Input[int]] = None,
                 ttl_security_hops: Optional[pulumi.Input[int]] = None,
                 update_source_loopback: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        This resource can manage the BGP Neighbor configuration.

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_iosxe as iosxe

        example = iosxe.BgpNeighbor("example",
            asn="65000",
            cluster_id="1234",
            description="BGP Neighbor Description",
            disable_connected_check=False,
            fall_over_bfd_check_control_plane_failure=True,
            fall_over_bfd_single_hop=True,
            fall_over_bfd_strict_mode=True,
            fall_over_default_enable=False,
            fall_over_default_route_map="RMAP",
            fall_over_maximum_metric_route_map="RMAP",
            ip="3.3.3.3",
            log_neighbor_changes=True,
            password="test1234",
            password_type=1,
            remote_as="65000",
            shutdown=False,
            timers_holdtime=866,
            timers_keepalive_interval=655,
            timers_minimum_neighbor_hold=222,
            update_source_loopback="100",
            version=4)
        ```

        ## Import

        ```sh
         $ pulumi import iosxe:index/bgpNeighbor:BgpNeighbor example "Cisco-IOS-XE-native:native/router/Cisco-IOS-XE-bgp:bgp=65000/neighbor=3.3.3.3"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] description: Neighbor specific description
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] disable_connected_check: one-hop away EBGP peer using loopback address
        :param pulumi.Input[bool] ebgp_multihop: Allow EBGP neighbors not on directly connected networks. For single-hop ebgp peers, delete ebgp-multihop directly.
        :param pulumi.Input[int] ebgp_multihop_max_hop: - Range: `2`-`255`
        :param pulumi.Input[bool] fall_over_bfd_check_control_plane_failure: Retrieve control plane dependent failure info from BFD for BGP GR/NSR operation
        :param pulumi.Input[bool] fall_over_bfd_multi_hop: Force BFD multi-hop to detect failure
        :param pulumi.Input[bool] fall_over_bfd_single_hop: Force BFD single-hop to detect failure
        :param pulumi.Input[bool] fall_over_bfd_strict_mode: Enable BFD strict-mode
        :param pulumi.Input[bool] local_as_dual_as: Accept either real AS or local AS from the ebgp peer
        :param pulumi.Input[bool] local_as_no_prepend: Do not prepend local-as to updates from ebgp peers
        :param pulumi.Input[bool] local_as_replace_as: Replace real AS with local AS in the EBGP updates
        :param pulumi.Input[bool] log_neighbor_changes: Log neighbor up/down and reset reason
        :param pulumi.Input[int] password_type: Encryption type (0 to disable encryption, 7 for proprietary) - Range: `0`-`7`
        :param pulumi.Input[str] remote_as: Specify a BGP peer-group remote-as
        :param pulumi.Input[bool] shutdown: Administratively shut down this neighbor
        :param pulumi.Input[int] timers_holdtime: - Range: `0`-`65535`
        :param pulumi.Input[int] timers_keepalive_interval: - Range: `0`-`65535`
        :param pulumi.Input[int] timers_minimum_neighbor_hold: - Range: `0`-`65535`
        :param pulumi.Input[int] ttl_security_hops: IP hops - Range: `1`-`254`
        :param pulumi.Input[str] update_source_loopback: Loopback interface
        :param pulumi.Input[int] version: Set the BGP version to match a neighbor - Range: `4`-`4`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BgpNeighborArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the BGP Neighbor configuration.

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_iosxe as iosxe

        example = iosxe.BgpNeighbor("example",
            asn="65000",
            cluster_id="1234",
            description="BGP Neighbor Description",
            disable_connected_check=False,
            fall_over_bfd_check_control_plane_failure=True,
            fall_over_bfd_single_hop=True,
            fall_over_bfd_strict_mode=True,
            fall_over_default_enable=False,
            fall_over_default_route_map="RMAP",
            fall_over_maximum_metric_route_map="RMAP",
            ip="3.3.3.3",
            log_neighbor_changes=True,
            password="test1234",
            password_type=1,
            remote_as="65000",
            shutdown=False,
            timers_holdtime=866,
            timers_keepalive_interval=655,
            timers_minimum_neighbor_hold=222,
            update_source_loopback="100",
            version=4)
        ```

        ## Import

        ```sh
         $ pulumi import iosxe:index/bgpNeighbor:BgpNeighbor example "Cisco-IOS-XE-native:native/router/Cisco-IOS-XE-bgp:bgp=65000/neighbor=3.3.3.3"
        ```

        :param str resource_name: The name of the resource.
        :param BgpNeighborArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BgpNeighborArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asn: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 disable_connected_check: Optional[pulumi.Input[bool]] = None,
                 ebgp_multihop: Optional[pulumi.Input[bool]] = None,
                 ebgp_multihop_max_hop: Optional[pulumi.Input[int]] = None,
                 fall_over_bfd_check_control_plane_failure: Optional[pulumi.Input[bool]] = None,
                 fall_over_bfd_multi_hop: Optional[pulumi.Input[bool]] = None,
                 fall_over_bfd_single_hop: Optional[pulumi.Input[bool]] = None,
                 fall_over_bfd_strict_mode: Optional[pulumi.Input[bool]] = None,
                 fall_over_default_enable: Optional[pulumi.Input[bool]] = None,
                 fall_over_default_route_map: Optional[pulumi.Input[str]] = None,
                 fall_over_maximum_metric_route_map: Optional[pulumi.Input[str]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 local_as: Optional[pulumi.Input[str]] = None,
                 local_as_dual_as: Optional[pulumi.Input[bool]] = None,
                 local_as_no_prepend: Optional[pulumi.Input[bool]] = None,
                 local_as_replace_as: Optional[pulumi.Input[bool]] = None,
                 log_neighbor_changes: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_type: Optional[pulumi.Input[int]] = None,
                 remote_as: Optional[pulumi.Input[str]] = None,
                 shutdown: Optional[pulumi.Input[bool]] = None,
                 timers_holdtime: Optional[pulumi.Input[int]] = None,
                 timers_keepalive_interval: Optional[pulumi.Input[int]] = None,
                 timers_minimum_neighbor_hold: Optional[pulumi.Input[int]] = None,
                 ttl_security_hops: Optional[pulumi.Input[int]] = None,
                 update_source_loopback: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BgpNeighborArgs.__new__(BgpNeighborArgs)

            if asn is None and not opts.urn:
                raise TypeError("Missing required property 'asn'")
            __props__.__dict__["asn"] = asn
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["delete_mode"] = delete_mode
            __props__.__dict__["description"] = description
            __props__.__dict__["device"] = device
            __props__.__dict__["disable_connected_check"] = disable_connected_check
            __props__.__dict__["ebgp_multihop"] = ebgp_multihop
            __props__.__dict__["ebgp_multihop_max_hop"] = ebgp_multihop_max_hop
            __props__.__dict__["fall_over_bfd_check_control_plane_failure"] = fall_over_bfd_check_control_plane_failure
            __props__.__dict__["fall_over_bfd_multi_hop"] = fall_over_bfd_multi_hop
            __props__.__dict__["fall_over_bfd_single_hop"] = fall_over_bfd_single_hop
            __props__.__dict__["fall_over_bfd_strict_mode"] = fall_over_bfd_strict_mode
            __props__.__dict__["fall_over_default_enable"] = fall_over_default_enable
            __props__.__dict__["fall_over_default_route_map"] = fall_over_default_route_map
            __props__.__dict__["fall_over_maximum_metric_route_map"] = fall_over_maximum_metric_route_map
            if ip is None and not opts.urn:
                raise TypeError("Missing required property 'ip'")
            __props__.__dict__["ip"] = ip
            __props__.__dict__["local_as"] = local_as
            __props__.__dict__["local_as_dual_as"] = local_as_dual_as
            __props__.__dict__["local_as_no_prepend"] = local_as_no_prepend
            __props__.__dict__["local_as_replace_as"] = local_as_replace_as
            __props__.__dict__["log_neighbor_changes"] = log_neighbor_changes
            __props__.__dict__["password"] = password
            __props__.__dict__["password_type"] = password_type
            __props__.__dict__["remote_as"] = remote_as
            __props__.__dict__["shutdown"] = shutdown
            __props__.__dict__["timers_holdtime"] = timers_holdtime
            __props__.__dict__["timers_keepalive_interval"] = timers_keepalive_interval
            __props__.__dict__["timers_minimum_neighbor_hold"] = timers_minimum_neighbor_hold
            __props__.__dict__["ttl_security_hops"] = ttl_security_hops
            __props__.__dict__["update_source_loopback"] = update_source_loopback
            __props__.__dict__["version"] = version
        super(BgpNeighbor, __self__).__init__(
            'iosxe:index/bgpNeighbor:BgpNeighbor',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            asn: Optional[pulumi.Input[str]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            delete_mode: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            disable_connected_check: Optional[pulumi.Input[bool]] = None,
            ebgp_multihop: Optional[pulumi.Input[bool]] = None,
            ebgp_multihop_max_hop: Optional[pulumi.Input[int]] = None,
            fall_over_bfd_check_control_plane_failure: Optional[pulumi.Input[bool]] = None,
            fall_over_bfd_multi_hop: Optional[pulumi.Input[bool]] = None,
            fall_over_bfd_single_hop: Optional[pulumi.Input[bool]] = None,
            fall_over_bfd_strict_mode: Optional[pulumi.Input[bool]] = None,
            fall_over_default_enable: Optional[pulumi.Input[bool]] = None,
            fall_over_default_route_map: Optional[pulumi.Input[str]] = None,
            fall_over_maximum_metric_route_map: Optional[pulumi.Input[str]] = None,
            ip: Optional[pulumi.Input[str]] = None,
            local_as: Optional[pulumi.Input[str]] = None,
            local_as_dual_as: Optional[pulumi.Input[bool]] = None,
            local_as_no_prepend: Optional[pulumi.Input[bool]] = None,
            local_as_replace_as: Optional[pulumi.Input[bool]] = None,
            log_neighbor_changes: Optional[pulumi.Input[bool]] = None,
            password: Optional[pulumi.Input[str]] = None,
            password_type: Optional[pulumi.Input[int]] = None,
            remote_as: Optional[pulumi.Input[str]] = None,
            shutdown: Optional[pulumi.Input[bool]] = None,
            timers_holdtime: Optional[pulumi.Input[int]] = None,
            timers_keepalive_interval: Optional[pulumi.Input[int]] = None,
            timers_minimum_neighbor_hold: Optional[pulumi.Input[int]] = None,
            ttl_security_hops: Optional[pulumi.Input[int]] = None,
            update_source_loopback: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[int]] = None) -> 'BgpNeighbor':
        """
        Get an existing BgpNeighbor resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] description: Neighbor specific description
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] disable_connected_check: one-hop away EBGP peer using loopback address
        :param pulumi.Input[bool] ebgp_multihop: Allow EBGP neighbors not on directly connected networks. For single-hop ebgp peers, delete ebgp-multihop directly.
        :param pulumi.Input[int] ebgp_multihop_max_hop: - Range: `2`-`255`
        :param pulumi.Input[bool] fall_over_bfd_check_control_plane_failure: Retrieve control plane dependent failure info from BFD for BGP GR/NSR operation
        :param pulumi.Input[bool] fall_over_bfd_multi_hop: Force BFD multi-hop to detect failure
        :param pulumi.Input[bool] fall_over_bfd_single_hop: Force BFD single-hop to detect failure
        :param pulumi.Input[bool] fall_over_bfd_strict_mode: Enable BFD strict-mode
        :param pulumi.Input[bool] local_as_dual_as: Accept either real AS or local AS from the ebgp peer
        :param pulumi.Input[bool] local_as_no_prepend: Do not prepend local-as to updates from ebgp peers
        :param pulumi.Input[bool] local_as_replace_as: Replace real AS with local AS in the EBGP updates
        :param pulumi.Input[bool] log_neighbor_changes: Log neighbor up/down and reset reason
        :param pulumi.Input[int] password_type: Encryption type (0 to disable encryption, 7 for proprietary) - Range: `0`-`7`
        :param pulumi.Input[str] remote_as: Specify a BGP peer-group remote-as
        :param pulumi.Input[bool] shutdown: Administratively shut down this neighbor
        :param pulumi.Input[int] timers_holdtime: - Range: `0`-`65535`
        :param pulumi.Input[int] timers_keepalive_interval: - Range: `0`-`65535`
        :param pulumi.Input[int] timers_minimum_neighbor_hold: - Range: `0`-`65535`
        :param pulumi.Input[int] ttl_security_hops: IP hops - Range: `1`-`254`
        :param pulumi.Input[str] update_source_loopback: Loopback interface
        :param pulumi.Input[int] version: Set the BGP version to match a neighbor - Range: `4`-`4`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BgpNeighborState.__new__(_BgpNeighborState)

        __props__.__dict__["asn"] = asn
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["delete_mode"] = delete_mode
        __props__.__dict__["description"] = description
        __props__.__dict__["device"] = device
        __props__.__dict__["disable_connected_check"] = disable_connected_check
        __props__.__dict__["ebgp_multihop"] = ebgp_multihop
        __props__.__dict__["ebgp_multihop_max_hop"] = ebgp_multihop_max_hop
        __props__.__dict__["fall_over_bfd_check_control_plane_failure"] = fall_over_bfd_check_control_plane_failure
        __props__.__dict__["fall_over_bfd_multi_hop"] = fall_over_bfd_multi_hop
        __props__.__dict__["fall_over_bfd_single_hop"] = fall_over_bfd_single_hop
        __props__.__dict__["fall_over_bfd_strict_mode"] = fall_over_bfd_strict_mode
        __props__.__dict__["fall_over_default_enable"] = fall_over_default_enable
        __props__.__dict__["fall_over_default_route_map"] = fall_over_default_route_map
        __props__.__dict__["fall_over_maximum_metric_route_map"] = fall_over_maximum_metric_route_map
        __props__.__dict__["ip"] = ip
        __props__.__dict__["local_as"] = local_as
        __props__.__dict__["local_as_dual_as"] = local_as_dual_as
        __props__.__dict__["local_as_no_prepend"] = local_as_no_prepend
        __props__.__dict__["local_as_replace_as"] = local_as_replace_as
        __props__.__dict__["log_neighbor_changes"] = log_neighbor_changes
        __props__.__dict__["password"] = password
        __props__.__dict__["password_type"] = password_type
        __props__.__dict__["remote_as"] = remote_as
        __props__.__dict__["shutdown"] = shutdown
        __props__.__dict__["timers_holdtime"] = timers_holdtime
        __props__.__dict__["timers_keepalive_interval"] = timers_keepalive_interval
        __props__.__dict__["timers_minimum_neighbor_hold"] = timers_minimum_neighbor_hold
        __props__.__dict__["ttl_security_hops"] = ttl_security_hops
        __props__.__dict__["update_source_loopback"] = update_source_loopback
        __props__.__dict__["version"] = version
        return BgpNeighbor(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def asn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Neighbor specific description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="disableConnectedCheck")
    def disable_connected_check(self) -> pulumi.Output[Optional[bool]]:
        """
        one-hop away EBGP peer using loopback address
        """
        return pulumi.get(self, "disable_connected_check")

    @property
    @pulumi.getter(name="ebgpMultihop")
    def ebgp_multihop(self) -> pulumi.Output[Optional[bool]]:
        """
        Allow EBGP neighbors not on directly connected networks. For single-hop ebgp peers, delete ebgp-multihop directly.
        """
        return pulumi.get(self, "ebgp_multihop")

    @property
    @pulumi.getter(name="ebgpMultihopMaxHop")
    def ebgp_multihop_max_hop(self) -> pulumi.Output[Optional[int]]:
        """
        - Range: `2`-`255`
        """
        return pulumi.get(self, "ebgp_multihop_max_hop")

    @property
    @pulumi.getter(name="fallOverBfdCheckControlPlaneFailure")
    def fall_over_bfd_check_control_plane_failure(self) -> pulumi.Output[Optional[bool]]:
        """
        Retrieve control plane dependent failure info from BFD for BGP GR/NSR operation
        """
        return pulumi.get(self, "fall_over_bfd_check_control_plane_failure")

    @property
    @pulumi.getter(name="fallOverBfdMultiHop")
    def fall_over_bfd_multi_hop(self) -> pulumi.Output[Optional[bool]]:
        """
        Force BFD multi-hop to detect failure
        """
        return pulumi.get(self, "fall_over_bfd_multi_hop")

    @property
    @pulumi.getter(name="fallOverBfdSingleHop")
    def fall_over_bfd_single_hop(self) -> pulumi.Output[Optional[bool]]:
        """
        Force BFD single-hop to detect failure
        """
        return pulumi.get(self, "fall_over_bfd_single_hop")

    @property
    @pulumi.getter(name="fallOverBfdStrictMode")
    def fall_over_bfd_strict_mode(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable BFD strict-mode
        """
        return pulumi.get(self, "fall_over_bfd_strict_mode")

    @property
    @pulumi.getter(name="fallOverDefaultEnable")
    def fall_over_default_enable(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "fall_over_default_enable")

    @property
    @pulumi.getter(name="fallOverDefaultRouteMap")
    def fall_over_default_route_map(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "fall_over_default_route_map")

    @property
    @pulumi.getter(name="fallOverMaximumMetricRouteMap")
    def fall_over_maximum_metric_route_map(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "fall_over_maximum_metric_route_map")

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="localAs")
    def local_as(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "local_as")

    @property
    @pulumi.getter(name="localAsDualAs")
    def local_as_dual_as(self) -> pulumi.Output[Optional[bool]]:
        """
        Accept either real AS or local AS from the ebgp peer
        """
        return pulumi.get(self, "local_as_dual_as")

    @property
    @pulumi.getter(name="localAsNoPrepend")
    def local_as_no_prepend(self) -> pulumi.Output[Optional[bool]]:
        """
        Do not prepend local-as to updates from ebgp peers
        """
        return pulumi.get(self, "local_as_no_prepend")

    @property
    @pulumi.getter(name="localAsReplaceAs")
    def local_as_replace_as(self) -> pulumi.Output[Optional[bool]]:
        """
        Replace real AS with local AS in the EBGP updates
        """
        return pulumi.get(self, "local_as_replace_as")

    @property
    @pulumi.getter(name="logNeighborChanges")
    def log_neighbor_changes(self) -> pulumi.Output[Optional[bool]]:
        """
        Log neighbor up/down and reset reason
        """
        return pulumi.get(self, "log_neighbor_changes")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="passwordType")
    def password_type(self) -> pulumi.Output[Optional[int]]:
        """
        Encryption type (0 to disable encryption, 7 for proprietary) - Range: `0`-`7`
        """
        return pulumi.get(self, "password_type")

    @property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> pulumi.Output[Optional[str]]:
        """
        Specify a BGP peer-group remote-as
        """
        return pulumi.get(self, "remote_as")

    @property
    @pulumi.getter
    def shutdown(self) -> pulumi.Output[Optional[bool]]:
        """
        Administratively shut down this neighbor
        """
        return pulumi.get(self, "shutdown")

    @property
    @pulumi.getter(name="timersHoldtime")
    def timers_holdtime(self) -> pulumi.Output[Optional[int]]:
        """
        - Range: `0`-`65535`
        """
        return pulumi.get(self, "timers_holdtime")

    @property
    @pulumi.getter(name="timersKeepaliveInterval")
    def timers_keepalive_interval(self) -> pulumi.Output[Optional[int]]:
        """
        - Range: `0`-`65535`
        """
        return pulumi.get(self, "timers_keepalive_interval")

    @property
    @pulumi.getter(name="timersMinimumNeighborHold")
    def timers_minimum_neighbor_hold(self) -> pulumi.Output[Optional[int]]:
        """
        - Range: `0`-`65535`
        """
        return pulumi.get(self, "timers_minimum_neighbor_hold")

    @property
    @pulumi.getter(name="ttlSecurityHops")
    def ttl_security_hops(self) -> pulumi.Output[Optional[int]]:
        """
        IP hops - Range: `1`-`254`
        """
        return pulumi.get(self, "ttl_security_hops")

    @property
    @pulumi.getter(name="updateSourceLoopback")
    def update_source_loopback(self) -> pulumi.Output[Optional[str]]:
        """
        Loopback interface
        """
        return pulumi.get(self, "update_source_loopback")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[Optional[int]]:
        """
        Set the BGP version to match a neighbor - Range: `4`-`4`
        """
        return pulumi.get(self, "version")

