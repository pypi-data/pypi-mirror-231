# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['EvpnInstanceArgs', 'EvpnInstance']

@pulumi.input_type
class EvpnInstanceArgs:
    def __init__(__self__, *,
                 evpn_instance_num: pulumi.Input[int],
                 device: Optional[pulumi.Input[str]] = None,
                 vlan_based_auto_route_target: Optional[pulumi.Input[bool]] = None,
                 vlan_based_default_gateway_advertise: Optional[pulumi.Input[str]] = None,
                 vlan_based_encapsulation: Optional[pulumi.Input[str]] = None,
                 vlan_based_ip_local_learning_disable: Optional[pulumi.Input[bool]] = None,
                 vlan_based_ip_local_learning_enable: Optional[pulumi.Input[bool]] = None,
                 vlan_based_rd: Optional[pulumi.Input[str]] = None,
                 vlan_based_re_originate_route_type5: Optional[pulumi.Input[bool]] = None,
                 vlan_based_replication_type_ingress: Optional[pulumi.Input[bool]] = None,
                 vlan_based_replication_type_mp2mp: Optional[pulumi.Input[bool]] = None,
                 vlan_based_replication_type_p2mp: Optional[pulumi.Input[bool]] = None,
                 vlan_based_replication_type_static: Optional[pulumi.Input[bool]] = None,
                 vlan_based_route_target: Optional[pulumi.Input[str]] = None,
                 vlan_based_route_target_both: Optional[pulumi.Input[str]] = None,
                 vlan_based_route_target_export: Optional[pulumi.Input[str]] = None,
                 vlan_based_route_target_import: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a EvpnInstance resource.
        :param pulumi.Input[int] evpn_instance_num: evpn instance number - Range: `1`-`65535`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] vlan_based_auto_route_target: Automatically set a route-target
        :param pulumi.Input[str] vlan_based_default_gateway_advertise: Advertise Default Gateway MAC/IP routes - Choices: `disable`, `enable`
        :param pulumi.Input[str] vlan_based_encapsulation: Data encapsulation method - Choices: `mpls`, `vxlan`
        :param pulumi.Input[bool] vlan_based_ip_local_learning_disable: Disable IP local learning from dataplane
        :param pulumi.Input[bool] vlan_based_ip_local_learning_enable: Enable IP local learning from dataplane
        :param pulumi.Input[str] vlan_based_rd: ASN:nn or IP-address:nn
        :param pulumi.Input[bool] vlan_based_re_originate_route_type5: Re-originate route-type 5
        :param pulumi.Input[bool] vlan_based_replication_type_ingress: Ingress replication
        :param pulumi.Input[bool] vlan_based_replication_type_mp2mp: mp2mp replication
        :param pulumi.Input[bool] vlan_based_replication_type_p2mp: p2mp replication
        :param pulumi.Input[bool] vlan_based_replication_type_static: Static replication
        :param pulumi.Input[str] vlan_based_route_target: ASN:nn or IP-address:nn
        :param pulumi.Input[str] vlan_based_route_target_both: ASN:nn or IP-address:nn
        :param pulumi.Input[str] vlan_based_route_target_export: ASN:nn or IP-address:nn (DEPRECATED, use rt-value-entry)
        :param pulumi.Input[str] vlan_based_route_target_import: ASN:nn or IP-address:nn (DEPRECATED, use rt-value-entry)
        """
        pulumi.set(__self__, "evpn_instance_num", evpn_instance_num)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if vlan_based_auto_route_target is not None:
            pulumi.set(__self__, "vlan_based_auto_route_target", vlan_based_auto_route_target)
        if vlan_based_default_gateway_advertise is not None:
            pulumi.set(__self__, "vlan_based_default_gateway_advertise", vlan_based_default_gateway_advertise)
        if vlan_based_encapsulation is not None:
            pulumi.set(__self__, "vlan_based_encapsulation", vlan_based_encapsulation)
        if vlan_based_ip_local_learning_disable is not None:
            pulumi.set(__self__, "vlan_based_ip_local_learning_disable", vlan_based_ip_local_learning_disable)
        if vlan_based_ip_local_learning_enable is not None:
            pulumi.set(__self__, "vlan_based_ip_local_learning_enable", vlan_based_ip_local_learning_enable)
        if vlan_based_rd is not None:
            pulumi.set(__self__, "vlan_based_rd", vlan_based_rd)
        if vlan_based_re_originate_route_type5 is not None:
            pulumi.set(__self__, "vlan_based_re_originate_route_type5", vlan_based_re_originate_route_type5)
        if vlan_based_replication_type_ingress is not None:
            pulumi.set(__self__, "vlan_based_replication_type_ingress", vlan_based_replication_type_ingress)
        if vlan_based_replication_type_mp2mp is not None:
            pulumi.set(__self__, "vlan_based_replication_type_mp2mp", vlan_based_replication_type_mp2mp)
        if vlan_based_replication_type_p2mp is not None:
            pulumi.set(__self__, "vlan_based_replication_type_p2mp", vlan_based_replication_type_p2mp)
        if vlan_based_replication_type_static is not None:
            pulumi.set(__self__, "vlan_based_replication_type_static", vlan_based_replication_type_static)
        if vlan_based_route_target is not None:
            pulumi.set(__self__, "vlan_based_route_target", vlan_based_route_target)
        if vlan_based_route_target_both is not None:
            pulumi.set(__self__, "vlan_based_route_target_both", vlan_based_route_target_both)
        if vlan_based_route_target_export is not None:
            pulumi.set(__self__, "vlan_based_route_target_export", vlan_based_route_target_export)
        if vlan_based_route_target_import is not None:
            pulumi.set(__self__, "vlan_based_route_target_import", vlan_based_route_target_import)

    @property
    @pulumi.getter(name="evpnInstanceNum")
    def evpn_instance_num(self) -> pulumi.Input[int]:
        """
        evpn instance number - Range: `1`-`65535`
        """
        return pulumi.get(self, "evpn_instance_num")

    @evpn_instance_num.setter
    def evpn_instance_num(self, value: pulumi.Input[int]):
        pulumi.set(self, "evpn_instance_num", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="vlanBasedAutoRouteTarget")
    def vlan_based_auto_route_target(self) -> Optional[pulumi.Input[bool]]:
        """
        Automatically set a route-target
        """
        return pulumi.get(self, "vlan_based_auto_route_target")

    @vlan_based_auto_route_target.setter
    def vlan_based_auto_route_target(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vlan_based_auto_route_target", value)

    @property
    @pulumi.getter(name="vlanBasedDefaultGatewayAdvertise")
    def vlan_based_default_gateway_advertise(self) -> Optional[pulumi.Input[str]]:
        """
        Advertise Default Gateway MAC/IP routes - Choices: `disable`, `enable`
        """
        return pulumi.get(self, "vlan_based_default_gateway_advertise")

    @vlan_based_default_gateway_advertise.setter
    def vlan_based_default_gateway_advertise(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_based_default_gateway_advertise", value)

    @property
    @pulumi.getter(name="vlanBasedEncapsulation")
    def vlan_based_encapsulation(self) -> Optional[pulumi.Input[str]]:
        """
        Data encapsulation method - Choices: `mpls`, `vxlan`
        """
        return pulumi.get(self, "vlan_based_encapsulation")

    @vlan_based_encapsulation.setter
    def vlan_based_encapsulation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_based_encapsulation", value)

    @property
    @pulumi.getter(name="vlanBasedIpLocalLearningDisable")
    def vlan_based_ip_local_learning_disable(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable IP local learning from dataplane
        """
        return pulumi.get(self, "vlan_based_ip_local_learning_disable")

    @vlan_based_ip_local_learning_disable.setter
    def vlan_based_ip_local_learning_disable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vlan_based_ip_local_learning_disable", value)

    @property
    @pulumi.getter(name="vlanBasedIpLocalLearningEnable")
    def vlan_based_ip_local_learning_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IP local learning from dataplane
        """
        return pulumi.get(self, "vlan_based_ip_local_learning_enable")

    @vlan_based_ip_local_learning_enable.setter
    def vlan_based_ip_local_learning_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vlan_based_ip_local_learning_enable", value)

    @property
    @pulumi.getter(name="vlanBasedRd")
    def vlan_based_rd(self) -> Optional[pulumi.Input[str]]:
        """
        ASN:nn or IP-address:nn
        """
        return pulumi.get(self, "vlan_based_rd")

    @vlan_based_rd.setter
    def vlan_based_rd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_based_rd", value)

    @property
    @pulumi.getter(name="vlanBasedReOriginateRouteType5")
    def vlan_based_re_originate_route_type5(self) -> Optional[pulumi.Input[bool]]:
        """
        Re-originate route-type 5
        """
        return pulumi.get(self, "vlan_based_re_originate_route_type5")

    @vlan_based_re_originate_route_type5.setter
    def vlan_based_re_originate_route_type5(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vlan_based_re_originate_route_type5", value)

    @property
    @pulumi.getter(name="vlanBasedReplicationTypeIngress")
    def vlan_based_replication_type_ingress(self) -> Optional[pulumi.Input[bool]]:
        """
        Ingress replication
        """
        return pulumi.get(self, "vlan_based_replication_type_ingress")

    @vlan_based_replication_type_ingress.setter
    def vlan_based_replication_type_ingress(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vlan_based_replication_type_ingress", value)

    @property
    @pulumi.getter(name="vlanBasedReplicationTypeMp2mp")
    def vlan_based_replication_type_mp2mp(self) -> Optional[pulumi.Input[bool]]:
        """
        mp2mp replication
        """
        return pulumi.get(self, "vlan_based_replication_type_mp2mp")

    @vlan_based_replication_type_mp2mp.setter
    def vlan_based_replication_type_mp2mp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vlan_based_replication_type_mp2mp", value)

    @property
    @pulumi.getter(name="vlanBasedReplicationTypeP2mp")
    def vlan_based_replication_type_p2mp(self) -> Optional[pulumi.Input[bool]]:
        """
        p2mp replication
        """
        return pulumi.get(self, "vlan_based_replication_type_p2mp")

    @vlan_based_replication_type_p2mp.setter
    def vlan_based_replication_type_p2mp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vlan_based_replication_type_p2mp", value)

    @property
    @pulumi.getter(name="vlanBasedReplicationTypeStatic")
    def vlan_based_replication_type_static(self) -> Optional[pulumi.Input[bool]]:
        """
        Static replication
        """
        return pulumi.get(self, "vlan_based_replication_type_static")

    @vlan_based_replication_type_static.setter
    def vlan_based_replication_type_static(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vlan_based_replication_type_static", value)

    @property
    @pulumi.getter(name="vlanBasedRouteTarget")
    def vlan_based_route_target(self) -> Optional[pulumi.Input[str]]:
        """
        ASN:nn or IP-address:nn
        """
        return pulumi.get(self, "vlan_based_route_target")

    @vlan_based_route_target.setter
    def vlan_based_route_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_based_route_target", value)

    @property
    @pulumi.getter(name="vlanBasedRouteTargetBoth")
    def vlan_based_route_target_both(self) -> Optional[pulumi.Input[str]]:
        """
        ASN:nn or IP-address:nn
        """
        return pulumi.get(self, "vlan_based_route_target_both")

    @vlan_based_route_target_both.setter
    def vlan_based_route_target_both(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_based_route_target_both", value)

    @property
    @pulumi.getter(name="vlanBasedRouteTargetExport")
    def vlan_based_route_target_export(self) -> Optional[pulumi.Input[str]]:
        """
        ASN:nn or IP-address:nn (DEPRECATED, use rt-value-entry)
        """
        return pulumi.get(self, "vlan_based_route_target_export")

    @vlan_based_route_target_export.setter
    def vlan_based_route_target_export(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_based_route_target_export", value)

    @property
    @pulumi.getter(name="vlanBasedRouteTargetImport")
    def vlan_based_route_target_import(self) -> Optional[pulumi.Input[str]]:
        """
        ASN:nn or IP-address:nn (DEPRECATED, use rt-value-entry)
        """
        return pulumi.get(self, "vlan_based_route_target_import")

    @vlan_based_route_target_import.setter
    def vlan_based_route_target_import(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_based_route_target_import", value)


@pulumi.input_type
class _EvpnInstanceState:
    def __init__(__self__, *,
                 device: Optional[pulumi.Input[str]] = None,
                 evpn_instance_num: Optional[pulumi.Input[int]] = None,
                 vlan_based_auto_route_target: Optional[pulumi.Input[bool]] = None,
                 vlan_based_default_gateway_advertise: Optional[pulumi.Input[str]] = None,
                 vlan_based_encapsulation: Optional[pulumi.Input[str]] = None,
                 vlan_based_ip_local_learning_disable: Optional[pulumi.Input[bool]] = None,
                 vlan_based_ip_local_learning_enable: Optional[pulumi.Input[bool]] = None,
                 vlan_based_rd: Optional[pulumi.Input[str]] = None,
                 vlan_based_re_originate_route_type5: Optional[pulumi.Input[bool]] = None,
                 vlan_based_replication_type_ingress: Optional[pulumi.Input[bool]] = None,
                 vlan_based_replication_type_mp2mp: Optional[pulumi.Input[bool]] = None,
                 vlan_based_replication_type_p2mp: Optional[pulumi.Input[bool]] = None,
                 vlan_based_replication_type_static: Optional[pulumi.Input[bool]] = None,
                 vlan_based_route_target: Optional[pulumi.Input[str]] = None,
                 vlan_based_route_target_both: Optional[pulumi.Input[str]] = None,
                 vlan_based_route_target_export: Optional[pulumi.Input[str]] = None,
                 vlan_based_route_target_import: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering EvpnInstance resources.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] evpn_instance_num: evpn instance number - Range: `1`-`65535`
        :param pulumi.Input[bool] vlan_based_auto_route_target: Automatically set a route-target
        :param pulumi.Input[str] vlan_based_default_gateway_advertise: Advertise Default Gateway MAC/IP routes - Choices: `disable`, `enable`
        :param pulumi.Input[str] vlan_based_encapsulation: Data encapsulation method - Choices: `mpls`, `vxlan`
        :param pulumi.Input[bool] vlan_based_ip_local_learning_disable: Disable IP local learning from dataplane
        :param pulumi.Input[bool] vlan_based_ip_local_learning_enable: Enable IP local learning from dataplane
        :param pulumi.Input[str] vlan_based_rd: ASN:nn or IP-address:nn
        :param pulumi.Input[bool] vlan_based_re_originate_route_type5: Re-originate route-type 5
        :param pulumi.Input[bool] vlan_based_replication_type_ingress: Ingress replication
        :param pulumi.Input[bool] vlan_based_replication_type_mp2mp: mp2mp replication
        :param pulumi.Input[bool] vlan_based_replication_type_p2mp: p2mp replication
        :param pulumi.Input[bool] vlan_based_replication_type_static: Static replication
        :param pulumi.Input[str] vlan_based_route_target: ASN:nn or IP-address:nn
        :param pulumi.Input[str] vlan_based_route_target_both: ASN:nn or IP-address:nn
        :param pulumi.Input[str] vlan_based_route_target_export: ASN:nn or IP-address:nn (DEPRECATED, use rt-value-entry)
        :param pulumi.Input[str] vlan_based_route_target_import: ASN:nn or IP-address:nn (DEPRECATED, use rt-value-entry)
        """
        if device is not None:
            pulumi.set(__self__, "device", device)
        if evpn_instance_num is not None:
            pulumi.set(__self__, "evpn_instance_num", evpn_instance_num)
        if vlan_based_auto_route_target is not None:
            pulumi.set(__self__, "vlan_based_auto_route_target", vlan_based_auto_route_target)
        if vlan_based_default_gateway_advertise is not None:
            pulumi.set(__self__, "vlan_based_default_gateway_advertise", vlan_based_default_gateway_advertise)
        if vlan_based_encapsulation is not None:
            pulumi.set(__self__, "vlan_based_encapsulation", vlan_based_encapsulation)
        if vlan_based_ip_local_learning_disable is not None:
            pulumi.set(__self__, "vlan_based_ip_local_learning_disable", vlan_based_ip_local_learning_disable)
        if vlan_based_ip_local_learning_enable is not None:
            pulumi.set(__self__, "vlan_based_ip_local_learning_enable", vlan_based_ip_local_learning_enable)
        if vlan_based_rd is not None:
            pulumi.set(__self__, "vlan_based_rd", vlan_based_rd)
        if vlan_based_re_originate_route_type5 is not None:
            pulumi.set(__self__, "vlan_based_re_originate_route_type5", vlan_based_re_originate_route_type5)
        if vlan_based_replication_type_ingress is not None:
            pulumi.set(__self__, "vlan_based_replication_type_ingress", vlan_based_replication_type_ingress)
        if vlan_based_replication_type_mp2mp is not None:
            pulumi.set(__self__, "vlan_based_replication_type_mp2mp", vlan_based_replication_type_mp2mp)
        if vlan_based_replication_type_p2mp is not None:
            pulumi.set(__self__, "vlan_based_replication_type_p2mp", vlan_based_replication_type_p2mp)
        if vlan_based_replication_type_static is not None:
            pulumi.set(__self__, "vlan_based_replication_type_static", vlan_based_replication_type_static)
        if vlan_based_route_target is not None:
            pulumi.set(__self__, "vlan_based_route_target", vlan_based_route_target)
        if vlan_based_route_target_both is not None:
            pulumi.set(__self__, "vlan_based_route_target_both", vlan_based_route_target_both)
        if vlan_based_route_target_export is not None:
            pulumi.set(__self__, "vlan_based_route_target_export", vlan_based_route_target_export)
        if vlan_based_route_target_import is not None:
            pulumi.set(__self__, "vlan_based_route_target_import", vlan_based_route_target_import)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="evpnInstanceNum")
    def evpn_instance_num(self) -> Optional[pulumi.Input[int]]:
        """
        evpn instance number - Range: `1`-`65535`
        """
        return pulumi.get(self, "evpn_instance_num")

    @evpn_instance_num.setter
    def evpn_instance_num(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "evpn_instance_num", value)

    @property
    @pulumi.getter(name="vlanBasedAutoRouteTarget")
    def vlan_based_auto_route_target(self) -> Optional[pulumi.Input[bool]]:
        """
        Automatically set a route-target
        """
        return pulumi.get(self, "vlan_based_auto_route_target")

    @vlan_based_auto_route_target.setter
    def vlan_based_auto_route_target(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vlan_based_auto_route_target", value)

    @property
    @pulumi.getter(name="vlanBasedDefaultGatewayAdvertise")
    def vlan_based_default_gateway_advertise(self) -> Optional[pulumi.Input[str]]:
        """
        Advertise Default Gateway MAC/IP routes - Choices: `disable`, `enable`
        """
        return pulumi.get(self, "vlan_based_default_gateway_advertise")

    @vlan_based_default_gateway_advertise.setter
    def vlan_based_default_gateway_advertise(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_based_default_gateway_advertise", value)

    @property
    @pulumi.getter(name="vlanBasedEncapsulation")
    def vlan_based_encapsulation(self) -> Optional[pulumi.Input[str]]:
        """
        Data encapsulation method - Choices: `mpls`, `vxlan`
        """
        return pulumi.get(self, "vlan_based_encapsulation")

    @vlan_based_encapsulation.setter
    def vlan_based_encapsulation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_based_encapsulation", value)

    @property
    @pulumi.getter(name="vlanBasedIpLocalLearningDisable")
    def vlan_based_ip_local_learning_disable(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable IP local learning from dataplane
        """
        return pulumi.get(self, "vlan_based_ip_local_learning_disable")

    @vlan_based_ip_local_learning_disable.setter
    def vlan_based_ip_local_learning_disable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vlan_based_ip_local_learning_disable", value)

    @property
    @pulumi.getter(name="vlanBasedIpLocalLearningEnable")
    def vlan_based_ip_local_learning_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IP local learning from dataplane
        """
        return pulumi.get(self, "vlan_based_ip_local_learning_enable")

    @vlan_based_ip_local_learning_enable.setter
    def vlan_based_ip_local_learning_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vlan_based_ip_local_learning_enable", value)

    @property
    @pulumi.getter(name="vlanBasedRd")
    def vlan_based_rd(self) -> Optional[pulumi.Input[str]]:
        """
        ASN:nn or IP-address:nn
        """
        return pulumi.get(self, "vlan_based_rd")

    @vlan_based_rd.setter
    def vlan_based_rd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_based_rd", value)

    @property
    @pulumi.getter(name="vlanBasedReOriginateRouteType5")
    def vlan_based_re_originate_route_type5(self) -> Optional[pulumi.Input[bool]]:
        """
        Re-originate route-type 5
        """
        return pulumi.get(self, "vlan_based_re_originate_route_type5")

    @vlan_based_re_originate_route_type5.setter
    def vlan_based_re_originate_route_type5(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vlan_based_re_originate_route_type5", value)

    @property
    @pulumi.getter(name="vlanBasedReplicationTypeIngress")
    def vlan_based_replication_type_ingress(self) -> Optional[pulumi.Input[bool]]:
        """
        Ingress replication
        """
        return pulumi.get(self, "vlan_based_replication_type_ingress")

    @vlan_based_replication_type_ingress.setter
    def vlan_based_replication_type_ingress(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vlan_based_replication_type_ingress", value)

    @property
    @pulumi.getter(name="vlanBasedReplicationTypeMp2mp")
    def vlan_based_replication_type_mp2mp(self) -> Optional[pulumi.Input[bool]]:
        """
        mp2mp replication
        """
        return pulumi.get(self, "vlan_based_replication_type_mp2mp")

    @vlan_based_replication_type_mp2mp.setter
    def vlan_based_replication_type_mp2mp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vlan_based_replication_type_mp2mp", value)

    @property
    @pulumi.getter(name="vlanBasedReplicationTypeP2mp")
    def vlan_based_replication_type_p2mp(self) -> Optional[pulumi.Input[bool]]:
        """
        p2mp replication
        """
        return pulumi.get(self, "vlan_based_replication_type_p2mp")

    @vlan_based_replication_type_p2mp.setter
    def vlan_based_replication_type_p2mp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vlan_based_replication_type_p2mp", value)

    @property
    @pulumi.getter(name="vlanBasedReplicationTypeStatic")
    def vlan_based_replication_type_static(self) -> Optional[pulumi.Input[bool]]:
        """
        Static replication
        """
        return pulumi.get(self, "vlan_based_replication_type_static")

    @vlan_based_replication_type_static.setter
    def vlan_based_replication_type_static(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vlan_based_replication_type_static", value)

    @property
    @pulumi.getter(name="vlanBasedRouteTarget")
    def vlan_based_route_target(self) -> Optional[pulumi.Input[str]]:
        """
        ASN:nn or IP-address:nn
        """
        return pulumi.get(self, "vlan_based_route_target")

    @vlan_based_route_target.setter
    def vlan_based_route_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_based_route_target", value)

    @property
    @pulumi.getter(name="vlanBasedRouteTargetBoth")
    def vlan_based_route_target_both(self) -> Optional[pulumi.Input[str]]:
        """
        ASN:nn or IP-address:nn
        """
        return pulumi.get(self, "vlan_based_route_target_both")

    @vlan_based_route_target_both.setter
    def vlan_based_route_target_both(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_based_route_target_both", value)

    @property
    @pulumi.getter(name="vlanBasedRouteTargetExport")
    def vlan_based_route_target_export(self) -> Optional[pulumi.Input[str]]:
        """
        ASN:nn or IP-address:nn (DEPRECATED, use rt-value-entry)
        """
        return pulumi.get(self, "vlan_based_route_target_export")

    @vlan_based_route_target_export.setter
    def vlan_based_route_target_export(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_based_route_target_export", value)

    @property
    @pulumi.getter(name="vlanBasedRouteTargetImport")
    def vlan_based_route_target_import(self) -> Optional[pulumi.Input[str]]:
        """
        ASN:nn or IP-address:nn (DEPRECATED, use rt-value-entry)
        """
        return pulumi.get(self, "vlan_based_route_target_import")

    @vlan_based_route_target_import.setter
    def vlan_based_route_target_import(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_based_route_target_import", value)


class EvpnInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 evpn_instance_num: Optional[pulumi.Input[int]] = None,
                 vlan_based_auto_route_target: Optional[pulumi.Input[bool]] = None,
                 vlan_based_default_gateway_advertise: Optional[pulumi.Input[str]] = None,
                 vlan_based_encapsulation: Optional[pulumi.Input[str]] = None,
                 vlan_based_ip_local_learning_disable: Optional[pulumi.Input[bool]] = None,
                 vlan_based_ip_local_learning_enable: Optional[pulumi.Input[bool]] = None,
                 vlan_based_rd: Optional[pulumi.Input[str]] = None,
                 vlan_based_re_originate_route_type5: Optional[pulumi.Input[bool]] = None,
                 vlan_based_replication_type_ingress: Optional[pulumi.Input[bool]] = None,
                 vlan_based_replication_type_mp2mp: Optional[pulumi.Input[bool]] = None,
                 vlan_based_replication_type_p2mp: Optional[pulumi.Input[bool]] = None,
                 vlan_based_replication_type_static: Optional[pulumi.Input[bool]] = None,
                 vlan_based_route_target: Optional[pulumi.Input[str]] = None,
                 vlan_based_route_target_both: Optional[pulumi.Input[str]] = None,
                 vlan_based_route_target_export: Optional[pulumi.Input[str]] = None,
                 vlan_based_route_target_import: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource can manage the EVPN Instance configuration.

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_iosxe as iosxe

        example = iosxe.EvpnInstance("example",
            evpn_instance_num=10,
            vlan_based_auto_route_target=False,
            vlan_based_default_gateway_advertise="enable",
            vlan_based_encapsulation="vxlan",
            vlan_based_ip_local_learning_disable=False,
            vlan_based_ip_local_learning_enable=True,
            vlan_based_rd="10:10",
            vlan_based_re_originate_route_type5=True,
            vlan_based_replication_type_ingress=False,
            vlan_based_replication_type_mp2mp=False,
            vlan_based_replication_type_p2mp=False,
            vlan_based_replication_type_static=True,
            vlan_based_route_target="10:10",
            vlan_based_route_target_both="10:10",
            vlan_based_route_target_export="10:10",
            vlan_based_route_target_import="10:10")
        ```

        ## Import

        ```sh
         $ pulumi import iosxe:index/evpnInstance:EvpnInstance example "Cisco-IOS-XE-native:native/l2vpn/Cisco-IOS-XE-l2vpn:evpn_cont/evpn-instance/evpn/instance/instance=10"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] evpn_instance_num: evpn instance number - Range: `1`-`65535`
        :param pulumi.Input[bool] vlan_based_auto_route_target: Automatically set a route-target
        :param pulumi.Input[str] vlan_based_default_gateway_advertise: Advertise Default Gateway MAC/IP routes - Choices: `disable`, `enable`
        :param pulumi.Input[str] vlan_based_encapsulation: Data encapsulation method - Choices: `mpls`, `vxlan`
        :param pulumi.Input[bool] vlan_based_ip_local_learning_disable: Disable IP local learning from dataplane
        :param pulumi.Input[bool] vlan_based_ip_local_learning_enable: Enable IP local learning from dataplane
        :param pulumi.Input[str] vlan_based_rd: ASN:nn or IP-address:nn
        :param pulumi.Input[bool] vlan_based_re_originate_route_type5: Re-originate route-type 5
        :param pulumi.Input[bool] vlan_based_replication_type_ingress: Ingress replication
        :param pulumi.Input[bool] vlan_based_replication_type_mp2mp: mp2mp replication
        :param pulumi.Input[bool] vlan_based_replication_type_p2mp: p2mp replication
        :param pulumi.Input[bool] vlan_based_replication_type_static: Static replication
        :param pulumi.Input[str] vlan_based_route_target: ASN:nn or IP-address:nn
        :param pulumi.Input[str] vlan_based_route_target_both: ASN:nn or IP-address:nn
        :param pulumi.Input[str] vlan_based_route_target_export: ASN:nn or IP-address:nn (DEPRECATED, use rt-value-entry)
        :param pulumi.Input[str] vlan_based_route_target_import: ASN:nn or IP-address:nn (DEPRECATED, use rt-value-entry)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EvpnInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the EVPN Instance configuration.

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_iosxe as iosxe

        example = iosxe.EvpnInstance("example",
            evpn_instance_num=10,
            vlan_based_auto_route_target=False,
            vlan_based_default_gateway_advertise="enable",
            vlan_based_encapsulation="vxlan",
            vlan_based_ip_local_learning_disable=False,
            vlan_based_ip_local_learning_enable=True,
            vlan_based_rd="10:10",
            vlan_based_re_originate_route_type5=True,
            vlan_based_replication_type_ingress=False,
            vlan_based_replication_type_mp2mp=False,
            vlan_based_replication_type_p2mp=False,
            vlan_based_replication_type_static=True,
            vlan_based_route_target="10:10",
            vlan_based_route_target_both="10:10",
            vlan_based_route_target_export="10:10",
            vlan_based_route_target_import="10:10")
        ```

        ## Import

        ```sh
         $ pulumi import iosxe:index/evpnInstance:EvpnInstance example "Cisco-IOS-XE-native:native/l2vpn/Cisco-IOS-XE-l2vpn:evpn_cont/evpn-instance/evpn/instance/instance=10"
        ```

        :param str resource_name: The name of the resource.
        :param EvpnInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EvpnInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 evpn_instance_num: Optional[pulumi.Input[int]] = None,
                 vlan_based_auto_route_target: Optional[pulumi.Input[bool]] = None,
                 vlan_based_default_gateway_advertise: Optional[pulumi.Input[str]] = None,
                 vlan_based_encapsulation: Optional[pulumi.Input[str]] = None,
                 vlan_based_ip_local_learning_disable: Optional[pulumi.Input[bool]] = None,
                 vlan_based_ip_local_learning_enable: Optional[pulumi.Input[bool]] = None,
                 vlan_based_rd: Optional[pulumi.Input[str]] = None,
                 vlan_based_re_originate_route_type5: Optional[pulumi.Input[bool]] = None,
                 vlan_based_replication_type_ingress: Optional[pulumi.Input[bool]] = None,
                 vlan_based_replication_type_mp2mp: Optional[pulumi.Input[bool]] = None,
                 vlan_based_replication_type_p2mp: Optional[pulumi.Input[bool]] = None,
                 vlan_based_replication_type_static: Optional[pulumi.Input[bool]] = None,
                 vlan_based_route_target: Optional[pulumi.Input[str]] = None,
                 vlan_based_route_target_both: Optional[pulumi.Input[str]] = None,
                 vlan_based_route_target_export: Optional[pulumi.Input[str]] = None,
                 vlan_based_route_target_import: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EvpnInstanceArgs.__new__(EvpnInstanceArgs)

            __props__.__dict__["device"] = device
            if evpn_instance_num is None and not opts.urn:
                raise TypeError("Missing required property 'evpn_instance_num'")
            __props__.__dict__["evpn_instance_num"] = evpn_instance_num
            __props__.__dict__["vlan_based_auto_route_target"] = vlan_based_auto_route_target
            __props__.__dict__["vlan_based_default_gateway_advertise"] = vlan_based_default_gateway_advertise
            __props__.__dict__["vlan_based_encapsulation"] = vlan_based_encapsulation
            __props__.__dict__["vlan_based_ip_local_learning_disable"] = vlan_based_ip_local_learning_disable
            __props__.__dict__["vlan_based_ip_local_learning_enable"] = vlan_based_ip_local_learning_enable
            __props__.__dict__["vlan_based_rd"] = vlan_based_rd
            __props__.__dict__["vlan_based_re_originate_route_type5"] = vlan_based_re_originate_route_type5
            __props__.__dict__["vlan_based_replication_type_ingress"] = vlan_based_replication_type_ingress
            __props__.__dict__["vlan_based_replication_type_mp2mp"] = vlan_based_replication_type_mp2mp
            __props__.__dict__["vlan_based_replication_type_p2mp"] = vlan_based_replication_type_p2mp
            __props__.__dict__["vlan_based_replication_type_static"] = vlan_based_replication_type_static
            __props__.__dict__["vlan_based_route_target"] = vlan_based_route_target
            __props__.__dict__["vlan_based_route_target_both"] = vlan_based_route_target_both
            __props__.__dict__["vlan_based_route_target_export"] = vlan_based_route_target_export
            __props__.__dict__["vlan_based_route_target_import"] = vlan_based_route_target_import
        super(EvpnInstance, __self__).__init__(
            'iosxe:index/evpnInstance:EvpnInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            device: Optional[pulumi.Input[str]] = None,
            evpn_instance_num: Optional[pulumi.Input[int]] = None,
            vlan_based_auto_route_target: Optional[pulumi.Input[bool]] = None,
            vlan_based_default_gateway_advertise: Optional[pulumi.Input[str]] = None,
            vlan_based_encapsulation: Optional[pulumi.Input[str]] = None,
            vlan_based_ip_local_learning_disable: Optional[pulumi.Input[bool]] = None,
            vlan_based_ip_local_learning_enable: Optional[pulumi.Input[bool]] = None,
            vlan_based_rd: Optional[pulumi.Input[str]] = None,
            vlan_based_re_originate_route_type5: Optional[pulumi.Input[bool]] = None,
            vlan_based_replication_type_ingress: Optional[pulumi.Input[bool]] = None,
            vlan_based_replication_type_mp2mp: Optional[pulumi.Input[bool]] = None,
            vlan_based_replication_type_p2mp: Optional[pulumi.Input[bool]] = None,
            vlan_based_replication_type_static: Optional[pulumi.Input[bool]] = None,
            vlan_based_route_target: Optional[pulumi.Input[str]] = None,
            vlan_based_route_target_both: Optional[pulumi.Input[str]] = None,
            vlan_based_route_target_export: Optional[pulumi.Input[str]] = None,
            vlan_based_route_target_import: Optional[pulumi.Input[str]] = None) -> 'EvpnInstance':
        """
        Get an existing EvpnInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] evpn_instance_num: evpn instance number - Range: `1`-`65535`
        :param pulumi.Input[bool] vlan_based_auto_route_target: Automatically set a route-target
        :param pulumi.Input[str] vlan_based_default_gateway_advertise: Advertise Default Gateway MAC/IP routes - Choices: `disable`, `enable`
        :param pulumi.Input[str] vlan_based_encapsulation: Data encapsulation method - Choices: `mpls`, `vxlan`
        :param pulumi.Input[bool] vlan_based_ip_local_learning_disable: Disable IP local learning from dataplane
        :param pulumi.Input[bool] vlan_based_ip_local_learning_enable: Enable IP local learning from dataplane
        :param pulumi.Input[str] vlan_based_rd: ASN:nn or IP-address:nn
        :param pulumi.Input[bool] vlan_based_re_originate_route_type5: Re-originate route-type 5
        :param pulumi.Input[bool] vlan_based_replication_type_ingress: Ingress replication
        :param pulumi.Input[bool] vlan_based_replication_type_mp2mp: mp2mp replication
        :param pulumi.Input[bool] vlan_based_replication_type_p2mp: p2mp replication
        :param pulumi.Input[bool] vlan_based_replication_type_static: Static replication
        :param pulumi.Input[str] vlan_based_route_target: ASN:nn or IP-address:nn
        :param pulumi.Input[str] vlan_based_route_target_both: ASN:nn or IP-address:nn
        :param pulumi.Input[str] vlan_based_route_target_export: ASN:nn or IP-address:nn (DEPRECATED, use rt-value-entry)
        :param pulumi.Input[str] vlan_based_route_target_import: ASN:nn or IP-address:nn (DEPRECATED, use rt-value-entry)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EvpnInstanceState.__new__(_EvpnInstanceState)

        __props__.__dict__["device"] = device
        __props__.__dict__["evpn_instance_num"] = evpn_instance_num
        __props__.__dict__["vlan_based_auto_route_target"] = vlan_based_auto_route_target
        __props__.__dict__["vlan_based_default_gateway_advertise"] = vlan_based_default_gateway_advertise
        __props__.__dict__["vlan_based_encapsulation"] = vlan_based_encapsulation
        __props__.__dict__["vlan_based_ip_local_learning_disable"] = vlan_based_ip_local_learning_disable
        __props__.__dict__["vlan_based_ip_local_learning_enable"] = vlan_based_ip_local_learning_enable
        __props__.__dict__["vlan_based_rd"] = vlan_based_rd
        __props__.__dict__["vlan_based_re_originate_route_type5"] = vlan_based_re_originate_route_type5
        __props__.__dict__["vlan_based_replication_type_ingress"] = vlan_based_replication_type_ingress
        __props__.__dict__["vlan_based_replication_type_mp2mp"] = vlan_based_replication_type_mp2mp
        __props__.__dict__["vlan_based_replication_type_p2mp"] = vlan_based_replication_type_p2mp
        __props__.__dict__["vlan_based_replication_type_static"] = vlan_based_replication_type_static
        __props__.__dict__["vlan_based_route_target"] = vlan_based_route_target
        __props__.__dict__["vlan_based_route_target_both"] = vlan_based_route_target_both
        __props__.__dict__["vlan_based_route_target_export"] = vlan_based_route_target_export
        __props__.__dict__["vlan_based_route_target_import"] = vlan_based_route_target_import
        return EvpnInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="evpnInstanceNum")
    def evpn_instance_num(self) -> pulumi.Output[int]:
        """
        evpn instance number - Range: `1`-`65535`
        """
        return pulumi.get(self, "evpn_instance_num")

    @property
    @pulumi.getter(name="vlanBasedAutoRouteTarget")
    def vlan_based_auto_route_target(self) -> pulumi.Output[Optional[bool]]:
        """
        Automatically set a route-target
        """
        return pulumi.get(self, "vlan_based_auto_route_target")

    @property
    @pulumi.getter(name="vlanBasedDefaultGatewayAdvertise")
    def vlan_based_default_gateway_advertise(self) -> pulumi.Output[Optional[str]]:
        """
        Advertise Default Gateway MAC/IP routes - Choices: `disable`, `enable`
        """
        return pulumi.get(self, "vlan_based_default_gateway_advertise")

    @property
    @pulumi.getter(name="vlanBasedEncapsulation")
    def vlan_based_encapsulation(self) -> pulumi.Output[Optional[str]]:
        """
        Data encapsulation method - Choices: `mpls`, `vxlan`
        """
        return pulumi.get(self, "vlan_based_encapsulation")

    @property
    @pulumi.getter(name="vlanBasedIpLocalLearningDisable")
    def vlan_based_ip_local_learning_disable(self) -> pulumi.Output[Optional[bool]]:
        """
        Disable IP local learning from dataplane
        """
        return pulumi.get(self, "vlan_based_ip_local_learning_disable")

    @property
    @pulumi.getter(name="vlanBasedIpLocalLearningEnable")
    def vlan_based_ip_local_learning_enable(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable IP local learning from dataplane
        """
        return pulumi.get(self, "vlan_based_ip_local_learning_enable")

    @property
    @pulumi.getter(name="vlanBasedRd")
    def vlan_based_rd(self) -> pulumi.Output[Optional[str]]:
        """
        ASN:nn or IP-address:nn
        """
        return pulumi.get(self, "vlan_based_rd")

    @property
    @pulumi.getter(name="vlanBasedReOriginateRouteType5")
    def vlan_based_re_originate_route_type5(self) -> pulumi.Output[Optional[bool]]:
        """
        Re-originate route-type 5
        """
        return pulumi.get(self, "vlan_based_re_originate_route_type5")

    @property
    @pulumi.getter(name="vlanBasedReplicationTypeIngress")
    def vlan_based_replication_type_ingress(self) -> pulumi.Output[Optional[bool]]:
        """
        Ingress replication
        """
        return pulumi.get(self, "vlan_based_replication_type_ingress")

    @property
    @pulumi.getter(name="vlanBasedReplicationTypeMp2mp")
    def vlan_based_replication_type_mp2mp(self) -> pulumi.Output[Optional[bool]]:
        """
        mp2mp replication
        """
        return pulumi.get(self, "vlan_based_replication_type_mp2mp")

    @property
    @pulumi.getter(name="vlanBasedReplicationTypeP2mp")
    def vlan_based_replication_type_p2mp(self) -> pulumi.Output[Optional[bool]]:
        """
        p2mp replication
        """
        return pulumi.get(self, "vlan_based_replication_type_p2mp")

    @property
    @pulumi.getter(name="vlanBasedReplicationTypeStatic")
    def vlan_based_replication_type_static(self) -> pulumi.Output[Optional[bool]]:
        """
        Static replication
        """
        return pulumi.get(self, "vlan_based_replication_type_static")

    @property
    @pulumi.getter(name="vlanBasedRouteTarget")
    def vlan_based_route_target(self) -> pulumi.Output[Optional[str]]:
        """
        ASN:nn or IP-address:nn
        """
        return pulumi.get(self, "vlan_based_route_target")

    @property
    @pulumi.getter(name="vlanBasedRouteTargetBoth")
    def vlan_based_route_target_both(self) -> pulumi.Output[Optional[str]]:
        """
        ASN:nn or IP-address:nn
        """
        return pulumi.get(self, "vlan_based_route_target_both")

    @property
    @pulumi.getter(name="vlanBasedRouteTargetExport")
    def vlan_based_route_target_export(self) -> pulumi.Output[Optional[str]]:
        """
        ASN:nn or IP-address:nn (DEPRECATED, use rt-value-entry)
        """
        return pulumi.get(self, "vlan_based_route_target_export")

    @property
    @pulumi.getter(name="vlanBasedRouteTargetImport")
    def vlan_based_route_target_import(self) -> pulumi.Output[Optional[str]]:
        """
        ASN:nn or IP-address:nn (DEPRECATED, use rt-value-entry)
        """
        return pulumi.get(self, "vlan_based_route_target_import")

