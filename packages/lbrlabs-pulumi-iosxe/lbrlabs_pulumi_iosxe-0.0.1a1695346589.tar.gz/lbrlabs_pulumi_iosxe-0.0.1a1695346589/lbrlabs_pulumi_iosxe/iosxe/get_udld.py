# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetUdldResult',
    'AwaitableGetUdldResult',
    'get_udld',
    'get_udld_output',
]

@pulumi.output_type
class GetUdldResult:
    """
    A collection of values returned by getUdld.
    """
    def __init__(__self__, aggressive=None, device=None, enable=None, id=None, message_time=None, recovery_interval=None):
        if aggressive and not isinstance(aggressive, bool):
            raise TypeError("Expected argument 'aggressive' to be a bool")
        pulumi.set(__self__, "aggressive", aggressive)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if enable and not isinstance(enable, bool):
            raise TypeError("Expected argument 'enable' to be a bool")
        pulumi.set(__self__, "enable", enable)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if message_time and not isinstance(message_time, int):
            raise TypeError("Expected argument 'message_time' to be a int")
        pulumi.set(__self__, "message_time", message_time)
        if recovery_interval and not isinstance(recovery_interval, int):
            raise TypeError("Expected argument 'recovery_interval' to be a int")
        pulumi.set(__self__, "recovery_interval", recovery_interval)

    @property
    @pulumi.getter
    def aggressive(self) -> bool:
        """
        Enable UDLD protocol in aggressive mode on fiber ports exceptwhere locally configured
        """
        return pulumi.get(self, "aggressive")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def enable(self) -> bool:
        """
        Enable UDLD protocol on fiber ports except where locally configured
        """
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The path of the retrieved object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="messageTime")
    def message_time(self) -> int:
        """
        Set UDLD message time period
        """
        return pulumi.get(self, "message_time")

    @property
    @pulumi.getter(name="recoveryInterval")
    def recovery_interval(self) -> int:
        """
        timer-interval(sec)
        """
        return pulumi.get(self, "recovery_interval")


class AwaitableGetUdldResult(GetUdldResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUdldResult(
            aggressive=self.aggressive,
            device=self.device,
            enable=self.enable,
            id=self.id,
            message_time=self.message_time,
            recovery_interval=self.recovery_interval)


def get_udld(device: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUdldResult:
    """
    This data source can read the UDLD configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.iosxe.get_udld()
    ```


    :param str device: A device name from the provider configuration.
    """
    __args__ = dict()
    __args__['device'] = device
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:iosxe/getUdld:getUdld', __args__, opts=opts, typ=GetUdldResult).value

    return AwaitableGetUdldResult(
        aggressive=pulumi.get(__ret__, 'aggressive'),
        device=pulumi.get(__ret__, 'device'),
        enable=pulumi.get(__ret__, 'enable'),
        id=pulumi.get(__ret__, 'id'),
        message_time=pulumi.get(__ret__, 'message_time'),
        recovery_interval=pulumi.get(__ret__, 'recovery_interval'))


@_utilities.lift_output_func(get_udld)
def get_udld_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUdldResult]:
    """
    This data source can read the UDLD configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.iosxe.get_udld()
    ```


    :param str device: A device name from the provider configuration.
    """
    ...
