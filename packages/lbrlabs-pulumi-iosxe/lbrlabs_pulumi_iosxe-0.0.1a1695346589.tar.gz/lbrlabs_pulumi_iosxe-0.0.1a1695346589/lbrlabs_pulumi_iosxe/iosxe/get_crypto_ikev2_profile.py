# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetCryptoIkev2ProfileResult',
    'AwaitableGetCryptoIkev2ProfileResult',
    'get_crypto_ikev2_profile',
    'get_crypto_ikev2_profile_output',
]

@pulumi.output_type
class GetCryptoIkev2ProfileResult:
    """
    A collection of values returned by getCryptoIkev2Profile.
    """
    def __init__(__self__, authentication_local_pre_share=None, authentication_remote_pre_share=None, config_exchange_request=None, description=None, device=None, dpd_interval=None, dpd_query=None, dpd_retry=None, id=None, identity_local_address=None, identity_local_key_id=None, keyring_local=None, match_address_local_ip=None, match_fvrf=None, match_fvrf_any=None, match_identity_remote_ipv4_addresses=None, match_identity_remote_ipv6_prefixes=None, match_identity_remote_keys=None, match_inbound_only=None, name=None):
        if authentication_local_pre_share and not isinstance(authentication_local_pre_share, bool):
            raise TypeError("Expected argument 'authentication_local_pre_share' to be a bool")
        pulumi.set(__self__, "authentication_local_pre_share", authentication_local_pre_share)
        if authentication_remote_pre_share and not isinstance(authentication_remote_pre_share, bool):
            raise TypeError("Expected argument 'authentication_remote_pre_share' to be a bool")
        pulumi.set(__self__, "authentication_remote_pre_share", authentication_remote_pre_share)
        if config_exchange_request and not isinstance(config_exchange_request, bool):
            raise TypeError("Expected argument 'config_exchange_request' to be a bool")
        pulumi.set(__self__, "config_exchange_request", config_exchange_request)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if dpd_interval and not isinstance(dpd_interval, int):
            raise TypeError("Expected argument 'dpd_interval' to be a int")
        pulumi.set(__self__, "dpd_interval", dpd_interval)
        if dpd_query and not isinstance(dpd_query, str):
            raise TypeError("Expected argument 'dpd_query' to be a str")
        pulumi.set(__self__, "dpd_query", dpd_query)
        if dpd_retry and not isinstance(dpd_retry, int):
            raise TypeError("Expected argument 'dpd_retry' to be a int")
        pulumi.set(__self__, "dpd_retry", dpd_retry)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identity_local_address and not isinstance(identity_local_address, str):
            raise TypeError("Expected argument 'identity_local_address' to be a str")
        pulumi.set(__self__, "identity_local_address", identity_local_address)
        if identity_local_key_id and not isinstance(identity_local_key_id, str):
            raise TypeError("Expected argument 'identity_local_key_id' to be a str")
        pulumi.set(__self__, "identity_local_key_id", identity_local_key_id)
        if keyring_local and not isinstance(keyring_local, str):
            raise TypeError("Expected argument 'keyring_local' to be a str")
        pulumi.set(__self__, "keyring_local", keyring_local)
        if match_address_local_ip and not isinstance(match_address_local_ip, str):
            raise TypeError("Expected argument 'match_address_local_ip' to be a str")
        pulumi.set(__self__, "match_address_local_ip", match_address_local_ip)
        if match_fvrf and not isinstance(match_fvrf, str):
            raise TypeError("Expected argument 'match_fvrf' to be a str")
        pulumi.set(__self__, "match_fvrf", match_fvrf)
        if match_fvrf_any and not isinstance(match_fvrf_any, bool):
            raise TypeError("Expected argument 'match_fvrf_any' to be a bool")
        pulumi.set(__self__, "match_fvrf_any", match_fvrf_any)
        if match_identity_remote_ipv4_addresses and not isinstance(match_identity_remote_ipv4_addresses, list):
            raise TypeError("Expected argument 'match_identity_remote_ipv4_addresses' to be a list")
        pulumi.set(__self__, "match_identity_remote_ipv4_addresses", match_identity_remote_ipv4_addresses)
        if match_identity_remote_ipv6_prefixes and not isinstance(match_identity_remote_ipv6_prefixes, list):
            raise TypeError("Expected argument 'match_identity_remote_ipv6_prefixes' to be a list")
        pulumi.set(__self__, "match_identity_remote_ipv6_prefixes", match_identity_remote_ipv6_prefixes)
        if match_identity_remote_keys and not isinstance(match_identity_remote_keys, list):
            raise TypeError("Expected argument 'match_identity_remote_keys' to be a list")
        pulumi.set(__self__, "match_identity_remote_keys", match_identity_remote_keys)
        if match_inbound_only and not isinstance(match_inbound_only, bool):
            raise TypeError("Expected argument 'match_inbound_only' to be a bool")
        pulumi.set(__self__, "match_inbound_only", match_inbound_only)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="authenticationLocalPreShare")
    def authentication_local_pre_share(self) -> bool:
        """
        Pre-Shared Key
        """
        return pulumi.get(self, "authentication_local_pre_share")

    @property
    @pulumi.getter(name="authenticationRemotePreShare")
    def authentication_remote_pre_share(self) -> bool:
        """
        Pre-Shared Key
        """
        return pulumi.get(self, "authentication_remote_pre_share")

    @property
    @pulumi.getter(name="configExchangeRequest")
    def config_exchange_request(self) -> bool:
        """
        enable config-exchange request
        """
        return pulumi.get(self, "config_exchange_request")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Specify a description of this profile
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="dpdInterval")
    def dpd_interval(self) -> int:
        return pulumi.get(self, "dpd_interval")

    @property
    @pulumi.getter(name="dpdQuery")
    def dpd_query(self) -> str:
        return pulumi.get(self, "dpd_query")

    @property
    @pulumi.getter(name="dpdRetry")
    def dpd_retry(self) -> int:
        return pulumi.get(self, "dpd_retry")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The path of the retrieved object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="identityLocalAddress")
    def identity_local_address(self) -> str:
        """
        address
        """
        return pulumi.get(self, "identity_local_address")

    @property
    @pulumi.getter(name="identityLocalKeyId")
    def identity_local_key_id(self) -> str:
        """
        key-id opaque string - proprietary types of identification key-id string
        """
        return pulumi.get(self, "identity_local_key_id")

    @property
    @pulumi.getter(name="keyringLocal")
    def keyring_local(self) -> str:
        """
        Keyring name
        """
        return pulumi.get(self, "keyring_local")

    @property
    @pulumi.getter(name="matchAddressLocalIp")
    def match_address_local_ip(self) -> str:
        return pulumi.get(self, "match_address_local_ip")

    @property
    @pulumi.getter(name="matchFvrf")
    def match_fvrf(self) -> str:
        return pulumi.get(self, "match_fvrf")

    @property
    @pulumi.getter(name="matchFvrfAny")
    def match_fvrf_any(self) -> bool:
        """
        Any fvrf
        """
        return pulumi.get(self, "match_fvrf_any")

    @property
    @pulumi.getter(name="matchIdentityRemoteIpv4Addresses")
    def match_identity_remote_ipv4_addresses(self) -> Sequence['outputs.GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressResult']:
        return pulumi.get(self, "match_identity_remote_ipv4_addresses")

    @property
    @pulumi.getter(name="matchIdentityRemoteIpv6Prefixes")
    def match_identity_remote_ipv6_prefixes(self) -> Sequence[str]:
        return pulumi.get(self, "match_identity_remote_ipv6_prefixes")

    @property
    @pulumi.getter(name="matchIdentityRemoteKeys")
    def match_identity_remote_keys(self) -> Sequence[str]:
        """
        key-id opaque string
        """
        return pulumi.get(self, "match_identity_remote_keys")

    @property
    @pulumi.getter(name="matchInboundOnly")
    def match_inbound_only(self) -> bool:
        """
        Match the profile for incoming connections only
        """
        return pulumi.get(self, "match_inbound_only")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


class AwaitableGetCryptoIkev2ProfileResult(GetCryptoIkev2ProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCryptoIkev2ProfileResult(
            authentication_local_pre_share=self.authentication_local_pre_share,
            authentication_remote_pre_share=self.authentication_remote_pre_share,
            config_exchange_request=self.config_exchange_request,
            description=self.description,
            device=self.device,
            dpd_interval=self.dpd_interval,
            dpd_query=self.dpd_query,
            dpd_retry=self.dpd_retry,
            id=self.id,
            identity_local_address=self.identity_local_address,
            identity_local_key_id=self.identity_local_key_id,
            keyring_local=self.keyring_local,
            match_address_local_ip=self.match_address_local_ip,
            match_fvrf=self.match_fvrf,
            match_fvrf_any=self.match_fvrf_any,
            match_identity_remote_ipv4_addresses=self.match_identity_remote_ipv4_addresses,
            match_identity_remote_ipv6_prefixes=self.match_identity_remote_ipv6_prefixes,
            match_identity_remote_keys=self.match_identity_remote_keys,
            match_inbound_only=self.match_inbound_only,
            name=self.name)


def get_crypto_ikev2_profile(device: Optional[str] = None,
                             name: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCryptoIkev2ProfileResult:
    """
    This data source can read the Crypto IKEv2 Profile configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.iosxe.get_crypto_ikev2_profile(name="profile1")
    ```


    :param str device: A device name from the provider configuration.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:iosxe/getCryptoIkev2Profile:getCryptoIkev2Profile', __args__, opts=opts, typ=GetCryptoIkev2ProfileResult).value

    return AwaitableGetCryptoIkev2ProfileResult(
        authentication_local_pre_share=pulumi.get(__ret__, 'authentication_local_pre_share'),
        authentication_remote_pre_share=pulumi.get(__ret__, 'authentication_remote_pre_share'),
        config_exchange_request=pulumi.get(__ret__, 'config_exchange_request'),
        description=pulumi.get(__ret__, 'description'),
        device=pulumi.get(__ret__, 'device'),
        dpd_interval=pulumi.get(__ret__, 'dpd_interval'),
        dpd_query=pulumi.get(__ret__, 'dpd_query'),
        dpd_retry=pulumi.get(__ret__, 'dpd_retry'),
        id=pulumi.get(__ret__, 'id'),
        identity_local_address=pulumi.get(__ret__, 'identity_local_address'),
        identity_local_key_id=pulumi.get(__ret__, 'identity_local_key_id'),
        keyring_local=pulumi.get(__ret__, 'keyring_local'),
        match_address_local_ip=pulumi.get(__ret__, 'match_address_local_ip'),
        match_fvrf=pulumi.get(__ret__, 'match_fvrf'),
        match_fvrf_any=pulumi.get(__ret__, 'match_fvrf_any'),
        match_identity_remote_ipv4_addresses=pulumi.get(__ret__, 'match_identity_remote_ipv4_addresses'),
        match_identity_remote_ipv6_prefixes=pulumi.get(__ret__, 'match_identity_remote_ipv6_prefixes'),
        match_identity_remote_keys=pulumi.get(__ret__, 'match_identity_remote_keys'),
        match_inbound_only=pulumi.get(__ret__, 'match_inbound_only'),
        name=pulumi.get(__ret__, 'name'))


@_utilities.lift_output_func(get_crypto_ikev2_profile)
def get_crypto_ikev2_profile_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                                    name: Optional[pulumi.Input[str]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCryptoIkev2ProfileResult]:
    """
    This data source can read the Crypto IKEv2 Profile configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.iosxe.get_crypto_ikev2_profile(name="profile1")
    ```


    :param str device: A device name from the provider configuration.
    """
    ...
