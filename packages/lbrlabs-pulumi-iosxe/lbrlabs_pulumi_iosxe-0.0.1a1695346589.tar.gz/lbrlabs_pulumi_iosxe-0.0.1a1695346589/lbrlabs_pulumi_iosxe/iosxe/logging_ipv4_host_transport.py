# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['LoggingIpv4HostTransportArgs', 'LoggingIpv4HostTransport']

@pulumi.input_type
class LoggingIpv4HostTransportArgs:
    def __init__(__self__, *,
                 ipv4_host: pulumi.Input[str],
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 transport_tcp_ports: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostTransportTransportTcpPortArgs']]]] = None,
                 transport_tls_ports: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostTransportTransportTlsPortArgs']]]] = None,
                 transport_udp_ports: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostTransportTransportUdpPortArgs']]]] = None):
        """
        The set of arguments for constructing a LoggingIpv4HostTransport resource.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostTransportTransportTcpPortArgs']]] transport_tcp_ports: Port Number List
        :param pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostTransportTransportTlsPortArgs']]] transport_tls_ports: Port Number List
        :param pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostTransportTransportUdpPortArgs']]] transport_udp_ports: Port Number List
        """
        pulumi.set(__self__, "ipv4_host", ipv4_host)
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if transport_tcp_ports is not None:
            pulumi.set(__self__, "transport_tcp_ports", transport_tcp_ports)
        if transport_tls_ports is not None:
            pulumi.set(__self__, "transport_tls_ports", transport_tls_ports)
        if transport_udp_ports is not None:
            pulumi.set(__self__, "transport_udp_ports", transport_udp_ports)

    @property
    @pulumi.getter(name="ipv4Host")
    def ipv4_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ipv4_host")

    @ipv4_host.setter
    def ipv4_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "ipv4_host", value)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="transportTcpPorts")
    def transport_tcp_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostTransportTransportTcpPortArgs']]]]:
        """
        Port Number List
        """
        return pulumi.get(self, "transport_tcp_ports")

    @transport_tcp_ports.setter
    def transport_tcp_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostTransportTransportTcpPortArgs']]]]):
        pulumi.set(self, "transport_tcp_ports", value)

    @property
    @pulumi.getter(name="transportTlsPorts")
    def transport_tls_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostTransportTransportTlsPortArgs']]]]:
        """
        Port Number List
        """
        return pulumi.get(self, "transport_tls_ports")

    @transport_tls_ports.setter
    def transport_tls_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostTransportTransportTlsPortArgs']]]]):
        pulumi.set(self, "transport_tls_ports", value)

    @property
    @pulumi.getter(name="transportUdpPorts")
    def transport_udp_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostTransportTransportUdpPortArgs']]]]:
        """
        Port Number List
        """
        return pulumi.get(self, "transport_udp_ports")

    @transport_udp_ports.setter
    def transport_udp_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostTransportTransportUdpPortArgs']]]]):
        pulumi.set(self, "transport_udp_ports", value)


@pulumi.input_type
class _LoggingIpv4HostTransportState:
    def __init__(__self__, *,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 ipv4_host: Optional[pulumi.Input[str]] = None,
                 transport_tcp_ports: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostTransportTransportTcpPortArgs']]]] = None,
                 transport_tls_ports: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostTransportTransportTlsPortArgs']]]] = None,
                 transport_udp_ports: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostTransportTransportUdpPortArgs']]]] = None):
        """
        Input properties used for looking up and filtering LoggingIpv4HostTransport resources.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostTransportTransportTcpPortArgs']]] transport_tcp_ports: Port Number List
        :param pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostTransportTransportTlsPortArgs']]] transport_tls_ports: Port Number List
        :param pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostTransportTransportUdpPortArgs']]] transport_udp_ports: Port Number List
        """
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if ipv4_host is not None:
            pulumi.set(__self__, "ipv4_host", ipv4_host)
        if transport_tcp_ports is not None:
            pulumi.set(__self__, "transport_tcp_ports", transport_tcp_ports)
        if transport_tls_ports is not None:
            pulumi.set(__self__, "transport_tls_ports", transport_tls_ports)
        if transport_udp_ports is not None:
            pulumi.set(__self__, "transport_udp_ports", transport_udp_ports)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="ipv4Host")
    def ipv4_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_host")

    @ipv4_host.setter
    def ipv4_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_host", value)

    @property
    @pulumi.getter(name="transportTcpPorts")
    def transport_tcp_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostTransportTransportTcpPortArgs']]]]:
        """
        Port Number List
        """
        return pulumi.get(self, "transport_tcp_ports")

    @transport_tcp_ports.setter
    def transport_tcp_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostTransportTransportTcpPortArgs']]]]):
        pulumi.set(self, "transport_tcp_ports", value)

    @property
    @pulumi.getter(name="transportTlsPorts")
    def transport_tls_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostTransportTransportTlsPortArgs']]]]:
        """
        Port Number List
        """
        return pulumi.get(self, "transport_tls_ports")

    @transport_tls_ports.setter
    def transport_tls_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostTransportTransportTlsPortArgs']]]]):
        pulumi.set(self, "transport_tls_ports", value)

    @property
    @pulumi.getter(name="transportUdpPorts")
    def transport_udp_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostTransportTransportUdpPortArgs']]]]:
        """
        Port Number List
        """
        return pulumi.get(self, "transport_udp_ports")

    @transport_udp_ports.setter
    def transport_udp_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LoggingIpv4HostTransportTransportUdpPortArgs']]]]):
        pulumi.set(self, "transport_udp_ports", value)


class LoggingIpv4HostTransport(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 ipv4_host: Optional[pulumi.Input[str]] = None,
                 transport_tcp_ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingIpv4HostTransportTransportTcpPortArgs']]]]] = None,
                 transport_tls_ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingIpv4HostTransportTransportTlsPortArgs']]]]] = None,
                 transport_udp_ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingIpv4HostTransportTransportUdpPortArgs']]]]] = None,
                 __props__=None):
        """
        This resource can manage the Logging IPv4 Host Transport configuration.

        ## Import

        ```sh
         $ pulumi import iosxe:iosxe/loggingIpv4HostTransport:LoggingIpv4HostTransport example "Cisco-IOS-XE-native:native/logging/host/ipv4-host-transport-list=2.2.2.2"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingIpv4HostTransportTransportTcpPortArgs']]]] transport_tcp_ports: Port Number List
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingIpv4HostTransportTransportTlsPortArgs']]]] transport_tls_ports: Port Number List
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingIpv4HostTransportTransportUdpPortArgs']]]] transport_udp_ports: Port Number List
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LoggingIpv4HostTransportArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the Logging IPv4 Host Transport configuration.

        ## Import

        ```sh
         $ pulumi import iosxe:iosxe/loggingIpv4HostTransport:LoggingIpv4HostTransport example "Cisco-IOS-XE-native:native/logging/host/ipv4-host-transport-list=2.2.2.2"
        ```

        :param str resource_name: The name of the resource.
        :param LoggingIpv4HostTransportArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LoggingIpv4HostTransportArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 ipv4_host: Optional[pulumi.Input[str]] = None,
                 transport_tcp_ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingIpv4HostTransportTransportTcpPortArgs']]]]] = None,
                 transport_tls_ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingIpv4HostTransportTransportTlsPortArgs']]]]] = None,
                 transport_udp_ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingIpv4HostTransportTransportUdpPortArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LoggingIpv4HostTransportArgs.__new__(LoggingIpv4HostTransportArgs)

            __props__.__dict__["delete_mode"] = delete_mode
            __props__.__dict__["device"] = device
            if ipv4_host is None and not opts.urn:
                raise TypeError("Missing required property 'ipv4_host'")
            __props__.__dict__["ipv4_host"] = ipv4_host
            __props__.__dict__["transport_tcp_ports"] = transport_tcp_ports
            __props__.__dict__["transport_tls_ports"] = transport_tls_ports
            __props__.__dict__["transport_udp_ports"] = transport_udp_ports
        super(LoggingIpv4HostTransport, __self__).__init__(
            'iosxe:iosxe/loggingIpv4HostTransport:LoggingIpv4HostTransport',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            delete_mode: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            ipv4_host: Optional[pulumi.Input[str]] = None,
            transport_tcp_ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingIpv4HostTransportTransportTcpPortArgs']]]]] = None,
            transport_tls_ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingIpv4HostTransportTransportTlsPortArgs']]]]] = None,
            transport_udp_ports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingIpv4HostTransportTransportUdpPortArgs']]]]] = None) -> 'LoggingIpv4HostTransport':
        """
        Get an existing LoggingIpv4HostTransport resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingIpv4HostTransportTransportTcpPortArgs']]]] transport_tcp_ports: Port Number List
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingIpv4HostTransportTransportTlsPortArgs']]]] transport_tls_ports: Port Number List
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['LoggingIpv4HostTransportTransportUdpPortArgs']]]] transport_udp_ports: Port Number List
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _LoggingIpv4HostTransportState.__new__(_LoggingIpv4HostTransportState)

        __props__.__dict__["delete_mode"] = delete_mode
        __props__.__dict__["device"] = device
        __props__.__dict__["ipv4_host"] = ipv4_host
        __props__.__dict__["transport_tcp_ports"] = transport_tcp_ports
        __props__.__dict__["transport_tls_ports"] = transport_tls_ports
        __props__.__dict__["transport_udp_ports"] = transport_udp_ports
        return LoggingIpv4HostTransport(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="ipv4Host")
    def ipv4_host(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ipv4_host")

    @property
    @pulumi.getter(name="transportTcpPorts")
    def transport_tcp_ports(self) -> pulumi.Output[Optional[Sequence['outputs.LoggingIpv4HostTransportTransportTcpPort']]]:
        """
        Port Number List
        """
        return pulumi.get(self, "transport_tcp_ports")

    @property
    @pulumi.getter(name="transportTlsPorts")
    def transport_tls_ports(self) -> pulumi.Output[Optional[Sequence['outputs.LoggingIpv4HostTransportTransportTlsPort']]]:
        """
        Port Number List
        """
        return pulumi.get(self, "transport_tls_ports")

    @property
    @pulumi.getter(name="transportUdpPorts")
    def transport_udp_ports(self) -> pulumi.Output[Optional[Sequence['outputs.LoggingIpv4HostTransportTransportUdpPort']]]:
        """
        Port Number List
        """
        return pulumi.get(self, "transport_udp_ports")

