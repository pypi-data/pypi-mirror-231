# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetTacacsServerResult',
    'AwaitableGetTacacsServerResult',
    'get_tacacs_server',
    'get_tacacs_server_output',
]

@pulumi.output_type
class GetTacacsServerResult:
    """
    A collection of values returned by getTacacsServer.
    """
    def __init__(__self__, address_ipv4=None, device=None, id=None, key=None, name=None, timeout=None):
        if address_ipv4 and not isinstance(address_ipv4, str):
            raise TypeError("Expected argument 'address_ipv4' to be a str")
        pulumi.set(__self__, "address_ipv4", address_ipv4)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key and not isinstance(key, str):
            raise TypeError("Expected argument 'key' to be a str")
        pulumi.set(__self__, "key", key)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if timeout and not isinstance(timeout, int):
            raise TypeError("Expected argument 'timeout' to be a int")
        pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="addressIpv4")
    def address_ipv4(self) -> str:
        """
        IPv4 address or Hostname for tacacs server
        """
        return pulumi.get(self, "address_ipv4")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The path of the retrieved object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The UNENCRYPTED (cleartext) server key
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name for the tacacs server configuration
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        """
        Time to wait for this TACACS server to reply (overrides default)
        """
        return pulumi.get(self, "timeout")


class AwaitableGetTacacsServerResult(GetTacacsServerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTacacsServerResult(
            address_ipv4=self.address_ipv4,
            device=self.device,
            id=self.id,
            key=self.key,
            name=self.name,
            timeout=self.timeout)


def get_tacacs_server(device: Optional[str] = None,
                      name: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTacacsServerResult:
    """
    This data source can read the TACACS Server configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.iosxe.get_tacacs_server(name="tacacs_10.10.15.13")
    ```


    :param str device: A device name from the provider configuration.
    :param str name: Name for the tacacs server configuration
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:iosxe/getTacacsServer:getTacacsServer', __args__, opts=opts, typ=GetTacacsServerResult).value

    return AwaitableGetTacacsServerResult(
        address_ipv4=pulumi.get(__ret__, 'address_ipv4'),
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        key=pulumi.get(__ret__, 'key'),
        name=pulumi.get(__ret__, 'name'),
        timeout=pulumi.get(__ret__, 'timeout'))


@_utilities.lift_output_func(get_tacacs_server)
def get_tacacs_server_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                             name: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTacacsServerResult]:
    """
    This data source can read the TACACS Server configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.iosxe.get_tacacs_server(name="tacacs_10.10.15.13")
    ```


    :param str device: A device name from the provider configuration.
    :param str name: Name for the tacacs server configuration
    """
    ...
