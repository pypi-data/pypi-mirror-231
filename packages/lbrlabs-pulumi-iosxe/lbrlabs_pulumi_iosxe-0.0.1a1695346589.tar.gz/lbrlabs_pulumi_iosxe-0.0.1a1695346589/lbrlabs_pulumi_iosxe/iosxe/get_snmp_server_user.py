# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetSnmpServerUserResult',
    'AwaitableGetSnmpServerUserResult',
    'get_snmp_server_user',
    'get_snmp_server_user_output',
]

@pulumi.output_type
class GetSnmpServerUserResult:
    """
    A collection of values returned by getSnmpServerUser.
    """
    def __init__(__self__, device=None, grpname=None, id=None, username=None, v3_auth_access_acl_name=None, v3_auth_access_ipv6_acl=None, v3_auth_access_standard_acl=None, v3_auth_algorithm=None, v3_auth_password=None, v3_auth_priv_aes_access_acl_name=None, v3_auth_priv_aes_access_ipv6_acl=None, v3_auth_priv_aes_access_standard_acl=None, v3_auth_priv_aes_algorithm=None, v3_auth_priv_aes_password=None, v3_auth_priv_des3_access_acl_name=None, v3_auth_priv_des3_access_ipv6_acl=None, v3_auth_priv_des3_access_standard_acl=None, v3_auth_priv_des3_password=None, v3_auth_priv_des_access_acl_name=None, v3_auth_priv_des_access_ipv6_acl=None, v3_auth_priv_des_access_standard_acl=None, v3_auth_priv_des_password=None):
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if grpname and not isinstance(grpname, str):
            raise TypeError("Expected argument 'grpname' to be a str")
        pulumi.set(__self__, "grpname", grpname)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)
        if v3_auth_access_acl_name and not isinstance(v3_auth_access_acl_name, str):
            raise TypeError("Expected argument 'v3_auth_access_acl_name' to be a str")
        pulumi.set(__self__, "v3_auth_access_acl_name", v3_auth_access_acl_name)
        if v3_auth_access_ipv6_acl and not isinstance(v3_auth_access_ipv6_acl, str):
            raise TypeError("Expected argument 'v3_auth_access_ipv6_acl' to be a str")
        pulumi.set(__self__, "v3_auth_access_ipv6_acl", v3_auth_access_ipv6_acl)
        if v3_auth_access_standard_acl and not isinstance(v3_auth_access_standard_acl, int):
            raise TypeError("Expected argument 'v3_auth_access_standard_acl' to be a int")
        pulumi.set(__self__, "v3_auth_access_standard_acl", v3_auth_access_standard_acl)
        if v3_auth_algorithm and not isinstance(v3_auth_algorithm, str):
            raise TypeError("Expected argument 'v3_auth_algorithm' to be a str")
        pulumi.set(__self__, "v3_auth_algorithm", v3_auth_algorithm)
        if v3_auth_password and not isinstance(v3_auth_password, str):
            raise TypeError("Expected argument 'v3_auth_password' to be a str")
        pulumi.set(__self__, "v3_auth_password", v3_auth_password)
        if v3_auth_priv_aes_access_acl_name and not isinstance(v3_auth_priv_aes_access_acl_name, str):
            raise TypeError("Expected argument 'v3_auth_priv_aes_access_acl_name' to be a str")
        pulumi.set(__self__, "v3_auth_priv_aes_access_acl_name", v3_auth_priv_aes_access_acl_name)
        if v3_auth_priv_aes_access_ipv6_acl and not isinstance(v3_auth_priv_aes_access_ipv6_acl, str):
            raise TypeError("Expected argument 'v3_auth_priv_aes_access_ipv6_acl' to be a str")
        pulumi.set(__self__, "v3_auth_priv_aes_access_ipv6_acl", v3_auth_priv_aes_access_ipv6_acl)
        if v3_auth_priv_aes_access_standard_acl and not isinstance(v3_auth_priv_aes_access_standard_acl, int):
            raise TypeError("Expected argument 'v3_auth_priv_aes_access_standard_acl' to be a int")
        pulumi.set(__self__, "v3_auth_priv_aes_access_standard_acl", v3_auth_priv_aes_access_standard_acl)
        if v3_auth_priv_aes_algorithm and not isinstance(v3_auth_priv_aes_algorithm, str):
            raise TypeError("Expected argument 'v3_auth_priv_aes_algorithm' to be a str")
        pulumi.set(__self__, "v3_auth_priv_aes_algorithm", v3_auth_priv_aes_algorithm)
        if v3_auth_priv_aes_password and not isinstance(v3_auth_priv_aes_password, str):
            raise TypeError("Expected argument 'v3_auth_priv_aes_password' to be a str")
        pulumi.set(__self__, "v3_auth_priv_aes_password", v3_auth_priv_aes_password)
        if v3_auth_priv_des3_access_acl_name and not isinstance(v3_auth_priv_des3_access_acl_name, str):
            raise TypeError("Expected argument 'v3_auth_priv_des3_access_acl_name' to be a str")
        pulumi.set(__self__, "v3_auth_priv_des3_access_acl_name", v3_auth_priv_des3_access_acl_name)
        if v3_auth_priv_des3_access_ipv6_acl and not isinstance(v3_auth_priv_des3_access_ipv6_acl, str):
            raise TypeError("Expected argument 'v3_auth_priv_des3_access_ipv6_acl' to be a str")
        pulumi.set(__self__, "v3_auth_priv_des3_access_ipv6_acl", v3_auth_priv_des3_access_ipv6_acl)
        if v3_auth_priv_des3_access_standard_acl and not isinstance(v3_auth_priv_des3_access_standard_acl, int):
            raise TypeError("Expected argument 'v3_auth_priv_des3_access_standard_acl' to be a int")
        pulumi.set(__self__, "v3_auth_priv_des3_access_standard_acl", v3_auth_priv_des3_access_standard_acl)
        if v3_auth_priv_des3_password and not isinstance(v3_auth_priv_des3_password, str):
            raise TypeError("Expected argument 'v3_auth_priv_des3_password' to be a str")
        pulumi.set(__self__, "v3_auth_priv_des3_password", v3_auth_priv_des3_password)
        if v3_auth_priv_des_access_acl_name and not isinstance(v3_auth_priv_des_access_acl_name, str):
            raise TypeError("Expected argument 'v3_auth_priv_des_access_acl_name' to be a str")
        pulumi.set(__self__, "v3_auth_priv_des_access_acl_name", v3_auth_priv_des_access_acl_name)
        if v3_auth_priv_des_access_ipv6_acl and not isinstance(v3_auth_priv_des_access_ipv6_acl, str):
            raise TypeError("Expected argument 'v3_auth_priv_des_access_ipv6_acl' to be a str")
        pulumi.set(__self__, "v3_auth_priv_des_access_ipv6_acl", v3_auth_priv_des_access_ipv6_acl)
        if v3_auth_priv_des_access_standard_acl and not isinstance(v3_auth_priv_des_access_standard_acl, int):
            raise TypeError("Expected argument 'v3_auth_priv_des_access_standard_acl' to be a int")
        pulumi.set(__self__, "v3_auth_priv_des_access_standard_acl", v3_auth_priv_des_access_standard_acl)
        if v3_auth_priv_des_password and not isinstance(v3_auth_priv_des_password, str):
            raise TypeError("Expected argument 'v3_auth_priv_des_password' to be a str")
        pulumi.set(__self__, "v3_auth_priv_des_password", v3_auth_priv_des_password)

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def grpname(self) -> str:
        """
        Group to which the user belongs
        """
        return pulumi.get(self, "grpname")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The path of the retrieved object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def username(self) -> str:
        """
        Name of the user
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="v3AuthAccessAclName")
    def v3_auth_access_acl_name(self) -> str:
        """
        Access-list name
        """
        return pulumi.get(self, "v3_auth_access_acl_name")

    @property
    @pulumi.getter(name="v3AuthAccessIpv6Acl")
    def v3_auth_access_ipv6_acl(self) -> str:
        """
        Specify IPv6 Named Access-List
        """
        return pulumi.get(self, "v3_auth_access_ipv6_acl")

    @property
    @pulumi.getter(name="v3AuthAccessStandardAcl")
    def v3_auth_access_standard_acl(self) -> int:
        """
        Standard IP Access-list allowing access with this community string
        """
        return pulumi.get(self, "v3_auth_access_standard_acl")

    @property
    @pulumi.getter(name="v3AuthAlgorithm")
    def v3_auth_algorithm(self) -> str:
        """
        Use HMAC SHA/MD5 algorithm for authentication
        """
        return pulumi.get(self, "v3_auth_algorithm")

    @property
    @pulumi.getter(name="v3AuthPassword")
    def v3_auth_password(self) -> str:
        """
        Authentication password for user
        """
        return pulumi.get(self, "v3_auth_password")

    @property
    @pulumi.getter(name="v3AuthPrivAesAccessAclName")
    def v3_auth_priv_aes_access_acl_name(self) -> str:
        """
        Access-list name
        """
        return pulumi.get(self, "v3_auth_priv_aes_access_acl_name")

    @property
    @pulumi.getter(name="v3AuthPrivAesAccessIpv6Acl")
    def v3_auth_priv_aes_access_ipv6_acl(self) -> str:
        """
        Specify IPv6 Named Access-List
        """
        return pulumi.get(self, "v3_auth_priv_aes_access_ipv6_acl")

    @property
    @pulumi.getter(name="v3AuthPrivAesAccessStandardAcl")
    def v3_auth_priv_aes_access_standard_acl(self) -> int:
        """
        Standard IP Access-list allowing access with this community string
        """
        return pulumi.get(self, "v3_auth_priv_aes_access_standard_acl")

    @property
    @pulumi.getter(name="v3AuthPrivAesAlgorithm")
    def v3_auth_priv_aes_algorithm(self) -> str:
        return pulumi.get(self, "v3_auth_priv_aes_algorithm")

    @property
    @pulumi.getter(name="v3AuthPrivAesPassword")
    def v3_auth_priv_aes_password(self) -> str:
        """
        Authentication password for user
        """
        return pulumi.get(self, "v3_auth_priv_aes_password")

    @property
    @pulumi.getter(name="v3AuthPrivDes3AccessAclName")
    def v3_auth_priv_des3_access_acl_name(self) -> str:
        """
        Access-list name
        """
        return pulumi.get(self, "v3_auth_priv_des3_access_acl_name")

    @property
    @pulumi.getter(name="v3AuthPrivDes3AccessIpv6Acl")
    def v3_auth_priv_des3_access_ipv6_acl(self) -> str:
        """
        Specify IPv6 Named Access-List
        """
        return pulumi.get(self, "v3_auth_priv_des3_access_ipv6_acl")

    @property
    @pulumi.getter(name="v3AuthPrivDes3AccessStandardAcl")
    def v3_auth_priv_des3_access_standard_acl(self) -> int:
        """
        Standard IP Access-list allowing access with this community string
        """
        return pulumi.get(self, "v3_auth_priv_des3_access_standard_acl")

    @property
    @pulumi.getter(name="v3AuthPrivDes3Password")
    def v3_auth_priv_des3_password(self) -> str:
        """
        Authentication password for user
        """
        return pulumi.get(self, "v3_auth_priv_des3_password")

    @property
    @pulumi.getter(name="v3AuthPrivDesAccessAclName")
    def v3_auth_priv_des_access_acl_name(self) -> str:
        """
        Access-list name
        """
        return pulumi.get(self, "v3_auth_priv_des_access_acl_name")

    @property
    @pulumi.getter(name="v3AuthPrivDesAccessIpv6Acl")
    def v3_auth_priv_des_access_ipv6_acl(self) -> str:
        """
        Specify IPv6 Named Access-List
        """
        return pulumi.get(self, "v3_auth_priv_des_access_ipv6_acl")

    @property
    @pulumi.getter(name="v3AuthPrivDesAccessStandardAcl")
    def v3_auth_priv_des_access_standard_acl(self) -> int:
        """
        Standard IP Access-list allowing access with this community string
        """
        return pulumi.get(self, "v3_auth_priv_des_access_standard_acl")

    @property
    @pulumi.getter(name="v3AuthPrivDesPassword")
    def v3_auth_priv_des_password(self) -> str:
        """
        Authentication password for user
        """
        return pulumi.get(self, "v3_auth_priv_des_password")


class AwaitableGetSnmpServerUserResult(GetSnmpServerUserResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSnmpServerUserResult(
            device=self.device,
            grpname=self.grpname,
            id=self.id,
            username=self.username,
            v3_auth_access_acl_name=self.v3_auth_access_acl_name,
            v3_auth_access_ipv6_acl=self.v3_auth_access_ipv6_acl,
            v3_auth_access_standard_acl=self.v3_auth_access_standard_acl,
            v3_auth_algorithm=self.v3_auth_algorithm,
            v3_auth_password=self.v3_auth_password,
            v3_auth_priv_aes_access_acl_name=self.v3_auth_priv_aes_access_acl_name,
            v3_auth_priv_aes_access_ipv6_acl=self.v3_auth_priv_aes_access_ipv6_acl,
            v3_auth_priv_aes_access_standard_acl=self.v3_auth_priv_aes_access_standard_acl,
            v3_auth_priv_aes_algorithm=self.v3_auth_priv_aes_algorithm,
            v3_auth_priv_aes_password=self.v3_auth_priv_aes_password,
            v3_auth_priv_des3_access_acl_name=self.v3_auth_priv_des3_access_acl_name,
            v3_auth_priv_des3_access_ipv6_acl=self.v3_auth_priv_des3_access_ipv6_acl,
            v3_auth_priv_des3_access_standard_acl=self.v3_auth_priv_des3_access_standard_acl,
            v3_auth_priv_des3_password=self.v3_auth_priv_des3_password,
            v3_auth_priv_des_access_acl_name=self.v3_auth_priv_des_access_acl_name,
            v3_auth_priv_des_access_ipv6_acl=self.v3_auth_priv_des_access_ipv6_acl,
            v3_auth_priv_des_access_standard_acl=self.v3_auth_priv_des_access_standard_acl,
            v3_auth_priv_des_password=self.v3_auth_priv_des_password)


def get_snmp_server_user(device: Optional[str] = None,
                         grpname: Optional[str] = None,
                         username: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSnmpServerUserResult:
    """
    This data source can read the SNMP Server User configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.iosxe.get_snmp_server_user(grpname="GROUP1",
        username="USER1")
    ```


    :param str device: A device name from the provider configuration.
    :param str grpname: Group to which the user belongs
    :param str username: Name of the user
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['grpname'] = grpname
    __args__['username'] = username
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:iosxe/getSnmpServerUser:getSnmpServerUser', __args__, opts=opts, typ=GetSnmpServerUserResult).value

    return AwaitableGetSnmpServerUserResult(
        device=pulumi.get(__ret__, 'device'),
        grpname=pulumi.get(__ret__, 'grpname'),
        id=pulumi.get(__ret__, 'id'),
        username=pulumi.get(__ret__, 'username'),
        v3_auth_access_acl_name=pulumi.get(__ret__, 'v3_auth_access_acl_name'),
        v3_auth_access_ipv6_acl=pulumi.get(__ret__, 'v3_auth_access_ipv6_acl'),
        v3_auth_access_standard_acl=pulumi.get(__ret__, 'v3_auth_access_standard_acl'),
        v3_auth_algorithm=pulumi.get(__ret__, 'v3_auth_algorithm'),
        v3_auth_password=pulumi.get(__ret__, 'v3_auth_password'),
        v3_auth_priv_aes_access_acl_name=pulumi.get(__ret__, 'v3_auth_priv_aes_access_acl_name'),
        v3_auth_priv_aes_access_ipv6_acl=pulumi.get(__ret__, 'v3_auth_priv_aes_access_ipv6_acl'),
        v3_auth_priv_aes_access_standard_acl=pulumi.get(__ret__, 'v3_auth_priv_aes_access_standard_acl'),
        v3_auth_priv_aes_algorithm=pulumi.get(__ret__, 'v3_auth_priv_aes_algorithm'),
        v3_auth_priv_aes_password=pulumi.get(__ret__, 'v3_auth_priv_aes_password'),
        v3_auth_priv_des3_access_acl_name=pulumi.get(__ret__, 'v3_auth_priv_des3_access_acl_name'),
        v3_auth_priv_des3_access_ipv6_acl=pulumi.get(__ret__, 'v3_auth_priv_des3_access_ipv6_acl'),
        v3_auth_priv_des3_access_standard_acl=pulumi.get(__ret__, 'v3_auth_priv_des3_access_standard_acl'),
        v3_auth_priv_des3_password=pulumi.get(__ret__, 'v3_auth_priv_des3_password'),
        v3_auth_priv_des_access_acl_name=pulumi.get(__ret__, 'v3_auth_priv_des_access_acl_name'),
        v3_auth_priv_des_access_ipv6_acl=pulumi.get(__ret__, 'v3_auth_priv_des_access_ipv6_acl'),
        v3_auth_priv_des_access_standard_acl=pulumi.get(__ret__, 'v3_auth_priv_des_access_standard_acl'),
        v3_auth_priv_des_password=pulumi.get(__ret__, 'v3_auth_priv_des_password'))


@_utilities.lift_output_func(get_snmp_server_user)
def get_snmp_server_user_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                                grpname: Optional[pulumi.Input[str]] = None,
                                username: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSnmpServerUserResult]:
    """
    This data source can read the SNMP Server User configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.iosxe.get_snmp_server_user(grpname="GROUP1",
        username="USER1")
    ```


    :param str device: A device name from the provider configuration.
    :param str grpname: Group to which the user belongs
    :param str username: Name of the user
    """
    ...
