# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetBgpIpv6UnicastNeighborResult',
    'AwaitableGetBgpIpv6UnicastNeighborResult',
    'get_bgp_ipv6_unicast_neighbor',
    'get_bgp_ipv6_unicast_neighbor_output',
]

@pulumi.output_type
class GetBgpIpv6UnicastNeighborResult:
    """
    A collection of values returned by getBgpIpv6UnicastNeighbor.
    """
    def __init__(__self__, activate=None, asn=None, device=None, id=None, ip=None, route_maps=None, route_reflector_client=None, send_community=None):
        if activate and not isinstance(activate, bool):
            raise TypeError("Expected argument 'activate' to be a bool")
        pulumi.set(__self__, "activate", activate)
        if asn and not isinstance(asn, str):
            raise TypeError("Expected argument 'asn' to be a str")
        pulumi.set(__self__, "asn", asn)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip and not isinstance(ip, str):
            raise TypeError("Expected argument 'ip' to be a str")
        pulumi.set(__self__, "ip", ip)
        if route_maps and not isinstance(route_maps, list):
            raise TypeError("Expected argument 'route_maps' to be a list")
        pulumi.set(__self__, "route_maps", route_maps)
        if route_reflector_client and not isinstance(route_reflector_client, bool):
            raise TypeError("Expected argument 'route_reflector_client' to be a bool")
        pulumi.set(__self__, "route_reflector_client", route_reflector_client)
        if send_community and not isinstance(send_community, str):
            raise TypeError("Expected argument 'send_community' to be a str")
        pulumi.set(__self__, "send_community", send_community)

    @property
    @pulumi.getter
    def activate(self) -> bool:
        """
        Enable the address family for this neighbor
        """
        return pulumi.get(self, "activate")

    @property
    @pulumi.getter
    def asn(self) -> str:
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The path of the retrieved object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="routeMaps")
    def route_maps(self) -> Sequence['outputs.GetBgpIpv6UnicastNeighborRouteMapResult']:
        """
        Apply route map to neighbor
        """
        return pulumi.get(self, "route_maps")

    @property
    @pulumi.getter(name="routeReflectorClient")
    def route_reflector_client(self) -> bool:
        """
        Configure a neighbor as Route Reflector client
        """
        return pulumi.get(self, "route_reflector_client")

    @property
    @pulumi.getter(name="sendCommunity")
    def send_community(self) -> str:
        return pulumi.get(self, "send_community")


class AwaitableGetBgpIpv6UnicastNeighborResult(GetBgpIpv6UnicastNeighborResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBgpIpv6UnicastNeighborResult(
            activate=self.activate,
            asn=self.asn,
            device=self.device,
            id=self.id,
            ip=self.ip,
            route_maps=self.route_maps,
            route_reflector_client=self.route_reflector_client,
            send_community=self.send_community)


def get_bgp_ipv6_unicast_neighbor(asn: Optional[str] = None,
                                  device: Optional[str] = None,
                                  ip: Optional[str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBgpIpv6UnicastNeighborResult:
    """
    This data source can read the BGP IPv6 Unicast Neighbor configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.iosxe.get_bgp_ipv6_unicast_neighbor(asn="65000",
        ip="3.3.3.3")
    ```


    :param str device: A device name from the provider configuration.
    """
    __args__ = dict()
    __args__['asn'] = asn
    __args__['device'] = device
    __args__['ip'] = ip
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:iosxe/getBgpIpv6UnicastNeighbor:getBgpIpv6UnicastNeighbor', __args__, opts=opts, typ=GetBgpIpv6UnicastNeighborResult).value

    return AwaitableGetBgpIpv6UnicastNeighborResult(
        activate=pulumi.get(__ret__, 'activate'),
        asn=pulumi.get(__ret__, 'asn'),
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        ip=pulumi.get(__ret__, 'ip'),
        route_maps=pulumi.get(__ret__, 'route_maps'),
        route_reflector_client=pulumi.get(__ret__, 'route_reflector_client'),
        send_community=pulumi.get(__ret__, 'send_community'))


@_utilities.lift_output_func(get_bgp_ipv6_unicast_neighbor)
def get_bgp_ipv6_unicast_neighbor_output(asn: Optional[pulumi.Input[str]] = None,
                                         device: Optional[pulumi.Input[Optional[str]]] = None,
                                         ip: Optional[pulumi.Input[str]] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBgpIpv6UnicastNeighborResult]:
    """
    This data source can read the BGP IPv6 Unicast Neighbor configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.iosxe.get_bgp_ipv6_unicast_neighbor(asn="65000",
        ip="3.3.3.3")
    ```


    :param str device: A device name from the provider configuration.
    """
    ...
