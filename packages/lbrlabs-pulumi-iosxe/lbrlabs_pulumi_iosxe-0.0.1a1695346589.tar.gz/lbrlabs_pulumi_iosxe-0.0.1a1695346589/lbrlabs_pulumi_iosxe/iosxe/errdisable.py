# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ErrdisableArgs', 'Errdisable']

@pulumi.input_type
class ErrdisableArgs:
    def __init__(__self__, *,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 detect_cause_all: Optional[pulumi.Input[bool]] = None,
                 detect_cause_arp_inspection: Optional[pulumi.Input[bool]] = None,
                 detect_cause_bpduguard: Optional[pulumi.Input[bool]] = None,
                 detect_cause_dhcp_rate_limit: Optional[pulumi.Input[bool]] = None,
                 detect_cause_dtp_flap: Optional[pulumi.Input[bool]] = None,
                 detect_cause_gbic_invalid: Optional[pulumi.Input[bool]] = None,
                 detect_cause_inline_power: Optional[pulumi.Input[bool]] = None,
                 detect_cause_l2ptguard: Optional[pulumi.Input[bool]] = None,
                 detect_cause_link_flap: Optional[pulumi.Input[bool]] = None,
                 detect_cause_loopback: Optional[pulumi.Input[bool]] = None,
                 detect_cause_loopdetect: Optional[pulumi.Input[bool]] = None,
                 detect_cause_mlacp_minlink: Optional[pulumi.Input[bool]] = None,
                 detect_cause_pagp_flap: Optional[pulumi.Input[bool]] = None,
                 detect_cause_pppoe_ia_rate_limit: Optional[pulumi.Input[bool]] = None,
                 detect_cause_security_violation_shutdown_vlan: Optional[pulumi.Input[bool]] = None,
                 detect_cause_sfp_config_mismatch: Optional[pulumi.Input[bool]] = None,
                 detect_cause_small_frame: Optional[pulumi.Input[bool]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 flap_setting_cause_dtp_flap_max_flaps: Optional[pulumi.Input[int]] = None,
                 flap_setting_cause_dtp_flap_time: Optional[pulumi.Input[int]] = None,
                 flap_setting_cause_link_flap_max_flaps: Optional[pulumi.Input[int]] = None,
                 flap_setting_cause_link_flap_time: Optional[pulumi.Input[int]] = None,
                 flap_setting_cause_pagp_flap_max_flaps: Optional[pulumi.Input[int]] = None,
                 flap_setting_cause_pagp_flap_time: Optional[pulumi.Input[int]] = None,
                 recovery_cause_all: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_arp_inspection: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_bpduguard: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_channel_misconfig: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_dhcp_rate_limit: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_dtp_flap: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_gbic_invalid: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_inline_power: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_l2ptguard: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_link_flap: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_link_monitor_failure: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_loopback: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_loopdetect: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_mac_limit: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_mlacp_minlink: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_pagp_flap: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_port_mode_failure: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_pppoe_ia_rate_limit: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_psecure_violation: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_psp: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_security_violation: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_sfp_config_mismatch: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_small_frame: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_storm_control: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_udld: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_unicast_flood: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_vmps: Optional[pulumi.Input[bool]] = None,
                 recovery_interval: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Errdisable resource.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[bool] detect_cause_all: Enable error detection on all cases
        :param pulumi.Input[bool] detect_cause_arp_inspection: Enable error detection for arp inspection
        :param pulumi.Input[bool] detect_cause_bpduguard: Enable error detection on bpdu-guard
        :param pulumi.Input[bool] detect_cause_dhcp_rate_limit: Enable error detection on dhcp-rate-limit
        :param pulumi.Input[bool] detect_cause_dtp_flap: Enable error detection on dtp-flapping
        :param pulumi.Input[bool] detect_cause_gbic_invalid: Enable error detection on gbic-invalid
        :param pulumi.Input[bool] detect_cause_inline_power: Enable error detection for inline-power
        :param pulumi.Input[bool] detect_cause_l2ptguard: Enable timer to recover from l2protocol-tunnel error disable state
        :param pulumi.Input[bool] detect_cause_link_flap: Enable error detection on linkstate-flapping
        :param pulumi.Input[bool] detect_cause_loopback: Enable error detection on loopback
        :param pulumi.Input[bool] detect_cause_loopdetect: Enable error detection on loop detect
        :param pulumi.Input[bool] detect_cause_pagp_flap: Enable error detection on pagp-flapping
        :param pulumi.Input[bool] detect_cause_pppoe_ia_rate_limit: Enable error detection on PPPoE IA rate-limit
        :param pulumi.Input[bool] detect_cause_security_violation_shutdown_vlan: Shutdown vlan on 802.1x-guard violation
        :param pulumi.Input[bool] detect_cause_sfp_config_mismatch: Enable error detection on SFP config mismatch
        :param pulumi.Input[bool] detect_cause_small_frame: Enable error detection on small_frame
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] flap_setting_cause_dtp_flap_max_flaps: maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        :param pulumi.Input[int] flap_setting_cause_dtp_flap_time: time period the flaps are counted - Range: `1`-`120`
        :param pulumi.Input[int] flap_setting_cause_link_flap_max_flaps: maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        :param pulumi.Input[int] flap_setting_cause_link_flap_time: time period the flaps are counted - Range: `1`-`120`
        :param pulumi.Input[int] flap_setting_cause_pagp_flap_max_flaps: maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        :param pulumi.Input[int] flap_setting_cause_pagp_flap_time: time period the flaps are counted - Range: `1`-`120`
        :param pulumi.Input[bool] recovery_cause_all: Enable timer to recover from all error causes
        :param pulumi.Input[bool] recovery_cause_arp_inspection: Enable timer to recover from arp inspection error disable state
        :param pulumi.Input[bool] recovery_cause_bpduguard: Enable timer to recover from BPDU Guard error
        :param pulumi.Input[bool] recovery_cause_channel_misconfig: (STP) Enable timer to recover from channel misconfiguration error
        :param pulumi.Input[bool] recovery_cause_dhcp_rate_limit: Enable timer to recover from dhcp-rate-limit error
        :param pulumi.Input[bool] recovery_cause_dtp_flap: Enable timer to recover from dtp-flap error
        :param pulumi.Input[bool] recovery_cause_gbic_invalid: Enable timer to recover from invalid GBIC error
        :param pulumi.Input[bool] recovery_cause_inline_power: Enable timer to recover from inline-power error
        :param pulumi.Input[bool] recovery_cause_l2ptguard: Enable timer to recover from l2protocol-tunnel error disable state
        :param pulumi.Input[bool] recovery_cause_link_flap: Enable timer to recover from link-flap error
        :param pulumi.Input[bool] recovery_cause_loopback: Enable timer to recover from loopback error
        :param pulumi.Input[bool] recovery_cause_loopdetect: Enable timer to recover from loop detect error
        :param pulumi.Input[bool] recovery_cause_mac_limit: Enable timer to recover from mac limit disable state
        :param pulumi.Input[bool] recovery_cause_pagp_flap: Enable timer to recover from pagp-flap error
        :param pulumi.Input[bool] recovery_cause_port_mode_failure: Enable timer to recover from port mode change failure
        :param pulumi.Input[bool] recovery_cause_pppoe_ia_rate_limit: Enable timer to recover from PPPoE IA rate-limit error
        :param pulumi.Input[bool] recovery_cause_psecure_violation: Enable timer to recover from psecure violation error
        :param pulumi.Input[bool] recovery_cause_security_violation: Enable timer to recover from 802.1x violation error
        :param pulumi.Input[bool] recovery_cause_sfp_config_mismatch: Enable timer to recover from SFP config mismatch error
        :param pulumi.Input[bool] recovery_cause_small_frame: Enable timer to recover from small frame error
        :param pulumi.Input[bool] recovery_cause_storm_control: Enable timer to recover from storm-control error
        :param pulumi.Input[bool] recovery_cause_udld: Enable timer to recover from udld error
        :param pulumi.Input[bool] recovery_cause_vmps: Enable timer to recover from vmps shutdown error
        :param pulumi.Input[int] recovery_interval: Error disable recovery timer value - Range: `30`-`86400`
        """
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if detect_cause_all is not None:
            pulumi.set(__self__, "detect_cause_all", detect_cause_all)
        if detect_cause_arp_inspection is not None:
            pulumi.set(__self__, "detect_cause_arp_inspection", detect_cause_arp_inspection)
        if detect_cause_bpduguard is not None:
            pulumi.set(__self__, "detect_cause_bpduguard", detect_cause_bpduguard)
        if detect_cause_dhcp_rate_limit is not None:
            pulumi.set(__self__, "detect_cause_dhcp_rate_limit", detect_cause_dhcp_rate_limit)
        if detect_cause_dtp_flap is not None:
            pulumi.set(__self__, "detect_cause_dtp_flap", detect_cause_dtp_flap)
        if detect_cause_gbic_invalid is not None:
            pulumi.set(__self__, "detect_cause_gbic_invalid", detect_cause_gbic_invalid)
        if detect_cause_inline_power is not None:
            pulumi.set(__self__, "detect_cause_inline_power", detect_cause_inline_power)
        if detect_cause_l2ptguard is not None:
            pulumi.set(__self__, "detect_cause_l2ptguard", detect_cause_l2ptguard)
        if detect_cause_link_flap is not None:
            pulumi.set(__self__, "detect_cause_link_flap", detect_cause_link_flap)
        if detect_cause_loopback is not None:
            pulumi.set(__self__, "detect_cause_loopback", detect_cause_loopback)
        if detect_cause_loopdetect is not None:
            pulumi.set(__self__, "detect_cause_loopdetect", detect_cause_loopdetect)
        if detect_cause_mlacp_minlink is not None:
            pulumi.set(__self__, "detect_cause_mlacp_minlink", detect_cause_mlacp_minlink)
        if detect_cause_pagp_flap is not None:
            pulumi.set(__self__, "detect_cause_pagp_flap", detect_cause_pagp_flap)
        if detect_cause_pppoe_ia_rate_limit is not None:
            pulumi.set(__self__, "detect_cause_pppoe_ia_rate_limit", detect_cause_pppoe_ia_rate_limit)
        if detect_cause_security_violation_shutdown_vlan is not None:
            pulumi.set(__self__, "detect_cause_security_violation_shutdown_vlan", detect_cause_security_violation_shutdown_vlan)
        if detect_cause_sfp_config_mismatch is not None:
            pulumi.set(__self__, "detect_cause_sfp_config_mismatch", detect_cause_sfp_config_mismatch)
        if detect_cause_small_frame is not None:
            pulumi.set(__self__, "detect_cause_small_frame", detect_cause_small_frame)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if flap_setting_cause_dtp_flap_max_flaps is not None:
            pulumi.set(__self__, "flap_setting_cause_dtp_flap_max_flaps", flap_setting_cause_dtp_flap_max_flaps)
        if flap_setting_cause_dtp_flap_time is not None:
            pulumi.set(__self__, "flap_setting_cause_dtp_flap_time", flap_setting_cause_dtp_flap_time)
        if flap_setting_cause_link_flap_max_flaps is not None:
            pulumi.set(__self__, "flap_setting_cause_link_flap_max_flaps", flap_setting_cause_link_flap_max_flaps)
        if flap_setting_cause_link_flap_time is not None:
            pulumi.set(__self__, "flap_setting_cause_link_flap_time", flap_setting_cause_link_flap_time)
        if flap_setting_cause_pagp_flap_max_flaps is not None:
            pulumi.set(__self__, "flap_setting_cause_pagp_flap_max_flaps", flap_setting_cause_pagp_flap_max_flaps)
        if flap_setting_cause_pagp_flap_time is not None:
            pulumi.set(__self__, "flap_setting_cause_pagp_flap_time", flap_setting_cause_pagp_flap_time)
        if recovery_cause_all is not None:
            pulumi.set(__self__, "recovery_cause_all", recovery_cause_all)
        if recovery_cause_arp_inspection is not None:
            pulumi.set(__self__, "recovery_cause_arp_inspection", recovery_cause_arp_inspection)
        if recovery_cause_bpduguard is not None:
            pulumi.set(__self__, "recovery_cause_bpduguard", recovery_cause_bpduguard)
        if recovery_cause_channel_misconfig is not None:
            pulumi.set(__self__, "recovery_cause_channel_misconfig", recovery_cause_channel_misconfig)
        if recovery_cause_dhcp_rate_limit is not None:
            pulumi.set(__self__, "recovery_cause_dhcp_rate_limit", recovery_cause_dhcp_rate_limit)
        if recovery_cause_dtp_flap is not None:
            pulumi.set(__self__, "recovery_cause_dtp_flap", recovery_cause_dtp_flap)
        if recovery_cause_gbic_invalid is not None:
            pulumi.set(__self__, "recovery_cause_gbic_invalid", recovery_cause_gbic_invalid)
        if recovery_cause_inline_power is not None:
            pulumi.set(__self__, "recovery_cause_inline_power", recovery_cause_inline_power)
        if recovery_cause_l2ptguard is not None:
            pulumi.set(__self__, "recovery_cause_l2ptguard", recovery_cause_l2ptguard)
        if recovery_cause_link_flap is not None:
            pulumi.set(__self__, "recovery_cause_link_flap", recovery_cause_link_flap)
        if recovery_cause_link_monitor_failure is not None:
            pulumi.set(__self__, "recovery_cause_link_monitor_failure", recovery_cause_link_monitor_failure)
        if recovery_cause_loopback is not None:
            pulumi.set(__self__, "recovery_cause_loopback", recovery_cause_loopback)
        if recovery_cause_loopdetect is not None:
            pulumi.set(__self__, "recovery_cause_loopdetect", recovery_cause_loopdetect)
        if recovery_cause_mac_limit is not None:
            pulumi.set(__self__, "recovery_cause_mac_limit", recovery_cause_mac_limit)
        if recovery_cause_mlacp_minlink is not None:
            pulumi.set(__self__, "recovery_cause_mlacp_minlink", recovery_cause_mlacp_minlink)
        if recovery_cause_pagp_flap is not None:
            pulumi.set(__self__, "recovery_cause_pagp_flap", recovery_cause_pagp_flap)
        if recovery_cause_port_mode_failure is not None:
            pulumi.set(__self__, "recovery_cause_port_mode_failure", recovery_cause_port_mode_failure)
        if recovery_cause_pppoe_ia_rate_limit is not None:
            pulumi.set(__self__, "recovery_cause_pppoe_ia_rate_limit", recovery_cause_pppoe_ia_rate_limit)
        if recovery_cause_psecure_violation is not None:
            pulumi.set(__self__, "recovery_cause_psecure_violation", recovery_cause_psecure_violation)
        if recovery_cause_psp is not None:
            pulumi.set(__self__, "recovery_cause_psp", recovery_cause_psp)
        if recovery_cause_security_violation is not None:
            pulumi.set(__self__, "recovery_cause_security_violation", recovery_cause_security_violation)
        if recovery_cause_sfp_config_mismatch is not None:
            pulumi.set(__self__, "recovery_cause_sfp_config_mismatch", recovery_cause_sfp_config_mismatch)
        if recovery_cause_small_frame is not None:
            pulumi.set(__self__, "recovery_cause_small_frame", recovery_cause_small_frame)
        if recovery_cause_storm_control is not None:
            pulumi.set(__self__, "recovery_cause_storm_control", recovery_cause_storm_control)
        if recovery_cause_udld is not None:
            pulumi.set(__self__, "recovery_cause_udld", recovery_cause_udld)
        if recovery_cause_unicast_flood is not None:
            pulumi.set(__self__, "recovery_cause_unicast_flood", recovery_cause_unicast_flood)
        if recovery_cause_vmps is not None:
            pulumi.set(__self__, "recovery_cause_vmps", recovery_cause_vmps)
        if recovery_interval is not None:
            pulumi.set(__self__, "recovery_interval", recovery_interval)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter(name="detectCauseAll")
    def detect_cause_all(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable error detection on all cases
        """
        return pulumi.get(self, "detect_cause_all")

    @detect_cause_all.setter
    def detect_cause_all(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_all", value)

    @property
    @pulumi.getter(name="detectCauseArpInspection")
    def detect_cause_arp_inspection(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable error detection for arp inspection
        """
        return pulumi.get(self, "detect_cause_arp_inspection")

    @detect_cause_arp_inspection.setter
    def detect_cause_arp_inspection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_arp_inspection", value)

    @property
    @pulumi.getter(name="detectCauseBpduguard")
    def detect_cause_bpduguard(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable error detection on bpdu-guard
        """
        return pulumi.get(self, "detect_cause_bpduguard")

    @detect_cause_bpduguard.setter
    def detect_cause_bpduguard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_bpduguard", value)

    @property
    @pulumi.getter(name="detectCauseDhcpRateLimit")
    def detect_cause_dhcp_rate_limit(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable error detection on dhcp-rate-limit
        """
        return pulumi.get(self, "detect_cause_dhcp_rate_limit")

    @detect_cause_dhcp_rate_limit.setter
    def detect_cause_dhcp_rate_limit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_dhcp_rate_limit", value)

    @property
    @pulumi.getter(name="detectCauseDtpFlap")
    def detect_cause_dtp_flap(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable error detection on dtp-flapping
        """
        return pulumi.get(self, "detect_cause_dtp_flap")

    @detect_cause_dtp_flap.setter
    def detect_cause_dtp_flap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_dtp_flap", value)

    @property
    @pulumi.getter(name="detectCauseGbicInvalid")
    def detect_cause_gbic_invalid(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable error detection on gbic-invalid
        """
        return pulumi.get(self, "detect_cause_gbic_invalid")

    @detect_cause_gbic_invalid.setter
    def detect_cause_gbic_invalid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_gbic_invalid", value)

    @property
    @pulumi.getter(name="detectCauseInlinePower")
    def detect_cause_inline_power(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable error detection for inline-power
        """
        return pulumi.get(self, "detect_cause_inline_power")

    @detect_cause_inline_power.setter
    def detect_cause_inline_power(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_inline_power", value)

    @property
    @pulumi.getter(name="detectCauseL2ptguard")
    def detect_cause_l2ptguard(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from l2protocol-tunnel error disable state
        """
        return pulumi.get(self, "detect_cause_l2ptguard")

    @detect_cause_l2ptguard.setter
    def detect_cause_l2ptguard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_l2ptguard", value)

    @property
    @pulumi.getter(name="detectCauseLinkFlap")
    def detect_cause_link_flap(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable error detection on linkstate-flapping
        """
        return pulumi.get(self, "detect_cause_link_flap")

    @detect_cause_link_flap.setter
    def detect_cause_link_flap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_link_flap", value)

    @property
    @pulumi.getter(name="detectCauseLoopback")
    def detect_cause_loopback(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable error detection on loopback
        """
        return pulumi.get(self, "detect_cause_loopback")

    @detect_cause_loopback.setter
    def detect_cause_loopback(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_loopback", value)

    @property
    @pulumi.getter(name="detectCauseLoopdetect")
    def detect_cause_loopdetect(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable error detection on loop detect
        """
        return pulumi.get(self, "detect_cause_loopdetect")

    @detect_cause_loopdetect.setter
    def detect_cause_loopdetect(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_loopdetect", value)

    @property
    @pulumi.getter(name="detectCauseMlacpMinlink")
    def detect_cause_mlacp_minlink(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "detect_cause_mlacp_minlink")

    @detect_cause_mlacp_minlink.setter
    def detect_cause_mlacp_minlink(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_mlacp_minlink", value)

    @property
    @pulumi.getter(name="detectCausePagpFlap")
    def detect_cause_pagp_flap(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable error detection on pagp-flapping
        """
        return pulumi.get(self, "detect_cause_pagp_flap")

    @detect_cause_pagp_flap.setter
    def detect_cause_pagp_flap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_pagp_flap", value)

    @property
    @pulumi.getter(name="detectCausePppoeIaRateLimit")
    def detect_cause_pppoe_ia_rate_limit(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable error detection on PPPoE IA rate-limit
        """
        return pulumi.get(self, "detect_cause_pppoe_ia_rate_limit")

    @detect_cause_pppoe_ia_rate_limit.setter
    def detect_cause_pppoe_ia_rate_limit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_pppoe_ia_rate_limit", value)

    @property
    @pulumi.getter(name="detectCauseSecurityViolationShutdownVlan")
    def detect_cause_security_violation_shutdown_vlan(self) -> Optional[pulumi.Input[bool]]:
        """
        Shutdown vlan on 802.1x-guard violation
        """
        return pulumi.get(self, "detect_cause_security_violation_shutdown_vlan")

    @detect_cause_security_violation_shutdown_vlan.setter
    def detect_cause_security_violation_shutdown_vlan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_security_violation_shutdown_vlan", value)

    @property
    @pulumi.getter(name="detectCauseSfpConfigMismatch")
    def detect_cause_sfp_config_mismatch(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable error detection on SFP config mismatch
        """
        return pulumi.get(self, "detect_cause_sfp_config_mismatch")

    @detect_cause_sfp_config_mismatch.setter
    def detect_cause_sfp_config_mismatch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_sfp_config_mismatch", value)

    @property
    @pulumi.getter(name="detectCauseSmallFrame")
    def detect_cause_small_frame(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable error detection on small_frame
        """
        return pulumi.get(self, "detect_cause_small_frame")

    @detect_cause_small_frame.setter
    def detect_cause_small_frame(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_small_frame", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="flapSettingCauseDtpFlapMaxFlaps")
    def flap_setting_cause_dtp_flap_max_flaps(self) -> Optional[pulumi.Input[int]]:
        """
        maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        """
        return pulumi.get(self, "flap_setting_cause_dtp_flap_max_flaps")

    @flap_setting_cause_dtp_flap_max_flaps.setter
    def flap_setting_cause_dtp_flap_max_flaps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flap_setting_cause_dtp_flap_max_flaps", value)

    @property
    @pulumi.getter(name="flapSettingCauseDtpFlapTime")
    def flap_setting_cause_dtp_flap_time(self) -> Optional[pulumi.Input[int]]:
        """
        time period the flaps are counted - Range: `1`-`120`
        """
        return pulumi.get(self, "flap_setting_cause_dtp_flap_time")

    @flap_setting_cause_dtp_flap_time.setter
    def flap_setting_cause_dtp_flap_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flap_setting_cause_dtp_flap_time", value)

    @property
    @pulumi.getter(name="flapSettingCauseLinkFlapMaxFlaps")
    def flap_setting_cause_link_flap_max_flaps(self) -> Optional[pulumi.Input[int]]:
        """
        maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        """
        return pulumi.get(self, "flap_setting_cause_link_flap_max_flaps")

    @flap_setting_cause_link_flap_max_flaps.setter
    def flap_setting_cause_link_flap_max_flaps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flap_setting_cause_link_flap_max_flaps", value)

    @property
    @pulumi.getter(name="flapSettingCauseLinkFlapTime")
    def flap_setting_cause_link_flap_time(self) -> Optional[pulumi.Input[int]]:
        """
        time period the flaps are counted - Range: `1`-`120`
        """
        return pulumi.get(self, "flap_setting_cause_link_flap_time")

    @flap_setting_cause_link_flap_time.setter
    def flap_setting_cause_link_flap_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flap_setting_cause_link_flap_time", value)

    @property
    @pulumi.getter(name="flapSettingCausePagpFlapMaxFlaps")
    def flap_setting_cause_pagp_flap_max_flaps(self) -> Optional[pulumi.Input[int]]:
        """
        maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        """
        return pulumi.get(self, "flap_setting_cause_pagp_flap_max_flaps")

    @flap_setting_cause_pagp_flap_max_flaps.setter
    def flap_setting_cause_pagp_flap_max_flaps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flap_setting_cause_pagp_flap_max_flaps", value)

    @property
    @pulumi.getter(name="flapSettingCausePagpFlapTime")
    def flap_setting_cause_pagp_flap_time(self) -> Optional[pulumi.Input[int]]:
        """
        time period the flaps are counted - Range: `1`-`120`
        """
        return pulumi.get(self, "flap_setting_cause_pagp_flap_time")

    @flap_setting_cause_pagp_flap_time.setter
    def flap_setting_cause_pagp_flap_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flap_setting_cause_pagp_flap_time", value)

    @property
    @pulumi.getter(name="recoveryCauseAll")
    def recovery_cause_all(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from all error causes
        """
        return pulumi.get(self, "recovery_cause_all")

    @recovery_cause_all.setter
    def recovery_cause_all(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_all", value)

    @property
    @pulumi.getter(name="recoveryCauseArpInspection")
    def recovery_cause_arp_inspection(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from arp inspection error disable state
        """
        return pulumi.get(self, "recovery_cause_arp_inspection")

    @recovery_cause_arp_inspection.setter
    def recovery_cause_arp_inspection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_arp_inspection", value)

    @property
    @pulumi.getter(name="recoveryCauseBpduguard")
    def recovery_cause_bpduguard(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from BPDU Guard error
        """
        return pulumi.get(self, "recovery_cause_bpduguard")

    @recovery_cause_bpduguard.setter
    def recovery_cause_bpduguard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_bpduguard", value)

    @property
    @pulumi.getter(name="recoveryCauseChannelMisconfig")
    def recovery_cause_channel_misconfig(self) -> Optional[pulumi.Input[bool]]:
        """
        (STP) Enable timer to recover from channel misconfiguration error
        """
        return pulumi.get(self, "recovery_cause_channel_misconfig")

    @recovery_cause_channel_misconfig.setter
    def recovery_cause_channel_misconfig(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_channel_misconfig", value)

    @property
    @pulumi.getter(name="recoveryCauseDhcpRateLimit")
    def recovery_cause_dhcp_rate_limit(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from dhcp-rate-limit error
        """
        return pulumi.get(self, "recovery_cause_dhcp_rate_limit")

    @recovery_cause_dhcp_rate_limit.setter
    def recovery_cause_dhcp_rate_limit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_dhcp_rate_limit", value)

    @property
    @pulumi.getter(name="recoveryCauseDtpFlap")
    def recovery_cause_dtp_flap(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from dtp-flap error
        """
        return pulumi.get(self, "recovery_cause_dtp_flap")

    @recovery_cause_dtp_flap.setter
    def recovery_cause_dtp_flap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_dtp_flap", value)

    @property
    @pulumi.getter(name="recoveryCauseGbicInvalid")
    def recovery_cause_gbic_invalid(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from invalid GBIC error
        """
        return pulumi.get(self, "recovery_cause_gbic_invalid")

    @recovery_cause_gbic_invalid.setter
    def recovery_cause_gbic_invalid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_gbic_invalid", value)

    @property
    @pulumi.getter(name="recoveryCauseInlinePower")
    def recovery_cause_inline_power(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from inline-power error
        """
        return pulumi.get(self, "recovery_cause_inline_power")

    @recovery_cause_inline_power.setter
    def recovery_cause_inline_power(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_inline_power", value)

    @property
    @pulumi.getter(name="recoveryCauseL2ptguard")
    def recovery_cause_l2ptguard(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from l2protocol-tunnel error disable state
        """
        return pulumi.get(self, "recovery_cause_l2ptguard")

    @recovery_cause_l2ptguard.setter
    def recovery_cause_l2ptguard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_l2ptguard", value)

    @property
    @pulumi.getter(name="recoveryCauseLinkFlap")
    def recovery_cause_link_flap(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from link-flap error
        """
        return pulumi.get(self, "recovery_cause_link_flap")

    @recovery_cause_link_flap.setter
    def recovery_cause_link_flap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_link_flap", value)

    @property
    @pulumi.getter(name="recoveryCauseLinkMonitorFailure")
    def recovery_cause_link_monitor_failure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "recovery_cause_link_monitor_failure")

    @recovery_cause_link_monitor_failure.setter
    def recovery_cause_link_monitor_failure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_link_monitor_failure", value)

    @property
    @pulumi.getter(name="recoveryCauseLoopback")
    def recovery_cause_loopback(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from loopback error
        """
        return pulumi.get(self, "recovery_cause_loopback")

    @recovery_cause_loopback.setter
    def recovery_cause_loopback(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_loopback", value)

    @property
    @pulumi.getter(name="recoveryCauseLoopdetect")
    def recovery_cause_loopdetect(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from loop detect error
        """
        return pulumi.get(self, "recovery_cause_loopdetect")

    @recovery_cause_loopdetect.setter
    def recovery_cause_loopdetect(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_loopdetect", value)

    @property
    @pulumi.getter(name="recoveryCauseMacLimit")
    def recovery_cause_mac_limit(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from mac limit disable state
        """
        return pulumi.get(self, "recovery_cause_mac_limit")

    @recovery_cause_mac_limit.setter
    def recovery_cause_mac_limit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_mac_limit", value)

    @property
    @pulumi.getter(name="recoveryCauseMlacpMinlink")
    def recovery_cause_mlacp_minlink(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "recovery_cause_mlacp_minlink")

    @recovery_cause_mlacp_minlink.setter
    def recovery_cause_mlacp_minlink(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_mlacp_minlink", value)

    @property
    @pulumi.getter(name="recoveryCausePagpFlap")
    def recovery_cause_pagp_flap(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from pagp-flap error
        """
        return pulumi.get(self, "recovery_cause_pagp_flap")

    @recovery_cause_pagp_flap.setter
    def recovery_cause_pagp_flap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_pagp_flap", value)

    @property
    @pulumi.getter(name="recoveryCausePortModeFailure")
    def recovery_cause_port_mode_failure(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from port mode change failure
        """
        return pulumi.get(self, "recovery_cause_port_mode_failure")

    @recovery_cause_port_mode_failure.setter
    def recovery_cause_port_mode_failure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_port_mode_failure", value)

    @property
    @pulumi.getter(name="recoveryCausePppoeIaRateLimit")
    def recovery_cause_pppoe_ia_rate_limit(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from PPPoE IA rate-limit error
        """
        return pulumi.get(self, "recovery_cause_pppoe_ia_rate_limit")

    @recovery_cause_pppoe_ia_rate_limit.setter
    def recovery_cause_pppoe_ia_rate_limit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_pppoe_ia_rate_limit", value)

    @property
    @pulumi.getter(name="recoveryCausePsecureViolation")
    def recovery_cause_psecure_violation(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from psecure violation error
        """
        return pulumi.get(self, "recovery_cause_psecure_violation")

    @recovery_cause_psecure_violation.setter
    def recovery_cause_psecure_violation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_psecure_violation", value)

    @property
    @pulumi.getter(name="recoveryCausePsp")
    def recovery_cause_psp(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "recovery_cause_psp")

    @recovery_cause_psp.setter
    def recovery_cause_psp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_psp", value)

    @property
    @pulumi.getter(name="recoveryCauseSecurityViolation")
    def recovery_cause_security_violation(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from 802.1x violation error
        """
        return pulumi.get(self, "recovery_cause_security_violation")

    @recovery_cause_security_violation.setter
    def recovery_cause_security_violation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_security_violation", value)

    @property
    @pulumi.getter(name="recoveryCauseSfpConfigMismatch")
    def recovery_cause_sfp_config_mismatch(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from SFP config mismatch error
        """
        return pulumi.get(self, "recovery_cause_sfp_config_mismatch")

    @recovery_cause_sfp_config_mismatch.setter
    def recovery_cause_sfp_config_mismatch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_sfp_config_mismatch", value)

    @property
    @pulumi.getter(name="recoveryCauseSmallFrame")
    def recovery_cause_small_frame(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from small frame error
        """
        return pulumi.get(self, "recovery_cause_small_frame")

    @recovery_cause_small_frame.setter
    def recovery_cause_small_frame(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_small_frame", value)

    @property
    @pulumi.getter(name="recoveryCauseStormControl")
    def recovery_cause_storm_control(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from storm-control error
        """
        return pulumi.get(self, "recovery_cause_storm_control")

    @recovery_cause_storm_control.setter
    def recovery_cause_storm_control(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_storm_control", value)

    @property
    @pulumi.getter(name="recoveryCauseUdld")
    def recovery_cause_udld(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from udld error
        """
        return pulumi.get(self, "recovery_cause_udld")

    @recovery_cause_udld.setter
    def recovery_cause_udld(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_udld", value)

    @property
    @pulumi.getter(name="recoveryCauseUnicastFlood")
    def recovery_cause_unicast_flood(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "recovery_cause_unicast_flood")

    @recovery_cause_unicast_flood.setter
    def recovery_cause_unicast_flood(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_unicast_flood", value)

    @property
    @pulumi.getter(name="recoveryCauseVmps")
    def recovery_cause_vmps(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from vmps shutdown error
        """
        return pulumi.get(self, "recovery_cause_vmps")

    @recovery_cause_vmps.setter
    def recovery_cause_vmps(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_vmps", value)

    @property
    @pulumi.getter(name="recoveryInterval")
    def recovery_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Error disable recovery timer value - Range: `30`-`86400`
        """
        return pulumi.get(self, "recovery_interval")

    @recovery_interval.setter
    def recovery_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recovery_interval", value)


@pulumi.input_type
class _ErrdisableState:
    def __init__(__self__, *,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 detect_cause_all: Optional[pulumi.Input[bool]] = None,
                 detect_cause_arp_inspection: Optional[pulumi.Input[bool]] = None,
                 detect_cause_bpduguard: Optional[pulumi.Input[bool]] = None,
                 detect_cause_dhcp_rate_limit: Optional[pulumi.Input[bool]] = None,
                 detect_cause_dtp_flap: Optional[pulumi.Input[bool]] = None,
                 detect_cause_gbic_invalid: Optional[pulumi.Input[bool]] = None,
                 detect_cause_inline_power: Optional[pulumi.Input[bool]] = None,
                 detect_cause_l2ptguard: Optional[pulumi.Input[bool]] = None,
                 detect_cause_link_flap: Optional[pulumi.Input[bool]] = None,
                 detect_cause_loopback: Optional[pulumi.Input[bool]] = None,
                 detect_cause_loopdetect: Optional[pulumi.Input[bool]] = None,
                 detect_cause_mlacp_minlink: Optional[pulumi.Input[bool]] = None,
                 detect_cause_pagp_flap: Optional[pulumi.Input[bool]] = None,
                 detect_cause_pppoe_ia_rate_limit: Optional[pulumi.Input[bool]] = None,
                 detect_cause_security_violation_shutdown_vlan: Optional[pulumi.Input[bool]] = None,
                 detect_cause_sfp_config_mismatch: Optional[pulumi.Input[bool]] = None,
                 detect_cause_small_frame: Optional[pulumi.Input[bool]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 flap_setting_cause_dtp_flap_max_flaps: Optional[pulumi.Input[int]] = None,
                 flap_setting_cause_dtp_flap_time: Optional[pulumi.Input[int]] = None,
                 flap_setting_cause_link_flap_max_flaps: Optional[pulumi.Input[int]] = None,
                 flap_setting_cause_link_flap_time: Optional[pulumi.Input[int]] = None,
                 flap_setting_cause_pagp_flap_max_flaps: Optional[pulumi.Input[int]] = None,
                 flap_setting_cause_pagp_flap_time: Optional[pulumi.Input[int]] = None,
                 recovery_cause_all: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_arp_inspection: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_bpduguard: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_channel_misconfig: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_dhcp_rate_limit: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_dtp_flap: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_gbic_invalid: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_inline_power: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_l2ptguard: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_link_flap: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_link_monitor_failure: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_loopback: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_loopdetect: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_mac_limit: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_mlacp_minlink: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_pagp_flap: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_port_mode_failure: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_pppoe_ia_rate_limit: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_psecure_violation: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_psp: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_security_violation: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_sfp_config_mismatch: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_small_frame: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_storm_control: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_udld: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_unicast_flood: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_vmps: Optional[pulumi.Input[bool]] = None,
                 recovery_interval: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Errdisable resources.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[bool] detect_cause_all: Enable error detection on all cases
        :param pulumi.Input[bool] detect_cause_arp_inspection: Enable error detection for arp inspection
        :param pulumi.Input[bool] detect_cause_bpduguard: Enable error detection on bpdu-guard
        :param pulumi.Input[bool] detect_cause_dhcp_rate_limit: Enable error detection on dhcp-rate-limit
        :param pulumi.Input[bool] detect_cause_dtp_flap: Enable error detection on dtp-flapping
        :param pulumi.Input[bool] detect_cause_gbic_invalid: Enable error detection on gbic-invalid
        :param pulumi.Input[bool] detect_cause_inline_power: Enable error detection for inline-power
        :param pulumi.Input[bool] detect_cause_l2ptguard: Enable timer to recover from l2protocol-tunnel error disable state
        :param pulumi.Input[bool] detect_cause_link_flap: Enable error detection on linkstate-flapping
        :param pulumi.Input[bool] detect_cause_loopback: Enable error detection on loopback
        :param pulumi.Input[bool] detect_cause_loopdetect: Enable error detection on loop detect
        :param pulumi.Input[bool] detect_cause_pagp_flap: Enable error detection on pagp-flapping
        :param pulumi.Input[bool] detect_cause_pppoe_ia_rate_limit: Enable error detection on PPPoE IA rate-limit
        :param pulumi.Input[bool] detect_cause_security_violation_shutdown_vlan: Shutdown vlan on 802.1x-guard violation
        :param pulumi.Input[bool] detect_cause_sfp_config_mismatch: Enable error detection on SFP config mismatch
        :param pulumi.Input[bool] detect_cause_small_frame: Enable error detection on small_frame
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] flap_setting_cause_dtp_flap_max_flaps: maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        :param pulumi.Input[int] flap_setting_cause_dtp_flap_time: time period the flaps are counted - Range: `1`-`120`
        :param pulumi.Input[int] flap_setting_cause_link_flap_max_flaps: maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        :param pulumi.Input[int] flap_setting_cause_link_flap_time: time period the flaps are counted - Range: `1`-`120`
        :param pulumi.Input[int] flap_setting_cause_pagp_flap_max_flaps: maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        :param pulumi.Input[int] flap_setting_cause_pagp_flap_time: time period the flaps are counted - Range: `1`-`120`
        :param pulumi.Input[bool] recovery_cause_all: Enable timer to recover from all error causes
        :param pulumi.Input[bool] recovery_cause_arp_inspection: Enable timer to recover from arp inspection error disable state
        :param pulumi.Input[bool] recovery_cause_bpduguard: Enable timer to recover from BPDU Guard error
        :param pulumi.Input[bool] recovery_cause_channel_misconfig: (STP) Enable timer to recover from channel misconfiguration error
        :param pulumi.Input[bool] recovery_cause_dhcp_rate_limit: Enable timer to recover from dhcp-rate-limit error
        :param pulumi.Input[bool] recovery_cause_dtp_flap: Enable timer to recover from dtp-flap error
        :param pulumi.Input[bool] recovery_cause_gbic_invalid: Enable timer to recover from invalid GBIC error
        :param pulumi.Input[bool] recovery_cause_inline_power: Enable timer to recover from inline-power error
        :param pulumi.Input[bool] recovery_cause_l2ptguard: Enable timer to recover from l2protocol-tunnel error disable state
        :param pulumi.Input[bool] recovery_cause_link_flap: Enable timer to recover from link-flap error
        :param pulumi.Input[bool] recovery_cause_loopback: Enable timer to recover from loopback error
        :param pulumi.Input[bool] recovery_cause_loopdetect: Enable timer to recover from loop detect error
        :param pulumi.Input[bool] recovery_cause_mac_limit: Enable timer to recover from mac limit disable state
        :param pulumi.Input[bool] recovery_cause_pagp_flap: Enable timer to recover from pagp-flap error
        :param pulumi.Input[bool] recovery_cause_port_mode_failure: Enable timer to recover from port mode change failure
        :param pulumi.Input[bool] recovery_cause_pppoe_ia_rate_limit: Enable timer to recover from PPPoE IA rate-limit error
        :param pulumi.Input[bool] recovery_cause_psecure_violation: Enable timer to recover from psecure violation error
        :param pulumi.Input[bool] recovery_cause_security_violation: Enable timer to recover from 802.1x violation error
        :param pulumi.Input[bool] recovery_cause_sfp_config_mismatch: Enable timer to recover from SFP config mismatch error
        :param pulumi.Input[bool] recovery_cause_small_frame: Enable timer to recover from small frame error
        :param pulumi.Input[bool] recovery_cause_storm_control: Enable timer to recover from storm-control error
        :param pulumi.Input[bool] recovery_cause_udld: Enable timer to recover from udld error
        :param pulumi.Input[bool] recovery_cause_vmps: Enable timer to recover from vmps shutdown error
        :param pulumi.Input[int] recovery_interval: Error disable recovery timer value - Range: `30`-`86400`
        """
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if detect_cause_all is not None:
            pulumi.set(__self__, "detect_cause_all", detect_cause_all)
        if detect_cause_arp_inspection is not None:
            pulumi.set(__self__, "detect_cause_arp_inspection", detect_cause_arp_inspection)
        if detect_cause_bpduguard is not None:
            pulumi.set(__self__, "detect_cause_bpduguard", detect_cause_bpduguard)
        if detect_cause_dhcp_rate_limit is not None:
            pulumi.set(__self__, "detect_cause_dhcp_rate_limit", detect_cause_dhcp_rate_limit)
        if detect_cause_dtp_flap is not None:
            pulumi.set(__self__, "detect_cause_dtp_flap", detect_cause_dtp_flap)
        if detect_cause_gbic_invalid is not None:
            pulumi.set(__self__, "detect_cause_gbic_invalid", detect_cause_gbic_invalid)
        if detect_cause_inline_power is not None:
            pulumi.set(__self__, "detect_cause_inline_power", detect_cause_inline_power)
        if detect_cause_l2ptguard is not None:
            pulumi.set(__self__, "detect_cause_l2ptguard", detect_cause_l2ptguard)
        if detect_cause_link_flap is not None:
            pulumi.set(__self__, "detect_cause_link_flap", detect_cause_link_flap)
        if detect_cause_loopback is not None:
            pulumi.set(__self__, "detect_cause_loopback", detect_cause_loopback)
        if detect_cause_loopdetect is not None:
            pulumi.set(__self__, "detect_cause_loopdetect", detect_cause_loopdetect)
        if detect_cause_mlacp_minlink is not None:
            pulumi.set(__self__, "detect_cause_mlacp_minlink", detect_cause_mlacp_minlink)
        if detect_cause_pagp_flap is not None:
            pulumi.set(__self__, "detect_cause_pagp_flap", detect_cause_pagp_flap)
        if detect_cause_pppoe_ia_rate_limit is not None:
            pulumi.set(__self__, "detect_cause_pppoe_ia_rate_limit", detect_cause_pppoe_ia_rate_limit)
        if detect_cause_security_violation_shutdown_vlan is not None:
            pulumi.set(__self__, "detect_cause_security_violation_shutdown_vlan", detect_cause_security_violation_shutdown_vlan)
        if detect_cause_sfp_config_mismatch is not None:
            pulumi.set(__self__, "detect_cause_sfp_config_mismatch", detect_cause_sfp_config_mismatch)
        if detect_cause_small_frame is not None:
            pulumi.set(__self__, "detect_cause_small_frame", detect_cause_small_frame)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if flap_setting_cause_dtp_flap_max_flaps is not None:
            pulumi.set(__self__, "flap_setting_cause_dtp_flap_max_flaps", flap_setting_cause_dtp_flap_max_flaps)
        if flap_setting_cause_dtp_flap_time is not None:
            pulumi.set(__self__, "flap_setting_cause_dtp_flap_time", flap_setting_cause_dtp_flap_time)
        if flap_setting_cause_link_flap_max_flaps is not None:
            pulumi.set(__self__, "flap_setting_cause_link_flap_max_flaps", flap_setting_cause_link_flap_max_flaps)
        if flap_setting_cause_link_flap_time is not None:
            pulumi.set(__self__, "flap_setting_cause_link_flap_time", flap_setting_cause_link_flap_time)
        if flap_setting_cause_pagp_flap_max_flaps is not None:
            pulumi.set(__self__, "flap_setting_cause_pagp_flap_max_flaps", flap_setting_cause_pagp_flap_max_flaps)
        if flap_setting_cause_pagp_flap_time is not None:
            pulumi.set(__self__, "flap_setting_cause_pagp_flap_time", flap_setting_cause_pagp_flap_time)
        if recovery_cause_all is not None:
            pulumi.set(__self__, "recovery_cause_all", recovery_cause_all)
        if recovery_cause_arp_inspection is not None:
            pulumi.set(__self__, "recovery_cause_arp_inspection", recovery_cause_arp_inspection)
        if recovery_cause_bpduguard is not None:
            pulumi.set(__self__, "recovery_cause_bpduguard", recovery_cause_bpduguard)
        if recovery_cause_channel_misconfig is not None:
            pulumi.set(__self__, "recovery_cause_channel_misconfig", recovery_cause_channel_misconfig)
        if recovery_cause_dhcp_rate_limit is not None:
            pulumi.set(__self__, "recovery_cause_dhcp_rate_limit", recovery_cause_dhcp_rate_limit)
        if recovery_cause_dtp_flap is not None:
            pulumi.set(__self__, "recovery_cause_dtp_flap", recovery_cause_dtp_flap)
        if recovery_cause_gbic_invalid is not None:
            pulumi.set(__self__, "recovery_cause_gbic_invalid", recovery_cause_gbic_invalid)
        if recovery_cause_inline_power is not None:
            pulumi.set(__self__, "recovery_cause_inline_power", recovery_cause_inline_power)
        if recovery_cause_l2ptguard is not None:
            pulumi.set(__self__, "recovery_cause_l2ptguard", recovery_cause_l2ptguard)
        if recovery_cause_link_flap is not None:
            pulumi.set(__self__, "recovery_cause_link_flap", recovery_cause_link_flap)
        if recovery_cause_link_monitor_failure is not None:
            pulumi.set(__self__, "recovery_cause_link_monitor_failure", recovery_cause_link_monitor_failure)
        if recovery_cause_loopback is not None:
            pulumi.set(__self__, "recovery_cause_loopback", recovery_cause_loopback)
        if recovery_cause_loopdetect is not None:
            pulumi.set(__self__, "recovery_cause_loopdetect", recovery_cause_loopdetect)
        if recovery_cause_mac_limit is not None:
            pulumi.set(__self__, "recovery_cause_mac_limit", recovery_cause_mac_limit)
        if recovery_cause_mlacp_minlink is not None:
            pulumi.set(__self__, "recovery_cause_mlacp_minlink", recovery_cause_mlacp_minlink)
        if recovery_cause_pagp_flap is not None:
            pulumi.set(__self__, "recovery_cause_pagp_flap", recovery_cause_pagp_flap)
        if recovery_cause_port_mode_failure is not None:
            pulumi.set(__self__, "recovery_cause_port_mode_failure", recovery_cause_port_mode_failure)
        if recovery_cause_pppoe_ia_rate_limit is not None:
            pulumi.set(__self__, "recovery_cause_pppoe_ia_rate_limit", recovery_cause_pppoe_ia_rate_limit)
        if recovery_cause_psecure_violation is not None:
            pulumi.set(__self__, "recovery_cause_psecure_violation", recovery_cause_psecure_violation)
        if recovery_cause_psp is not None:
            pulumi.set(__self__, "recovery_cause_psp", recovery_cause_psp)
        if recovery_cause_security_violation is not None:
            pulumi.set(__self__, "recovery_cause_security_violation", recovery_cause_security_violation)
        if recovery_cause_sfp_config_mismatch is not None:
            pulumi.set(__self__, "recovery_cause_sfp_config_mismatch", recovery_cause_sfp_config_mismatch)
        if recovery_cause_small_frame is not None:
            pulumi.set(__self__, "recovery_cause_small_frame", recovery_cause_small_frame)
        if recovery_cause_storm_control is not None:
            pulumi.set(__self__, "recovery_cause_storm_control", recovery_cause_storm_control)
        if recovery_cause_udld is not None:
            pulumi.set(__self__, "recovery_cause_udld", recovery_cause_udld)
        if recovery_cause_unicast_flood is not None:
            pulumi.set(__self__, "recovery_cause_unicast_flood", recovery_cause_unicast_flood)
        if recovery_cause_vmps is not None:
            pulumi.set(__self__, "recovery_cause_vmps", recovery_cause_vmps)
        if recovery_interval is not None:
            pulumi.set(__self__, "recovery_interval", recovery_interval)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter(name="detectCauseAll")
    def detect_cause_all(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable error detection on all cases
        """
        return pulumi.get(self, "detect_cause_all")

    @detect_cause_all.setter
    def detect_cause_all(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_all", value)

    @property
    @pulumi.getter(name="detectCauseArpInspection")
    def detect_cause_arp_inspection(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable error detection for arp inspection
        """
        return pulumi.get(self, "detect_cause_arp_inspection")

    @detect_cause_arp_inspection.setter
    def detect_cause_arp_inspection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_arp_inspection", value)

    @property
    @pulumi.getter(name="detectCauseBpduguard")
    def detect_cause_bpduguard(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable error detection on bpdu-guard
        """
        return pulumi.get(self, "detect_cause_bpduguard")

    @detect_cause_bpduguard.setter
    def detect_cause_bpduguard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_bpduguard", value)

    @property
    @pulumi.getter(name="detectCauseDhcpRateLimit")
    def detect_cause_dhcp_rate_limit(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable error detection on dhcp-rate-limit
        """
        return pulumi.get(self, "detect_cause_dhcp_rate_limit")

    @detect_cause_dhcp_rate_limit.setter
    def detect_cause_dhcp_rate_limit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_dhcp_rate_limit", value)

    @property
    @pulumi.getter(name="detectCauseDtpFlap")
    def detect_cause_dtp_flap(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable error detection on dtp-flapping
        """
        return pulumi.get(self, "detect_cause_dtp_flap")

    @detect_cause_dtp_flap.setter
    def detect_cause_dtp_flap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_dtp_flap", value)

    @property
    @pulumi.getter(name="detectCauseGbicInvalid")
    def detect_cause_gbic_invalid(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable error detection on gbic-invalid
        """
        return pulumi.get(self, "detect_cause_gbic_invalid")

    @detect_cause_gbic_invalid.setter
    def detect_cause_gbic_invalid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_gbic_invalid", value)

    @property
    @pulumi.getter(name="detectCauseInlinePower")
    def detect_cause_inline_power(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable error detection for inline-power
        """
        return pulumi.get(self, "detect_cause_inline_power")

    @detect_cause_inline_power.setter
    def detect_cause_inline_power(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_inline_power", value)

    @property
    @pulumi.getter(name="detectCauseL2ptguard")
    def detect_cause_l2ptguard(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from l2protocol-tunnel error disable state
        """
        return pulumi.get(self, "detect_cause_l2ptguard")

    @detect_cause_l2ptguard.setter
    def detect_cause_l2ptguard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_l2ptguard", value)

    @property
    @pulumi.getter(name="detectCauseLinkFlap")
    def detect_cause_link_flap(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable error detection on linkstate-flapping
        """
        return pulumi.get(self, "detect_cause_link_flap")

    @detect_cause_link_flap.setter
    def detect_cause_link_flap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_link_flap", value)

    @property
    @pulumi.getter(name="detectCauseLoopback")
    def detect_cause_loopback(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable error detection on loopback
        """
        return pulumi.get(self, "detect_cause_loopback")

    @detect_cause_loopback.setter
    def detect_cause_loopback(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_loopback", value)

    @property
    @pulumi.getter(name="detectCauseLoopdetect")
    def detect_cause_loopdetect(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable error detection on loop detect
        """
        return pulumi.get(self, "detect_cause_loopdetect")

    @detect_cause_loopdetect.setter
    def detect_cause_loopdetect(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_loopdetect", value)

    @property
    @pulumi.getter(name="detectCauseMlacpMinlink")
    def detect_cause_mlacp_minlink(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "detect_cause_mlacp_minlink")

    @detect_cause_mlacp_minlink.setter
    def detect_cause_mlacp_minlink(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_mlacp_minlink", value)

    @property
    @pulumi.getter(name="detectCausePagpFlap")
    def detect_cause_pagp_flap(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable error detection on pagp-flapping
        """
        return pulumi.get(self, "detect_cause_pagp_flap")

    @detect_cause_pagp_flap.setter
    def detect_cause_pagp_flap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_pagp_flap", value)

    @property
    @pulumi.getter(name="detectCausePppoeIaRateLimit")
    def detect_cause_pppoe_ia_rate_limit(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable error detection on PPPoE IA rate-limit
        """
        return pulumi.get(self, "detect_cause_pppoe_ia_rate_limit")

    @detect_cause_pppoe_ia_rate_limit.setter
    def detect_cause_pppoe_ia_rate_limit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_pppoe_ia_rate_limit", value)

    @property
    @pulumi.getter(name="detectCauseSecurityViolationShutdownVlan")
    def detect_cause_security_violation_shutdown_vlan(self) -> Optional[pulumi.Input[bool]]:
        """
        Shutdown vlan on 802.1x-guard violation
        """
        return pulumi.get(self, "detect_cause_security_violation_shutdown_vlan")

    @detect_cause_security_violation_shutdown_vlan.setter
    def detect_cause_security_violation_shutdown_vlan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_security_violation_shutdown_vlan", value)

    @property
    @pulumi.getter(name="detectCauseSfpConfigMismatch")
    def detect_cause_sfp_config_mismatch(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable error detection on SFP config mismatch
        """
        return pulumi.get(self, "detect_cause_sfp_config_mismatch")

    @detect_cause_sfp_config_mismatch.setter
    def detect_cause_sfp_config_mismatch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_sfp_config_mismatch", value)

    @property
    @pulumi.getter(name="detectCauseSmallFrame")
    def detect_cause_small_frame(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable error detection on small_frame
        """
        return pulumi.get(self, "detect_cause_small_frame")

    @detect_cause_small_frame.setter
    def detect_cause_small_frame(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "detect_cause_small_frame", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="flapSettingCauseDtpFlapMaxFlaps")
    def flap_setting_cause_dtp_flap_max_flaps(self) -> Optional[pulumi.Input[int]]:
        """
        maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        """
        return pulumi.get(self, "flap_setting_cause_dtp_flap_max_flaps")

    @flap_setting_cause_dtp_flap_max_flaps.setter
    def flap_setting_cause_dtp_flap_max_flaps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flap_setting_cause_dtp_flap_max_flaps", value)

    @property
    @pulumi.getter(name="flapSettingCauseDtpFlapTime")
    def flap_setting_cause_dtp_flap_time(self) -> Optional[pulumi.Input[int]]:
        """
        time period the flaps are counted - Range: `1`-`120`
        """
        return pulumi.get(self, "flap_setting_cause_dtp_flap_time")

    @flap_setting_cause_dtp_flap_time.setter
    def flap_setting_cause_dtp_flap_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flap_setting_cause_dtp_flap_time", value)

    @property
    @pulumi.getter(name="flapSettingCauseLinkFlapMaxFlaps")
    def flap_setting_cause_link_flap_max_flaps(self) -> Optional[pulumi.Input[int]]:
        """
        maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        """
        return pulumi.get(self, "flap_setting_cause_link_flap_max_flaps")

    @flap_setting_cause_link_flap_max_flaps.setter
    def flap_setting_cause_link_flap_max_flaps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flap_setting_cause_link_flap_max_flaps", value)

    @property
    @pulumi.getter(name="flapSettingCauseLinkFlapTime")
    def flap_setting_cause_link_flap_time(self) -> Optional[pulumi.Input[int]]:
        """
        time period the flaps are counted - Range: `1`-`120`
        """
        return pulumi.get(self, "flap_setting_cause_link_flap_time")

    @flap_setting_cause_link_flap_time.setter
    def flap_setting_cause_link_flap_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flap_setting_cause_link_flap_time", value)

    @property
    @pulumi.getter(name="flapSettingCausePagpFlapMaxFlaps")
    def flap_setting_cause_pagp_flap_max_flaps(self) -> Optional[pulumi.Input[int]]:
        """
        maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        """
        return pulumi.get(self, "flap_setting_cause_pagp_flap_max_flaps")

    @flap_setting_cause_pagp_flap_max_flaps.setter
    def flap_setting_cause_pagp_flap_max_flaps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flap_setting_cause_pagp_flap_max_flaps", value)

    @property
    @pulumi.getter(name="flapSettingCausePagpFlapTime")
    def flap_setting_cause_pagp_flap_time(self) -> Optional[pulumi.Input[int]]:
        """
        time period the flaps are counted - Range: `1`-`120`
        """
        return pulumi.get(self, "flap_setting_cause_pagp_flap_time")

    @flap_setting_cause_pagp_flap_time.setter
    def flap_setting_cause_pagp_flap_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flap_setting_cause_pagp_flap_time", value)

    @property
    @pulumi.getter(name="recoveryCauseAll")
    def recovery_cause_all(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from all error causes
        """
        return pulumi.get(self, "recovery_cause_all")

    @recovery_cause_all.setter
    def recovery_cause_all(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_all", value)

    @property
    @pulumi.getter(name="recoveryCauseArpInspection")
    def recovery_cause_arp_inspection(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from arp inspection error disable state
        """
        return pulumi.get(self, "recovery_cause_arp_inspection")

    @recovery_cause_arp_inspection.setter
    def recovery_cause_arp_inspection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_arp_inspection", value)

    @property
    @pulumi.getter(name="recoveryCauseBpduguard")
    def recovery_cause_bpduguard(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from BPDU Guard error
        """
        return pulumi.get(self, "recovery_cause_bpduguard")

    @recovery_cause_bpduguard.setter
    def recovery_cause_bpduguard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_bpduguard", value)

    @property
    @pulumi.getter(name="recoveryCauseChannelMisconfig")
    def recovery_cause_channel_misconfig(self) -> Optional[pulumi.Input[bool]]:
        """
        (STP) Enable timer to recover from channel misconfiguration error
        """
        return pulumi.get(self, "recovery_cause_channel_misconfig")

    @recovery_cause_channel_misconfig.setter
    def recovery_cause_channel_misconfig(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_channel_misconfig", value)

    @property
    @pulumi.getter(name="recoveryCauseDhcpRateLimit")
    def recovery_cause_dhcp_rate_limit(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from dhcp-rate-limit error
        """
        return pulumi.get(self, "recovery_cause_dhcp_rate_limit")

    @recovery_cause_dhcp_rate_limit.setter
    def recovery_cause_dhcp_rate_limit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_dhcp_rate_limit", value)

    @property
    @pulumi.getter(name="recoveryCauseDtpFlap")
    def recovery_cause_dtp_flap(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from dtp-flap error
        """
        return pulumi.get(self, "recovery_cause_dtp_flap")

    @recovery_cause_dtp_flap.setter
    def recovery_cause_dtp_flap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_dtp_flap", value)

    @property
    @pulumi.getter(name="recoveryCauseGbicInvalid")
    def recovery_cause_gbic_invalid(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from invalid GBIC error
        """
        return pulumi.get(self, "recovery_cause_gbic_invalid")

    @recovery_cause_gbic_invalid.setter
    def recovery_cause_gbic_invalid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_gbic_invalid", value)

    @property
    @pulumi.getter(name="recoveryCauseInlinePower")
    def recovery_cause_inline_power(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from inline-power error
        """
        return pulumi.get(self, "recovery_cause_inline_power")

    @recovery_cause_inline_power.setter
    def recovery_cause_inline_power(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_inline_power", value)

    @property
    @pulumi.getter(name="recoveryCauseL2ptguard")
    def recovery_cause_l2ptguard(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from l2protocol-tunnel error disable state
        """
        return pulumi.get(self, "recovery_cause_l2ptguard")

    @recovery_cause_l2ptguard.setter
    def recovery_cause_l2ptguard(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_l2ptguard", value)

    @property
    @pulumi.getter(name="recoveryCauseLinkFlap")
    def recovery_cause_link_flap(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from link-flap error
        """
        return pulumi.get(self, "recovery_cause_link_flap")

    @recovery_cause_link_flap.setter
    def recovery_cause_link_flap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_link_flap", value)

    @property
    @pulumi.getter(name="recoveryCauseLinkMonitorFailure")
    def recovery_cause_link_monitor_failure(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "recovery_cause_link_monitor_failure")

    @recovery_cause_link_monitor_failure.setter
    def recovery_cause_link_monitor_failure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_link_monitor_failure", value)

    @property
    @pulumi.getter(name="recoveryCauseLoopback")
    def recovery_cause_loopback(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from loopback error
        """
        return pulumi.get(self, "recovery_cause_loopback")

    @recovery_cause_loopback.setter
    def recovery_cause_loopback(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_loopback", value)

    @property
    @pulumi.getter(name="recoveryCauseLoopdetect")
    def recovery_cause_loopdetect(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from loop detect error
        """
        return pulumi.get(self, "recovery_cause_loopdetect")

    @recovery_cause_loopdetect.setter
    def recovery_cause_loopdetect(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_loopdetect", value)

    @property
    @pulumi.getter(name="recoveryCauseMacLimit")
    def recovery_cause_mac_limit(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from mac limit disable state
        """
        return pulumi.get(self, "recovery_cause_mac_limit")

    @recovery_cause_mac_limit.setter
    def recovery_cause_mac_limit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_mac_limit", value)

    @property
    @pulumi.getter(name="recoveryCauseMlacpMinlink")
    def recovery_cause_mlacp_minlink(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "recovery_cause_mlacp_minlink")

    @recovery_cause_mlacp_minlink.setter
    def recovery_cause_mlacp_minlink(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_mlacp_minlink", value)

    @property
    @pulumi.getter(name="recoveryCausePagpFlap")
    def recovery_cause_pagp_flap(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from pagp-flap error
        """
        return pulumi.get(self, "recovery_cause_pagp_flap")

    @recovery_cause_pagp_flap.setter
    def recovery_cause_pagp_flap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_pagp_flap", value)

    @property
    @pulumi.getter(name="recoveryCausePortModeFailure")
    def recovery_cause_port_mode_failure(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from port mode change failure
        """
        return pulumi.get(self, "recovery_cause_port_mode_failure")

    @recovery_cause_port_mode_failure.setter
    def recovery_cause_port_mode_failure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_port_mode_failure", value)

    @property
    @pulumi.getter(name="recoveryCausePppoeIaRateLimit")
    def recovery_cause_pppoe_ia_rate_limit(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from PPPoE IA rate-limit error
        """
        return pulumi.get(self, "recovery_cause_pppoe_ia_rate_limit")

    @recovery_cause_pppoe_ia_rate_limit.setter
    def recovery_cause_pppoe_ia_rate_limit(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_pppoe_ia_rate_limit", value)

    @property
    @pulumi.getter(name="recoveryCausePsecureViolation")
    def recovery_cause_psecure_violation(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from psecure violation error
        """
        return pulumi.get(self, "recovery_cause_psecure_violation")

    @recovery_cause_psecure_violation.setter
    def recovery_cause_psecure_violation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_psecure_violation", value)

    @property
    @pulumi.getter(name="recoveryCausePsp")
    def recovery_cause_psp(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "recovery_cause_psp")

    @recovery_cause_psp.setter
    def recovery_cause_psp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_psp", value)

    @property
    @pulumi.getter(name="recoveryCauseSecurityViolation")
    def recovery_cause_security_violation(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from 802.1x violation error
        """
        return pulumi.get(self, "recovery_cause_security_violation")

    @recovery_cause_security_violation.setter
    def recovery_cause_security_violation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_security_violation", value)

    @property
    @pulumi.getter(name="recoveryCauseSfpConfigMismatch")
    def recovery_cause_sfp_config_mismatch(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from SFP config mismatch error
        """
        return pulumi.get(self, "recovery_cause_sfp_config_mismatch")

    @recovery_cause_sfp_config_mismatch.setter
    def recovery_cause_sfp_config_mismatch(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_sfp_config_mismatch", value)

    @property
    @pulumi.getter(name="recoveryCauseSmallFrame")
    def recovery_cause_small_frame(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from small frame error
        """
        return pulumi.get(self, "recovery_cause_small_frame")

    @recovery_cause_small_frame.setter
    def recovery_cause_small_frame(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_small_frame", value)

    @property
    @pulumi.getter(name="recoveryCauseStormControl")
    def recovery_cause_storm_control(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from storm-control error
        """
        return pulumi.get(self, "recovery_cause_storm_control")

    @recovery_cause_storm_control.setter
    def recovery_cause_storm_control(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_storm_control", value)

    @property
    @pulumi.getter(name="recoveryCauseUdld")
    def recovery_cause_udld(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from udld error
        """
        return pulumi.get(self, "recovery_cause_udld")

    @recovery_cause_udld.setter
    def recovery_cause_udld(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_udld", value)

    @property
    @pulumi.getter(name="recoveryCauseUnicastFlood")
    def recovery_cause_unicast_flood(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "recovery_cause_unicast_flood")

    @recovery_cause_unicast_flood.setter
    def recovery_cause_unicast_flood(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_unicast_flood", value)

    @property
    @pulumi.getter(name="recoveryCauseVmps")
    def recovery_cause_vmps(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable timer to recover from vmps shutdown error
        """
        return pulumi.get(self, "recovery_cause_vmps")

    @recovery_cause_vmps.setter
    def recovery_cause_vmps(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recovery_cause_vmps", value)

    @property
    @pulumi.getter(name="recoveryInterval")
    def recovery_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Error disable recovery timer value - Range: `30`-`86400`
        """
        return pulumi.get(self, "recovery_interval")

    @recovery_interval.setter
    def recovery_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recovery_interval", value)


class Errdisable(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 detect_cause_all: Optional[pulumi.Input[bool]] = None,
                 detect_cause_arp_inspection: Optional[pulumi.Input[bool]] = None,
                 detect_cause_bpduguard: Optional[pulumi.Input[bool]] = None,
                 detect_cause_dhcp_rate_limit: Optional[pulumi.Input[bool]] = None,
                 detect_cause_dtp_flap: Optional[pulumi.Input[bool]] = None,
                 detect_cause_gbic_invalid: Optional[pulumi.Input[bool]] = None,
                 detect_cause_inline_power: Optional[pulumi.Input[bool]] = None,
                 detect_cause_l2ptguard: Optional[pulumi.Input[bool]] = None,
                 detect_cause_link_flap: Optional[pulumi.Input[bool]] = None,
                 detect_cause_loopback: Optional[pulumi.Input[bool]] = None,
                 detect_cause_loopdetect: Optional[pulumi.Input[bool]] = None,
                 detect_cause_mlacp_minlink: Optional[pulumi.Input[bool]] = None,
                 detect_cause_pagp_flap: Optional[pulumi.Input[bool]] = None,
                 detect_cause_pppoe_ia_rate_limit: Optional[pulumi.Input[bool]] = None,
                 detect_cause_security_violation_shutdown_vlan: Optional[pulumi.Input[bool]] = None,
                 detect_cause_sfp_config_mismatch: Optional[pulumi.Input[bool]] = None,
                 detect_cause_small_frame: Optional[pulumi.Input[bool]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 flap_setting_cause_dtp_flap_max_flaps: Optional[pulumi.Input[int]] = None,
                 flap_setting_cause_dtp_flap_time: Optional[pulumi.Input[int]] = None,
                 flap_setting_cause_link_flap_max_flaps: Optional[pulumi.Input[int]] = None,
                 flap_setting_cause_link_flap_time: Optional[pulumi.Input[int]] = None,
                 flap_setting_cause_pagp_flap_max_flaps: Optional[pulumi.Input[int]] = None,
                 flap_setting_cause_pagp_flap_time: Optional[pulumi.Input[int]] = None,
                 recovery_cause_all: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_arp_inspection: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_bpduguard: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_channel_misconfig: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_dhcp_rate_limit: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_dtp_flap: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_gbic_invalid: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_inline_power: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_l2ptguard: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_link_flap: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_link_monitor_failure: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_loopback: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_loopdetect: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_mac_limit: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_mlacp_minlink: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_pagp_flap: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_port_mode_failure: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_pppoe_ia_rate_limit: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_psecure_violation: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_psp: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_security_violation: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_sfp_config_mismatch: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_small_frame: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_storm_control: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_udld: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_unicast_flood: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_vmps: Optional[pulumi.Input[bool]] = None,
                 recovery_interval: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        This resource can manage the Errdisable configuration.

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_iosxe as iosxe

        example = iosxe.iosxe.Errdisable("example",
            detect_cause_all=True,
            detect_cause_dhcp_rate_limit=True,
            detect_cause_dtp_flap=True,
            detect_cause_l2ptguard=True,
            detect_cause_link_flap=True,
            detect_cause_pppoe_ia_rate_limit=True,
            flap_setting_cause_dtp_flap_max_flaps=80,
            flap_setting_cause_dtp_flap_time=90,
            flap_setting_cause_link_flap_max_flaps=80,
            flap_setting_cause_link_flap_time=90,
            flap_setting_cause_pagp_flap_max_flaps=80,
            flap_setting_cause_pagp_flap_time=90,
            recovery_cause_all=True,
            recovery_cause_arp_inspection=True,
            recovery_cause_bpduguard=True,
            recovery_cause_dhcp_rate_limit=True,
            recovery_cause_dtp_flap=True,
            recovery_cause_l2ptguard=True,
            recovery_cause_link_flap=True,
            recovery_cause_port_mode_failure=True,
            recovery_cause_pppoe_ia_rate_limit=True,
            recovery_cause_psecure_violation=True,
            recovery_cause_psp=True,
            recovery_cause_security_violation=True,
            recovery_cause_udld=True,
            recovery_interval=855)
        ```

        ## Import

        ```sh
         $ pulumi import iosxe:iosxe/errdisable:Errdisable example "Cisco-IOS-XE-native:native/errdisable"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[bool] detect_cause_all: Enable error detection on all cases
        :param pulumi.Input[bool] detect_cause_arp_inspection: Enable error detection for arp inspection
        :param pulumi.Input[bool] detect_cause_bpduguard: Enable error detection on bpdu-guard
        :param pulumi.Input[bool] detect_cause_dhcp_rate_limit: Enable error detection on dhcp-rate-limit
        :param pulumi.Input[bool] detect_cause_dtp_flap: Enable error detection on dtp-flapping
        :param pulumi.Input[bool] detect_cause_gbic_invalid: Enable error detection on gbic-invalid
        :param pulumi.Input[bool] detect_cause_inline_power: Enable error detection for inline-power
        :param pulumi.Input[bool] detect_cause_l2ptguard: Enable timer to recover from l2protocol-tunnel error disable state
        :param pulumi.Input[bool] detect_cause_link_flap: Enable error detection on linkstate-flapping
        :param pulumi.Input[bool] detect_cause_loopback: Enable error detection on loopback
        :param pulumi.Input[bool] detect_cause_loopdetect: Enable error detection on loop detect
        :param pulumi.Input[bool] detect_cause_pagp_flap: Enable error detection on pagp-flapping
        :param pulumi.Input[bool] detect_cause_pppoe_ia_rate_limit: Enable error detection on PPPoE IA rate-limit
        :param pulumi.Input[bool] detect_cause_security_violation_shutdown_vlan: Shutdown vlan on 802.1x-guard violation
        :param pulumi.Input[bool] detect_cause_sfp_config_mismatch: Enable error detection on SFP config mismatch
        :param pulumi.Input[bool] detect_cause_small_frame: Enable error detection on small_frame
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] flap_setting_cause_dtp_flap_max_flaps: maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        :param pulumi.Input[int] flap_setting_cause_dtp_flap_time: time period the flaps are counted - Range: `1`-`120`
        :param pulumi.Input[int] flap_setting_cause_link_flap_max_flaps: maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        :param pulumi.Input[int] flap_setting_cause_link_flap_time: time period the flaps are counted - Range: `1`-`120`
        :param pulumi.Input[int] flap_setting_cause_pagp_flap_max_flaps: maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        :param pulumi.Input[int] flap_setting_cause_pagp_flap_time: time period the flaps are counted - Range: `1`-`120`
        :param pulumi.Input[bool] recovery_cause_all: Enable timer to recover from all error causes
        :param pulumi.Input[bool] recovery_cause_arp_inspection: Enable timer to recover from arp inspection error disable state
        :param pulumi.Input[bool] recovery_cause_bpduguard: Enable timer to recover from BPDU Guard error
        :param pulumi.Input[bool] recovery_cause_channel_misconfig: (STP) Enable timer to recover from channel misconfiguration error
        :param pulumi.Input[bool] recovery_cause_dhcp_rate_limit: Enable timer to recover from dhcp-rate-limit error
        :param pulumi.Input[bool] recovery_cause_dtp_flap: Enable timer to recover from dtp-flap error
        :param pulumi.Input[bool] recovery_cause_gbic_invalid: Enable timer to recover from invalid GBIC error
        :param pulumi.Input[bool] recovery_cause_inline_power: Enable timer to recover from inline-power error
        :param pulumi.Input[bool] recovery_cause_l2ptguard: Enable timer to recover from l2protocol-tunnel error disable state
        :param pulumi.Input[bool] recovery_cause_link_flap: Enable timer to recover from link-flap error
        :param pulumi.Input[bool] recovery_cause_loopback: Enable timer to recover from loopback error
        :param pulumi.Input[bool] recovery_cause_loopdetect: Enable timer to recover from loop detect error
        :param pulumi.Input[bool] recovery_cause_mac_limit: Enable timer to recover from mac limit disable state
        :param pulumi.Input[bool] recovery_cause_pagp_flap: Enable timer to recover from pagp-flap error
        :param pulumi.Input[bool] recovery_cause_port_mode_failure: Enable timer to recover from port mode change failure
        :param pulumi.Input[bool] recovery_cause_pppoe_ia_rate_limit: Enable timer to recover from PPPoE IA rate-limit error
        :param pulumi.Input[bool] recovery_cause_psecure_violation: Enable timer to recover from psecure violation error
        :param pulumi.Input[bool] recovery_cause_security_violation: Enable timer to recover from 802.1x violation error
        :param pulumi.Input[bool] recovery_cause_sfp_config_mismatch: Enable timer to recover from SFP config mismatch error
        :param pulumi.Input[bool] recovery_cause_small_frame: Enable timer to recover from small frame error
        :param pulumi.Input[bool] recovery_cause_storm_control: Enable timer to recover from storm-control error
        :param pulumi.Input[bool] recovery_cause_udld: Enable timer to recover from udld error
        :param pulumi.Input[bool] recovery_cause_vmps: Enable timer to recover from vmps shutdown error
        :param pulumi.Input[int] recovery_interval: Error disable recovery timer value - Range: `30`-`86400`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ErrdisableArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the Errdisable configuration.

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_iosxe as iosxe

        example = iosxe.iosxe.Errdisable("example",
            detect_cause_all=True,
            detect_cause_dhcp_rate_limit=True,
            detect_cause_dtp_flap=True,
            detect_cause_l2ptguard=True,
            detect_cause_link_flap=True,
            detect_cause_pppoe_ia_rate_limit=True,
            flap_setting_cause_dtp_flap_max_flaps=80,
            flap_setting_cause_dtp_flap_time=90,
            flap_setting_cause_link_flap_max_flaps=80,
            flap_setting_cause_link_flap_time=90,
            flap_setting_cause_pagp_flap_max_flaps=80,
            flap_setting_cause_pagp_flap_time=90,
            recovery_cause_all=True,
            recovery_cause_arp_inspection=True,
            recovery_cause_bpduguard=True,
            recovery_cause_dhcp_rate_limit=True,
            recovery_cause_dtp_flap=True,
            recovery_cause_l2ptguard=True,
            recovery_cause_link_flap=True,
            recovery_cause_port_mode_failure=True,
            recovery_cause_pppoe_ia_rate_limit=True,
            recovery_cause_psecure_violation=True,
            recovery_cause_psp=True,
            recovery_cause_security_violation=True,
            recovery_cause_udld=True,
            recovery_interval=855)
        ```

        ## Import

        ```sh
         $ pulumi import iosxe:iosxe/errdisable:Errdisable example "Cisco-IOS-XE-native:native/errdisable"
        ```

        :param str resource_name: The name of the resource.
        :param ErrdisableArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ErrdisableArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 detect_cause_all: Optional[pulumi.Input[bool]] = None,
                 detect_cause_arp_inspection: Optional[pulumi.Input[bool]] = None,
                 detect_cause_bpduguard: Optional[pulumi.Input[bool]] = None,
                 detect_cause_dhcp_rate_limit: Optional[pulumi.Input[bool]] = None,
                 detect_cause_dtp_flap: Optional[pulumi.Input[bool]] = None,
                 detect_cause_gbic_invalid: Optional[pulumi.Input[bool]] = None,
                 detect_cause_inline_power: Optional[pulumi.Input[bool]] = None,
                 detect_cause_l2ptguard: Optional[pulumi.Input[bool]] = None,
                 detect_cause_link_flap: Optional[pulumi.Input[bool]] = None,
                 detect_cause_loopback: Optional[pulumi.Input[bool]] = None,
                 detect_cause_loopdetect: Optional[pulumi.Input[bool]] = None,
                 detect_cause_mlacp_minlink: Optional[pulumi.Input[bool]] = None,
                 detect_cause_pagp_flap: Optional[pulumi.Input[bool]] = None,
                 detect_cause_pppoe_ia_rate_limit: Optional[pulumi.Input[bool]] = None,
                 detect_cause_security_violation_shutdown_vlan: Optional[pulumi.Input[bool]] = None,
                 detect_cause_sfp_config_mismatch: Optional[pulumi.Input[bool]] = None,
                 detect_cause_small_frame: Optional[pulumi.Input[bool]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 flap_setting_cause_dtp_flap_max_flaps: Optional[pulumi.Input[int]] = None,
                 flap_setting_cause_dtp_flap_time: Optional[pulumi.Input[int]] = None,
                 flap_setting_cause_link_flap_max_flaps: Optional[pulumi.Input[int]] = None,
                 flap_setting_cause_link_flap_time: Optional[pulumi.Input[int]] = None,
                 flap_setting_cause_pagp_flap_max_flaps: Optional[pulumi.Input[int]] = None,
                 flap_setting_cause_pagp_flap_time: Optional[pulumi.Input[int]] = None,
                 recovery_cause_all: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_arp_inspection: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_bpduguard: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_channel_misconfig: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_dhcp_rate_limit: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_dtp_flap: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_gbic_invalid: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_inline_power: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_l2ptguard: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_link_flap: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_link_monitor_failure: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_loopback: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_loopdetect: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_mac_limit: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_mlacp_minlink: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_pagp_flap: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_port_mode_failure: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_pppoe_ia_rate_limit: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_psecure_violation: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_psp: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_security_violation: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_sfp_config_mismatch: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_small_frame: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_storm_control: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_udld: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_unicast_flood: Optional[pulumi.Input[bool]] = None,
                 recovery_cause_vmps: Optional[pulumi.Input[bool]] = None,
                 recovery_interval: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ErrdisableArgs.__new__(ErrdisableArgs)

            __props__.__dict__["delete_mode"] = delete_mode
            __props__.__dict__["detect_cause_all"] = detect_cause_all
            __props__.__dict__["detect_cause_arp_inspection"] = detect_cause_arp_inspection
            __props__.__dict__["detect_cause_bpduguard"] = detect_cause_bpduguard
            __props__.__dict__["detect_cause_dhcp_rate_limit"] = detect_cause_dhcp_rate_limit
            __props__.__dict__["detect_cause_dtp_flap"] = detect_cause_dtp_flap
            __props__.__dict__["detect_cause_gbic_invalid"] = detect_cause_gbic_invalid
            __props__.__dict__["detect_cause_inline_power"] = detect_cause_inline_power
            __props__.__dict__["detect_cause_l2ptguard"] = detect_cause_l2ptguard
            __props__.__dict__["detect_cause_link_flap"] = detect_cause_link_flap
            __props__.__dict__["detect_cause_loopback"] = detect_cause_loopback
            __props__.__dict__["detect_cause_loopdetect"] = detect_cause_loopdetect
            __props__.__dict__["detect_cause_mlacp_minlink"] = detect_cause_mlacp_minlink
            __props__.__dict__["detect_cause_pagp_flap"] = detect_cause_pagp_flap
            __props__.__dict__["detect_cause_pppoe_ia_rate_limit"] = detect_cause_pppoe_ia_rate_limit
            __props__.__dict__["detect_cause_security_violation_shutdown_vlan"] = detect_cause_security_violation_shutdown_vlan
            __props__.__dict__["detect_cause_sfp_config_mismatch"] = detect_cause_sfp_config_mismatch
            __props__.__dict__["detect_cause_small_frame"] = detect_cause_small_frame
            __props__.__dict__["device"] = device
            __props__.__dict__["flap_setting_cause_dtp_flap_max_flaps"] = flap_setting_cause_dtp_flap_max_flaps
            __props__.__dict__["flap_setting_cause_dtp_flap_time"] = flap_setting_cause_dtp_flap_time
            __props__.__dict__["flap_setting_cause_link_flap_max_flaps"] = flap_setting_cause_link_flap_max_flaps
            __props__.__dict__["flap_setting_cause_link_flap_time"] = flap_setting_cause_link_flap_time
            __props__.__dict__["flap_setting_cause_pagp_flap_max_flaps"] = flap_setting_cause_pagp_flap_max_flaps
            __props__.__dict__["flap_setting_cause_pagp_flap_time"] = flap_setting_cause_pagp_flap_time
            __props__.__dict__["recovery_cause_all"] = recovery_cause_all
            __props__.__dict__["recovery_cause_arp_inspection"] = recovery_cause_arp_inspection
            __props__.__dict__["recovery_cause_bpduguard"] = recovery_cause_bpduguard
            __props__.__dict__["recovery_cause_channel_misconfig"] = recovery_cause_channel_misconfig
            __props__.__dict__["recovery_cause_dhcp_rate_limit"] = recovery_cause_dhcp_rate_limit
            __props__.__dict__["recovery_cause_dtp_flap"] = recovery_cause_dtp_flap
            __props__.__dict__["recovery_cause_gbic_invalid"] = recovery_cause_gbic_invalid
            __props__.__dict__["recovery_cause_inline_power"] = recovery_cause_inline_power
            __props__.__dict__["recovery_cause_l2ptguard"] = recovery_cause_l2ptguard
            __props__.__dict__["recovery_cause_link_flap"] = recovery_cause_link_flap
            __props__.__dict__["recovery_cause_link_monitor_failure"] = recovery_cause_link_monitor_failure
            __props__.__dict__["recovery_cause_loopback"] = recovery_cause_loopback
            __props__.__dict__["recovery_cause_loopdetect"] = recovery_cause_loopdetect
            __props__.__dict__["recovery_cause_mac_limit"] = recovery_cause_mac_limit
            __props__.__dict__["recovery_cause_mlacp_minlink"] = recovery_cause_mlacp_minlink
            __props__.__dict__["recovery_cause_pagp_flap"] = recovery_cause_pagp_flap
            __props__.__dict__["recovery_cause_port_mode_failure"] = recovery_cause_port_mode_failure
            __props__.__dict__["recovery_cause_pppoe_ia_rate_limit"] = recovery_cause_pppoe_ia_rate_limit
            __props__.__dict__["recovery_cause_psecure_violation"] = recovery_cause_psecure_violation
            __props__.__dict__["recovery_cause_psp"] = recovery_cause_psp
            __props__.__dict__["recovery_cause_security_violation"] = recovery_cause_security_violation
            __props__.__dict__["recovery_cause_sfp_config_mismatch"] = recovery_cause_sfp_config_mismatch
            __props__.__dict__["recovery_cause_small_frame"] = recovery_cause_small_frame
            __props__.__dict__["recovery_cause_storm_control"] = recovery_cause_storm_control
            __props__.__dict__["recovery_cause_udld"] = recovery_cause_udld
            __props__.__dict__["recovery_cause_unicast_flood"] = recovery_cause_unicast_flood
            __props__.__dict__["recovery_cause_vmps"] = recovery_cause_vmps
            __props__.__dict__["recovery_interval"] = recovery_interval
        super(Errdisable, __self__).__init__(
            'iosxe:iosxe/errdisable:Errdisable',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            delete_mode: Optional[pulumi.Input[str]] = None,
            detect_cause_all: Optional[pulumi.Input[bool]] = None,
            detect_cause_arp_inspection: Optional[pulumi.Input[bool]] = None,
            detect_cause_bpduguard: Optional[pulumi.Input[bool]] = None,
            detect_cause_dhcp_rate_limit: Optional[pulumi.Input[bool]] = None,
            detect_cause_dtp_flap: Optional[pulumi.Input[bool]] = None,
            detect_cause_gbic_invalid: Optional[pulumi.Input[bool]] = None,
            detect_cause_inline_power: Optional[pulumi.Input[bool]] = None,
            detect_cause_l2ptguard: Optional[pulumi.Input[bool]] = None,
            detect_cause_link_flap: Optional[pulumi.Input[bool]] = None,
            detect_cause_loopback: Optional[pulumi.Input[bool]] = None,
            detect_cause_loopdetect: Optional[pulumi.Input[bool]] = None,
            detect_cause_mlacp_minlink: Optional[pulumi.Input[bool]] = None,
            detect_cause_pagp_flap: Optional[pulumi.Input[bool]] = None,
            detect_cause_pppoe_ia_rate_limit: Optional[pulumi.Input[bool]] = None,
            detect_cause_security_violation_shutdown_vlan: Optional[pulumi.Input[bool]] = None,
            detect_cause_sfp_config_mismatch: Optional[pulumi.Input[bool]] = None,
            detect_cause_small_frame: Optional[pulumi.Input[bool]] = None,
            device: Optional[pulumi.Input[str]] = None,
            flap_setting_cause_dtp_flap_max_flaps: Optional[pulumi.Input[int]] = None,
            flap_setting_cause_dtp_flap_time: Optional[pulumi.Input[int]] = None,
            flap_setting_cause_link_flap_max_flaps: Optional[pulumi.Input[int]] = None,
            flap_setting_cause_link_flap_time: Optional[pulumi.Input[int]] = None,
            flap_setting_cause_pagp_flap_max_flaps: Optional[pulumi.Input[int]] = None,
            flap_setting_cause_pagp_flap_time: Optional[pulumi.Input[int]] = None,
            recovery_cause_all: Optional[pulumi.Input[bool]] = None,
            recovery_cause_arp_inspection: Optional[pulumi.Input[bool]] = None,
            recovery_cause_bpduguard: Optional[pulumi.Input[bool]] = None,
            recovery_cause_channel_misconfig: Optional[pulumi.Input[bool]] = None,
            recovery_cause_dhcp_rate_limit: Optional[pulumi.Input[bool]] = None,
            recovery_cause_dtp_flap: Optional[pulumi.Input[bool]] = None,
            recovery_cause_gbic_invalid: Optional[pulumi.Input[bool]] = None,
            recovery_cause_inline_power: Optional[pulumi.Input[bool]] = None,
            recovery_cause_l2ptguard: Optional[pulumi.Input[bool]] = None,
            recovery_cause_link_flap: Optional[pulumi.Input[bool]] = None,
            recovery_cause_link_monitor_failure: Optional[pulumi.Input[bool]] = None,
            recovery_cause_loopback: Optional[pulumi.Input[bool]] = None,
            recovery_cause_loopdetect: Optional[pulumi.Input[bool]] = None,
            recovery_cause_mac_limit: Optional[pulumi.Input[bool]] = None,
            recovery_cause_mlacp_minlink: Optional[pulumi.Input[bool]] = None,
            recovery_cause_pagp_flap: Optional[pulumi.Input[bool]] = None,
            recovery_cause_port_mode_failure: Optional[pulumi.Input[bool]] = None,
            recovery_cause_pppoe_ia_rate_limit: Optional[pulumi.Input[bool]] = None,
            recovery_cause_psecure_violation: Optional[pulumi.Input[bool]] = None,
            recovery_cause_psp: Optional[pulumi.Input[bool]] = None,
            recovery_cause_security_violation: Optional[pulumi.Input[bool]] = None,
            recovery_cause_sfp_config_mismatch: Optional[pulumi.Input[bool]] = None,
            recovery_cause_small_frame: Optional[pulumi.Input[bool]] = None,
            recovery_cause_storm_control: Optional[pulumi.Input[bool]] = None,
            recovery_cause_udld: Optional[pulumi.Input[bool]] = None,
            recovery_cause_unicast_flood: Optional[pulumi.Input[bool]] = None,
            recovery_cause_vmps: Optional[pulumi.Input[bool]] = None,
            recovery_interval: Optional[pulumi.Input[int]] = None) -> 'Errdisable':
        """
        Get an existing Errdisable resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[bool] detect_cause_all: Enable error detection on all cases
        :param pulumi.Input[bool] detect_cause_arp_inspection: Enable error detection for arp inspection
        :param pulumi.Input[bool] detect_cause_bpduguard: Enable error detection on bpdu-guard
        :param pulumi.Input[bool] detect_cause_dhcp_rate_limit: Enable error detection on dhcp-rate-limit
        :param pulumi.Input[bool] detect_cause_dtp_flap: Enable error detection on dtp-flapping
        :param pulumi.Input[bool] detect_cause_gbic_invalid: Enable error detection on gbic-invalid
        :param pulumi.Input[bool] detect_cause_inline_power: Enable error detection for inline-power
        :param pulumi.Input[bool] detect_cause_l2ptguard: Enable timer to recover from l2protocol-tunnel error disable state
        :param pulumi.Input[bool] detect_cause_link_flap: Enable error detection on linkstate-flapping
        :param pulumi.Input[bool] detect_cause_loopback: Enable error detection on loopback
        :param pulumi.Input[bool] detect_cause_loopdetect: Enable error detection on loop detect
        :param pulumi.Input[bool] detect_cause_pagp_flap: Enable error detection on pagp-flapping
        :param pulumi.Input[bool] detect_cause_pppoe_ia_rate_limit: Enable error detection on PPPoE IA rate-limit
        :param pulumi.Input[bool] detect_cause_security_violation_shutdown_vlan: Shutdown vlan on 802.1x-guard violation
        :param pulumi.Input[bool] detect_cause_sfp_config_mismatch: Enable error detection on SFP config mismatch
        :param pulumi.Input[bool] detect_cause_small_frame: Enable error detection on small_frame
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] flap_setting_cause_dtp_flap_max_flaps: maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        :param pulumi.Input[int] flap_setting_cause_dtp_flap_time: time period the flaps are counted - Range: `1`-`120`
        :param pulumi.Input[int] flap_setting_cause_link_flap_max_flaps: maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        :param pulumi.Input[int] flap_setting_cause_link_flap_time: time period the flaps are counted - Range: `1`-`120`
        :param pulumi.Input[int] flap_setting_cause_pagp_flap_max_flaps: maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        :param pulumi.Input[int] flap_setting_cause_pagp_flap_time: time period the flaps are counted - Range: `1`-`120`
        :param pulumi.Input[bool] recovery_cause_all: Enable timer to recover from all error causes
        :param pulumi.Input[bool] recovery_cause_arp_inspection: Enable timer to recover from arp inspection error disable state
        :param pulumi.Input[bool] recovery_cause_bpduguard: Enable timer to recover from BPDU Guard error
        :param pulumi.Input[bool] recovery_cause_channel_misconfig: (STP) Enable timer to recover from channel misconfiguration error
        :param pulumi.Input[bool] recovery_cause_dhcp_rate_limit: Enable timer to recover from dhcp-rate-limit error
        :param pulumi.Input[bool] recovery_cause_dtp_flap: Enable timer to recover from dtp-flap error
        :param pulumi.Input[bool] recovery_cause_gbic_invalid: Enable timer to recover from invalid GBIC error
        :param pulumi.Input[bool] recovery_cause_inline_power: Enable timer to recover from inline-power error
        :param pulumi.Input[bool] recovery_cause_l2ptguard: Enable timer to recover from l2protocol-tunnel error disable state
        :param pulumi.Input[bool] recovery_cause_link_flap: Enable timer to recover from link-flap error
        :param pulumi.Input[bool] recovery_cause_loopback: Enable timer to recover from loopback error
        :param pulumi.Input[bool] recovery_cause_loopdetect: Enable timer to recover from loop detect error
        :param pulumi.Input[bool] recovery_cause_mac_limit: Enable timer to recover from mac limit disable state
        :param pulumi.Input[bool] recovery_cause_pagp_flap: Enable timer to recover from pagp-flap error
        :param pulumi.Input[bool] recovery_cause_port_mode_failure: Enable timer to recover from port mode change failure
        :param pulumi.Input[bool] recovery_cause_pppoe_ia_rate_limit: Enable timer to recover from PPPoE IA rate-limit error
        :param pulumi.Input[bool] recovery_cause_psecure_violation: Enable timer to recover from psecure violation error
        :param pulumi.Input[bool] recovery_cause_security_violation: Enable timer to recover from 802.1x violation error
        :param pulumi.Input[bool] recovery_cause_sfp_config_mismatch: Enable timer to recover from SFP config mismatch error
        :param pulumi.Input[bool] recovery_cause_small_frame: Enable timer to recover from small frame error
        :param pulumi.Input[bool] recovery_cause_storm_control: Enable timer to recover from storm-control error
        :param pulumi.Input[bool] recovery_cause_udld: Enable timer to recover from udld error
        :param pulumi.Input[bool] recovery_cause_vmps: Enable timer to recover from vmps shutdown error
        :param pulumi.Input[int] recovery_interval: Error disable recovery timer value - Range: `30`-`86400`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ErrdisableState.__new__(_ErrdisableState)

        __props__.__dict__["delete_mode"] = delete_mode
        __props__.__dict__["detect_cause_all"] = detect_cause_all
        __props__.__dict__["detect_cause_arp_inspection"] = detect_cause_arp_inspection
        __props__.__dict__["detect_cause_bpduguard"] = detect_cause_bpduguard
        __props__.__dict__["detect_cause_dhcp_rate_limit"] = detect_cause_dhcp_rate_limit
        __props__.__dict__["detect_cause_dtp_flap"] = detect_cause_dtp_flap
        __props__.__dict__["detect_cause_gbic_invalid"] = detect_cause_gbic_invalid
        __props__.__dict__["detect_cause_inline_power"] = detect_cause_inline_power
        __props__.__dict__["detect_cause_l2ptguard"] = detect_cause_l2ptguard
        __props__.__dict__["detect_cause_link_flap"] = detect_cause_link_flap
        __props__.__dict__["detect_cause_loopback"] = detect_cause_loopback
        __props__.__dict__["detect_cause_loopdetect"] = detect_cause_loopdetect
        __props__.__dict__["detect_cause_mlacp_minlink"] = detect_cause_mlacp_minlink
        __props__.__dict__["detect_cause_pagp_flap"] = detect_cause_pagp_flap
        __props__.__dict__["detect_cause_pppoe_ia_rate_limit"] = detect_cause_pppoe_ia_rate_limit
        __props__.__dict__["detect_cause_security_violation_shutdown_vlan"] = detect_cause_security_violation_shutdown_vlan
        __props__.__dict__["detect_cause_sfp_config_mismatch"] = detect_cause_sfp_config_mismatch
        __props__.__dict__["detect_cause_small_frame"] = detect_cause_small_frame
        __props__.__dict__["device"] = device
        __props__.__dict__["flap_setting_cause_dtp_flap_max_flaps"] = flap_setting_cause_dtp_flap_max_flaps
        __props__.__dict__["flap_setting_cause_dtp_flap_time"] = flap_setting_cause_dtp_flap_time
        __props__.__dict__["flap_setting_cause_link_flap_max_flaps"] = flap_setting_cause_link_flap_max_flaps
        __props__.__dict__["flap_setting_cause_link_flap_time"] = flap_setting_cause_link_flap_time
        __props__.__dict__["flap_setting_cause_pagp_flap_max_flaps"] = flap_setting_cause_pagp_flap_max_flaps
        __props__.__dict__["flap_setting_cause_pagp_flap_time"] = flap_setting_cause_pagp_flap_time
        __props__.__dict__["recovery_cause_all"] = recovery_cause_all
        __props__.__dict__["recovery_cause_arp_inspection"] = recovery_cause_arp_inspection
        __props__.__dict__["recovery_cause_bpduguard"] = recovery_cause_bpduguard
        __props__.__dict__["recovery_cause_channel_misconfig"] = recovery_cause_channel_misconfig
        __props__.__dict__["recovery_cause_dhcp_rate_limit"] = recovery_cause_dhcp_rate_limit
        __props__.__dict__["recovery_cause_dtp_flap"] = recovery_cause_dtp_flap
        __props__.__dict__["recovery_cause_gbic_invalid"] = recovery_cause_gbic_invalid
        __props__.__dict__["recovery_cause_inline_power"] = recovery_cause_inline_power
        __props__.__dict__["recovery_cause_l2ptguard"] = recovery_cause_l2ptguard
        __props__.__dict__["recovery_cause_link_flap"] = recovery_cause_link_flap
        __props__.__dict__["recovery_cause_link_monitor_failure"] = recovery_cause_link_monitor_failure
        __props__.__dict__["recovery_cause_loopback"] = recovery_cause_loopback
        __props__.__dict__["recovery_cause_loopdetect"] = recovery_cause_loopdetect
        __props__.__dict__["recovery_cause_mac_limit"] = recovery_cause_mac_limit
        __props__.__dict__["recovery_cause_mlacp_minlink"] = recovery_cause_mlacp_minlink
        __props__.__dict__["recovery_cause_pagp_flap"] = recovery_cause_pagp_flap
        __props__.__dict__["recovery_cause_port_mode_failure"] = recovery_cause_port_mode_failure
        __props__.__dict__["recovery_cause_pppoe_ia_rate_limit"] = recovery_cause_pppoe_ia_rate_limit
        __props__.__dict__["recovery_cause_psecure_violation"] = recovery_cause_psecure_violation
        __props__.__dict__["recovery_cause_psp"] = recovery_cause_psp
        __props__.__dict__["recovery_cause_security_violation"] = recovery_cause_security_violation
        __props__.__dict__["recovery_cause_sfp_config_mismatch"] = recovery_cause_sfp_config_mismatch
        __props__.__dict__["recovery_cause_small_frame"] = recovery_cause_small_frame
        __props__.__dict__["recovery_cause_storm_control"] = recovery_cause_storm_control
        __props__.__dict__["recovery_cause_udld"] = recovery_cause_udld
        __props__.__dict__["recovery_cause_unicast_flood"] = recovery_cause_unicast_flood
        __props__.__dict__["recovery_cause_vmps"] = recovery_cause_vmps
        __props__.__dict__["recovery_interval"] = recovery_interval
        return Errdisable(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @property
    @pulumi.getter(name="detectCauseAll")
    def detect_cause_all(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable error detection on all cases
        """
        return pulumi.get(self, "detect_cause_all")

    @property
    @pulumi.getter(name="detectCauseArpInspection")
    def detect_cause_arp_inspection(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable error detection for arp inspection
        """
        return pulumi.get(self, "detect_cause_arp_inspection")

    @property
    @pulumi.getter(name="detectCauseBpduguard")
    def detect_cause_bpduguard(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable error detection on bpdu-guard
        """
        return pulumi.get(self, "detect_cause_bpduguard")

    @property
    @pulumi.getter(name="detectCauseDhcpRateLimit")
    def detect_cause_dhcp_rate_limit(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable error detection on dhcp-rate-limit
        """
        return pulumi.get(self, "detect_cause_dhcp_rate_limit")

    @property
    @pulumi.getter(name="detectCauseDtpFlap")
    def detect_cause_dtp_flap(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable error detection on dtp-flapping
        """
        return pulumi.get(self, "detect_cause_dtp_flap")

    @property
    @pulumi.getter(name="detectCauseGbicInvalid")
    def detect_cause_gbic_invalid(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable error detection on gbic-invalid
        """
        return pulumi.get(self, "detect_cause_gbic_invalid")

    @property
    @pulumi.getter(name="detectCauseInlinePower")
    def detect_cause_inline_power(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable error detection for inline-power
        """
        return pulumi.get(self, "detect_cause_inline_power")

    @property
    @pulumi.getter(name="detectCauseL2ptguard")
    def detect_cause_l2ptguard(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable timer to recover from l2protocol-tunnel error disable state
        """
        return pulumi.get(self, "detect_cause_l2ptguard")

    @property
    @pulumi.getter(name="detectCauseLinkFlap")
    def detect_cause_link_flap(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable error detection on linkstate-flapping
        """
        return pulumi.get(self, "detect_cause_link_flap")

    @property
    @pulumi.getter(name="detectCauseLoopback")
    def detect_cause_loopback(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable error detection on loopback
        """
        return pulumi.get(self, "detect_cause_loopback")

    @property
    @pulumi.getter(name="detectCauseLoopdetect")
    def detect_cause_loopdetect(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable error detection on loop detect
        """
        return pulumi.get(self, "detect_cause_loopdetect")

    @property
    @pulumi.getter(name="detectCauseMlacpMinlink")
    def detect_cause_mlacp_minlink(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "detect_cause_mlacp_minlink")

    @property
    @pulumi.getter(name="detectCausePagpFlap")
    def detect_cause_pagp_flap(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable error detection on pagp-flapping
        """
        return pulumi.get(self, "detect_cause_pagp_flap")

    @property
    @pulumi.getter(name="detectCausePppoeIaRateLimit")
    def detect_cause_pppoe_ia_rate_limit(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable error detection on PPPoE IA rate-limit
        """
        return pulumi.get(self, "detect_cause_pppoe_ia_rate_limit")

    @property
    @pulumi.getter(name="detectCauseSecurityViolationShutdownVlan")
    def detect_cause_security_violation_shutdown_vlan(self) -> pulumi.Output[Optional[bool]]:
        """
        Shutdown vlan on 802.1x-guard violation
        """
        return pulumi.get(self, "detect_cause_security_violation_shutdown_vlan")

    @property
    @pulumi.getter(name="detectCauseSfpConfigMismatch")
    def detect_cause_sfp_config_mismatch(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable error detection on SFP config mismatch
        """
        return pulumi.get(self, "detect_cause_sfp_config_mismatch")

    @property
    @pulumi.getter(name="detectCauseSmallFrame")
    def detect_cause_small_frame(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable error detection on small_frame
        """
        return pulumi.get(self, "detect_cause_small_frame")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="flapSettingCauseDtpFlapMaxFlaps")
    def flap_setting_cause_dtp_flap_max_flaps(self) -> pulumi.Output[Optional[int]]:
        """
        maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        """
        return pulumi.get(self, "flap_setting_cause_dtp_flap_max_flaps")

    @property
    @pulumi.getter(name="flapSettingCauseDtpFlapTime")
    def flap_setting_cause_dtp_flap_time(self) -> pulumi.Output[Optional[int]]:
        """
        time period the flaps are counted - Range: `1`-`120`
        """
        return pulumi.get(self, "flap_setting_cause_dtp_flap_time")

    @property
    @pulumi.getter(name="flapSettingCauseLinkFlapMaxFlaps")
    def flap_setting_cause_link_flap_max_flaps(self) -> pulumi.Output[Optional[int]]:
        """
        maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        """
        return pulumi.get(self, "flap_setting_cause_link_flap_max_flaps")

    @property
    @pulumi.getter(name="flapSettingCauseLinkFlapTime")
    def flap_setting_cause_link_flap_time(self) -> pulumi.Output[Optional[int]]:
        """
        time period the flaps are counted - Range: `1`-`120`
        """
        return pulumi.get(self, "flap_setting_cause_link_flap_time")

    @property
    @pulumi.getter(name="flapSettingCausePagpFlapMaxFlaps")
    def flap_setting_cause_pagp_flap_max_flaps(self) -> pulumi.Output[Optional[int]]:
        """
        maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        """
        return pulumi.get(self, "flap_setting_cause_pagp_flap_max_flaps")

    @property
    @pulumi.getter(name="flapSettingCausePagpFlapTime")
    def flap_setting_cause_pagp_flap_time(self) -> pulumi.Output[Optional[int]]:
        """
        time period the flaps are counted - Range: `1`-`120`
        """
        return pulumi.get(self, "flap_setting_cause_pagp_flap_time")

    @property
    @pulumi.getter(name="recoveryCauseAll")
    def recovery_cause_all(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable timer to recover from all error causes
        """
        return pulumi.get(self, "recovery_cause_all")

    @property
    @pulumi.getter(name="recoveryCauseArpInspection")
    def recovery_cause_arp_inspection(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable timer to recover from arp inspection error disable state
        """
        return pulumi.get(self, "recovery_cause_arp_inspection")

    @property
    @pulumi.getter(name="recoveryCauseBpduguard")
    def recovery_cause_bpduguard(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable timer to recover from BPDU Guard error
        """
        return pulumi.get(self, "recovery_cause_bpduguard")

    @property
    @pulumi.getter(name="recoveryCauseChannelMisconfig")
    def recovery_cause_channel_misconfig(self) -> pulumi.Output[Optional[bool]]:
        """
        (STP) Enable timer to recover from channel misconfiguration error
        """
        return pulumi.get(self, "recovery_cause_channel_misconfig")

    @property
    @pulumi.getter(name="recoveryCauseDhcpRateLimit")
    def recovery_cause_dhcp_rate_limit(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable timer to recover from dhcp-rate-limit error
        """
        return pulumi.get(self, "recovery_cause_dhcp_rate_limit")

    @property
    @pulumi.getter(name="recoveryCauseDtpFlap")
    def recovery_cause_dtp_flap(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable timer to recover from dtp-flap error
        """
        return pulumi.get(self, "recovery_cause_dtp_flap")

    @property
    @pulumi.getter(name="recoveryCauseGbicInvalid")
    def recovery_cause_gbic_invalid(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable timer to recover from invalid GBIC error
        """
        return pulumi.get(self, "recovery_cause_gbic_invalid")

    @property
    @pulumi.getter(name="recoveryCauseInlinePower")
    def recovery_cause_inline_power(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable timer to recover from inline-power error
        """
        return pulumi.get(self, "recovery_cause_inline_power")

    @property
    @pulumi.getter(name="recoveryCauseL2ptguard")
    def recovery_cause_l2ptguard(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable timer to recover from l2protocol-tunnel error disable state
        """
        return pulumi.get(self, "recovery_cause_l2ptguard")

    @property
    @pulumi.getter(name="recoveryCauseLinkFlap")
    def recovery_cause_link_flap(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable timer to recover from link-flap error
        """
        return pulumi.get(self, "recovery_cause_link_flap")

    @property
    @pulumi.getter(name="recoveryCauseLinkMonitorFailure")
    def recovery_cause_link_monitor_failure(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "recovery_cause_link_monitor_failure")

    @property
    @pulumi.getter(name="recoveryCauseLoopback")
    def recovery_cause_loopback(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable timer to recover from loopback error
        """
        return pulumi.get(self, "recovery_cause_loopback")

    @property
    @pulumi.getter(name="recoveryCauseLoopdetect")
    def recovery_cause_loopdetect(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable timer to recover from loop detect error
        """
        return pulumi.get(self, "recovery_cause_loopdetect")

    @property
    @pulumi.getter(name="recoveryCauseMacLimit")
    def recovery_cause_mac_limit(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable timer to recover from mac limit disable state
        """
        return pulumi.get(self, "recovery_cause_mac_limit")

    @property
    @pulumi.getter(name="recoveryCauseMlacpMinlink")
    def recovery_cause_mlacp_minlink(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "recovery_cause_mlacp_minlink")

    @property
    @pulumi.getter(name="recoveryCausePagpFlap")
    def recovery_cause_pagp_flap(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable timer to recover from pagp-flap error
        """
        return pulumi.get(self, "recovery_cause_pagp_flap")

    @property
    @pulumi.getter(name="recoveryCausePortModeFailure")
    def recovery_cause_port_mode_failure(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable timer to recover from port mode change failure
        """
        return pulumi.get(self, "recovery_cause_port_mode_failure")

    @property
    @pulumi.getter(name="recoveryCausePppoeIaRateLimit")
    def recovery_cause_pppoe_ia_rate_limit(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable timer to recover from PPPoE IA rate-limit error
        """
        return pulumi.get(self, "recovery_cause_pppoe_ia_rate_limit")

    @property
    @pulumi.getter(name="recoveryCausePsecureViolation")
    def recovery_cause_psecure_violation(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable timer to recover from psecure violation error
        """
        return pulumi.get(self, "recovery_cause_psecure_violation")

    @property
    @pulumi.getter(name="recoveryCausePsp")
    def recovery_cause_psp(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "recovery_cause_psp")

    @property
    @pulumi.getter(name="recoveryCauseSecurityViolation")
    def recovery_cause_security_violation(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable timer to recover from 802.1x violation error
        """
        return pulumi.get(self, "recovery_cause_security_violation")

    @property
    @pulumi.getter(name="recoveryCauseSfpConfigMismatch")
    def recovery_cause_sfp_config_mismatch(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable timer to recover from SFP config mismatch error
        """
        return pulumi.get(self, "recovery_cause_sfp_config_mismatch")

    @property
    @pulumi.getter(name="recoveryCauseSmallFrame")
    def recovery_cause_small_frame(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable timer to recover from small frame error
        """
        return pulumi.get(self, "recovery_cause_small_frame")

    @property
    @pulumi.getter(name="recoveryCauseStormControl")
    def recovery_cause_storm_control(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable timer to recover from storm-control error
        """
        return pulumi.get(self, "recovery_cause_storm_control")

    @property
    @pulumi.getter(name="recoveryCauseUdld")
    def recovery_cause_udld(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable timer to recover from udld error
        """
        return pulumi.get(self, "recovery_cause_udld")

    @property
    @pulumi.getter(name="recoveryCauseUnicastFlood")
    def recovery_cause_unicast_flood(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "recovery_cause_unicast_flood")

    @property
    @pulumi.getter(name="recoveryCauseVmps")
    def recovery_cause_vmps(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable timer to recover from vmps shutdown error
        """
        return pulumi.get(self, "recovery_cause_vmps")

    @property
    @pulumi.getter(name="recoveryInterval")
    def recovery_interval(self) -> pulumi.Output[Optional[int]]:
        """
        Error disable recovery timer value - Range: `30`-`86400`
        """
        return pulumi.get(self, "recovery_interval")

