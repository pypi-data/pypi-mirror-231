# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InterfaceNveArgs', 'InterfaceNve']

@pulumi.input_type
class InterfaceNveArgs:
    def __init__(__self__, *,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 host_reachability_protocol_bgp: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[int]] = None,
                 shutdown: Optional[pulumi.Input[bool]] = None,
                 source_interface_loopback: Optional[pulumi.Input[int]] = None,
                 vni_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceNveVniVrfArgs']]]] = None,
                 vnis: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceNveVniArgs']]]] = None):
        """
        The set of arguments for constructing a InterfaceNve resource.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] description: Interface specific description
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] name: - Range: `1`-`4096`
        :param pulumi.Input[bool] shutdown: Shutdown the selected interface
        :param pulumi.Input[int] source_interface_loopback: Loopback interface - Range: `0`-`2147483647`
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceNveVniVrfArgs']]] vni_vrfs: Configure VNI information
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceNveVniArgs']]] vnis: Configure VNI information
        """
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if host_reachability_protocol_bgp is not None:
            pulumi.set(__self__, "host_reachability_protocol_bgp", host_reachability_protocol_bgp)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if source_interface_loopback is not None:
            pulumi.set(__self__, "source_interface_loopback", source_interface_loopback)
        if vni_vrfs is not None:
            pulumi.set(__self__, "vni_vrfs", vni_vrfs)
        if vnis is not None:
            pulumi.set(__self__, "vnis", vnis)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Interface specific description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="hostReachabilityProtocolBgp")
    def host_reachability_protocol_bgp(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "host_reachability_protocol_bgp")

    @host_reachability_protocol_bgp.setter
    def host_reachability_protocol_bgp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "host_reachability_protocol_bgp", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `1`-`4096`
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[bool]]:
        """
        Shutdown the selected interface
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "shutdown", value)

    @property
    @pulumi.getter(name="sourceInterfaceLoopback")
    def source_interface_loopback(self) -> Optional[pulumi.Input[int]]:
        """
        Loopback interface - Range: `0`-`2147483647`
        """
        return pulumi.get(self, "source_interface_loopback")

    @source_interface_loopback.setter
    def source_interface_loopback(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_interface_loopback", value)

    @property
    @pulumi.getter(name="vniVrfs")
    def vni_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceNveVniVrfArgs']]]]:
        """
        Configure VNI information
        """
        return pulumi.get(self, "vni_vrfs")

    @vni_vrfs.setter
    def vni_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceNveVniVrfArgs']]]]):
        pulumi.set(self, "vni_vrfs", value)

    @property
    @pulumi.getter
    def vnis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceNveVniArgs']]]]:
        """
        Configure VNI information
        """
        return pulumi.get(self, "vnis")

    @vnis.setter
    def vnis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceNveVniArgs']]]]):
        pulumi.set(self, "vnis", value)


@pulumi.input_type
class _InterfaceNveState:
    def __init__(__self__, *,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 host_reachability_protocol_bgp: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[int]] = None,
                 shutdown: Optional[pulumi.Input[bool]] = None,
                 source_interface_loopback: Optional[pulumi.Input[int]] = None,
                 vni_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceNveVniVrfArgs']]]] = None,
                 vnis: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceNveVniArgs']]]] = None):
        """
        Input properties used for looking up and filtering InterfaceNve resources.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] description: Interface specific description
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] name: - Range: `1`-`4096`
        :param pulumi.Input[bool] shutdown: Shutdown the selected interface
        :param pulumi.Input[int] source_interface_loopback: Loopback interface - Range: `0`-`2147483647`
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceNveVniVrfArgs']]] vni_vrfs: Configure VNI information
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceNveVniArgs']]] vnis: Configure VNI information
        """
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if host_reachability_protocol_bgp is not None:
            pulumi.set(__self__, "host_reachability_protocol_bgp", host_reachability_protocol_bgp)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if source_interface_loopback is not None:
            pulumi.set(__self__, "source_interface_loopback", source_interface_loopback)
        if vni_vrfs is not None:
            pulumi.set(__self__, "vni_vrfs", vni_vrfs)
        if vnis is not None:
            pulumi.set(__self__, "vnis", vnis)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Interface specific description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="hostReachabilityProtocolBgp")
    def host_reachability_protocol_bgp(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "host_reachability_protocol_bgp")

    @host_reachability_protocol_bgp.setter
    def host_reachability_protocol_bgp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "host_reachability_protocol_bgp", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `1`-`4096`
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[bool]]:
        """
        Shutdown the selected interface
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "shutdown", value)

    @property
    @pulumi.getter(name="sourceInterfaceLoopback")
    def source_interface_loopback(self) -> Optional[pulumi.Input[int]]:
        """
        Loopback interface - Range: `0`-`2147483647`
        """
        return pulumi.get(self, "source_interface_loopback")

    @source_interface_loopback.setter
    def source_interface_loopback(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "source_interface_loopback", value)

    @property
    @pulumi.getter(name="vniVrfs")
    def vni_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceNveVniVrfArgs']]]]:
        """
        Configure VNI information
        """
        return pulumi.get(self, "vni_vrfs")

    @vni_vrfs.setter
    def vni_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceNveVniVrfArgs']]]]):
        pulumi.set(self, "vni_vrfs", value)

    @property
    @pulumi.getter
    def vnis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceNveVniArgs']]]]:
        """
        Configure VNI information
        """
        return pulumi.get(self, "vnis")

    @vnis.setter
    def vnis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceNveVniArgs']]]]):
        pulumi.set(self, "vnis", value)


class InterfaceNve(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 host_reachability_protocol_bgp: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[int]] = None,
                 shutdown: Optional[pulumi.Input[bool]] = None,
                 source_interface_loopback: Optional[pulumi.Input[int]] = None,
                 vni_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceNveVniVrfArgs']]]]] = None,
                 vnis: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceNveVniArgs']]]]] = None,
                 __props__=None):
        """
        This resource can manage the Interface NVE configuration.

        ## Import

        ```sh
         $ pulumi import iosxe:iosxe/interfaceNve:InterfaceNve example "Cisco-IOS-XE-native:native/interface/nve=1"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] description: Interface specific description
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] name: - Range: `1`-`4096`
        :param pulumi.Input[bool] shutdown: Shutdown the selected interface
        :param pulumi.Input[int] source_interface_loopback: Loopback interface - Range: `0`-`2147483647`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceNveVniVrfArgs']]]] vni_vrfs: Configure VNI information
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceNveVniArgs']]]] vnis: Configure VNI information
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[InterfaceNveArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the Interface NVE configuration.

        ## Import

        ```sh
         $ pulumi import iosxe:iosxe/interfaceNve:InterfaceNve example "Cisco-IOS-XE-native:native/interface/nve=1"
        ```

        :param str resource_name: The name of the resource.
        :param InterfaceNveArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InterfaceNveArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 host_reachability_protocol_bgp: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[int]] = None,
                 shutdown: Optional[pulumi.Input[bool]] = None,
                 source_interface_loopback: Optional[pulumi.Input[int]] = None,
                 vni_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceNveVniVrfArgs']]]]] = None,
                 vnis: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceNveVniArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InterfaceNveArgs.__new__(InterfaceNveArgs)

            __props__.__dict__["delete_mode"] = delete_mode
            __props__.__dict__["description"] = description
            __props__.__dict__["device"] = device
            __props__.__dict__["host_reachability_protocol_bgp"] = host_reachability_protocol_bgp
            __props__.__dict__["name"] = name
            __props__.__dict__["shutdown"] = shutdown
            __props__.__dict__["source_interface_loopback"] = source_interface_loopback
            __props__.__dict__["vni_vrfs"] = vni_vrfs
            __props__.__dict__["vnis"] = vnis
        super(InterfaceNve, __self__).__init__(
            'iosxe:iosxe/interfaceNve:InterfaceNve',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            delete_mode: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            host_reachability_protocol_bgp: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[int]] = None,
            shutdown: Optional[pulumi.Input[bool]] = None,
            source_interface_loopback: Optional[pulumi.Input[int]] = None,
            vni_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceNveVniVrfArgs']]]]] = None,
            vnis: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceNveVniArgs']]]]] = None) -> 'InterfaceNve':
        """
        Get an existing InterfaceNve resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] description: Interface specific description
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] name: - Range: `1`-`4096`
        :param pulumi.Input[bool] shutdown: Shutdown the selected interface
        :param pulumi.Input[int] source_interface_loopback: Loopback interface - Range: `0`-`2147483647`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceNveVniVrfArgs']]]] vni_vrfs: Configure VNI information
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceNveVniArgs']]]] vnis: Configure VNI information
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InterfaceNveState.__new__(_InterfaceNveState)

        __props__.__dict__["delete_mode"] = delete_mode
        __props__.__dict__["description"] = description
        __props__.__dict__["device"] = device
        __props__.__dict__["host_reachability_protocol_bgp"] = host_reachability_protocol_bgp
        __props__.__dict__["name"] = name
        __props__.__dict__["shutdown"] = shutdown
        __props__.__dict__["source_interface_loopback"] = source_interface_loopback
        __props__.__dict__["vni_vrfs"] = vni_vrfs
        __props__.__dict__["vnis"] = vnis
        return InterfaceNve(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Interface specific description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="hostReachabilityProtocolBgp")
    def host_reachability_protocol_bgp(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "host_reachability_protocol_bgp")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[int]:
        """
        - Range: `1`-`4096`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def shutdown(self) -> pulumi.Output[Optional[bool]]:
        """
        Shutdown the selected interface
        """
        return pulumi.get(self, "shutdown")

    @property
    @pulumi.getter(name="sourceInterfaceLoopback")
    def source_interface_loopback(self) -> pulumi.Output[Optional[int]]:
        """
        Loopback interface - Range: `0`-`2147483647`
        """
        return pulumi.get(self, "source_interface_loopback")

    @property
    @pulumi.getter(name="vniVrfs")
    def vni_vrfs(self) -> pulumi.Output[Optional[Sequence['outputs.InterfaceNveVniVrf']]]:
        """
        Configure VNI information
        """
        return pulumi.get(self, "vni_vrfs")

    @property
    @pulumi.getter
    def vnis(self) -> pulumi.Output[Optional[Sequence['outputs.InterfaceNveVni']]]:
        """
        Configure VNI information
        """
        return pulumi.get(self, "vnis")

