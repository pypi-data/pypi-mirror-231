# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetSnmpServerResult',
    'AwaitableGetSnmpServerResult',
    'get_snmp_server',
    'get_snmp_server_output',
]

@pulumi.output_type
class GetSnmpServerResult:
    """
    A collection of values returned by getSnmpServer.
    """
    def __init__(__self__, chassis_id=None, contact=None, contexts=None, device=None, enable_informs=None, enable_logging_getop=None, enable_logging_setop=None, enable_traps=None, enable_traps_auth_framework_sec_violation=None, enable_traps_bfd=None, enable_traps_bgp_cbgp2=None, enable_traps_bridge_newroot=None, enable_traps_bridge_topologychange=None, enable_traps_bulkstat_collection=None, enable_traps_bulkstat_transfer=None, enable_traps_call_home_message_send_fail=None, enable_traps_call_home_server_fail=None, enable_traps_cef_inconsistency=None, enable_traps_cef_peer_fib_state_change=None, enable_traps_cef_peer_state_change=None, enable_traps_cef_resource_failure=None, enable_traps_config=None, enable_traps_config_copy=None, enable_traps_config_ctid=None, enable_traps_cpu_threshold=None, enable_traps_dhcp=None, enable_traps_eigrp=None, enable_traps_energywise=None, enable_traps_entity=None, enable_traps_entity_diag_boot_up_fail=None, enable_traps_entity_diag_hm_test_recover=None, enable_traps_entity_diag_hm_thresh_reached=None, enable_traps_entity_diag_scheduled_test_fail=None, enable_traps_entity_perf_throughput_notif=None, enable_traps_envmon=None, enable_traps_errdisable=None, enable_traps_event_manager=None, enable_traps_fast_reroute_protected=None, enable_traps_flash_insertion=None, enable_traps_flash_lowspace=None, enable_traps_flash_removal=None, enable_traps_flowmon=None, enable_traps_fru_ctrl=None, enable_traps_hsrp=None, enable_traps_ike_policy_add=None, enable_traps_ike_policy_delete=None, enable_traps_ike_tunnel_start=None, enable_traps_ike_tunnel_stop=None, enable_traps_ipmulticast=None, enable_traps_ipsec_cryptomap_add=None, enable_traps_ipsec_cryptomap_attach=None, enable_traps_ipsec_cryptomap_delete=None, enable_traps_ipsec_cryptomap_detach=None, enable_traps_ipsec_too_many_sas=None, enable_traps_ipsec_tunnel_start=None, enable_traps_ipsec_tunnel_stop=None, enable_traps_ipsla=None, enable_traps_isis=None, enable_traps_license=None, enable_traps_local_auth=None, enable_traps_mac_notification_change=None, enable_traps_mac_notification_move=None, enable_traps_mac_notification_threshold=None, enable_traps_memory_bufferpeak=None, enable_traps_mpls_ldp=None, enable_traps_mpls_rfc_ldp=None, enable_traps_mpls_traffic_eng=None, enable_traps_mpls_vpn=None, enable_traps_msdp=None, enable_traps_nhrp_nhc=None, enable_traps_nhrp_nhp=None, enable_traps_nhrp_nhs=None, enable_traps_nhrp_quota_exceeded=None, enable_traps_ospf_config_errors=None, enable_traps_ospf_config_lsa=None, enable_traps_ospf_config_retransmit=None, enable_traps_ospf_config_state_change=None, enable_traps_ospf_errors_enable=None, enable_traps_ospf_lsa_enable=None, enable_traps_ospf_nssa_trans_change=None, enable_traps_ospf_retransmit_enable=None, enable_traps_ospf_shamlink_interface=None, enable_traps_ospf_shamlink_neighbor=None, enable_traps_ospfv3_config_errors=None, enable_traps_ospfv3_config_state_change=None, enable_traps_pim_invalid_pim_message=None, enable_traps_pim_neighbor_change=None, enable_traps_pim_rp_mapping_change=None, enable_traps_port_security=None, enable_traps_power_ethernet_group=None, enable_traps_power_ethernet_police=None, enable_traps_pw_vc=None, enable_traps_rep=None, enable_traps_rf=None, enable_traps_smart_license=None, enable_traps_snmp_authentication=None, enable_traps_snmp_coldstart=None, enable_traps_snmp_linkdown=None, enable_traps_snmp_linkup=None, enable_traps_snmp_warmstart=None, enable_traps_stackwise=None, enable_traps_stpx_inconsistency=None, enable_traps_stpx_loop_inconsistency=None, enable_traps_stpx_root_inconsistency=None, enable_traps_syslog=None, enable_traps_transceiver_all=None, enable_traps_tty=None, enable_traps_udld_link_fail_rpt=None, enable_traps_udld_status_change=None, enable_traps_vlan_membership=None, enable_traps_vlancreate=None, enable_traps_vlandelete=None, enable_traps_vrfmib_vnet_trunk_down=None, enable_traps_vrfmib_vnet_trunk_up=None, enable_traps_vrfmib_vrf_down=None, enable_traps_vrfmib_vrf_up=None, enable_traps_vtp=None, hosts=None, id=None, ifindex_persist=None, location=None, packetsize=None, queue_length=None, snmp_communities=None, source_interface_informs_forty_gigabit_ethernet=None, source_interface_informs_gigabit_ethernet=None, source_interface_informs_hundred_gig_e=None, source_interface_informs_loopback=None, source_interface_informs_port_channel=None, source_interface_informs_port_channel_subinterface=None, source_interface_informs_ten_gigabit_ethernet=None, source_interface_informs_vlan=None, source_interface_traps_forty_gigabit_ethernet=None, source_interface_traps_gigabit_ethernet=None, source_interface_traps_hundred_gig_e=None, source_interface_traps_loopback=None, source_interface_traps_port_channel=None, source_interface_traps_port_channel_subinterface=None, source_interface_traps_ten_gigabit_ethernet=None, source_interface_traps_vlan=None, system_shutdown=None, trap_source_forty_gigabit_ethernet=None, trap_source_gigabit_ethernet=None, trap_source_hundred_gig_e=None, trap_source_loopback=None, trap_source_port_channel=None, trap_source_port_channel_subinterface=None, trap_source_ten_gigabit_ethernet=None, trap_source_vlan=None, views=None):
        if chassis_id and not isinstance(chassis_id, str):
            raise TypeError("Expected argument 'chassis_id' to be a str")
        pulumi.set(__self__, "chassis_id", chassis_id)
        if contact and not isinstance(contact, str):
            raise TypeError("Expected argument 'contact' to be a str")
        pulumi.set(__self__, "contact", contact)
        if contexts and not isinstance(contexts, list):
            raise TypeError("Expected argument 'contexts' to be a list")
        pulumi.set(__self__, "contexts", contexts)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if enable_informs and not isinstance(enable_informs, bool):
            raise TypeError("Expected argument 'enable_informs' to be a bool")
        pulumi.set(__self__, "enable_informs", enable_informs)
        if enable_logging_getop and not isinstance(enable_logging_getop, bool):
            raise TypeError("Expected argument 'enable_logging_getop' to be a bool")
        pulumi.set(__self__, "enable_logging_getop", enable_logging_getop)
        if enable_logging_setop and not isinstance(enable_logging_setop, bool):
            raise TypeError("Expected argument 'enable_logging_setop' to be a bool")
        pulumi.set(__self__, "enable_logging_setop", enable_logging_setop)
        if enable_traps and not isinstance(enable_traps, bool):
            raise TypeError("Expected argument 'enable_traps' to be a bool")
        pulumi.set(__self__, "enable_traps", enable_traps)
        if enable_traps_auth_framework_sec_violation and not isinstance(enable_traps_auth_framework_sec_violation, bool):
            raise TypeError("Expected argument 'enable_traps_auth_framework_sec_violation' to be a bool")
        pulumi.set(__self__, "enable_traps_auth_framework_sec_violation", enable_traps_auth_framework_sec_violation)
        if enable_traps_bfd and not isinstance(enable_traps_bfd, bool):
            raise TypeError("Expected argument 'enable_traps_bfd' to be a bool")
        pulumi.set(__self__, "enable_traps_bfd", enable_traps_bfd)
        if enable_traps_bgp_cbgp2 and not isinstance(enable_traps_bgp_cbgp2, bool):
            raise TypeError("Expected argument 'enable_traps_bgp_cbgp2' to be a bool")
        pulumi.set(__self__, "enable_traps_bgp_cbgp2", enable_traps_bgp_cbgp2)
        if enable_traps_bridge_newroot and not isinstance(enable_traps_bridge_newroot, bool):
            raise TypeError("Expected argument 'enable_traps_bridge_newroot' to be a bool")
        pulumi.set(__self__, "enable_traps_bridge_newroot", enable_traps_bridge_newroot)
        if enable_traps_bridge_topologychange and not isinstance(enable_traps_bridge_topologychange, bool):
            raise TypeError("Expected argument 'enable_traps_bridge_topologychange' to be a bool")
        pulumi.set(__self__, "enable_traps_bridge_topologychange", enable_traps_bridge_topologychange)
        if enable_traps_bulkstat_collection and not isinstance(enable_traps_bulkstat_collection, bool):
            raise TypeError("Expected argument 'enable_traps_bulkstat_collection' to be a bool")
        pulumi.set(__self__, "enable_traps_bulkstat_collection", enable_traps_bulkstat_collection)
        if enable_traps_bulkstat_transfer and not isinstance(enable_traps_bulkstat_transfer, bool):
            raise TypeError("Expected argument 'enable_traps_bulkstat_transfer' to be a bool")
        pulumi.set(__self__, "enable_traps_bulkstat_transfer", enable_traps_bulkstat_transfer)
        if enable_traps_call_home_message_send_fail and not isinstance(enable_traps_call_home_message_send_fail, bool):
            raise TypeError("Expected argument 'enable_traps_call_home_message_send_fail' to be a bool")
        pulumi.set(__self__, "enable_traps_call_home_message_send_fail", enable_traps_call_home_message_send_fail)
        if enable_traps_call_home_server_fail and not isinstance(enable_traps_call_home_server_fail, bool):
            raise TypeError("Expected argument 'enable_traps_call_home_server_fail' to be a bool")
        pulumi.set(__self__, "enable_traps_call_home_server_fail", enable_traps_call_home_server_fail)
        if enable_traps_cef_inconsistency and not isinstance(enable_traps_cef_inconsistency, bool):
            raise TypeError("Expected argument 'enable_traps_cef_inconsistency' to be a bool")
        pulumi.set(__self__, "enable_traps_cef_inconsistency", enable_traps_cef_inconsistency)
        if enable_traps_cef_peer_fib_state_change and not isinstance(enable_traps_cef_peer_fib_state_change, bool):
            raise TypeError("Expected argument 'enable_traps_cef_peer_fib_state_change' to be a bool")
        pulumi.set(__self__, "enable_traps_cef_peer_fib_state_change", enable_traps_cef_peer_fib_state_change)
        if enable_traps_cef_peer_state_change and not isinstance(enable_traps_cef_peer_state_change, bool):
            raise TypeError("Expected argument 'enable_traps_cef_peer_state_change' to be a bool")
        pulumi.set(__self__, "enable_traps_cef_peer_state_change", enable_traps_cef_peer_state_change)
        if enable_traps_cef_resource_failure and not isinstance(enable_traps_cef_resource_failure, bool):
            raise TypeError("Expected argument 'enable_traps_cef_resource_failure' to be a bool")
        pulumi.set(__self__, "enable_traps_cef_resource_failure", enable_traps_cef_resource_failure)
        if enable_traps_config and not isinstance(enable_traps_config, bool):
            raise TypeError("Expected argument 'enable_traps_config' to be a bool")
        pulumi.set(__self__, "enable_traps_config", enable_traps_config)
        if enable_traps_config_copy and not isinstance(enable_traps_config_copy, bool):
            raise TypeError("Expected argument 'enable_traps_config_copy' to be a bool")
        pulumi.set(__self__, "enable_traps_config_copy", enable_traps_config_copy)
        if enable_traps_config_ctid and not isinstance(enable_traps_config_ctid, bool):
            raise TypeError("Expected argument 'enable_traps_config_ctid' to be a bool")
        pulumi.set(__self__, "enable_traps_config_ctid", enable_traps_config_ctid)
        if enable_traps_cpu_threshold and not isinstance(enable_traps_cpu_threshold, bool):
            raise TypeError("Expected argument 'enable_traps_cpu_threshold' to be a bool")
        pulumi.set(__self__, "enable_traps_cpu_threshold", enable_traps_cpu_threshold)
        if enable_traps_dhcp and not isinstance(enable_traps_dhcp, bool):
            raise TypeError("Expected argument 'enable_traps_dhcp' to be a bool")
        pulumi.set(__self__, "enable_traps_dhcp", enable_traps_dhcp)
        if enable_traps_eigrp and not isinstance(enable_traps_eigrp, bool):
            raise TypeError("Expected argument 'enable_traps_eigrp' to be a bool")
        pulumi.set(__self__, "enable_traps_eigrp", enable_traps_eigrp)
        if enable_traps_energywise and not isinstance(enable_traps_energywise, bool):
            raise TypeError("Expected argument 'enable_traps_energywise' to be a bool")
        pulumi.set(__self__, "enable_traps_energywise", enable_traps_energywise)
        if enable_traps_entity and not isinstance(enable_traps_entity, bool):
            raise TypeError("Expected argument 'enable_traps_entity' to be a bool")
        pulumi.set(__self__, "enable_traps_entity", enable_traps_entity)
        if enable_traps_entity_diag_boot_up_fail and not isinstance(enable_traps_entity_diag_boot_up_fail, bool):
            raise TypeError("Expected argument 'enable_traps_entity_diag_boot_up_fail' to be a bool")
        pulumi.set(__self__, "enable_traps_entity_diag_boot_up_fail", enable_traps_entity_diag_boot_up_fail)
        if enable_traps_entity_diag_hm_test_recover and not isinstance(enable_traps_entity_diag_hm_test_recover, bool):
            raise TypeError("Expected argument 'enable_traps_entity_diag_hm_test_recover' to be a bool")
        pulumi.set(__self__, "enable_traps_entity_diag_hm_test_recover", enable_traps_entity_diag_hm_test_recover)
        if enable_traps_entity_diag_hm_thresh_reached and not isinstance(enable_traps_entity_diag_hm_thresh_reached, bool):
            raise TypeError("Expected argument 'enable_traps_entity_diag_hm_thresh_reached' to be a bool")
        pulumi.set(__self__, "enable_traps_entity_diag_hm_thresh_reached", enable_traps_entity_diag_hm_thresh_reached)
        if enable_traps_entity_diag_scheduled_test_fail and not isinstance(enable_traps_entity_diag_scheduled_test_fail, bool):
            raise TypeError("Expected argument 'enable_traps_entity_diag_scheduled_test_fail' to be a bool")
        pulumi.set(__self__, "enable_traps_entity_diag_scheduled_test_fail", enable_traps_entity_diag_scheduled_test_fail)
        if enable_traps_entity_perf_throughput_notif and not isinstance(enable_traps_entity_perf_throughput_notif, bool):
            raise TypeError("Expected argument 'enable_traps_entity_perf_throughput_notif' to be a bool")
        pulumi.set(__self__, "enable_traps_entity_perf_throughput_notif", enable_traps_entity_perf_throughput_notif)
        if enable_traps_envmon and not isinstance(enable_traps_envmon, bool):
            raise TypeError("Expected argument 'enable_traps_envmon' to be a bool")
        pulumi.set(__self__, "enable_traps_envmon", enable_traps_envmon)
        if enable_traps_errdisable and not isinstance(enable_traps_errdisable, bool):
            raise TypeError("Expected argument 'enable_traps_errdisable' to be a bool")
        pulumi.set(__self__, "enable_traps_errdisable", enable_traps_errdisable)
        if enable_traps_event_manager and not isinstance(enable_traps_event_manager, bool):
            raise TypeError("Expected argument 'enable_traps_event_manager' to be a bool")
        pulumi.set(__self__, "enable_traps_event_manager", enable_traps_event_manager)
        if enable_traps_fast_reroute_protected and not isinstance(enable_traps_fast_reroute_protected, bool):
            raise TypeError("Expected argument 'enable_traps_fast_reroute_protected' to be a bool")
        pulumi.set(__self__, "enable_traps_fast_reroute_protected", enable_traps_fast_reroute_protected)
        if enable_traps_flash_insertion and not isinstance(enable_traps_flash_insertion, bool):
            raise TypeError("Expected argument 'enable_traps_flash_insertion' to be a bool")
        pulumi.set(__self__, "enable_traps_flash_insertion", enable_traps_flash_insertion)
        if enable_traps_flash_lowspace and not isinstance(enable_traps_flash_lowspace, bool):
            raise TypeError("Expected argument 'enable_traps_flash_lowspace' to be a bool")
        pulumi.set(__self__, "enable_traps_flash_lowspace", enable_traps_flash_lowspace)
        if enable_traps_flash_removal and not isinstance(enable_traps_flash_removal, bool):
            raise TypeError("Expected argument 'enable_traps_flash_removal' to be a bool")
        pulumi.set(__self__, "enable_traps_flash_removal", enable_traps_flash_removal)
        if enable_traps_flowmon and not isinstance(enable_traps_flowmon, bool):
            raise TypeError("Expected argument 'enable_traps_flowmon' to be a bool")
        pulumi.set(__self__, "enable_traps_flowmon", enable_traps_flowmon)
        if enable_traps_fru_ctrl and not isinstance(enable_traps_fru_ctrl, bool):
            raise TypeError("Expected argument 'enable_traps_fru_ctrl' to be a bool")
        pulumi.set(__self__, "enable_traps_fru_ctrl", enable_traps_fru_ctrl)
        if enable_traps_hsrp and not isinstance(enable_traps_hsrp, bool):
            raise TypeError("Expected argument 'enable_traps_hsrp' to be a bool")
        pulumi.set(__self__, "enable_traps_hsrp", enable_traps_hsrp)
        if enable_traps_ike_policy_add and not isinstance(enable_traps_ike_policy_add, bool):
            raise TypeError("Expected argument 'enable_traps_ike_policy_add' to be a bool")
        pulumi.set(__self__, "enable_traps_ike_policy_add", enable_traps_ike_policy_add)
        if enable_traps_ike_policy_delete and not isinstance(enable_traps_ike_policy_delete, bool):
            raise TypeError("Expected argument 'enable_traps_ike_policy_delete' to be a bool")
        pulumi.set(__self__, "enable_traps_ike_policy_delete", enable_traps_ike_policy_delete)
        if enable_traps_ike_tunnel_start and not isinstance(enable_traps_ike_tunnel_start, bool):
            raise TypeError("Expected argument 'enable_traps_ike_tunnel_start' to be a bool")
        pulumi.set(__self__, "enable_traps_ike_tunnel_start", enable_traps_ike_tunnel_start)
        if enable_traps_ike_tunnel_stop and not isinstance(enable_traps_ike_tunnel_stop, bool):
            raise TypeError("Expected argument 'enable_traps_ike_tunnel_stop' to be a bool")
        pulumi.set(__self__, "enable_traps_ike_tunnel_stop", enable_traps_ike_tunnel_stop)
        if enable_traps_ipmulticast and not isinstance(enable_traps_ipmulticast, bool):
            raise TypeError("Expected argument 'enable_traps_ipmulticast' to be a bool")
        pulumi.set(__self__, "enable_traps_ipmulticast", enable_traps_ipmulticast)
        if enable_traps_ipsec_cryptomap_add and not isinstance(enable_traps_ipsec_cryptomap_add, bool):
            raise TypeError("Expected argument 'enable_traps_ipsec_cryptomap_add' to be a bool")
        pulumi.set(__self__, "enable_traps_ipsec_cryptomap_add", enable_traps_ipsec_cryptomap_add)
        if enable_traps_ipsec_cryptomap_attach and not isinstance(enable_traps_ipsec_cryptomap_attach, bool):
            raise TypeError("Expected argument 'enable_traps_ipsec_cryptomap_attach' to be a bool")
        pulumi.set(__self__, "enable_traps_ipsec_cryptomap_attach", enable_traps_ipsec_cryptomap_attach)
        if enable_traps_ipsec_cryptomap_delete and not isinstance(enable_traps_ipsec_cryptomap_delete, bool):
            raise TypeError("Expected argument 'enable_traps_ipsec_cryptomap_delete' to be a bool")
        pulumi.set(__self__, "enable_traps_ipsec_cryptomap_delete", enable_traps_ipsec_cryptomap_delete)
        if enable_traps_ipsec_cryptomap_detach and not isinstance(enable_traps_ipsec_cryptomap_detach, bool):
            raise TypeError("Expected argument 'enable_traps_ipsec_cryptomap_detach' to be a bool")
        pulumi.set(__self__, "enable_traps_ipsec_cryptomap_detach", enable_traps_ipsec_cryptomap_detach)
        if enable_traps_ipsec_too_many_sas and not isinstance(enable_traps_ipsec_too_many_sas, bool):
            raise TypeError("Expected argument 'enable_traps_ipsec_too_many_sas' to be a bool")
        pulumi.set(__self__, "enable_traps_ipsec_too_many_sas", enable_traps_ipsec_too_many_sas)
        if enable_traps_ipsec_tunnel_start and not isinstance(enable_traps_ipsec_tunnel_start, bool):
            raise TypeError("Expected argument 'enable_traps_ipsec_tunnel_start' to be a bool")
        pulumi.set(__self__, "enable_traps_ipsec_tunnel_start", enable_traps_ipsec_tunnel_start)
        if enable_traps_ipsec_tunnel_stop and not isinstance(enable_traps_ipsec_tunnel_stop, bool):
            raise TypeError("Expected argument 'enable_traps_ipsec_tunnel_stop' to be a bool")
        pulumi.set(__self__, "enable_traps_ipsec_tunnel_stop", enable_traps_ipsec_tunnel_stop)
        if enable_traps_ipsla and not isinstance(enable_traps_ipsla, bool):
            raise TypeError("Expected argument 'enable_traps_ipsla' to be a bool")
        pulumi.set(__self__, "enable_traps_ipsla", enable_traps_ipsla)
        if enable_traps_isis and not isinstance(enable_traps_isis, bool):
            raise TypeError("Expected argument 'enable_traps_isis' to be a bool")
        pulumi.set(__self__, "enable_traps_isis", enable_traps_isis)
        if enable_traps_license and not isinstance(enable_traps_license, bool):
            raise TypeError("Expected argument 'enable_traps_license' to be a bool")
        pulumi.set(__self__, "enable_traps_license", enable_traps_license)
        if enable_traps_local_auth and not isinstance(enable_traps_local_auth, bool):
            raise TypeError("Expected argument 'enable_traps_local_auth' to be a bool")
        pulumi.set(__self__, "enable_traps_local_auth", enable_traps_local_auth)
        if enable_traps_mac_notification_change and not isinstance(enable_traps_mac_notification_change, bool):
            raise TypeError("Expected argument 'enable_traps_mac_notification_change' to be a bool")
        pulumi.set(__self__, "enable_traps_mac_notification_change", enable_traps_mac_notification_change)
        if enable_traps_mac_notification_move and not isinstance(enable_traps_mac_notification_move, bool):
            raise TypeError("Expected argument 'enable_traps_mac_notification_move' to be a bool")
        pulumi.set(__self__, "enable_traps_mac_notification_move", enable_traps_mac_notification_move)
        if enable_traps_mac_notification_threshold and not isinstance(enable_traps_mac_notification_threshold, bool):
            raise TypeError("Expected argument 'enable_traps_mac_notification_threshold' to be a bool")
        pulumi.set(__self__, "enable_traps_mac_notification_threshold", enable_traps_mac_notification_threshold)
        if enable_traps_memory_bufferpeak and not isinstance(enable_traps_memory_bufferpeak, bool):
            raise TypeError("Expected argument 'enable_traps_memory_bufferpeak' to be a bool")
        pulumi.set(__self__, "enable_traps_memory_bufferpeak", enable_traps_memory_bufferpeak)
        if enable_traps_mpls_ldp and not isinstance(enable_traps_mpls_ldp, bool):
            raise TypeError("Expected argument 'enable_traps_mpls_ldp' to be a bool")
        pulumi.set(__self__, "enable_traps_mpls_ldp", enable_traps_mpls_ldp)
        if enable_traps_mpls_rfc_ldp and not isinstance(enable_traps_mpls_rfc_ldp, bool):
            raise TypeError("Expected argument 'enable_traps_mpls_rfc_ldp' to be a bool")
        pulumi.set(__self__, "enable_traps_mpls_rfc_ldp", enable_traps_mpls_rfc_ldp)
        if enable_traps_mpls_traffic_eng and not isinstance(enable_traps_mpls_traffic_eng, bool):
            raise TypeError("Expected argument 'enable_traps_mpls_traffic_eng' to be a bool")
        pulumi.set(__self__, "enable_traps_mpls_traffic_eng", enable_traps_mpls_traffic_eng)
        if enable_traps_mpls_vpn and not isinstance(enable_traps_mpls_vpn, bool):
            raise TypeError("Expected argument 'enable_traps_mpls_vpn' to be a bool")
        pulumi.set(__self__, "enable_traps_mpls_vpn", enable_traps_mpls_vpn)
        if enable_traps_msdp and not isinstance(enable_traps_msdp, bool):
            raise TypeError("Expected argument 'enable_traps_msdp' to be a bool")
        pulumi.set(__self__, "enable_traps_msdp", enable_traps_msdp)
        if enable_traps_nhrp_nhc and not isinstance(enable_traps_nhrp_nhc, bool):
            raise TypeError("Expected argument 'enable_traps_nhrp_nhc' to be a bool")
        pulumi.set(__self__, "enable_traps_nhrp_nhc", enable_traps_nhrp_nhc)
        if enable_traps_nhrp_nhp and not isinstance(enable_traps_nhrp_nhp, bool):
            raise TypeError("Expected argument 'enable_traps_nhrp_nhp' to be a bool")
        pulumi.set(__self__, "enable_traps_nhrp_nhp", enable_traps_nhrp_nhp)
        if enable_traps_nhrp_nhs and not isinstance(enable_traps_nhrp_nhs, bool):
            raise TypeError("Expected argument 'enable_traps_nhrp_nhs' to be a bool")
        pulumi.set(__self__, "enable_traps_nhrp_nhs", enable_traps_nhrp_nhs)
        if enable_traps_nhrp_quota_exceeded and not isinstance(enable_traps_nhrp_quota_exceeded, bool):
            raise TypeError("Expected argument 'enable_traps_nhrp_quota_exceeded' to be a bool")
        pulumi.set(__self__, "enable_traps_nhrp_quota_exceeded", enable_traps_nhrp_quota_exceeded)
        if enable_traps_ospf_config_errors and not isinstance(enable_traps_ospf_config_errors, bool):
            raise TypeError("Expected argument 'enable_traps_ospf_config_errors' to be a bool")
        pulumi.set(__self__, "enable_traps_ospf_config_errors", enable_traps_ospf_config_errors)
        if enable_traps_ospf_config_lsa and not isinstance(enable_traps_ospf_config_lsa, bool):
            raise TypeError("Expected argument 'enable_traps_ospf_config_lsa' to be a bool")
        pulumi.set(__self__, "enable_traps_ospf_config_lsa", enable_traps_ospf_config_lsa)
        if enable_traps_ospf_config_retransmit and not isinstance(enable_traps_ospf_config_retransmit, bool):
            raise TypeError("Expected argument 'enable_traps_ospf_config_retransmit' to be a bool")
        pulumi.set(__self__, "enable_traps_ospf_config_retransmit", enable_traps_ospf_config_retransmit)
        if enable_traps_ospf_config_state_change and not isinstance(enable_traps_ospf_config_state_change, bool):
            raise TypeError("Expected argument 'enable_traps_ospf_config_state_change' to be a bool")
        pulumi.set(__self__, "enable_traps_ospf_config_state_change", enable_traps_ospf_config_state_change)
        if enable_traps_ospf_errors_enable and not isinstance(enable_traps_ospf_errors_enable, bool):
            raise TypeError("Expected argument 'enable_traps_ospf_errors_enable' to be a bool")
        pulumi.set(__self__, "enable_traps_ospf_errors_enable", enable_traps_ospf_errors_enable)
        if enable_traps_ospf_lsa_enable and not isinstance(enable_traps_ospf_lsa_enable, bool):
            raise TypeError("Expected argument 'enable_traps_ospf_lsa_enable' to be a bool")
        pulumi.set(__self__, "enable_traps_ospf_lsa_enable", enable_traps_ospf_lsa_enable)
        if enable_traps_ospf_nssa_trans_change and not isinstance(enable_traps_ospf_nssa_trans_change, bool):
            raise TypeError("Expected argument 'enable_traps_ospf_nssa_trans_change' to be a bool")
        pulumi.set(__self__, "enable_traps_ospf_nssa_trans_change", enable_traps_ospf_nssa_trans_change)
        if enable_traps_ospf_retransmit_enable and not isinstance(enable_traps_ospf_retransmit_enable, bool):
            raise TypeError("Expected argument 'enable_traps_ospf_retransmit_enable' to be a bool")
        pulumi.set(__self__, "enable_traps_ospf_retransmit_enable", enable_traps_ospf_retransmit_enable)
        if enable_traps_ospf_shamlink_interface and not isinstance(enable_traps_ospf_shamlink_interface, bool):
            raise TypeError("Expected argument 'enable_traps_ospf_shamlink_interface' to be a bool")
        pulumi.set(__self__, "enable_traps_ospf_shamlink_interface", enable_traps_ospf_shamlink_interface)
        if enable_traps_ospf_shamlink_neighbor and not isinstance(enable_traps_ospf_shamlink_neighbor, bool):
            raise TypeError("Expected argument 'enable_traps_ospf_shamlink_neighbor' to be a bool")
        pulumi.set(__self__, "enable_traps_ospf_shamlink_neighbor", enable_traps_ospf_shamlink_neighbor)
        if enable_traps_ospfv3_config_errors and not isinstance(enable_traps_ospfv3_config_errors, bool):
            raise TypeError("Expected argument 'enable_traps_ospfv3_config_errors' to be a bool")
        pulumi.set(__self__, "enable_traps_ospfv3_config_errors", enable_traps_ospfv3_config_errors)
        if enable_traps_ospfv3_config_state_change and not isinstance(enable_traps_ospfv3_config_state_change, bool):
            raise TypeError("Expected argument 'enable_traps_ospfv3_config_state_change' to be a bool")
        pulumi.set(__self__, "enable_traps_ospfv3_config_state_change", enable_traps_ospfv3_config_state_change)
        if enable_traps_pim_invalid_pim_message and not isinstance(enable_traps_pim_invalid_pim_message, bool):
            raise TypeError("Expected argument 'enable_traps_pim_invalid_pim_message' to be a bool")
        pulumi.set(__self__, "enable_traps_pim_invalid_pim_message", enable_traps_pim_invalid_pim_message)
        if enable_traps_pim_neighbor_change and not isinstance(enable_traps_pim_neighbor_change, bool):
            raise TypeError("Expected argument 'enable_traps_pim_neighbor_change' to be a bool")
        pulumi.set(__self__, "enable_traps_pim_neighbor_change", enable_traps_pim_neighbor_change)
        if enable_traps_pim_rp_mapping_change and not isinstance(enable_traps_pim_rp_mapping_change, bool):
            raise TypeError("Expected argument 'enable_traps_pim_rp_mapping_change' to be a bool")
        pulumi.set(__self__, "enable_traps_pim_rp_mapping_change", enable_traps_pim_rp_mapping_change)
        if enable_traps_port_security and not isinstance(enable_traps_port_security, bool):
            raise TypeError("Expected argument 'enable_traps_port_security' to be a bool")
        pulumi.set(__self__, "enable_traps_port_security", enable_traps_port_security)
        if enable_traps_power_ethernet_group and not isinstance(enable_traps_power_ethernet_group, str):
            raise TypeError("Expected argument 'enable_traps_power_ethernet_group' to be a str")
        pulumi.set(__self__, "enable_traps_power_ethernet_group", enable_traps_power_ethernet_group)
        if enable_traps_power_ethernet_police and not isinstance(enable_traps_power_ethernet_police, bool):
            raise TypeError("Expected argument 'enable_traps_power_ethernet_police' to be a bool")
        pulumi.set(__self__, "enable_traps_power_ethernet_police", enable_traps_power_ethernet_police)
        if enable_traps_pw_vc and not isinstance(enable_traps_pw_vc, bool):
            raise TypeError("Expected argument 'enable_traps_pw_vc' to be a bool")
        pulumi.set(__self__, "enable_traps_pw_vc", enable_traps_pw_vc)
        if enable_traps_rep and not isinstance(enable_traps_rep, bool):
            raise TypeError("Expected argument 'enable_traps_rep' to be a bool")
        pulumi.set(__self__, "enable_traps_rep", enable_traps_rep)
        if enable_traps_rf and not isinstance(enable_traps_rf, bool):
            raise TypeError("Expected argument 'enable_traps_rf' to be a bool")
        pulumi.set(__self__, "enable_traps_rf", enable_traps_rf)
        if enable_traps_smart_license and not isinstance(enable_traps_smart_license, bool):
            raise TypeError("Expected argument 'enable_traps_smart_license' to be a bool")
        pulumi.set(__self__, "enable_traps_smart_license", enable_traps_smart_license)
        if enable_traps_snmp_authentication and not isinstance(enable_traps_snmp_authentication, bool):
            raise TypeError("Expected argument 'enable_traps_snmp_authentication' to be a bool")
        pulumi.set(__self__, "enable_traps_snmp_authentication", enable_traps_snmp_authentication)
        if enable_traps_snmp_coldstart and not isinstance(enable_traps_snmp_coldstart, bool):
            raise TypeError("Expected argument 'enable_traps_snmp_coldstart' to be a bool")
        pulumi.set(__self__, "enable_traps_snmp_coldstart", enable_traps_snmp_coldstart)
        if enable_traps_snmp_linkdown and not isinstance(enable_traps_snmp_linkdown, bool):
            raise TypeError("Expected argument 'enable_traps_snmp_linkdown' to be a bool")
        pulumi.set(__self__, "enable_traps_snmp_linkdown", enable_traps_snmp_linkdown)
        if enable_traps_snmp_linkup and not isinstance(enable_traps_snmp_linkup, bool):
            raise TypeError("Expected argument 'enable_traps_snmp_linkup' to be a bool")
        pulumi.set(__self__, "enable_traps_snmp_linkup", enable_traps_snmp_linkup)
        if enable_traps_snmp_warmstart and not isinstance(enable_traps_snmp_warmstart, bool):
            raise TypeError("Expected argument 'enable_traps_snmp_warmstart' to be a bool")
        pulumi.set(__self__, "enable_traps_snmp_warmstart", enable_traps_snmp_warmstart)
        if enable_traps_stackwise and not isinstance(enable_traps_stackwise, bool):
            raise TypeError("Expected argument 'enable_traps_stackwise' to be a bool")
        pulumi.set(__self__, "enable_traps_stackwise", enable_traps_stackwise)
        if enable_traps_stpx_inconsistency and not isinstance(enable_traps_stpx_inconsistency, bool):
            raise TypeError("Expected argument 'enable_traps_stpx_inconsistency' to be a bool")
        pulumi.set(__self__, "enable_traps_stpx_inconsistency", enable_traps_stpx_inconsistency)
        if enable_traps_stpx_loop_inconsistency and not isinstance(enable_traps_stpx_loop_inconsistency, bool):
            raise TypeError("Expected argument 'enable_traps_stpx_loop_inconsistency' to be a bool")
        pulumi.set(__self__, "enable_traps_stpx_loop_inconsistency", enable_traps_stpx_loop_inconsistency)
        if enable_traps_stpx_root_inconsistency and not isinstance(enable_traps_stpx_root_inconsistency, bool):
            raise TypeError("Expected argument 'enable_traps_stpx_root_inconsistency' to be a bool")
        pulumi.set(__self__, "enable_traps_stpx_root_inconsistency", enable_traps_stpx_root_inconsistency)
        if enable_traps_syslog and not isinstance(enable_traps_syslog, bool):
            raise TypeError("Expected argument 'enable_traps_syslog' to be a bool")
        pulumi.set(__self__, "enable_traps_syslog", enable_traps_syslog)
        if enable_traps_transceiver_all and not isinstance(enable_traps_transceiver_all, bool):
            raise TypeError("Expected argument 'enable_traps_transceiver_all' to be a bool")
        pulumi.set(__self__, "enable_traps_transceiver_all", enable_traps_transceiver_all)
        if enable_traps_tty and not isinstance(enable_traps_tty, bool):
            raise TypeError("Expected argument 'enable_traps_tty' to be a bool")
        pulumi.set(__self__, "enable_traps_tty", enable_traps_tty)
        if enable_traps_udld_link_fail_rpt and not isinstance(enable_traps_udld_link_fail_rpt, bool):
            raise TypeError("Expected argument 'enable_traps_udld_link_fail_rpt' to be a bool")
        pulumi.set(__self__, "enable_traps_udld_link_fail_rpt", enable_traps_udld_link_fail_rpt)
        if enable_traps_udld_status_change and not isinstance(enable_traps_udld_status_change, bool):
            raise TypeError("Expected argument 'enable_traps_udld_status_change' to be a bool")
        pulumi.set(__self__, "enable_traps_udld_status_change", enable_traps_udld_status_change)
        if enable_traps_vlan_membership and not isinstance(enable_traps_vlan_membership, bool):
            raise TypeError("Expected argument 'enable_traps_vlan_membership' to be a bool")
        pulumi.set(__self__, "enable_traps_vlan_membership", enable_traps_vlan_membership)
        if enable_traps_vlancreate and not isinstance(enable_traps_vlancreate, bool):
            raise TypeError("Expected argument 'enable_traps_vlancreate' to be a bool")
        pulumi.set(__self__, "enable_traps_vlancreate", enable_traps_vlancreate)
        if enable_traps_vlandelete and not isinstance(enable_traps_vlandelete, bool):
            raise TypeError("Expected argument 'enable_traps_vlandelete' to be a bool")
        pulumi.set(__self__, "enable_traps_vlandelete", enable_traps_vlandelete)
        if enable_traps_vrfmib_vnet_trunk_down and not isinstance(enable_traps_vrfmib_vnet_trunk_down, bool):
            raise TypeError("Expected argument 'enable_traps_vrfmib_vnet_trunk_down' to be a bool")
        pulumi.set(__self__, "enable_traps_vrfmib_vnet_trunk_down", enable_traps_vrfmib_vnet_trunk_down)
        if enable_traps_vrfmib_vnet_trunk_up and not isinstance(enable_traps_vrfmib_vnet_trunk_up, bool):
            raise TypeError("Expected argument 'enable_traps_vrfmib_vnet_trunk_up' to be a bool")
        pulumi.set(__self__, "enable_traps_vrfmib_vnet_trunk_up", enable_traps_vrfmib_vnet_trunk_up)
        if enable_traps_vrfmib_vrf_down and not isinstance(enable_traps_vrfmib_vrf_down, bool):
            raise TypeError("Expected argument 'enable_traps_vrfmib_vrf_down' to be a bool")
        pulumi.set(__self__, "enable_traps_vrfmib_vrf_down", enable_traps_vrfmib_vrf_down)
        if enable_traps_vrfmib_vrf_up and not isinstance(enable_traps_vrfmib_vrf_up, bool):
            raise TypeError("Expected argument 'enable_traps_vrfmib_vrf_up' to be a bool")
        pulumi.set(__self__, "enable_traps_vrfmib_vrf_up", enable_traps_vrfmib_vrf_up)
        if enable_traps_vtp and not isinstance(enable_traps_vtp, bool):
            raise TypeError("Expected argument 'enable_traps_vtp' to be a bool")
        pulumi.set(__self__, "enable_traps_vtp", enable_traps_vtp)
        if hosts and not isinstance(hosts, list):
            raise TypeError("Expected argument 'hosts' to be a list")
        pulumi.set(__self__, "hosts", hosts)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ifindex_persist and not isinstance(ifindex_persist, bool):
            raise TypeError("Expected argument 'ifindex_persist' to be a bool")
        pulumi.set(__self__, "ifindex_persist", ifindex_persist)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if packetsize and not isinstance(packetsize, int):
            raise TypeError("Expected argument 'packetsize' to be a int")
        pulumi.set(__self__, "packetsize", packetsize)
        if queue_length and not isinstance(queue_length, int):
            raise TypeError("Expected argument 'queue_length' to be a int")
        pulumi.set(__self__, "queue_length", queue_length)
        if snmp_communities and not isinstance(snmp_communities, list):
            raise TypeError("Expected argument 'snmp_communities' to be a list")
        pulumi.set(__self__, "snmp_communities", snmp_communities)
        if source_interface_informs_forty_gigabit_ethernet and not isinstance(source_interface_informs_forty_gigabit_ethernet, str):
            raise TypeError("Expected argument 'source_interface_informs_forty_gigabit_ethernet' to be a str")
        pulumi.set(__self__, "source_interface_informs_forty_gigabit_ethernet", source_interface_informs_forty_gigabit_ethernet)
        if source_interface_informs_gigabit_ethernet and not isinstance(source_interface_informs_gigabit_ethernet, str):
            raise TypeError("Expected argument 'source_interface_informs_gigabit_ethernet' to be a str")
        pulumi.set(__self__, "source_interface_informs_gigabit_ethernet", source_interface_informs_gigabit_ethernet)
        if source_interface_informs_hundred_gig_e and not isinstance(source_interface_informs_hundred_gig_e, str):
            raise TypeError("Expected argument 'source_interface_informs_hundred_gig_e' to be a str")
        pulumi.set(__self__, "source_interface_informs_hundred_gig_e", source_interface_informs_hundred_gig_e)
        if source_interface_informs_loopback and not isinstance(source_interface_informs_loopback, int):
            raise TypeError("Expected argument 'source_interface_informs_loopback' to be a int")
        pulumi.set(__self__, "source_interface_informs_loopback", source_interface_informs_loopback)
        if source_interface_informs_port_channel and not isinstance(source_interface_informs_port_channel, int):
            raise TypeError("Expected argument 'source_interface_informs_port_channel' to be a int")
        pulumi.set(__self__, "source_interface_informs_port_channel", source_interface_informs_port_channel)
        if source_interface_informs_port_channel_subinterface and not isinstance(source_interface_informs_port_channel_subinterface, str):
            raise TypeError("Expected argument 'source_interface_informs_port_channel_subinterface' to be a str")
        pulumi.set(__self__, "source_interface_informs_port_channel_subinterface", source_interface_informs_port_channel_subinterface)
        if source_interface_informs_ten_gigabit_ethernet and not isinstance(source_interface_informs_ten_gigabit_ethernet, str):
            raise TypeError("Expected argument 'source_interface_informs_ten_gigabit_ethernet' to be a str")
        pulumi.set(__self__, "source_interface_informs_ten_gigabit_ethernet", source_interface_informs_ten_gigabit_ethernet)
        if source_interface_informs_vlan and not isinstance(source_interface_informs_vlan, int):
            raise TypeError("Expected argument 'source_interface_informs_vlan' to be a int")
        pulumi.set(__self__, "source_interface_informs_vlan", source_interface_informs_vlan)
        if source_interface_traps_forty_gigabit_ethernet and not isinstance(source_interface_traps_forty_gigabit_ethernet, str):
            raise TypeError("Expected argument 'source_interface_traps_forty_gigabit_ethernet' to be a str")
        pulumi.set(__self__, "source_interface_traps_forty_gigabit_ethernet", source_interface_traps_forty_gigabit_ethernet)
        if source_interface_traps_gigabit_ethernet and not isinstance(source_interface_traps_gigabit_ethernet, str):
            raise TypeError("Expected argument 'source_interface_traps_gigabit_ethernet' to be a str")
        pulumi.set(__self__, "source_interface_traps_gigabit_ethernet", source_interface_traps_gigabit_ethernet)
        if source_interface_traps_hundred_gig_e and not isinstance(source_interface_traps_hundred_gig_e, str):
            raise TypeError("Expected argument 'source_interface_traps_hundred_gig_e' to be a str")
        pulumi.set(__self__, "source_interface_traps_hundred_gig_e", source_interface_traps_hundred_gig_e)
        if source_interface_traps_loopback and not isinstance(source_interface_traps_loopback, int):
            raise TypeError("Expected argument 'source_interface_traps_loopback' to be a int")
        pulumi.set(__self__, "source_interface_traps_loopback", source_interface_traps_loopback)
        if source_interface_traps_port_channel and not isinstance(source_interface_traps_port_channel, int):
            raise TypeError("Expected argument 'source_interface_traps_port_channel' to be a int")
        pulumi.set(__self__, "source_interface_traps_port_channel", source_interface_traps_port_channel)
        if source_interface_traps_port_channel_subinterface and not isinstance(source_interface_traps_port_channel_subinterface, str):
            raise TypeError("Expected argument 'source_interface_traps_port_channel_subinterface' to be a str")
        pulumi.set(__self__, "source_interface_traps_port_channel_subinterface", source_interface_traps_port_channel_subinterface)
        if source_interface_traps_ten_gigabit_ethernet and not isinstance(source_interface_traps_ten_gigabit_ethernet, str):
            raise TypeError("Expected argument 'source_interface_traps_ten_gigabit_ethernet' to be a str")
        pulumi.set(__self__, "source_interface_traps_ten_gigabit_ethernet", source_interface_traps_ten_gigabit_ethernet)
        if source_interface_traps_vlan and not isinstance(source_interface_traps_vlan, int):
            raise TypeError("Expected argument 'source_interface_traps_vlan' to be a int")
        pulumi.set(__self__, "source_interface_traps_vlan", source_interface_traps_vlan)
        if system_shutdown and not isinstance(system_shutdown, bool):
            raise TypeError("Expected argument 'system_shutdown' to be a bool")
        pulumi.set(__self__, "system_shutdown", system_shutdown)
        if trap_source_forty_gigabit_ethernet and not isinstance(trap_source_forty_gigabit_ethernet, str):
            raise TypeError("Expected argument 'trap_source_forty_gigabit_ethernet' to be a str")
        pulumi.set(__self__, "trap_source_forty_gigabit_ethernet", trap_source_forty_gigabit_ethernet)
        if trap_source_gigabit_ethernet and not isinstance(trap_source_gigabit_ethernet, str):
            raise TypeError("Expected argument 'trap_source_gigabit_ethernet' to be a str")
        pulumi.set(__self__, "trap_source_gigabit_ethernet", trap_source_gigabit_ethernet)
        if trap_source_hundred_gig_e and not isinstance(trap_source_hundred_gig_e, str):
            raise TypeError("Expected argument 'trap_source_hundred_gig_e' to be a str")
        pulumi.set(__self__, "trap_source_hundred_gig_e", trap_source_hundred_gig_e)
        if trap_source_loopback and not isinstance(trap_source_loopback, int):
            raise TypeError("Expected argument 'trap_source_loopback' to be a int")
        pulumi.set(__self__, "trap_source_loopback", trap_source_loopback)
        if trap_source_port_channel and not isinstance(trap_source_port_channel, int):
            raise TypeError("Expected argument 'trap_source_port_channel' to be a int")
        pulumi.set(__self__, "trap_source_port_channel", trap_source_port_channel)
        if trap_source_port_channel_subinterface and not isinstance(trap_source_port_channel_subinterface, str):
            raise TypeError("Expected argument 'trap_source_port_channel_subinterface' to be a str")
        pulumi.set(__self__, "trap_source_port_channel_subinterface", trap_source_port_channel_subinterface)
        if trap_source_ten_gigabit_ethernet and not isinstance(trap_source_ten_gigabit_ethernet, str):
            raise TypeError("Expected argument 'trap_source_ten_gigabit_ethernet' to be a str")
        pulumi.set(__self__, "trap_source_ten_gigabit_ethernet", trap_source_ten_gigabit_ethernet)
        if trap_source_vlan and not isinstance(trap_source_vlan, int):
            raise TypeError("Expected argument 'trap_source_vlan' to be a int")
        pulumi.set(__self__, "trap_source_vlan", trap_source_vlan)
        if views and not isinstance(views, list):
            raise TypeError("Expected argument 'views' to be a list")
        pulumi.set(__self__, "views", views)

    @property
    @pulumi.getter(name="chassisId")
    def chassis_id(self) -> str:
        """
        String to uniquely identify this chassis
        """
        return pulumi.get(self, "chassis_id")

    @property
    @pulumi.getter
    def contact(self) -> str:
        """
        Text for mib object sysContact
        """
        return pulumi.get(self, "contact")

    @property
    @pulumi.getter
    def contexts(self) -> Sequence['outputs.GetSnmpServerContextResult']:
        """
        Create/Delete a context apart from default
        """
        return pulumi.get(self, "contexts")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="enableInforms")
    def enable_informs(self) -> bool:
        """
        Enable SNMP Informs
        """
        return pulumi.get(self, "enable_informs")

    @property
    @pulumi.getter(name="enableLoggingGetop")
    def enable_logging_getop(self) -> bool:
        """
        Enable SNMP GET Operation logging
        """
        return pulumi.get(self, "enable_logging_getop")

    @property
    @pulumi.getter(name="enableLoggingSetop")
    def enable_logging_setop(self) -> bool:
        """
        Enable SNMP SET Operation logging
        """
        return pulumi.get(self, "enable_logging_setop")

    @property
    @pulumi.getter(name="enableTraps")
    def enable_traps(self) -> bool:
        """
        Enable SNMP Traps
        """
        return pulumi.get(self, "enable_traps")

    @property
    @pulumi.getter(name="enableTrapsAuthFrameworkSecViolation")
    def enable_traps_auth_framework_sec_violation(self) -> bool:
        return pulumi.get(self, "enable_traps_auth_framework_sec_violation")

    @property
    @pulumi.getter(name="enableTrapsBfd")
    def enable_traps_bfd(self) -> bool:
        return pulumi.get(self, "enable_traps_bfd")

    @property
    @pulumi.getter(name="enableTrapsBgpCbgp2")
    def enable_traps_bgp_cbgp2(self) -> bool:
        """
        Enable BGP MIBv2 traps
        """
        return pulumi.get(self, "enable_traps_bgp_cbgp2")

    @property
    @pulumi.getter(name="enableTrapsBridgeNewroot")
    def enable_traps_bridge_newroot(self) -> bool:
        return pulumi.get(self, "enable_traps_bridge_newroot")

    @property
    @pulumi.getter(name="enableTrapsBridgeTopologychange")
    def enable_traps_bridge_topologychange(self) -> bool:
        return pulumi.get(self, "enable_traps_bridge_topologychange")

    @property
    @pulumi.getter(name="enableTrapsBulkstatCollection")
    def enable_traps_bulkstat_collection(self) -> bool:
        """
        Enable Data-Collection-MIB Collection notifications
        """
        return pulumi.get(self, "enable_traps_bulkstat_collection")

    @property
    @pulumi.getter(name="enableTrapsBulkstatTransfer")
    def enable_traps_bulkstat_transfer(self) -> bool:
        """
        Enable Data-Collection-MIB Transfer notifications
        """
        return pulumi.get(self, "enable_traps_bulkstat_transfer")

    @property
    @pulumi.getter(name="enableTrapsCallHomeMessageSendFail")
    def enable_traps_call_home_message_send_fail(self) -> bool:
        return pulumi.get(self, "enable_traps_call_home_message_send_fail")

    @property
    @pulumi.getter(name="enableTrapsCallHomeServerFail")
    def enable_traps_call_home_server_fail(self) -> bool:
        return pulumi.get(self, "enable_traps_call_home_server_fail")

    @property
    @pulumi.getter(name="enableTrapsCefInconsistency")
    def enable_traps_cef_inconsistency(self) -> bool:
        return pulumi.get(self, "enable_traps_cef_inconsistency")

    @property
    @pulumi.getter(name="enableTrapsCefPeerFibStateChange")
    def enable_traps_cef_peer_fib_state_change(self) -> bool:
        return pulumi.get(self, "enable_traps_cef_peer_fib_state_change")

    @property
    @pulumi.getter(name="enableTrapsCefPeerStateChange")
    def enable_traps_cef_peer_state_change(self) -> bool:
        return pulumi.get(self, "enable_traps_cef_peer_state_change")

    @property
    @pulumi.getter(name="enableTrapsCefResourceFailure")
    def enable_traps_cef_resource_failure(self) -> bool:
        return pulumi.get(self, "enable_traps_cef_resource_failure")

    @property
    @pulumi.getter(name="enableTrapsConfig")
    def enable_traps_config(self) -> bool:
        """
        Enable SNMP config traps
        """
        return pulumi.get(self, "enable_traps_config")

    @property
    @pulumi.getter(name="enableTrapsConfigCopy")
    def enable_traps_config_copy(self) -> bool:
        """
        Enable SNMP config-copy traps
        """
        return pulumi.get(self, "enable_traps_config_copy")

    @property
    @pulumi.getter(name="enableTrapsConfigCtid")
    def enable_traps_config_ctid(self) -> bool:
        return pulumi.get(self, "enable_traps_config_ctid")

    @property
    @pulumi.getter(name="enableTrapsCpuThreshold")
    def enable_traps_cpu_threshold(self) -> bool:
        """
        Allow CPU utilization threshold violation traps
        """
        return pulumi.get(self, "enable_traps_cpu_threshold")

    @property
    @pulumi.getter(name="enableTrapsDhcp")
    def enable_traps_dhcp(self) -> bool:
        """
        Enable SNMP dhcp traps
        """
        return pulumi.get(self, "enable_traps_dhcp")

    @property
    @pulumi.getter(name="enableTrapsEigrp")
    def enable_traps_eigrp(self) -> bool:
        """
        Enable SNMP EIGRP traps
        """
        return pulumi.get(self, "enable_traps_eigrp")

    @property
    @pulumi.getter(name="enableTrapsEnergywise")
    def enable_traps_energywise(self) -> bool:
        return pulumi.get(self, "enable_traps_energywise")

    @property
    @pulumi.getter(name="enableTrapsEntity")
    def enable_traps_entity(self) -> bool:
        """
        Enable SNMP entity traps
        """
        return pulumi.get(self, "enable_traps_entity")

    @property
    @pulumi.getter(name="enableTrapsEntityDiagBootUpFail")
    def enable_traps_entity_diag_boot_up_fail(self) -> bool:
        """
        Enable SNMP ceDiagBootUpFailedNotif traps
        """
        return pulumi.get(self, "enable_traps_entity_diag_boot_up_fail")

    @property
    @pulumi.getter(name="enableTrapsEntityDiagHmTestRecover")
    def enable_traps_entity_diag_hm_test_recover(self) -> bool:
        """
        Enable SNMP ceDiagHMTestRecoverNotif traps
        """
        return pulumi.get(self, "enable_traps_entity_diag_hm_test_recover")

    @property
    @pulumi.getter(name="enableTrapsEntityDiagHmThreshReached")
    def enable_traps_entity_diag_hm_thresh_reached(self) -> bool:
        """
        Enable SNMP ceDiagHMThresholdReachedNotif traps
        """
        return pulumi.get(self, "enable_traps_entity_diag_hm_thresh_reached")

    @property
    @pulumi.getter(name="enableTrapsEntityDiagScheduledTestFail")
    def enable_traps_entity_diag_scheduled_test_fail(self) -> bool:
        """
        Enable SNMP ceDiagScheduledTestFailedNotif traps
        """
        return pulumi.get(self, "enable_traps_entity_diag_scheduled_test_fail")

    @property
    @pulumi.getter(name="enableTrapsEntityPerfThroughputNotif")
    def enable_traps_entity_perf_throughput_notif(self) -> bool:
        """
        Enable ENTITY PERFORMANCE MIB throughput traps
        """
        return pulumi.get(self, "enable_traps_entity_perf_throughput_notif")

    @property
    @pulumi.getter(name="enableTrapsEnvmon")
    def enable_traps_envmon(self) -> bool:
        """
        Enable SNMP environmental monitor traps
        """
        return pulumi.get(self, "enable_traps_envmon")

    @property
    @pulumi.getter(name="enableTrapsErrdisable")
    def enable_traps_errdisable(self) -> bool:
        """
        Enable SNMP errdisable notifications
        """
        return pulumi.get(self, "enable_traps_errdisable")

    @property
    @pulumi.getter(name="enableTrapsEventManager")
    def enable_traps_event_manager(self) -> bool:
        """
        Enable SNMP Embedded Event Manager traps
        """
        return pulumi.get(self, "enable_traps_event_manager")

    @property
    @pulumi.getter(name="enableTrapsFastRerouteProtected")
    def enable_traps_fast_reroute_protected(self) -> bool:
        return pulumi.get(self, "enable_traps_fast_reroute_protected")

    @property
    @pulumi.getter(name="enableTrapsFlashInsertion")
    def enable_traps_flash_insertion(self) -> bool:
        """
        Enable SNMP Flash Insertion notifications
        """
        return pulumi.get(self, "enable_traps_flash_insertion")

    @property
    @pulumi.getter(name="enableTrapsFlashLowspace")
    def enable_traps_flash_lowspace(self) -> bool:
        """
        Enable SNMP Flash Lowspace notifications
        """
        return pulumi.get(self, "enable_traps_flash_lowspace")

    @property
    @pulumi.getter(name="enableTrapsFlashRemoval")
    def enable_traps_flash_removal(self) -> bool:
        """
        Enable SNMP Flash Removal notifications
        """
        return pulumi.get(self, "enable_traps_flash_removal")

    @property
    @pulumi.getter(name="enableTrapsFlowmon")
    def enable_traps_flowmon(self) -> bool:
        """
        Enable SNMP flowmon notifications
        """
        return pulumi.get(self, "enable_traps_flowmon")

    @property
    @pulumi.getter(name="enableTrapsFruCtrl")
    def enable_traps_fru_ctrl(self) -> bool:
        """
        Enable SNMP entity FRU control traps
        """
        return pulumi.get(self, "enable_traps_fru_ctrl")

    @property
    @pulumi.getter(name="enableTrapsHsrp")
    def enable_traps_hsrp(self) -> bool:
        """
        Enable SNMP HSRP traps
        """
        return pulumi.get(self, "enable_traps_hsrp")

    @property
    @pulumi.getter(name="enableTrapsIkePolicyAdd")
    def enable_traps_ike_policy_add(self) -> bool:
        """
        Enable IKE Policy add trap
        """
        return pulumi.get(self, "enable_traps_ike_policy_add")

    @property
    @pulumi.getter(name="enableTrapsIkePolicyDelete")
    def enable_traps_ike_policy_delete(self) -> bool:
        """
        Enable IKE Policy delete trap
        """
        return pulumi.get(self, "enable_traps_ike_policy_delete")

    @property
    @pulumi.getter(name="enableTrapsIkeTunnelStart")
    def enable_traps_ike_tunnel_start(self) -> bool:
        """
        Enable IKE Tunnel start trap
        """
        return pulumi.get(self, "enable_traps_ike_tunnel_start")

    @property
    @pulumi.getter(name="enableTrapsIkeTunnelStop")
    def enable_traps_ike_tunnel_stop(self) -> bool:
        """
        Enable IKE Tunnel stop trap
        """
        return pulumi.get(self, "enable_traps_ike_tunnel_stop")

    @property
    @pulumi.getter(name="enableTrapsIpmulticast")
    def enable_traps_ipmulticast(self) -> bool:
        """
        Enable SNMP ipmulticast traps
        """
        return pulumi.get(self, "enable_traps_ipmulticast")

    @property
    @pulumi.getter(name="enableTrapsIpsecCryptomapAdd")
    def enable_traps_ipsec_cryptomap_add(self) -> bool:
        """
        Enable IPsec Cryptomap add trap
        """
        return pulumi.get(self, "enable_traps_ipsec_cryptomap_add")

    @property
    @pulumi.getter(name="enableTrapsIpsecCryptomapAttach")
    def enable_traps_ipsec_cryptomap_attach(self) -> bool:
        """
        Enable IPsec Cryptomap Attach trap
        """
        return pulumi.get(self, "enable_traps_ipsec_cryptomap_attach")

    @property
    @pulumi.getter(name="enableTrapsIpsecCryptomapDelete")
    def enable_traps_ipsec_cryptomap_delete(self) -> bool:
        """
        Enable IPsec Cryptomap delete trap
        """
        return pulumi.get(self, "enable_traps_ipsec_cryptomap_delete")

    @property
    @pulumi.getter(name="enableTrapsIpsecCryptomapDetach")
    def enable_traps_ipsec_cryptomap_detach(self) -> bool:
        """
        Enable IPsec Cryptomap Detach trap
        """
        return pulumi.get(self, "enable_traps_ipsec_cryptomap_detach")

    @property
    @pulumi.getter(name="enableTrapsIpsecTooManySas")
    def enable_traps_ipsec_too_many_sas(self) -> bool:
        """
        Enable IPsec Tunnel Start trap
        """
        return pulumi.get(self, "enable_traps_ipsec_too_many_sas")

    @property
    @pulumi.getter(name="enableTrapsIpsecTunnelStart")
    def enable_traps_ipsec_tunnel_start(self) -> bool:
        """
        Enable IPsec Tunnel Start trap
        """
        return pulumi.get(self, "enable_traps_ipsec_tunnel_start")

    @property
    @pulumi.getter(name="enableTrapsIpsecTunnelStop")
    def enable_traps_ipsec_tunnel_stop(self) -> bool:
        """
        Enable IPsec Tunnel Stop trap
        """
        return pulumi.get(self, "enable_traps_ipsec_tunnel_stop")

    @property
    @pulumi.getter(name="enableTrapsIpsla")
    def enable_traps_ipsla(self) -> bool:
        """
        Enable IPSLA traps traps
        """
        return pulumi.get(self, "enable_traps_ipsla")

    @property
    @pulumi.getter(name="enableTrapsIsis")
    def enable_traps_isis(self) -> bool:
        """
        Enable ISIS traps traps
        """
        return pulumi.get(self, "enable_traps_isis")

    @property
    @pulumi.getter(name="enableTrapsLicense")
    def enable_traps_license(self) -> bool:
        """
        Enable license traps
        """
        return pulumi.get(self, "enable_traps_license")

    @property
    @pulumi.getter(name="enableTrapsLocalAuth")
    def enable_traps_local_auth(self) -> bool:
        """
        Enable SNMP local auth traps
        """
        return pulumi.get(self, "enable_traps_local_auth")

    @property
    @pulumi.getter(name="enableTrapsMacNotificationChange")
    def enable_traps_mac_notification_change(self) -> bool:
        """
        Enable SNMP Change traps
        """
        return pulumi.get(self, "enable_traps_mac_notification_change")

    @property
    @pulumi.getter(name="enableTrapsMacNotificationMove")
    def enable_traps_mac_notification_move(self) -> bool:
        """
        Enable SNMP Move traps
        """
        return pulumi.get(self, "enable_traps_mac_notification_move")

    @property
    @pulumi.getter(name="enableTrapsMacNotificationThreshold")
    def enable_traps_mac_notification_threshold(self) -> bool:
        """
        Enable SNMP Threshold traps
        """
        return pulumi.get(self, "enable_traps_mac_notification_threshold")

    @property
    @pulumi.getter(name="enableTrapsMemoryBufferpeak")
    def enable_traps_memory_bufferpeak(self) -> bool:
        """
        Enable SNMP Memory Bufferpeak traps
        """
        return pulumi.get(self, "enable_traps_memory_bufferpeak")

    @property
    @pulumi.getter(name="enableTrapsMplsLdp")
    def enable_traps_mpls_ldp(self) -> bool:
        """
        SNMP MPLS label distribution protocol traps
        """
        return pulumi.get(self, "enable_traps_mpls_ldp")

    @property
    @pulumi.getter(name="enableTrapsMplsRfcLdp")
    def enable_traps_mpls_rfc_ldp(self) -> bool:
        return pulumi.get(self, "enable_traps_mpls_rfc_ldp")

    @property
    @pulumi.getter(name="enableTrapsMplsTrafficEng")
    def enable_traps_mpls_traffic_eng(self) -> bool:
        return pulumi.get(self, "enable_traps_mpls_traffic_eng")

    @property
    @pulumi.getter(name="enableTrapsMplsVpn")
    def enable_traps_mpls_vpn(self) -> bool:
        return pulumi.get(self, "enable_traps_mpls_vpn")

    @property
    @pulumi.getter(name="enableTrapsMsdp")
    def enable_traps_msdp(self) -> bool:
        """
        Enable SNMP MSDP traps
        """
        return pulumi.get(self, "enable_traps_msdp")

    @property
    @pulumi.getter(name="enableTrapsNhrpNhc")
    def enable_traps_nhrp_nhc(self) -> bool:
        return pulumi.get(self, "enable_traps_nhrp_nhc")

    @property
    @pulumi.getter(name="enableTrapsNhrpNhp")
    def enable_traps_nhrp_nhp(self) -> bool:
        return pulumi.get(self, "enable_traps_nhrp_nhp")

    @property
    @pulumi.getter(name="enableTrapsNhrpNhs")
    def enable_traps_nhrp_nhs(self) -> bool:
        return pulumi.get(self, "enable_traps_nhrp_nhs")

    @property
    @pulumi.getter(name="enableTrapsNhrpQuotaExceeded")
    def enable_traps_nhrp_quota_exceeded(self) -> bool:
        return pulumi.get(self, "enable_traps_nhrp_quota_exceeded")

    @property
    @pulumi.getter(name="enableTrapsOspfConfigErrors")
    def enable_traps_ospf_config_errors(self) -> bool:
        """
        Enable all traps of errors
        """
        return pulumi.get(self, "enable_traps_ospf_config_errors")

    @property
    @pulumi.getter(name="enableTrapsOspfConfigLsa")
    def enable_traps_ospf_config_lsa(self) -> bool:
        """
        Enable all traps of lsa
        """
        return pulumi.get(self, "enable_traps_ospf_config_lsa")

    @property
    @pulumi.getter(name="enableTrapsOspfConfigRetransmit")
    def enable_traps_ospf_config_retransmit(self) -> bool:
        """
        Enable all traps of retransmit
        """
        return pulumi.get(self, "enable_traps_ospf_config_retransmit")

    @property
    @pulumi.getter(name="enableTrapsOspfConfigStateChange")
    def enable_traps_ospf_config_state_change(self) -> bool:
        """
        Enable all traps of state-change
        """
        return pulumi.get(self, "enable_traps_ospf_config_state_change")

    @property
    @pulumi.getter(name="enableTrapsOspfErrorsEnable")
    def enable_traps_ospf_errors_enable(self) -> bool:
        """
        Enable all traps of errors
        """
        return pulumi.get(self, "enable_traps_ospf_errors_enable")

    @property
    @pulumi.getter(name="enableTrapsOspfLsaEnable")
    def enable_traps_ospf_lsa_enable(self) -> bool:
        """
        Enable all traps of lsa
        """
        return pulumi.get(self, "enable_traps_ospf_lsa_enable")

    @property
    @pulumi.getter(name="enableTrapsOspfNssaTransChange")
    def enable_traps_ospf_nssa_trans_change(self) -> bool:
        """
        Nssa translator state changes
        """
        return pulumi.get(self, "enable_traps_ospf_nssa_trans_change")

    @property
    @pulumi.getter(name="enableTrapsOspfRetransmitEnable")
    def enable_traps_ospf_retransmit_enable(self) -> bool:
        """
        Enable all traps of retransmit
        """
        return pulumi.get(self, "enable_traps_ospf_retransmit_enable")

    @property
    @pulumi.getter(name="enableTrapsOspfShamlinkInterface")
    def enable_traps_ospf_shamlink_interface(self) -> bool:
        """
        Sham link interface state changes
        """
        return pulumi.get(self, "enable_traps_ospf_shamlink_interface")

    @property
    @pulumi.getter(name="enableTrapsOspfShamlinkNeighbor")
    def enable_traps_ospf_shamlink_neighbor(self) -> bool:
        """
        Sham link neighbor state changes
        """
        return pulumi.get(self, "enable_traps_ospf_shamlink_neighbor")

    @property
    @pulumi.getter(name="enableTrapsOspfv3ConfigErrors")
    def enable_traps_ospfv3_config_errors(self) -> bool:
        """
        Enable all traps of errors
        """
        return pulumi.get(self, "enable_traps_ospfv3_config_errors")

    @property
    @pulumi.getter(name="enableTrapsOspfv3ConfigStateChange")
    def enable_traps_ospfv3_config_state_change(self) -> bool:
        """
        Enable all traps of state-change
        """
        return pulumi.get(self, "enable_traps_ospfv3_config_state_change")

    @property
    @pulumi.getter(name="enableTrapsPimInvalidPimMessage")
    def enable_traps_pim_invalid_pim_message(self) -> bool:
        """
        Enable invalid pim message trap
        """
        return pulumi.get(self, "enable_traps_pim_invalid_pim_message")

    @property
    @pulumi.getter(name="enableTrapsPimNeighborChange")
    def enable_traps_pim_neighbor_change(self) -> bool:
        """
        Enable neighbor change trap
        """
        return pulumi.get(self, "enable_traps_pim_neighbor_change")

    @property
    @pulumi.getter(name="enableTrapsPimRpMappingChange")
    def enable_traps_pim_rp_mapping_change(self) -> bool:
        """
        Enable rp mapping change trap
        """
        return pulumi.get(self, "enable_traps_pim_rp_mapping_change")

    @property
    @pulumi.getter(name="enableTrapsPortSecurity")
    def enable_traps_port_security(self) -> bool:
        """
        Enable SNMP port security traps
        """
        return pulumi.get(self, "enable_traps_port_security")

    @property
    @pulumi.getter(name="enableTrapsPowerEthernetGroup")
    def enable_traps_power_ethernet_group(self) -> str:
        """
        Enable SNMP inline power group based traps
        """
        return pulumi.get(self, "enable_traps_power_ethernet_group")

    @property
    @pulumi.getter(name="enableTrapsPowerEthernetPolice")
    def enable_traps_power_ethernet_police(self) -> bool:
        """
        Enable Policing Trap
        """
        return pulumi.get(self, "enable_traps_power_ethernet_police")

    @property
    @pulumi.getter(name="enableTrapsPwVc")
    def enable_traps_pw_vc(self) -> bool:
        return pulumi.get(self, "enable_traps_pw_vc")

    @property
    @pulumi.getter(name="enableTrapsRep")
    def enable_traps_rep(self) -> bool:
        return pulumi.get(self, "enable_traps_rep")

    @property
    @pulumi.getter(name="enableTrapsRf")
    def enable_traps_rf(self) -> bool:
        """
        Enable all SNMP traps defined in CISCO-RF-MIB
        """
        return pulumi.get(self, "enable_traps_rf")

    @property
    @pulumi.getter(name="enableTrapsSmartLicense")
    def enable_traps_smart_license(self) -> bool:
        """
        Enable smart license traps
        """
        return pulumi.get(self, "enable_traps_smart_license")

    @property
    @pulumi.getter(name="enableTrapsSnmpAuthentication")
    def enable_traps_snmp_authentication(self) -> bool:
        """
        Enable authentication trap
        """
        return pulumi.get(self, "enable_traps_snmp_authentication")

    @property
    @pulumi.getter(name="enableTrapsSnmpColdstart")
    def enable_traps_snmp_coldstart(self) -> bool:
        """
        Enable coldStart trap
        """
        return pulumi.get(self, "enable_traps_snmp_coldstart")

    @property
    @pulumi.getter(name="enableTrapsSnmpLinkdown")
    def enable_traps_snmp_linkdown(self) -> bool:
        """
        Enable linkDown trap
        """
        return pulumi.get(self, "enable_traps_snmp_linkdown")

    @property
    @pulumi.getter(name="enableTrapsSnmpLinkup")
    def enable_traps_snmp_linkup(self) -> bool:
        """
        Enable linkUp trap
        """
        return pulumi.get(self, "enable_traps_snmp_linkup")

    @property
    @pulumi.getter(name="enableTrapsSnmpWarmstart")
    def enable_traps_snmp_warmstart(self) -> bool:
        """
        Enable warmStart trap
        """
        return pulumi.get(self, "enable_traps_snmp_warmstart")

    @property
    @pulumi.getter(name="enableTrapsStackwise")
    def enable_traps_stackwise(self) -> bool:
        """
        Enable SNMP stackwise traps
        """
        return pulumi.get(self, "enable_traps_stackwise")

    @property
    @pulumi.getter(name="enableTrapsStpxInconsistency")
    def enable_traps_stpx_inconsistency(self) -> bool:
        return pulumi.get(self, "enable_traps_stpx_inconsistency")

    @property
    @pulumi.getter(name="enableTrapsStpxLoopInconsistency")
    def enable_traps_stpx_loop_inconsistency(self) -> bool:
        return pulumi.get(self, "enable_traps_stpx_loop_inconsistency")

    @property
    @pulumi.getter(name="enableTrapsStpxRootInconsistency")
    def enable_traps_stpx_root_inconsistency(self) -> bool:
        return pulumi.get(self, "enable_traps_stpx_root_inconsistency")

    @property
    @pulumi.getter(name="enableTrapsSyslog")
    def enable_traps_syslog(self) -> bool:
        """
        Enable SNMP syslog traps
        """
        return pulumi.get(self, "enable_traps_syslog")

    @property
    @pulumi.getter(name="enableTrapsTransceiverAll")
    def enable_traps_transceiver_all(self) -> bool:
        return pulumi.get(self, "enable_traps_transceiver_all")

    @property
    @pulumi.getter(name="enableTrapsTty")
    def enable_traps_tty(self) -> bool:
        """
        Enable TCP connection traps
        """
        return pulumi.get(self, "enable_traps_tty")

    @property
    @pulumi.getter(name="enableTrapsUdldLinkFailRpt")
    def enable_traps_udld_link_fail_rpt(self) -> bool:
        """
        Enable SNMP cudldpFastHelloLinkFailRptNotification traps
        """
        return pulumi.get(self, "enable_traps_udld_link_fail_rpt")

    @property
    @pulumi.getter(name="enableTrapsUdldStatusChange")
    def enable_traps_udld_status_change(self) -> bool:
        """
        Enable SNMP cudldpFastHelloStatusChangeNotification traps
        """
        return pulumi.get(self, "enable_traps_udld_status_change")

    @property
    @pulumi.getter(name="enableTrapsVlanMembership")
    def enable_traps_vlan_membership(self) -> bool:
        return pulumi.get(self, "enable_traps_vlan_membership")

    @property
    @pulumi.getter(name="enableTrapsVlancreate")
    def enable_traps_vlancreate(self) -> bool:
        return pulumi.get(self, "enable_traps_vlancreate")

    @property
    @pulumi.getter(name="enableTrapsVlandelete")
    def enable_traps_vlandelete(self) -> bool:
        return pulumi.get(self, "enable_traps_vlandelete")

    @property
    @pulumi.getter(name="enableTrapsVrfmibVnetTrunkDown")
    def enable_traps_vrfmib_vnet_trunk_down(self) -> bool:
        return pulumi.get(self, "enable_traps_vrfmib_vnet_trunk_down")

    @property
    @pulumi.getter(name="enableTrapsVrfmibVnetTrunkUp")
    def enable_traps_vrfmib_vnet_trunk_up(self) -> bool:
        return pulumi.get(self, "enable_traps_vrfmib_vnet_trunk_up")

    @property
    @pulumi.getter(name="enableTrapsVrfmibVrfDown")
    def enable_traps_vrfmib_vrf_down(self) -> bool:
        return pulumi.get(self, "enable_traps_vrfmib_vrf_down")

    @property
    @pulumi.getter(name="enableTrapsVrfmibVrfUp")
    def enable_traps_vrfmib_vrf_up(self) -> bool:
        return pulumi.get(self, "enable_traps_vrfmib_vrf_up")

    @property
    @pulumi.getter(name="enableTrapsVtp")
    def enable_traps_vtp(self) -> bool:
        return pulumi.get(self, "enable_traps_vtp")

    @property
    @pulumi.getter
    def hosts(self) -> Sequence['outputs.GetSnmpServerHostResult']:
        """
        Specify hosts keyed by (ip-address, community-or-user)
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The path of the retrieved object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ifindexPersist")
    def ifindex_persist(self) -> bool:
        """
        Persist interface indices
        """
        return pulumi.get(self, "ifindex_persist")

    @property
    @pulumi.getter
    def location(self) -> str:
        """
        Text for mib object sysLocation
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def packetsize(self) -> int:
        """
        Largest SNMP packet size
        """
        return pulumi.get(self, "packetsize")

    @property
    @pulumi.getter(name="queueLength")
    def queue_length(self) -> int:
        """
        Message queue length for each TRAP host
        """
        return pulumi.get(self, "queue_length")

    @property
    @pulumi.getter(name="snmpCommunities")
    def snmp_communities(self) -> Sequence['outputs.GetSnmpServerSnmpCommunityResult']:
        """
        Enable SNMP; set community string and access privs
        """
        return pulumi.get(self, "snmp_communities")

    @property
    @pulumi.getter(name="sourceInterfaceInformsFortyGigabitEthernet")
    def source_interface_informs_forty_gigabit_ethernet(self) -> str:
        """
        Forty GigabitEthernet
        """
        return pulumi.get(self, "source_interface_informs_forty_gigabit_ethernet")

    @property
    @pulumi.getter(name="sourceInterfaceInformsGigabitEthernet")
    def source_interface_informs_gigabit_ethernet(self) -> str:
        """
        GigabitEthernet IEEE 802.3z
        """
        return pulumi.get(self, "source_interface_informs_gigabit_ethernet")

    @property
    @pulumi.getter(name="sourceInterfaceInformsHundredGigE")
    def source_interface_informs_hundred_gig_e(self) -> str:
        """
        Hundred GigabitEthernet
        """
        return pulumi.get(self, "source_interface_informs_hundred_gig_e")

    @property
    @pulumi.getter(name="sourceInterfaceInformsLoopback")
    def source_interface_informs_loopback(self) -> int:
        """
        Loopback interface
        """
        return pulumi.get(self, "source_interface_informs_loopback")

    @property
    @pulumi.getter(name="sourceInterfaceInformsPortChannel")
    def source_interface_informs_port_channel(self) -> int:
        """
        Ethernet Channel of interfaces
        """
        return pulumi.get(self, "source_interface_informs_port_channel")

    @property
    @pulumi.getter(name="sourceInterfaceInformsPortChannelSubinterface")
    def source_interface_informs_port_channel_subinterface(self) -> str:
        return pulumi.get(self, "source_interface_informs_port_channel_subinterface")

    @property
    @pulumi.getter(name="sourceInterfaceInformsTenGigabitEthernet")
    def source_interface_informs_ten_gigabit_ethernet(self) -> str:
        """
        Ten Gigabit Ethernet
        """
        return pulumi.get(self, "source_interface_informs_ten_gigabit_ethernet")

    @property
    @pulumi.getter(name="sourceInterfaceInformsVlan")
    def source_interface_informs_vlan(self) -> int:
        """
        Iosxr Vlans
        """
        return pulumi.get(self, "source_interface_informs_vlan")

    @property
    @pulumi.getter(name="sourceInterfaceTrapsFortyGigabitEthernet")
    def source_interface_traps_forty_gigabit_ethernet(self) -> str:
        """
        Forty GigabitEthernet
        """
        return pulumi.get(self, "source_interface_traps_forty_gigabit_ethernet")

    @property
    @pulumi.getter(name="sourceInterfaceTrapsGigabitEthernet")
    def source_interface_traps_gigabit_ethernet(self) -> str:
        """
        GigabitEthernet IEEE 802.3z
        """
        return pulumi.get(self, "source_interface_traps_gigabit_ethernet")

    @property
    @pulumi.getter(name="sourceInterfaceTrapsHundredGigE")
    def source_interface_traps_hundred_gig_e(self) -> str:
        """
        Hundred GigabitEthernet
        """
        return pulumi.get(self, "source_interface_traps_hundred_gig_e")

    @property
    @pulumi.getter(name="sourceInterfaceTrapsLoopback")
    def source_interface_traps_loopback(self) -> int:
        """
        Loopback interface
        """
        return pulumi.get(self, "source_interface_traps_loopback")

    @property
    @pulumi.getter(name="sourceInterfaceTrapsPortChannel")
    def source_interface_traps_port_channel(self) -> int:
        """
        Ethernet Channel of interfaces
        """
        return pulumi.get(self, "source_interface_traps_port_channel")

    @property
    @pulumi.getter(name="sourceInterfaceTrapsPortChannelSubinterface")
    def source_interface_traps_port_channel_subinterface(self) -> str:
        return pulumi.get(self, "source_interface_traps_port_channel_subinterface")

    @property
    @pulumi.getter(name="sourceInterfaceTrapsTenGigabitEthernet")
    def source_interface_traps_ten_gigabit_ethernet(self) -> str:
        """
        Ten Gigabit Ethernet
        """
        return pulumi.get(self, "source_interface_traps_ten_gigabit_ethernet")

    @property
    @pulumi.getter(name="sourceInterfaceTrapsVlan")
    def source_interface_traps_vlan(self) -> int:
        """
        Iosxr Vlans
        """
        return pulumi.get(self, "source_interface_traps_vlan")

    @property
    @pulumi.getter(name="systemShutdown")
    def system_shutdown(self) -> bool:
        """
        Enable use of the SNMP reload command
        """
        return pulumi.get(self, "system_shutdown")

    @property
    @pulumi.getter(name="trapSourceFortyGigabitEthernet")
    def trap_source_forty_gigabit_ethernet(self) -> str:
        """
        Forty GigabitEthernet
        """
        return pulumi.get(self, "trap_source_forty_gigabit_ethernet")

    @property
    @pulumi.getter(name="trapSourceGigabitEthernet")
    def trap_source_gigabit_ethernet(self) -> str:
        """
        GigabitEthernet IEEE 802.3z
        """
        return pulumi.get(self, "trap_source_gigabit_ethernet")

    @property
    @pulumi.getter(name="trapSourceHundredGigE")
    def trap_source_hundred_gig_e(self) -> str:
        """
        Hundred GigabitEthernet
        """
        return pulumi.get(self, "trap_source_hundred_gig_e")

    @property
    @pulumi.getter(name="trapSourceLoopback")
    def trap_source_loopback(self) -> int:
        """
        Loopback interface
        """
        return pulumi.get(self, "trap_source_loopback")

    @property
    @pulumi.getter(name="trapSourcePortChannel")
    def trap_source_port_channel(self) -> int:
        """
        Ethernet Channel of interfaces
        """
        return pulumi.get(self, "trap_source_port_channel")

    @property
    @pulumi.getter(name="trapSourcePortChannelSubinterface")
    def trap_source_port_channel_subinterface(self) -> str:
        return pulumi.get(self, "trap_source_port_channel_subinterface")

    @property
    @pulumi.getter(name="trapSourceTenGigabitEthernet")
    def trap_source_ten_gigabit_ethernet(self) -> str:
        """
        Ten Gigabit Ethernet
        """
        return pulumi.get(self, "trap_source_ten_gigabit_ethernet")

    @property
    @pulumi.getter(name="trapSourceVlan")
    def trap_source_vlan(self) -> int:
        """
        Iosxr Vlans
        """
        return pulumi.get(self, "trap_source_vlan")

    @property
    @pulumi.getter
    def views(self) -> Sequence['outputs.GetSnmpServerViewResult']:
        """
        Define an SNMPv2 MIB view
        """
        return pulumi.get(self, "views")


class AwaitableGetSnmpServerResult(GetSnmpServerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSnmpServerResult(
            chassis_id=self.chassis_id,
            contact=self.contact,
            contexts=self.contexts,
            device=self.device,
            enable_informs=self.enable_informs,
            enable_logging_getop=self.enable_logging_getop,
            enable_logging_setop=self.enable_logging_setop,
            enable_traps=self.enable_traps,
            enable_traps_auth_framework_sec_violation=self.enable_traps_auth_framework_sec_violation,
            enable_traps_bfd=self.enable_traps_bfd,
            enable_traps_bgp_cbgp2=self.enable_traps_bgp_cbgp2,
            enable_traps_bridge_newroot=self.enable_traps_bridge_newroot,
            enable_traps_bridge_topologychange=self.enable_traps_bridge_topologychange,
            enable_traps_bulkstat_collection=self.enable_traps_bulkstat_collection,
            enable_traps_bulkstat_transfer=self.enable_traps_bulkstat_transfer,
            enable_traps_call_home_message_send_fail=self.enable_traps_call_home_message_send_fail,
            enable_traps_call_home_server_fail=self.enable_traps_call_home_server_fail,
            enable_traps_cef_inconsistency=self.enable_traps_cef_inconsistency,
            enable_traps_cef_peer_fib_state_change=self.enable_traps_cef_peer_fib_state_change,
            enable_traps_cef_peer_state_change=self.enable_traps_cef_peer_state_change,
            enable_traps_cef_resource_failure=self.enable_traps_cef_resource_failure,
            enable_traps_config=self.enable_traps_config,
            enable_traps_config_copy=self.enable_traps_config_copy,
            enable_traps_config_ctid=self.enable_traps_config_ctid,
            enable_traps_cpu_threshold=self.enable_traps_cpu_threshold,
            enable_traps_dhcp=self.enable_traps_dhcp,
            enable_traps_eigrp=self.enable_traps_eigrp,
            enable_traps_energywise=self.enable_traps_energywise,
            enable_traps_entity=self.enable_traps_entity,
            enable_traps_entity_diag_boot_up_fail=self.enable_traps_entity_diag_boot_up_fail,
            enable_traps_entity_diag_hm_test_recover=self.enable_traps_entity_diag_hm_test_recover,
            enable_traps_entity_diag_hm_thresh_reached=self.enable_traps_entity_diag_hm_thresh_reached,
            enable_traps_entity_diag_scheduled_test_fail=self.enable_traps_entity_diag_scheduled_test_fail,
            enable_traps_entity_perf_throughput_notif=self.enable_traps_entity_perf_throughput_notif,
            enable_traps_envmon=self.enable_traps_envmon,
            enable_traps_errdisable=self.enable_traps_errdisable,
            enable_traps_event_manager=self.enable_traps_event_manager,
            enable_traps_fast_reroute_protected=self.enable_traps_fast_reroute_protected,
            enable_traps_flash_insertion=self.enable_traps_flash_insertion,
            enable_traps_flash_lowspace=self.enable_traps_flash_lowspace,
            enable_traps_flash_removal=self.enable_traps_flash_removal,
            enable_traps_flowmon=self.enable_traps_flowmon,
            enable_traps_fru_ctrl=self.enable_traps_fru_ctrl,
            enable_traps_hsrp=self.enable_traps_hsrp,
            enable_traps_ike_policy_add=self.enable_traps_ike_policy_add,
            enable_traps_ike_policy_delete=self.enable_traps_ike_policy_delete,
            enable_traps_ike_tunnel_start=self.enable_traps_ike_tunnel_start,
            enable_traps_ike_tunnel_stop=self.enable_traps_ike_tunnel_stop,
            enable_traps_ipmulticast=self.enable_traps_ipmulticast,
            enable_traps_ipsec_cryptomap_add=self.enable_traps_ipsec_cryptomap_add,
            enable_traps_ipsec_cryptomap_attach=self.enable_traps_ipsec_cryptomap_attach,
            enable_traps_ipsec_cryptomap_delete=self.enable_traps_ipsec_cryptomap_delete,
            enable_traps_ipsec_cryptomap_detach=self.enable_traps_ipsec_cryptomap_detach,
            enable_traps_ipsec_too_many_sas=self.enable_traps_ipsec_too_many_sas,
            enable_traps_ipsec_tunnel_start=self.enable_traps_ipsec_tunnel_start,
            enable_traps_ipsec_tunnel_stop=self.enable_traps_ipsec_tunnel_stop,
            enable_traps_ipsla=self.enable_traps_ipsla,
            enable_traps_isis=self.enable_traps_isis,
            enable_traps_license=self.enable_traps_license,
            enable_traps_local_auth=self.enable_traps_local_auth,
            enable_traps_mac_notification_change=self.enable_traps_mac_notification_change,
            enable_traps_mac_notification_move=self.enable_traps_mac_notification_move,
            enable_traps_mac_notification_threshold=self.enable_traps_mac_notification_threshold,
            enable_traps_memory_bufferpeak=self.enable_traps_memory_bufferpeak,
            enable_traps_mpls_ldp=self.enable_traps_mpls_ldp,
            enable_traps_mpls_rfc_ldp=self.enable_traps_mpls_rfc_ldp,
            enable_traps_mpls_traffic_eng=self.enable_traps_mpls_traffic_eng,
            enable_traps_mpls_vpn=self.enable_traps_mpls_vpn,
            enable_traps_msdp=self.enable_traps_msdp,
            enable_traps_nhrp_nhc=self.enable_traps_nhrp_nhc,
            enable_traps_nhrp_nhp=self.enable_traps_nhrp_nhp,
            enable_traps_nhrp_nhs=self.enable_traps_nhrp_nhs,
            enable_traps_nhrp_quota_exceeded=self.enable_traps_nhrp_quota_exceeded,
            enable_traps_ospf_config_errors=self.enable_traps_ospf_config_errors,
            enable_traps_ospf_config_lsa=self.enable_traps_ospf_config_lsa,
            enable_traps_ospf_config_retransmit=self.enable_traps_ospf_config_retransmit,
            enable_traps_ospf_config_state_change=self.enable_traps_ospf_config_state_change,
            enable_traps_ospf_errors_enable=self.enable_traps_ospf_errors_enable,
            enable_traps_ospf_lsa_enable=self.enable_traps_ospf_lsa_enable,
            enable_traps_ospf_nssa_trans_change=self.enable_traps_ospf_nssa_trans_change,
            enable_traps_ospf_retransmit_enable=self.enable_traps_ospf_retransmit_enable,
            enable_traps_ospf_shamlink_interface=self.enable_traps_ospf_shamlink_interface,
            enable_traps_ospf_shamlink_neighbor=self.enable_traps_ospf_shamlink_neighbor,
            enable_traps_ospfv3_config_errors=self.enable_traps_ospfv3_config_errors,
            enable_traps_ospfv3_config_state_change=self.enable_traps_ospfv3_config_state_change,
            enable_traps_pim_invalid_pim_message=self.enable_traps_pim_invalid_pim_message,
            enable_traps_pim_neighbor_change=self.enable_traps_pim_neighbor_change,
            enable_traps_pim_rp_mapping_change=self.enable_traps_pim_rp_mapping_change,
            enable_traps_port_security=self.enable_traps_port_security,
            enable_traps_power_ethernet_group=self.enable_traps_power_ethernet_group,
            enable_traps_power_ethernet_police=self.enable_traps_power_ethernet_police,
            enable_traps_pw_vc=self.enable_traps_pw_vc,
            enable_traps_rep=self.enable_traps_rep,
            enable_traps_rf=self.enable_traps_rf,
            enable_traps_smart_license=self.enable_traps_smart_license,
            enable_traps_snmp_authentication=self.enable_traps_snmp_authentication,
            enable_traps_snmp_coldstart=self.enable_traps_snmp_coldstart,
            enable_traps_snmp_linkdown=self.enable_traps_snmp_linkdown,
            enable_traps_snmp_linkup=self.enable_traps_snmp_linkup,
            enable_traps_snmp_warmstart=self.enable_traps_snmp_warmstart,
            enable_traps_stackwise=self.enable_traps_stackwise,
            enable_traps_stpx_inconsistency=self.enable_traps_stpx_inconsistency,
            enable_traps_stpx_loop_inconsistency=self.enable_traps_stpx_loop_inconsistency,
            enable_traps_stpx_root_inconsistency=self.enable_traps_stpx_root_inconsistency,
            enable_traps_syslog=self.enable_traps_syslog,
            enable_traps_transceiver_all=self.enable_traps_transceiver_all,
            enable_traps_tty=self.enable_traps_tty,
            enable_traps_udld_link_fail_rpt=self.enable_traps_udld_link_fail_rpt,
            enable_traps_udld_status_change=self.enable_traps_udld_status_change,
            enable_traps_vlan_membership=self.enable_traps_vlan_membership,
            enable_traps_vlancreate=self.enable_traps_vlancreate,
            enable_traps_vlandelete=self.enable_traps_vlandelete,
            enable_traps_vrfmib_vnet_trunk_down=self.enable_traps_vrfmib_vnet_trunk_down,
            enable_traps_vrfmib_vnet_trunk_up=self.enable_traps_vrfmib_vnet_trunk_up,
            enable_traps_vrfmib_vrf_down=self.enable_traps_vrfmib_vrf_down,
            enable_traps_vrfmib_vrf_up=self.enable_traps_vrfmib_vrf_up,
            enable_traps_vtp=self.enable_traps_vtp,
            hosts=self.hosts,
            id=self.id,
            ifindex_persist=self.ifindex_persist,
            location=self.location,
            packetsize=self.packetsize,
            queue_length=self.queue_length,
            snmp_communities=self.snmp_communities,
            source_interface_informs_forty_gigabit_ethernet=self.source_interface_informs_forty_gigabit_ethernet,
            source_interface_informs_gigabit_ethernet=self.source_interface_informs_gigabit_ethernet,
            source_interface_informs_hundred_gig_e=self.source_interface_informs_hundred_gig_e,
            source_interface_informs_loopback=self.source_interface_informs_loopback,
            source_interface_informs_port_channel=self.source_interface_informs_port_channel,
            source_interface_informs_port_channel_subinterface=self.source_interface_informs_port_channel_subinterface,
            source_interface_informs_ten_gigabit_ethernet=self.source_interface_informs_ten_gigabit_ethernet,
            source_interface_informs_vlan=self.source_interface_informs_vlan,
            source_interface_traps_forty_gigabit_ethernet=self.source_interface_traps_forty_gigabit_ethernet,
            source_interface_traps_gigabit_ethernet=self.source_interface_traps_gigabit_ethernet,
            source_interface_traps_hundred_gig_e=self.source_interface_traps_hundred_gig_e,
            source_interface_traps_loopback=self.source_interface_traps_loopback,
            source_interface_traps_port_channel=self.source_interface_traps_port_channel,
            source_interface_traps_port_channel_subinterface=self.source_interface_traps_port_channel_subinterface,
            source_interface_traps_ten_gigabit_ethernet=self.source_interface_traps_ten_gigabit_ethernet,
            source_interface_traps_vlan=self.source_interface_traps_vlan,
            system_shutdown=self.system_shutdown,
            trap_source_forty_gigabit_ethernet=self.trap_source_forty_gigabit_ethernet,
            trap_source_gigabit_ethernet=self.trap_source_gigabit_ethernet,
            trap_source_hundred_gig_e=self.trap_source_hundred_gig_e,
            trap_source_loopback=self.trap_source_loopback,
            trap_source_port_channel=self.trap_source_port_channel,
            trap_source_port_channel_subinterface=self.trap_source_port_channel_subinterface,
            trap_source_ten_gigabit_ethernet=self.trap_source_ten_gigabit_ethernet,
            trap_source_vlan=self.trap_source_vlan,
            views=self.views)


def get_snmp_server(device: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSnmpServerResult:
    """
    This data source can read the SNMP Server configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.get_snmp_server()
    ```


    :param str device: A device name from the provider configuration.
    """
    __args__ = dict()
    __args__['device'] = device
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:index/getSnmpServer:getSnmpServer', __args__, opts=opts, typ=GetSnmpServerResult).value

    return AwaitableGetSnmpServerResult(
        chassis_id=pulumi.get(__ret__, 'chassis_id'),
        contact=pulumi.get(__ret__, 'contact'),
        contexts=pulumi.get(__ret__, 'contexts'),
        device=pulumi.get(__ret__, 'device'),
        enable_informs=pulumi.get(__ret__, 'enable_informs'),
        enable_logging_getop=pulumi.get(__ret__, 'enable_logging_getop'),
        enable_logging_setop=pulumi.get(__ret__, 'enable_logging_setop'),
        enable_traps=pulumi.get(__ret__, 'enable_traps'),
        enable_traps_auth_framework_sec_violation=pulumi.get(__ret__, 'enable_traps_auth_framework_sec_violation'),
        enable_traps_bfd=pulumi.get(__ret__, 'enable_traps_bfd'),
        enable_traps_bgp_cbgp2=pulumi.get(__ret__, 'enable_traps_bgp_cbgp2'),
        enable_traps_bridge_newroot=pulumi.get(__ret__, 'enable_traps_bridge_newroot'),
        enable_traps_bridge_topologychange=pulumi.get(__ret__, 'enable_traps_bridge_topologychange'),
        enable_traps_bulkstat_collection=pulumi.get(__ret__, 'enable_traps_bulkstat_collection'),
        enable_traps_bulkstat_transfer=pulumi.get(__ret__, 'enable_traps_bulkstat_transfer'),
        enable_traps_call_home_message_send_fail=pulumi.get(__ret__, 'enable_traps_call_home_message_send_fail'),
        enable_traps_call_home_server_fail=pulumi.get(__ret__, 'enable_traps_call_home_server_fail'),
        enable_traps_cef_inconsistency=pulumi.get(__ret__, 'enable_traps_cef_inconsistency'),
        enable_traps_cef_peer_fib_state_change=pulumi.get(__ret__, 'enable_traps_cef_peer_fib_state_change'),
        enable_traps_cef_peer_state_change=pulumi.get(__ret__, 'enable_traps_cef_peer_state_change'),
        enable_traps_cef_resource_failure=pulumi.get(__ret__, 'enable_traps_cef_resource_failure'),
        enable_traps_config=pulumi.get(__ret__, 'enable_traps_config'),
        enable_traps_config_copy=pulumi.get(__ret__, 'enable_traps_config_copy'),
        enable_traps_config_ctid=pulumi.get(__ret__, 'enable_traps_config_ctid'),
        enable_traps_cpu_threshold=pulumi.get(__ret__, 'enable_traps_cpu_threshold'),
        enable_traps_dhcp=pulumi.get(__ret__, 'enable_traps_dhcp'),
        enable_traps_eigrp=pulumi.get(__ret__, 'enable_traps_eigrp'),
        enable_traps_energywise=pulumi.get(__ret__, 'enable_traps_energywise'),
        enable_traps_entity=pulumi.get(__ret__, 'enable_traps_entity'),
        enable_traps_entity_diag_boot_up_fail=pulumi.get(__ret__, 'enable_traps_entity_diag_boot_up_fail'),
        enable_traps_entity_diag_hm_test_recover=pulumi.get(__ret__, 'enable_traps_entity_diag_hm_test_recover'),
        enable_traps_entity_diag_hm_thresh_reached=pulumi.get(__ret__, 'enable_traps_entity_diag_hm_thresh_reached'),
        enable_traps_entity_diag_scheduled_test_fail=pulumi.get(__ret__, 'enable_traps_entity_diag_scheduled_test_fail'),
        enable_traps_entity_perf_throughput_notif=pulumi.get(__ret__, 'enable_traps_entity_perf_throughput_notif'),
        enable_traps_envmon=pulumi.get(__ret__, 'enable_traps_envmon'),
        enable_traps_errdisable=pulumi.get(__ret__, 'enable_traps_errdisable'),
        enable_traps_event_manager=pulumi.get(__ret__, 'enable_traps_event_manager'),
        enable_traps_fast_reroute_protected=pulumi.get(__ret__, 'enable_traps_fast_reroute_protected'),
        enable_traps_flash_insertion=pulumi.get(__ret__, 'enable_traps_flash_insertion'),
        enable_traps_flash_lowspace=pulumi.get(__ret__, 'enable_traps_flash_lowspace'),
        enable_traps_flash_removal=pulumi.get(__ret__, 'enable_traps_flash_removal'),
        enable_traps_flowmon=pulumi.get(__ret__, 'enable_traps_flowmon'),
        enable_traps_fru_ctrl=pulumi.get(__ret__, 'enable_traps_fru_ctrl'),
        enable_traps_hsrp=pulumi.get(__ret__, 'enable_traps_hsrp'),
        enable_traps_ike_policy_add=pulumi.get(__ret__, 'enable_traps_ike_policy_add'),
        enable_traps_ike_policy_delete=pulumi.get(__ret__, 'enable_traps_ike_policy_delete'),
        enable_traps_ike_tunnel_start=pulumi.get(__ret__, 'enable_traps_ike_tunnel_start'),
        enable_traps_ike_tunnel_stop=pulumi.get(__ret__, 'enable_traps_ike_tunnel_stop'),
        enable_traps_ipmulticast=pulumi.get(__ret__, 'enable_traps_ipmulticast'),
        enable_traps_ipsec_cryptomap_add=pulumi.get(__ret__, 'enable_traps_ipsec_cryptomap_add'),
        enable_traps_ipsec_cryptomap_attach=pulumi.get(__ret__, 'enable_traps_ipsec_cryptomap_attach'),
        enable_traps_ipsec_cryptomap_delete=pulumi.get(__ret__, 'enable_traps_ipsec_cryptomap_delete'),
        enable_traps_ipsec_cryptomap_detach=pulumi.get(__ret__, 'enable_traps_ipsec_cryptomap_detach'),
        enable_traps_ipsec_too_many_sas=pulumi.get(__ret__, 'enable_traps_ipsec_too_many_sas'),
        enable_traps_ipsec_tunnel_start=pulumi.get(__ret__, 'enable_traps_ipsec_tunnel_start'),
        enable_traps_ipsec_tunnel_stop=pulumi.get(__ret__, 'enable_traps_ipsec_tunnel_stop'),
        enable_traps_ipsla=pulumi.get(__ret__, 'enable_traps_ipsla'),
        enable_traps_isis=pulumi.get(__ret__, 'enable_traps_isis'),
        enable_traps_license=pulumi.get(__ret__, 'enable_traps_license'),
        enable_traps_local_auth=pulumi.get(__ret__, 'enable_traps_local_auth'),
        enable_traps_mac_notification_change=pulumi.get(__ret__, 'enable_traps_mac_notification_change'),
        enable_traps_mac_notification_move=pulumi.get(__ret__, 'enable_traps_mac_notification_move'),
        enable_traps_mac_notification_threshold=pulumi.get(__ret__, 'enable_traps_mac_notification_threshold'),
        enable_traps_memory_bufferpeak=pulumi.get(__ret__, 'enable_traps_memory_bufferpeak'),
        enable_traps_mpls_ldp=pulumi.get(__ret__, 'enable_traps_mpls_ldp'),
        enable_traps_mpls_rfc_ldp=pulumi.get(__ret__, 'enable_traps_mpls_rfc_ldp'),
        enable_traps_mpls_traffic_eng=pulumi.get(__ret__, 'enable_traps_mpls_traffic_eng'),
        enable_traps_mpls_vpn=pulumi.get(__ret__, 'enable_traps_mpls_vpn'),
        enable_traps_msdp=pulumi.get(__ret__, 'enable_traps_msdp'),
        enable_traps_nhrp_nhc=pulumi.get(__ret__, 'enable_traps_nhrp_nhc'),
        enable_traps_nhrp_nhp=pulumi.get(__ret__, 'enable_traps_nhrp_nhp'),
        enable_traps_nhrp_nhs=pulumi.get(__ret__, 'enable_traps_nhrp_nhs'),
        enable_traps_nhrp_quota_exceeded=pulumi.get(__ret__, 'enable_traps_nhrp_quota_exceeded'),
        enable_traps_ospf_config_errors=pulumi.get(__ret__, 'enable_traps_ospf_config_errors'),
        enable_traps_ospf_config_lsa=pulumi.get(__ret__, 'enable_traps_ospf_config_lsa'),
        enable_traps_ospf_config_retransmit=pulumi.get(__ret__, 'enable_traps_ospf_config_retransmit'),
        enable_traps_ospf_config_state_change=pulumi.get(__ret__, 'enable_traps_ospf_config_state_change'),
        enable_traps_ospf_errors_enable=pulumi.get(__ret__, 'enable_traps_ospf_errors_enable'),
        enable_traps_ospf_lsa_enable=pulumi.get(__ret__, 'enable_traps_ospf_lsa_enable'),
        enable_traps_ospf_nssa_trans_change=pulumi.get(__ret__, 'enable_traps_ospf_nssa_trans_change'),
        enable_traps_ospf_retransmit_enable=pulumi.get(__ret__, 'enable_traps_ospf_retransmit_enable'),
        enable_traps_ospf_shamlink_interface=pulumi.get(__ret__, 'enable_traps_ospf_shamlink_interface'),
        enable_traps_ospf_shamlink_neighbor=pulumi.get(__ret__, 'enable_traps_ospf_shamlink_neighbor'),
        enable_traps_ospfv3_config_errors=pulumi.get(__ret__, 'enable_traps_ospfv3_config_errors'),
        enable_traps_ospfv3_config_state_change=pulumi.get(__ret__, 'enable_traps_ospfv3_config_state_change'),
        enable_traps_pim_invalid_pim_message=pulumi.get(__ret__, 'enable_traps_pim_invalid_pim_message'),
        enable_traps_pim_neighbor_change=pulumi.get(__ret__, 'enable_traps_pim_neighbor_change'),
        enable_traps_pim_rp_mapping_change=pulumi.get(__ret__, 'enable_traps_pim_rp_mapping_change'),
        enable_traps_port_security=pulumi.get(__ret__, 'enable_traps_port_security'),
        enable_traps_power_ethernet_group=pulumi.get(__ret__, 'enable_traps_power_ethernet_group'),
        enable_traps_power_ethernet_police=pulumi.get(__ret__, 'enable_traps_power_ethernet_police'),
        enable_traps_pw_vc=pulumi.get(__ret__, 'enable_traps_pw_vc'),
        enable_traps_rep=pulumi.get(__ret__, 'enable_traps_rep'),
        enable_traps_rf=pulumi.get(__ret__, 'enable_traps_rf'),
        enable_traps_smart_license=pulumi.get(__ret__, 'enable_traps_smart_license'),
        enable_traps_snmp_authentication=pulumi.get(__ret__, 'enable_traps_snmp_authentication'),
        enable_traps_snmp_coldstart=pulumi.get(__ret__, 'enable_traps_snmp_coldstart'),
        enable_traps_snmp_linkdown=pulumi.get(__ret__, 'enable_traps_snmp_linkdown'),
        enable_traps_snmp_linkup=pulumi.get(__ret__, 'enable_traps_snmp_linkup'),
        enable_traps_snmp_warmstart=pulumi.get(__ret__, 'enable_traps_snmp_warmstart'),
        enable_traps_stackwise=pulumi.get(__ret__, 'enable_traps_stackwise'),
        enable_traps_stpx_inconsistency=pulumi.get(__ret__, 'enable_traps_stpx_inconsistency'),
        enable_traps_stpx_loop_inconsistency=pulumi.get(__ret__, 'enable_traps_stpx_loop_inconsistency'),
        enable_traps_stpx_root_inconsistency=pulumi.get(__ret__, 'enable_traps_stpx_root_inconsistency'),
        enable_traps_syslog=pulumi.get(__ret__, 'enable_traps_syslog'),
        enable_traps_transceiver_all=pulumi.get(__ret__, 'enable_traps_transceiver_all'),
        enable_traps_tty=pulumi.get(__ret__, 'enable_traps_tty'),
        enable_traps_udld_link_fail_rpt=pulumi.get(__ret__, 'enable_traps_udld_link_fail_rpt'),
        enable_traps_udld_status_change=pulumi.get(__ret__, 'enable_traps_udld_status_change'),
        enable_traps_vlan_membership=pulumi.get(__ret__, 'enable_traps_vlan_membership'),
        enable_traps_vlancreate=pulumi.get(__ret__, 'enable_traps_vlancreate'),
        enable_traps_vlandelete=pulumi.get(__ret__, 'enable_traps_vlandelete'),
        enable_traps_vrfmib_vnet_trunk_down=pulumi.get(__ret__, 'enable_traps_vrfmib_vnet_trunk_down'),
        enable_traps_vrfmib_vnet_trunk_up=pulumi.get(__ret__, 'enable_traps_vrfmib_vnet_trunk_up'),
        enable_traps_vrfmib_vrf_down=pulumi.get(__ret__, 'enable_traps_vrfmib_vrf_down'),
        enable_traps_vrfmib_vrf_up=pulumi.get(__ret__, 'enable_traps_vrfmib_vrf_up'),
        enable_traps_vtp=pulumi.get(__ret__, 'enable_traps_vtp'),
        hosts=pulumi.get(__ret__, 'hosts'),
        id=pulumi.get(__ret__, 'id'),
        ifindex_persist=pulumi.get(__ret__, 'ifindex_persist'),
        location=pulumi.get(__ret__, 'location'),
        packetsize=pulumi.get(__ret__, 'packetsize'),
        queue_length=pulumi.get(__ret__, 'queue_length'),
        snmp_communities=pulumi.get(__ret__, 'snmp_communities'),
        source_interface_informs_forty_gigabit_ethernet=pulumi.get(__ret__, 'source_interface_informs_forty_gigabit_ethernet'),
        source_interface_informs_gigabit_ethernet=pulumi.get(__ret__, 'source_interface_informs_gigabit_ethernet'),
        source_interface_informs_hundred_gig_e=pulumi.get(__ret__, 'source_interface_informs_hundred_gig_e'),
        source_interface_informs_loopback=pulumi.get(__ret__, 'source_interface_informs_loopback'),
        source_interface_informs_port_channel=pulumi.get(__ret__, 'source_interface_informs_port_channel'),
        source_interface_informs_port_channel_subinterface=pulumi.get(__ret__, 'source_interface_informs_port_channel_subinterface'),
        source_interface_informs_ten_gigabit_ethernet=pulumi.get(__ret__, 'source_interface_informs_ten_gigabit_ethernet'),
        source_interface_informs_vlan=pulumi.get(__ret__, 'source_interface_informs_vlan'),
        source_interface_traps_forty_gigabit_ethernet=pulumi.get(__ret__, 'source_interface_traps_forty_gigabit_ethernet'),
        source_interface_traps_gigabit_ethernet=pulumi.get(__ret__, 'source_interface_traps_gigabit_ethernet'),
        source_interface_traps_hundred_gig_e=pulumi.get(__ret__, 'source_interface_traps_hundred_gig_e'),
        source_interface_traps_loopback=pulumi.get(__ret__, 'source_interface_traps_loopback'),
        source_interface_traps_port_channel=pulumi.get(__ret__, 'source_interface_traps_port_channel'),
        source_interface_traps_port_channel_subinterface=pulumi.get(__ret__, 'source_interface_traps_port_channel_subinterface'),
        source_interface_traps_ten_gigabit_ethernet=pulumi.get(__ret__, 'source_interface_traps_ten_gigabit_ethernet'),
        source_interface_traps_vlan=pulumi.get(__ret__, 'source_interface_traps_vlan'),
        system_shutdown=pulumi.get(__ret__, 'system_shutdown'),
        trap_source_forty_gigabit_ethernet=pulumi.get(__ret__, 'trap_source_forty_gigabit_ethernet'),
        trap_source_gigabit_ethernet=pulumi.get(__ret__, 'trap_source_gigabit_ethernet'),
        trap_source_hundred_gig_e=pulumi.get(__ret__, 'trap_source_hundred_gig_e'),
        trap_source_loopback=pulumi.get(__ret__, 'trap_source_loopback'),
        trap_source_port_channel=pulumi.get(__ret__, 'trap_source_port_channel'),
        trap_source_port_channel_subinterface=pulumi.get(__ret__, 'trap_source_port_channel_subinterface'),
        trap_source_ten_gigabit_ethernet=pulumi.get(__ret__, 'trap_source_ten_gigabit_ethernet'),
        trap_source_vlan=pulumi.get(__ret__, 'trap_source_vlan'),
        views=pulumi.get(__ret__, 'views'))


@_utilities.lift_output_func(get_snmp_server)
def get_snmp_server_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSnmpServerResult]:
    """
    This data source can read the SNMP Server configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.get_snmp_server()
    ```


    :param str device: A device name from the provider configuration.
    """
    ...
