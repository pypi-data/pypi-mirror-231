# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['VlanConfigurationArgs', 'VlanConfiguration']

@pulumi.input_type
class VlanConfigurationArgs:
    def __init__(__self__, *,
                 vlan_id: pulumi.Input[int],
                 access_vfi: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 evpn_instance: Optional[pulumi.Input[int]] = None,
                 evpn_instance_vni: Optional[pulumi.Input[int]] = None,
                 vni: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a VlanConfiguration resource.
        :param pulumi.Input[int] vlan_id: VLAN ID List Eg. 1-10,15 - Range: `1`-`4094`
        :param pulumi.Input[str] access_vfi: Enter VFI name
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] evpn_instance: - Range: `1`-`65535`
        :param pulumi.Input[int] evpn_instance_vni: VxLAN VNI value - Range: `4096`-`16777215`
        :param pulumi.Input[int] vni: VxLAN VNI value - Range: `4096`-`16777215`
        """
        pulumi.set(__self__, "vlan_id", vlan_id)
        if access_vfi is not None:
            pulumi.set(__self__, "access_vfi", access_vfi)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if evpn_instance is not None:
            pulumi.set(__self__, "evpn_instance", evpn_instance)
        if evpn_instance_vni is not None:
            pulumi.set(__self__, "evpn_instance_vni", evpn_instance_vni)
        if vni is not None:
            pulumi.set(__self__, "vni", vni)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> pulumi.Input[int]:
        """
        VLAN ID List Eg. 1-10,15 - Range: `1`-`4094`
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "vlan_id", value)

    @property
    @pulumi.getter(name="accessVfi")
    def access_vfi(self) -> Optional[pulumi.Input[str]]:
        """
        Enter VFI name
        """
        return pulumi.get(self, "access_vfi")

    @access_vfi.setter
    def access_vfi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_vfi", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="evpnInstance")
    def evpn_instance(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `1`-`65535`
        """
        return pulumi.get(self, "evpn_instance")

    @evpn_instance.setter
    def evpn_instance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "evpn_instance", value)

    @property
    @pulumi.getter(name="evpnInstanceVni")
    def evpn_instance_vni(self) -> Optional[pulumi.Input[int]]:
        """
        VxLAN VNI value - Range: `4096`-`16777215`
        """
        return pulumi.get(self, "evpn_instance_vni")

    @evpn_instance_vni.setter
    def evpn_instance_vni(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "evpn_instance_vni", value)

    @property
    @pulumi.getter
    def vni(self) -> Optional[pulumi.Input[int]]:
        """
        VxLAN VNI value - Range: `4096`-`16777215`
        """
        return pulumi.get(self, "vni")

    @vni.setter
    def vni(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vni", value)


@pulumi.input_type
class _VlanConfigurationState:
    def __init__(__self__, *,
                 access_vfi: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 evpn_instance: Optional[pulumi.Input[int]] = None,
                 evpn_instance_vni: Optional[pulumi.Input[int]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 vni: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering VlanConfiguration resources.
        :param pulumi.Input[str] access_vfi: Enter VFI name
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] evpn_instance: - Range: `1`-`65535`
        :param pulumi.Input[int] evpn_instance_vni: VxLAN VNI value - Range: `4096`-`16777215`
        :param pulumi.Input[int] vlan_id: VLAN ID List Eg. 1-10,15 - Range: `1`-`4094`
        :param pulumi.Input[int] vni: VxLAN VNI value - Range: `4096`-`16777215`
        """
        if access_vfi is not None:
            pulumi.set(__self__, "access_vfi", access_vfi)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if evpn_instance is not None:
            pulumi.set(__self__, "evpn_instance", evpn_instance)
        if evpn_instance_vni is not None:
            pulumi.set(__self__, "evpn_instance_vni", evpn_instance_vni)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)
        if vni is not None:
            pulumi.set(__self__, "vni", vni)

    @property
    @pulumi.getter(name="accessVfi")
    def access_vfi(self) -> Optional[pulumi.Input[str]]:
        """
        Enter VFI name
        """
        return pulumi.get(self, "access_vfi")

    @access_vfi.setter
    def access_vfi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_vfi", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="evpnInstance")
    def evpn_instance(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `1`-`65535`
        """
        return pulumi.get(self, "evpn_instance")

    @evpn_instance.setter
    def evpn_instance(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "evpn_instance", value)

    @property
    @pulumi.getter(name="evpnInstanceVni")
    def evpn_instance_vni(self) -> Optional[pulumi.Input[int]]:
        """
        VxLAN VNI value - Range: `4096`-`16777215`
        """
        return pulumi.get(self, "evpn_instance_vni")

    @evpn_instance_vni.setter
    def evpn_instance_vni(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "evpn_instance_vni", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN ID List Eg. 1-10,15 - Range: `1`-`4094`
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)

    @property
    @pulumi.getter
    def vni(self) -> Optional[pulumi.Input[int]]:
        """
        VxLAN VNI value - Range: `4096`-`16777215`
        """
        return pulumi.get(self, "vni")

    @vni.setter
    def vni(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vni", value)


class VlanConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_vfi: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 evpn_instance: Optional[pulumi.Input[int]] = None,
                 evpn_instance_vni: Optional[pulumi.Input[int]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 vni: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        This resource can manage the VLAN Configuration configuration.

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_iosxe as iosxe

        example = iosxe.VlanConfiguration("example",
            evpn_instance=123,
            evpn_instance_vni=10123,
            vlan_id=123)
        ```

        ## Import

        ```sh
         $ pulumi import iosxe:index/vlanConfiguration:VlanConfiguration example "Cisco-IOS-XE-native:native/vlan/Cisco-IOS-XE-vlan:configuration=123"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_vfi: Enter VFI name
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] evpn_instance: - Range: `1`-`65535`
        :param pulumi.Input[int] evpn_instance_vni: VxLAN VNI value - Range: `4096`-`16777215`
        :param pulumi.Input[int] vlan_id: VLAN ID List Eg. 1-10,15 - Range: `1`-`4094`
        :param pulumi.Input[int] vni: VxLAN VNI value - Range: `4096`-`16777215`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VlanConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the VLAN Configuration configuration.

        ## Example Usage

        ```python
        import pulumi
        import lbrlabs_pulumi_iosxe as iosxe

        example = iosxe.VlanConfiguration("example",
            evpn_instance=123,
            evpn_instance_vni=10123,
            vlan_id=123)
        ```

        ## Import

        ```sh
         $ pulumi import iosxe:index/vlanConfiguration:VlanConfiguration example "Cisco-IOS-XE-native:native/vlan/Cisco-IOS-XE-vlan:configuration=123"
        ```

        :param str resource_name: The name of the resource.
        :param VlanConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VlanConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_vfi: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 evpn_instance: Optional[pulumi.Input[int]] = None,
                 evpn_instance_vni: Optional[pulumi.Input[int]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 vni: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VlanConfigurationArgs.__new__(VlanConfigurationArgs)

            __props__.__dict__["access_vfi"] = access_vfi
            __props__.__dict__["device"] = device
            __props__.__dict__["evpn_instance"] = evpn_instance
            __props__.__dict__["evpn_instance_vni"] = evpn_instance_vni
            if vlan_id is None and not opts.urn:
                raise TypeError("Missing required property 'vlan_id'")
            __props__.__dict__["vlan_id"] = vlan_id
            __props__.__dict__["vni"] = vni
        super(VlanConfiguration, __self__).__init__(
            'iosxe:index/vlanConfiguration:VlanConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_vfi: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            evpn_instance: Optional[pulumi.Input[int]] = None,
            evpn_instance_vni: Optional[pulumi.Input[int]] = None,
            vlan_id: Optional[pulumi.Input[int]] = None,
            vni: Optional[pulumi.Input[int]] = None) -> 'VlanConfiguration':
        """
        Get an existing VlanConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_vfi: Enter VFI name
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[int] evpn_instance: - Range: `1`-`65535`
        :param pulumi.Input[int] evpn_instance_vni: VxLAN VNI value - Range: `4096`-`16777215`
        :param pulumi.Input[int] vlan_id: VLAN ID List Eg. 1-10,15 - Range: `1`-`4094`
        :param pulumi.Input[int] vni: VxLAN VNI value - Range: `4096`-`16777215`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VlanConfigurationState.__new__(_VlanConfigurationState)

        __props__.__dict__["access_vfi"] = access_vfi
        __props__.__dict__["device"] = device
        __props__.__dict__["evpn_instance"] = evpn_instance
        __props__.__dict__["evpn_instance_vni"] = evpn_instance_vni
        __props__.__dict__["vlan_id"] = vlan_id
        __props__.__dict__["vni"] = vni
        return VlanConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessVfi")
    def access_vfi(self) -> pulumi.Output[Optional[str]]:
        """
        Enter VFI name
        """
        return pulumi.get(self, "access_vfi")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="evpnInstance")
    def evpn_instance(self) -> pulumi.Output[Optional[int]]:
        """
        - Range: `1`-`65535`
        """
        return pulumi.get(self, "evpn_instance")

    @property
    @pulumi.getter(name="evpnInstanceVni")
    def evpn_instance_vni(self) -> pulumi.Output[Optional[int]]:
        """
        VxLAN VNI value - Range: `4096`-`16777215`
        """
        return pulumi.get(self, "evpn_instance_vni")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> pulumi.Output[int]:
        """
        VLAN ID List Eg. 1-10,15 - Range: `1`-`4094`
        """
        return pulumi.get(self, "vlan_id")

    @property
    @pulumi.getter
    def vni(self) -> pulumi.Output[Optional[int]]:
        """
        VxLAN VNI value - Range: `4096`-`16777215`
        """
        return pulumi.get(self, "vni")

