# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetErrdisableResult',
    'AwaitableGetErrdisableResult',
    'get_errdisable',
    'get_errdisable_output',
]

@pulumi.output_type
class GetErrdisableResult:
    """
    A collection of values returned by getErrdisable.
    """
    def __init__(__self__, detect_cause_all=None, detect_cause_arp_inspection=None, detect_cause_bpduguard=None, detect_cause_dhcp_rate_limit=None, detect_cause_dtp_flap=None, detect_cause_gbic_invalid=None, detect_cause_inline_power=None, detect_cause_l2ptguard=None, detect_cause_link_flap=None, detect_cause_loopback=None, detect_cause_loopdetect=None, detect_cause_mlacp_minlink=None, detect_cause_pagp_flap=None, detect_cause_pppoe_ia_rate_limit=None, detect_cause_security_violation_shutdown_vlan=None, detect_cause_sfp_config_mismatch=None, detect_cause_small_frame=None, device=None, flap_setting_cause_dtp_flap_max_flaps=None, flap_setting_cause_dtp_flap_time=None, flap_setting_cause_link_flap_max_flaps=None, flap_setting_cause_link_flap_time=None, flap_setting_cause_pagp_flap_max_flaps=None, flap_setting_cause_pagp_flap_time=None, id=None, recovery_cause_all=None, recovery_cause_arp_inspection=None, recovery_cause_bpduguard=None, recovery_cause_channel_misconfig=None, recovery_cause_dhcp_rate_limit=None, recovery_cause_dtp_flap=None, recovery_cause_gbic_invalid=None, recovery_cause_inline_power=None, recovery_cause_l2ptguard=None, recovery_cause_link_flap=None, recovery_cause_link_monitor_failure=None, recovery_cause_loopback=None, recovery_cause_loopdetect=None, recovery_cause_mac_limit=None, recovery_cause_mlacp_minlink=None, recovery_cause_pagp_flap=None, recovery_cause_port_mode_failure=None, recovery_cause_pppoe_ia_rate_limit=None, recovery_cause_psecure_violation=None, recovery_cause_psp=None, recovery_cause_security_violation=None, recovery_cause_sfp_config_mismatch=None, recovery_cause_small_frame=None, recovery_cause_storm_control=None, recovery_cause_udld=None, recovery_cause_unicast_flood=None, recovery_cause_vmps=None, recovery_interval=None):
        if detect_cause_all and not isinstance(detect_cause_all, bool):
            raise TypeError("Expected argument 'detect_cause_all' to be a bool")
        pulumi.set(__self__, "detect_cause_all", detect_cause_all)
        if detect_cause_arp_inspection and not isinstance(detect_cause_arp_inspection, bool):
            raise TypeError("Expected argument 'detect_cause_arp_inspection' to be a bool")
        pulumi.set(__self__, "detect_cause_arp_inspection", detect_cause_arp_inspection)
        if detect_cause_bpduguard and not isinstance(detect_cause_bpduguard, bool):
            raise TypeError("Expected argument 'detect_cause_bpduguard' to be a bool")
        pulumi.set(__self__, "detect_cause_bpduguard", detect_cause_bpduguard)
        if detect_cause_dhcp_rate_limit and not isinstance(detect_cause_dhcp_rate_limit, bool):
            raise TypeError("Expected argument 'detect_cause_dhcp_rate_limit' to be a bool")
        pulumi.set(__self__, "detect_cause_dhcp_rate_limit", detect_cause_dhcp_rate_limit)
        if detect_cause_dtp_flap and not isinstance(detect_cause_dtp_flap, bool):
            raise TypeError("Expected argument 'detect_cause_dtp_flap' to be a bool")
        pulumi.set(__self__, "detect_cause_dtp_flap", detect_cause_dtp_flap)
        if detect_cause_gbic_invalid and not isinstance(detect_cause_gbic_invalid, bool):
            raise TypeError("Expected argument 'detect_cause_gbic_invalid' to be a bool")
        pulumi.set(__self__, "detect_cause_gbic_invalid", detect_cause_gbic_invalid)
        if detect_cause_inline_power and not isinstance(detect_cause_inline_power, bool):
            raise TypeError("Expected argument 'detect_cause_inline_power' to be a bool")
        pulumi.set(__self__, "detect_cause_inline_power", detect_cause_inline_power)
        if detect_cause_l2ptguard and not isinstance(detect_cause_l2ptguard, bool):
            raise TypeError("Expected argument 'detect_cause_l2ptguard' to be a bool")
        pulumi.set(__self__, "detect_cause_l2ptguard", detect_cause_l2ptguard)
        if detect_cause_link_flap and not isinstance(detect_cause_link_flap, bool):
            raise TypeError("Expected argument 'detect_cause_link_flap' to be a bool")
        pulumi.set(__self__, "detect_cause_link_flap", detect_cause_link_flap)
        if detect_cause_loopback and not isinstance(detect_cause_loopback, bool):
            raise TypeError("Expected argument 'detect_cause_loopback' to be a bool")
        pulumi.set(__self__, "detect_cause_loopback", detect_cause_loopback)
        if detect_cause_loopdetect and not isinstance(detect_cause_loopdetect, bool):
            raise TypeError("Expected argument 'detect_cause_loopdetect' to be a bool")
        pulumi.set(__self__, "detect_cause_loopdetect", detect_cause_loopdetect)
        if detect_cause_mlacp_minlink and not isinstance(detect_cause_mlacp_minlink, bool):
            raise TypeError("Expected argument 'detect_cause_mlacp_minlink' to be a bool")
        pulumi.set(__self__, "detect_cause_mlacp_minlink", detect_cause_mlacp_minlink)
        if detect_cause_pagp_flap and not isinstance(detect_cause_pagp_flap, bool):
            raise TypeError("Expected argument 'detect_cause_pagp_flap' to be a bool")
        pulumi.set(__self__, "detect_cause_pagp_flap", detect_cause_pagp_flap)
        if detect_cause_pppoe_ia_rate_limit and not isinstance(detect_cause_pppoe_ia_rate_limit, bool):
            raise TypeError("Expected argument 'detect_cause_pppoe_ia_rate_limit' to be a bool")
        pulumi.set(__self__, "detect_cause_pppoe_ia_rate_limit", detect_cause_pppoe_ia_rate_limit)
        if detect_cause_security_violation_shutdown_vlan and not isinstance(detect_cause_security_violation_shutdown_vlan, bool):
            raise TypeError("Expected argument 'detect_cause_security_violation_shutdown_vlan' to be a bool")
        pulumi.set(__self__, "detect_cause_security_violation_shutdown_vlan", detect_cause_security_violation_shutdown_vlan)
        if detect_cause_sfp_config_mismatch and not isinstance(detect_cause_sfp_config_mismatch, bool):
            raise TypeError("Expected argument 'detect_cause_sfp_config_mismatch' to be a bool")
        pulumi.set(__self__, "detect_cause_sfp_config_mismatch", detect_cause_sfp_config_mismatch)
        if detect_cause_small_frame and not isinstance(detect_cause_small_frame, bool):
            raise TypeError("Expected argument 'detect_cause_small_frame' to be a bool")
        pulumi.set(__self__, "detect_cause_small_frame", detect_cause_small_frame)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if flap_setting_cause_dtp_flap_max_flaps and not isinstance(flap_setting_cause_dtp_flap_max_flaps, int):
            raise TypeError("Expected argument 'flap_setting_cause_dtp_flap_max_flaps' to be a int")
        pulumi.set(__self__, "flap_setting_cause_dtp_flap_max_flaps", flap_setting_cause_dtp_flap_max_flaps)
        if flap_setting_cause_dtp_flap_time and not isinstance(flap_setting_cause_dtp_flap_time, int):
            raise TypeError("Expected argument 'flap_setting_cause_dtp_flap_time' to be a int")
        pulumi.set(__self__, "flap_setting_cause_dtp_flap_time", flap_setting_cause_dtp_flap_time)
        if flap_setting_cause_link_flap_max_flaps and not isinstance(flap_setting_cause_link_flap_max_flaps, int):
            raise TypeError("Expected argument 'flap_setting_cause_link_flap_max_flaps' to be a int")
        pulumi.set(__self__, "flap_setting_cause_link_flap_max_flaps", flap_setting_cause_link_flap_max_flaps)
        if flap_setting_cause_link_flap_time and not isinstance(flap_setting_cause_link_flap_time, int):
            raise TypeError("Expected argument 'flap_setting_cause_link_flap_time' to be a int")
        pulumi.set(__self__, "flap_setting_cause_link_flap_time", flap_setting_cause_link_flap_time)
        if flap_setting_cause_pagp_flap_max_flaps and not isinstance(flap_setting_cause_pagp_flap_max_flaps, int):
            raise TypeError("Expected argument 'flap_setting_cause_pagp_flap_max_flaps' to be a int")
        pulumi.set(__self__, "flap_setting_cause_pagp_flap_max_flaps", flap_setting_cause_pagp_flap_max_flaps)
        if flap_setting_cause_pagp_flap_time and not isinstance(flap_setting_cause_pagp_flap_time, int):
            raise TypeError("Expected argument 'flap_setting_cause_pagp_flap_time' to be a int")
        pulumi.set(__self__, "flap_setting_cause_pagp_flap_time", flap_setting_cause_pagp_flap_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if recovery_cause_all and not isinstance(recovery_cause_all, bool):
            raise TypeError("Expected argument 'recovery_cause_all' to be a bool")
        pulumi.set(__self__, "recovery_cause_all", recovery_cause_all)
        if recovery_cause_arp_inspection and not isinstance(recovery_cause_arp_inspection, bool):
            raise TypeError("Expected argument 'recovery_cause_arp_inspection' to be a bool")
        pulumi.set(__self__, "recovery_cause_arp_inspection", recovery_cause_arp_inspection)
        if recovery_cause_bpduguard and not isinstance(recovery_cause_bpduguard, bool):
            raise TypeError("Expected argument 'recovery_cause_bpduguard' to be a bool")
        pulumi.set(__self__, "recovery_cause_bpduguard", recovery_cause_bpduguard)
        if recovery_cause_channel_misconfig and not isinstance(recovery_cause_channel_misconfig, bool):
            raise TypeError("Expected argument 'recovery_cause_channel_misconfig' to be a bool")
        pulumi.set(__self__, "recovery_cause_channel_misconfig", recovery_cause_channel_misconfig)
        if recovery_cause_dhcp_rate_limit and not isinstance(recovery_cause_dhcp_rate_limit, bool):
            raise TypeError("Expected argument 'recovery_cause_dhcp_rate_limit' to be a bool")
        pulumi.set(__self__, "recovery_cause_dhcp_rate_limit", recovery_cause_dhcp_rate_limit)
        if recovery_cause_dtp_flap and not isinstance(recovery_cause_dtp_flap, bool):
            raise TypeError("Expected argument 'recovery_cause_dtp_flap' to be a bool")
        pulumi.set(__self__, "recovery_cause_dtp_flap", recovery_cause_dtp_flap)
        if recovery_cause_gbic_invalid and not isinstance(recovery_cause_gbic_invalid, bool):
            raise TypeError("Expected argument 'recovery_cause_gbic_invalid' to be a bool")
        pulumi.set(__self__, "recovery_cause_gbic_invalid", recovery_cause_gbic_invalid)
        if recovery_cause_inline_power and not isinstance(recovery_cause_inline_power, bool):
            raise TypeError("Expected argument 'recovery_cause_inline_power' to be a bool")
        pulumi.set(__self__, "recovery_cause_inline_power", recovery_cause_inline_power)
        if recovery_cause_l2ptguard and not isinstance(recovery_cause_l2ptguard, bool):
            raise TypeError("Expected argument 'recovery_cause_l2ptguard' to be a bool")
        pulumi.set(__self__, "recovery_cause_l2ptguard", recovery_cause_l2ptguard)
        if recovery_cause_link_flap and not isinstance(recovery_cause_link_flap, bool):
            raise TypeError("Expected argument 'recovery_cause_link_flap' to be a bool")
        pulumi.set(__self__, "recovery_cause_link_flap", recovery_cause_link_flap)
        if recovery_cause_link_monitor_failure and not isinstance(recovery_cause_link_monitor_failure, bool):
            raise TypeError("Expected argument 'recovery_cause_link_monitor_failure' to be a bool")
        pulumi.set(__self__, "recovery_cause_link_monitor_failure", recovery_cause_link_monitor_failure)
        if recovery_cause_loopback and not isinstance(recovery_cause_loopback, bool):
            raise TypeError("Expected argument 'recovery_cause_loopback' to be a bool")
        pulumi.set(__self__, "recovery_cause_loopback", recovery_cause_loopback)
        if recovery_cause_loopdetect and not isinstance(recovery_cause_loopdetect, bool):
            raise TypeError("Expected argument 'recovery_cause_loopdetect' to be a bool")
        pulumi.set(__self__, "recovery_cause_loopdetect", recovery_cause_loopdetect)
        if recovery_cause_mac_limit and not isinstance(recovery_cause_mac_limit, bool):
            raise TypeError("Expected argument 'recovery_cause_mac_limit' to be a bool")
        pulumi.set(__self__, "recovery_cause_mac_limit", recovery_cause_mac_limit)
        if recovery_cause_mlacp_minlink and not isinstance(recovery_cause_mlacp_minlink, bool):
            raise TypeError("Expected argument 'recovery_cause_mlacp_minlink' to be a bool")
        pulumi.set(__self__, "recovery_cause_mlacp_minlink", recovery_cause_mlacp_minlink)
        if recovery_cause_pagp_flap and not isinstance(recovery_cause_pagp_flap, bool):
            raise TypeError("Expected argument 'recovery_cause_pagp_flap' to be a bool")
        pulumi.set(__self__, "recovery_cause_pagp_flap", recovery_cause_pagp_flap)
        if recovery_cause_port_mode_failure and not isinstance(recovery_cause_port_mode_failure, bool):
            raise TypeError("Expected argument 'recovery_cause_port_mode_failure' to be a bool")
        pulumi.set(__self__, "recovery_cause_port_mode_failure", recovery_cause_port_mode_failure)
        if recovery_cause_pppoe_ia_rate_limit and not isinstance(recovery_cause_pppoe_ia_rate_limit, bool):
            raise TypeError("Expected argument 'recovery_cause_pppoe_ia_rate_limit' to be a bool")
        pulumi.set(__self__, "recovery_cause_pppoe_ia_rate_limit", recovery_cause_pppoe_ia_rate_limit)
        if recovery_cause_psecure_violation and not isinstance(recovery_cause_psecure_violation, bool):
            raise TypeError("Expected argument 'recovery_cause_psecure_violation' to be a bool")
        pulumi.set(__self__, "recovery_cause_psecure_violation", recovery_cause_psecure_violation)
        if recovery_cause_psp and not isinstance(recovery_cause_psp, bool):
            raise TypeError("Expected argument 'recovery_cause_psp' to be a bool")
        pulumi.set(__self__, "recovery_cause_psp", recovery_cause_psp)
        if recovery_cause_security_violation and not isinstance(recovery_cause_security_violation, bool):
            raise TypeError("Expected argument 'recovery_cause_security_violation' to be a bool")
        pulumi.set(__self__, "recovery_cause_security_violation", recovery_cause_security_violation)
        if recovery_cause_sfp_config_mismatch and not isinstance(recovery_cause_sfp_config_mismatch, bool):
            raise TypeError("Expected argument 'recovery_cause_sfp_config_mismatch' to be a bool")
        pulumi.set(__self__, "recovery_cause_sfp_config_mismatch", recovery_cause_sfp_config_mismatch)
        if recovery_cause_small_frame and not isinstance(recovery_cause_small_frame, bool):
            raise TypeError("Expected argument 'recovery_cause_small_frame' to be a bool")
        pulumi.set(__self__, "recovery_cause_small_frame", recovery_cause_small_frame)
        if recovery_cause_storm_control and not isinstance(recovery_cause_storm_control, bool):
            raise TypeError("Expected argument 'recovery_cause_storm_control' to be a bool")
        pulumi.set(__self__, "recovery_cause_storm_control", recovery_cause_storm_control)
        if recovery_cause_udld and not isinstance(recovery_cause_udld, bool):
            raise TypeError("Expected argument 'recovery_cause_udld' to be a bool")
        pulumi.set(__self__, "recovery_cause_udld", recovery_cause_udld)
        if recovery_cause_unicast_flood and not isinstance(recovery_cause_unicast_flood, bool):
            raise TypeError("Expected argument 'recovery_cause_unicast_flood' to be a bool")
        pulumi.set(__self__, "recovery_cause_unicast_flood", recovery_cause_unicast_flood)
        if recovery_cause_vmps and not isinstance(recovery_cause_vmps, bool):
            raise TypeError("Expected argument 'recovery_cause_vmps' to be a bool")
        pulumi.set(__self__, "recovery_cause_vmps", recovery_cause_vmps)
        if recovery_interval and not isinstance(recovery_interval, int):
            raise TypeError("Expected argument 'recovery_interval' to be a int")
        pulumi.set(__self__, "recovery_interval", recovery_interval)

    @property
    @pulumi.getter(name="detectCauseAll")
    def detect_cause_all(self) -> bool:
        """
        Enable error detection on all cases
        """
        return pulumi.get(self, "detect_cause_all")

    @property
    @pulumi.getter(name="detectCauseArpInspection")
    def detect_cause_arp_inspection(self) -> bool:
        """
        Enable error detection for arp inspection
        """
        return pulumi.get(self, "detect_cause_arp_inspection")

    @property
    @pulumi.getter(name="detectCauseBpduguard")
    def detect_cause_bpduguard(self) -> bool:
        """
        Enable error detection on bpdu-guard
        """
        return pulumi.get(self, "detect_cause_bpduguard")

    @property
    @pulumi.getter(name="detectCauseDhcpRateLimit")
    def detect_cause_dhcp_rate_limit(self) -> bool:
        """
        Enable error detection on dhcp-rate-limit
        """
        return pulumi.get(self, "detect_cause_dhcp_rate_limit")

    @property
    @pulumi.getter(name="detectCauseDtpFlap")
    def detect_cause_dtp_flap(self) -> bool:
        """
        Enable error detection on dtp-flapping
        """
        return pulumi.get(self, "detect_cause_dtp_flap")

    @property
    @pulumi.getter(name="detectCauseGbicInvalid")
    def detect_cause_gbic_invalid(self) -> bool:
        """
        Enable error detection on gbic-invalid
        """
        return pulumi.get(self, "detect_cause_gbic_invalid")

    @property
    @pulumi.getter(name="detectCauseInlinePower")
    def detect_cause_inline_power(self) -> bool:
        """
        Enable error detection for inline-power
        """
        return pulumi.get(self, "detect_cause_inline_power")

    @property
    @pulumi.getter(name="detectCauseL2ptguard")
    def detect_cause_l2ptguard(self) -> bool:
        """
        Enable timer to recover from l2protocol-tunnel error disable state
        """
        return pulumi.get(self, "detect_cause_l2ptguard")

    @property
    @pulumi.getter(name="detectCauseLinkFlap")
    def detect_cause_link_flap(self) -> bool:
        """
        Enable error detection on linkstate-flapping
        """
        return pulumi.get(self, "detect_cause_link_flap")

    @property
    @pulumi.getter(name="detectCauseLoopback")
    def detect_cause_loopback(self) -> bool:
        """
        Enable error detection on loopback
        """
        return pulumi.get(self, "detect_cause_loopback")

    @property
    @pulumi.getter(name="detectCauseLoopdetect")
    def detect_cause_loopdetect(self) -> bool:
        """
        Enable error detection on loop detect
        """
        return pulumi.get(self, "detect_cause_loopdetect")

    @property
    @pulumi.getter(name="detectCauseMlacpMinlink")
    def detect_cause_mlacp_minlink(self) -> bool:
        return pulumi.get(self, "detect_cause_mlacp_minlink")

    @property
    @pulumi.getter(name="detectCausePagpFlap")
    def detect_cause_pagp_flap(self) -> bool:
        """
        Enable error detection on pagp-flapping
        """
        return pulumi.get(self, "detect_cause_pagp_flap")

    @property
    @pulumi.getter(name="detectCausePppoeIaRateLimit")
    def detect_cause_pppoe_ia_rate_limit(self) -> bool:
        """
        Enable error detection on PPPoE IA rate-limit
        """
        return pulumi.get(self, "detect_cause_pppoe_ia_rate_limit")

    @property
    @pulumi.getter(name="detectCauseSecurityViolationShutdownVlan")
    def detect_cause_security_violation_shutdown_vlan(self) -> bool:
        """
        Shutdown vlan on 802.1x-guard violation
        """
        return pulumi.get(self, "detect_cause_security_violation_shutdown_vlan")

    @property
    @pulumi.getter(name="detectCauseSfpConfigMismatch")
    def detect_cause_sfp_config_mismatch(self) -> bool:
        """
        Enable error detection on SFP config mismatch
        """
        return pulumi.get(self, "detect_cause_sfp_config_mismatch")

    @property
    @pulumi.getter(name="detectCauseSmallFrame")
    def detect_cause_small_frame(self) -> bool:
        """
        Enable error detection on small_frame
        """
        return pulumi.get(self, "detect_cause_small_frame")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="flapSettingCauseDtpFlapMaxFlaps")
    def flap_setting_cause_dtp_flap_max_flaps(self) -> int:
        """
        maximum flaps allowed before setting to errdisable
        """
        return pulumi.get(self, "flap_setting_cause_dtp_flap_max_flaps")

    @property
    @pulumi.getter(name="flapSettingCauseDtpFlapTime")
    def flap_setting_cause_dtp_flap_time(self) -> int:
        """
        time period the flaps are counted
        """
        return pulumi.get(self, "flap_setting_cause_dtp_flap_time")

    @property
    @pulumi.getter(name="flapSettingCauseLinkFlapMaxFlaps")
    def flap_setting_cause_link_flap_max_flaps(self) -> int:
        """
        maximum flaps allowed before setting to errdisable
        """
        return pulumi.get(self, "flap_setting_cause_link_flap_max_flaps")

    @property
    @pulumi.getter(name="flapSettingCauseLinkFlapTime")
    def flap_setting_cause_link_flap_time(self) -> int:
        """
        time period the flaps are counted
        """
        return pulumi.get(self, "flap_setting_cause_link_flap_time")

    @property
    @pulumi.getter(name="flapSettingCausePagpFlapMaxFlaps")
    def flap_setting_cause_pagp_flap_max_flaps(self) -> int:
        """
        maximum flaps allowed before setting to errdisable
        """
        return pulumi.get(self, "flap_setting_cause_pagp_flap_max_flaps")

    @property
    @pulumi.getter(name="flapSettingCausePagpFlapTime")
    def flap_setting_cause_pagp_flap_time(self) -> int:
        """
        time period the flaps are counted
        """
        return pulumi.get(self, "flap_setting_cause_pagp_flap_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The path of the retrieved object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="recoveryCauseAll")
    def recovery_cause_all(self) -> bool:
        """
        Enable timer to recover from all error causes
        """
        return pulumi.get(self, "recovery_cause_all")

    @property
    @pulumi.getter(name="recoveryCauseArpInspection")
    def recovery_cause_arp_inspection(self) -> bool:
        """
        Enable timer to recover from arp inspection error disable state
        """
        return pulumi.get(self, "recovery_cause_arp_inspection")

    @property
    @pulumi.getter(name="recoveryCauseBpduguard")
    def recovery_cause_bpduguard(self) -> bool:
        """
        Enable timer to recover from BPDU Guard error
        """
        return pulumi.get(self, "recovery_cause_bpduguard")

    @property
    @pulumi.getter(name="recoveryCauseChannelMisconfig")
    def recovery_cause_channel_misconfig(self) -> bool:
        """
        (STP)  Enable timer to recover from channel misconfiguration error
        """
        return pulumi.get(self, "recovery_cause_channel_misconfig")

    @property
    @pulumi.getter(name="recoveryCauseDhcpRateLimit")
    def recovery_cause_dhcp_rate_limit(self) -> bool:
        """
        Enable timer to recover from dhcp-rate-limit error
        """
        return pulumi.get(self, "recovery_cause_dhcp_rate_limit")

    @property
    @pulumi.getter(name="recoveryCauseDtpFlap")
    def recovery_cause_dtp_flap(self) -> bool:
        """
        Enable timer to recover from dtp-flap error
        """
        return pulumi.get(self, "recovery_cause_dtp_flap")

    @property
    @pulumi.getter(name="recoveryCauseGbicInvalid")
    def recovery_cause_gbic_invalid(self) -> bool:
        """
        Enable timer to recover from invalid GBIC error
        """
        return pulumi.get(self, "recovery_cause_gbic_invalid")

    @property
    @pulumi.getter(name="recoveryCauseInlinePower")
    def recovery_cause_inline_power(self) -> bool:
        """
        Enable timer to recover from inline-power error
        """
        return pulumi.get(self, "recovery_cause_inline_power")

    @property
    @pulumi.getter(name="recoveryCauseL2ptguard")
    def recovery_cause_l2ptguard(self) -> bool:
        """
        Enable timer to recover from l2protocol-tunnel error disable state
        """
        return pulumi.get(self, "recovery_cause_l2ptguard")

    @property
    @pulumi.getter(name="recoveryCauseLinkFlap")
    def recovery_cause_link_flap(self) -> bool:
        """
        Enable timer to recover from link-flap error
        """
        return pulumi.get(self, "recovery_cause_link_flap")

    @property
    @pulumi.getter(name="recoveryCauseLinkMonitorFailure")
    def recovery_cause_link_monitor_failure(self) -> bool:
        return pulumi.get(self, "recovery_cause_link_monitor_failure")

    @property
    @pulumi.getter(name="recoveryCauseLoopback")
    def recovery_cause_loopback(self) -> bool:
        """
        Enable timer to recover from loopback error
        """
        return pulumi.get(self, "recovery_cause_loopback")

    @property
    @pulumi.getter(name="recoveryCauseLoopdetect")
    def recovery_cause_loopdetect(self) -> bool:
        """
        Enable timer to recover from loop detect error
        """
        return pulumi.get(self, "recovery_cause_loopdetect")

    @property
    @pulumi.getter(name="recoveryCauseMacLimit")
    def recovery_cause_mac_limit(self) -> bool:
        """
        Enable timer to recover from mac limit disable state
        """
        return pulumi.get(self, "recovery_cause_mac_limit")

    @property
    @pulumi.getter(name="recoveryCauseMlacpMinlink")
    def recovery_cause_mlacp_minlink(self) -> bool:
        return pulumi.get(self, "recovery_cause_mlacp_minlink")

    @property
    @pulumi.getter(name="recoveryCausePagpFlap")
    def recovery_cause_pagp_flap(self) -> bool:
        """
        Enable timer to recover from pagp-flap error
        """
        return pulumi.get(self, "recovery_cause_pagp_flap")

    @property
    @pulumi.getter(name="recoveryCausePortModeFailure")
    def recovery_cause_port_mode_failure(self) -> bool:
        """
        Enable timer to recover from port mode change failure
        """
        return pulumi.get(self, "recovery_cause_port_mode_failure")

    @property
    @pulumi.getter(name="recoveryCausePppoeIaRateLimit")
    def recovery_cause_pppoe_ia_rate_limit(self) -> bool:
        """
        Enable timer to recover from PPPoE IA rate-limit error
        """
        return pulumi.get(self, "recovery_cause_pppoe_ia_rate_limit")

    @property
    @pulumi.getter(name="recoveryCausePsecureViolation")
    def recovery_cause_psecure_violation(self) -> bool:
        """
        Enable timer to recover from psecure violation error
        """
        return pulumi.get(self, "recovery_cause_psecure_violation")

    @property
    @pulumi.getter(name="recoveryCausePsp")
    def recovery_cause_psp(self) -> bool:
        return pulumi.get(self, "recovery_cause_psp")

    @property
    @pulumi.getter(name="recoveryCauseSecurityViolation")
    def recovery_cause_security_violation(self) -> bool:
        """
        Enable timer to recover from 802.1x violation error
        """
        return pulumi.get(self, "recovery_cause_security_violation")

    @property
    @pulumi.getter(name="recoveryCauseSfpConfigMismatch")
    def recovery_cause_sfp_config_mismatch(self) -> bool:
        """
        Enable timer to recover from SFP config mismatch error
        """
        return pulumi.get(self, "recovery_cause_sfp_config_mismatch")

    @property
    @pulumi.getter(name="recoveryCauseSmallFrame")
    def recovery_cause_small_frame(self) -> bool:
        """
        Enable timer to recover from small frame error
        """
        return pulumi.get(self, "recovery_cause_small_frame")

    @property
    @pulumi.getter(name="recoveryCauseStormControl")
    def recovery_cause_storm_control(self) -> bool:
        """
        Enable timer to recover from storm-control error
        """
        return pulumi.get(self, "recovery_cause_storm_control")

    @property
    @pulumi.getter(name="recoveryCauseUdld")
    def recovery_cause_udld(self) -> bool:
        """
        Enable timer to recover from udld error
        """
        return pulumi.get(self, "recovery_cause_udld")

    @property
    @pulumi.getter(name="recoveryCauseUnicastFlood")
    def recovery_cause_unicast_flood(self) -> bool:
        return pulumi.get(self, "recovery_cause_unicast_flood")

    @property
    @pulumi.getter(name="recoveryCauseVmps")
    def recovery_cause_vmps(self) -> bool:
        """
        Enable timer to recover from vmps shutdown error
        """
        return pulumi.get(self, "recovery_cause_vmps")

    @property
    @pulumi.getter(name="recoveryInterval")
    def recovery_interval(self) -> int:
        """
        Error disable recovery timer value
        """
        return pulumi.get(self, "recovery_interval")


class AwaitableGetErrdisableResult(GetErrdisableResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetErrdisableResult(
            detect_cause_all=self.detect_cause_all,
            detect_cause_arp_inspection=self.detect_cause_arp_inspection,
            detect_cause_bpduguard=self.detect_cause_bpduguard,
            detect_cause_dhcp_rate_limit=self.detect_cause_dhcp_rate_limit,
            detect_cause_dtp_flap=self.detect_cause_dtp_flap,
            detect_cause_gbic_invalid=self.detect_cause_gbic_invalid,
            detect_cause_inline_power=self.detect_cause_inline_power,
            detect_cause_l2ptguard=self.detect_cause_l2ptguard,
            detect_cause_link_flap=self.detect_cause_link_flap,
            detect_cause_loopback=self.detect_cause_loopback,
            detect_cause_loopdetect=self.detect_cause_loopdetect,
            detect_cause_mlacp_minlink=self.detect_cause_mlacp_minlink,
            detect_cause_pagp_flap=self.detect_cause_pagp_flap,
            detect_cause_pppoe_ia_rate_limit=self.detect_cause_pppoe_ia_rate_limit,
            detect_cause_security_violation_shutdown_vlan=self.detect_cause_security_violation_shutdown_vlan,
            detect_cause_sfp_config_mismatch=self.detect_cause_sfp_config_mismatch,
            detect_cause_small_frame=self.detect_cause_small_frame,
            device=self.device,
            flap_setting_cause_dtp_flap_max_flaps=self.flap_setting_cause_dtp_flap_max_flaps,
            flap_setting_cause_dtp_flap_time=self.flap_setting_cause_dtp_flap_time,
            flap_setting_cause_link_flap_max_flaps=self.flap_setting_cause_link_flap_max_flaps,
            flap_setting_cause_link_flap_time=self.flap_setting_cause_link_flap_time,
            flap_setting_cause_pagp_flap_max_flaps=self.flap_setting_cause_pagp_flap_max_flaps,
            flap_setting_cause_pagp_flap_time=self.flap_setting_cause_pagp_flap_time,
            id=self.id,
            recovery_cause_all=self.recovery_cause_all,
            recovery_cause_arp_inspection=self.recovery_cause_arp_inspection,
            recovery_cause_bpduguard=self.recovery_cause_bpduguard,
            recovery_cause_channel_misconfig=self.recovery_cause_channel_misconfig,
            recovery_cause_dhcp_rate_limit=self.recovery_cause_dhcp_rate_limit,
            recovery_cause_dtp_flap=self.recovery_cause_dtp_flap,
            recovery_cause_gbic_invalid=self.recovery_cause_gbic_invalid,
            recovery_cause_inline_power=self.recovery_cause_inline_power,
            recovery_cause_l2ptguard=self.recovery_cause_l2ptguard,
            recovery_cause_link_flap=self.recovery_cause_link_flap,
            recovery_cause_link_monitor_failure=self.recovery_cause_link_monitor_failure,
            recovery_cause_loopback=self.recovery_cause_loopback,
            recovery_cause_loopdetect=self.recovery_cause_loopdetect,
            recovery_cause_mac_limit=self.recovery_cause_mac_limit,
            recovery_cause_mlacp_minlink=self.recovery_cause_mlacp_minlink,
            recovery_cause_pagp_flap=self.recovery_cause_pagp_flap,
            recovery_cause_port_mode_failure=self.recovery_cause_port_mode_failure,
            recovery_cause_pppoe_ia_rate_limit=self.recovery_cause_pppoe_ia_rate_limit,
            recovery_cause_psecure_violation=self.recovery_cause_psecure_violation,
            recovery_cause_psp=self.recovery_cause_psp,
            recovery_cause_security_violation=self.recovery_cause_security_violation,
            recovery_cause_sfp_config_mismatch=self.recovery_cause_sfp_config_mismatch,
            recovery_cause_small_frame=self.recovery_cause_small_frame,
            recovery_cause_storm_control=self.recovery_cause_storm_control,
            recovery_cause_udld=self.recovery_cause_udld,
            recovery_cause_unicast_flood=self.recovery_cause_unicast_flood,
            recovery_cause_vmps=self.recovery_cause_vmps,
            recovery_interval=self.recovery_interval)


def get_errdisable(device: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetErrdisableResult:
    """
    This data source can read the Errdisable configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.get_errdisable()
    ```


    :param str device: A device name from the provider configuration.
    """
    __args__ = dict()
    __args__['device'] = device
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:index/getErrdisable:getErrdisable', __args__, opts=opts, typ=GetErrdisableResult).value

    return AwaitableGetErrdisableResult(
        detect_cause_all=pulumi.get(__ret__, 'detect_cause_all'),
        detect_cause_arp_inspection=pulumi.get(__ret__, 'detect_cause_arp_inspection'),
        detect_cause_bpduguard=pulumi.get(__ret__, 'detect_cause_bpduguard'),
        detect_cause_dhcp_rate_limit=pulumi.get(__ret__, 'detect_cause_dhcp_rate_limit'),
        detect_cause_dtp_flap=pulumi.get(__ret__, 'detect_cause_dtp_flap'),
        detect_cause_gbic_invalid=pulumi.get(__ret__, 'detect_cause_gbic_invalid'),
        detect_cause_inline_power=pulumi.get(__ret__, 'detect_cause_inline_power'),
        detect_cause_l2ptguard=pulumi.get(__ret__, 'detect_cause_l2ptguard'),
        detect_cause_link_flap=pulumi.get(__ret__, 'detect_cause_link_flap'),
        detect_cause_loopback=pulumi.get(__ret__, 'detect_cause_loopback'),
        detect_cause_loopdetect=pulumi.get(__ret__, 'detect_cause_loopdetect'),
        detect_cause_mlacp_minlink=pulumi.get(__ret__, 'detect_cause_mlacp_minlink'),
        detect_cause_pagp_flap=pulumi.get(__ret__, 'detect_cause_pagp_flap'),
        detect_cause_pppoe_ia_rate_limit=pulumi.get(__ret__, 'detect_cause_pppoe_ia_rate_limit'),
        detect_cause_security_violation_shutdown_vlan=pulumi.get(__ret__, 'detect_cause_security_violation_shutdown_vlan'),
        detect_cause_sfp_config_mismatch=pulumi.get(__ret__, 'detect_cause_sfp_config_mismatch'),
        detect_cause_small_frame=pulumi.get(__ret__, 'detect_cause_small_frame'),
        device=pulumi.get(__ret__, 'device'),
        flap_setting_cause_dtp_flap_max_flaps=pulumi.get(__ret__, 'flap_setting_cause_dtp_flap_max_flaps'),
        flap_setting_cause_dtp_flap_time=pulumi.get(__ret__, 'flap_setting_cause_dtp_flap_time'),
        flap_setting_cause_link_flap_max_flaps=pulumi.get(__ret__, 'flap_setting_cause_link_flap_max_flaps'),
        flap_setting_cause_link_flap_time=pulumi.get(__ret__, 'flap_setting_cause_link_flap_time'),
        flap_setting_cause_pagp_flap_max_flaps=pulumi.get(__ret__, 'flap_setting_cause_pagp_flap_max_flaps'),
        flap_setting_cause_pagp_flap_time=pulumi.get(__ret__, 'flap_setting_cause_pagp_flap_time'),
        id=pulumi.get(__ret__, 'id'),
        recovery_cause_all=pulumi.get(__ret__, 'recovery_cause_all'),
        recovery_cause_arp_inspection=pulumi.get(__ret__, 'recovery_cause_arp_inspection'),
        recovery_cause_bpduguard=pulumi.get(__ret__, 'recovery_cause_bpduguard'),
        recovery_cause_channel_misconfig=pulumi.get(__ret__, 'recovery_cause_channel_misconfig'),
        recovery_cause_dhcp_rate_limit=pulumi.get(__ret__, 'recovery_cause_dhcp_rate_limit'),
        recovery_cause_dtp_flap=pulumi.get(__ret__, 'recovery_cause_dtp_flap'),
        recovery_cause_gbic_invalid=pulumi.get(__ret__, 'recovery_cause_gbic_invalid'),
        recovery_cause_inline_power=pulumi.get(__ret__, 'recovery_cause_inline_power'),
        recovery_cause_l2ptguard=pulumi.get(__ret__, 'recovery_cause_l2ptguard'),
        recovery_cause_link_flap=pulumi.get(__ret__, 'recovery_cause_link_flap'),
        recovery_cause_link_monitor_failure=pulumi.get(__ret__, 'recovery_cause_link_monitor_failure'),
        recovery_cause_loopback=pulumi.get(__ret__, 'recovery_cause_loopback'),
        recovery_cause_loopdetect=pulumi.get(__ret__, 'recovery_cause_loopdetect'),
        recovery_cause_mac_limit=pulumi.get(__ret__, 'recovery_cause_mac_limit'),
        recovery_cause_mlacp_minlink=pulumi.get(__ret__, 'recovery_cause_mlacp_minlink'),
        recovery_cause_pagp_flap=pulumi.get(__ret__, 'recovery_cause_pagp_flap'),
        recovery_cause_port_mode_failure=pulumi.get(__ret__, 'recovery_cause_port_mode_failure'),
        recovery_cause_pppoe_ia_rate_limit=pulumi.get(__ret__, 'recovery_cause_pppoe_ia_rate_limit'),
        recovery_cause_psecure_violation=pulumi.get(__ret__, 'recovery_cause_psecure_violation'),
        recovery_cause_psp=pulumi.get(__ret__, 'recovery_cause_psp'),
        recovery_cause_security_violation=pulumi.get(__ret__, 'recovery_cause_security_violation'),
        recovery_cause_sfp_config_mismatch=pulumi.get(__ret__, 'recovery_cause_sfp_config_mismatch'),
        recovery_cause_small_frame=pulumi.get(__ret__, 'recovery_cause_small_frame'),
        recovery_cause_storm_control=pulumi.get(__ret__, 'recovery_cause_storm_control'),
        recovery_cause_udld=pulumi.get(__ret__, 'recovery_cause_udld'),
        recovery_cause_unicast_flood=pulumi.get(__ret__, 'recovery_cause_unicast_flood'),
        recovery_cause_vmps=pulumi.get(__ret__, 'recovery_cause_vmps'),
        recovery_interval=pulumi.get(__ret__, 'recovery_interval'))


@_utilities.lift_output_func(get_errdisable)
def get_errdisable_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetErrdisableResult]:
    """
    This data source can read the Errdisable configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.get_errdisable()
    ```


    :param str device: A device name from the provider configuration.
    """
    ...
