# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SnmpServerGroupArgs', 'SnmpServerGroup']

@pulumi.input_type
class SnmpServerGroupArgs:
    def __init__(__self__, *,
                 device: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 v3_securities: Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerGroupV3SecurityArgs']]]] = None):
        """
        The set of arguments for constructing a SnmpServerGroup resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input['SnmpServerGroupV3SecurityArgs']]] v3_securities: group using security Level
        """
        if device is not None:
            pulumi.set(__self__, "device", device)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if v3_securities is not None:
            pulumi.set(__self__, "v3_securities", v3_securities)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="v3Securities")
    def v3_securities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerGroupV3SecurityArgs']]]]:
        """
        group using security Level
        """
        return pulumi.get(self, "v3_securities")

    @v3_securities.setter
    def v3_securities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerGroupV3SecurityArgs']]]]):
        pulumi.set(self, "v3_securities", value)


@pulumi.input_type
class _SnmpServerGroupState:
    def __init__(__self__, *,
                 device: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 v3_securities: Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerGroupV3SecurityArgs']]]] = None):
        """
        Input properties used for looking up and filtering SnmpServerGroup resources.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input['SnmpServerGroupV3SecurityArgs']]] v3_securities: group using security Level
        """
        if device is not None:
            pulumi.set(__self__, "device", device)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if v3_securities is not None:
            pulumi.set(__self__, "v3_securities", v3_securities)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="v3Securities")
    def v3_securities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerGroupV3SecurityArgs']]]]:
        """
        group using security Level
        """
        return pulumi.get(self, "v3_securities")

    @v3_securities.setter
    def v3_securities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SnmpServerGroupV3SecurityArgs']]]]):
        pulumi.set(self, "v3_securities", value)


class SnmpServerGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 v3_securities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpServerGroupV3SecurityArgs']]]]] = None,
                 __props__=None):
        """
        This resource can manage the SNMP Server Group configuration.

        ## Import

        ```sh
         $ pulumi import iosxe:index/snmpServerGroup:SnmpServerGroup example "Cisco-IOS-XE-native:native/snmp-server/Cisco-IOS-XE-snmp:group=GROUP1"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpServerGroupV3SecurityArgs']]]] v3_securities: group using security Level
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SnmpServerGroupArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the SNMP Server Group configuration.

        ## Import

        ```sh
         $ pulumi import iosxe:index/snmpServerGroup:SnmpServerGroup example "Cisco-IOS-XE-native:native/snmp-server/Cisco-IOS-XE-snmp:group=GROUP1"
        ```

        :param str resource_name: The name of the resource.
        :param SnmpServerGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SnmpServerGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 v3_securities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpServerGroupV3SecurityArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SnmpServerGroupArgs.__new__(SnmpServerGroupArgs)

            __props__.__dict__["device"] = device
            __props__.__dict__["name"] = name
            __props__.__dict__["v3_securities"] = v3_securities
        super(SnmpServerGroup, __self__).__init__(
            'iosxe:index/snmpServerGroup:SnmpServerGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            device: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            v3_securities: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpServerGroupV3SecurityArgs']]]]] = None) -> 'SnmpServerGroup':
        """
        Get an existing SnmpServerGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SnmpServerGroupV3SecurityArgs']]]] v3_securities: group using security Level
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SnmpServerGroupState.__new__(_SnmpServerGroupState)

        __props__.__dict__["device"] = device
        __props__.__dict__["name"] = name
        __props__.__dict__["v3_securities"] = v3_securities
        return SnmpServerGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="v3Securities")
    def v3_securities(self) -> pulumi.Output[Optional[Sequence['outputs.SnmpServerGroupV3Security']]]:
        """
        group using security Level
        """
        return pulumi.get(self, "v3_securities")

