# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetLoggingIpv4HostVrfTransportResult',
    'AwaitableGetLoggingIpv4HostVrfTransportResult',
    'get_logging_ipv4_host_vrf_transport',
    'get_logging_ipv4_host_vrf_transport_output',
]

@pulumi.output_type
class GetLoggingIpv4HostVrfTransportResult:
    """
    A collection of values returned by getLoggingIpv4HostVrfTransport.
    """
    def __init__(__self__, device=None, id=None, ipv4_host=None, transport_tcp_ports=None, transport_tls_ports=None, transport_udp_ports=None, vrf=None):
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ipv4_host and not isinstance(ipv4_host, str):
            raise TypeError("Expected argument 'ipv4_host' to be a str")
        pulumi.set(__self__, "ipv4_host", ipv4_host)
        if transport_tcp_ports and not isinstance(transport_tcp_ports, list):
            raise TypeError("Expected argument 'transport_tcp_ports' to be a list")
        pulumi.set(__self__, "transport_tcp_ports", transport_tcp_ports)
        if transport_tls_ports and not isinstance(transport_tls_ports, list):
            raise TypeError("Expected argument 'transport_tls_ports' to be a list")
        pulumi.set(__self__, "transport_tls_ports", transport_tls_ports)
        if transport_udp_ports and not isinstance(transport_udp_ports, list):
            raise TypeError("Expected argument 'transport_udp_ports' to be a list")
        pulumi.set(__self__, "transport_udp_ports", transport_udp_ports)
        if vrf and not isinstance(vrf, str):
            raise TypeError("Expected argument 'vrf' to be a str")
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The path of the retrieved object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipv4Host")
    def ipv4_host(self) -> str:
        return pulumi.get(self, "ipv4_host")

    @property
    @pulumi.getter(name="transportTcpPorts")
    def transport_tcp_ports(self) -> Sequence['outputs.GetLoggingIpv4HostVrfTransportTransportTcpPortResult']:
        """
        Port Number List
        """
        return pulumi.get(self, "transport_tcp_ports")

    @property
    @pulumi.getter(name="transportTlsPorts")
    def transport_tls_ports(self) -> Sequence['outputs.GetLoggingIpv4HostVrfTransportTransportTlsPortResult']:
        """
        Port Number List
        """
        return pulumi.get(self, "transport_tls_ports")

    @property
    @pulumi.getter(name="transportUdpPorts")
    def transport_udp_ports(self) -> Sequence['outputs.GetLoggingIpv4HostVrfTransportTransportUdpPortResult']:
        """
        Port Number List
        """
        return pulumi.get(self, "transport_udp_ports")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        """
        Set VRF option
        """
        return pulumi.get(self, "vrf")


class AwaitableGetLoggingIpv4HostVrfTransportResult(GetLoggingIpv4HostVrfTransportResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLoggingIpv4HostVrfTransportResult(
            device=self.device,
            id=self.id,
            ipv4_host=self.ipv4_host,
            transport_tcp_ports=self.transport_tcp_ports,
            transport_tls_ports=self.transport_tls_ports,
            transport_udp_ports=self.transport_udp_ports,
            vrf=self.vrf)


def get_logging_ipv4_host_vrf_transport(device: Optional[str] = None,
                                        ipv4_host: Optional[str] = None,
                                        vrf: Optional[str] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLoggingIpv4HostVrfTransportResult:
    """
    This data source can read the Logging IPv4 Host VRF Transport configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.get_logging_ipv4_host_vrf_transport(ipv4_host="2.2.2.2",
        vrf="VRF1")
    ```


    :param str device: A device name from the provider configuration.
    :param str vrf: Set VRF option
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['ipv4Host'] = ipv4_host
    __args__['vrf'] = vrf
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:index/getLoggingIpv4HostVrfTransport:getLoggingIpv4HostVrfTransport', __args__, opts=opts, typ=GetLoggingIpv4HostVrfTransportResult).value

    return AwaitableGetLoggingIpv4HostVrfTransportResult(
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        ipv4_host=pulumi.get(__ret__, 'ipv4_host'),
        transport_tcp_ports=pulumi.get(__ret__, 'transport_tcp_ports'),
        transport_tls_ports=pulumi.get(__ret__, 'transport_tls_ports'),
        transport_udp_ports=pulumi.get(__ret__, 'transport_udp_ports'),
        vrf=pulumi.get(__ret__, 'vrf'))


@_utilities.lift_output_func(get_logging_ipv4_host_vrf_transport)
def get_logging_ipv4_host_vrf_transport_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                                               ipv4_host: Optional[pulumi.Input[str]] = None,
                                               vrf: Optional[pulumi.Input[str]] = None,
                                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetLoggingIpv4HostVrfTransportResult]:
    """
    This data source can read the Logging IPv4 Host VRF Transport configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.get_logging_ipv4_host_vrf_transport(ipv4_host="2.2.2.2",
        vrf="VRF1")
    ```


    :param str device: A device name from the provider configuration.
    :param str vrf: Set VRF option
    """
    ...
