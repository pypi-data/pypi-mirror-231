# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AaaArgs', 'Aaa']

@pulumi.input_type
class AaaArgs:
    def __init__(__self__, *,
                 device: Optional[pulumi.Input[str]] = None,
                 group_server_radii: Optional[pulumi.Input[Sequence[pulumi.Input['AaaGroupServerRadiusArgs']]]] = None,
                 group_server_tacacspluses: Optional[pulumi.Input[Sequence[pulumi.Input['AaaGroupServerTacacsplusArgs']]]] = None,
                 new_model: Optional[pulumi.Input[bool]] = None,
                 server_radius_dynamic_author: Optional[pulumi.Input[bool]] = None,
                 server_radius_dynamic_author_clients: Optional[pulumi.Input[Sequence[pulumi.Input['AaaServerRadiusDynamicAuthorClientArgs']]]] = None,
                 session_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Aaa resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input['AaaGroupServerRadiusArgs']]] group_server_radii: Radius server-group definition
        :param pulumi.Input[Sequence[pulumi.Input['AaaGroupServerTacacsplusArgs']]] group_server_tacacspluses: Tacacs+ server-group definition
        :param pulumi.Input[bool] new_model: Enable NEW access control commands and functions.(Disables OLD commands.)
        :param pulumi.Input[bool] server_radius_dynamic_author: Local server profile for RFC 3576 support
        :param pulumi.Input[Sequence[pulumi.Input['AaaServerRadiusDynamicAuthorClientArgs']]] server_radius_dynamic_author_clients: Specify a RADIUS client
        :param pulumi.Input[str] session_id: AAA Session ID - Choices: `common`, `unique`
        """
        if device is not None:
            pulumi.set(__self__, "device", device)
        if group_server_radii is not None:
            pulumi.set(__self__, "group_server_radii", group_server_radii)
        if group_server_tacacspluses is not None:
            pulumi.set(__self__, "group_server_tacacspluses", group_server_tacacspluses)
        if new_model is not None:
            pulumi.set(__self__, "new_model", new_model)
        if server_radius_dynamic_author is not None:
            pulumi.set(__self__, "server_radius_dynamic_author", server_radius_dynamic_author)
        if server_radius_dynamic_author_clients is not None:
            pulumi.set(__self__, "server_radius_dynamic_author_clients", server_radius_dynamic_author_clients)
        if session_id is not None:
            pulumi.set(__self__, "session_id", session_id)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="groupServerRadii")
    def group_server_radii(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AaaGroupServerRadiusArgs']]]]:
        """
        Radius server-group definition
        """
        return pulumi.get(self, "group_server_radii")

    @group_server_radii.setter
    def group_server_radii(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AaaGroupServerRadiusArgs']]]]):
        pulumi.set(self, "group_server_radii", value)

    @property
    @pulumi.getter(name="groupServerTacacspluses")
    def group_server_tacacspluses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AaaGroupServerTacacsplusArgs']]]]:
        """
        Tacacs+ server-group definition
        """
        return pulumi.get(self, "group_server_tacacspluses")

    @group_server_tacacspluses.setter
    def group_server_tacacspluses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AaaGroupServerTacacsplusArgs']]]]):
        pulumi.set(self, "group_server_tacacspluses", value)

    @property
    @pulumi.getter(name="newModel")
    def new_model(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable NEW access control commands and functions.(Disables OLD commands.)
        """
        return pulumi.get(self, "new_model")

    @new_model.setter
    def new_model(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "new_model", value)

    @property
    @pulumi.getter(name="serverRadiusDynamicAuthor")
    def server_radius_dynamic_author(self) -> Optional[pulumi.Input[bool]]:
        """
        Local server profile for RFC 3576 support
        """
        return pulumi.get(self, "server_radius_dynamic_author")

    @server_radius_dynamic_author.setter
    def server_radius_dynamic_author(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "server_radius_dynamic_author", value)

    @property
    @pulumi.getter(name="serverRadiusDynamicAuthorClients")
    def server_radius_dynamic_author_clients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AaaServerRadiusDynamicAuthorClientArgs']]]]:
        """
        Specify a RADIUS client
        """
        return pulumi.get(self, "server_radius_dynamic_author_clients")

    @server_radius_dynamic_author_clients.setter
    def server_radius_dynamic_author_clients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AaaServerRadiusDynamicAuthorClientArgs']]]]):
        pulumi.set(self, "server_radius_dynamic_author_clients", value)

    @property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> Optional[pulumi.Input[str]]:
        """
        AAA Session ID - Choices: `common`, `unique`
        """
        return pulumi.get(self, "session_id")

    @session_id.setter
    def session_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_id", value)


@pulumi.input_type
class _AaaState:
    def __init__(__self__, *,
                 device: Optional[pulumi.Input[str]] = None,
                 group_server_radii: Optional[pulumi.Input[Sequence[pulumi.Input['AaaGroupServerRadiusArgs']]]] = None,
                 group_server_tacacspluses: Optional[pulumi.Input[Sequence[pulumi.Input['AaaGroupServerTacacsplusArgs']]]] = None,
                 new_model: Optional[pulumi.Input[bool]] = None,
                 server_radius_dynamic_author: Optional[pulumi.Input[bool]] = None,
                 server_radius_dynamic_author_clients: Optional[pulumi.Input[Sequence[pulumi.Input['AaaServerRadiusDynamicAuthorClientArgs']]]] = None,
                 session_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Aaa resources.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input['AaaGroupServerRadiusArgs']]] group_server_radii: Radius server-group definition
        :param pulumi.Input[Sequence[pulumi.Input['AaaGroupServerTacacsplusArgs']]] group_server_tacacspluses: Tacacs+ server-group definition
        :param pulumi.Input[bool] new_model: Enable NEW access control commands and functions.(Disables OLD commands.)
        :param pulumi.Input[bool] server_radius_dynamic_author: Local server profile for RFC 3576 support
        :param pulumi.Input[Sequence[pulumi.Input['AaaServerRadiusDynamicAuthorClientArgs']]] server_radius_dynamic_author_clients: Specify a RADIUS client
        :param pulumi.Input[str] session_id: AAA Session ID - Choices: `common`, `unique`
        """
        if device is not None:
            pulumi.set(__self__, "device", device)
        if group_server_radii is not None:
            pulumi.set(__self__, "group_server_radii", group_server_radii)
        if group_server_tacacspluses is not None:
            pulumi.set(__self__, "group_server_tacacspluses", group_server_tacacspluses)
        if new_model is not None:
            pulumi.set(__self__, "new_model", new_model)
        if server_radius_dynamic_author is not None:
            pulumi.set(__self__, "server_radius_dynamic_author", server_radius_dynamic_author)
        if server_radius_dynamic_author_clients is not None:
            pulumi.set(__self__, "server_radius_dynamic_author_clients", server_radius_dynamic_author_clients)
        if session_id is not None:
            pulumi.set(__self__, "session_id", session_id)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="groupServerRadii")
    def group_server_radii(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AaaGroupServerRadiusArgs']]]]:
        """
        Radius server-group definition
        """
        return pulumi.get(self, "group_server_radii")

    @group_server_radii.setter
    def group_server_radii(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AaaGroupServerRadiusArgs']]]]):
        pulumi.set(self, "group_server_radii", value)

    @property
    @pulumi.getter(name="groupServerTacacspluses")
    def group_server_tacacspluses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AaaGroupServerTacacsplusArgs']]]]:
        """
        Tacacs+ server-group definition
        """
        return pulumi.get(self, "group_server_tacacspluses")

    @group_server_tacacspluses.setter
    def group_server_tacacspluses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AaaGroupServerTacacsplusArgs']]]]):
        pulumi.set(self, "group_server_tacacspluses", value)

    @property
    @pulumi.getter(name="newModel")
    def new_model(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable NEW access control commands and functions.(Disables OLD commands.)
        """
        return pulumi.get(self, "new_model")

    @new_model.setter
    def new_model(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "new_model", value)

    @property
    @pulumi.getter(name="serverRadiusDynamicAuthor")
    def server_radius_dynamic_author(self) -> Optional[pulumi.Input[bool]]:
        """
        Local server profile for RFC 3576 support
        """
        return pulumi.get(self, "server_radius_dynamic_author")

    @server_radius_dynamic_author.setter
    def server_radius_dynamic_author(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "server_radius_dynamic_author", value)

    @property
    @pulumi.getter(name="serverRadiusDynamicAuthorClients")
    def server_radius_dynamic_author_clients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AaaServerRadiusDynamicAuthorClientArgs']]]]:
        """
        Specify a RADIUS client
        """
        return pulumi.get(self, "server_radius_dynamic_author_clients")

    @server_radius_dynamic_author_clients.setter
    def server_radius_dynamic_author_clients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AaaServerRadiusDynamicAuthorClientArgs']]]]):
        pulumi.set(self, "server_radius_dynamic_author_clients", value)

    @property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> Optional[pulumi.Input[str]]:
        """
        AAA Session ID - Choices: `common`, `unique`
        """
        return pulumi.get(self, "session_id")

    @session_id.setter
    def session_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_id", value)


class Aaa(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 group_server_radii: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AaaGroupServerRadiusArgs']]]]] = None,
                 group_server_tacacspluses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AaaGroupServerTacacsplusArgs']]]]] = None,
                 new_model: Optional[pulumi.Input[bool]] = None,
                 server_radius_dynamic_author: Optional[pulumi.Input[bool]] = None,
                 server_radius_dynamic_author_clients: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AaaServerRadiusDynamicAuthorClientArgs']]]]] = None,
                 session_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        This resource can manage the AAA configuration.

        ## Import

        ```sh
         $ pulumi import iosxe:index/aaa:Aaa example "Cisco-IOS-XE-native:native/aaa"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AaaGroupServerRadiusArgs']]]] group_server_radii: Radius server-group definition
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AaaGroupServerTacacsplusArgs']]]] group_server_tacacspluses: Tacacs+ server-group definition
        :param pulumi.Input[bool] new_model: Enable NEW access control commands and functions.(Disables OLD commands.)
        :param pulumi.Input[bool] server_radius_dynamic_author: Local server profile for RFC 3576 support
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AaaServerRadiusDynamicAuthorClientArgs']]]] server_radius_dynamic_author_clients: Specify a RADIUS client
        :param pulumi.Input[str] session_id: AAA Session ID - Choices: `common`, `unique`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AaaArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource can manage the AAA configuration.

        ## Import

        ```sh
         $ pulumi import iosxe:index/aaa:Aaa example "Cisco-IOS-XE-native:native/aaa"
        ```

        :param str resource_name: The name of the resource.
        :param AaaArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AaaArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 group_server_radii: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AaaGroupServerRadiusArgs']]]]] = None,
                 group_server_tacacspluses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AaaGroupServerTacacsplusArgs']]]]] = None,
                 new_model: Optional[pulumi.Input[bool]] = None,
                 server_radius_dynamic_author: Optional[pulumi.Input[bool]] = None,
                 server_radius_dynamic_author_clients: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AaaServerRadiusDynamicAuthorClientArgs']]]]] = None,
                 session_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AaaArgs.__new__(AaaArgs)

            __props__.__dict__["device"] = device
            __props__.__dict__["group_server_radii"] = group_server_radii
            __props__.__dict__["group_server_tacacspluses"] = group_server_tacacspluses
            __props__.__dict__["new_model"] = new_model
            __props__.__dict__["server_radius_dynamic_author"] = server_radius_dynamic_author
            __props__.__dict__["server_radius_dynamic_author_clients"] = server_radius_dynamic_author_clients
            __props__.__dict__["session_id"] = session_id
        super(Aaa, __self__).__init__(
            'iosxe:index/aaa:Aaa',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            device: Optional[pulumi.Input[str]] = None,
            group_server_radii: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AaaGroupServerRadiusArgs']]]]] = None,
            group_server_tacacspluses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AaaGroupServerTacacsplusArgs']]]]] = None,
            new_model: Optional[pulumi.Input[bool]] = None,
            server_radius_dynamic_author: Optional[pulumi.Input[bool]] = None,
            server_radius_dynamic_author_clients: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AaaServerRadiusDynamicAuthorClientArgs']]]]] = None,
            session_id: Optional[pulumi.Input[str]] = None) -> 'Aaa':
        """
        Get an existing Aaa resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AaaGroupServerRadiusArgs']]]] group_server_radii: Radius server-group definition
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AaaGroupServerTacacsplusArgs']]]] group_server_tacacspluses: Tacacs+ server-group definition
        :param pulumi.Input[bool] new_model: Enable NEW access control commands and functions.(Disables OLD commands.)
        :param pulumi.Input[bool] server_radius_dynamic_author: Local server profile for RFC 3576 support
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AaaServerRadiusDynamicAuthorClientArgs']]]] server_radius_dynamic_author_clients: Specify a RADIUS client
        :param pulumi.Input[str] session_id: AAA Session ID - Choices: `common`, `unique`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AaaState.__new__(_AaaState)

        __props__.__dict__["device"] = device
        __props__.__dict__["group_server_radii"] = group_server_radii
        __props__.__dict__["group_server_tacacspluses"] = group_server_tacacspluses
        __props__.__dict__["new_model"] = new_model
        __props__.__dict__["server_radius_dynamic_author"] = server_radius_dynamic_author
        __props__.__dict__["server_radius_dynamic_author_clients"] = server_radius_dynamic_author_clients
        __props__.__dict__["session_id"] = session_id
        return Aaa(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="groupServerRadii")
    def group_server_radii(self) -> pulumi.Output[Optional[Sequence['outputs.AaaGroupServerRadius']]]:
        """
        Radius server-group definition
        """
        return pulumi.get(self, "group_server_radii")

    @property
    @pulumi.getter(name="groupServerTacacspluses")
    def group_server_tacacspluses(self) -> pulumi.Output[Optional[Sequence['outputs.AaaGroupServerTacacsplus']]]:
        """
        Tacacs+ server-group definition
        """
        return pulumi.get(self, "group_server_tacacspluses")

    @property
    @pulumi.getter(name="newModel")
    def new_model(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable NEW access control commands and functions.(Disables OLD commands.)
        """
        return pulumi.get(self, "new_model")

    @property
    @pulumi.getter(name="serverRadiusDynamicAuthor")
    def server_radius_dynamic_author(self) -> pulumi.Output[Optional[bool]]:
        """
        Local server profile for RFC 3576 support
        """
        return pulumi.get(self, "server_radius_dynamic_author")

    @property
    @pulumi.getter(name="serverRadiusDynamicAuthorClients")
    def server_radius_dynamic_author_clients(self) -> pulumi.Output[Optional[Sequence['outputs.AaaServerRadiusDynamicAuthorClient']]]:
        """
        Specify a RADIUS client
        """
        return pulumi.get(self, "server_radius_dynamic_author_clients")

    @property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> pulumi.Output[Optional[str]]:
        """
        AAA Session ID - Choices: `common`, `unique`
        """
        return pulumi.get(self, "session_id")

