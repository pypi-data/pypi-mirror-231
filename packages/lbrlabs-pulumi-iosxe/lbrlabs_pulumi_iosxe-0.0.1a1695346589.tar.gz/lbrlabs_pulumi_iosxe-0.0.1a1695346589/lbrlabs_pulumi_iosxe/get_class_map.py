# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetClassMapResult',
    'AwaitableGetClassMapResult',
    'get_class_map',
    'get_class_map_output',
]

@pulumi.output_type
class GetClassMapResult:
    """
    A collection of values returned by getClassMap.
    """
    def __init__(__self__, description=None, device=None, id=None, match_activated_service_templates=None, match_authorization_status_authorized=None, match_authorization_status_unauthorized=None, match_authorizing_method_priority_greater_thans=None, match_method_dot1x=None, match_method_mab=None, match_result_type_aaa_timeout=None, match_result_type_method_dot1x_agent_not_found=None, match_result_type_method_dot1x_authoritative=None, match_result_type_method_dot1x_method_timeout=None, match_result_type_method_mab_authoritative=None, name=None, prematch=None, subscriber=None, type=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if match_activated_service_templates and not isinstance(match_activated_service_templates, list):
            raise TypeError("Expected argument 'match_activated_service_templates' to be a list")
        pulumi.set(__self__, "match_activated_service_templates", match_activated_service_templates)
        if match_authorization_status_authorized and not isinstance(match_authorization_status_authorized, bool):
            raise TypeError("Expected argument 'match_authorization_status_authorized' to be a bool")
        pulumi.set(__self__, "match_authorization_status_authorized", match_authorization_status_authorized)
        if match_authorization_status_unauthorized and not isinstance(match_authorization_status_unauthorized, bool):
            raise TypeError("Expected argument 'match_authorization_status_unauthorized' to be a bool")
        pulumi.set(__self__, "match_authorization_status_unauthorized", match_authorization_status_unauthorized)
        if match_authorizing_method_priority_greater_thans and not isinstance(match_authorizing_method_priority_greater_thans, list):
            raise TypeError("Expected argument 'match_authorizing_method_priority_greater_thans' to be a list")
        pulumi.set(__self__, "match_authorizing_method_priority_greater_thans", match_authorizing_method_priority_greater_thans)
        if match_method_dot1x and not isinstance(match_method_dot1x, bool):
            raise TypeError("Expected argument 'match_method_dot1x' to be a bool")
        pulumi.set(__self__, "match_method_dot1x", match_method_dot1x)
        if match_method_mab and not isinstance(match_method_mab, bool):
            raise TypeError("Expected argument 'match_method_mab' to be a bool")
        pulumi.set(__self__, "match_method_mab", match_method_mab)
        if match_result_type_aaa_timeout and not isinstance(match_result_type_aaa_timeout, bool):
            raise TypeError("Expected argument 'match_result_type_aaa_timeout' to be a bool")
        pulumi.set(__self__, "match_result_type_aaa_timeout", match_result_type_aaa_timeout)
        if match_result_type_method_dot1x_agent_not_found and not isinstance(match_result_type_method_dot1x_agent_not_found, bool):
            raise TypeError("Expected argument 'match_result_type_method_dot1x_agent_not_found' to be a bool")
        pulumi.set(__self__, "match_result_type_method_dot1x_agent_not_found", match_result_type_method_dot1x_agent_not_found)
        if match_result_type_method_dot1x_authoritative and not isinstance(match_result_type_method_dot1x_authoritative, bool):
            raise TypeError("Expected argument 'match_result_type_method_dot1x_authoritative' to be a bool")
        pulumi.set(__self__, "match_result_type_method_dot1x_authoritative", match_result_type_method_dot1x_authoritative)
        if match_result_type_method_dot1x_method_timeout and not isinstance(match_result_type_method_dot1x_method_timeout, bool):
            raise TypeError("Expected argument 'match_result_type_method_dot1x_method_timeout' to be a bool")
        pulumi.set(__self__, "match_result_type_method_dot1x_method_timeout", match_result_type_method_dot1x_method_timeout)
        if match_result_type_method_mab_authoritative and not isinstance(match_result_type_method_mab_authoritative, bool):
            raise TypeError("Expected argument 'match_result_type_method_mab_authoritative' to be a bool")
        pulumi.set(__self__, "match_result_type_method_mab_authoritative", match_result_type_method_mab_authoritative)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if prematch and not isinstance(prematch, str):
            raise TypeError("Expected argument 'prematch' to be a str")
        pulumi.set(__self__, "prematch", prematch)
        if subscriber and not isinstance(subscriber, bool):
            raise TypeError("Expected argument 'subscriber' to be a bool")
        pulumi.set(__self__, "subscriber", subscriber)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Class-Map description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The path of the retrieved object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="matchActivatedServiceTemplates")
    def match_activated_service_templates(self) -> Sequence['outputs.GetClassMapMatchActivatedServiceTemplateResult']:
        """
        match name of service template activated on session
        """
        return pulumi.get(self, "match_activated_service_templates")

    @property
    @pulumi.getter(name="matchAuthorizationStatusAuthorized")
    def match_authorization_status_authorized(self) -> bool:
        """
        authorized
        """
        return pulumi.get(self, "match_authorization_status_authorized")

    @property
    @pulumi.getter(name="matchAuthorizationStatusUnauthorized")
    def match_authorization_status_unauthorized(self) -> bool:
        """
        unauthorized
        """
        return pulumi.get(self, "match_authorization_status_unauthorized")

    @property
    @pulumi.getter(name="matchAuthorizingMethodPriorityGreaterThans")
    def match_authorizing_method_priority_greater_thans(self) -> Sequence[int]:
        """
        greater than
        """
        return pulumi.get(self, "match_authorizing_method_priority_greater_thans")

    @property
    @pulumi.getter(name="matchMethodDot1x")
    def match_method_dot1x(self) -> bool:
        """
        dot1x
        """
        return pulumi.get(self, "match_method_dot1x")

    @property
    @pulumi.getter(name="matchMethodMab")
    def match_method_mab(self) -> bool:
        """
        mab
        """
        return pulumi.get(self, "match_method_mab")

    @property
    @pulumi.getter(name="matchResultTypeAaaTimeout")
    def match_result_type_aaa_timeout(self) -> bool:
        """
        aaa timeout type
        """
        return pulumi.get(self, "match_result_type_aaa_timeout")

    @property
    @pulumi.getter(name="matchResultTypeMethodDot1xAgentNotFound")
    def match_result_type_method_dot1x_agent_not_found(self) -> bool:
        """
        agent not found type
        """
        return pulumi.get(self, "match_result_type_method_dot1x_agent_not_found")

    @property
    @pulumi.getter(name="matchResultTypeMethodDot1xAuthoritative")
    def match_result_type_method_dot1x_authoritative(self) -> bool:
        """
        failure type
        """
        return pulumi.get(self, "match_result_type_method_dot1x_authoritative")

    @property
    @pulumi.getter(name="matchResultTypeMethodDot1xMethodTimeout")
    def match_result_type_method_dot1x_method_timeout(self) -> bool:
        """
        method_timeout type
        """
        return pulumi.get(self, "match_result_type_method_dot1x_method_timeout")

    @property
    @pulumi.getter(name="matchResultTypeMethodMabAuthoritative")
    def match_result_type_method_mab_authoritative(self) -> bool:
        """
        failure type
        """
        return pulumi.get(self, "match_result_type_method_mab_authoritative")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the class map
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def prematch(self) -> str:
        """
        Logical-AND/Logical-OR of all matching statements under this class map
        """
        return pulumi.get(self, "prematch")

    @property
    @pulumi.getter
    def subscriber(self) -> bool:
        """
        Domain name of the class map
        """
        return pulumi.get(self, "subscriber")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        type of the class-map
        """
        return pulumi.get(self, "type")


class AwaitableGetClassMapResult(GetClassMapResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClassMapResult(
            description=self.description,
            device=self.device,
            id=self.id,
            match_activated_service_templates=self.match_activated_service_templates,
            match_authorization_status_authorized=self.match_authorization_status_authorized,
            match_authorization_status_unauthorized=self.match_authorization_status_unauthorized,
            match_authorizing_method_priority_greater_thans=self.match_authorizing_method_priority_greater_thans,
            match_method_dot1x=self.match_method_dot1x,
            match_method_mab=self.match_method_mab,
            match_result_type_aaa_timeout=self.match_result_type_aaa_timeout,
            match_result_type_method_dot1x_agent_not_found=self.match_result_type_method_dot1x_agent_not_found,
            match_result_type_method_dot1x_authoritative=self.match_result_type_method_dot1x_authoritative,
            match_result_type_method_dot1x_method_timeout=self.match_result_type_method_dot1x_method_timeout,
            match_result_type_method_mab_authoritative=self.match_result_type_method_mab_authoritative,
            name=self.name,
            prematch=self.prematch,
            subscriber=self.subscriber,
            type=self.type)


def get_class_map(device: Optional[str] = None,
                  name: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClassMapResult:
    """
    This data source can read the Class Map configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.get_class_map(name="CM1")
    ```


    :param str device: A device name from the provider configuration.
    :param str name: name of the class map
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:index/getClassMap:getClassMap', __args__, opts=opts, typ=GetClassMapResult).value

    return AwaitableGetClassMapResult(
        description=pulumi.get(__ret__, 'description'),
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        match_activated_service_templates=pulumi.get(__ret__, 'match_activated_service_templates'),
        match_authorization_status_authorized=pulumi.get(__ret__, 'match_authorization_status_authorized'),
        match_authorization_status_unauthorized=pulumi.get(__ret__, 'match_authorization_status_unauthorized'),
        match_authorizing_method_priority_greater_thans=pulumi.get(__ret__, 'match_authorizing_method_priority_greater_thans'),
        match_method_dot1x=pulumi.get(__ret__, 'match_method_dot1x'),
        match_method_mab=pulumi.get(__ret__, 'match_method_mab'),
        match_result_type_aaa_timeout=pulumi.get(__ret__, 'match_result_type_aaa_timeout'),
        match_result_type_method_dot1x_agent_not_found=pulumi.get(__ret__, 'match_result_type_method_dot1x_agent_not_found'),
        match_result_type_method_dot1x_authoritative=pulumi.get(__ret__, 'match_result_type_method_dot1x_authoritative'),
        match_result_type_method_dot1x_method_timeout=pulumi.get(__ret__, 'match_result_type_method_dot1x_method_timeout'),
        match_result_type_method_mab_authoritative=pulumi.get(__ret__, 'match_result_type_method_mab_authoritative'),
        name=pulumi.get(__ret__, 'name'),
        prematch=pulumi.get(__ret__, 'prematch'),
        subscriber=pulumi.get(__ret__, 'subscriber'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_class_map)
def get_class_map_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                         name: Optional[pulumi.Input[str]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetClassMapResult]:
    """
    This data source can read the Class Map configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.get_class_map(name="CM1")
    ```


    :param str device: A device name from the provider configuration.
    :param str name: name of the class map
    """
    ...
