# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetBgpResult',
    'AwaitableGetBgpResult',
    'get_bgp',
    'get_bgp_output',
]

@pulumi.output_type
class GetBgpResult:
    """
    A collection of values returned by getBgp.
    """
    def __init__(__self__, asn=None, default_ipv4_unicast=None, device=None, id=None, log_neighbor_changes=None, router_id_loopback=None):
        if asn and not isinstance(asn, str):
            raise TypeError("Expected argument 'asn' to be a str")
        pulumi.set(__self__, "asn", asn)
        if default_ipv4_unicast and not isinstance(default_ipv4_unicast, bool):
            raise TypeError("Expected argument 'default_ipv4_unicast' to be a bool")
        pulumi.set(__self__, "default_ipv4_unicast", default_ipv4_unicast)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if log_neighbor_changes and not isinstance(log_neighbor_changes, bool):
            raise TypeError("Expected argument 'log_neighbor_changes' to be a bool")
        pulumi.set(__self__, "log_neighbor_changes", log_neighbor_changes)
        if router_id_loopback and not isinstance(router_id_loopback, int):
            raise TypeError("Expected argument 'router_id_loopback' to be a int")
        pulumi.set(__self__, "router_id_loopback", router_id_loopback)

    @property
    @pulumi.getter
    def asn(self) -> str:
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter(name="defaultIpv4Unicast")
    def default_ipv4_unicast(self) -> bool:
        """
        Activate ipv4-unicast for a peer by default
        """
        return pulumi.get(self, "default_ipv4_unicast")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The path of the retrieved object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="logNeighborChanges")
    def log_neighbor_changes(self) -> bool:
        """
        Log neighbor up/down and reset reason
        """
        return pulumi.get(self, "log_neighbor_changes")

    @property
    @pulumi.getter(name="routerIdLoopback")
    def router_id_loopback(self) -> int:
        """
        Loopback interface
        """
        return pulumi.get(self, "router_id_loopback")


class AwaitableGetBgpResult(GetBgpResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBgpResult(
            asn=self.asn,
            default_ipv4_unicast=self.default_ipv4_unicast,
            device=self.device,
            id=self.id,
            log_neighbor_changes=self.log_neighbor_changes,
            router_id_loopback=self.router_id_loopback)


def get_bgp(asn: Optional[str] = None,
            device: Optional[str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBgpResult:
    """
    This data source can read the BGP configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.get_bgp(asn="65000")
    ```


    :param str device: A device name from the provider configuration.
    """
    __args__ = dict()
    __args__['asn'] = asn
    __args__['device'] = device
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:index/getBgp:getBgp', __args__, opts=opts, typ=GetBgpResult).value

    return AwaitableGetBgpResult(
        asn=pulumi.get(__ret__, 'asn'),
        default_ipv4_unicast=pulumi.get(__ret__, 'default_ipv4_unicast'),
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        log_neighbor_changes=pulumi.get(__ret__, 'log_neighbor_changes'),
        router_id_loopback=pulumi.get(__ret__, 'router_id_loopback'))


@_utilities.lift_output_func(get_bgp)
def get_bgp_output(asn: Optional[pulumi.Input[str]] = None,
                   device: Optional[pulumi.Input[Optional[str]]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBgpResult]:
    """
    This data source can read the BGP configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.get_bgp(asn="65000")
    ```


    :param str device: A device name from the provider configuration.
    """
    ...
