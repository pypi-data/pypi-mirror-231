# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetPolicyMapEventResult',
    'AwaitableGetPolicyMapEventResult',
    'get_policy_map_event',
    'get_policy_map_event_output',
]

@pulumi.output_type
class GetPolicyMapEventResult:
    """
    A collection of values returned by getPolicyMapEvent.
    """
    def __init__(__self__, class_numbers=None, device=None, event_type=None, id=None, match_type=None, name=None):
        if class_numbers and not isinstance(class_numbers, list):
            raise TypeError("Expected argument 'class_numbers' to be a list")
        pulumi.set(__self__, "class_numbers", class_numbers)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if event_type and not isinstance(event_type, str):
            raise TypeError("Expected argument 'event_type' to be a str")
        pulumi.set(__self__, "event_type", event_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if match_type and not isinstance(match_type, str):
            raise TypeError("Expected argument 'match_type' to be a str")
        pulumi.set(__self__, "match_type", match_type)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="classNumbers")
    def class_numbers(self) -> Sequence['outputs.GetPolicyMapEventClassNumberResult']:
        """
        class number, 1 for 1st class, 2 for 2nd...
        """
        return pulumi.get(self, "class_numbers")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> str:
        return pulumi.get(self, "event_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The path of the retrieved object.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> str:
        return pulumi.get(self, "match_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the policy map
        """
        return pulumi.get(self, "name")


class AwaitableGetPolicyMapEventResult(GetPolicyMapEventResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyMapEventResult(
            class_numbers=self.class_numbers,
            device=self.device,
            event_type=self.event_type,
            id=self.id,
            match_type=self.match_type,
            name=self.name)


def get_policy_map_event(device: Optional[str] = None,
                         event_type: Optional[str] = None,
                         name: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyMapEventResult:
    """
    This data source can read the Policy Map Event configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.get_policy_map_event(event_type="authentication-success",
        name="dot1x_policy")
    ```


    :param str device: A device name from the provider configuration.
    :param str name: Name of the policy map
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['eventType'] = event_type
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:index/getPolicyMapEvent:getPolicyMapEvent', __args__, opts=opts, typ=GetPolicyMapEventResult).value

    return AwaitableGetPolicyMapEventResult(
        class_numbers=pulumi.get(__ret__, 'class_numbers'),
        device=pulumi.get(__ret__, 'device'),
        event_type=pulumi.get(__ret__, 'event_type'),
        id=pulumi.get(__ret__, 'id'),
        match_type=pulumi.get(__ret__, 'match_type'),
        name=pulumi.get(__ret__, 'name'))


@_utilities.lift_output_func(get_policy_map_event)
def get_policy_map_event_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                                event_type: Optional[pulumi.Input[str]] = None,
                                name: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPolicyMapEventResult]:
    """
    This data source can read the Policy Map Event configuration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_iosxe as iosxe

    example = iosxe.get_policy_map_event(event_type="authentication-success",
        name="dot1x_policy")
    ```


    :param str device: A device name from the provider configuration.
    :param str name: Name of the policy map
    """
    ...
