# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetUsernameResult',
    'AwaitableGetUsernameResult',
    'get_username',
    'get_username_output',
]

@pulumi.output_type
class GetUsernameResult:
    """
    A collection of values returned by getUsername.
    """
    def __init__(__self__, description=None, device=None, id=None, name=None, password=None, password_encryption=None, privilege=None, secret=None, secret_encryption=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if password_encryption and not isinstance(password_encryption, str):
            raise TypeError("Expected argument 'password_encryption' to be a str")
        pulumi.set(__self__, "password_encryption", password_encryption)
        if privilege and not isinstance(privilege, int):
            raise TypeError("Expected argument 'privilege' to be a int")
        pulumi.set(__self__, "privilege", privilege)
        if secret and not isinstance(secret, str):
            raise TypeError("Expected argument 'secret' to be a str")
        pulumi.set(__self__, "secret", secret)
        if secret_encryption and not isinstance(secret_encryption, str):
            raise TypeError("Expected argument 'secret_encryption' to be a str")
        pulumi.set(__self__, "secret_encryption", secret_encryption)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="passwordEncryption")
    def password_encryption(self) -> str:
        return pulumi.get(self, "password_encryption")

    @property
    @pulumi.getter
    def privilege(self) -> int:
        return pulumi.get(self, "privilege")

    @property
    @pulumi.getter
    def secret(self) -> str:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter(name="secretEncryption")
    def secret_encryption(self) -> str:
        return pulumi.get(self, "secret_encryption")


class AwaitableGetUsernameResult(GetUsernameResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUsernameResult(
            description=self.description,
            device=self.device,
            id=self.id,
            name=self.name,
            password=self.password,
            password_encryption=self.password_encryption,
            privilege=self.privilege,
            secret=self.secret,
            secret_encryption=self.secret_encryption)


def get_username(device: Optional[str] = None,
                 name: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUsernameResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:iosxe/getUsername:getUsername', __args__, opts=opts, typ=GetUsernameResult).value

    return AwaitableGetUsernameResult(
        description=pulumi.get(__ret__, 'description'),
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        password=pulumi.get(__ret__, 'password'),
        password_encryption=pulumi.get(__ret__, 'password_encryption'),
        privilege=pulumi.get(__ret__, 'privilege'),
        secret=pulumi.get(__ret__, 'secret'),
        secret_encryption=pulumi.get(__ret__, 'secret_encryption'))


@_utilities.lift_output_func(get_username)
def get_username_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                        name: Optional[pulumi.Input[str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUsernameResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
