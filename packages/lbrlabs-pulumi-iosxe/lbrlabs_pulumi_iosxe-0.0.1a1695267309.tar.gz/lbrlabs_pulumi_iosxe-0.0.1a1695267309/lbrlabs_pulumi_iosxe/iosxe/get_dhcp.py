# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDhcpResult',
    'AwaitableGetDhcpResult',
    'get_dhcp',
    'get_dhcp_output',
]

@pulumi.output_type
class GetDhcpResult:
    """
    A collection of values returned by getDhcp.
    """
    def __init__(__self__, compatibility_suboption_link_selection=None, compatibility_suboption_server_override=None, device=None, id=None, relay_information_option_default=None, relay_information_option_vpn=None, relay_information_trust_all=None, snooping=None, snooping_information_option_format_remote_id_hostname=None, snooping_vlans=None):
        if compatibility_suboption_link_selection and not isinstance(compatibility_suboption_link_selection, str):
            raise TypeError("Expected argument 'compatibility_suboption_link_selection' to be a str")
        pulumi.set(__self__, "compatibility_suboption_link_selection", compatibility_suboption_link_selection)
        if compatibility_suboption_server_override and not isinstance(compatibility_suboption_server_override, str):
            raise TypeError("Expected argument 'compatibility_suboption_server_override' to be a str")
        pulumi.set(__self__, "compatibility_suboption_server_override", compatibility_suboption_server_override)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if relay_information_option_default and not isinstance(relay_information_option_default, bool):
            raise TypeError("Expected argument 'relay_information_option_default' to be a bool")
        pulumi.set(__self__, "relay_information_option_default", relay_information_option_default)
        if relay_information_option_vpn and not isinstance(relay_information_option_vpn, bool):
            raise TypeError("Expected argument 'relay_information_option_vpn' to be a bool")
        pulumi.set(__self__, "relay_information_option_vpn", relay_information_option_vpn)
        if relay_information_trust_all and not isinstance(relay_information_trust_all, bool):
            raise TypeError("Expected argument 'relay_information_trust_all' to be a bool")
        pulumi.set(__self__, "relay_information_trust_all", relay_information_trust_all)
        if snooping and not isinstance(snooping, bool):
            raise TypeError("Expected argument 'snooping' to be a bool")
        pulumi.set(__self__, "snooping", snooping)
        if snooping_information_option_format_remote_id_hostname and not isinstance(snooping_information_option_format_remote_id_hostname, bool):
            raise TypeError("Expected argument 'snooping_information_option_format_remote_id_hostname' to be a bool")
        pulumi.set(__self__, "snooping_information_option_format_remote_id_hostname", snooping_information_option_format_remote_id_hostname)
        if snooping_vlans and not isinstance(snooping_vlans, list):
            raise TypeError("Expected argument 'snooping_vlans' to be a list")
        pulumi.set(__self__, "snooping_vlans", snooping_vlans)

    @property
    @pulumi.getter(name="compatibilitySuboptionLinkSelection")
    def compatibility_suboption_link_selection(self) -> str:
        return pulumi.get(self, "compatibility_suboption_link_selection")

    @property
    @pulumi.getter(name="compatibilitySuboptionServerOverride")
    def compatibility_suboption_server_override(self) -> str:
        return pulumi.get(self, "compatibility_suboption_server_override")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="relayInformationOptionDefault")
    def relay_information_option_default(self) -> bool:
        return pulumi.get(self, "relay_information_option_default")

    @property
    @pulumi.getter(name="relayInformationOptionVpn")
    def relay_information_option_vpn(self) -> bool:
        return pulumi.get(self, "relay_information_option_vpn")

    @property
    @pulumi.getter(name="relayInformationTrustAll")
    def relay_information_trust_all(self) -> bool:
        return pulumi.get(self, "relay_information_trust_all")

    @property
    @pulumi.getter
    def snooping(self) -> bool:
        return pulumi.get(self, "snooping")

    @property
    @pulumi.getter(name="snoopingInformationOptionFormatRemoteIdHostname")
    def snooping_information_option_format_remote_id_hostname(self) -> bool:
        return pulumi.get(self, "snooping_information_option_format_remote_id_hostname")

    @property
    @pulumi.getter(name="snoopingVlans")
    def snooping_vlans(self) -> Sequence['outputs.GetDhcpSnoopingVlanResult']:
        return pulumi.get(self, "snooping_vlans")


class AwaitableGetDhcpResult(GetDhcpResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDhcpResult(
            compatibility_suboption_link_selection=self.compatibility_suboption_link_selection,
            compatibility_suboption_server_override=self.compatibility_suboption_server_override,
            device=self.device,
            id=self.id,
            relay_information_option_default=self.relay_information_option_default,
            relay_information_option_vpn=self.relay_information_option_vpn,
            relay_information_trust_all=self.relay_information_trust_all,
            snooping=self.snooping,
            snooping_information_option_format_remote_id_hostname=self.snooping_information_option_format_remote_id_hostname,
            snooping_vlans=self.snooping_vlans)


def get_dhcp(device: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDhcpResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['device'] = device
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:iosxe/getDhcp:getDhcp', __args__, opts=opts, typ=GetDhcpResult).value

    return AwaitableGetDhcpResult(
        compatibility_suboption_link_selection=pulumi.get(__ret__, 'compatibility_suboption_link_selection'),
        compatibility_suboption_server_override=pulumi.get(__ret__, 'compatibility_suboption_server_override'),
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        relay_information_option_default=pulumi.get(__ret__, 'relay_information_option_default'),
        relay_information_option_vpn=pulumi.get(__ret__, 'relay_information_option_vpn'),
        relay_information_trust_all=pulumi.get(__ret__, 'relay_information_trust_all'),
        snooping=pulumi.get(__ret__, 'snooping'),
        snooping_information_option_format_remote_id_hostname=pulumi.get(__ret__, 'snooping_information_option_format_remote_id_hostname'),
        snooping_vlans=pulumi.get(__ret__, 'snooping_vlans'))


@_utilities.lift_output_func(get_dhcp)
def get_dhcp_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDhcpResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
