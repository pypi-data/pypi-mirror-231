# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RestconfArgs', 'Restconf']

@pulumi.input_type
class RestconfArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 delete: Optional[pulumi.Input[bool]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 lists: Optional[pulumi.Input[Sequence[pulumi.Input['RestconfListArgs']]]] = None):
        """
        The set of arguments for constructing a Restconf resource.
        :param pulumi.Input[str] path: A RESTCONF path, e.g. `openconfig-interfaces:interfaces`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] attributes: Map of key-value pairs which represents the YANG leafs and its values.
        :param pulumi.Input[bool] delete: Delete object during destroy operation. Default value is `true`.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input['RestconfListArgs']]] lists: YANG lists.
        """
        pulumi.set(__self__, "path", path)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if lists is not None:
            pulumi.set(__self__, "lists", lists)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        A RESTCONF path, e.g. `openconfig-interfaces:interfaces`.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key-value pairs which represents the YANG leafs and its values.
        """
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Delete object during destroy operation. Default value is `true`.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RestconfListArgs']]]]:
        """
        YANG lists.
        """
        return pulumi.get(self, "lists")

    @lists.setter
    def lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RestconfListArgs']]]]):
        pulumi.set(self, "lists", value)


@pulumi.input_type
class _RestconfState:
    def __init__(__self__, *,
                 attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 delete: Optional[pulumi.Input[bool]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 lists: Optional[pulumi.Input[Sequence[pulumi.Input['RestconfListArgs']]]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Restconf resources.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] attributes: Map of key-value pairs which represents the YANG leafs and its values.
        :param pulumi.Input[bool] delete: Delete object during destroy operation. Default value is `true`.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input['RestconfListArgs']]] lists: YANG lists.
        :param pulumi.Input[str] path: A RESTCONF path, e.g. `openconfig-interfaces:interfaces`.
        """
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if lists is not None:
            pulumi.set(__self__, "lists", lists)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map of key-value pairs which represents the YANG leafs and its values.
        """
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter
    def delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Delete object during destroy operation. Default value is `true`.
        """
        return pulumi.get(self, "delete")

    @delete.setter
    def delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RestconfListArgs']]]]:
        """
        YANG lists.
        """
        return pulumi.get(self, "lists")

    @lists.setter
    def lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RestconfListArgs']]]]):
        pulumi.set(self, "lists", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        A RESTCONF path, e.g. `openconfig-interfaces:interfaces`.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


class Restconf(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 delete: Optional[pulumi.Input[bool]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RestconfListArgs']]]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Restconf resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] attributes: Map of key-value pairs which represents the YANG leafs and its values.
        :param pulumi.Input[bool] delete: Delete object during destroy operation. Default value is `true`.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RestconfListArgs']]]] lists: YANG lists.
        :param pulumi.Input[str] path: A RESTCONF path, e.g. `openconfig-interfaces:interfaces`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RestconfArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Restconf resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RestconfArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RestconfArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 delete: Optional[pulumi.Input[bool]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RestconfListArgs']]]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RestconfArgs.__new__(RestconfArgs)

            __props__.__dict__["attributes"] = attributes
            __props__.__dict__["delete"] = delete
            __props__.__dict__["device"] = device
            __props__.__dict__["lists"] = lists
            if path is None and not opts.urn:
                raise TypeError("Missing required property 'path'")
            __props__.__dict__["path"] = path
        super(Restconf, __self__).__init__(
            'iosxe:iosxe/restconf:Restconf',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            delete: Optional[pulumi.Input[bool]] = None,
            device: Optional[pulumi.Input[str]] = None,
            lists: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RestconfListArgs']]]]] = None,
            path: Optional[pulumi.Input[str]] = None) -> 'Restconf':
        """
        Get an existing Restconf resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] attributes: Map of key-value pairs which represents the YANG leafs and its values.
        :param pulumi.Input[bool] delete: Delete object during destroy operation. Default value is `true`.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RestconfListArgs']]]] lists: YANG lists.
        :param pulumi.Input[str] path: A RESTCONF path, e.g. `openconfig-interfaces:interfaces`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RestconfState.__new__(_RestconfState)

        __props__.__dict__["attributes"] = attributes
        __props__.__dict__["delete"] = delete
        __props__.__dict__["device"] = device
        __props__.__dict__["lists"] = lists
        __props__.__dict__["path"] = path
        return Restconf(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def attributes(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Map of key-value pairs which represents the YANG leafs and its values.
        """
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def delete(self) -> pulumi.Output[bool]:
        """
        Delete object during destroy operation. Default value is `true`.
        """
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def lists(self) -> pulumi.Output[Optional[Sequence['outputs.RestconfList']]]:
        """
        YANG lists.
        """
        return pulumi.get(self, "lists")

    @property
    @pulumi.getter
    def path(self) -> pulumi.Output[str]:
        """
        A RESTCONF path, e.g. `openconfig-interfaces:interfaces`.
        """
        return pulumi.get(self, "path")

