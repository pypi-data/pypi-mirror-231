# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetStaticRouteResult',
    'AwaitableGetStaticRouteResult',
    'get_static_route',
    'get_static_route_output',
]

@pulumi.output_type
class GetStaticRouteResult:
    """
    A collection of values returned by getStaticRoute.
    """
    def __init__(__self__, device=None, id=None, mask=None, next_hops=None, prefix=None):
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if mask and not isinstance(mask, str):
            raise TypeError("Expected argument 'mask' to be a str")
        pulumi.set(__self__, "mask", mask)
        if next_hops and not isinstance(next_hops, list):
            raise TypeError("Expected argument 'next_hops' to be a list")
        pulumi.set(__self__, "next_hops", next_hops)
        if prefix and not isinstance(prefix, str):
            raise TypeError("Expected argument 'prefix' to be a str")
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mask(self) -> str:
        return pulumi.get(self, "mask")

    @property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Sequence['outputs.GetStaticRouteNextHopResult']:
        return pulumi.get(self, "next_hops")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")


class AwaitableGetStaticRouteResult(GetStaticRouteResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStaticRouteResult(
            device=self.device,
            id=self.id,
            mask=self.mask,
            next_hops=self.next_hops,
            prefix=self.prefix)


def get_static_route(device: Optional[str] = None,
                     mask: Optional[str] = None,
                     prefix: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStaticRouteResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['mask'] = mask
    __args__['prefix'] = prefix
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:iosxe/getStaticRoute:getStaticRoute', __args__, opts=opts, typ=GetStaticRouteResult).value

    return AwaitableGetStaticRouteResult(
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        mask=pulumi.get(__ret__, 'mask'),
        next_hops=pulumi.get(__ret__, 'next_hops'),
        prefix=pulumi.get(__ret__, 'prefix'))


@_utilities.lift_output_func(get_static_route)
def get_static_route_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                            mask: Optional[pulumi.Input[str]] = None,
                            prefix: Optional[pulumi.Input[str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetStaticRouteResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
