# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetCtsResult',
    'AwaitableGetCtsResult',
    'get_cts',
    'get_cts_output',
]

@pulumi.output_type
class GetCtsResult:
    """
    A collection of values returned by getCts.
    """
    def __init__(__self__, authorization_list=None, device=None, id=None):
        if authorization_list and not isinstance(authorization_list, str):
            raise TypeError("Expected argument 'authorization_list' to be a str")
        pulumi.set(__self__, "authorization_list", authorization_list)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="authorizationList")
    def authorization_list(self) -> str:
        return pulumi.get(self, "authorization_list")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")


class AwaitableGetCtsResult(GetCtsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCtsResult(
            authorization_list=self.authorization_list,
            device=self.device,
            id=self.id)


def get_cts(device: Optional[str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCtsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['device'] = device
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:iosxe/getCts:getCts', __args__, opts=opts, typ=GetCtsResult).value

    return AwaitableGetCtsResult(
        authorization_list=pulumi.get(__ret__, 'authorization_list'),
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'))


@_utilities.lift_output_func(get_cts)
def get_cts_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCtsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
