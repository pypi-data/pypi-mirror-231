# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetBgpAddressFamilyL2vpnResult',
    'AwaitableGetBgpAddressFamilyL2vpnResult',
    'get_bgp_address_family_l2vpn',
    'get_bgp_address_family_l2vpn_output',
]

@pulumi.output_type
class GetBgpAddressFamilyL2vpnResult:
    """
    A collection of values returned by getBgpAddressFamilyL2vpn.
    """
    def __init__(__self__, af_name=None, asn=None, device=None, id=None):
        if af_name and not isinstance(af_name, str):
            raise TypeError("Expected argument 'af_name' to be a str")
        pulumi.set(__self__, "af_name", af_name)
        if asn and not isinstance(asn, str):
            raise TypeError("Expected argument 'asn' to be a str")
        pulumi.set(__self__, "asn", asn)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="afName")
    def af_name(self) -> str:
        return pulumi.get(self, "af_name")

    @property
    @pulumi.getter
    def asn(self) -> str:
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")


class AwaitableGetBgpAddressFamilyL2vpnResult(GetBgpAddressFamilyL2vpnResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBgpAddressFamilyL2vpnResult(
            af_name=self.af_name,
            asn=self.asn,
            device=self.device,
            id=self.id)


def get_bgp_address_family_l2vpn(af_name: Optional[str] = None,
                                 asn: Optional[str] = None,
                                 device: Optional[str] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBgpAddressFamilyL2vpnResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['afName'] = af_name
    __args__['asn'] = asn
    __args__['device'] = device
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:iosxe/getBgpAddressFamilyL2vpn:getBgpAddressFamilyL2vpn', __args__, opts=opts, typ=GetBgpAddressFamilyL2vpnResult).value

    return AwaitableGetBgpAddressFamilyL2vpnResult(
        af_name=pulumi.get(__ret__, 'af_name'),
        asn=pulumi.get(__ret__, 'asn'),
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'))


@_utilities.lift_output_func(get_bgp_address_family_l2vpn)
def get_bgp_address_family_l2vpn_output(af_name: Optional[pulumi.Input[str]] = None,
                                        asn: Optional[pulumi.Input[str]] = None,
                                        device: Optional[pulumi.Input[Optional[str]]] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBgpAddressFamilyL2vpnResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
