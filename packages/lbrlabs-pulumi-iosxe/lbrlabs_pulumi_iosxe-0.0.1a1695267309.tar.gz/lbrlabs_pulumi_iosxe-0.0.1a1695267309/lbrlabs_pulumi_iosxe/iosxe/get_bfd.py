# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetBfdResult',
    'AwaitableGetBfdResult',
    'get_bfd',
    'get_bfd_output',
]

@pulumi.output_type
class GetBfdResult:
    """
    A collection of values returned by getBfd.
    """
    def __init__(__self__, device=None, id=None, ipv4_both_vrfs=None, ipv4_with_dst_vrfs=None, ipv4_with_src_vrfs=None, ipv4_without_vrfs=None, ipv6_with_both_vrfs=None, ipv6_with_dst_vrfs=None, ipv6_with_src_vrfs=None, ipv6_without_vrfs=None, slow_timers=None):
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ipv4_both_vrfs and not isinstance(ipv4_both_vrfs, list):
            raise TypeError("Expected argument 'ipv4_both_vrfs' to be a list")
        pulumi.set(__self__, "ipv4_both_vrfs", ipv4_both_vrfs)
        if ipv4_with_dst_vrfs and not isinstance(ipv4_with_dst_vrfs, list):
            raise TypeError("Expected argument 'ipv4_with_dst_vrfs' to be a list")
        pulumi.set(__self__, "ipv4_with_dst_vrfs", ipv4_with_dst_vrfs)
        if ipv4_with_src_vrfs and not isinstance(ipv4_with_src_vrfs, list):
            raise TypeError("Expected argument 'ipv4_with_src_vrfs' to be a list")
        pulumi.set(__self__, "ipv4_with_src_vrfs", ipv4_with_src_vrfs)
        if ipv4_without_vrfs and not isinstance(ipv4_without_vrfs, list):
            raise TypeError("Expected argument 'ipv4_without_vrfs' to be a list")
        pulumi.set(__self__, "ipv4_without_vrfs", ipv4_without_vrfs)
        if ipv6_with_both_vrfs and not isinstance(ipv6_with_both_vrfs, list):
            raise TypeError("Expected argument 'ipv6_with_both_vrfs' to be a list")
        pulumi.set(__self__, "ipv6_with_both_vrfs", ipv6_with_both_vrfs)
        if ipv6_with_dst_vrfs and not isinstance(ipv6_with_dst_vrfs, list):
            raise TypeError("Expected argument 'ipv6_with_dst_vrfs' to be a list")
        pulumi.set(__self__, "ipv6_with_dst_vrfs", ipv6_with_dst_vrfs)
        if ipv6_with_src_vrfs and not isinstance(ipv6_with_src_vrfs, list):
            raise TypeError("Expected argument 'ipv6_with_src_vrfs' to be a list")
        pulumi.set(__self__, "ipv6_with_src_vrfs", ipv6_with_src_vrfs)
        if ipv6_without_vrfs and not isinstance(ipv6_without_vrfs, list):
            raise TypeError("Expected argument 'ipv6_without_vrfs' to be a list")
        pulumi.set(__self__, "ipv6_without_vrfs", ipv6_without_vrfs)
        if slow_timers and not isinstance(slow_timers, int):
            raise TypeError("Expected argument 'slow_timers' to be a int")
        pulumi.set(__self__, "slow_timers", slow_timers)

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipv4BothVrfs")
    def ipv4_both_vrfs(self) -> Sequence['outputs.GetBfdIpv4BothVrfResult']:
        return pulumi.get(self, "ipv4_both_vrfs")

    @property
    @pulumi.getter(name="ipv4WithDstVrfs")
    def ipv4_with_dst_vrfs(self) -> Sequence['outputs.GetBfdIpv4WithDstVrfResult']:
        return pulumi.get(self, "ipv4_with_dst_vrfs")

    @property
    @pulumi.getter(name="ipv4WithSrcVrfs")
    def ipv4_with_src_vrfs(self) -> Sequence['outputs.GetBfdIpv4WithSrcVrfResult']:
        return pulumi.get(self, "ipv4_with_src_vrfs")

    @property
    @pulumi.getter(name="ipv4WithoutVrfs")
    def ipv4_without_vrfs(self) -> Sequence['outputs.GetBfdIpv4WithoutVrfResult']:
        return pulumi.get(self, "ipv4_without_vrfs")

    @property
    @pulumi.getter(name="ipv6WithBothVrfs")
    def ipv6_with_both_vrfs(self) -> Sequence['outputs.GetBfdIpv6WithBothVrfResult']:
        return pulumi.get(self, "ipv6_with_both_vrfs")

    @property
    @pulumi.getter(name="ipv6WithDstVrfs")
    def ipv6_with_dst_vrfs(self) -> Sequence['outputs.GetBfdIpv6WithDstVrfResult']:
        return pulumi.get(self, "ipv6_with_dst_vrfs")

    @property
    @pulumi.getter(name="ipv6WithSrcVrfs")
    def ipv6_with_src_vrfs(self) -> Sequence['outputs.GetBfdIpv6WithSrcVrfResult']:
        return pulumi.get(self, "ipv6_with_src_vrfs")

    @property
    @pulumi.getter(name="ipv6WithoutVrfs")
    def ipv6_without_vrfs(self) -> Sequence['outputs.GetBfdIpv6WithoutVrfResult']:
        return pulumi.get(self, "ipv6_without_vrfs")

    @property
    @pulumi.getter(name="slowTimers")
    def slow_timers(self) -> int:
        return pulumi.get(self, "slow_timers")


class AwaitableGetBfdResult(GetBfdResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBfdResult(
            device=self.device,
            id=self.id,
            ipv4_both_vrfs=self.ipv4_both_vrfs,
            ipv4_with_dst_vrfs=self.ipv4_with_dst_vrfs,
            ipv4_with_src_vrfs=self.ipv4_with_src_vrfs,
            ipv4_without_vrfs=self.ipv4_without_vrfs,
            ipv6_with_both_vrfs=self.ipv6_with_both_vrfs,
            ipv6_with_dst_vrfs=self.ipv6_with_dst_vrfs,
            ipv6_with_src_vrfs=self.ipv6_with_src_vrfs,
            ipv6_without_vrfs=self.ipv6_without_vrfs,
            slow_timers=self.slow_timers)


def get_bfd(device: Optional[str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBfdResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['device'] = device
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:iosxe/getBfd:getBfd', __args__, opts=opts, typ=GetBfdResult).value

    return AwaitableGetBfdResult(
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        ipv4_both_vrfs=pulumi.get(__ret__, 'ipv4_both_vrfs'),
        ipv4_with_dst_vrfs=pulumi.get(__ret__, 'ipv4_with_dst_vrfs'),
        ipv4_with_src_vrfs=pulumi.get(__ret__, 'ipv4_with_src_vrfs'),
        ipv4_without_vrfs=pulumi.get(__ret__, 'ipv4_without_vrfs'),
        ipv6_with_both_vrfs=pulumi.get(__ret__, 'ipv6_with_both_vrfs'),
        ipv6_with_dst_vrfs=pulumi.get(__ret__, 'ipv6_with_dst_vrfs'),
        ipv6_with_src_vrfs=pulumi.get(__ret__, 'ipv6_with_src_vrfs'),
        ipv6_without_vrfs=pulumi.get(__ret__, 'ipv6_without_vrfs'),
        slow_timers=pulumi.get(__ret__, 'slow_timers'))


@_utilities.lift_output_func(get_bfd)
def get_bfd_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBfdResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
