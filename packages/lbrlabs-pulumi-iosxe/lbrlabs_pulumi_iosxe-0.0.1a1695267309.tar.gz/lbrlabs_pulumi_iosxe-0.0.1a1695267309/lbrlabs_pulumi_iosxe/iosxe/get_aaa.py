# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAaaResult',
    'AwaitableGetAaaResult',
    'get_aaa',
    'get_aaa_output',
]

@pulumi.output_type
class GetAaaResult:
    """
    A collection of values returned by getAaa.
    """
    def __init__(__self__, device=None, group_server_radii=None, group_server_tacacspluses=None, id=None, new_model=None, server_radius_dynamic_author=None, server_radius_dynamic_author_clients=None, session_id=None):
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if group_server_radii and not isinstance(group_server_radii, list):
            raise TypeError("Expected argument 'group_server_radii' to be a list")
        pulumi.set(__self__, "group_server_radii", group_server_radii)
        if group_server_tacacspluses and not isinstance(group_server_tacacspluses, list):
            raise TypeError("Expected argument 'group_server_tacacspluses' to be a list")
        pulumi.set(__self__, "group_server_tacacspluses", group_server_tacacspluses)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if new_model and not isinstance(new_model, bool):
            raise TypeError("Expected argument 'new_model' to be a bool")
        pulumi.set(__self__, "new_model", new_model)
        if server_radius_dynamic_author and not isinstance(server_radius_dynamic_author, bool):
            raise TypeError("Expected argument 'server_radius_dynamic_author' to be a bool")
        pulumi.set(__self__, "server_radius_dynamic_author", server_radius_dynamic_author)
        if server_radius_dynamic_author_clients and not isinstance(server_radius_dynamic_author_clients, list):
            raise TypeError("Expected argument 'server_radius_dynamic_author_clients' to be a list")
        pulumi.set(__self__, "server_radius_dynamic_author_clients", server_radius_dynamic_author_clients)
        if session_id and not isinstance(session_id, str):
            raise TypeError("Expected argument 'session_id' to be a str")
        pulumi.set(__self__, "session_id", session_id)

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="groupServerRadii")
    def group_server_radii(self) -> Sequence['outputs.GetAaaGroupServerRadiusResult']:
        return pulumi.get(self, "group_server_radii")

    @property
    @pulumi.getter(name="groupServerTacacspluses")
    def group_server_tacacspluses(self) -> Sequence['outputs.GetAaaGroupServerTacacsplusResult']:
        return pulumi.get(self, "group_server_tacacspluses")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="newModel")
    def new_model(self) -> bool:
        return pulumi.get(self, "new_model")

    @property
    @pulumi.getter(name="serverRadiusDynamicAuthor")
    def server_radius_dynamic_author(self) -> bool:
        return pulumi.get(self, "server_radius_dynamic_author")

    @property
    @pulumi.getter(name="serverRadiusDynamicAuthorClients")
    def server_radius_dynamic_author_clients(self) -> Sequence['outputs.GetAaaServerRadiusDynamicAuthorClientResult']:
        return pulumi.get(self, "server_radius_dynamic_author_clients")

    @property
    @pulumi.getter(name="sessionId")
    def session_id(self) -> str:
        return pulumi.get(self, "session_id")


class AwaitableGetAaaResult(GetAaaResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAaaResult(
            device=self.device,
            group_server_radii=self.group_server_radii,
            group_server_tacacspluses=self.group_server_tacacspluses,
            id=self.id,
            new_model=self.new_model,
            server_radius_dynamic_author=self.server_radius_dynamic_author,
            server_radius_dynamic_author_clients=self.server_radius_dynamic_author_clients,
            session_id=self.session_id)


def get_aaa(device: Optional[str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAaaResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['device'] = device
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:iosxe/getAaa:getAaa', __args__, opts=opts, typ=GetAaaResult).value

    return AwaitableGetAaaResult(
        device=pulumi.get(__ret__, 'device'),
        group_server_radii=pulumi.get(__ret__, 'group_server_radii'),
        group_server_tacacspluses=pulumi.get(__ret__, 'group_server_tacacspluses'),
        id=pulumi.get(__ret__, 'id'),
        new_model=pulumi.get(__ret__, 'new_model'),
        server_radius_dynamic_author=pulumi.get(__ret__, 'server_radius_dynamic_author'),
        server_radius_dynamic_author_clients=pulumi.get(__ret__, 'server_radius_dynamic_author_clients'),
        session_id=pulumi.get(__ret__, 'session_id'))


@_utilities.lift_output_func(get_aaa)
def get_aaa_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAaaResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
