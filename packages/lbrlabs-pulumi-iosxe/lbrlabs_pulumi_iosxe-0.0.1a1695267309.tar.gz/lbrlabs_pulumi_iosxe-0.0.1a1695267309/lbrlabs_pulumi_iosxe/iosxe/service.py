# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ServiceArgs', 'Service']

@pulumi.input_type
class ServiceArgs:
    def __init__(__self__, *,
                 call_home: Optional[pulumi.Input[bool]] = None,
                 compress_config: Optional[pulumi.Input[bool]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 dhcp: Optional[pulumi.Input[bool]] = None,
                 pad: Optional[pulumi.Input[bool]] = None,
                 password_encryption: Optional[pulumi.Input[bool]] = None,
                 password_recovery: Optional[pulumi.Input[bool]] = None,
                 sequence_numbers: Optional[pulumi.Input[bool]] = None,
                 tcp_keepalives_in: Optional[pulumi.Input[bool]] = None,
                 tcp_keepalives_out: Optional[pulumi.Input[bool]] = None,
                 timestamps: Optional[pulumi.Input[bool]] = None,
                 timestamps_debug: Optional[pulumi.Input[bool]] = None,
                 timestamps_debug_datetime: Optional[pulumi.Input[bool]] = None,
                 timestamps_debug_datetime_localtime: Optional[pulumi.Input[bool]] = None,
                 timestamps_debug_datetime_msec: Optional[pulumi.Input[bool]] = None,
                 timestamps_debug_datetime_show_timezone: Optional[pulumi.Input[bool]] = None,
                 timestamps_debug_datetime_year: Optional[pulumi.Input[bool]] = None,
                 timestamps_debug_uptime: Optional[pulumi.Input[bool]] = None,
                 timestamps_log: Optional[pulumi.Input[bool]] = None,
                 timestamps_log_datetime: Optional[pulumi.Input[bool]] = None,
                 timestamps_log_datetime_localtime: Optional[pulumi.Input[bool]] = None,
                 timestamps_log_datetime_msec: Optional[pulumi.Input[bool]] = None,
                 timestamps_log_datetime_show_timezone: Optional[pulumi.Input[bool]] = None,
                 timestamps_log_datetime_year: Optional[pulumi.Input[bool]] = None,
                 timestamps_log_uptime: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Service resource.
        :param pulumi.Input[bool] call_home: Enable call-home service
        :param pulumi.Input[bool] compress_config: Compress the configuration file
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] dhcp: Enable DHCP server and relay agent
        :param pulumi.Input[bool] pad: Enable PAD commands
        :param pulumi.Input[bool] password_encryption: Encrypt system passwords
        :param pulumi.Input[bool] password_recovery: Enable password recovery
        :param pulumi.Input[bool] sequence_numbers: Stamp logger messages with a sequence number
        :param pulumi.Input[bool] tcp_keepalives_in: Generate keepalives on idle incoming network connections
        :param pulumi.Input[bool] tcp_keepalives_out: Generate keepalives on idle outgoing network connections
        :param pulumi.Input[bool] timestamps: Timestamp debug/log messages
        :param pulumi.Input[bool] timestamps_debug: Timestamp debug messages
        :param pulumi.Input[bool] timestamps_debug_datetime: Timestamp with date and time
        :param pulumi.Input[bool] timestamps_debug_datetime_localtime: Use local time zone for timestamps
        :param pulumi.Input[bool] timestamps_debug_datetime_msec: Include milliseconds in timestamp
        :param pulumi.Input[bool] timestamps_debug_datetime_show_timezone: Add time zone information to timestamp
        :param pulumi.Input[bool] timestamps_debug_datetime_year: Include year in timestamp
        :param pulumi.Input[bool] timestamps_debug_uptime: Timestamp with system uptime
        :param pulumi.Input[bool] timestamps_log: Timestamp log messages
        :param pulumi.Input[bool] timestamps_log_datetime: Timestamp with date and time
        :param pulumi.Input[bool] timestamps_log_datetime_localtime: Use local time zone for timestamps
        :param pulumi.Input[bool] timestamps_log_datetime_msec: Include milliseconds in timestamp
        :param pulumi.Input[bool] timestamps_log_datetime_show_timezone: Add time zone information to timestamp
        :param pulumi.Input[bool] timestamps_log_datetime_year: Include year in timestamp
        :param pulumi.Input[bool] timestamps_log_uptime: Timestamp with system uptime
        """
        if call_home is not None:
            pulumi.set(__self__, "call_home", call_home)
        if compress_config is not None:
            pulumi.set(__self__, "compress_config", compress_config)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if dhcp is not None:
            pulumi.set(__self__, "dhcp", dhcp)
        if pad is not None:
            pulumi.set(__self__, "pad", pad)
        if password_encryption is not None:
            pulumi.set(__self__, "password_encryption", password_encryption)
        if password_recovery is not None:
            pulumi.set(__self__, "password_recovery", password_recovery)
        if sequence_numbers is not None:
            pulumi.set(__self__, "sequence_numbers", sequence_numbers)
        if tcp_keepalives_in is not None:
            pulumi.set(__self__, "tcp_keepalives_in", tcp_keepalives_in)
        if tcp_keepalives_out is not None:
            pulumi.set(__self__, "tcp_keepalives_out", tcp_keepalives_out)
        if timestamps is not None:
            pulumi.set(__self__, "timestamps", timestamps)
        if timestamps_debug is not None:
            pulumi.set(__self__, "timestamps_debug", timestamps_debug)
        if timestamps_debug_datetime is not None:
            pulumi.set(__self__, "timestamps_debug_datetime", timestamps_debug_datetime)
        if timestamps_debug_datetime_localtime is not None:
            pulumi.set(__self__, "timestamps_debug_datetime_localtime", timestamps_debug_datetime_localtime)
        if timestamps_debug_datetime_msec is not None:
            pulumi.set(__self__, "timestamps_debug_datetime_msec", timestamps_debug_datetime_msec)
        if timestamps_debug_datetime_show_timezone is not None:
            pulumi.set(__self__, "timestamps_debug_datetime_show_timezone", timestamps_debug_datetime_show_timezone)
        if timestamps_debug_datetime_year is not None:
            pulumi.set(__self__, "timestamps_debug_datetime_year", timestamps_debug_datetime_year)
        if timestamps_debug_uptime is not None:
            pulumi.set(__self__, "timestamps_debug_uptime", timestamps_debug_uptime)
        if timestamps_log is not None:
            pulumi.set(__self__, "timestamps_log", timestamps_log)
        if timestamps_log_datetime is not None:
            pulumi.set(__self__, "timestamps_log_datetime", timestamps_log_datetime)
        if timestamps_log_datetime_localtime is not None:
            pulumi.set(__self__, "timestamps_log_datetime_localtime", timestamps_log_datetime_localtime)
        if timestamps_log_datetime_msec is not None:
            pulumi.set(__self__, "timestamps_log_datetime_msec", timestamps_log_datetime_msec)
        if timestamps_log_datetime_show_timezone is not None:
            pulumi.set(__self__, "timestamps_log_datetime_show_timezone", timestamps_log_datetime_show_timezone)
        if timestamps_log_datetime_year is not None:
            pulumi.set(__self__, "timestamps_log_datetime_year", timestamps_log_datetime_year)
        if timestamps_log_uptime is not None:
            pulumi.set(__self__, "timestamps_log_uptime", timestamps_log_uptime)

    @property
    @pulumi.getter(name="callHome")
    def call_home(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable call-home service
        """
        return pulumi.get(self, "call_home")

    @call_home.setter
    def call_home(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "call_home", value)

    @property
    @pulumi.getter(name="compressConfig")
    def compress_config(self) -> Optional[pulumi.Input[bool]]:
        """
        Compress the configuration file
        """
        return pulumi.get(self, "compress_config")

    @compress_config.setter
    def compress_config(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "compress_config", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def dhcp(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable DHCP server and relay agent
        """
        return pulumi.get(self, "dhcp")

    @dhcp.setter
    def dhcp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dhcp", value)

    @property
    @pulumi.getter
    def pad(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable PAD commands
        """
        return pulumi.get(self, "pad")

    @pad.setter
    def pad(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pad", value)

    @property
    @pulumi.getter(name="passwordEncryption")
    def password_encryption(self) -> Optional[pulumi.Input[bool]]:
        """
        Encrypt system passwords
        """
        return pulumi.get(self, "password_encryption")

    @password_encryption.setter
    def password_encryption(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "password_encryption", value)

    @property
    @pulumi.getter(name="passwordRecovery")
    def password_recovery(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable password recovery
        """
        return pulumi.get(self, "password_recovery")

    @password_recovery.setter
    def password_recovery(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "password_recovery", value)

    @property
    @pulumi.getter(name="sequenceNumbers")
    def sequence_numbers(self) -> Optional[pulumi.Input[bool]]:
        """
        Stamp logger messages with a sequence number
        """
        return pulumi.get(self, "sequence_numbers")

    @sequence_numbers.setter
    def sequence_numbers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sequence_numbers", value)

    @property
    @pulumi.getter(name="tcpKeepalivesIn")
    def tcp_keepalives_in(self) -> Optional[pulumi.Input[bool]]:
        """
        Generate keepalives on idle incoming network connections
        """
        return pulumi.get(self, "tcp_keepalives_in")

    @tcp_keepalives_in.setter
    def tcp_keepalives_in(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tcp_keepalives_in", value)

    @property
    @pulumi.getter(name="tcpKeepalivesOut")
    def tcp_keepalives_out(self) -> Optional[pulumi.Input[bool]]:
        """
        Generate keepalives on idle outgoing network connections
        """
        return pulumi.get(self, "tcp_keepalives_out")

    @tcp_keepalives_out.setter
    def tcp_keepalives_out(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tcp_keepalives_out", value)

    @property
    @pulumi.getter
    def timestamps(self) -> Optional[pulumi.Input[bool]]:
        """
        Timestamp debug/log messages
        """
        return pulumi.get(self, "timestamps")

    @timestamps.setter
    def timestamps(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps", value)

    @property
    @pulumi.getter(name="timestampsDebug")
    def timestamps_debug(self) -> Optional[pulumi.Input[bool]]:
        """
        Timestamp debug messages
        """
        return pulumi.get(self, "timestamps_debug")

    @timestamps_debug.setter
    def timestamps_debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps_debug", value)

    @property
    @pulumi.getter(name="timestampsDebugDatetime")
    def timestamps_debug_datetime(self) -> Optional[pulumi.Input[bool]]:
        """
        Timestamp with date and time
        """
        return pulumi.get(self, "timestamps_debug_datetime")

    @timestamps_debug_datetime.setter
    def timestamps_debug_datetime(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps_debug_datetime", value)

    @property
    @pulumi.getter(name="timestampsDebugDatetimeLocaltime")
    def timestamps_debug_datetime_localtime(self) -> Optional[pulumi.Input[bool]]:
        """
        Use local time zone for timestamps
        """
        return pulumi.get(self, "timestamps_debug_datetime_localtime")

    @timestamps_debug_datetime_localtime.setter
    def timestamps_debug_datetime_localtime(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps_debug_datetime_localtime", value)

    @property
    @pulumi.getter(name="timestampsDebugDatetimeMsec")
    def timestamps_debug_datetime_msec(self) -> Optional[pulumi.Input[bool]]:
        """
        Include milliseconds in timestamp
        """
        return pulumi.get(self, "timestamps_debug_datetime_msec")

    @timestamps_debug_datetime_msec.setter
    def timestamps_debug_datetime_msec(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps_debug_datetime_msec", value)

    @property
    @pulumi.getter(name="timestampsDebugDatetimeShowTimezone")
    def timestamps_debug_datetime_show_timezone(self) -> Optional[pulumi.Input[bool]]:
        """
        Add time zone information to timestamp
        """
        return pulumi.get(self, "timestamps_debug_datetime_show_timezone")

    @timestamps_debug_datetime_show_timezone.setter
    def timestamps_debug_datetime_show_timezone(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps_debug_datetime_show_timezone", value)

    @property
    @pulumi.getter(name="timestampsDebugDatetimeYear")
    def timestamps_debug_datetime_year(self) -> Optional[pulumi.Input[bool]]:
        """
        Include year in timestamp
        """
        return pulumi.get(self, "timestamps_debug_datetime_year")

    @timestamps_debug_datetime_year.setter
    def timestamps_debug_datetime_year(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps_debug_datetime_year", value)

    @property
    @pulumi.getter(name="timestampsDebugUptime")
    def timestamps_debug_uptime(self) -> Optional[pulumi.Input[bool]]:
        """
        Timestamp with system uptime
        """
        return pulumi.get(self, "timestamps_debug_uptime")

    @timestamps_debug_uptime.setter
    def timestamps_debug_uptime(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps_debug_uptime", value)

    @property
    @pulumi.getter(name="timestampsLog")
    def timestamps_log(self) -> Optional[pulumi.Input[bool]]:
        """
        Timestamp log messages
        """
        return pulumi.get(self, "timestamps_log")

    @timestamps_log.setter
    def timestamps_log(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps_log", value)

    @property
    @pulumi.getter(name="timestampsLogDatetime")
    def timestamps_log_datetime(self) -> Optional[pulumi.Input[bool]]:
        """
        Timestamp with date and time
        """
        return pulumi.get(self, "timestamps_log_datetime")

    @timestamps_log_datetime.setter
    def timestamps_log_datetime(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps_log_datetime", value)

    @property
    @pulumi.getter(name="timestampsLogDatetimeLocaltime")
    def timestamps_log_datetime_localtime(self) -> Optional[pulumi.Input[bool]]:
        """
        Use local time zone for timestamps
        """
        return pulumi.get(self, "timestamps_log_datetime_localtime")

    @timestamps_log_datetime_localtime.setter
    def timestamps_log_datetime_localtime(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps_log_datetime_localtime", value)

    @property
    @pulumi.getter(name="timestampsLogDatetimeMsec")
    def timestamps_log_datetime_msec(self) -> Optional[pulumi.Input[bool]]:
        """
        Include milliseconds in timestamp
        """
        return pulumi.get(self, "timestamps_log_datetime_msec")

    @timestamps_log_datetime_msec.setter
    def timestamps_log_datetime_msec(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps_log_datetime_msec", value)

    @property
    @pulumi.getter(name="timestampsLogDatetimeShowTimezone")
    def timestamps_log_datetime_show_timezone(self) -> Optional[pulumi.Input[bool]]:
        """
        Add time zone information to timestamp
        """
        return pulumi.get(self, "timestamps_log_datetime_show_timezone")

    @timestamps_log_datetime_show_timezone.setter
    def timestamps_log_datetime_show_timezone(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps_log_datetime_show_timezone", value)

    @property
    @pulumi.getter(name="timestampsLogDatetimeYear")
    def timestamps_log_datetime_year(self) -> Optional[pulumi.Input[bool]]:
        """
        Include year in timestamp
        """
        return pulumi.get(self, "timestamps_log_datetime_year")

    @timestamps_log_datetime_year.setter
    def timestamps_log_datetime_year(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps_log_datetime_year", value)

    @property
    @pulumi.getter(name="timestampsLogUptime")
    def timestamps_log_uptime(self) -> Optional[pulumi.Input[bool]]:
        """
        Timestamp with system uptime
        """
        return pulumi.get(self, "timestamps_log_uptime")

    @timestamps_log_uptime.setter
    def timestamps_log_uptime(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps_log_uptime", value)


@pulumi.input_type
class _ServiceState:
    def __init__(__self__, *,
                 call_home: Optional[pulumi.Input[bool]] = None,
                 compress_config: Optional[pulumi.Input[bool]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 dhcp: Optional[pulumi.Input[bool]] = None,
                 pad: Optional[pulumi.Input[bool]] = None,
                 password_encryption: Optional[pulumi.Input[bool]] = None,
                 password_recovery: Optional[pulumi.Input[bool]] = None,
                 sequence_numbers: Optional[pulumi.Input[bool]] = None,
                 tcp_keepalives_in: Optional[pulumi.Input[bool]] = None,
                 tcp_keepalives_out: Optional[pulumi.Input[bool]] = None,
                 timestamps: Optional[pulumi.Input[bool]] = None,
                 timestamps_debug: Optional[pulumi.Input[bool]] = None,
                 timestamps_debug_datetime: Optional[pulumi.Input[bool]] = None,
                 timestamps_debug_datetime_localtime: Optional[pulumi.Input[bool]] = None,
                 timestamps_debug_datetime_msec: Optional[pulumi.Input[bool]] = None,
                 timestamps_debug_datetime_show_timezone: Optional[pulumi.Input[bool]] = None,
                 timestamps_debug_datetime_year: Optional[pulumi.Input[bool]] = None,
                 timestamps_debug_uptime: Optional[pulumi.Input[bool]] = None,
                 timestamps_log: Optional[pulumi.Input[bool]] = None,
                 timestamps_log_datetime: Optional[pulumi.Input[bool]] = None,
                 timestamps_log_datetime_localtime: Optional[pulumi.Input[bool]] = None,
                 timestamps_log_datetime_msec: Optional[pulumi.Input[bool]] = None,
                 timestamps_log_datetime_show_timezone: Optional[pulumi.Input[bool]] = None,
                 timestamps_log_datetime_year: Optional[pulumi.Input[bool]] = None,
                 timestamps_log_uptime: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Service resources.
        :param pulumi.Input[bool] call_home: Enable call-home service
        :param pulumi.Input[bool] compress_config: Compress the configuration file
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] dhcp: Enable DHCP server and relay agent
        :param pulumi.Input[bool] pad: Enable PAD commands
        :param pulumi.Input[bool] password_encryption: Encrypt system passwords
        :param pulumi.Input[bool] password_recovery: Enable password recovery
        :param pulumi.Input[bool] sequence_numbers: Stamp logger messages with a sequence number
        :param pulumi.Input[bool] tcp_keepalives_in: Generate keepalives on idle incoming network connections
        :param pulumi.Input[bool] tcp_keepalives_out: Generate keepalives on idle outgoing network connections
        :param pulumi.Input[bool] timestamps: Timestamp debug/log messages
        :param pulumi.Input[bool] timestamps_debug: Timestamp debug messages
        :param pulumi.Input[bool] timestamps_debug_datetime: Timestamp with date and time
        :param pulumi.Input[bool] timestamps_debug_datetime_localtime: Use local time zone for timestamps
        :param pulumi.Input[bool] timestamps_debug_datetime_msec: Include milliseconds in timestamp
        :param pulumi.Input[bool] timestamps_debug_datetime_show_timezone: Add time zone information to timestamp
        :param pulumi.Input[bool] timestamps_debug_datetime_year: Include year in timestamp
        :param pulumi.Input[bool] timestamps_debug_uptime: Timestamp with system uptime
        :param pulumi.Input[bool] timestamps_log: Timestamp log messages
        :param pulumi.Input[bool] timestamps_log_datetime: Timestamp with date and time
        :param pulumi.Input[bool] timestamps_log_datetime_localtime: Use local time zone for timestamps
        :param pulumi.Input[bool] timestamps_log_datetime_msec: Include milliseconds in timestamp
        :param pulumi.Input[bool] timestamps_log_datetime_show_timezone: Add time zone information to timestamp
        :param pulumi.Input[bool] timestamps_log_datetime_year: Include year in timestamp
        :param pulumi.Input[bool] timestamps_log_uptime: Timestamp with system uptime
        """
        if call_home is not None:
            pulumi.set(__self__, "call_home", call_home)
        if compress_config is not None:
            pulumi.set(__self__, "compress_config", compress_config)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if dhcp is not None:
            pulumi.set(__self__, "dhcp", dhcp)
        if pad is not None:
            pulumi.set(__self__, "pad", pad)
        if password_encryption is not None:
            pulumi.set(__self__, "password_encryption", password_encryption)
        if password_recovery is not None:
            pulumi.set(__self__, "password_recovery", password_recovery)
        if sequence_numbers is not None:
            pulumi.set(__self__, "sequence_numbers", sequence_numbers)
        if tcp_keepalives_in is not None:
            pulumi.set(__self__, "tcp_keepalives_in", tcp_keepalives_in)
        if tcp_keepalives_out is not None:
            pulumi.set(__self__, "tcp_keepalives_out", tcp_keepalives_out)
        if timestamps is not None:
            pulumi.set(__self__, "timestamps", timestamps)
        if timestamps_debug is not None:
            pulumi.set(__self__, "timestamps_debug", timestamps_debug)
        if timestamps_debug_datetime is not None:
            pulumi.set(__self__, "timestamps_debug_datetime", timestamps_debug_datetime)
        if timestamps_debug_datetime_localtime is not None:
            pulumi.set(__self__, "timestamps_debug_datetime_localtime", timestamps_debug_datetime_localtime)
        if timestamps_debug_datetime_msec is not None:
            pulumi.set(__self__, "timestamps_debug_datetime_msec", timestamps_debug_datetime_msec)
        if timestamps_debug_datetime_show_timezone is not None:
            pulumi.set(__self__, "timestamps_debug_datetime_show_timezone", timestamps_debug_datetime_show_timezone)
        if timestamps_debug_datetime_year is not None:
            pulumi.set(__self__, "timestamps_debug_datetime_year", timestamps_debug_datetime_year)
        if timestamps_debug_uptime is not None:
            pulumi.set(__self__, "timestamps_debug_uptime", timestamps_debug_uptime)
        if timestamps_log is not None:
            pulumi.set(__self__, "timestamps_log", timestamps_log)
        if timestamps_log_datetime is not None:
            pulumi.set(__self__, "timestamps_log_datetime", timestamps_log_datetime)
        if timestamps_log_datetime_localtime is not None:
            pulumi.set(__self__, "timestamps_log_datetime_localtime", timestamps_log_datetime_localtime)
        if timestamps_log_datetime_msec is not None:
            pulumi.set(__self__, "timestamps_log_datetime_msec", timestamps_log_datetime_msec)
        if timestamps_log_datetime_show_timezone is not None:
            pulumi.set(__self__, "timestamps_log_datetime_show_timezone", timestamps_log_datetime_show_timezone)
        if timestamps_log_datetime_year is not None:
            pulumi.set(__self__, "timestamps_log_datetime_year", timestamps_log_datetime_year)
        if timestamps_log_uptime is not None:
            pulumi.set(__self__, "timestamps_log_uptime", timestamps_log_uptime)

    @property
    @pulumi.getter(name="callHome")
    def call_home(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable call-home service
        """
        return pulumi.get(self, "call_home")

    @call_home.setter
    def call_home(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "call_home", value)

    @property
    @pulumi.getter(name="compressConfig")
    def compress_config(self) -> Optional[pulumi.Input[bool]]:
        """
        Compress the configuration file
        """
        return pulumi.get(self, "compress_config")

    @compress_config.setter
    def compress_config(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "compress_config", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def dhcp(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable DHCP server and relay agent
        """
        return pulumi.get(self, "dhcp")

    @dhcp.setter
    def dhcp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dhcp", value)

    @property
    @pulumi.getter
    def pad(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable PAD commands
        """
        return pulumi.get(self, "pad")

    @pad.setter
    def pad(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pad", value)

    @property
    @pulumi.getter(name="passwordEncryption")
    def password_encryption(self) -> Optional[pulumi.Input[bool]]:
        """
        Encrypt system passwords
        """
        return pulumi.get(self, "password_encryption")

    @password_encryption.setter
    def password_encryption(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "password_encryption", value)

    @property
    @pulumi.getter(name="passwordRecovery")
    def password_recovery(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable password recovery
        """
        return pulumi.get(self, "password_recovery")

    @password_recovery.setter
    def password_recovery(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "password_recovery", value)

    @property
    @pulumi.getter(name="sequenceNumbers")
    def sequence_numbers(self) -> Optional[pulumi.Input[bool]]:
        """
        Stamp logger messages with a sequence number
        """
        return pulumi.get(self, "sequence_numbers")

    @sequence_numbers.setter
    def sequence_numbers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sequence_numbers", value)

    @property
    @pulumi.getter(name="tcpKeepalivesIn")
    def tcp_keepalives_in(self) -> Optional[pulumi.Input[bool]]:
        """
        Generate keepalives on idle incoming network connections
        """
        return pulumi.get(self, "tcp_keepalives_in")

    @tcp_keepalives_in.setter
    def tcp_keepalives_in(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tcp_keepalives_in", value)

    @property
    @pulumi.getter(name="tcpKeepalivesOut")
    def tcp_keepalives_out(self) -> Optional[pulumi.Input[bool]]:
        """
        Generate keepalives on idle outgoing network connections
        """
        return pulumi.get(self, "tcp_keepalives_out")

    @tcp_keepalives_out.setter
    def tcp_keepalives_out(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tcp_keepalives_out", value)

    @property
    @pulumi.getter
    def timestamps(self) -> Optional[pulumi.Input[bool]]:
        """
        Timestamp debug/log messages
        """
        return pulumi.get(self, "timestamps")

    @timestamps.setter
    def timestamps(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps", value)

    @property
    @pulumi.getter(name="timestampsDebug")
    def timestamps_debug(self) -> Optional[pulumi.Input[bool]]:
        """
        Timestamp debug messages
        """
        return pulumi.get(self, "timestamps_debug")

    @timestamps_debug.setter
    def timestamps_debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps_debug", value)

    @property
    @pulumi.getter(name="timestampsDebugDatetime")
    def timestamps_debug_datetime(self) -> Optional[pulumi.Input[bool]]:
        """
        Timestamp with date and time
        """
        return pulumi.get(self, "timestamps_debug_datetime")

    @timestamps_debug_datetime.setter
    def timestamps_debug_datetime(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps_debug_datetime", value)

    @property
    @pulumi.getter(name="timestampsDebugDatetimeLocaltime")
    def timestamps_debug_datetime_localtime(self) -> Optional[pulumi.Input[bool]]:
        """
        Use local time zone for timestamps
        """
        return pulumi.get(self, "timestamps_debug_datetime_localtime")

    @timestamps_debug_datetime_localtime.setter
    def timestamps_debug_datetime_localtime(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps_debug_datetime_localtime", value)

    @property
    @pulumi.getter(name="timestampsDebugDatetimeMsec")
    def timestamps_debug_datetime_msec(self) -> Optional[pulumi.Input[bool]]:
        """
        Include milliseconds in timestamp
        """
        return pulumi.get(self, "timestamps_debug_datetime_msec")

    @timestamps_debug_datetime_msec.setter
    def timestamps_debug_datetime_msec(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps_debug_datetime_msec", value)

    @property
    @pulumi.getter(name="timestampsDebugDatetimeShowTimezone")
    def timestamps_debug_datetime_show_timezone(self) -> Optional[pulumi.Input[bool]]:
        """
        Add time zone information to timestamp
        """
        return pulumi.get(self, "timestamps_debug_datetime_show_timezone")

    @timestamps_debug_datetime_show_timezone.setter
    def timestamps_debug_datetime_show_timezone(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps_debug_datetime_show_timezone", value)

    @property
    @pulumi.getter(name="timestampsDebugDatetimeYear")
    def timestamps_debug_datetime_year(self) -> Optional[pulumi.Input[bool]]:
        """
        Include year in timestamp
        """
        return pulumi.get(self, "timestamps_debug_datetime_year")

    @timestamps_debug_datetime_year.setter
    def timestamps_debug_datetime_year(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps_debug_datetime_year", value)

    @property
    @pulumi.getter(name="timestampsDebugUptime")
    def timestamps_debug_uptime(self) -> Optional[pulumi.Input[bool]]:
        """
        Timestamp with system uptime
        """
        return pulumi.get(self, "timestamps_debug_uptime")

    @timestamps_debug_uptime.setter
    def timestamps_debug_uptime(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps_debug_uptime", value)

    @property
    @pulumi.getter(name="timestampsLog")
    def timestamps_log(self) -> Optional[pulumi.Input[bool]]:
        """
        Timestamp log messages
        """
        return pulumi.get(self, "timestamps_log")

    @timestamps_log.setter
    def timestamps_log(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps_log", value)

    @property
    @pulumi.getter(name="timestampsLogDatetime")
    def timestamps_log_datetime(self) -> Optional[pulumi.Input[bool]]:
        """
        Timestamp with date and time
        """
        return pulumi.get(self, "timestamps_log_datetime")

    @timestamps_log_datetime.setter
    def timestamps_log_datetime(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps_log_datetime", value)

    @property
    @pulumi.getter(name="timestampsLogDatetimeLocaltime")
    def timestamps_log_datetime_localtime(self) -> Optional[pulumi.Input[bool]]:
        """
        Use local time zone for timestamps
        """
        return pulumi.get(self, "timestamps_log_datetime_localtime")

    @timestamps_log_datetime_localtime.setter
    def timestamps_log_datetime_localtime(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps_log_datetime_localtime", value)

    @property
    @pulumi.getter(name="timestampsLogDatetimeMsec")
    def timestamps_log_datetime_msec(self) -> Optional[pulumi.Input[bool]]:
        """
        Include milliseconds in timestamp
        """
        return pulumi.get(self, "timestamps_log_datetime_msec")

    @timestamps_log_datetime_msec.setter
    def timestamps_log_datetime_msec(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps_log_datetime_msec", value)

    @property
    @pulumi.getter(name="timestampsLogDatetimeShowTimezone")
    def timestamps_log_datetime_show_timezone(self) -> Optional[pulumi.Input[bool]]:
        """
        Add time zone information to timestamp
        """
        return pulumi.get(self, "timestamps_log_datetime_show_timezone")

    @timestamps_log_datetime_show_timezone.setter
    def timestamps_log_datetime_show_timezone(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps_log_datetime_show_timezone", value)

    @property
    @pulumi.getter(name="timestampsLogDatetimeYear")
    def timestamps_log_datetime_year(self) -> Optional[pulumi.Input[bool]]:
        """
        Include year in timestamp
        """
        return pulumi.get(self, "timestamps_log_datetime_year")

    @timestamps_log_datetime_year.setter
    def timestamps_log_datetime_year(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps_log_datetime_year", value)

    @property
    @pulumi.getter(name="timestampsLogUptime")
    def timestamps_log_uptime(self) -> Optional[pulumi.Input[bool]]:
        """
        Timestamp with system uptime
        """
        return pulumi.get(self, "timestamps_log_uptime")

    @timestamps_log_uptime.setter
    def timestamps_log_uptime(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamps_log_uptime", value)


class Service(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 call_home: Optional[pulumi.Input[bool]] = None,
                 compress_config: Optional[pulumi.Input[bool]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 dhcp: Optional[pulumi.Input[bool]] = None,
                 pad: Optional[pulumi.Input[bool]] = None,
                 password_encryption: Optional[pulumi.Input[bool]] = None,
                 password_recovery: Optional[pulumi.Input[bool]] = None,
                 sequence_numbers: Optional[pulumi.Input[bool]] = None,
                 tcp_keepalives_in: Optional[pulumi.Input[bool]] = None,
                 tcp_keepalives_out: Optional[pulumi.Input[bool]] = None,
                 timestamps: Optional[pulumi.Input[bool]] = None,
                 timestamps_debug: Optional[pulumi.Input[bool]] = None,
                 timestamps_debug_datetime: Optional[pulumi.Input[bool]] = None,
                 timestamps_debug_datetime_localtime: Optional[pulumi.Input[bool]] = None,
                 timestamps_debug_datetime_msec: Optional[pulumi.Input[bool]] = None,
                 timestamps_debug_datetime_show_timezone: Optional[pulumi.Input[bool]] = None,
                 timestamps_debug_datetime_year: Optional[pulumi.Input[bool]] = None,
                 timestamps_debug_uptime: Optional[pulumi.Input[bool]] = None,
                 timestamps_log: Optional[pulumi.Input[bool]] = None,
                 timestamps_log_datetime: Optional[pulumi.Input[bool]] = None,
                 timestamps_log_datetime_localtime: Optional[pulumi.Input[bool]] = None,
                 timestamps_log_datetime_msec: Optional[pulumi.Input[bool]] = None,
                 timestamps_log_datetime_show_timezone: Optional[pulumi.Input[bool]] = None,
                 timestamps_log_datetime_year: Optional[pulumi.Input[bool]] = None,
                 timestamps_log_uptime: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Create a Service resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] call_home: Enable call-home service
        :param pulumi.Input[bool] compress_config: Compress the configuration file
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] dhcp: Enable DHCP server and relay agent
        :param pulumi.Input[bool] pad: Enable PAD commands
        :param pulumi.Input[bool] password_encryption: Encrypt system passwords
        :param pulumi.Input[bool] password_recovery: Enable password recovery
        :param pulumi.Input[bool] sequence_numbers: Stamp logger messages with a sequence number
        :param pulumi.Input[bool] tcp_keepalives_in: Generate keepalives on idle incoming network connections
        :param pulumi.Input[bool] tcp_keepalives_out: Generate keepalives on idle outgoing network connections
        :param pulumi.Input[bool] timestamps: Timestamp debug/log messages
        :param pulumi.Input[bool] timestamps_debug: Timestamp debug messages
        :param pulumi.Input[bool] timestamps_debug_datetime: Timestamp with date and time
        :param pulumi.Input[bool] timestamps_debug_datetime_localtime: Use local time zone for timestamps
        :param pulumi.Input[bool] timestamps_debug_datetime_msec: Include milliseconds in timestamp
        :param pulumi.Input[bool] timestamps_debug_datetime_show_timezone: Add time zone information to timestamp
        :param pulumi.Input[bool] timestamps_debug_datetime_year: Include year in timestamp
        :param pulumi.Input[bool] timestamps_debug_uptime: Timestamp with system uptime
        :param pulumi.Input[bool] timestamps_log: Timestamp log messages
        :param pulumi.Input[bool] timestamps_log_datetime: Timestamp with date and time
        :param pulumi.Input[bool] timestamps_log_datetime_localtime: Use local time zone for timestamps
        :param pulumi.Input[bool] timestamps_log_datetime_msec: Include milliseconds in timestamp
        :param pulumi.Input[bool] timestamps_log_datetime_show_timezone: Add time zone information to timestamp
        :param pulumi.Input[bool] timestamps_log_datetime_year: Include year in timestamp
        :param pulumi.Input[bool] timestamps_log_uptime: Timestamp with system uptime
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ServiceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Service resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 call_home: Optional[pulumi.Input[bool]] = None,
                 compress_config: Optional[pulumi.Input[bool]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 dhcp: Optional[pulumi.Input[bool]] = None,
                 pad: Optional[pulumi.Input[bool]] = None,
                 password_encryption: Optional[pulumi.Input[bool]] = None,
                 password_recovery: Optional[pulumi.Input[bool]] = None,
                 sequence_numbers: Optional[pulumi.Input[bool]] = None,
                 tcp_keepalives_in: Optional[pulumi.Input[bool]] = None,
                 tcp_keepalives_out: Optional[pulumi.Input[bool]] = None,
                 timestamps: Optional[pulumi.Input[bool]] = None,
                 timestamps_debug: Optional[pulumi.Input[bool]] = None,
                 timestamps_debug_datetime: Optional[pulumi.Input[bool]] = None,
                 timestamps_debug_datetime_localtime: Optional[pulumi.Input[bool]] = None,
                 timestamps_debug_datetime_msec: Optional[pulumi.Input[bool]] = None,
                 timestamps_debug_datetime_show_timezone: Optional[pulumi.Input[bool]] = None,
                 timestamps_debug_datetime_year: Optional[pulumi.Input[bool]] = None,
                 timestamps_debug_uptime: Optional[pulumi.Input[bool]] = None,
                 timestamps_log: Optional[pulumi.Input[bool]] = None,
                 timestamps_log_datetime: Optional[pulumi.Input[bool]] = None,
                 timestamps_log_datetime_localtime: Optional[pulumi.Input[bool]] = None,
                 timestamps_log_datetime_msec: Optional[pulumi.Input[bool]] = None,
                 timestamps_log_datetime_show_timezone: Optional[pulumi.Input[bool]] = None,
                 timestamps_log_datetime_year: Optional[pulumi.Input[bool]] = None,
                 timestamps_log_uptime: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceArgs.__new__(ServiceArgs)

            __props__.__dict__["call_home"] = call_home
            __props__.__dict__["compress_config"] = compress_config
            __props__.__dict__["device"] = device
            __props__.__dict__["dhcp"] = dhcp
            __props__.__dict__["pad"] = pad
            __props__.__dict__["password_encryption"] = password_encryption
            __props__.__dict__["password_recovery"] = password_recovery
            __props__.__dict__["sequence_numbers"] = sequence_numbers
            __props__.__dict__["tcp_keepalives_in"] = tcp_keepalives_in
            __props__.__dict__["tcp_keepalives_out"] = tcp_keepalives_out
            __props__.__dict__["timestamps"] = timestamps
            __props__.__dict__["timestamps_debug"] = timestamps_debug
            __props__.__dict__["timestamps_debug_datetime"] = timestamps_debug_datetime
            __props__.__dict__["timestamps_debug_datetime_localtime"] = timestamps_debug_datetime_localtime
            __props__.__dict__["timestamps_debug_datetime_msec"] = timestamps_debug_datetime_msec
            __props__.__dict__["timestamps_debug_datetime_show_timezone"] = timestamps_debug_datetime_show_timezone
            __props__.__dict__["timestamps_debug_datetime_year"] = timestamps_debug_datetime_year
            __props__.__dict__["timestamps_debug_uptime"] = timestamps_debug_uptime
            __props__.__dict__["timestamps_log"] = timestamps_log
            __props__.__dict__["timestamps_log_datetime"] = timestamps_log_datetime
            __props__.__dict__["timestamps_log_datetime_localtime"] = timestamps_log_datetime_localtime
            __props__.__dict__["timestamps_log_datetime_msec"] = timestamps_log_datetime_msec
            __props__.__dict__["timestamps_log_datetime_show_timezone"] = timestamps_log_datetime_show_timezone
            __props__.__dict__["timestamps_log_datetime_year"] = timestamps_log_datetime_year
            __props__.__dict__["timestamps_log_uptime"] = timestamps_log_uptime
        super(Service, __self__).__init__(
            'iosxe:iosxe/service:Service',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            call_home: Optional[pulumi.Input[bool]] = None,
            compress_config: Optional[pulumi.Input[bool]] = None,
            device: Optional[pulumi.Input[str]] = None,
            dhcp: Optional[pulumi.Input[bool]] = None,
            pad: Optional[pulumi.Input[bool]] = None,
            password_encryption: Optional[pulumi.Input[bool]] = None,
            password_recovery: Optional[pulumi.Input[bool]] = None,
            sequence_numbers: Optional[pulumi.Input[bool]] = None,
            tcp_keepalives_in: Optional[pulumi.Input[bool]] = None,
            tcp_keepalives_out: Optional[pulumi.Input[bool]] = None,
            timestamps: Optional[pulumi.Input[bool]] = None,
            timestamps_debug: Optional[pulumi.Input[bool]] = None,
            timestamps_debug_datetime: Optional[pulumi.Input[bool]] = None,
            timestamps_debug_datetime_localtime: Optional[pulumi.Input[bool]] = None,
            timestamps_debug_datetime_msec: Optional[pulumi.Input[bool]] = None,
            timestamps_debug_datetime_show_timezone: Optional[pulumi.Input[bool]] = None,
            timestamps_debug_datetime_year: Optional[pulumi.Input[bool]] = None,
            timestamps_debug_uptime: Optional[pulumi.Input[bool]] = None,
            timestamps_log: Optional[pulumi.Input[bool]] = None,
            timestamps_log_datetime: Optional[pulumi.Input[bool]] = None,
            timestamps_log_datetime_localtime: Optional[pulumi.Input[bool]] = None,
            timestamps_log_datetime_msec: Optional[pulumi.Input[bool]] = None,
            timestamps_log_datetime_show_timezone: Optional[pulumi.Input[bool]] = None,
            timestamps_log_datetime_year: Optional[pulumi.Input[bool]] = None,
            timestamps_log_uptime: Optional[pulumi.Input[bool]] = None) -> 'Service':
        """
        Get an existing Service resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] call_home: Enable call-home service
        :param pulumi.Input[bool] compress_config: Compress the configuration file
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] dhcp: Enable DHCP server and relay agent
        :param pulumi.Input[bool] pad: Enable PAD commands
        :param pulumi.Input[bool] password_encryption: Encrypt system passwords
        :param pulumi.Input[bool] password_recovery: Enable password recovery
        :param pulumi.Input[bool] sequence_numbers: Stamp logger messages with a sequence number
        :param pulumi.Input[bool] tcp_keepalives_in: Generate keepalives on idle incoming network connections
        :param pulumi.Input[bool] tcp_keepalives_out: Generate keepalives on idle outgoing network connections
        :param pulumi.Input[bool] timestamps: Timestamp debug/log messages
        :param pulumi.Input[bool] timestamps_debug: Timestamp debug messages
        :param pulumi.Input[bool] timestamps_debug_datetime: Timestamp with date and time
        :param pulumi.Input[bool] timestamps_debug_datetime_localtime: Use local time zone for timestamps
        :param pulumi.Input[bool] timestamps_debug_datetime_msec: Include milliseconds in timestamp
        :param pulumi.Input[bool] timestamps_debug_datetime_show_timezone: Add time zone information to timestamp
        :param pulumi.Input[bool] timestamps_debug_datetime_year: Include year in timestamp
        :param pulumi.Input[bool] timestamps_debug_uptime: Timestamp with system uptime
        :param pulumi.Input[bool] timestamps_log: Timestamp log messages
        :param pulumi.Input[bool] timestamps_log_datetime: Timestamp with date and time
        :param pulumi.Input[bool] timestamps_log_datetime_localtime: Use local time zone for timestamps
        :param pulumi.Input[bool] timestamps_log_datetime_msec: Include milliseconds in timestamp
        :param pulumi.Input[bool] timestamps_log_datetime_show_timezone: Add time zone information to timestamp
        :param pulumi.Input[bool] timestamps_log_datetime_year: Include year in timestamp
        :param pulumi.Input[bool] timestamps_log_uptime: Timestamp with system uptime
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceState.__new__(_ServiceState)

        __props__.__dict__["call_home"] = call_home
        __props__.__dict__["compress_config"] = compress_config
        __props__.__dict__["device"] = device
        __props__.__dict__["dhcp"] = dhcp
        __props__.__dict__["pad"] = pad
        __props__.__dict__["password_encryption"] = password_encryption
        __props__.__dict__["password_recovery"] = password_recovery
        __props__.__dict__["sequence_numbers"] = sequence_numbers
        __props__.__dict__["tcp_keepalives_in"] = tcp_keepalives_in
        __props__.__dict__["tcp_keepalives_out"] = tcp_keepalives_out
        __props__.__dict__["timestamps"] = timestamps
        __props__.__dict__["timestamps_debug"] = timestamps_debug
        __props__.__dict__["timestamps_debug_datetime"] = timestamps_debug_datetime
        __props__.__dict__["timestamps_debug_datetime_localtime"] = timestamps_debug_datetime_localtime
        __props__.__dict__["timestamps_debug_datetime_msec"] = timestamps_debug_datetime_msec
        __props__.__dict__["timestamps_debug_datetime_show_timezone"] = timestamps_debug_datetime_show_timezone
        __props__.__dict__["timestamps_debug_datetime_year"] = timestamps_debug_datetime_year
        __props__.__dict__["timestamps_debug_uptime"] = timestamps_debug_uptime
        __props__.__dict__["timestamps_log"] = timestamps_log
        __props__.__dict__["timestamps_log_datetime"] = timestamps_log_datetime
        __props__.__dict__["timestamps_log_datetime_localtime"] = timestamps_log_datetime_localtime
        __props__.__dict__["timestamps_log_datetime_msec"] = timestamps_log_datetime_msec
        __props__.__dict__["timestamps_log_datetime_show_timezone"] = timestamps_log_datetime_show_timezone
        __props__.__dict__["timestamps_log_datetime_year"] = timestamps_log_datetime_year
        __props__.__dict__["timestamps_log_uptime"] = timestamps_log_uptime
        return Service(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="callHome")
    def call_home(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable call-home service
        """
        return pulumi.get(self, "call_home")

    @property
    @pulumi.getter(name="compressConfig")
    def compress_config(self) -> pulumi.Output[Optional[bool]]:
        """
        Compress the configuration file
        """
        return pulumi.get(self, "compress_config")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def dhcp(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable DHCP server and relay agent
        """
        return pulumi.get(self, "dhcp")

    @property
    @pulumi.getter
    def pad(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable PAD commands
        """
        return pulumi.get(self, "pad")

    @property
    @pulumi.getter(name="passwordEncryption")
    def password_encryption(self) -> pulumi.Output[Optional[bool]]:
        """
        Encrypt system passwords
        """
        return pulumi.get(self, "password_encryption")

    @property
    @pulumi.getter(name="passwordRecovery")
    def password_recovery(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable password recovery
        """
        return pulumi.get(self, "password_recovery")

    @property
    @pulumi.getter(name="sequenceNumbers")
    def sequence_numbers(self) -> pulumi.Output[Optional[bool]]:
        """
        Stamp logger messages with a sequence number
        """
        return pulumi.get(self, "sequence_numbers")

    @property
    @pulumi.getter(name="tcpKeepalivesIn")
    def tcp_keepalives_in(self) -> pulumi.Output[Optional[bool]]:
        """
        Generate keepalives on idle incoming network connections
        """
        return pulumi.get(self, "tcp_keepalives_in")

    @property
    @pulumi.getter(name="tcpKeepalivesOut")
    def tcp_keepalives_out(self) -> pulumi.Output[Optional[bool]]:
        """
        Generate keepalives on idle outgoing network connections
        """
        return pulumi.get(self, "tcp_keepalives_out")

    @property
    @pulumi.getter
    def timestamps(self) -> pulumi.Output[Optional[bool]]:
        """
        Timestamp debug/log messages
        """
        return pulumi.get(self, "timestamps")

    @property
    @pulumi.getter(name="timestampsDebug")
    def timestamps_debug(self) -> pulumi.Output[Optional[bool]]:
        """
        Timestamp debug messages
        """
        return pulumi.get(self, "timestamps_debug")

    @property
    @pulumi.getter(name="timestampsDebugDatetime")
    def timestamps_debug_datetime(self) -> pulumi.Output[Optional[bool]]:
        """
        Timestamp with date and time
        """
        return pulumi.get(self, "timestamps_debug_datetime")

    @property
    @pulumi.getter(name="timestampsDebugDatetimeLocaltime")
    def timestamps_debug_datetime_localtime(self) -> pulumi.Output[Optional[bool]]:
        """
        Use local time zone for timestamps
        """
        return pulumi.get(self, "timestamps_debug_datetime_localtime")

    @property
    @pulumi.getter(name="timestampsDebugDatetimeMsec")
    def timestamps_debug_datetime_msec(self) -> pulumi.Output[Optional[bool]]:
        """
        Include milliseconds in timestamp
        """
        return pulumi.get(self, "timestamps_debug_datetime_msec")

    @property
    @pulumi.getter(name="timestampsDebugDatetimeShowTimezone")
    def timestamps_debug_datetime_show_timezone(self) -> pulumi.Output[Optional[bool]]:
        """
        Add time zone information to timestamp
        """
        return pulumi.get(self, "timestamps_debug_datetime_show_timezone")

    @property
    @pulumi.getter(name="timestampsDebugDatetimeYear")
    def timestamps_debug_datetime_year(self) -> pulumi.Output[Optional[bool]]:
        """
        Include year in timestamp
        """
        return pulumi.get(self, "timestamps_debug_datetime_year")

    @property
    @pulumi.getter(name="timestampsDebugUptime")
    def timestamps_debug_uptime(self) -> pulumi.Output[Optional[bool]]:
        """
        Timestamp with system uptime
        """
        return pulumi.get(self, "timestamps_debug_uptime")

    @property
    @pulumi.getter(name="timestampsLog")
    def timestamps_log(self) -> pulumi.Output[Optional[bool]]:
        """
        Timestamp log messages
        """
        return pulumi.get(self, "timestamps_log")

    @property
    @pulumi.getter(name="timestampsLogDatetime")
    def timestamps_log_datetime(self) -> pulumi.Output[Optional[bool]]:
        """
        Timestamp with date and time
        """
        return pulumi.get(self, "timestamps_log_datetime")

    @property
    @pulumi.getter(name="timestampsLogDatetimeLocaltime")
    def timestamps_log_datetime_localtime(self) -> pulumi.Output[Optional[bool]]:
        """
        Use local time zone for timestamps
        """
        return pulumi.get(self, "timestamps_log_datetime_localtime")

    @property
    @pulumi.getter(name="timestampsLogDatetimeMsec")
    def timestamps_log_datetime_msec(self) -> pulumi.Output[Optional[bool]]:
        """
        Include milliseconds in timestamp
        """
        return pulumi.get(self, "timestamps_log_datetime_msec")

    @property
    @pulumi.getter(name="timestampsLogDatetimeShowTimezone")
    def timestamps_log_datetime_show_timezone(self) -> pulumi.Output[Optional[bool]]:
        """
        Add time zone information to timestamp
        """
        return pulumi.get(self, "timestamps_log_datetime_show_timezone")

    @property
    @pulumi.getter(name="timestampsLogDatetimeYear")
    def timestamps_log_datetime_year(self) -> pulumi.Output[Optional[bool]]:
        """
        Include year in timestamp
        """
        return pulumi.get(self, "timestamps_log_datetime_year")

    @property
    @pulumi.getter(name="timestampsLogUptime")
    def timestamps_log_uptime(self) -> pulumi.Output[Optional[bool]]:
        """
        Timestamp with system uptime
        """
        return pulumi.get(self, "timestamps_log_uptime")

