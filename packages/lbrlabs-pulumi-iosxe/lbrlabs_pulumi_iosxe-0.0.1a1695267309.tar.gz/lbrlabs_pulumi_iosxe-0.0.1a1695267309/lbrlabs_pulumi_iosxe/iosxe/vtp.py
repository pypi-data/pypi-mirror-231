# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['VtpArgs', 'Vtp']

@pulumi.input_type
class VtpArgs:
    def __init__(__self__, *,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 file: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_only: Optional[pulumi.Input[bool]] = None,
                 mode_client_mst: Optional[pulumi.Input[bool]] = None,
                 mode_client_unknown: Optional[pulumi.Input[bool]] = None,
                 mode_client_vlan: Optional[pulumi.Input[bool]] = None,
                 mode_off_mst: Optional[pulumi.Input[bool]] = None,
                 mode_off_unknown: Optional[pulumi.Input[bool]] = None,
                 mode_off_vlan: Optional[pulumi.Input[bool]] = None,
                 mode_server_mst: Optional[pulumi.Input[bool]] = None,
                 mode_server_unknown: Optional[pulumi.Input[bool]] = None,
                 mode_server_vlan: Optional[pulumi.Input[bool]] = None,
                 mode_transparent_mst: Optional[pulumi.Input[bool]] = None,
                 mode_transparent_unknown: Optional[pulumi.Input[bool]] = None,
                 mode_transparent_vlan: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_hidden: Optional[pulumi.Input[bool]] = None,
                 password_secret: Optional[pulumi.Input[bool]] = None,
                 pruning: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Vtp resource.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] domain: Set the name of the VTP administrative domain.
        :param pulumi.Input[str] file: Configure IFS filesystem file where VTP configuration is stored.
        :param pulumi.Input[str] interface: The name of the interface providing the VTP updater ID for this device
        :param pulumi.Input[bool] interface_only: Use only this interface's IP address as the VTP IP updater address
        :param pulumi.Input[bool] mode_client_mst: Set the mode for MST VTP instance
        :param pulumi.Input[bool] mode_client_unknown: Set the mode for unknown VTP instances
        :param pulumi.Input[bool] mode_client_vlan: Set the mode for VLAN VTP instance
        :param pulumi.Input[bool] mode_off_mst: Set the mode for MST VTP instance
        :param pulumi.Input[bool] mode_off_unknown: Set the mode for unknown VTP instances
        :param pulumi.Input[bool] mode_off_vlan: Set the mode for VLAN VTP instance
        :param pulumi.Input[bool] mode_server_mst: Set the mode for MST VTP instance
        :param pulumi.Input[bool] mode_server_unknown: Set the mode for unknown VTP instances
        :param pulumi.Input[bool] mode_server_vlan: Set the mode for VLAN VTP instance
        :param pulumi.Input[bool] mode_transparent_mst: Set the mode for MST VTP instance
        :param pulumi.Input[bool] mode_transparent_unknown: Set the mode for unknown VTP instances
        :param pulumi.Input[bool] mode_transparent_vlan: Set the mode for VLAN VTP instance
        :param pulumi.Input[str] password: The ascii password for the VTP administrative domain
        :param pulumi.Input[bool] password_hidden: Set the VTP password hidden option
        :param pulumi.Input[bool] password_secret: Specify the vtp password in encrypted form
        :param pulumi.Input[bool] pruning: Set the administrative domain to permit pruning
        :param pulumi.Input[int] version: Set the administrative domain to VTP version - Range: `1`-`3`
        """
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if file is not None:
            pulumi.set(__self__, "file", file)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_only is not None:
            pulumi.set(__self__, "interface_only", interface_only)
        if mode_client_mst is not None:
            pulumi.set(__self__, "mode_client_mst", mode_client_mst)
        if mode_client_unknown is not None:
            pulumi.set(__self__, "mode_client_unknown", mode_client_unknown)
        if mode_client_vlan is not None:
            pulumi.set(__self__, "mode_client_vlan", mode_client_vlan)
        if mode_off_mst is not None:
            pulumi.set(__self__, "mode_off_mst", mode_off_mst)
        if mode_off_unknown is not None:
            pulumi.set(__self__, "mode_off_unknown", mode_off_unknown)
        if mode_off_vlan is not None:
            pulumi.set(__self__, "mode_off_vlan", mode_off_vlan)
        if mode_server_mst is not None:
            pulumi.set(__self__, "mode_server_mst", mode_server_mst)
        if mode_server_unknown is not None:
            pulumi.set(__self__, "mode_server_unknown", mode_server_unknown)
        if mode_server_vlan is not None:
            pulumi.set(__self__, "mode_server_vlan", mode_server_vlan)
        if mode_transparent_mst is not None:
            pulumi.set(__self__, "mode_transparent_mst", mode_transparent_mst)
        if mode_transparent_unknown is not None:
            pulumi.set(__self__, "mode_transparent_unknown", mode_transparent_unknown)
        if mode_transparent_vlan is not None:
            pulumi.set(__self__, "mode_transparent_vlan", mode_transparent_vlan)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_hidden is not None:
            pulumi.set(__self__, "password_hidden", password_hidden)
        if password_secret is not None:
            pulumi.set(__self__, "password_secret", password_secret)
        if pruning is not None:
            pulumi.set(__self__, "pruning", pruning)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Set the name of the VTP administrative domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input[str]]:
        """
        Configure IFS filesystem file where VTP configuration is stored.
        """
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the interface providing the VTP updater ID for this device
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceOnly")
    def interface_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Use only this interface's IP address as the VTP IP updater address
        """
        return pulumi.get(self, "interface_only")

    @interface_only.setter
    def interface_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "interface_only", value)

    @property
    @pulumi.getter(name="modeClientMst")
    def mode_client_mst(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode for MST VTP instance
        """
        return pulumi.get(self, "mode_client_mst")

    @mode_client_mst.setter
    def mode_client_mst(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_client_mst", value)

    @property
    @pulumi.getter(name="modeClientUnknown")
    def mode_client_unknown(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode for unknown VTP instances
        """
        return pulumi.get(self, "mode_client_unknown")

    @mode_client_unknown.setter
    def mode_client_unknown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_client_unknown", value)

    @property
    @pulumi.getter(name="modeClientVlan")
    def mode_client_vlan(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode for VLAN VTP instance
        """
        return pulumi.get(self, "mode_client_vlan")

    @mode_client_vlan.setter
    def mode_client_vlan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_client_vlan", value)

    @property
    @pulumi.getter(name="modeOffMst")
    def mode_off_mst(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode for MST VTP instance
        """
        return pulumi.get(self, "mode_off_mst")

    @mode_off_mst.setter
    def mode_off_mst(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_off_mst", value)

    @property
    @pulumi.getter(name="modeOffUnknown")
    def mode_off_unknown(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode for unknown VTP instances
        """
        return pulumi.get(self, "mode_off_unknown")

    @mode_off_unknown.setter
    def mode_off_unknown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_off_unknown", value)

    @property
    @pulumi.getter(name="modeOffVlan")
    def mode_off_vlan(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode for VLAN VTP instance
        """
        return pulumi.get(self, "mode_off_vlan")

    @mode_off_vlan.setter
    def mode_off_vlan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_off_vlan", value)

    @property
    @pulumi.getter(name="modeServerMst")
    def mode_server_mst(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode for MST VTP instance
        """
        return pulumi.get(self, "mode_server_mst")

    @mode_server_mst.setter
    def mode_server_mst(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_server_mst", value)

    @property
    @pulumi.getter(name="modeServerUnknown")
    def mode_server_unknown(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode for unknown VTP instances
        """
        return pulumi.get(self, "mode_server_unknown")

    @mode_server_unknown.setter
    def mode_server_unknown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_server_unknown", value)

    @property
    @pulumi.getter(name="modeServerVlan")
    def mode_server_vlan(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode for VLAN VTP instance
        """
        return pulumi.get(self, "mode_server_vlan")

    @mode_server_vlan.setter
    def mode_server_vlan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_server_vlan", value)

    @property
    @pulumi.getter(name="modeTransparentMst")
    def mode_transparent_mst(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode for MST VTP instance
        """
        return pulumi.get(self, "mode_transparent_mst")

    @mode_transparent_mst.setter
    def mode_transparent_mst(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_transparent_mst", value)

    @property
    @pulumi.getter(name="modeTransparentUnknown")
    def mode_transparent_unknown(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode for unknown VTP instances
        """
        return pulumi.get(self, "mode_transparent_unknown")

    @mode_transparent_unknown.setter
    def mode_transparent_unknown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_transparent_unknown", value)

    @property
    @pulumi.getter(name="modeTransparentVlan")
    def mode_transparent_vlan(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode for VLAN VTP instance
        """
        return pulumi.get(self, "mode_transparent_vlan")

    @mode_transparent_vlan.setter
    def mode_transparent_vlan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_transparent_vlan", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The ascii password for the VTP administrative domain
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="passwordHidden")
    def password_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the VTP password hidden option
        """
        return pulumi.get(self, "password_hidden")

    @password_hidden.setter
    def password_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "password_hidden", value)

    @property
    @pulumi.getter(name="passwordSecret")
    def password_secret(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify the vtp password in encrypted form
        """
        return pulumi.get(self, "password_secret")

    @password_secret.setter
    def password_secret(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "password_secret", value)

    @property
    @pulumi.getter
    def pruning(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the administrative domain to permit pruning
        """
        return pulumi.get(self, "pruning")

    @pruning.setter
    def pruning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pruning", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        Set the administrative domain to VTP version - Range: `1`-`3`
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class _VtpState:
    def __init__(__self__, *,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 file: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_only: Optional[pulumi.Input[bool]] = None,
                 mode_client_mst: Optional[pulumi.Input[bool]] = None,
                 mode_client_unknown: Optional[pulumi.Input[bool]] = None,
                 mode_client_vlan: Optional[pulumi.Input[bool]] = None,
                 mode_off_mst: Optional[pulumi.Input[bool]] = None,
                 mode_off_unknown: Optional[pulumi.Input[bool]] = None,
                 mode_off_vlan: Optional[pulumi.Input[bool]] = None,
                 mode_server_mst: Optional[pulumi.Input[bool]] = None,
                 mode_server_unknown: Optional[pulumi.Input[bool]] = None,
                 mode_server_vlan: Optional[pulumi.Input[bool]] = None,
                 mode_transparent_mst: Optional[pulumi.Input[bool]] = None,
                 mode_transparent_unknown: Optional[pulumi.Input[bool]] = None,
                 mode_transparent_vlan: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_hidden: Optional[pulumi.Input[bool]] = None,
                 password_secret: Optional[pulumi.Input[bool]] = None,
                 pruning: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Vtp resources.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] domain: Set the name of the VTP administrative domain.
        :param pulumi.Input[str] file: Configure IFS filesystem file where VTP configuration is stored.
        :param pulumi.Input[str] interface: The name of the interface providing the VTP updater ID for this device
        :param pulumi.Input[bool] interface_only: Use only this interface's IP address as the VTP IP updater address
        :param pulumi.Input[bool] mode_client_mst: Set the mode for MST VTP instance
        :param pulumi.Input[bool] mode_client_unknown: Set the mode for unknown VTP instances
        :param pulumi.Input[bool] mode_client_vlan: Set the mode for VLAN VTP instance
        :param pulumi.Input[bool] mode_off_mst: Set the mode for MST VTP instance
        :param pulumi.Input[bool] mode_off_unknown: Set the mode for unknown VTP instances
        :param pulumi.Input[bool] mode_off_vlan: Set the mode for VLAN VTP instance
        :param pulumi.Input[bool] mode_server_mst: Set the mode for MST VTP instance
        :param pulumi.Input[bool] mode_server_unknown: Set the mode for unknown VTP instances
        :param pulumi.Input[bool] mode_server_vlan: Set the mode for VLAN VTP instance
        :param pulumi.Input[bool] mode_transparent_mst: Set the mode for MST VTP instance
        :param pulumi.Input[bool] mode_transparent_unknown: Set the mode for unknown VTP instances
        :param pulumi.Input[bool] mode_transparent_vlan: Set the mode for VLAN VTP instance
        :param pulumi.Input[str] password: The ascii password for the VTP administrative domain
        :param pulumi.Input[bool] password_hidden: Set the VTP password hidden option
        :param pulumi.Input[bool] password_secret: Specify the vtp password in encrypted form
        :param pulumi.Input[bool] pruning: Set the administrative domain to permit pruning
        :param pulumi.Input[int] version: Set the administrative domain to VTP version - Range: `1`-`3`
        """
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if file is not None:
            pulumi.set(__self__, "file", file)
        if interface is not None:
            pulumi.set(__self__, "interface", interface)
        if interface_only is not None:
            pulumi.set(__self__, "interface_only", interface_only)
        if mode_client_mst is not None:
            pulumi.set(__self__, "mode_client_mst", mode_client_mst)
        if mode_client_unknown is not None:
            pulumi.set(__self__, "mode_client_unknown", mode_client_unknown)
        if mode_client_vlan is not None:
            pulumi.set(__self__, "mode_client_vlan", mode_client_vlan)
        if mode_off_mst is not None:
            pulumi.set(__self__, "mode_off_mst", mode_off_mst)
        if mode_off_unknown is not None:
            pulumi.set(__self__, "mode_off_unknown", mode_off_unknown)
        if mode_off_vlan is not None:
            pulumi.set(__self__, "mode_off_vlan", mode_off_vlan)
        if mode_server_mst is not None:
            pulumi.set(__self__, "mode_server_mst", mode_server_mst)
        if mode_server_unknown is not None:
            pulumi.set(__self__, "mode_server_unknown", mode_server_unknown)
        if mode_server_vlan is not None:
            pulumi.set(__self__, "mode_server_vlan", mode_server_vlan)
        if mode_transparent_mst is not None:
            pulumi.set(__self__, "mode_transparent_mst", mode_transparent_mst)
        if mode_transparent_unknown is not None:
            pulumi.set(__self__, "mode_transparent_unknown", mode_transparent_unknown)
        if mode_transparent_vlan is not None:
            pulumi.set(__self__, "mode_transparent_vlan", mode_transparent_vlan)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_hidden is not None:
            pulumi.set(__self__, "password_hidden", password_hidden)
        if password_secret is not None:
            pulumi.set(__self__, "password_secret", password_secret)
        if pruning is not None:
            pulumi.set(__self__, "pruning", pruning)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Set the name of the VTP administrative domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input[str]]:
        """
        Configure IFS filesystem file where VTP configuration is stored.
        """
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file", value)

    @property
    @pulumi.getter
    def interface(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the interface providing the VTP updater ID for this device
        """
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter(name="interfaceOnly")
    def interface_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Use only this interface's IP address as the VTP IP updater address
        """
        return pulumi.get(self, "interface_only")

    @interface_only.setter
    def interface_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "interface_only", value)

    @property
    @pulumi.getter(name="modeClientMst")
    def mode_client_mst(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode for MST VTP instance
        """
        return pulumi.get(self, "mode_client_mst")

    @mode_client_mst.setter
    def mode_client_mst(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_client_mst", value)

    @property
    @pulumi.getter(name="modeClientUnknown")
    def mode_client_unknown(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode for unknown VTP instances
        """
        return pulumi.get(self, "mode_client_unknown")

    @mode_client_unknown.setter
    def mode_client_unknown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_client_unknown", value)

    @property
    @pulumi.getter(name="modeClientVlan")
    def mode_client_vlan(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode for VLAN VTP instance
        """
        return pulumi.get(self, "mode_client_vlan")

    @mode_client_vlan.setter
    def mode_client_vlan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_client_vlan", value)

    @property
    @pulumi.getter(name="modeOffMst")
    def mode_off_mst(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode for MST VTP instance
        """
        return pulumi.get(self, "mode_off_mst")

    @mode_off_mst.setter
    def mode_off_mst(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_off_mst", value)

    @property
    @pulumi.getter(name="modeOffUnknown")
    def mode_off_unknown(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode for unknown VTP instances
        """
        return pulumi.get(self, "mode_off_unknown")

    @mode_off_unknown.setter
    def mode_off_unknown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_off_unknown", value)

    @property
    @pulumi.getter(name="modeOffVlan")
    def mode_off_vlan(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode for VLAN VTP instance
        """
        return pulumi.get(self, "mode_off_vlan")

    @mode_off_vlan.setter
    def mode_off_vlan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_off_vlan", value)

    @property
    @pulumi.getter(name="modeServerMst")
    def mode_server_mst(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode for MST VTP instance
        """
        return pulumi.get(self, "mode_server_mst")

    @mode_server_mst.setter
    def mode_server_mst(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_server_mst", value)

    @property
    @pulumi.getter(name="modeServerUnknown")
    def mode_server_unknown(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode for unknown VTP instances
        """
        return pulumi.get(self, "mode_server_unknown")

    @mode_server_unknown.setter
    def mode_server_unknown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_server_unknown", value)

    @property
    @pulumi.getter(name="modeServerVlan")
    def mode_server_vlan(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode for VLAN VTP instance
        """
        return pulumi.get(self, "mode_server_vlan")

    @mode_server_vlan.setter
    def mode_server_vlan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_server_vlan", value)

    @property
    @pulumi.getter(name="modeTransparentMst")
    def mode_transparent_mst(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode for MST VTP instance
        """
        return pulumi.get(self, "mode_transparent_mst")

    @mode_transparent_mst.setter
    def mode_transparent_mst(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_transparent_mst", value)

    @property
    @pulumi.getter(name="modeTransparentUnknown")
    def mode_transparent_unknown(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode for unknown VTP instances
        """
        return pulumi.get(self, "mode_transparent_unknown")

    @mode_transparent_unknown.setter
    def mode_transparent_unknown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_transparent_unknown", value)

    @property
    @pulumi.getter(name="modeTransparentVlan")
    def mode_transparent_vlan(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the mode for VLAN VTP instance
        """
        return pulumi.get(self, "mode_transparent_vlan")

    @mode_transparent_vlan.setter
    def mode_transparent_vlan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mode_transparent_vlan", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The ascii password for the VTP administrative domain
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="passwordHidden")
    def password_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the VTP password hidden option
        """
        return pulumi.get(self, "password_hidden")

    @password_hidden.setter
    def password_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "password_hidden", value)

    @property
    @pulumi.getter(name="passwordSecret")
    def password_secret(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify the vtp password in encrypted form
        """
        return pulumi.get(self, "password_secret")

    @password_secret.setter
    def password_secret(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "password_secret", value)

    @property
    @pulumi.getter
    def pruning(self) -> Optional[pulumi.Input[bool]]:
        """
        Set the administrative domain to permit pruning
        """
        return pulumi.get(self, "pruning")

    @pruning.setter
    def pruning(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pruning", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        Set the administrative domain to VTP version - Range: `1`-`3`
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


class Vtp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 file: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_only: Optional[pulumi.Input[bool]] = None,
                 mode_client_mst: Optional[pulumi.Input[bool]] = None,
                 mode_client_unknown: Optional[pulumi.Input[bool]] = None,
                 mode_client_vlan: Optional[pulumi.Input[bool]] = None,
                 mode_off_mst: Optional[pulumi.Input[bool]] = None,
                 mode_off_unknown: Optional[pulumi.Input[bool]] = None,
                 mode_off_vlan: Optional[pulumi.Input[bool]] = None,
                 mode_server_mst: Optional[pulumi.Input[bool]] = None,
                 mode_server_unknown: Optional[pulumi.Input[bool]] = None,
                 mode_server_vlan: Optional[pulumi.Input[bool]] = None,
                 mode_transparent_mst: Optional[pulumi.Input[bool]] = None,
                 mode_transparent_unknown: Optional[pulumi.Input[bool]] = None,
                 mode_transparent_vlan: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_hidden: Optional[pulumi.Input[bool]] = None,
                 password_secret: Optional[pulumi.Input[bool]] = None,
                 pruning: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a Vtp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] domain: Set the name of the VTP administrative domain.
        :param pulumi.Input[str] file: Configure IFS filesystem file where VTP configuration is stored.
        :param pulumi.Input[str] interface: The name of the interface providing the VTP updater ID for this device
        :param pulumi.Input[bool] interface_only: Use only this interface's IP address as the VTP IP updater address
        :param pulumi.Input[bool] mode_client_mst: Set the mode for MST VTP instance
        :param pulumi.Input[bool] mode_client_unknown: Set the mode for unknown VTP instances
        :param pulumi.Input[bool] mode_client_vlan: Set the mode for VLAN VTP instance
        :param pulumi.Input[bool] mode_off_mst: Set the mode for MST VTP instance
        :param pulumi.Input[bool] mode_off_unknown: Set the mode for unknown VTP instances
        :param pulumi.Input[bool] mode_off_vlan: Set the mode for VLAN VTP instance
        :param pulumi.Input[bool] mode_server_mst: Set the mode for MST VTP instance
        :param pulumi.Input[bool] mode_server_unknown: Set the mode for unknown VTP instances
        :param pulumi.Input[bool] mode_server_vlan: Set the mode for VLAN VTP instance
        :param pulumi.Input[bool] mode_transparent_mst: Set the mode for MST VTP instance
        :param pulumi.Input[bool] mode_transparent_unknown: Set the mode for unknown VTP instances
        :param pulumi.Input[bool] mode_transparent_vlan: Set the mode for VLAN VTP instance
        :param pulumi.Input[str] password: The ascii password for the VTP administrative domain
        :param pulumi.Input[bool] password_hidden: Set the VTP password hidden option
        :param pulumi.Input[bool] password_secret: Specify the vtp password in encrypted form
        :param pulumi.Input[bool] pruning: Set the administrative domain to permit pruning
        :param pulumi.Input[int] version: Set the administrative domain to VTP version - Range: `1`-`3`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[VtpArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Vtp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VtpArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VtpArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 file: Optional[pulumi.Input[str]] = None,
                 interface: Optional[pulumi.Input[str]] = None,
                 interface_only: Optional[pulumi.Input[bool]] = None,
                 mode_client_mst: Optional[pulumi.Input[bool]] = None,
                 mode_client_unknown: Optional[pulumi.Input[bool]] = None,
                 mode_client_vlan: Optional[pulumi.Input[bool]] = None,
                 mode_off_mst: Optional[pulumi.Input[bool]] = None,
                 mode_off_unknown: Optional[pulumi.Input[bool]] = None,
                 mode_off_vlan: Optional[pulumi.Input[bool]] = None,
                 mode_server_mst: Optional[pulumi.Input[bool]] = None,
                 mode_server_unknown: Optional[pulumi.Input[bool]] = None,
                 mode_server_vlan: Optional[pulumi.Input[bool]] = None,
                 mode_transparent_mst: Optional[pulumi.Input[bool]] = None,
                 mode_transparent_unknown: Optional[pulumi.Input[bool]] = None,
                 mode_transparent_vlan: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_hidden: Optional[pulumi.Input[bool]] = None,
                 password_secret: Optional[pulumi.Input[bool]] = None,
                 pruning: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VtpArgs.__new__(VtpArgs)

            __props__.__dict__["delete_mode"] = delete_mode
            __props__.__dict__["device"] = device
            __props__.__dict__["domain"] = domain
            __props__.__dict__["file"] = file
            __props__.__dict__["interface"] = interface
            __props__.__dict__["interface_only"] = interface_only
            __props__.__dict__["mode_client_mst"] = mode_client_mst
            __props__.__dict__["mode_client_unknown"] = mode_client_unknown
            __props__.__dict__["mode_client_vlan"] = mode_client_vlan
            __props__.__dict__["mode_off_mst"] = mode_off_mst
            __props__.__dict__["mode_off_unknown"] = mode_off_unknown
            __props__.__dict__["mode_off_vlan"] = mode_off_vlan
            __props__.__dict__["mode_server_mst"] = mode_server_mst
            __props__.__dict__["mode_server_unknown"] = mode_server_unknown
            __props__.__dict__["mode_server_vlan"] = mode_server_vlan
            __props__.__dict__["mode_transparent_mst"] = mode_transparent_mst
            __props__.__dict__["mode_transparent_unknown"] = mode_transparent_unknown
            __props__.__dict__["mode_transparent_vlan"] = mode_transparent_vlan
            __props__.__dict__["password"] = password
            __props__.__dict__["password_hidden"] = password_hidden
            __props__.__dict__["password_secret"] = password_secret
            __props__.__dict__["pruning"] = pruning
            __props__.__dict__["version"] = version
        super(Vtp, __self__).__init__(
            'iosxe:iosxe/vtp:Vtp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            delete_mode: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            file: Optional[pulumi.Input[str]] = None,
            interface: Optional[pulumi.Input[str]] = None,
            interface_only: Optional[pulumi.Input[bool]] = None,
            mode_client_mst: Optional[pulumi.Input[bool]] = None,
            mode_client_unknown: Optional[pulumi.Input[bool]] = None,
            mode_client_vlan: Optional[pulumi.Input[bool]] = None,
            mode_off_mst: Optional[pulumi.Input[bool]] = None,
            mode_off_unknown: Optional[pulumi.Input[bool]] = None,
            mode_off_vlan: Optional[pulumi.Input[bool]] = None,
            mode_server_mst: Optional[pulumi.Input[bool]] = None,
            mode_server_unknown: Optional[pulumi.Input[bool]] = None,
            mode_server_vlan: Optional[pulumi.Input[bool]] = None,
            mode_transparent_mst: Optional[pulumi.Input[bool]] = None,
            mode_transparent_unknown: Optional[pulumi.Input[bool]] = None,
            mode_transparent_vlan: Optional[pulumi.Input[bool]] = None,
            password: Optional[pulumi.Input[str]] = None,
            password_hidden: Optional[pulumi.Input[bool]] = None,
            password_secret: Optional[pulumi.Input[bool]] = None,
            pruning: Optional[pulumi.Input[bool]] = None,
            version: Optional[pulumi.Input[int]] = None) -> 'Vtp':
        """
        Get an existing Vtp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] domain: Set the name of the VTP administrative domain.
        :param pulumi.Input[str] file: Configure IFS filesystem file where VTP configuration is stored.
        :param pulumi.Input[str] interface: The name of the interface providing the VTP updater ID for this device
        :param pulumi.Input[bool] interface_only: Use only this interface's IP address as the VTP IP updater address
        :param pulumi.Input[bool] mode_client_mst: Set the mode for MST VTP instance
        :param pulumi.Input[bool] mode_client_unknown: Set the mode for unknown VTP instances
        :param pulumi.Input[bool] mode_client_vlan: Set the mode for VLAN VTP instance
        :param pulumi.Input[bool] mode_off_mst: Set the mode for MST VTP instance
        :param pulumi.Input[bool] mode_off_unknown: Set the mode for unknown VTP instances
        :param pulumi.Input[bool] mode_off_vlan: Set the mode for VLAN VTP instance
        :param pulumi.Input[bool] mode_server_mst: Set the mode for MST VTP instance
        :param pulumi.Input[bool] mode_server_unknown: Set the mode for unknown VTP instances
        :param pulumi.Input[bool] mode_server_vlan: Set the mode for VLAN VTP instance
        :param pulumi.Input[bool] mode_transparent_mst: Set the mode for MST VTP instance
        :param pulumi.Input[bool] mode_transparent_unknown: Set the mode for unknown VTP instances
        :param pulumi.Input[bool] mode_transparent_vlan: Set the mode for VLAN VTP instance
        :param pulumi.Input[str] password: The ascii password for the VTP administrative domain
        :param pulumi.Input[bool] password_hidden: Set the VTP password hidden option
        :param pulumi.Input[bool] password_secret: Specify the vtp password in encrypted form
        :param pulumi.Input[bool] pruning: Set the administrative domain to permit pruning
        :param pulumi.Input[int] version: Set the administrative domain to VTP version - Range: `1`-`3`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VtpState.__new__(_VtpState)

        __props__.__dict__["delete_mode"] = delete_mode
        __props__.__dict__["device"] = device
        __props__.__dict__["domain"] = domain
        __props__.__dict__["file"] = file
        __props__.__dict__["interface"] = interface
        __props__.__dict__["interface_only"] = interface_only
        __props__.__dict__["mode_client_mst"] = mode_client_mst
        __props__.__dict__["mode_client_unknown"] = mode_client_unknown
        __props__.__dict__["mode_client_vlan"] = mode_client_vlan
        __props__.__dict__["mode_off_mst"] = mode_off_mst
        __props__.__dict__["mode_off_unknown"] = mode_off_unknown
        __props__.__dict__["mode_off_vlan"] = mode_off_vlan
        __props__.__dict__["mode_server_mst"] = mode_server_mst
        __props__.__dict__["mode_server_unknown"] = mode_server_unknown
        __props__.__dict__["mode_server_vlan"] = mode_server_vlan
        __props__.__dict__["mode_transparent_mst"] = mode_transparent_mst
        __props__.__dict__["mode_transparent_unknown"] = mode_transparent_unknown
        __props__.__dict__["mode_transparent_vlan"] = mode_transparent_vlan
        __props__.__dict__["password"] = password
        __props__.__dict__["password_hidden"] = password_hidden
        __props__.__dict__["password_secret"] = password_secret
        __props__.__dict__["pruning"] = pruning
        __props__.__dict__["version"] = version
        return Vtp(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[Optional[str]]:
        """
        Set the name of the VTP administrative domain.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def file(self) -> pulumi.Output[Optional[str]]:
        """
        Configure IFS filesystem file where VTP configuration is stored.
        """
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the interface providing the VTP updater ID for this device
        """
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceOnly")
    def interface_only(self) -> pulumi.Output[Optional[bool]]:
        """
        Use only this interface's IP address as the VTP IP updater address
        """
        return pulumi.get(self, "interface_only")

    @property
    @pulumi.getter(name="modeClientMst")
    def mode_client_mst(self) -> pulumi.Output[Optional[bool]]:
        """
        Set the mode for MST VTP instance
        """
        return pulumi.get(self, "mode_client_mst")

    @property
    @pulumi.getter(name="modeClientUnknown")
    def mode_client_unknown(self) -> pulumi.Output[Optional[bool]]:
        """
        Set the mode for unknown VTP instances
        """
        return pulumi.get(self, "mode_client_unknown")

    @property
    @pulumi.getter(name="modeClientVlan")
    def mode_client_vlan(self) -> pulumi.Output[Optional[bool]]:
        """
        Set the mode for VLAN VTP instance
        """
        return pulumi.get(self, "mode_client_vlan")

    @property
    @pulumi.getter(name="modeOffMst")
    def mode_off_mst(self) -> pulumi.Output[Optional[bool]]:
        """
        Set the mode for MST VTP instance
        """
        return pulumi.get(self, "mode_off_mst")

    @property
    @pulumi.getter(name="modeOffUnknown")
    def mode_off_unknown(self) -> pulumi.Output[Optional[bool]]:
        """
        Set the mode for unknown VTP instances
        """
        return pulumi.get(self, "mode_off_unknown")

    @property
    @pulumi.getter(name="modeOffVlan")
    def mode_off_vlan(self) -> pulumi.Output[Optional[bool]]:
        """
        Set the mode for VLAN VTP instance
        """
        return pulumi.get(self, "mode_off_vlan")

    @property
    @pulumi.getter(name="modeServerMst")
    def mode_server_mst(self) -> pulumi.Output[Optional[bool]]:
        """
        Set the mode for MST VTP instance
        """
        return pulumi.get(self, "mode_server_mst")

    @property
    @pulumi.getter(name="modeServerUnknown")
    def mode_server_unknown(self) -> pulumi.Output[Optional[bool]]:
        """
        Set the mode for unknown VTP instances
        """
        return pulumi.get(self, "mode_server_unknown")

    @property
    @pulumi.getter(name="modeServerVlan")
    def mode_server_vlan(self) -> pulumi.Output[Optional[bool]]:
        """
        Set the mode for VLAN VTP instance
        """
        return pulumi.get(self, "mode_server_vlan")

    @property
    @pulumi.getter(name="modeTransparentMst")
    def mode_transparent_mst(self) -> pulumi.Output[Optional[bool]]:
        """
        Set the mode for MST VTP instance
        """
        return pulumi.get(self, "mode_transparent_mst")

    @property
    @pulumi.getter(name="modeTransparentUnknown")
    def mode_transparent_unknown(self) -> pulumi.Output[Optional[bool]]:
        """
        Set the mode for unknown VTP instances
        """
        return pulumi.get(self, "mode_transparent_unknown")

    @property
    @pulumi.getter(name="modeTransparentVlan")
    def mode_transparent_vlan(self) -> pulumi.Output[Optional[bool]]:
        """
        Set the mode for VLAN VTP instance
        """
        return pulumi.get(self, "mode_transparent_vlan")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        The ascii password for the VTP administrative domain
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="passwordHidden")
    def password_hidden(self) -> pulumi.Output[Optional[bool]]:
        """
        Set the VTP password hidden option
        """
        return pulumi.get(self, "password_hidden")

    @property
    @pulumi.getter(name="passwordSecret")
    def password_secret(self) -> pulumi.Output[Optional[bool]]:
        """
        Specify the vtp password in encrypted form
        """
        return pulumi.get(self, "password_secret")

    @property
    @pulumi.getter
    def pruning(self) -> pulumi.Output[Optional[bool]]:
        """
        Set the administrative domain to permit pruning
        """
        return pulumi.get(self, "pruning")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[Optional[int]]:
        """
        Set the administrative domain to VTP version - Range: `1`-`3`
        """
        return pulumi.get(self, "version")

