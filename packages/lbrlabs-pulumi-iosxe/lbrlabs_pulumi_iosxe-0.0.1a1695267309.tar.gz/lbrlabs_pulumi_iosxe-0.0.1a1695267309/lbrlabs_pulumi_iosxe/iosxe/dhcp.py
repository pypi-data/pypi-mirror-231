# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DhcpArgs', 'Dhcp']

@pulumi.input_type
class DhcpArgs:
    def __init__(__self__, *,
                 compatibility_suboption_link_selection: Optional[pulumi.Input[str]] = None,
                 compatibility_suboption_server_override: Optional[pulumi.Input[str]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 relay_information_option_default: Optional[pulumi.Input[bool]] = None,
                 relay_information_option_vpn: Optional[pulumi.Input[bool]] = None,
                 relay_information_trust_all: Optional[pulumi.Input[bool]] = None,
                 snooping: Optional[pulumi.Input[bool]] = None,
                 snooping_information_option_format_remote_id_hostname: Optional[pulumi.Input[bool]] = None,
                 snooping_vlans: Optional[pulumi.Input[Sequence[pulumi.Input['DhcpSnoopingVlanArgs']]]] = None):
        """
        The set of arguments for constructing a Dhcp resource.
        :param pulumi.Input[str] compatibility_suboption_link_selection: - Choices: `cisco`, `standard`
        :param pulumi.Input[str] compatibility_suboption_server_override: - Choices: `cisco`, `standard`
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] relay_information_option_default: Default option, no vpn
        :param pulumi.Input[bool] relay_information_option_vpn: Insert VPN sub-options and change the giaddr to the outgoing interface
        :param pulumi.Input[bool] relay_information_trust_all: Received DHCP packets may contain relay info option with zero giaddr
        :param pulumi.Input[bool] snooping: DHCP Snooping
        :param pulumi.Input[bool] snooping_information_option_format_remote_id_hostname: Use configured hostname for remote id
        :param pulumi.Input[Sequence[pulumi.Input['DhcpSnoopingVlanArgs']]] snooping_vlans: DHCP Snooping vlan
        """
        if compatibility_suboption_link_selection is not None:
            pulumi.set(__self__, "compatibility_suboption_link_selection", compatibility_suboption_link_selection)
        if compatibility_suboption_server_override is not None:
            pulumi.set(__self__, "compatibility_suboption_server_override", compatibility_suboption_server_override)
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if relay_information_option_default is not None:
            pulumi.set(__self__, "relay_information_option_default", relay_information_option_default)
        if relay_information_option_vpn is not None:
            pulumi.set(__self__, "relay_information_option_vpn", relay_information_option_vpn)
        if relay_information_trust_all is not None:
            pulumi.set(__self__, "relay_information_trust_all", relay_information_trust_all)
        if snooping is not None:
            pulumi.set(__self__, "snooping", snooping)
        if snooping_information_option_format_remote_id_hostname is not None:
            pulumi.set(__self__, "snooping_information_option_format_remote_id_hostname", snooping_information_option_format_remote_id_hostname)
        if snooping_vlans is not None:
            pulumi.set(__self__, "snooping_vlans", snooping_vlans)

    @property
    @pulumi.getter(name="compatibilitySuboptionLinkSelection")
    def compatibility_suboption_link_selection(self) -> Optional[pulumi.Input[str]]:
        """
        - Choices: `cisco`, `standard`
        """
        return pulumi.get(self, "compatibility_suboption_link_selection")

    @compatibility_suboption_link_selection.setter
    def compatibility_suboption_link_selection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compatibility_suboption_link_selection", value)

    @property
    @pulumi.getter(name="compatibilitySuboptionServerOverride")
    def compatibility_suboption_server_override(self) -> Optional[pulumi.Input[str]]:
        """
        - Choices: `cisco`, `standard`
        """
        return pulumi.get(self, "compatibility_suboption_server_override")

    @compatibility_suboption_server_override.setter
    def compatibility_suboption_server_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compatibility_suboption_server_override", value)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="relayInformationOptionDefault")
    def relay_information_option_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Default option, no vpn
        """
        return pulumi.get(self, "relay_information_option_default")

    @relay_information_option_default.setter
    def relay_information_option_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "relay_information_option_default", value)

    @property
    @pulumi.getter(name="relayInformationOptionVpn")
    def relay_information_option_vpn(self) -> Optional[pulumi.Input[bool]]:
        """
        Insert VPN sub-options and change the giaddr to the outgoing interface
        """
        return pulumi.get(self, "relay_information_option_vpn")

    @relay_information_option_vpn.setter
    def relay_information_option_vpn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "relay_information_option_vpn", value)

    @property
    @pulumi.getter(name="relayInformationTrustAll")
    def relay_information_trust_all(self) -> Optional[pulumi.Input[bool]]:
        """
        Received DHCP packets may contain relay info option with zero giaddr
        """
        return pulumi.get(self, "relay_information_trust_all")

    @relay_information_trust_all.setter
    def relay_information_trust_all(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "relay_information_trust_all", value)

    @property
    @pulumi.getter
    def snooping(self) -> Optional[pulumi.Input[bool]]:
        """
        DHCP Snooping
        """
        return pulumi.get(self, "snooping")

    @snooping.setter
    def snooping(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "snooping", value)

    @property
    @pulumi.getter(name="snoopingInformationOptionFormatRemoteIdHostname")
    def snooping_information_option_format_remote_id_hostname(self) -> Optional[pulumi.Input[bool]]:
        """
        Use configured hostname for remote id
        """
        return pulumi.get(self, "snooping_information_option_format_remote_id_hostname")

    @snooping_information_option_format_remote_id_hostname.setter
    def snooping_information_option_format_remote_id_hostname(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "snooping_information_option_format_remote_id_hostname", value)

    @property
    @pulumi.getter(name="snoopingVlans")
    def snooping_vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DhcpSnoopingVlanArgs']]]]:
        """
        DHCP Snooping vlan
        """
        return pulumi.get(self, "snooping_vlans")

    @snooping_vlans.setter
    def snooping_vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DhcpSnoopingVlanArgs']]]]):
        pulumi.set(self, "snooping_vlans", value)


@pulumi.input_type
class _DhcpState:
    def __init__(__self__, *,
                 compatibility_suboption_link_selection: Optional[pulumi.Input[str]] = None,
                 compatibility_suboption_server_override: Optional[pulumi.Input[str]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 relay_information_option_default: Optional[pulumi.Input[bool]] = None,
                 relay_information_option_vpn: Optional[pulumi.Input[bool]] = None,
                 relay_information_trust_all: Optional[pulumi.Input[bool]] = None,
                 snooping: Optional[pulumi.Input[bool]] = None,
                 snooping_information_option_format_remote_id_hostname: Optional[pulumi.Input[bool]] = None,
                 snooping_vlans: Optional[pulumi.Input[Sequence[pulumi.Input['DhcpSnoopingVlanArgs']]]] = None):
        """
        Input properties used for looking up and filtering Dhcp resources.
        :param pulumi.Input[str] compatibility_suboption_link_selection: - Choices: `cisco`, `standard`
        :param pulumi.Input[str] compatibility_suboption_server_override: - Choices: `cisco`, `standard`
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] relay_information_option_default: Default option, no vpn
        :param pulumi.Input[bool] relay_information_option_vpn: Insert VPN sub-options and change the giaddr to the outgoing interface
        :param pulumi.Input[bool] relay_information_trust_all: Received DHCP packets may contain relay info option with zero giaddr
        :param pulumi.Input[bool] snooping: DHCP Snooping
        :param pulumi.Input[bool] snooping_information_option_format_remote_id_hostname: Use configured hostname for remote id
        :param pulumi.Input[Sequence[pulumi.Input['DhcpSnoopingVlanArgs']]] snooping_vlans: DHCP Snooping vlan
        """
        if compatibility_suboption_link_selection is not None:
            pulumi.set(__self__, "compatibility_suboption_link_selection", compatibility_suboption_link_selection)
        if compatibility_suboption_server_override is not None:
            pulumi.set(__self__, "compatibility_suboption_server_override", compatibility_suboption_server_override)
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if relay_information_option_default is not None:
            pulumi.set(__self__, "relay_information_option_default", relay_information_option_default)
        if relay_information_option_vpn is not None:
            pulumi.set(__self__, "relay_information_option_vpn", relay_information_option_vpn)
        if relay_information_trust_all is not None:
            pulumi.set(__self__, "relay_information_trust_all", relay_information_trust_all)
        if snooping is not None:
            pulumi.set(__self__, "snooping", snooping)
        if snooping_information_option_format_remote_id_hostname is not None:
            pulumi.set(__self__, "snooping_information_option_format_remote_id_hostname", snooping_information_option_format_remote_id_hostname)
        if snooping_vlans is not None:
            pulumi.set(__self__, "snooping_vlans", snooping_vlans)

    @property
    @pulumi.getter(name="compatibilitySuboptionLinkSelection")
    def compatibility_suboption_link_selection(self) -> Optional[pulumi.Input[str]]:
        """
        - Choices: `cisco`, `standard`
        """
        return pulumi.get(self, "compatibility_suboption_link_selection")

    @compatibility_suboption_link_selection.setter
    def compatibility_suboption_link_selection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compatibility_suboption_link_selection", value)

    @property
    @pulumi.getter(name="compatibilitySuboptionServerOverride")
    def compatibility_suboption_server_override(self) -> Optional[pulumi.Input[str]]:
        """
        - Choices: `cisco`, `standard`
        """
        return pulumi.get(self, "compatibility_suboption_server_override")

    @compatibility_suboption_server_override.setter
    def compatibility_suboption_server_override(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compatibility_suboption_server_override", value)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="relayInformationOptionDefault")
    def relay_information_option_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Default option, no vpn
        """
        return pulumi.get(self, "relay_information_option_default")

    @relay_information_option_default.setter
    def relay_information_option_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "relay_information_option_default", value)

    @property
    @pulumi.getter(name="relayInformationOptionVpn")
    def relay_information_option_vpn(self) -> Optional[pulumi.Input[bool]]:
        """
        Insert VPN sub-options and change the giaddr to the outgoing interface
        """
        return pulumi.get(self, "relay_information_option_vpn")

    @relay_information_option_vpn.setter
    def relay_information_option_vpn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "relay_information_option_vpn", value)

    @property
    @pulumi.getter(name="relayInformationTrustAll")
    def relay_information_trust_all(self) -> Optional[pulumi.Input[bool]]:
        """
        Received DHCP packets may contain relay info option with zero giaddr
        """
        return pulumi.get(self, "relay_information_trust_all")

    @relay_information_trust_all.setter
    def relay_information_trust_all(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "relay_information_trust_all", value)

    @property
    @pulumi.getter
    def snooping(self) -> Optional[pulumi.Input[bool]]:
        """
        DHCP Snooping
        """
        return pulumi.get(self, "snooping")

    @snooping.setter
    def snooping(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "snooping", value)

    @property
    @pulumi.getter(name="snoopingInformationOptionFormatRemoteIdHostname")
    def snooping_information_option_format_remote_id_hostname(self) -> Optional[pulumi.Input[bool]]:
        """
        Use configured hostname for remote id
        """
        return pulumi.get(self, "snooping_information_option_format_remote_id_hostname")

    @snooping_information_option_format_remote_id_hostname.setter
    def snooping_information_option_format_remote_id_hostname(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "snooping_information_option_format_remote_id_hostname", value)

    @property
    @pulumi.getter(name="snoopingVlans")
    def snooping_vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DhcpSnoopingVlanArgs']]]]:
        """
        DHCP Snooping vlan
        """
        return pulumi.get(self, "snooping_vlans")

    @snooping_vlans.setter
    def snooping_vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DhcpSnoopingVlanArgs']]]]):
        pulumi.set(self, "snooping_vlans", value)


class Dhcp(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compatibility_suboption_link_selection: Optional[pulumi.Input[str]] = None,
                 compatibility_suboption_server_override: Optional[pulumi.Input[str]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 relay_information_option_default: Optional[pulumi.Input[bool]] = None,
                 relay_information_option_vpn: Optional[pulumi.Input[bool]] = None,
                 relay_information_trust_all: Optional[pulumi.Input[bool]] = None,
                 snooping: Optional[pulumi.Input[bool]] = None,
                 snooping_information_option_format_remote_id_hostname: Optional[pulumi.Input[bool]] = None,
                 snooping_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DhcpSnoopingVlanArgs']]]]] = None,
                 __props__=None):
        """
        Create a Dhcp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] compatibility_suboption_link_selection: - Choices: `cisco`, `standard`
        :param pulumi.Input[str] compatibility_suboption_server_override: - Choices: `cisco`, `standard`
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] relay_information_option_default: Default option, no vpn
        :param pulumi.Input[bool] relay_information_option_vpn: Insert VPN sub-options and change the giaddr to the outgoing interface
        :param pulumi.Input[bool] relay_information_trust_all: Received DHCP packets may contain relay info option with zero giaddr
        :param pulumi.Input[bool] snooping: DHCP Snooping
        :param pulumi.Input[bool] snooping_information_option_format_remote_id_hostname: Use configured hostname for remote id
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DhcpSnoopingVlanArgs']]]] snooping_vlans: DHCP Snooping vlan
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[DhcpArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Dhcp resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DhcpArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DhcpArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compatibility_suboption_link_selection: Optional[pulumi.Input[str]] = None,
                 compatibility_suboption_server_override: Optional[pulumi.Input[str]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 relay_information_option_default: Optional[pulumi.Input[bool]] = None,
                 relay_information_option_vpn: Optional[pulumi.Input[bool]] = None,
                 relay_information_trust_all: Optional[pulumi.Input[bool]] = None,
                 snooping: Optional[pulumi.Input[bool]] = None,
                 snooping_information_option_format_remote_id_hostname: Optional[pulumi.Input[bool]] = None,
                 snooping_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DhcpSnoopingVlanArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DhcpArgs.__new__(DhcpArgs)

            __props__.__dict__["compatibility_suboption_link_selection"] = compatibility_suboption_link_selection
            __props__.__dict__["compatibility_suboption_server_override"] = compatibility_suboption_server_override
            __props__.__dict__["delete_mode"] = delete_mode
            __props__.__dict__["device"] = device
            __props__.__dict__["relay_information_option_default"] = relay_information_option_default
            __props__.__dict__["relay_information_option_vpn"] = relay_information_option_vpn
            __props__.__dict__["relay_information_trust_all"] = relay_information_trust_all
            __props__.__dict__["snooping"] = snooping
            __props__.__dict__["snooping_information_option_format_remote_id_hostname"] = snooping_information_option_format_remote_id_hostname
            __props__.__dict__["snooping_vlans"] = snooping_vlans
        super(Dhcp, __self__).__init__(
            'iosxe:iosxe/dhcp:Dhcp',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            compatibility_suboption_link_selection: Optional[pulumi.Input[str]] = None,
            compatibility_suboption_server_override: Optional[pulumi.Input[str]] = None,
            delete_mode: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            relay_information_option_default: Optional[pulumi.Input[bool]] = None,
            relay_information_option_vpn: Optional[pulumi.Input[bool]] = None,
            relay_information_trust_all: Optional[pulumi.Input[bool]] = None,
            snooping: Optional[pulumi.Input[bool]] = None,
            snooping_information_option_format_remote_id_hostname: Optional[pulumi.Input[bool]] = None,
            snooping_vlans: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DhcpSnoopingVlanArgs']]]]] = None) -> 'Dhcp':
        """
        Get an existing Dhcp resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] compatibility_suboption_link_selection: - Choices: `cisco`, `standard`
        :param pulumi.Input[str] compatibility_suboption_server_override: - Choices: `cisco`, `standard`
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] relay_information_option_default: Default option, no vpn
        :param pulumi.Input[bool] relay_information_option_vpn: Insert VPN sub-options and change the giaddr to the outgoing interface
        :param pulumi.Input[bool] relay_information_trust_all: Received DHCP packets may contain relay info option with zero giaddr
        :param pulumi.Input[bool] snooping: DHCP Snooping
        :param pulumi.Input[bool] snooping_information_option_format_remote_id_hostname: Use configured hostname for remote id
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DhcpSnoopingVlanArgs']]]] snooping_vlans: DHCP Snooping vlan
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DhcpState.__new__(_DhcpState)

        __props__.__dict__["compatibility_suboption_link_selection"] = compatibility_suboption_link_selection
        __props__.__dict__["compatibility_suboption_server_override"] = compatibility_suboption_server_override
        __props__.__dict__["delete_mode"] = delete_mode
        __props__.__dict__["device"] = device
        __props__.__dict__["relay_information_option_default"] = relay_information_option_default
        __props__.__dict__["relay_information_option_vpn"] = relay_information_option_vpn
        __props__.__dict__["relay_information_trust_all"] = relay_information_trust_all
        __props__.__dict__["snooping"] = snooping
        __props__.__dict__["snooping_information_option_format_remote_id_hostname"] = snooping_information_option_format_remote_id_hostname
        __props__.__dict__["snooping_vlans"] = snooping_vlans
        return Dhcp(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="compatibilitySuboptionLinkSelection")
    def compatibility_suboption_link_selection(self) -> pulumi.Output[Optional[str]]:
        """
        - Choices: `cisco`, `standard`
        """
        return pulumi.get(self, "compatibility_suboption_link_selection")

    @property
    @pulumi.getter(name="compatibilitySuboptionServerOverride")
    def compatibility_suboption_server_override(self) -> pulumi.Output[Optional[str]]:
        """
        - Choices: `cisco`, `standard`
        """
        return pulumi.get(self, "compatibility_suboption_server_override")

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="relayInformationOptionDefault")
    def relay_information_option_default(self) -> pulumi.Output[Optional[bool]]:
        """
        Default option, no vpn
        """
        return pulumi.get(self, "relay_information_option_default")

    @property
    @pulumi.getter(name="relayInformationOptionVpn")
    def relay_information_option_vpn(self) -> pulumi.Output[Optional[bool]]:
        """
        Insert VPN sub-options and change the giaddr to the outgoing interface
        """
        return pulumi.get(self, "relay_information_option_vpn")

    @property
    @pulumi.getter(name="relayInformationTrustAll")
    def relay_information_trust_all(self) -> pulumi.Output[Optional[bool]]:
        """
        Received DHCP packets may contain relay info option with zero giaddr
        """
        return pulumi.get(self, "relay_information_trust_all")

    @property
    @pulumi.getter
    def snooping(self) -> pulumi.Output[Optional[bool]]:
        """
        DHCP Snooping
        """
        return pulumi.get(self, "snooping")

    @property
    @pulumi.getter(name="snoopingInformationOptionFormatRemoteIdHostname")
    def snooping_information_option_format_remote_id_hostname(self) -> pulumi.Output[Optional[bool]]:
        """
        Use configured hostname for remote id
        """
        return pulumi.get(self, "snooping_information_option_format_remote_id_hostname")

    @property
    @pulumi.getter(name="snoopingVlans")
    def snooping_vlans(self) -> pulumi.Output[Optional[Sequence['outputs.DhcpSnoopingVlan']]]:
        """
        DHCP Snooping vlan
        """
        return pulumi.get(self, "snooping_vlans")

