# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetInterfaceOspfResult',
    'AwaitableGetInterfaceOspfResult',
    'get_interface_ospf',
    'get_interface_ospf_output',
]

@pulumi.output_type
class GetInterfaceOspfResult:
    """
    A collection of values returned by getInterfaceOspf.
    """
    def __init__(__self__, cost=None, dead_interval=None, device=None, hello_interval=None, id=None, message_digest_keys=None, mtu_ignore=None, name=None, network_type_broadcast=None, network_type_non_broadcast=None, network_type_point_to_multipoint=None, network_type_point_to_point=None, priority=None, process_ids=None, ttl_security_hops=None, type=None):
        if cost and not isinstance(cost, int):
            raise TypeError("Expected argument 'cost' to be a int")
        pulumi.set(__self__, "cost", cost)
        if dead_interval and not isinstance(dead_interval, int):
            raise TypeError("Expected argument 'dead_interval' to be a int")
        pulumi.set(__self__, "dead_interval", dead_interval)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if hello_interval and not isinstance(hello_interval, int):
            raise TypeError("Expected argument 'hello_interval' to be a int")
        pulumi.set(__self__, "hello_interval", hello_interval)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if message_digest_keys and not isinstance(message_digest_keys, list):
            raise TypeError("Expected argument 'message_digest_keys' to be a list")
        pulumi.set(__self__, "message_digest_keys", message_digest_keys)
        if mtu_ignore and not isinstance(mtu_ignore, bool):
            raise TypeError("Expected argument 'mtu_ignore' to be a bool")
        pulumi.set(__self__, "mtu_ignore", mtu_ignore)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_type_broadcast and not isinstance(network_type_broadcast, bool):
            raise TypeError("Expected argument 'network_type_broadcast' to be a bool")
        pulumi.set(__self__, "network_type_broadcast", network_type_broadcast)
        if network_type_non_broadcast and not isinstance(network_type_non_broadcast, bool):
            raise TypeError("Expected argument 'network_type_non_broadcast' to be a bool")
        pulumi.set(__self__, "network_type_non_broadcast", network_type_non_broadcast)
        if network_type_point_to_multipoint and not isinstance(network_type_point_to_multipoint, bool):
            raise TypeError("Expected argument 'network_type_point_to_multipoint' to be a bool")
        pulumi.set(__self__, "network_type_point_to_multipoint", network_type_point_to_multipoint)
        if network_type_point_to_point and not isinstance(network_type_point_to_point, bool):
            raise TypeError("Expected argument 'network_type_point_to_point' to be a bool")
        pulumi.set(__self__, "network_type_point_to_point", network_type_point_to_point)
        if priority and not isinstance(priority, int):
            raise TypeError("Expected argument 'priority' to be a int")
        pulumi.set(__self__, "priority", priority)
        if process_ids and not isinstance(process_ids, list):
            raise TypeError("Expected argument 'process_ids' to be a list")
        pulumi.set(__self__, "process_ids", process_ids)
        if ttl_security_hops and not isinstance(ttl_security_hops, int):
            raise TypeError("Expected argument 'ttl_security_hops' to be a int")
        pulumi.set(__self__, "ttl_security_hops", ttl_security_hops)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def cost(self) -> int:
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter(name="deadInterval")
    def dead_interval(self) -> int:
        return pulumi.get(self, "dead_interval")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="helloInterval")
    def hello_interval(self) -> int:
        return pulumi.get(self, "hello_interval")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="messageDigestKeys")
    def message_digest_keys(self) -> Sequence['outputs.GetInterfaceOspfMessageDigestKeyResult']:
        return pulumi.get(self, "message_digest_keys")

    @property
    @pulumi.getter(name="mtuIgnore")
    def mtu_ignore(self) -> bool:
        return pulumi.get(self, "mtu_ignore")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkTypeBroadcast")
    def network_type_broadcast(self) -> bool:
        return pulumi.get(self, "network_type_broadcast")

    @property
    @pulumi.getter(name="networkTypeNonBroadcast")
    def network_type_non_broadcast(self) -> bool:
        return pulumi.get(self, "network_type_non_broadcast")

    @property
    @pulumi.getter(name="networkTypePointToMultipoint")
    def network_type_point_to_multipoint(self) -> bool:
        return pulumi.get(self, "network_type_point_to_multipoint")

    @property
    @pulumi.getter(name="networkTypePointToPoint")
    def network_type_point_to_point(self) -> bool:
        return pulumi.get(self, "network_type_point_to_point")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="processIds")
    def process_ids(self) -> Sequence['outputs.GetInterfaceOspfProcessIdResult']:
        return pulumi.get(self, "process_ids")

    @property
    @pulumi.getter(name="ttlSecurityHops")
    def ttl_security_hops(self) -> int:
        return pulumi.get(self, "ttl_security_hops")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


class AwaitableGetInterfaceOspfResult(GetInterfaceOspfResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInterfaceOspfResult(
            cost=self.cost,
            dead_interval=self.dead_interval,
            device=self.device,
            hello_interval=self.hello_interval,
            id=self.id,
            message_digest_keys=self.message_digest_keys,
            mtu_ignore=self.mtu_ignore,
            name=self.name,
            network_type_broadcast=self.network_type_broadcast,
            network_type_non_broadcast=self.network_type_non_broadcast,
            network_type_point_to_multipoint=self.network_type_point_to_multipoint,
            network_type_point_to_point=self.network_type_point_to_point,
            priority=self.priority,
            process_ids=self.process_ids,
            ttl_security_hops=self.ttl_security_hops,
            type=self.type)


def get_interface_ospf(device: Optional[str] = None,
                       name: Optional[str] = None,
                       type: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInterfaceOspfResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['name'] = name
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:iosxe/getInterfaceOspf:getInterfaceOspf', __args__, opts=opts, typ=GetInterfaceOspfResult).value

    return AwaitableGetInterfaceOspfResult(
        cost=pulumi.get(__ret__, 'cost'),
        dead_interval=pulumi.get(__ret__, 'dead_interval'),
        device=pulumi.get(__ret__, 'device'),
        hello_interval=pulumi.get(__ret__, 'hello_interval'),
        id=pulumi.get(__ret__, 'id'),
        message_digest_keys=pulumi.get(__ret__, 'message_digest_keys'),
        mtu_ignore=pulumi.get(__ret__, 'mtu_ignore'),
        name=pulumi.get(__ret__, 'name'),
        network_type_broadcast=pulumi.get(__ret__, 'network_type_broadcast'),
        network_type_non_broadcast=pulumi.get(__ret__, 'network_type_non_broadcast'),
        network_type_point_to_multipoint=pulumi.get(__ret__, 'network_type_point_to_multipoint'),
        network_type_point_to_point=pulumi.get(__ret__, 'network_type_point_to_point'),
        priority=pulumi.get(__ret__, 'priority'),
        process_ids=pulumi.get(__ret__, 'process_ids'),
        ttl_security_hops=pulumi.get(__ret__, 'ttl_security_hops'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_interface_ospf)
def get_interface_ospf_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                              name: Optional[pulumi.Input[str]] = None,
                              type: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInterfaceOspfResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
