# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetPimResult',
    'AwaitableGetPimResult',
    'get_pim',
    'get_pim_output',
]

@pulumi.output_type
class GetPimResult:
    """
    A collection of values returned by getPim.
    """
    def __init__(__self__, autorp=None, autorp_listener=None, bsr_candidate_accept_rp_candidate=None, bsr_candidate_loopback=None, bsr_candidate_mask=None, bsr_candidate_priority=None, device=None, id=None, rp_address=None, rp_address_bidir=None, rp_address_override=None, rp_addresses=None, rp_candidates=None, ssm_default=None, ssm_range=None):
        if autorp and not isinstance(autorp, bool):
            raise TypeError("Expected argument 'autorp' to be a bool")
        pulumi.set(__self__, "autorp", autorp)
        if autorp_listener and not isinstance(autorp_listener, bool):
            raise TypeError("Expected argument 'autorp_listener' to be a bool")
        pulumi.set(__self__, "autorp_listener", autorp_listener)
        if bsr_candidate_accept_rp_candidate and not isinstance(bsr_candidate_accept_rp_candidate, str):
            raise TypeError("Expected argument 'bsr_candidate_accept_rp_candidate' to be a str")
        pulumi.set(__self__, "bsr_candidate_accept_rp_candidate", bsr_candidate_accept_rp_candidate)
        if bsr_candidate_loopback and not isinstance(bsr_candidate_loopback, int):
            raise TypeError("Expected argument 'bsr_candidate_loopback' to be a int")
        pulumi.set(__self__, "bsr_candidate_loopback", bsr_candidate_loopback)
        if bsr_candidate_mask and not isinstance(bsr_candidate_mask, int):
            raise TypeError("Expected argument 'bsr_candidate_mask' to be a int")
        pulumi.set(__self__, "bsr_candidate_mask", bsr_candidate_mask)
        if bsr_candidate_priority and not isinstance(bsr_candidate_priority, int):
            raise TypeError("Expected argument 'bsr_candidate_priority' to be a int")
        pulumi.set(__self__, "bsr_candidate_priority", bsr_candidate_priority)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if rp_address and not isinstance(rp_address, str):
            raise TypeError("Expected argument 'rp_address' to be a str")
        pulumi.set(__self__, "rp_address", rp_address)
        if rp_address_bidir and not isinstance(rp_address_bidir, bool):
            raise TypeError("Expected argument 'rp_address_bidir' to be a bool")
        pulumi.set(__self__, "rp_address_bidir", rp_address_bidir)
        if rp_address_override and not isinstance(rp_address_override, bool):
            raise TypeError("Expected argument 'rp_address_override' to be a bool")
        pulumi.set(__self__, "rp_address_override", rp_address_override)
        if rp_addresses and not isinstance(rp_addresses, list):
            raise TypeError("Expected argument 'rp_addresses' to be a list")
        pulumi.set(__self__, "rp_addresses", rp_addresses)
        if rp_candidates and not isinstance(rp_candidates, list):
            raise TypeError("Expected argument 'rp_candidates' to be a list")
        pulumi.set(__self__, "rp_candidates", rp_candidates)
        if ssm_default and not isinstance(ssm_default, bool):
            raise TypeError("Expected argument 'ssm_default' to be a bool")
        pulumi.set(__self__, "ssm_default", ssm_default)
        if ssm_range and not isinstance(ssm_range, str):
            raise TypeError("Expected argument 'ssm_range' to be a str")
        pulumi.set(__self__, "ssm_range", ssm_range)

    @property
    @pulumi.getter
    def autorp(self) -> bool:
        return pulumi.get(self, "autorp")

    @property
    @pulumi.getter(name="autorpListener")
    def autorp_listener(self) -> bool:
        return pulumi.get(self, "autorp_listener")

    @property
    @pulumi.getter(name="bsrCandidateAcceptRpCandidate")
    def bsr_candidate_accept_rp_candidate(self) -> str:
        return pulumi.get(self, "bsr_candidate_accept_rp_candidate")

    @property
    @pulumi.getter(name="bsrCandidateLoopback")
    def bsr_candidate_loopback(self) -> int:
        return pulumi.get(self, "bsr_candidate_loopback")

    @property
    @pulumi.getter(name="bsrCandidateMask")
    def bsr_candidate_mask(self) -> int:
        return pulumi.get(self, "bsr_candidate_mask")

    @property
    @pulumi.getter(name="bsrCandidatePriority")
    def bsr_candidate_priority(self) -> int:
        return pulumi.get(self, "bsr_candidate_priority")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="rpAddress")
    def rp_address(self) -> str:
        return pulumi.get(self, "rp_address")

    @property
    @pulumi.getter(name="rpAddressBidir")
    def rp_address_bidir(self) -> bool:
        return pulumi.get(self, "rp_address_bidir")

    @property
    @pulumi.getter(name="rpAddressOverride")
    def rp_address_override(self) -> bool:
        return pulumi.get(self, "rp_address_override")

    @property
    @pulumi.getter(name="rpAddresses")
    def rp_addresses(self) -> Sequence['outputs.GetPimRpAddressResult']:
        return pulumi.get(self, "rp_addresses")

    @property
    @pulumi.getter(name="rpCandidates")
    def rp_candidates(self) -> Sequence['outputs.GetPimRpCandidateResult']:
        return pulumi.get(self, "rp_candidates")

    @property
    @pulumi.getter(name="ssmDefault")
    def ssm_default(self) -> bool:
        return pulumi.get(self, "ssm_default")

    @property
    @pulumi.getter(name="ssmRange")
    def ssm_range(self) -> str:
        return pulumi.get(self, "ssm_range")


class AwaitableGetPimResult(GetPimResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPimResult(
            autorp=self.autorp,
            autorp_listener=self.autorp_listener,
            bsr_candidate_accept_rp_candidate=self.bsr_candidate_accept_rp_candidate,
            bsr_candidate_loopback=self.bsr_candidate_loopback,
            bsr_candidate_mask=self.bsr_candidate_mask,
            bsr_candidate_priority=self.bsr_candidate_priority,
            device=self.device,
            id=self.id,
            rp_address=self.rp_address,
            rp_address_bidir=self.rp_address_bidir,
            rp_address_override=self.rp_address_override,
            rp_addresses=self.rp_addresses,
            rp_candidates=self.rp_candidates,
            ssm_default=self.ssm_default,
            ssm_range=self.ssm_range)


def get_pim(device: Optional[str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPimResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['device'] = device
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:iosxe/getPim:getPim', __args__, opts=opts, typ=GetPimResult).value

    return AwaitableGetPimResult(
        autorp=pulumi.get(__ret__, 'autorp'),
        autorp_listener=pulumi.get(__ret__, 'autorp_listener'),
        bsr_candidate_accept_rp_candidate=pulumi.get(__ret__, 'bsr_candidate_accept_rp_candidate'),
        bsr_candidate_loopback=pulumi.get(__ret__, 'bsr_candidate_loopback'),
        bsr_candidate_mask=pulumi.get(__ret__, 'bsr_candidate_mask'),
        bsr_candidate_priority=pulumi.get(__ret__, 'bsr_candidate_priority'),
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        rp_address=pulumi.get(__ret__, 'rp_address'),
        rp_address_bidir=pulumi.get(__ret__, 'rp_address_bidir'),
        rp_address_override=pulumi.get(__ret__, 'rp_address_override'),
        rp_addresses=pulumi.get(__ret__, 'rp_addresses'),
        rp_candidates=pulumi.get(__ret__, 'rp_candidates'),
        ssm_default=pulumi.get(__ret__, 'ssm_default'),
        ssm_range=pulumi.get(__ret__, 'ssm_range'))


@_utilities.lift_output_func(get_pim)
def get_pim_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPimResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
