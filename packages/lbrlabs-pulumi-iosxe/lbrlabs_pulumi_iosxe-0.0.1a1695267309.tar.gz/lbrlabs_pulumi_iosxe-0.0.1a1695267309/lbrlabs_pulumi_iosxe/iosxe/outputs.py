# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AaaAccountingExec',
    'AaaAccountingNetwork',
    'AaaAuthenticationLogin',
    'AaaAuthorizationExec',
    'AaaAuthorizationNetwork',
    'AaaGroupServerRadius',
    'AaaGroupServerRadiusServerName',
    'AaaGroupServerTacacsplus',
    'AaaGroupServerTacacsplusServerName',
    'AaaServerRadiusDynamicAuthorClient',
    'AccessListExtendedEntry',
    'AccessListStandardEntry',
    'ArpInspectionFilter',
    'ArpInspectionFilterVlan',
    'BfdIpv4BothVrf',
    'BfdIpv4WithDstVrf',
    'BfdIpv4WithSrcVrf',
    'BfdIpv4WithoutVrf',
    'BfdIpv6WithBothVrf',
    'BfdIpv6WithDstVrf',
    'BfdIpv6WithSrcVrf',
    'BfdIpv6WithoutVrf',
    'BgpAddressFamilyIpv4Ipv4UnicastNetwork',
    'BgpAddressFamilyIpv4Ipv4UnicastNetworksMask',
    'BgpAddressFamilyIpv4VrfVrf',
    'BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork',
    'BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask',
    'BgpAddressFamilyIpv6Ipv6UnicastNetwork',
    'BgpAddressFamilyIpv6VrfVrf',
    'BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork',
    'BgpIpv4UnicastNeighborRouteMap',
    'BgpIpv4UnicastVrfNeighborRouteMap',
    'BgpIpv6UnicastNeighborRouteMap',
    'CdpTlvList',
    'ClassMapMatchActivatedServiceTemplate',
    'CryptoIkev2KeyringPeer',
    'CryptoIkev2PolicyProposal',
    'CryptoIkev2ProfileMatchIdentityRemoteIpv4Address',
    'DhcpSnoopingVlan',
    'Dot1xCredential',
    'InterfaceEthernetHelperAddress',
    'InterfaceEthernetIpv6Address',
    'InterfaceEthernetIpv6LinkLocalAddress',
    'InterfaceEthernetSourceTemplate',
    'InterfaceLoopbackIpv6Address',
    'InterfaceLoopbackIpv6LinkLocalAddress',
    'InterfaceNveVni',
    'InterfaceNveVniVrf',
    'InterfaceOspfMessageDigestKey',
    'InterfaceOspfProcessId',
    'InterfaceOspfProcessIdArea',
    'InterfacePortChannelHelperAddress',
    'InterfacePortChannelIpv6Address',
    'InterfacePortChannelIpv6LinkLocalAddress',
    'InterfacePortChannelSubinterfaceHelperAddress',
    'InterfacePortChannelSubinterfaceIpv6Address',
    'InterfacePortChannelSubinterfaceIpv6LinkLocalAddress',
    'InterfaceTunnelHelperAddress',
    'InterfaceTunnelIpv6Address',
    'InterfaceTunnelIpv6LinkLocalAddress',
    'InterfaceVlanHelperAddress',
    'InterfaceVlanIpv6Address',
    'InterfaceVlanIpv6LinkLocalAddress',
    'LineConsole',
    'LineVty',
    'LineVtyAccessClass',
    'LoggingIpv4Host',
    'LoggingIpv4HostTransportTransportTcpPort',
    'LoggingIpv4HostTransportTransportTlsPort',
    'LoggingIpv4HostTransportTransportUdpPort',
    'LoggingIpv4HostVrfTransportTransportTcpPort',
    'LoggingIpv4HostVrfTransportTransportTlsPort',
    'LoggingIpv4HostVrfTransportTransportUdpPort',
    'LoggingIpv4VrfHost',
    'LoggingIpv6Host',
    'LoggingIpv6HostTransportTransportTcpPort',
    'LoggingIpv6HostTransportTransportTlsPort',
    'LoggingIpv6HostTransportTransportUdpPort',
    'LoggingIpv6HostVrfTransportTransportTcpPort',
    'LoggingIpv6HostVrfTransportTransportTlsPort',
    'LoggingIpv6HostVrfTransportTransportUdpPort',
    'LoggingIpv6VrfHost',
    'LoggingSourceInterfacesVrf',
    'MdtSubscriptionReceiver',
    'MsdpPassword',
    'MsdpPeer',
    'MsdpVrfPassword',
    'MsdpVrfPeer',
    'NtpAuthenticationKey',
    'NtpPeer',
    'NtpPeerVrf',
    'NtpPeerVrfPeer',
    'NtpServer',
    'NtpServerVrf',
    'NtpServerVrfServer',
    'OspfArea',
    'OspfNeighbor',
    'OspfNetwork',
    'OspfSummaryAddress',
    'OspfVrfArea',
    'OspfVrfNeighbor',
    'OspfVrfNetwork',
    'OspfVrfSummaryAddress',
    'PimRpAddress',
    'PimRpCandidate',
    'PimVrfRpAddress',
    'PimVrfRpCandidate',
    'PolicyMapEventClassNumber',
    'PolicyMapEventClassNumberActionNumber',
    'PrefixListPrefix',
    'RadiusServerAttribute',
    'RadiusServerAttributeAttribute31Parameter',
    'RestconfList',
    'RouteMapEntry',
    'ServiceTemplateAccessGroup',
    'ServiceTemplateInterfaceTemplate',
    'ServiceTemplateTag',
    'SnmpServerContext',
    'SnmpServerGroupV3Security',
    'SnmpServerHost',
    'SnmpServerSnmpCommunity',
    'SnmpServerView',
    'StaticRouteNextHop',
    'StaticRouteVrfRoute',
    'StaticRouteVrfRouteNextHop',
    'SystemMulticastRoutingVrf',
    'TemplateDeviceTrackingAttachPolicy',
    'TemplateIpAccessGroup',
    'TemplateSwitchportPortSecurityMaximumRange',
    'VrfIpv4RouteTargetExport',
    'VrfIpv4RouteTargetExportStitching',
    'VrfIpv4RouteTargetImport',
    'VrfIpv4RouteTargetImportStitching',
    'VrfIpv6RouteTargetExport',
    'VrfIpv6RouteTargetExportStitching',
    'VrfIpv6RouteTargetImport',
    'VrfIpv6RouteTargetImportStitching',
    'VrfRouteTargetExport',
    'VrfRouteTargetImport',
    'GetAaaAccountingExecResult',
    'GetAaaAccountingNetworkResult',
    'GetAaaAuthenticationLoginResult',
    'GetAaaAuthorizationExecResult',
    'GetAaaAuthorizationNetworkResult',
    'GetAaaGroupServerRadiusResult',
    'GetAaaGroupServerRadiusServerNameResult',
    'GetAaaGroupServerTacacsplusResult',
    'GetAaaGroupServerTacacsplusServerNameResult',
    'GetAaaServerRadiusDynamicAuthorClientResult',
    'GetAccessListExtendedEntryResult',
    'GetAccessListStandardEntryResult',
    'GetArpInspectionFilterResult',
    'GetArpInspectionFilterVlanResult',
    'GetBfdIpv4BothVrfResult',
    'GetBfdIpv4WithDstVrfResult',
    'GetBfdIpv4WithSrcVrfResult',
    'GetBfdIpv4WithoutVrfResult',
    'GetBfdIpv6WithBothVrfResult',
    'GetBfdIpv6WithDstVrfResult',
    'GetBfdIpv6WithSrcVrfResult',
    'GetBfdIpv6WithoutVrfResult',
    'GetBgpAddressFamilyIpv4Ipv4UnicastNetworkResult',
    'GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskResult',
    'GetBgpAddressFamilyIpv4VrfVrfResult',
    'GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkResult',
    'GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskResult',
    'GetBgpAddressFamilyIpv6Ipv6UnicastNetworkResult',
    'GetBgpAddressFamilyIpv6VrfVrfResult',
    'GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkResult',
    'GetBgpIpv4UnicastNeighborRouteMapResult',
    'GetBgpIpv4UnicastVrfNeighborRouteMapResult',
    'GetBgpIpv6UnicastNeighborRouteMapResult',
    'GetCdpTlvListResult',
    'GetClassMapMatchActivatedServiceTemplateResult',
    'GetCryptoIkev2KeyringPeerResult',
    'GetCryptoIkev2PolicyProposalResult',
    'GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressResult',
    'GetDhcpSnoopingVlanResult',
    'GetDot1xCredentialResult',
    'GetInterfaceEthernetHelperAddressResult',
    'GetInterfaceEthernetIpv6AddressResult',
    'GetInterfaceEthernetIpv6LinkLocalAddressResult',
    'GetInterfaceEthernetSourceTemplateResult',
    'GetInterfaceLoopbackIpv6AddressResult',
    'GetInterfaceLoopbackIpv6LinkLocalAddressResult',
    'GetInterfaceNveVniResult',
    'GetInterfaceNveVniVrfResult',
    'GetInterfaceOspfMessageDigestKeyResult',
    'GetInterfaceOspfProcessIdResult',
    'GetInterfaceOspfProcessIdAreaResult',
    'GetInterfacePortChannelHelperAddressResult',
    'GetInterfacePortChannelIpv6AddressResult',
    'GetInterfacePortChannelIpv6LinkLocalAddressResult',
    'GetInterfacePortChannelSubinterfaceHelperAddressResult',
    'GetInterfacePortChannelSubinterfaceIpv6AddressResult',
    'GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressResult',
    'GetInterfaceTunnelHelperAddressResult',
    'GetInterfaceTunnelIpv6AddressResult',
    'GetInterfaceTunnelIpv6LinkLocalAddressResult',
    'GetInterfaceVlanHelperAddressResult',
    'GetInterfaceVlanIpv6AddressResult',
    'GetInterfaceVlanIpv6LinkLocalAddressResult',
    'GetLineConsoleResult',
    'GetLineVtyResult',
    'GetLineVtyAccessClassResult',
    'GetLoggingIpv4HostResult',
    'GetLoggingIpv4HostTransportTransportTcpPortResult',
    'GetLoggingIpv4HostTransportTransportTlsPortResult',
    'GetLoggingIpv4HostTransportTransportUdpPortResult',
    'GetLoggingIpv4HostVrfTransportTransportTcpPortResult',
    'GetLoggingIpv4HostVrfTransportTransportTlsPortResult',
    'GetLoggingIpv4HostVrfTransportTransportUdpPortResult',
    'GetLoggingIpv4VrfHostResult',
    'GetLoggingIpv6HostResult',
    'GetLoggingIpv6HostTransportTransportTcpPortResult',
    'GetLoggingIpv6HostTransportTransportTlsPortResult',
    'GetLoggingIpv6HostTransportTransportUdpPortResult',
    'GetLoggingIpv6HostVrfTransportTransportTcpPortResult',
    'GetLoggingIpv6HostVrfTransportTransportTlsPortResult',
    'GetLoggingIpv6HostVrfTransportTransportUdpPortResult',
    'GetLoggingIpv6VrfHostResult',
    'GetLoggingSourceInterfacesVrfResult',
    'GetMdtSubscriptionReceiverResult',
    'GetMsdpPasswordResult',
    'GetMsdpPeerResult',
    'GetMsdpVrfPasswordResult',
    'GetMsdpVrfPeerResult',
    'GetNtpAuthenticationKeyResult',
    'GetNtpPeerResult',
    'GetNtpPeerVrfResult',
    'GetNtpPeerVrfPeerResult',
    'GetNtpServerResult',
    'GetNtpServerVrfResult',
    'GetNtpServerVrfServerResult',
    'GetOspfAreaResult',
    'GetOspfNeighborResult',
    'GetOspfNetworkResult',
    'GetOspfSummaryAddressResult',
    'GetOspfVrfAreaResult',
    'GetOspfVrfNeighborResult',
    'GetOspfVrfNetworkResult',
    'GetOspfVrfSummaryAddressResult',
    'GetPimRpAddressResult',
    'GetPimRpCandidateResult',
    'GetPimVrfRpAddressResult',
    'GetPimVrfRpCandidateResult',
    'GetPolicyMapEventClassNumberResult',
    'GetPolicyMapEventClassNumberActionNumberResult',
    'GetPrefixListPrefixResult',
    'GetRadiusServerAttributeResult',
    'GetRadiusServerAttributeAttribute31ParameterResult',
    'GetRouteMapEntryResult',
    'GetServiceTemplateAccessGroupResult',
    'GetServiceTemplateInterfaceTemplateResult',
    'GetServiceTemplateTagResult',
    'GetSnmpServerContextResult',
    'GetSnmpServerGroupV3SecurityResult',
    'GetSnmpServerHostResult',
    'GetSnmpServerSnmpCommunityResult',
    'GetSnmpServerViewResult',
    'GetStaticRouteNextHopResult',
    'GetStaticRouteVrfRouteResult',
    'GetStaticRouteVrfRouteNextHopResult',
    'GetSystemMulticastRoutingVrfResult',
    'GetTemplateDeviceTrackingAttachPolicyResult',
    'GetTemplateIpAccessGroupResult',
    'GetTemplateSwitchportPortSecurityMaximumRangeResult',
    'GetVrfIpv4RouteTargetExportResult',
    'GetVrfIpv4RouteTargetExportStitchingResult',
    'GetVrfIpv4RouteTargetImportResult',
    'GetVrfIpv4RouteTargetImportStitchingResult',
    'GetVrfIpv6RouteTargetExportResult',
    'GetVrfIpv6RouteTargetExportStitchingResult',
    'GetVrfIpv6RouteTargetImportResult',
    'GetVrfIpv6RouteTargetImportStitchingResult',
    'GetVrfRouteTargetExportResult',
    'GetVrfRouteTargetImportResult',
]

@pulumi.output_type
class AaaAccountingExec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startStopGroup1":
            suggest = "start_stop_group1"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AaaAccountingExec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AaaAccountingExec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AaaAccountingExec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 start_stop_group1: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if start_stop_group1 is not None:
            pulumi.set(__self__, "start_stop_group1", start_stop_group1)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="startStopGroup1")
    def start_stop_group1(self) -> Optional[str]:
        return pulumi.get(self, "start_stop_group1")


@pulumi.output_type
class AaaAccountingNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startStopGroup1":
            suggest = "start_stop_group1"
        elif key == "startStopGroup2":
            suggest = "start_stop_group2"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AaaAccountingNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AaaAccountingNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AaaAccountingNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 start_stop_group1: Optional[str] = None,
                 start_stop_group2: Optional[str] = None):
        pulumi.set(__self__, "id", id)
        if start_stop_group1 is not None:
            pulumi.set(__self__, "start_stop_group1", start_stop_group1)
        if start_stop_group2 is not None:
            pulumi.set(__self__, "start_stop_group2", start_stop_group2)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="startStopGroup1")
    def start_stop_group1(self) -> Optional[str]:
        return pulumi.get(self, "start_stop_group1")

    @property
    @pulumi.getter(name="startStopGroup2")
    def start_stop_group2(self) -> Optional[str]:
        return pulumi.get(self, "start_stop_group2")


@pulumi.output_type
class AaaAuthenticationLogin(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "a1Enable":
            suggest = "a1_enable"
        elif key == "a1Group":
            suggest = "a1_group"
        elif key == "a1Line":
            suggest = "a1_line"
        elif key == "a1Local":
            suggest = "a1_local"
        elif key == "a1None":
            suggest = "a1_none"
        elif key == "a2Enable":
            suggest = "a2_enable"
        elif key == "a2Group":
            suggest = "a2_group"
        elif key == "a2Line":
            suggest = "a2_line"
        elif key == "a2Local":
            suggest = "a2_local"
        elif key == "a2None":
            suggest = "a2_none"
        elif key == "a3Enable":
            suggest = "a3_enable"
        elif key == "a3Group":
            suggest = "a3_group"
        elif key == "a3Line":
            suggest = "a3_line"
        elif key == "a3Local":
            suggest = "a3_local"
        elif key == "a3None":
            suggest = "a3_none"
        elif key == "a4Enable":
            suggest = "a4_enable"
        elif key == "a4Group":
            suggest = "a4_group"
        elif key == "a4Line":
            suggest = "a4_line"
        elif key == "a4Local":
            suggest = "a4_local"
        elif key == "a4None":
            suggest = "a4_none"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AaaAuthenticationLogin. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AaaAuthenticationLogin.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AaaAuthenticationLogin.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 a1_enable: Optional[bool] = None,
                 a1_group: Optional[str] = None,
                 a1_line: Optional[bool] = None,
                 a1_local: Optional[bool] = None,
                 a1_none: Optional[bool] = None,
                 a2_enable: Optional[bool] = None,
                 a2_group: Optional[str] = None,
                 a2_line: Optional[bool] = None,
                 a2_local: Optional[bool] = None,
                 a2_none: Optional[bool] = None,
                 a3_enable: Optional[bool] = None,
                 a3_group: Optional[str] = None,
                 a3_line: Optional[bool] = None,
                 a3_local: Optional[bool] = None,
                 a3_none: Optional[bool] = None,
                 a4_enable: Optional[bool] = None,
                 a4_group: Optional[str] = None,
                 a4_line: Optional[bool] = None,
                 a4_local: Optional[bool] = None,
                 a4_none: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        if a1_enable is not None:
            pulumi.set(__self__, "a1_enable", a1_enable)
        if a1_group is not None:
            pulumi.set(__self__, "a1_group", a1_group)
        if a1_line is not None:
            pulumi.set(__self__, "a1_line", a1_line)
        if a1_local is not None:
            pulumi.set(__self__, "a1_local", a1_local)
        if a1_none is not None:
            pulumi.set(__self__, "a1_none", a1_none)
        if a2_enable is not None:
            pulumi.set(__self__, "a2_enable", a2_enable)
        if a2_group is not None:
            pulumi.set(__self__, "a2_group", a2_group)
        if a2_line is not None:
            pulumi.set(__self__, "a2_line", a2_line)
        if a2_local is not None:
            pulumi.set(__self__, "a2_local", a2_local)
        if a2_none is not None:
            pulumi.set(__self__, "a2_none", a2_none)
        if a3_enable is not None:
            pulumi.set(__self__, "a3_enable", a3_enable)
        if a3_group is not None:
            pulumi.set(__self__, "a3_group", a3_group)
        if a3_line is not None:
            pulumi.set(__self__, "a3_line", a3_line)
        if a3_local is not None:
            pulumi.set(__self__, "a3_local", a3_local)
        if a3_none is not None:
            pulumi.set(__self__, "a3_none", a3_none)
        if a4_enable is not None:
            pulumi.set(__self__, "a4_enable", a4_enable)
        if a4_group is not None:
            pulumi.set(__self__, "a4_group", a4_group)
        if a4_line is not None:
            pulumi.set(__self__, "a4_line", a4_line)
        if a4_local is not None:
            pulumi.set(__self__, "a4_local", a4_local)
        if a4_none is not None:
            pulumi.set(__self__, "a4_none", a4_none)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="a1Enable")
    def a1_enable(self) -> Optional[bool]:
        return pulumi.get(self, "a1_enable")

    @property
    @pulumi.getter(name="a1Group")
    def a1_group(self) -> Optional[str]:
        return pulumi.get(self, "a1_group")

    @property
    @pulumi.getter(name="a1Line")
    def a1_line(self) -> Optional[bool]:
        return pulumi.get(self, "a1_line")

    @property
    @pulumi.getter(name="a1Local")
    def a1_local(self) -> Optional[bool]:
        return pulumi.get(self, "a1_local")

    @property
    @pulumi.getter(name="a1None")
    def a1_none(self) -> Optional[bool]:
        return pulumi.get(self, "a1_none")

    @property
    @pulumi.getter(name="a2Enable")
    def a2_enable(self) -> Optional[bool]:
        return pulumi.get(self, "a2_enable")

    @property
    @pulumi.getter(name="a2Group")
    def a2_group(self) -> Optional[str]:
        return pulumi.get(self, "a2_group")

    @property
    @pulumi.getter(name="a2Line")
    def a2_line(self) -> Optional[bool]:
        return pulumi.get(self, "a2_line")

    @property
    @pulumi.getter(name="a2Local")
    def a2_local(self) -> Optional[bool]:
        return pulumi.get(self, "a2_local")

    @property
    @pulumi.getter(name="a2None")
    def a2_none(self) -> Optional[bool]:
        return pulumi.get(self, "a2_none")

    @property
    @pulumi.getter(name="a3Enable")
    def a3_enable(self) -> Optional[bool]:
        return pulumi.get(self, "a3_enable")

    @property
    @pulumi.getter(name="a3Group")
    def a3_group(self) -> Optional[str]:
        return pulumi.get(self, "a3_group")

    @property
    @pulumi.getter(name="a3Line")
    def a3_line(self) -> Optional[bool]:
        return pulumi.get(self, "a3_line")

    @property
    @pulumi.getter(name="a3Local")
    def a3_local(self) -> Optional[bool]:
        return pulumi.get(self, "a3_local")

    @property
    @pulumi.getter(name="a3None")
    def a3_none(self) -> Optional[bool]:
        return pulumi.get(self, "a3_none")

    @property
    @pulumi.getter(name="a4Enable")
    def a4_enable(self) -> Optional[bool]:
        return pulumi.get(self, "a4_enable")

    @property
    @pulumi.getter(name="a4Group")
    def a4_group(self) -> Optional[str]:
        return pulumi.get(self, "a4_group")

    @property
    @pulumi.getter(name="a4Line")
    def a4_line(self) -> Optional[bool]:
        return pulumi.get(self, "a4_line")

    @property
    @pulumi.getter(name="a4Local")
    def a4_local(self) -> Optional[bool]:
        return pulumi.get(self, "a4_local")

    @property
    @pulumi.getter(name="a4None")
    def a4_none(self) -> Optional[bool]:
        return pulumi.get(self, "a4_none")


@pulumi.output_type
class AaaAuthorizationExec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "a1Group":
            suggest = "a1_group"
        elif key == "a1IfAuthenticated":
            suggest = "a1_if_authenticated"
        elif key == "a1Local":
            suggest = "a1_local"
        elif key == "a2Local":
            suggest = "a2_local"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AaaAuthorizationExec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AaaAuthorizationExec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AaaAuthorizationExec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 a1_group: Optional[str] = None,
                 a1_if_authenticated: Optional[bool] = None,
                 a1_local: Optional[bool] = None,
                 a2_local: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        if a1_group is not None:
            pulumi.set(__self__, "a1_group", a1_group)
        if a1_if_authenticated is not None:
            pulumi.set(__self__, "a1_if_authenticated", a1_if_authenticated)
        if a1_local is not None:
            pulumi.set(__self__, "a1_local", a1_local)
        if a2_local is not None:
            pulumi.set(__self__, "a2_local", a2_local)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="a1Group")
    def a1_group(self) -> Optional[str]:
        return pulumi.get(self, "a1_group")

    @property
    @pulumi.getter(name="a1IfAuthenticated")
    def a1_if_authenticated(self) -> Optional[bool]:
        return pulumi.get(self, "a1_if_authenticated")

    @property
    @pulumi.getter(name="a1Local")
    def a1_local(self) -> Optional[bool]:
        return pulumi.get(self, "a1_local")

    @property
    @pulumi.getter(name="a2Local")
    def a2_local(self) -> Optional[bool]:
        return pulumi.get(self, "a2_local")


@pulumi.output_type
class AaaAuthorizationNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "a1Group":
            suggest = "a1_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AaaAuthorizationNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AaaAuthorizationNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AaaAuthorizationNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 a1_group: Optional[str] = None):
        pulumi.set(__self__, "id", id)
        if a1_group is not None:
            pulumi.set(__self__, "a1_group", a1_group)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="a1Group")
    def a1_group(self) -> Optional[str]:
        return pulumi.get(self, "a1_group")


@pulumi.output_type
class AaaGroupServerRadius(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipRadiusSourceInterfaceLoopback":
            suggest = "ip_radius_source_interface_loopback"
        elif key == "serverNames":
            suggest = "server_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AaaGroupServerRadius. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AaaGroupServerRadius.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AaaGroupServerRadius.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 ip_radius_source_interface_loopback: Optional[int] = None,
                 server_names: Optional[Sequence['outputs.AaaGroupServerRadiusServerName']] = None):
        pulumi.set(__self__, "name", name)
        if ip_radius_source_interface_loopback is not None:
            pulumi.set(__self__, "ip_radius_source_interface_loopback", ip_radius_source_interface_loopback)
        if server_names is not None:
            pulumi.set(__self__, "server_names", server_names)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ipRadiusSourceInterfaceLoopback")
    def ip_radius_source_interface_loopback(self) -> Optional[int]:
        return pulumi.get(self, "ip_radius_source_interface_loopback")

    @property
    @pulumi.getter(name="serverNames")
    def server_names(self) -> Optional[Sequence['outputs.AaaGroupServerRadiusServerName']]:
        return pulumi.get(self, "server_names")


@pulumi.output_type
class AaaGroupServerRadiusServerName(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class AaaGroupServerTacacsplus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverNames":
            suggest = "server_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AaaGroupServerTacacsplus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AaaGroupServerTacacsplus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AaaGroupServerTacacsplus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 server_names: Optional[Sequence['outputs.AaaGroupServerTacacsplusServerName']] = None):
        pulumi.set(__self__, "name", name)
        if server_names is not None:
            pulumi.set(__self__, "server_names", server_names)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serverNames")
    def server_names(self) -> Optional[Sequence['outputs.AaaGroupServerTacacsplusServerName']]:
        return pulumi.get(self, "server_names")


@pulumi.output_type
class AaaGroupServerTacacsplusServerName(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class AaaServerRadiusDynamicAuthorClient(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverKey":
            suggest = "server_key"
        elif key == "serverKeyType":
            suggest = "server_key_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AaaServerRadiusDynamicAuthorClient. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AaaServerRadiusDynamicAuthorClient.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AaaServerRadiusDynamicAuthorClient.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip: str,
                 server_key: Optional[str] = None,
                 server_key_type: Optional[str] = None):
        pulumi.set(__self__, "ip", ip)
        if server_key is not None:
            pulumi.set(__self__, "server_key", server_key)
        if server_key_type is not None:
            pulumi.set(__self__, "server_key_type", server_key_type)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="serverKey")
    def server_key(self) -> Optional[str]:
        return pulumi.get(self, "server_key")

    @property
    @pulumi.getter(name="serverKeyType")
    def server_key_type(self) -> Optional[str]:
        return pulumi.get(self, "server_key_type")


@pulumi.output_type
class AccessListExtendedEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "aceRuleAction":
            suggest = "ace_rule_action"
        elif key == "aceRuleProtocol":
            suggest = "ace_rule_protocol"
        elif key == "destinationAny":
            suggest = "destination_any"
        elif key == "destinationHost":
            suggest = "destination_host"
        elif key == "destinationObjectGroup":
            suggest = "destination_object_group"
        elif key == "destinationPortEqual":
            suggest = "destination_port_equal"
        elif key == "destinationPortGreaterThan":
            suggest = "destination_port_greater_than"
        elif key == "destinationPortLesserThan":
            suggest = "destination_port_lesser_than"
        elif key == "destinationPortRangeFrom":
            suggest = "destination_port_range_from"
        elif key == "destinationPortRangeTo":
            suggest = "destination_port_range_to"
        elif key == "destinationPrefix":
            suggest = "destination_prefix"
        elif key == "destinationPrefixMask":
            suggest = "destination_prefix_mask"
        elif key == "logInput":
            suggest = "log_input"
        elif key == "serviceObjectGroup":
            suggest = "service_object_group"
        elif key == "sourceAny":
            suggest = "source_any"
        elif key == "sourceHost":
            suggest = "source_host"
        elif key == "sourceObjectGroup":
            suggest = "source_object_group"
        elif key == "sourcePortEqual":
            suggest = "source_port_equal"
        elif key == "sourcePortGreaterThan":
            suggest = "source_port_greater_than"
        elif key == "sourcePortLesserThan":
            suggest = "source_port_lesser_than"
        elif key == "sourcePortRangeFrom":
            suggest = "source_port_range_from"
        elif key == "sourcePortRangeTo":
            suggest = "source_port_range_to"
        elif key == "sourcePrefix":
            suggest = "source_prefix"
        elif key == "sourcePrefixMask":
            suggest = "source_prefix_mask"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccessListExtendedEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccessListExtendedEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccessListExtendedEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sequence: int,
                 ace_rule_action: Optional[str] = None,
                 ace_rule_protocol: Optional[str] = None,
                 ack: Optional[bool] = None,
                 destination_any: Optional[bool] = None,
                 destination_host: Optional[str] = None,
                 destination_object_group: Optional[str] = None,
                 destination_port_equal: Optional[str] = None,
                 destination_port_greater_than: Optional[str] = None,
                 destination_port_lesser_than: Optional[str] = None,
                 destination_port_range_from: Optional[str] = None,
                 destination_port_range_to: Optional[str] = None,
                 destination_prefix: Optional[str] = None,
                 destination_prefix_mask: Optional[str] = None,
                 dscp: Optional[str] = None,
                 established: Optional[bool] = None,
                 fin: Optional[bool] = None,
                 fragments: Optional[bool] = None,
                 log: Optional[bool] = None,
                 log_input: Optional[bool] = None,
                 precedence: Optional[str] = None,
                 psh: Optional[bool] = None,
                 remark: Optional[str] = None,
                 rst: Optional[bool] = None,
                 service_object_group: Optional[str] = None,
                 source_any: Optional[bool] = None,
                 source_host: Optional[str] = None,
                 source_object_group: Optional[str] = None,
                 source_port_equal: Optional[str] = None,
                 source_port_greater_than: Optional[str] = None,
                 source_port_lesser_than: Optional[str] = None,
                 source_port_range_from: Optional[str] = None,
                 source_port_range_to: Optional[str] = None,
                 source_prefix: Optional[str] = None,
                 source_prefix_mask: Optional[str] = None,
                 syn: Optional[bool] = None,
                 tos: Optional[str] = None,
                 urg: Optional[bool] = None):
        pulumi.set(__self__, "sequence", sequence)
        if ace_rule_action is not None:
            pulumi.set(__self__, "ace_rule_action", ace_rule_action)
        if ace_rule_protocol is not None:
            pulumi.set(__self__, "ace_rule_protocol", ace_rule_protocol)
        if ack is not None:
            pulumi.set(__self__, "ack", ack)
        if destination_any is not None:
            pulumi.set(__self__, "destination_any", destination_any)
        if destination_host is not None:
            pulumi.set(__self__, "destination_host", destination_host)
        if destination_object_group is not None:
            pulumi.set(__self__, "destination_object_group", destination_object_group)
        if destination_port_equal is not None:
            pulumi.set(__self__, "destination_port_equal", destination_port_equal)
        if destination_port_greater_than is not None:
            pulumi.set(__self__, "destination_port_greater_than", destination_port_greater_than)
        if destination_port_lesser_than is not None:
            pulumi.set(__self__, "destination_port_lesser_than", destination_port_lesser_than)
        if destination_port_range_from is not None:
            pulumi.set(__self__, "destination_port_range_from", destination_port_range_from)
        if destination_port_range_to is not None:
            pulumi.set(__self__, "destination_port_range_to", destination_port_range_to)
        if destination_prefix is not None:
            pulumi.set(__self__, "destination_prefix", destination_prefix)
        if destination_prefix_mask is not None:
            pulumi.set(__self__, "destination_prefix_mask", destination_prefix_mask)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if established is not None:
            pulumi.set(__self__, "established", established)
        if fin is not None:
            pulumi.set(__self__, "fin", fin)
        if fragments is not None:
            pulumi.set(__self__, "fragments", fragments)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_input is not None:
            pulumi.set(__self__, "log_input", log_input)
        if precedence is not None:
            pulumi.set(__self__, "precedence", precedence)
        if psh is not None:
            pulumi.set(__self__, "psh", psh)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if rst is not None:
            pulumi.set(__self__, "rst", rst)
        if service_object_group is not None:
            pulumi.set(__self__, "service_object_group", service_object_group)
        if source_any is not None:
            pulumi.set(__self__, "source_any", source_any)
        if source_host is not None:
            pulumi.set(__self__, "source_host", source_host)
        if source_object_group is not None:
            pulumi.set(__self__, "source_object_group", source_object_group)
        if source_port_equal is not None:
            pulumi.set(__self__, "source_port_equal", source_port_equal)
        if source_port_greater_than is not None:
            pulumi.set(__self__, "source_port_greater_than", source_port_greater_than)
        if source_port_lesser_than is not None:
            pulumi.set(__self__, "source_port_lesser_than", source_port_lesser_than)
        if source_port_range_from is not None:
            pulumi.set(__self__, "source_port_range_from", source_port_range_from)
        if source_port_range_to is not None:
            pulumi.set(__self__, "source_port_range_to", source_port_range_to)
        if source_prefix is not None:
            pulumi.set(__self__, "source_prefix", source_prefix)
        if source_prefix_mask is not None:
            pulumi.set(__self__, "source_prefix_mask", source_prefix_mask)
        if syn is not None:
            pulumi.set(__self__, "syn", syn)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)
        if urg is not None:
            pulumi.set(__self__, "urg", urg)

    @property
    @pulumi.getter
    def sequence(self) -> int:
        return pulumi.get(self, "sequence")

    @property
    @pulumi.getter(name="aceRuleAction")
    def ace_rule_action(self) -> Optional[str]:
        return pulumi.get(self, "ace_rule_action")

    @property
    @pulumi.getter(name="aceRuleProtocol")
    def ace_rule_protocol(self) -> Optional[str]:
        return pulumi.get(self, "ace_rule_protocol")

    @property
    @pulumi.getter
    def ack(self) -> Optional[bool]:
        return pulumi.get(self, "ack")

    @property
    @pulumi.getter(name="destinationAny")
    def destination_any(self) -> Optional[bool]:
        return pulumi.get(self, "destination_any")

    @property
    @pulumi.getter(name="destinationHost")
    def destination_host(self) -> Optional[str]:
        return pulumi.get(self, "destination_host")

    @property
    @pulumi.getter(name="destinationObjectGroup")
    def destination_object_group(self) -> Optional[str]:
        return pulumi.get(self, "destination_object_group")

    @property
    @pulumi.getter(name="destinationPortEqual")
    def destination_port_equal(self) -> Optional[str]:
        return pulumi.get(self, "destination_port_equal")

    @property
    @pulumi.getter(name="destinationPortGreaterThan")
    def destination_port_greater_than(self) -> Optional[str]:
        return pulumi.get(self, "destination_port_greater_than")

    @property
    @pulumi.getter(name="destinationPortLesserThan")
    def destination_port_lesser_than(self) -> Optional[str]:
        return pulumi.get(self, "destination_port_lesser_than")

    @property
    @pulumi.getter(name="destinationPortRangeFrom")
    def destination_port_range_from(self) -> Optional[str]:
        return pulumi.get(self, "destination_port_range_from")

    @property
    @pulumi.getter(name="destinationPortRangeTo")
    def destination_port_range_to(self) -> Optional[str]:
        return pulumi.get(self, "destination_port_range_to")

    @property
    @pulumi.getter(name="destinationPrefix")
    def destination_prefix(self) -> Optional[str]:
        return pulumi.get(self, "destination_prefix")

    @property
    @pulumi.getter(name="destinationPrefixMask")
    def destination_prefix_mask(self) -> Optional[str]:
        return pulumi.get(self, "destination_prefix_mask")

    @property
    @pulumi.getter
    def dscp(self) -> Optional[str]:
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def established(self) -> Optional[bool]:
        return pulumi.get(self, "established")

    @property
    @pulumi.getter
    def fin(self) -> Optional[bool]:
        return pulumi.get(self, "fin")

    @property
    @pulumi.getter
    def fragments(self) -> Optional[bool]:
        return pulumi.get(self, "fragments")

    @property
    @pulumi.getter
    def log(self) -> Optional[bool]:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="logInput")
    def log_input(self) -> Optional[bool]:
        return pulumi.get(self, "log_input")

    @property
    @pulumi.getter
    def precedence(self) -> Optional[str]:
        return pulumi.get(self, "precedence")

    @property
    @pulumi.getter
    def psh(self) -> Optional[bool]:
        return pulumi.get(self, "psh")

    @property
    @pulumi.getter
    def remark(self) -> Optional[str]:
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def rst(self) -> Optional[bool]:
        return pulumi.get(self, "rst")

    @property
    @pulumi.getter(name="serviceObjectGroup")
    def service_object_group(self) -> Optional[str]:
        return pulumi.get(self, "service_object_group")

    @property
    @pulumi.getter(name="sourceAny")
    def source_any(self) -> Optional[bool]:
        return pulumi.get(self, "source_any")

    @property
    @pulumi.getter(name="sourceHost")
    def source_host(self) -> Optional[str]:
        return pulumi.get(self, "source_host")

    @property
    @pulumi.getter(name="sourceObjectGroup")
    def source_object_group(self) -> Optional[str]:
        return pulumi.get(self, "source_object_group")

    @property
    @pulumi.getter(name="sourcePortEqual")
    def source_port_equal(self) -> Optional[str]:
        return pulumi.get(self, "source_port_equal")

    @property
    @pulumi.getter(name="sourcePortGreaterThan")
    def source_port_greater_than(self) -> Optional[str]:
        return pulumi.get(self, "source_port_greater_than")

    @property
    @pulumi.getter(name="sourcePortLesserThan")
    def source_port_lesser_than(self) -> Optional[str]:
        return pulumi.get(self, "source_port_lesser_than")

    @property
    @pulumi.getter(name="sourcePortRangeFrom")
    def source_port_range_from(self) -> Optional[str]:
        return pulumi.get(self, "source_port_range_from")

    @property
    @pulumi.getter(name="sourcePortRangeTo")
    def source_port_range_to(self) -> Optional[str]:
        return pulumi.get(self, "source_port_range_to")

    @property
    @pulumi.getter(name="sourcePrefix")
    def source_prefix(self) -> Optional[str]:
        return pulumi.get(self, "source_prefix")

    @property
    @pulumi.getter(name="sourcePrefixMask")
    def source_prefix_mask(self) -> Optional[str]:
        return pulumi.get(self, "source_prefix_mask")

    @property
    @pulumi.getter
    def syn(self) -> Optional[bool]:
        return pulumi.get(self, "syn")

    @property
    @pulumi.getter
    def tos(self) -> Optional[str]:
        return pulumi.get(self, "tos")

    @property
    @pulumi.getter
    def urg(self) -> Optional[bool]:
        return pulumi.get(self, "urg")


@pulumi.output_type
class AccessListStandardEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "denyAny":
            suggest = "deny_any"
        elif key == "denyHost":
            suggest = "deny_host"
        elif key == "denyLog":
            suggest = "deny_log"
        elif key == "denyPrefix":
            suggest = "deny_prefix"
        elif key == "denyPrefixMask":
            suggest = "deny_prefix_mask"
        elif key == "permitAny":
            suggest = "permit_any"
        elif key == "permitHost":
            suggest = "permit_host"
        elif key == "permitLog":
            suggest = "permit_log"
        elif key == "permitPrefix":
            suggest = "permit_prefix"
        elif key == "permitPrefixMask":
            suggest = "permit_prefix_mask"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccessListStandardEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccessListStandardEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccessListStandardEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sequence: int,
                 deny_any: Optional[bool] = None,
                 deny_host: Optional[str] = None,
                 deny_log: Optional[bool] = None,
                 deny_prefix: Optional[str] = None,
                 deny_prefix_mask: Optional[str] = None,
                 permit_any: Optional[bool] = None,
                 permit_host: Optional[str] = None,
                 permit_log: Optional[bool] = None,
                 permit_prefix: Optional[str] = None,
                 permit_prefix_mask: Optional[str] = None,
                 remark: Optional[str] = None):
        pulumi.set(__self__, "sequence", sequence)
        if deny_any is not None:
            pulumi.set(__self__, "deny_any", deny_any)
        if deny_host is not None:
            pulumi.set(__self__, "deny_host", deny_host)
        if deny_log is not None:
            pulumi.set(__self__, "deny_log", deny_log)
        if deny_prefix is not None:
            pulumi.set(__self__, "deny_prefix", deny_prefix)
        if deny_prefix_mask is not None:
            pulumi.set(__self__, "deny_prefix_mask", deny_prefix_mask)
        if permit_any is not None:
            pulumi.set(__self__, "permit_any", permit_any)
        if permit_host is not None:
            pulumi.set(__self__, "permit_host", permit_host)
        if permit_log is not None:
            pulumi.set(__self__, "permit_log", permit_log)
        if permit_prefix is not None:
            pulumi.set(__self__, "permit_prefix", permit_prefix)
        if permit_prefix_mask is not None:
            pulumi.set(__self__, "permit_prefix_mask", permit_prefix_mask)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)

    @property
    @pulumi.getter
    def sequence(self) -> int:
        return pulumi.get(self, "sequence")

    @property
    @pulumi.getter(name="denyAny")
    def deny_any(self) -> Optional[bool]:
        return pulumi.get(self, "deny_any")

    @property
    @pulumi.getter(name="denyHost")
    def deny_host(self) -> Optional[str]:
        return pulumi.get(self, "deny_host")

    @property
    @pulumi.getter(name="denyLog")
    def deny_log(self) -> Optional[bool]:
        return pulumi.get(self, "deny_log")

    @property
    @pulumi.getter(name="denyPrefix")
    def deny_prefix(self) -> Optional[str]:
        return pulumi.get(self, "deny_prefix")

    @property
    @pulumi.getter(name="denyPrefixMask")
    def deny_prefix_mask(self) -> Optional[str]:
        return pulumi.get(self, "deny_prefix_mask")

    @property
    @pulumi.getter(name="permitAny")
    def permit_any(self) -> Optional[bool]:
        return pulumi.get(self, "permit_any")

    @property
    @pulumi.getter(name="permitHost")
    def permit_host(self) -> Optional[str]:
        return pulumi.get(self, "permit_host")

    @property
    @pulumi.getter(name="permitLog")
    def permit_log(self) -> Optional[bool]:
        return pulumi.get(self, "permit_log")

    @property
    @pulumi.getter(name="permitPrefix")
    def permit_prefix(self) -> Optional[str]:
        return pulumi.get(self, "permit_prefix")

    @property
    @pulumi.getter(name="permitPrefixMask")
    def permit_prefix_mask(self) -> Optional[str]:
        return pulumi.get(self, "permit_prefix_mask")

    @property
    @pulumi.getter
    def remark(self) -> Optional[str]:
        return pulumi.get(self, "remark")


@pulumi.output_type
class ArpInspectionFilter(dict):
    def __init__(__self__, *,
                 name: str,
                 vlans: Optional[Sequence['outputs.ArpInspectionFilterVlan']] = None):
        pulumi.set(__self__, "name", name)
        if vlans is not None:
            pulumi.set(__self__, "vlans", vlans)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def vlans(self) -> Optional[Sequence['outputs.ArpInspectionFilterVlan']]:
        return pulumi.get(self, "vlans")


@pulumi.output_type
class ArpInspectionFilterVlan(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vlanRange":
            suggest = "vlan_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ArpInspectionFilterVlan. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ArpInspectionFilterVlan.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ArpInspectionFilterVlan.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vlan_range: str,
                 static: Optional[bool] = None):
        pulumi.set(__self__, "vlan_range", vlan_range)
        if static is not None:
            pulumi.set(__self__, "static", static)

    @property
    @pulumi.getter(name="vlanRange")
    def vlan_range(self) -> str:
        return pulumi.get(self, "vlan_range")

    @property
    @pulumi.getter
    def static(self) -> Optional[bool]:
        return pulumi.get(self, "static")


@pulumi.output_type
class BfdIpv4BothVrf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destIp":
            suggest = "dest_ip"
        elif key == "dstVrf":
            suggest = "dst_vrf"
        elif key == "srcIp":
            suggest = "src_ip"
        elif key == "srcVrf":
            suggest = "src_vrf"
        elif key == "templateName":
            suggest = "template_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BfdIpv4BothVrf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BfdIpv4BothVrf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BfdIpv4BothVrf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dest_ip: str,
                 dst_vrf: str,
                 src_ip: str,
                 src_vrf: str,
                 template_name: str):
        pulumi.set(__self__, "dest_ip", dest_ip)
        pulumi.set(__self__, "dst_vrf", dst_vrf)
        pulumi.set(__self__, "src_ip", src_ip)
        pulumi.set(__self__, "src_vrf", src_vrf)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="destIp")
    def dest_ip(self) -> str:
        return pulumi.get(self, "dest_ip")

    @property
    @pulumi.getter(name="dstVrf")
    def dst_vrf(self) -> str:
        return pulumi.get(self, "dst_vrf")

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> str:
        return pulumi.get(self, "src_ip")

    @property
    @pulumi.getter(name="srcVrf")
    def src_vrf(self) -> str:
        return pulumi.get(self, "src_vrf")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> str:
        return pulumi.get(self, "template_name")


@pulumi.output_type
class BfdIpv4WithDstVrf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destIp":
            suggest = "dest_ip"
        elif key == "dstVrf":
            suggest = "dst_vrf"
        elif key == "srcIp":
            suggest = "src_ip"
        elif key == "templateName":
            suggest = "template_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BfdIpv4WithDstVrf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BfdIpv4WithDstVrf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BfdIpv4WithDstVrf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dest_ip: str,
                 dst_vrf: str,
                 src_ip: str,
                 template_name: str):
        pulumi.set(__self__, "dest_ip", dest_ip)
        pulumi.set(__self__, "dst_vrf", dst_vrf)
        pulumi.set(__self__, "src_ip", src_ip)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="destIp")
    def dest_ip(self) -> str:
        return pulumi.get(self, "dest_ip")

    @property
    @pulumi.getter(name="dstVrf")
    def dst_vrf(self) -> str:
        return pulumi.get(self, "dst_vrf")

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> str:
        return pulumi.get(self, "src_ip")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> str:
        return pulumi.get(self, "template_name")


@pulumi.output_type
class BfdIpv4WithSrcVrf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destIp":
            suggest = "dest_ip"
        elif key == "srcIp":
            suggest = "src_ip"
        elif key == "srcVrf":
            suggest = "src_vrf"
        elif key == "templateName":
            suggest = "template_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BfdIpv4WithSrcVrf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BfdIpv4WithSrcVrf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BfdIpv4WithSrcVrf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dest_ip: str,
                 src_ip: str,
                 src_vrf: str,
                 template_name: str):
        pulumi.set(__self__, "dest_ip", dest_ip)
        pulumi.set(__self__, "src_ip", src_ip)
        pulumi.set(__self__, "src_vrf", src_vrf)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="destIp")
    def dest_ip(self) -> str:
        return pulumi.get(self, "dest_ip")

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> str:
        return pulumi.get(self, "src_ip")

    @property
    @pulumi.getter(name="srcVrf")
    def src_vrf(self) -> str:
        return pulumi.get(self, "src_vrf")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> str:
        return pulumi.get(self, "template_name")


@pulumi.output_type
class BfdIpv4WithoutVrf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destIp":
            suggest = "dest_ip"
        elif key == "srcIp":
            suggest = "src_ip"
        elif key == "templateName":
            suggest = "template_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BfdIpv4WithoutVrf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BfdIpv4WithoutVrf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BfdIpv4WithoutVrf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dest_ip: str,
                 src_ip: str,
                 template_name: str):
        pulumi.set(__self__, "dest_ip", dest_ip)
        pulumi.set(__self__, "src_ip", src_ip)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="destIp")
    def dest_ip(self) -> str:
        return pulumi.get(self, "dest_ip")

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> str:
        return pulumi.get(self, "src_ip")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> str:
        return pulumi.get(self, "template_name")


@pulumi.output_type
class BfdIpv6WithBothVrf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destIpv6":
            suggest = "dest_ipv6"
        elif key == "dstVrf":
            suggest = "dst_vrf"
        elif key == "srcIpv6":
            suggest = "src_ipv6"
        elif key == "srcVrf":
            suggest = "src_vrf"
        elif key == "templateName":
            suggest = "template_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BfdIpv6WithBothVrf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BfdIpv6WithBothVrf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BfdIpv6WithBothVrf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dest_ipv6: str,
                 dst_vrf: str,
                 src_ipv6: str,
                 src_vrf: str,
                 template_name: str):
        pulumi.set(__self__, "dest_ipv6", dest_ipv6)
        pulumi.set(__self__, "dst_vrf", dst_vrf)
        pulumi.set(__self__, "src_ipv6", src_ipv6)
        pulumi.set(__self__, "src_vrf", src_vrf)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="destIpv6")
    def dest_ipv6(self) -> str:
        return pulumi.get(self, "dest_ipv6")

    @property
    @pulumi.getter(name="dstVrf")
    def dst_vrf(self) -> str:
        return pulumi.get(self, "dst_vrf")

    @property
    @pulumi.getter(name="srcIpv6")
    def src_ipv6(self) -> str:
        return pulumi.get(self, "src_ipv6")

    @property
    @pulumi.getter(name="srcVrf")
    def src_vrf(self) -> str:
        return pulumi.get(self, "src_vrf")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> str:
        return pulumi.get(self, "template_name")


@pulumi.output_type
class BfdIpv6WithDstVrf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destIpv6":
            suggest = "dest_ipv6"
        elif key == "dstVrf":
            suggest = "dst_vrf"
        elif key == "srcIpv6":
            suggest = "src_ipv6"
        elif key == "templateName":
            suggest = "template_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BfdIpv6WithDstVrf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BfdIpv6WithDstVrf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BfdIpv6WithDstVrf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dest_ipv6: str,
                 dst_vrf: str,
                 src_ipv6: str,
                 template_name: str):
        pulumi.set(__self__, "dest_ipv6", dest_ipv6)
        pulumi.set(__self__, "dst_vrf", dst_vrf)
        pulumi.set(__self__, "src_ipv6", src_ipv6)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="destIpv6")
    def dest_ipv6(self) -> str:
        return pulumi.get(self, "dest_ipv6")

    @property
    @pulumi.getter(name="dstVrf")
    def dst_vrf(self) -> str:
        return pulumi.get(self, "dst_vrf")

    @property
    @pulumi.getter(name="srcIpv6")
    def src_ipv6(self) -> str:
        return pulumi.get(self, "src_ipv6")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> str:
        return pulumi.get(self, "template_name")


@pulumi.output_type
class BfdIpv6WithSrcVrf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destIpv6":
            suggest = "dest_ipv6"
        elif key == "srcIpv6":
            suggest = "src_ipv6"
        elif key == "srcVrf":
            suggest = "src_vrf"
        elif key == "templateName":
            suggest = "template_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BfdIpv6WithSrcVrf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BfdIpv6WithSrcVrf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BfdIpv6WithSrcVrf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dest_ipv6: str,
                 src_ipv6: str,
                 src_vrf: str,
                 template_name: str):
        pulumi.set(__self__, "dest_ipv6", dest_ipv6)
        pulumi.set(__self__, "src_ipv6", src_ipv6)
        pulumi.set(__self__, "src_vrf", src_vrf)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="destIpv6")
    def dest_ipv6(self) -> str:
        return pulumi.get(self, "dest_ipv6")

    @property
    @pulumi.getter(name="srcIpv6")
    def src_ipv6(self) -> str:
        return pulumi.get(self, "src_ipv6")

    @property
    @pulumi.getter(name="srcVrf")
    def src_vrf(self) -> str:
        return pulumi.get(self, "src_vrf")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> str:
        return pulumi.get(self, "template_name")


@pulumi.output_type
class BfdIpv6WithoutVrf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destIpv6":
            suggest = "dest_ipv6"
        elif key == "srcIpv6":
            suggest = "src_ipv6"
        elif key == "templateName":
            suggest = "template_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BfdIpv6WithoutVrf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BfdIpv6WithoutVrf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BfdIpv6WithoutVrf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dest_ipv6: str,
                 src_ipv6: str,
                 template_name: str):
        pulumi.set(__self__, "dest_ipv6", dest_ipv6)
        pulumi.set(__self__, "src_ipv6", src_ipv6)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="destIpv6")
    def dest_ipv6(self) -> str:
        return pulumi.get(self, "dest_ipv6")

    @property
    @pulumi.getter(name="srcIpv6")
    def src_ipv6(self) -> str:
        return pulumi.get(self, "src_ipv6")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> str:
        return pulumi.get(self, "template_name")


@pulumi.output_type
class BgpAddressFamilyIpv4Ipv4UnicastNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeMap":
            suggest = "route_map"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpAddressFamilyIpv4Ipv4UnicastNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpAddressFamilyIpv4Ipv4UnicastNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpAddressFamilyIpv4Ipv4UnicastNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network: str,
                 backdoor: Optional[bool] = None,
                 route_map: Optional[str] = None):
        pulumi.set(__self__, "network", network)
        if backdoor is not None:
            pulumi.set(__self__, "backdoor", backdoor)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def network(self) -> str:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def backdoor(self) -> Optional[bool]:
        return pulumi.get(self, "backdoor")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[str]:
        return pulumi.get(self, "route_map")


@pulumi.output_type
class BgpAddressFamilyIpv4Ipv4UnicastNetworksMask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeMap":
            suggest = "route_map"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpAddressFamilyIpv4Ipv4UnicastNetworksMask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpAddressFamilyIpv4Ipv4UnicastNetworksMask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpAddressFamilyIpv4Ipv4UnicastNetworksMask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mask: str,
                 network: str,
                 backdoor: Optional[bool] = None,
                 route_map: Optional[str] = None):
        pulumi.set(__self__, "mask", mask)
        pulumi.set(__self__, "network", network)
        if backdoor is not None:
            pulumi.set(__self__, "backdoor", backdoor)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def mask(self) -> str:
        return pulumi.get(self, "mask")

    @property
    @pulumi.getter
    def network(self) -> str:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def backdoor(self) -> Optional[bool]:
        return pulumi.get(self, "backdoor")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[str]:
        return pulumi.get(self, "route_map")


@pulumi.output_type
class BgpAddressFamilyIpv4VrfVrf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4UnicastAdvertiseL2vpnEvpn":
            suggest = "ipv4_unicast_advertise_l2vpn_evpn"
        elif key == "ipv4UnicastNetworks":
            suggest = "ipv4_unicast_networks"
        elif key == "ipv4UnicastNetworksMasks":
            suggest = "ipv4_unicast_networks_masks"
        elif key == "ipv4UnicastRedistributeConnected":
            suggest = "ipv4_unicast_redistribute_connected"
        elif key == "ipv4UnicastRedistributeStatic":
            suggest = "ipv4_unicast_redistribute_static"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpAddressFamilyIpv4VrfVrf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpAddressFamilyIpv4VrfVrf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpAddressFamilyIpv4VrfVrf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 ipv4_unicast_advertise_l2vpn_evpn: Optional[bool] = None,
                 ipv4_unicast_networks: Optional[Sequence['outputs.BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork']] = None,
                 ipv4_unicast_networks_masks: Optional[Sequence['outputs.BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask']] = None,
                 ipv4_unicast_redistribute_connected: Optional[bool] = None,
                 ipv4_unicast_redistribute_static: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        if ipv4_unicast_advertise_l2vpn_evpn is not None:
            pulumi.set(__self__, "ipv4_unicast_advertise_l2vpn_evpn", ipv4_unicast_advertise_l2vpn_evpn)
        if ipv4_unicast_networks is not None:
            pulumi.set(__self__, "ipv4_unicast_networks", ipv4_unicast_networks)
        if ipv4_unicast_networks_masks is not None:
            pulumi.set(__self__, "ipv4_unicast_networks_masks", ipv4_unicast_networks_masks)
        if ipv4_unicast_redistribute_connected is not None:
            pulumi.set(__self__, "ipv4_unicast_redistribute_connected", ipv4_unicast_redistribute_connected)
        if ipv4_unicast_redistribute_static is not None:
            pulumi.set(__self__, "ipv4_unicast_redistribute_static", ipv4_unicast_redistribute_static)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ipv4UnicastAdvertiseL2vpnEvpn")
    def ipv4_unicast_advertise_l2vpn_evpn(self) -> Optional[bool]:
        return pulumi.get(self, "ipv4_unicast_advertise_l2vpn_evpn")

    @property
    @pulumi.getter(name="ipv4UnicastNetworks")
    def ipv4_unicast_networks(self) -> Optional[Sequence['outputs.BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork']]:
        return pulumi.get(self, "ipv4_unicast_networks")

    @property
    @pulumi.getter(name="ipv4UnicastNetworksMasks")
    def ipv4_unicast_networks_masks(self) -> Optional[Sequence['outputs.BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask']]:
        return pulumi.get(self, "ipv4_unicast_networks_masks")

    @property
    @pulumi.getter(name="ipv4UnicastRedistributeConnected")
    def ipv4_unicast_redistribute_connected(self) -> Optional[bool]:
        return pulumi.get(self, "ipv4_unicast_redistribute_connected")

    @property
    @pulumi.getter(name="ipv4UnicastRedistributeStatic")
    def ipv4_unicast_redistribute_static(self) -> Optional[bool]:
        return pulumi.get(self, "ipv4_unicast_redistribute_static")


@pulumi.output_type
class BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeMap":
            suggest = "route_map"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network: str,
                 backdoor: Optional[bool] = None,
                 evpn: Optional[bool] = None,
                 route_map: Optional[str] = None):
        pulumi.set(__self__, "network", network)
        if backdoor is not None:
            pulumi.set(__self__, "backdoor", backdoor)
        if evpn is not None:
            pulumi.set(__self__, "evpn", evpn)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def network(self) -> str:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def backdoor(self) -> Optional[bool]:
        return pulumi.get(self, "backdoor")

    @property
    @pulumi.getter
    def evpn(self) -> Optional[bool]:
        return pulumi.get(self, "evpn")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[str]:
        return pulumi.get(self, "route_map")


@pulumi.output_type
class BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeMap":
            suggest = "route_map"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mask: str,
                 network: str,
                 backdoor: Optional[bool] = None,
                 evpn: Optional[bool] = None,
                 route_map: Optional[str] = None):
        pulumi.set(__self__, "mask", mask)
        pulumi.set(__self__, "network", network)
        if backdoor is not None:
            pulumi.set(__self__, "backdoor", backdoor)
        if evpn is not None:
            pulumi.set(__self__, "evpn", evpn)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def mask(self) -> str:
        return pulumi.get(self, "mask")

    @property
    @pulumi.getter
    def network(self) -> str:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def backdoor(self) -> Optional[bool]:
        return pulumi.get(self, "backdoor")

    @property
    @pulumi.getter
    def evpn(self) -> Optional[bool]:
        return pulumi.get(self, "evpn")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[str]:
        return pulumi.get(self, "route_map")


@pulumi.output_type
class BgpAddressFamilyIpv6Ipv6UnicastNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeMap":
            suggest = "route_map"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpAddressFamilyIpv6Ipv6UnicastNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpAddressFamilyIpv6Ipv6UnicastNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpAddressFamilyIpv6Ipv6UnicastNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network: str,
                 backdoor: Optional[bool] = None,
                 route_map: Optional[str] = None):
        pulumi.set(__self__, "network", network)
        if backdoor is not None:
            pulumi.set(__self__, "backdoor", backdoor)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def network(self) -> str:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def backdoor(self) -> Optional[bool]:
        return pulumi.get(self, "backdoor")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[str]:
        return pulumi.get(self, "route_map")


@pulumi.output_type
class BgpAddressFamilyIpv6VrfVrf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv6UnicastAdvertiseL2vpnEvpn":
            suggest = "ipv6_unicast_advertise_l2vpn_evpn"
        elif key == "ipv6UnicastNetworks":
            suggest = "ipv6_unicast_networks"
        elif key == "ipv6UnicastRedistributeConnected":
            suggest = "ipv6_unicast_redistribute_connected"
        elif key == "ipv6UnicastRedistributeStatic":
            suggest = "ipv6_unicast_redistribute_static"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpAddressFamilyIpv6VrfVrf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpAddressFamilyIpv6VrfVrf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpAddressFamilyIpv6VrfVrf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 ipv6_unicast_advertise_l2vpn_evpn: Optional[bool] = None,
                 ipv6_unicast_networks: Optional[Sequence['outputs.BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork']] = None,
                 ipv6_unicast_redistribute_connected: Optional[bool] = None,
                 ipv6_unicast_redistribute_static: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        if ipv6_unicast_advertise_l2vpn_evpn is not None:
            pulumi.set(__self__, "ipv6_unicast_advertise_l2vpn_evpn", ipv6_unicast_advertise_l2vpn_evpn)
        if ipv6_unicast_networks is not None:
            pulumi.set(__self__, "ipv6_unicast_networks", ipv6_unicast_networks)
        if ipv6_unicast_redistribute_connected is not None:
            pulumi.set(__self__, "ipv6_unicast_redistribute_connected", ipv6_unicast_redistribute_connected)
        if ipv6_unicast_redistribute_static is not None:
            pulumi.set(__self__, "ipv6_unicast_redistribute_static", ipv6_unicast_redistribute_static)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="ipv6UnicastAdvertiseL2vpnEvpn")
    def ipv6_unicast_advertise_l2vpn_evpn(self) -> Optional[bool]:
        return pulumi.get(self, "ipv6_unicast_advertise_l2vpn_evpn")

    @property
    @pulumi.getter(name="ipv6UnicastNetworks")
    def ipv6_unicast_networks(self) -> Optional[Sequence['outputs.BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork']]:
        return pulumi.get(self, "ipv6_unicast_networks")

    @property
    @pulumi.getter(name="ipv6UnicastRedistributeConnected")
    def ipv6_unicast_redistribute_connected(self) -> Optional[bool]:
        return pulumi.get(self, "ipv6_unicast_redistribute_connected")

    @property
    @pulumi.getter(name="ipv6UnicastRedistributeStatic")
    def ipv6_unicast_redistribute_static(self) -> Optional[bool]:
        return pulumi.get(self, "ipv6_unicast_redistribute_static")


@pulumi.output_type
class BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "routeMap":
            suggest = "route_map"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network: str,
                 backdoor: Optional[bool] = None,
                 evpn: Optional[bool] = None,
                 route_map: Optional[str] = None):
        pulumi.set(__self__, "network", network)
        if backdoor is not None:
            pulumi.set(__self__, "backdoor", backdoor)
        if evpn is not None:
            pulumi.set(__self__, "evpn", evpn)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def network(self) -> str:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def backdoor(self) -> Optional[bool]:
        return pulumi.get(self, "backdoor")

    @property
    @pulumi.getter
    def evpn(self) -> Optional[bool]:
        return pulumi.get(self, "evpn")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[str]:
        return pulumi.get(self, "route_map")


@pulumi.output_type
class BgpIpv4UnicastNeighborRouteMap(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inOut":
            suggest = "in_out"
        elif key == "routeMapName":
            suggest = "route_map_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpIpv4UnicastNeighborRouteMap. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpIpv4UnicastNeighborRouteMap.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpIpv4UnicastNeighborRouteMap.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 in_out: str,
                 route_map_name: str):
        pulumi.set(__self__, "in_out", in_out)
        pulumi.set(__self__, "route_map_name", route_map_name)

    @property
    @pulumi.getter(name="inOut")
    def in_out(self) -> str:
        return pulumi.get(self, "in_out")

    @property
    @pulumi.getter(name="routeMapName")
    def route_map_name(self) -> str:
        return pulumi.get(self, "route_map_name")


@pulumi.output_type
class BgpIpv4UnicastVrfNeighborRouteMap(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inOut":
            suggest = "in_out"
        elif key == "routeMapName":
            suggest = "route_map_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpIpv4UnicastVrfNeighborRouteMap. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpIpv4UnicastVrfNeighborRouteMap.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpIpv4UnicastVrfNeighborRouteMap.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 in_out: str,
                 route_map_name: str):
        pulumi.set(__self__, "in_out", in_out)
        pulumi.set(__self__, "route_map_name", route_map_name)

    @property
    @pulumi.getter(name="inOut")
    def in_out(self) -> str:
        return pulumi.get(self, "in_out")

    @property
    @pulumi.getter(name="routeMapName")
    def route_map_name(self) -> str:
        return pulumi.get(self, "route_map_name")


@pulumi.output_type
class BgpIpv6UnicastNeighborRouteMap(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inOut":
            suggest = "in_out"
        elif key == "routeMapName":
            suggest = "route_map_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BgpIpv6UnicastNeighborRouteMap. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BgpIpv6UnicastNeighborRouteMap.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BgpIpv6UnicastNeighborRouteMap.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 in_out: str,
                 route_map_name: str):
        pulumi.set(__self__, "in_out", in_out)
        pulumi.set(__self__, "route_map_name", route_map_name)

    @property
    @pulumi.getter(name="inOut")
    def in_out(self) -> str:
        return pulumi.get(self, "in_out")

    @property
    @pulumi.getter(name="routeMapName")
    def route_map_name(self) -> str:
        return pulumi.get(self, "route_map_name")


@pulumi.output_type
class CdpTlvList(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vtpMgmtDomain":
            suggest = "vtp_mgmt_domain"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CdpTlvList. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CdpTlvList.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CdpTlvList.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 cos: Optional[bool] = None,
                 duplex: Optional[bool] = None,
                 trust: Optional[bool] = None,
                 version: Optional[bool] = None,
                 vtp_mgmt_domain: Optional[bool] = None):
        pulumi.set(__self__, "name", name)
        if cos is not None:
            pulumi.set(__self__, "cos", cos)
        if duplex is not None:
            pulumi.set(__self__, "duplex", duplex)
        if trust is not None:
            pulumi.set(__self__, "trust", trust)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if vtp_mgmt_domain is not None:
            pulumi.set(__self__, "vtp_mgmt_domain", vtp_mgmt_domain)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def cos(self) -> Optional[bool]:
        return pulumi.get(self, "cos")

    @property
    @pulumi.getter
    def duplex(self) -> Optional[bool]:
        return pulumi.get(self, "duplex")

    @property
    @pulumi.getter
    def trust(self) -> Optional[bool]:
        return pulumi.get(self, "trust")

    @property
    @pulumi.getter
    def version(self) -> Optional[bool]:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="vtpMgmtDomain")
    def vtp_mgmt_domain(self) -> Optional[bool]:
        return pulumi.get(self, "vtp_mgmt_domain")


@pulumi.output_type
class ClassMapMatchActivatedServiceTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClassMapMatchActivatedServiceTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClassMapMatchActivatedServiceTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClassMapMatchActivatedServiceTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_name: str):
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class CryptoIkev2KeyringPeer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "identityAddress":
            suggest = "identity_address"
        elif key == "identityEmailDomain":
            suggest = "identity_email_domain"
        elif key == "identityEmailName":
            suggest = "identity_email_name"
        elif key == "identityFqdnDomain":
            suggest = "identity_fqdn_domain"
        elif key == "identityFqdnName":
            suggest = "identity_fqdn_name"
        elif key == "identityKeyId":
            suggest = "identity_key_id"
        elif key == "ipv4Address":
            suggest = "ipv4_address"
        elif key == "ipv4Mask":
            suggest = "ipv4_mask"
        elif key == "ipv6Prefix":
            suggest = "ipv6_prefix"
        elif key == "preSharedKey":
            suggest = "pre_shared_key"
        elif key == "preSharedKeyEncryption":
            suggest = "pre_shared_key_encryption"
        elif key == "preSharedKeyLocal":
            suggest = "pre_shared_key_local"
        elif key == "preSharedKeyLocalEncryption":
            suggest = "pre_shared_key_local_encryption"
        elif key == "preSharedKeyRemote":
            suggest = "pre_shared_key_remote"
        elif key == "preSharedKeyRemoteEncryption":
            suggest = "pre_shared_key_remote_encryption"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CryptoIkev2KeyringPeer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CryptoIkev2KeyringPeer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CryptoIkev2KeyringPeer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 description: Optional[str] = None,
                 hostname: Optional[str] = None,
                 identity_address: Optional[str] = None,
                 identity_email_domain: Optional[str] = None,
                 identity_email_name: Optional[str] = None,
                 identity_fqdn_domain: Optional[str] = None,
                 identity_fqdn_name: Optional[str] = None,
                 identity_key_id: Optional[str] = None,
                 ipv4_address: Optional[str] = None,
                 ipv4_mask: Optional[str] = None,
                 ipv6_prefix: Optional[str] = None,
                 pre_shared_key: Optional[str] = None,
                 pre_shared_key_encryption: Optional[str] = None,
                 pre_shared_key_local: Optional[str] = None,
                 pre_shared_key_local_encryption: Optional[str] = None,
                 pre_shared_key_remote: Optional[str] = None,
                 pre_shared_key_remote_encryption: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if identity_address is not None:
            pulumi.set(__self__, "identity_address", identity_address)
        if identity_email_domain is not None:
            pulumi.set(__self__, "identity_email_domain", identity_email_domain)
        if identity_email_name is not None:
            pulumi.set(__self__, "identity_email_name", identity_email_name)
        if identity_fqdn_domain is not None:
            pulumi.set(__self__, "identity_fqdn_domain", identity_fqdn_domain)
        if identity_fqdn_name is not None:
            pulumi.set(__self__, "identity_fqdn_name", identity_fqdn_name)
        if identity_key_id is not None:
            pulumi.set(__self__, "identity_key_id", identity_key_id)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_mask is not None:
            pulumi.set(__self__, "ipv4_mask", ipv4_mask)
        if ipv6_prefix is not None:
            pulumi.set(__self__, "ipv6_prefix", ipv6_prefix)
        if pre_shared_key is not None:
            pulumi.set(__self__, "pre_shared_key", pre_shared_key)
        if pre_shared_key_encryption is not None:
            pulumi.set(__self__, "pre_shared_key_encryption", pre_shared_key_encryption)
        if pre_shared_key_local is not None:
            pulumi.set(__self__, "pre_shared_key_local", pre_shared_key_local)
        if pre_shared_key_local_encryption is not None:
            pulumi.set(__self__, "pre_shared_key_local_encryption", pre_shared_key_local_encryption)
        if pre_shared_key_remote is not None:
            pulumi.set(__self__, "pre_shared_key_remote", pre_shared_key_remote)
        if pre_shared_key_remote_encryption is not None:
            pulumi.set(__self__, "pre_shared_key_remote_encryption", pre_shared_key_remote_encryption)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="identityAddress")
    def identity_address(self) -> Optional[str]:
        return pulumi.get(self, "identity_address")

    @property
    @pulumi.getter(name="identityEmailDomain")
    def identity_email_domain(self) -> Optional[str]:
        return pulumi.get(self, "identity_email_domain")

    @property
    @pulumi.getter(name="identityEmailName")
    def identity_email_name(self) -> Optional[str]:
        return pulumi.get(self, "identity_email_name")

    @property
    @pulumi.getter(name="identityFqdnDomain")
    def identity_fqdn_domain(self) -> Optional[str]:
        return pulumi.get(self, "identity_fqdn_domain")

    @property
    @pulumi.getter(name="identityFqdnName")
    def identity_fqdn_name(self) -> Optional[str]:
        return pulumi.get(self, "identity_fqdn_name")

    @property
    @pulumi.getter(name="identityKeyId")
    def identity_key_id(self) -> Optional[str]:
        return pulumi.get(self, "identity_key_id")

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[str]:
        return pulumi.get(self, "ipv4_address")

    @property
    @pulumi.getter(name="ipv4Mask")
    def ipv4_mask(self) -> Optional[str]:
        return pulumi.get(self, "ipv4_mask")

    @property
    @pulumi.getter(name="ipv6Prefix")
    def ipv6_prefix(self) -> Optional[str]:
        return pulumi.get(self, "ipv6_prefix")

    @property
    @pulumi.getter(name="preSharedKey")
    def pre_shared_key(self) -> Optional[str]:
        return pulumi.get(self, "pre_shared_key")

    @property
    @pulumi.getter(name="preSharedKeyEncryption")
    def pre_shared_key_encryption(self) -> Optional[str]:
        return pulumi.get(self, "pre_shared_key_encryption")

    @property
    @pulumi.getter(name="preSharedKeyLocal")
    def pre_shared_key_local(self) -> Optional[str]:
        return pulumi.get(self, "pre_shared_key_local")

    @property
    @pulumi.getter(name="preSharedKeyLocalEncryption")
    def pre_shared_key_local_encryption(self) -> Optional[str]:
        return pulumi.get(self, "pre_shared_key_local_encryption")

    @property
    @pulumi.getter(name="preSharedKeyRemote")
    def pre_shared_key_remote(self) -> Optional[str]:
        return pulumi.get(self, "pre_shared_key_remote")

    @property
    @pulumi.getter(name="preSharedKeyRemoteEncryption")
    def pre_shared_key_remote_encryption(self) -> Optional[str]:
        return pulumi.get(self, "pre_shared_key_remote_encryption")


@pulumi.output_type
class CryptoIkev2PolicyProposal(dict):
    def __init__(__self__, *,
                 proposals: str):
        pulumi.set(__self__, "proposals", proposals)

    @property
    @pulumi.getter
    def proposals(self) -> str:
        return pulumi.get(self, "proposals")


@pulumi.output_type
class CryptoIkev2ProfileMatchIdentityRemoteIpv4Address(dict):
    def __init__(__self__, *,
                 address: str,
                 mask: Optional[str] = None):
        pulumi.set(__self__, "address", address)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def mask(self) -> Optional[str]:
        return pulumi.get(self, "mask")


@pulumi.output_type
class DhcpSnoopingVlan(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vlanId":
            suggest = "vlan_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DhcpSnoopingVlan. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DhcpSnoopingVlan.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DhcpSnoopingVlan.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vlan_id: str):
        pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> str:
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class Dot1xCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "profileName":
            suggest = "profile_name"
        elif key == "anonymousId":
            suggest = "anonymous_id"
        elif key == "passwordType":
            suggest = "password_type"
        elif key == "pkiTrustpoint":
            suggest = "pki_trustpoint"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Dot1xCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Dot1xCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Dot1xCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 profile_name: str,
                 anonymous_id: Optional[str] = None,
                 description: Optional[str] = None,
                 password: Optional[str] = None,
                 password_type: Optional[str] = None,
                 pki_trustpoint: Optional[str] = None,
                 username: Optional[str] = None):
        pulumi.set(__self__, "profile_name", profile_name)
        if anonymous_id is not None:
            pulumi.set(__self__, "anonymous_id", anonymous_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_type is not None:
            pulumi.set(__self__, "password_type", password_type)
        if pki_trustpoint is not None:
            pulumi.set(__self__, "pki_trustpoint", pki_trustpoint)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> str:
        return pulumi.get(self, "profile_name")

    @property
    @pulumi.getter(name="anonymousId")
    def anonymous_id(self) -> Optional[str]:
        return pulumi.get(self, "anonymous_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="passwordType")
    def password_type(self) -> Optional[str]:
        return pulumi.get(self, "password_type")

    @property
    @pulumi.getter(name="pkiTrustpoint")
    def pki_trustpoint(self) -> Optional[str]:
        return pulumi.get(self, "pki_trustpoint")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class InterfaceEthernetHelperAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "global":
            suggest = "global_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfaceEthernetHelperAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfaceEthernetHelperAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfaceEthernetHelperAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: str,
                 global_: Optional[bool] = None,
                 vrf: Optional[str] = None):
        pulumi.set(__self__, "address", address)
        if global_ is not None:
            pulumi.set(__self__, "global_", global_)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[bool]:
        return pulumi.get(self, "global_")

    @property
    @pulumi.getter
    def vrf(self) -> Optional[str]:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class InterfaceEthernetIpv6Address(dict):
    def __init__(__self__, *,
                 prefix: str,
                 eui64: Optional[bool] = None):
        pulumi.set(__self__, "prefix", prefix)
        if eui64 is not None:
            pulumi.set(__self__, "eui64", eui64)

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def eui64(self) -> Optional[bool]:
        return pulumi.get(self, "eui64")


@pulumi.output_type
class InterfaceEthernetIpv6LinkLocalAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkLocal":
            suggest = "link_local"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfaceEthernetIpv6LinkLocalAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfaceEthernetIpv6LinkLocalAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfaceEthernetIpv6LinkLocalAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: str,
                 link_local: Optional[bool] = None):
        pulumi.set(__self__, "address", address)
        if link_local is not None:
            pulumi.set(__self__, "link_local", link_local)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="linkLocal")
    def link_local(self) -> Optional[bool]:
        return pulumi.get(self, "link_local")


@pulumi.output_type
class InterfaceEthernetSourceTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateName":
            suggest = "template_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfaceEthernetSourceTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfaceEthernetSourceTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfaceEthernetSourceTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 template_name: str,
                 merge: Optional[bool] = None):
        pulumi.set(__self__, "template_name", template_name)
        if merge is not None:
            pulumi.set(__self__, "merge", merge)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> str:
        return pulumi.get(self, "template_name")

    @property
    @pulumi.getter
    def merge(self) -> Optional[bool]:
        return pulumi.get(self, "merge")


@pulumi.output_type
class InterfaceLoopbackIpv6Address(dict):
    def __init__(__self__, *,
                 prefix: str,
                 eui64: Optional[bool] = None):
        pulumi.set(__self__, "prefix", prefix)
        if eui64 is not None:
            pulumi.set(__self__, "eui64", eui64)

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def eui64(self) -> Optional[bool]:
        return pulumi.get(self, "eui64")


@pulumi.output_type
class InterfaceLoopbackIpv6LinkLocalAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkLocal":
            suggest = "link_local"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfaceLoopbackIpv6LinkLocalAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfaceLoopbackIpv6LinkLocalAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfaceLoopbackIpv6LinkLocalAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: str,
                 link_local: Optional[bool] = None):
        pulumi.set(__self__, "address", address)
        if link_local is not None:
            pulumi.set(__self__, "link_local", link_local)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="linkLocal")
    def link_local(self) -> Optional[bool]:
        return pulumi.get(self, "link_local")


@pulumi.output_type
class InterfaceNveVni(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vniRange":
            suggest = "vni_range"
        elif key == "ingressReplication":
            suggest = "ingress_replication"
        elif key == "ipv4MulticastGroup":
            suggest = "ipv4_multicast_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfaceNveVni. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfaceNveVni.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfaceNveVni.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vni_range: str,
                 ingress_replication: Optional[bool] = None,
                 ipv4_multicast_group: Optional[str] = None):
        pulumi.set(__self__, "vni_range", vni_range)
        if ingress_replication is not None:
            pulumi.set(__self__, "ingress_replication", ingress_replication)
        if ipv4_multicast_group is not None:
            pulumi.set(__self__, "ipv4_multicast_group", ipv4_multicast_group)

    @property
    @pulumi.getter(name="vniRange")
    def vni_range(self) -> str:
        return pulumi.get(self, "vni_range")

    @property
    @pulumi.getter(name="ingressReplication")
    def ingress_replication(self) -> Optional[bool]:
        return pulumi.get(self, "ingress_replication")

    @property
    @pulumi.getter(name="ipv4MulticastGroup")
    def ipv4_multicast_group(self) -> Optional[str]:
        return pulumi.get(self, "ipv4_multicast_group")


@pulumi.output_type
class InterfaceNveVniVrf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vniRange":
            suggest = "vni_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfaceNveVniVrf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfaceNveVniVrf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfaceNveVniVrf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 vni_range: str,
                 vrf: Optional[str] = None):
        pulumi.set(__self__, "vni_range", vni_range)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="vniRange")
    def vni_range(self) -> str:
        return pulumi.get(self, "vni_range")

    @property
    @pulumi.getter
    def vrf(self) -> Optional[str]:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class InterfaceOspfMessageDigestKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "md5AuthKey":
            suggest = "md5_auth_key"
        elif key == "md5AuthType":
            suggest = "md5_auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfaceOspfMessageDigestKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfaceOspfMessageDigestKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfaceOspfMessageDigestKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: int,
                 md5_auth_key: Optional[str] = None,
                 md5_auth_type: Optional[int] = None):
        pulumi.set(__self__, "id", id)
        if md5_auth_key is not None:
            pulumi.set(__self__, "md5_auth_key", md5_auth_key)
        if md5_auth_type is not None:
            pulumi.set(__self__, "md5_auth_type", md5_auth_type)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="md5AuthKey")
    def md5_auth_key(self) -> Optional[str]:
        return pulumi.get(self, "md5_auth_key")

    @property
    @pulumi.getter(name="md5AuthType")
    def md5_auth_type(self) -> Optional[int]:
        return pulumi.get(self, "md5_auth_type")


@pulumi.output_type
class InterfaceOspfProcessId(dict):
    def __init__(__self__, *,
                 id: int,
                 areas: Optional[Sequence['outputs.InterfaceOspfProcessIdArea']] = None):
        pulumi.set(__self__, "id", id)
        if areas is not None:
            pulumi.set(__self__, "areas", areas)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def areas(self) -> Optional[Sequence['outputs.InterfaceOspfProcessIdArea']]:
        return pulumi.get(self, "areas")


@pulumi.output_type
class InterfaceOspfProcessIdArea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areaId":
            suggest = "area_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfaceOspfProcessIdArea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfaceOspfProcessIdArea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfaceOspfProcessIdArea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 area_id: str):
        pulumi.set(__self__, "area_id", area_id)

    @property
    @pulumi.getter(name="areaId")
    def area_id(self) -> str:
        return pulumi.get(self, "area_id")


@pulumi.output_type
class InterfacePortChannelHelperAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "global":
            suggest = "global_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfacePortChannelHelperAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfacePortChannelHelperAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfacePortChannelHelperAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: str,
                 global_: Optional[bool] = None,
                 vrf: Optional[str] = None):
        pulumi.set(__self__, "address", address)
        if global_ is not None:
            pulumi.set(__self__, "global_", global_)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[bool]:
        return pulumi.get(self, "global_")

    @property
    @pulumi.getter
    def vrf(self) -> Optional[str]:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class InterfacePortChannelIpv6Address(dict):
    def __init__(__self__, *,
                 prefix: str,
                 eui64: Optional[bool] = None):
        pulumi.set(__self__, "prefix", prefix)
        if eui64 is not None:
            pulumi.set(__self__, "eui64", eui64)

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def eui64(self) -> Optional[bool]:
        return pulumi.get(self, "eui64")


@pulumi.output_type
class InterfacePortChannelIpv6LinkLocalAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkLocal":
            suggest = "link_local"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfacePortChannelIpv6LinkLocalAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfacePortChannelIpv6LinkLocalAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfacePortChannelIpv6LinkLocalAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: str,
                 link_local: Optional[bool] = None):
        pulumi.set(__self__, "address", address)
        if link_local is not None:
            pulumi.set(__self__, "link_local", link_local)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="linkLocal")
    def link_local(self) -> Optional[bool]:
        return pulumi.get(self, "link_local")


@pulumi.output_type
class InterfacePortChannelSubinterfaceHelperAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "global":
            suggest = "global_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfacePortChannelSubinterfaceHelperAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfacePortChannelSubinterfaceHelperAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfacePortChannelSubinterfaceHelperAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: str,
                 global_: Optional[bool] = None,
                 vrf: Optional[str] = None):
        pulumi.set(__self__, "address", address)
        if global_ is not None:
            pulumi.set(__self__, "global_", global_)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[bool]:
        return pulumi.get(self, "global_")

    @property
    @pulumi.getter
    def vrf(self) -> Optional[str]:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class InterfacePortChannelSubinterfaceIpv6Address(dict):
    def __init__(__self__, *,
                 prefix: str,
                 eui64: Optional[bool] = None):
        pulumi.set(__self__, "prefix", prefix)
        if eui64 is not None:
            pulumi.set(__self__, "eui64", eui64)

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def eui64(self) -> Optional[bool]:
        return pulumi.get(self, "eui64")


@pulumi.output_type
class InterfacePortChannelSubinterfaceIpv6LinkLocalAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkLocal":
            suggest = "link_local"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfacePortChannelSubinterfaceIpv6LinkLocalAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfacePortChannelSubinterfaceIpv6LinkLocalAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfacePortChannelSubinterfaceIpv6LinkLocalAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: str,
                 link_local: Optional[bool] = None):
        pulumi.set(__self__, "address", address)
        if link_local is not None:
            pulumi.set(__self__, "link_local", link_local)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="linkLocal")
    def link_local(self) -> Optional[bool]:
        return pulumi.get(self, "link_local")


@pulumi.output_type
class InterfaceTunnelHelperAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "global":
            suggest = "global_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfaceTunnelHelperAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfaceTunnelHelperAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfaceTunnelHelperAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: str,
                 global_: Optional[bool] = None,
                 vrf: Optional[str] = None):
        pulumi.set(__self__, "address", address)
        if global_ is not None:
            pulumi.set(__self__, "global_", global_)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[bool]:
        return pulumi.get(self, "global_")

    @property
    @pulumi.getter
    def vrf(self) -> Optional[str]:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class InterfaceTunnelIpv6Address(dict):
    def __init__(__self__, *,
                 prefix: str,
                 eui64: Optional[bool] = None):
        pulumi.set(__self__, "prefix", prefix)
        if eui64 is not None:
            pulumi.set(__self__, "eui64", eui64)

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def eui64(self) -> Optional[bool]:
        return pulumi.get(self, "eui64")


@pulumi.output_type
class InterfaceTunnelIpv6LinkLocalAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkLocal":
            suggest = "link_local"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfaceTunnelIpv6LinkLocalAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfaceTunnelIpv6LinkLocalAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfaceTunnelIpv6LinkLocalAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: str,
                 link_local: Optional[bool] = None):
        pulumi.set(__self__, "address", address)
        if link_local is not None:
            pulumi.set(__self__, "link_local", link_local)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="linkLocal")
    def link_local(self) -> Optional[bool]:
        return pulumi.get(self, "link_local")


@pulumi.output_type
class InterfaceVlanHelperAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "global":
            suggest = "global_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfaceVlanHelperAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfaceVlanHelperAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfaceVlanHelperAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: str,
                 global_: Optional[bool] = None,
                 vrf: Optional[str] = None):
        pulumi.set(__self__, "address", address)
        if global_ is not None:
            pulumi.set(__self__, "global_", global_)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[bool]:
        return pulumi.get(self, "global_")

    @property
    @pulumi.getter
    def vrf(self) -> Optional[str]:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class InterfaceVlanIpv6Address(dict):
    def __init__(__self__, *,
                 prefix: str,
                 eui64: Optional[bool] = None):
        pulumi.set(__self__, "prefix", prefix)
        if eui64 is not None:
            pulumi.set(__self__, "eui64", eui64)

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def eui64(self) -> Optional[bool]:
        return pulumi.get(self, "eui64")


@pulumi.output_type
class InterfaceVlanIpv6LinkLocalAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "linkLocal":
            suggest = "link_local"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InterfaceVlanIpv6LinkLocalAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InterfaceVlanIpv6LinkLocalAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InterfaceVlanIpv6LinkLocalAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: str,
                 link_local: Optional[bool] = None):
        pulumi.set(__self__, "address", address)
        if link_local is not None:
            pulumi.set(__self__, "link_local", link_local)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="linkLocal")
    def link_local(self) -> Optional[bool]:
        return pulumi.get(self, "link_local")


@pulumi.output_type
class LineConsole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "execTimeoutMinutes":
            suggest = "exec_timeout_minutes"
        elif key == "execTimeoutSeconds":
            suggest = "exec_timeout_seconds"
        elif key == "loginAuthentication":
            suggest = "login_authentication"
        elif key == "loginLocal":
            suggest = "login_local"
        elif key == "passwordLevel":
            suggest = "password_level"
        elif key == "passwordType":
            suggest = "password_type"
        elif key == "privilegeLevel":
            suggest = "privilege_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LineConsole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LineConsole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LineConsole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 first: str,
                 exec_timeout_minutes: Optional[int] = None,
                 exec_timeout_seconds: Optional[int] = None,
                 login_authentication: Optional[str] = None,
                 login_local: Optional[bool] = None,
                 password: Optional[str] = None,
                 password_level: Optional[int] = None,
                 password_type: Optional[str] = None,
                 privilege_level: Optional[int] = None,
                 stopbits: Optional[str] = None):
        pulumi.set(__self__, "first", first)
        if exec_timeout_minutes is not None:
            pulumi.set(__self__, "exec_timeout_minutes", exec_timeout_minutes)
        if exec_timeout_seconds is not None:
            pulumi.set(__self__, "exec_timeout_seconds", exec_timeout_seconds)
        if login_authentication is not None:
            pulumi.set(__self__, "login_authentication", login_authentication)
        if login_local is not None:
            pulumi.set(__self__, "login_local", login_local)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_level is not None:
            pulumi.set(__self__, "password_level", password_level)
        if password_type is not None:
            pulumi.set(__self__, "password_type", password_type)
        if privilege_level is not None:
            pulumi.set(__self__, "privilege_level", privilege_level)
        if stopbits is not None:
            pulumi.set(__self__, "stopbits", stopbits)

    @property
    @pulumi.getter
    def first(self) -> str:
        return pulumi.get(self, "first")

    @property
    @pulumi.getter(name="execTimeoutMinutes")
    def exec_timeout_minutes(self) -> Optional[int]:
        return pulumi.get(self, "exec_timeout_minutes")

    @property
    @pulumi.getter(name="execTimeoutSeconds")
    def exec_timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "exec_timeout_seconds")

    @property
    @pulumi.getter(name="loginAuthentication")
    def login_authentication(self) -> Optional[str]:
        return pulumi.get(self, "login_authentication")

    @property
    @pulumi.getter(name="loginLocal")
    def login_local(self) -> Optional[bool]:
        return pulumi.get(self, "login_local")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="passwordLevel")
    def password_level(self) -> Optional[int]:
        return pulumi.get(self, "password_level")

    @property
    @pulumi.getter(name="passwordType")
    def password_type(self) -> Optional[str]:
        return pulumi.get(self, "password_type")

    @property
    @pulumi.getter(name="privilegeLevel")
    def privilege_level(self) -> Optional[int]:
        return pulumi.get(self, "privilege_level")

    @property
    @pulumi.getter
    def stopbits(self) -> Optional[str]:
        return pulumi.get(self, "stopbits")


@pulumi.output_type
class LineVty(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessClasses":
            suggest = "access_classes"
        elif key == "escapeCharacter":
            suggest = "escape_character"
        elif key == "execTimeoutMinutes":
            suggest = "exec_timeout_minutes"
        elif key == "execTimeoutSeconds":
            suggest = "exec_timeout_seconds"
        elif key == "loginAuthentication":
            suggest = "login_authentication"
        elif key == "passwordLevel":
            suggest = "password_level"
        elif key == "passwordType":
            suggest = "password_type"
        elif key == "transportPreferredProtocol":
            suggest = "transport_preferred_protocol"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LineVty. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LineVty.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LineVty.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 first: int,
                 access_classes: Optional[Sequence['outputs.LineVtyAccessClass']] = None,
                 escape_character: Optional[str] = None,
                 exec_timeout_minutes: Optional[int] = None,
                 exec_timeout_seconds: Optional[int] = None,
                 last: Optional[int] = None,
                 login_authentication: Optional[str] = None,
                 password: Optional[str] = None,
                 password_level: Optional[int] = None,
                 password_type: Optional[str] = None,
                 transport_preferred_protocol: Optional[str] = None):
        pulumi.set(__self__, "first", first)
        if access_classes is not None:
            pulumi.set(__self__, "access_classes", access_classes)
        if escape_character is not None:
            pulumi.set(__self__, "escape_character", escape_character)
        if exec_timeout_minutes is not None:
            pulumi.set(__self__, "exec_timeout_minutes", exec_timeout_minutes)
        if exec_timeout_seconds is not None:
            pulumi.set(__self__, "exec_timeout_seconds", exec_timeout_seconds)
        if last is not None:
            pulumi.set(__self__, "last", last)
        if login_authentication is not None:
            pulumi.set(__self__, "login_authentication", login_authentication)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_level is not None:
            pulumi.set(__self__, "password_level", password_level)
        if password_type is not None:
            pulumi.set(__self__, "password_type", password_type)
        if transport_preferred_protocol is not None:
            pulumi.set(__self__, "transport_preferred_protocol", transport_preferred_protocol)

    @property
    @pulumi.getter
    def first(self) -> int:
        return pulumi.get(self, "first")

    @property
    @pulumi.getter(name="accessClasses")
    def access_classes(self) -> Optional[Sequence['outputs.LineVtyAccessClass']]:
        return pulumi.get(self, "access_classes")

    @property
    @pulumi.getter(name="escapeCharacter")
    def escape_character(self) -> Optional[str]:
        return pulumi.get(self, "escape_character")

    @property
    @pulumi.getter(name="execTimeoutMinutes")
    def exec_timeout_minutes(self) -> Optional[int]:
        return pulumi.get(self, "exec_timeout_minutes")

    @property
    @pulumi.getter(name="execTimeoutSeconds")
    def exec_timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "exec_timeout_seconds")

    @property
    @pulumi.getter
    def last(self) -> Optional[int]:
        return pulumi.get(self, "last")

    @property
    @pulumi.getter(name="loginAuthentication")
    def login_authentication(self) -> Optional[str]:
        return pulumi.get(self, "login_authentication")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="passwordLevel")
    def password_level(self) -> Optional[int]:
        return pulumi.get(self, "password_level")

    @property
    @pulumi.getter(name="passwordType")
    def password_type(self) -> Optional[str]:
        return pulumi.get(self, "password_type")

    @property
    @pulumi.getter(name="transportPreferredProtocol")
    def transport_preferred_protocol(self) -> Optional[str]:
        return pulumi.get(self, "transport_preferred_protocol")


@pulumi.output_type
class LineVtyAccessClass(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessList":
            suggest = "access_list"
        elif key == "vrfAlso":
            suggest = "vrf_also"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LineVtyAccessClass. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LineVtyAccessClass.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LineVtyAccessClass.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_list: str,
                 direction: str,
                 vrf_also: Optional[bool] = None):
        pulumi.set(__self__, "access_list", access_list)
        pulumi.set(__self__, "direction", direction)
        if vrf_also is not None:
            pulumi.set(__self__, "vrf_also", vrf_also)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> str:
        return pulumi.get(self, "access_list")

    @property
    @pulumi.getter
    def direction(self) -> str:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter(name="vrfAlso")
    def vrf_also(self) -> Optional[bool]:
        return pulumi.get(self, "vrf_also")


@pulumi.output_type
class LoggingIpv4Host(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Host":
            suggest = "ipv4_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoggingIpv4Host. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoggingIpv4Host.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoggingIpv4Host.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv4_host: str):
        pulumi.set(__self__, "ipv4_host", ipv4_host)

    @property
    @pulumi.getter(name="ipv4Host")
    def ipv4_host(self) -> str:
        return pulumi.get(self, "ipv4_host")


@pulumi.output_type
class LoggingIpv4HostTransportTransportTcpPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portNumber":
            suggest = "port_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoggingIpv4HostTransportTransportTcpPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoggingIpv4HostTransportTransportTcpPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoggingIpv4HostTransportTransportTcpPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port_number: int):
        pulumi.set(__self__, "port_number", port_number)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> int:
        return pulumi.get(self, "port_number")


@pulumi.output_type
class LoggingIpv4HostTransportTransportTlsPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portNumber":
            suggest = "port_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoggingIpv4HostTransportTransportTlsPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoggingIpv4HostTransportTransportTlsPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoggingIpv4HostTransportTransportTlsPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port_number: int,
                 profile: Optional[str] = None):
        pulumi.set(__self__, "port_number", port_number)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> int:
        return pulumi.get(self, "port_number")

    @property
    @pulumi.getter
    def profile(self) -> Optional[str]:
        return pulumi.get(self, "profile")


@pulumi.output_type
class LoggingIpv4HostTransportTransportUdpPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portNumber":
            suggest = "port_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoggingIpv4HostTransportTransportUdpPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoggingIpv4HostTransportTransportUdpPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoggingIpv4HostTransportTransportUdpPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port_number: int):
        pulumi.set(__self__, "port_number", port_number)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> int:
        return pulumi.get(self, "port_number")


@pulumi.output_type
class LoggingIpv4HostVrfTransportTransportTcpPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portNumber":
            suggest = "port_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoggingIpv4HostVrfTransportTransportTcpPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoggingIpv4HostVrfTransportTransportTcpPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoggingIpv4HostVrfTransportTransportTcpPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port_number: int):
        pulumi.set(__self__, "port_number", port_number)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> int:
        return pulumi.get(self, "port_number")


@pulumi.output_type
class LoggingIpv4HostVrfTransportTransportTlsPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portNumber":
            suggest = "port_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoggingIpv4HostVrfTransportTransportTlsPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoggingIpv4HostVrfTransportTransportTlsPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoggingIpv4HostVrfTransportTransportTlsPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port_number: int,
                 profile: Optional[str] = None):
        pulumi.set(__self__, "port_number", port_number)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> int:
        return pulumi.get(self, "port_number")

    @property
    @pulumi.getter
    def profile(self) -> Optional[str]:
        return pulumi.get(self, "profile")


@pulumi.output_type
class LoggingIpv4HostVrfTransportTransportUdpPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portNumber":
            suggest = "port_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoggingIpv4HostVrfTransportTransportUdpPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoggingIpv4HostVrfTransportTransportUdpPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoggingIpv4HostVrfTransportTransportUdpPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port_number: int):
        pulumi.set(__self__, "port_number", port_number)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> int:
        return pulumi.get(self, "port_number")


@pulumi.output_type
class LoggingIpv4VrfHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv4Host":
            suggest = "ipv4_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoggingIpv4VrfHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoggingIpv4VrfHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoggingIpv4VrfHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv4_host: str,
                 vrf: str):
        pulumi.set(__self__, "ipv4_host", ipv4_host)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="ipv4Host")
    def ipv4_host(self) -> str:
        return pulumi.get(self, "ipv4_host")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class LoggingIpv6Host(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv6Host":
            suggest = "ipv6_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoggingIpv6Host. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoggingIpv6Host.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoggingIpv6Host.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv6_host: str):
        pulumi.set(__self__, "ipv6_host", ipv6_host)

    @property
    @pulumi.getter(name="ipv6Host")
    def ipv6_host(self) -> str:
        return pulumi.get(self, "ipv6_host")


@pulumi.output_type
class LoggingIpv6HostTransportTransportTcpPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portNumber":
            suggest = "port_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoggingIpv6HostTransportTransportTcpPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoggingIpv6HostTransportTransportTcpPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoggingIpv6HostTransportTransportTcpPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port_number: int):
        pulumi.set(__self__, "port_number", port_number)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> int:
        return pulumi.get(self, "port_number")


@pulumi.output_type
class LoggingIpv6HostTransportTransportTlsPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portNumber":
            suggest = "port_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoggingIpv6HostTransportTransportTlsPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoggingIpv6HostTransportTransportTlsPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoggingIpv6HostTransportTransportTlsPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port_number: int,
                 profile: Optional[str] = None):
        pulumi.set(__self__, "port_number", port_number)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> int:
        return pulumi.get(self, "port_number")

    @property
    @pulumi.getter
    def profile(self) -> Optional[str]:
        return pulumi.get(self, "profile")


@pulumi.output_type
class LoggingIpv6HostTransportTransportUdpPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portNumber":
            suggest = "port_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoggingIpv6HostTransportTransportUdpPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoggingIpv6HostTransportTransportUdpPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoggingIpv6HostTransportTransportUdpPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port_number: int):
        pulumi.set(__self__, "port_number", port_number)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> int:
        return pulumi.get(self, "port_number")


@pulumi.output_type
class LoggingIpv6HostVrfTransportTransportTcpPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portNumber":
            suggest = "port_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoggingIpv6HostVrfTransportTransportTcpPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoggingIpv6HostVrfTransportTransportTcpPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoggingIpv6HostVrfTransportTransportTcpPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port_number: int):
        pulumi.set(__self__, "port_number", port_number)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> int:
        return pulumi.get(self, "port_number")


@pulumi.output_type
class LoggingIpv6HostVrfTransportTransportTlsPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portNumber":
            suggest = "port_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoggingIpv6HostVrfTransportTransportTlsPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoggingIpv6HostVrfTransportTransportTlsPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoggingIpv6HostVrfTransportTransportTlsPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port_number: int,
                 profile: Optional[str] = None):
        pulumi.set(__self__, "port_number", port_number)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> int:
        return pulumi.get(self, "port_number")

    @property
    @pulumi.getter
    def profile(self) -> Optional[str]:
        return pulumi.get(self, "profile")


@pulumi.output_type
class LoggingIpv6HostVrfTransportTransportUdpPort(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "portNumber":
            suggest = "port_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoggingIpv6HostVrfTransportTransportUdpPort. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoggingIpv6HostVrfTransportTransportUdpPort.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoggingIpv6HostVrfTransportTransportUdpPort.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port_number: int):
        pulumi.set(__self__, "port_number", port_number)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> int:
        return pulumi.get(self, "port_number")


@pulumi.output_type
class LoggingIpv6VrfHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipv6Host":
            suggest = "ipv6_host"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoggingIpv6VrfHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoggingIpv6VrfHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoggingIpv6VrfHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ipv6_host: str,
                 vrf: str):
        pulumi.set(__self__, "ipv6_host", ipv6_host)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="ipv6Host")
    def ipv6_host(self) -> str:
        return pulumi.get(self, "ipv6_host")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class LoggingSourceInterfacesVrf(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "interfaceName":
            suggest = "interface_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoggingSourceInterfacesVrf. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoggingSourceInterfacesVrf.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoggingSourceInterfacesVrf.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface_name: str,
                 vrf: str):
        pulumi.set(__self__, "interface_name", interface_name)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> str:
        return pulumi.get(self, "interface_name")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class MdtSubscriptionReceiver(dict):
    def __init__(__self__, *,
                 address: str,
                 port: int,
                 protocol: str):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class MsdpPassword(dict):
    def __init__(__self__, *,
                 addr: str,
                 password: str,
                 encryption: Optional[int] = None):
        pulumi.set(__self__, "addr", addr)
        pulumi.set(__self__, "password", password)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)

    @property
    @pulumi.getter
    def addr(self) -> str:
        return pulumi.get(self, "addr")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def encryption(self) -> Optional[int]:
        return pulumi.get(self, "encryption")


@pulumi.output_type
class MsdpPeer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectSourceLoopback":
            suggest = "connect_source_loopback"
        elif key == "remoteAs":
            suggest = "remote_as"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MsdpPeer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MsdpPeer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MsdpPeer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addr: str,
                 connect_source_loopback: Optional[int] = None,
                 remote_as: Optional[int] = None):
        pulumi.set(__self__, "addr", addr)
        if connect_source_loopback is not None:
            pulumi.set(__self__, "connect_source_loopback", connect_source_loopback)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)

    @property
    @pulumi.getter
    def addr(self) -> str:
        return pulumi.get(self, "addr")

    @property
    @pulumi.getter(name="connectSourceLoopback")
    def connect_source_loopback(self) -> Optional[int]:
        return pulumi.get(self, "connect_source_loopback")

    @property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[int]:
        return pulumi.get(self, "remote_as")


@pulumi.output_type
class MsdpVrfPassword(dict):
    def __init__(__self__, *,
                 addr: str,
                 password: str,
                 encryption: Optional[int] = None):
        pulumi.set(__self__, "addr", addr)
        pulumi.set(__self__, "password", password)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)

    @property
    @pulumi.getter
    def addr(self) -> str:
        return pulumi.get(self, "addr")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def encryption(self) -> Optional[int]:
        return pulumi.get(self, "encryption")


@pulumi.output_type
class MsdpVrfPeer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectSourceLoopback":
            suggest = "connect_source_loopback"
        elif key == "remoteAs":
            suggest = "remote_as"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MsdpVrfPeer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MsdpVrfPeer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MsdpVrfPeer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 addr: str,
                 connect_source_loopback: Optional[int] = None,
                 remote_as: Optional[int] = None):
        pulumi.set(__self__, "addr", addr)
        if connect_source_loopback is not None:
            pulumi.set(__self__, "connect_source_loopback", connect_source_loopback)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)

    @property
    @pulumi.getter
    def addr(self) -> str:
        return pulumi.get(self, "addr")

    @property
    @pulumi.getter(name="connectSourceLoopback")
    def connect_source_loopback(self) -> Optional[int]:
        return pulumi.get(self, "connect_source_loopback")

    @property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[int]:
        return pulumi.get(self, "remote_as")


@pulumi.output_type
class NtpAuthenticationKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cmacAes128":
            suggest = "cmac_aes128"
        elif key == "encryptionType":
            suggest = "encryption_type"
        elif key == "hmacSha1":
            suggest = "hmac_sha1"
        elif key == "hmacSha2256":
            suggest = "hmac_sha2256"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NtpAuthenticationKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NtpAuthenticationKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NtpAuthenticationKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 number: int,
                 cmac_aes128: Optional[str] = None,
                 encryption_type: Optional[int] = None,
                 hmac_sha1: Optional[str] = None,
                 hmac_sha2256: Optional[str] = None,
                 md5: Optional[str] = None,
                 sha1: Optional[str] = None,
                 sha2: Optional[str] = None):
        pulumi.set(__self__, "number", number)
        if cmac_aes128 is not None:
            pulumi.set(__self__, "cmac_aes128", cmac_aes128)
        if encryption_type is not None:
            pulumi.set(__self__, "encryption_type", encryption_type)
        if hmac_sha1 is not None:
            pulumi.set(__self__, "hmac_sha1", hmac_sha1)
        if hmac_sha2256 is not None:
            pulumi.set(__self__, "hmac_sha2256", hmac_sha2256)
        if md5 is not None:
            pulumi.set(__self__, "md5", md5)
        if sha1 is not None:
            pulumi.set(__self__, "sha1", sha1)
        if sha2 is not None:
            pulumi.set(__self__, "sha2", sha2)

    @property
    @pulumi.getter
    def number(self) -> int:
        return pulumi.get(self, "number")

    @property
    @pulumi.getter(name="cmacAes128")
    def cmac_aes128(self) -> Optional[str]:
        return pulumi.get(self, "cmac_aes128")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[int]:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter(name="hmacSha1")
    def hmac_sha1(self) -> Optional[str]:
        return pulumi.get(self, "hmac_sha1")

    @property
    @pulumi.getter(name="hmacSha2256")
    def hmac_sha2256(self) -> Optional[str]:
        return pulumi.get(self, "hmac_sha2256")

    @property
    @pulumi.getter
    def md5(self) -> Optional[str]:
        return pulumi.get(self, "md5")

    @property
    @pulumi.getter
    def sha1(self) -> Optional[str]:
        return pulumi.get(self, "sha1")

    @property
    @pulumi.getter
    def sha2(self) -> Optional[str]:
        return pulumi.get(self, "sha2")


@pulumi.output_type
class NtpPeer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NtpPeer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NtpPeer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NtpPeer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: str,
                 key: Optional[int] = None,
                 prefer: Optional[bool] = None,
                 source: Optional[str] = None,
                 version: Optional[int] = None):
        pulumi.set(__self__, "ip_address", ip_address)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if prefer is not None:
            pulumi.set(__self__, "prefer", prefer)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def key(self) -> Optional[int]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def prefer(self) -> Optional[bool]:
        return pulumi.get(self, "prefer")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class NtpPeerVrf(dict):
    def __init__(__self__, *,
                 name: str,
                 peers: Optional[Sequence['outputs.NtpPeerVrfPeer']] = None):
        pulumi.set(__self__, "name", name)
        if peers is not None:
            pulumi.set(__self__, "peers", peers)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def peers(self) -> Optional[Sequence['outputs.NtpPeerVrfPeer']]:
        return pulumi.get(self, "peers")


@pulumi.output_type
class NtpPeerVrfPeer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NtpPeerVrfPeer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NtpPeerVrfPeer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NtpPeerVrfPeer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: str,
                 key: Optional[int] = None,
                 prefer: Optional[bool] = None,
                 version: Optional[int] = None):
        pulumi.set(__self__, "ip_address", ip_address)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if prefer is not None:
            pulumi.set(__self__, "prefer", prefer)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def key(self) -> Optional[int]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def prefer(self) -> Optional[bool]:
        return pulumi.get(self, "prefer")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class NtpServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NtpServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NtpServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NtpServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: str,
                 key: Optional[int] = None,
                 prefer: Optional[bool] = None,
                 source: Optional[str] = None,
                 version: Optional[int] = None):
        pulumi.set(__self__, "ip_address", ip_address)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if prefer is not None:
            pulumi.set(__self__, "prefer", prefer)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def key(self) -> Optional[int]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def prefer(self) -> Optional[bool]:
        return pulumi.get(self, "prefer")

    @property
    @pulumi.getter
    def source(self) -> Optional[str]:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class NtpServerVrf(dict):
    def __init__(__self__, *,
                 name: str,
                 servers: Optional[Sequence['outputs.NtpServerVrfServer']] = None):
        pulumi.set(__self__, "name", name)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def servers(self) -> Optional[Sequence['outputs.NtpServerVrfServer']]:
        return pulumi.get(self, "servers")


@pulumi.output_type
class NtpServerVrfServer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NtpServerVrfServer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NtpServerVrfServer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NtpServerVrfServer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: str,
                 key: Optional[int] = None,
                 prefer: Optional[bool] = None,
                 version: Optional[int] = None):
        pulumi.set(__self__, "ip_address", ip_address)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if prefer is not None:
            pulumi.set(__self__, "prefer", prefer)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def key(self) -> Optional[int]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def prefer(self) -> Optional[bool]:
        return pulumi.get(self, "prefer")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


@pulumi.output_type
class OspfArea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areaId":
            suggest = "area_id"
        elif key == "authenticationMessageDigest":
            suggest = "authentication_message_digest"
        elif key == "nssaDefaultInformationOriginate":
            suggest = "nssa_default_information_originate"
        elif key == "nssaDefaultInformationOriginateMetric":
            suggest = "nssa_default_information_originate_metric"
        elif key == "nssaDefaultInformationOriginateMetricType":
            suggest = "nssa_default_information_originate_metric_type"
        elif key == "nssaNoRedistribution":
            suggest = "nssa_no_redistribution"
        elif key == "nssaNoSummary":
            suggest = "nssa_no_summary"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OspfArea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OspfArea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OspfArea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 area_id: str,
                 authentication_message_digest: Optional[bool] = None,
                 nssa: Optional[bool] = None,
                 nssa_default_information_originate: Optional[bool] = None,
                 nssa_default_information_originate_metric: Optional[int] = None,
                 nssa_default_information_originate_metric_type: Optional[int] = None,
                 nssa_no_redistribution: Optional[bool] = None,
                 nssa_no_summary: Optional[bool] = None):
        pulumi.set(__self__, "area_id", area_id)
        if authentication_message_digest is not None:
            pulumi.set(__self__, "authentication_message_digest", authentication_message_digest)
        if nssa is not None:
            pulumi.set(__self__, "nssa", nssa)
        if nssa_default_information_originate is not None:
            pulumi.set(__self__, "nssa_default_information_originate", nssa_default_information_originate)
        if nssa_default_information_originate_metric is not None:
            pulumi.set(__self__, "nssa_default_information_originate_metric", nssa_default_information_originate_metric)
        if nssa_default_information_originate_metric_type is not None:
            pulumi.set(__self__, "nssa_default_information_originate_metric_type", nssa_default_information_originate_metric_type)
        if nssa_no_redistribution is not None:
            pulumi.set(__self__, "nssa_no_redistribution", nssa_no_redistribution)
        if nssa_no_summary is not None:
            pulumi.set(__self__, "nssa_no_summary", nssa_no_summary)

    @property
    @pulumi.getter(name="areaId")
    def area_id(self) -> str:
        return pulumi.get(self, "area_id")

    @property
    @pulumi.getter(name="authenticationMessageDigest")
    def authentication_message_digest(self) -> Optional[bool]:
        return pulumi.get(self, "authentication_message_digest")

    @property
    @pulumi.getter
    def nssa(self) -> Optional[bool]:
        return pulumi.get(self, "nssa")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginate")
    def nssa_default_information_originate(self) -> Optional[bool]:
        return pulumi.get(self, "nssa_default_information_originate")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetric")
    def nssa_default_information_originate_metric(self) -> Optional[int]:
        return pulumi.get(self, "nssa_default_information_originate_metric")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetricType")
    def nssa_default_information_originate_metric_type(self) -> Optional[int]:
        return pulumi.get(self, "nssa_default_information_originate_metric_type")

    @property
    @pulumi.getter(name="nssaNoRedistribution")
    def nssa_no_redistribution(self) -> Optional[bool]:
        return pulumi.get(self, "nssa_no_redistribution")

    @property
    @pulumi.getter(name="nssaNoSummary")
    def nssa_no_summary(self) -> Optional[bool]:
        return pulumi.get(self, "nssa_no_summary")


@pulumi.output_type
class OspfNeighbor(dict):
    def __init__(__self__, *,
                 ip: str,
                 cost: Optional[int] = None,
                 priority: Optional[int] = None):
        pulumi.set(__self__, "ip", ip)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def cost(self) -> Optional[int]:
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")


@pulumi.output_type
class OspfNetwork(dict):
    def __init__(__self__, *,
                 ip: str,
                 area: Optional[str] = None,
                 wildcard: Optional[str] = None):
        pulumi.set(__self__, "ip", ip)
        if area is not None:
            pulumi.set(__self__, "area", area)
        if wildcard is not None:
            pulumi.set(__self__, "wildcard", wildcard)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def area(self) -> Optional[str]:
        return pulumi.get(self, "area")

    @property
    @pulumi.getter
    def wildcard(self) -> Optional[str]:
        return pulumi.get(self, "wildcard")


@pulumi.output_type
class OspfSummaryAddress(dict):
    def __init__(__self__, *,
                 ip: str,
                 mask: Optional[str] = None):
        pulumi.set(__self__, "ip", ip)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def mask(self) -> Optional[str]:
        return pulumi.get(self, "mask")


@pulumi.output_type
class OspfVrfArea(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "areaId":
            suggest = "area_id"
        elif key == "authenticationMessageDigest":
            suggest = "authentication_message_digest"
        elif key == "nssaDefaultInformationOriginate":
            suggest = "nssa_default_information_originate"
        elif key == "nssaDefaultInformationOriginateMetric":
            suggest = "nssa_default_information_originate_metric"
        elif key == "nssaDefaultInformationOriginateMetricType":
            suggest = "nssa_default_information_originate_metric_type"
        elif key == "nssaNoRedistribution":
            suggest = "nssa_no_redistribution"
        elif key == "nssaNoSummary":
            suggest = "nssa_no_summary"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OspfVrfArea. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OspfVrfArea.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OspfVrfArea.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 area_id: str,
                 authentication_message_digest: Optional[bool] = None,
                 nssa: Optional[bool] = None,
                 nssa_default_information_originate: Optional[bool] = None,
                 nssa_default_information_originate_metric: Optional[int] = None,
                 nssa_default_information_originate_metric_type: Optional[int] = None,
                 nssa_no_redistribution: Optional[bool] = None,
                 nssa_no_summary: Optional[bool] = None):
        pulumi.set(__self__, "area_id", area_id)
        if authentication_message_digest is not None:
            pulumi.set(__self__, "authentication_message_digest", authentication_message_digest)
        if nssa is not None:
            pulumi.set(__self__, "nssa", nssa)
        if nssa_default_information_originate is not None:
            pulumi.set(__self__, "nssa_default_information_originate", nssa_default_information_originate)
        if nssa_default_information_originate_metric is not None:
            pulumi.set(__self__, "nssa_default_information_originate_metric", nssa_default_information_originate_metric)
        if nssa_default_information_originate_metric_type is not None:
            pulumi.set(__self__, "nssa_default_information_originate_metric_type", nssa_default_information_originate_metric_type)
        if nssa_no_redistribution is not None:
            pulumi.set(__self__, "nssa_no_redistribution", nssa_no_redistribution)
        if nssa_no_summary is not None:
            pulumi.set(__self__, "nssa_no_summary", nssa_no_summary)

    @property
    @pulumi.getter(name="areaId")
    def area_id(self) -> str:
        return pulumi.get(self, "area_id")

    @property
    @pulumi.getter(name="authenticationMessageDigest")
    def authentication_message_digest(self) -> Optional[bool]:
        return pulumi.get(self, "authentication_message_digest")

    @property
    @pulumi.getter
    def nssa(self) -> Optional[bool]:
        return pulumi.get(self, "nssa")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginate")
    def nssa_default_information_originate(self) -> Optional[bool]:
        return pulumi.get(self, "nssa_default_information_originate")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetric")
    def nssa_default_information_originate_metric(self) -> Optional[int]:
        return pulumi.get(self, "nssa_default_information_originate_metric")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetricType")
    def nssa_default_information_originate_metric_type(self) -> Optional[int]:
        return pulumi.get(self, "nssa_default_information_originate_metric_type")

    @property
    @pulumi.getter(name="nssaNoRedistribution")
    def nssa_no_redistribution(self) -> Optional[bool]:
        return pulumi.get(self, "nssa_no_redistribution")

    @property
    @pulumi.getter(name="nssaNoSummary")
    def nssa_no_summary(self) -> Optional[bool]:
        return pulumi.get(self, "nssa_no_summary")


@pulumi.output_type
class OspfVrfNeighbor(dict):
    def __init__(__self__, *,
                 ip: str,
                 cost: Optional[int] = None,
                 priority: Optional[int] = None):
        pulumi.set(__self__, "ip", ip)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def cost(self) -> Optional[int]:
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")


@pulumi.output_type
class OspfVrfNetwork(dict):
    def __init__(__self__, *,
                 ip: str,
                 area: Optional[str] = None,
                 wildcard: Optional[str] = None):
        pulumi.set(__self__, "ip", ip)
        if area is not None:
            pulumi.set(__self__, "area", area)
        if wildcard is not None:
            pulumi.set(__self__, "wildcard", wildcard)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def area(self) -> Optional[str]:
        return pulumi.get(self, "area")

    @property
    @pulumi.getter
    def wildcard(self) -> Optional[str]:
        return pulumi.get(self, "wildcard")


@pulumi.output_type
class OspfVrfSummaryAddress(dict):
    def __init__(__self__, *,
                 ip: str,
                 mask: Optional[str] = None):
        pulumi.set(__self__, "ip", ip)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def mask(self) -> Optional[str]:
        return pulumi.get(self, "mask")


@pulumi.output_type
class PimRpAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessList":
            suggest = "access_list"
        elif key == "rpAddress":
            suggest = "rp_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PimRpAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PimRpAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PimRpAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_list: str,
                 bidir: Optional[bool] = None,
                 override: Optional[bool] = None,
                 rp_address: Optional[str] = None):
        pulumi.set(__self__, "access_list", access_list)
        if bidir is not None:
            pulumi.set(__self__, "bidir", bidir)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if rp_address is not None:
            pulumi.set(__self__, "rp_address", rp_address)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> str:
        return pulumi.get(self, "access_list")

    @property
    @pulumi.getter
    def bidir(self) -> Optional[bool]:
        return pulumi.get(self, "bidir")

    @property
    @pulumi.getter
    def override(self) -> Optional[bool]:
        return pulumi.get(self, "override")

    @property
    @pulumi.getter(name="rpAddress")
    def rp_address(self) -> Optional[str]:
        return pulumi.get(self, "rp_address")


@pulumi.output_type
class PimRpCandidate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupList":
            suggest = "group_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PimRpCandidate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PimRpCandidate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PimRpCandidate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface: str,
                 bidir: Optional[bool] = None,
                 group_list: Optional[str] = None,
                 interval: Optional[int] = None,
                 priority: Optional[int] = None):
        pulumi.set(__self__, "interface", interface)
        if bidir is not None:
            pulumi.set(__self__, "bidir", bidir)
        if group_list is not None:
            pulumi.set(__self__, "group_list", group_list)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def bidir(self) -> Optional[bool]:
        return pulumi.get(self, "bidir")

    @property
    @pulumi.getter(name="groupList")
    def group_list(self) -> Optional[str]:
        return pulumi.get(self, "group_list")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")


@pulumi.output_type
class PimVrfRpAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessList":
            suggest = "access_list"
        elif key == "rpAddress":
            suggest = "rp_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PimVrfRpAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PimVrfRpAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PimVrfRpAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_list: str,
                 bidir: Optional[bool] = None,
                 override: Optional[bool] = None,
                 rp_address: Optional[str] = None):
        pulumi.set(__self__, "access_list", access_list)
        if bidir is not None:
            pulumi.set(__self__, "bidir", bidir)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if rp_address is not None:
            pulumi.set(__self__, "rp_address", rp_address)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> str:
        return pulumi.get(self, "access_list")

    @property
    @pulumi.getter
    def bidir(self) -> Optional[bool]:
        return pulumi.get(self, "bidir")

    @property
    @pulumi.getter
    def override(self) -> Optional[bool]:
        return pulumi.get(self, "override")

    @property
    @pulumi.getter(name="rpAddress")
    def rp_address(self) -> Optional[str]:
        return pulumi.get(self, "rp_address")


@pulumi.output_type
class PimVrfRpCandidate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupList":
            suggest = "group_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PimVrfRpCandidate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PimVrfRpCandidate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PimVrfRpCandidate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interface: str,
                 bidir: Optional[bool] = None,
                 group_list: Optional[str] = None,
                 interval: Optional[int] = None,
                 priority: Optional[int] = None):
        pulumi.set(__self__, "interface", interface)
        if bidir is not None:
            pulumi.set(__self__, "bidir", bidir)
        if group_list is not None:
            pulumi.set(__self__, "group_list", group_list)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def bidir(self) -> Optional[bool]:
        return pulumi.get(self, "bidir")

    @property
    @pulumi.getter(name="groupList")
    def group_list(self) -> Optional[str]:
        return pulumi.get(self, "group_list")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")


@pulumi.output_type
class PolicyMapEventClassNumber(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionNumbers":
            suggest = "action_numbers"
        elif key == "class":
            suggest = "class_"
        elif key == "executionType":
            suggest = "execution_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyMapEventClassNumber. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyMapEventClassNumber.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyMapEventClassNumber.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 number: int,
                 action_numbers: Optional[Sequence['outputs.PolicyMapEventClassNumberActionNumber']] = None,
                 class_: Optional[str] = None,
                 execution_type: Optional[str] = None):
        pulumi.set(__self__, "number", number)
        if action_numbers is not None:
            pulumi.set(__self__, "action_numbers", action_numbers)
        if class_ is not None:
            pulumi.set(__self__, "class_", class_)
        if execution_type is not None:
            pulumi.set(__self__, "execution_type", execution_type)

    @property
    @pulumi.getter
    def number(self) -> int:
        return pulumi.get(self, "number")

    @property
    @pulumi.getter(name="actionNumbers")
    def action_numbers(self) -> Optional[Sequence['outputs.PolicyMapEventClassNumberActionNumber']]:
        return pulumi.get(self, "action_numbers")

    @property
    @pulumi.getter(name="class")
    def class_(self) -> Optional[str]:
        return pulumi.get(self, "class_")

    @property
    @pulumi.getter(name="executionType")
    def execution_type(self) -> Optional[str]:
        return pulumi.get(self, "execution_type")


@pulumi.output_type
class PolicyMapEventClassNumberActionNumber(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "activateServiceTemplateConfigServiceTemplate":
            suggest = "activate_service_template_config_service_template"
        elif key == "authenticateUsingMethod":
            suggest = "authenticate_using_method"
        elif key == "authenticateUsingPriority":
            suggest = "authenticate_using_priority"
        elif key == "authenticateUsingRetries":
            suggest = "authenticate_using_retries"
        elif key == "authenticateUsingRetryTime":
            suggest = "authenticate_using_retry_time"
        elif key == "pauseReauthentication":
            suggest = "pause_reauthentication"
        elif key == "terminateConfig":
            suggest = "terminate_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PolicyMapEventClassNumberActionNumber. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PolicyMapEventClassNumberActionNumber.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PolicyMapEventClassNumberActionNumber.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 number: int,
                 activate_service_template_config_service_template: Optional[str] = None,
                 authenticate_using_method: Optional[str] = None,
                 authenticate_using_priority: Optional[int] = None,
                 authenticate_using_retries: Optional[int] = None,
                 authenticate_using_retry_time: Optional[int] = None,
                 authorize: Optional[bool] = None,
                 pause_reauthentication: Optional[bool] = None,
                 terminate_config: Optional[str] = None):
        pulumi.set(__self__, "number", number)
        if activate_service_template_config_service_template is not None:
            pulumi.set(__self__, "activate_service_template_config_service_template", activate_service_template_config_service_template)
        if authenticate_using_method is not None:
            pulumi.set(__self__, "authenticate_using_method", authenticate_using_method)
        if authenticate_using_priority is not None:
            pulumi.set(__self__, "authenticate_using_priority", authenticate_using_priority)
        if authenticate_using_retries is not None:
            pulumi.set(__self__, "authenticate_using_retries", authenticate_using_retries)
        if authenticate_using_retry_time is not None:
            pulumi.set(__self__, "authenticate_using_retry_time", authenticate_using_retry_time)
        if authorize is not None:
            pulumi.set(__self__, "authorize", authorize)
        if pause_reauthentication is not None:
            pulumi.set(__self__, "pause_reauthentication", pause_reauthentication)
        if terminate_config is not None:
            pulumi.set(__self__, "terminate_config", terminate_config)

    @property
    @pulumi.getter
    def number(self) -> int:
        return pulumi.get(self, "number")

    @property
    @pulumi.getter(name="activateServiceTemplateConfigServiceTemplate")
    def activate_service_template_config_service_template(self) -> Optional[str]:
        return pulumi.get(self, "activate_service_template_config_service_template")

    @property
    @pulumi.getter(name="authenticateUsingMethod")
    def authenticate_using_method(self) -> Optional[str]:
        return pulumi.get(self, "authenticate_using_method")

    @property
    @pulumi.getter(name="authenticateUsingPriority")
    def authenticate_using_priority(self) -> Optional[int]:
        return pulumi.get(self, "authenticate_using_priority")

    @property
    @pulumi.getter(name="authenticateUsingRetries")
    def authenticate_using_retries(self) -> Optional[int]:
        return pulumi.get(self, "authenticate_using_retries")

    @property
    @pulumi.getter(name="authenticateUsingRetryTime")
    def authenticate_using_retry_time(self) -> Optional[int]:
        return pulumi.get(self, "authenticate_using_retry_time")

    @property
    @pulumi.getter
    def authorize(self) -> Optional[bool]:
        return pulumi.get(self, "authorize")

    @property
    @pulumi.getter(name="pauseReauthentication")
    def pause_reauthentication(self) -> Optional[bool]:
        return pulumi.get(self, "pause_reauthentication")

    @property
    @pulumi.getter(name="terminateConfig")
    def terminate_config(self) -> Optional[str]:
        return pulumi.get(self, "terminate_config")


@pulumi.output_type
class PrefixListPrefix(dict):
    def __init__(__self__, *,
                 name: str,
                 seq: int,
                 action: Optional[str] = None,
                 ge: Optional[int] = None,
                 ip: Optional[str] = None,
                 le: Optional[int] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "seq", seq)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if ge is not None:
            pulumi.set(__self__, "ge", ge)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if le is not None:
            pulumi.set(__self__, "le", le)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def seq(self) -> int:
        return pulumi.get(self, "seq")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def ge(self) -> Optional[int]:
        return pulumi.get(self, "ge")

    @property
    @pulumi.getter
    def ip(self) -> Optional[str]:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def le(self) -> Optional[int]:
        return pulumi.get(self, "le")


@pulumi.output_type
class RadiusServerAttribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessRequestInclude":
            suggest = "access_request_include"
        elif key == "attribute31Parameters":
            suggest = "attribute31_parameters"
        elif key == "sendAttributes":
            suggest = "send_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RadiusServerAttribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RadiusServerAttribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RadiusServerAttribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 number: str,
                 access_request_include: Optional[bool] = None,
                 attribute31_parameters: Optional[Sequence['outputs.RadiusServerAttributeAttribute31Parameter']] = None,
                 send_attributes: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "number", number)
        if access_request_include is not None:
            pulumi.set(__self__, "access_request_include", access_request_include)
        if attribute31_parameters is not None:
            pulumi.set(__self__, "attribute31_parameters", attribute31_parameters)
        if send_attributes is not None:
            pulumi.set(__self__, "send_attributes", send_attributes)

    @property
    @pulumi.getter
    def number(self) -> str:
        return pulumi.get(self, "number")

    @property
    @pulumi.getter(name="accessRequestInclude")
    def access_request_include(self) -> Optional[bool]:
        return pulumi.get(self, "access_request_include")

    @property
    @pulumi.getter(name="attribute31Parameters")
    def attribute31_parameters(self) -> Optional[Sequence['outputs.RadiusServerAttributeAttribute31Parameter']]:
        return pulumi.get(self, "attribute31_parameters")

    @property
    @pulumi.getter(name="sendAttributes")
    def send_attributes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "send_attributes")


@pulumi.output_type
class RadiusServerAttributeAttribute31Parameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "callingStationId":
            suggest = "calling_station_id"
        elif key == "idMacFormat":
            suggest = "id_mac_format"
        elif key == "idMacLuCase":
            suggest = "id_mac_lu_case"
        elif key == "idSendMacOnly":
            suggest = "id_send_mac_only"
        elif key == "idSendNasPortDetail":
            suggest = "id_send_nas_port_detail"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RadiusServerAttributeAttribute31Parameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RadiusServerAttributeAttribute31Parameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RadiusServerAttributeAttribute31Parameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 calling_station_id: str,
                 id_mac_format: Optional[str] = None,
                 id_mac_lu_case: Optional[str] = None,
                 id_send_mac_only: Optional[bool] = None,
                 id_send_nas_port_detail: Optional[bool] = None):
        pulumi.set(__self__, "calling_station_id", calling_station_id)
        if id_mac_format is not None:
            pulumi.set(__self__, "id_mac_format", id_mac_format)
        if id_mac_lu_case is not None:
            pulumi.set(__self__, "id_mac_lu_case", id_mac_lu_case)
        if id_send_mac_only is not None:
            pulumi.set(__self__, "id_send_mac_only", id_send_mac_only)
        if id_send_nas_port_detail is not None:
            pulumi.set(__self__, "id_send_nas_port_detail", id_send_nas_port_detail)

    @property
    @pulumi.getter(name="callingStationId")
    def calling_station_id(self) -> str:
        return pulumi.get(self, "calling_station_id")

    @property
    @pulumi.getter(name="idMacFormat")
    def id_mac_format(self) -> Optional[str]:
        return pulumi.get(self, "id_mac_format")

    @property
    @pulumi.getter(name="idMacLuCase")
    def id_mac_lu_case(self) -> Optional[str]:
        return pulumi.get(self, "id_mac_lu_case")

    @property
    @pulumi.getter(name="idSendMacOnly")
    def id_send_mac_only(self) -> Optional[bool]:
        return pulumi.get(self, "id_send_mac_only")

    @property
    @pulumi.getter(name="idSendNasPortDetail")
    def id_send_nas_port_detail(self) -> Optional[bool]:
        return pulumi.get(self, "id_send_nas_port_detail")


@pulumi.output_type
class RestconfList(dict):
    def __init__(__self__, *,
                 key: str,
                 name: str,
                 items: Optional[Sequence[Mapping[str, str]]] = None,
                 values: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence[Mapping[str, str]]]:
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class RouteMapEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "continue":
            suggest = "continue_"
        elif key == "continueSequenceNumber":
            suggest = "continue_sequence_number"
        elif key == "matchAsPaths":
            suggest = "match_as_paths"
        elif key == "matchAsPathsLegacies":
            suggest = "match_as_paths_legacies"
        elif key == "matchCommunityListExactMatch":
            suggest = "match_community_list_exact_match"
        elif key == "matchCommunityLists":
            suggest = "match_community_lists"
        elif key == "matchCommunityListsLegacies":
            suggest = "match_community_lists_legacies"
        elif key == "matchExtcommunityLists":
            suggest = "match_extcommunity_lists"
        elif key == "matchExtcommunityListsLegacies":
            suggest = "match_extcommunity_lists_legacies"
        elif key == "matchInterfaces":
            suggest = "match_interfaces"
        elif key == "matchIpAddressAccessLists":
            suggest = "match_ip_address_access_lists"
        elif key == "matchIpAddressPrefixLists":
            suggest = "match_ip_address_prefix_lists"
        elif key == "matchIpNextHopAccessLists":
            suggest = "match_ip_next_hop_access_lists"
        elif key == "matchIpNextHopPrefixLists":
            suggest = "match_ip_next_hop_prefix_lists"
        elif key == "matchIpv6AddressAccessLists":
            suggest = "match_ipv6_address_access_lists"
        elif key == "matchIpv6AddressPrefixLists":
            suggest = "match_ipv6_address_prefix_lists"
        elif key == "matchIpv6NextHopAccessLists":
            suggest = "match_ipv6_next_hop_access_lists"
        elif key == "matchIpv6NextHopPrefixLists":
            suggest = "match_ipv6_next_hop_prefix_lists"
        elif key == "matchLocalPreferences":
            suggest = "match_local_preferences"
        elif key == "matchLocalPreferencesLegacies":
            suggest = "match_local_preferences_legacies"
        elif key == "matchRouteTypeExternal":
            suggest = "match_route_type_external"
        elif key == "matchRouteTypeExternalType1":
            suggest = "match_route_type_external_type1"
        elif key == "matchRouteTypeExternalType2":
            suggest = "match_route_type_external_type2"
        elif key == "matchRouteTypeInternal":
            suggest = "match_route_type_internal"
        elif key == "matchRouteTypeLevel1":
            suggest = "match_route_type_level1"
        elif key == "matchRouteTypeLevel2":
            suggest = "match_route_type_level2"
        elif key == "matchRouteTypeLocal":
            suggest = "match_route_type_local"
        elif key == "matchSourceProtocolBgps":
            suggest = "match_source_protocol_bgps"
        elif key == "matchSourceProtocolConnected":
            suggest = "match_source_protocol_connected"
        elif key == "matchSourceProtocolEigrps":
            suggest = "match_source_protocol_eigrps"
        elif key == "matchSourceProtocolIsis":
            suggest = "match_source_protocol_isis"
        elif key == "matchSourceProtocolLisp":
            suggest = "match_source_protocol_lisp"
        elif key == "matchSourceProtocolOspfs":
            suggest = "match_source_protocol_ospfs"
        elif key == "matchSourceProtocolOspfv3s":
            suggest = "match_source_protocol_ospfv3s"
        elif key == "matchSourceProtocolRip":
            suggest = "match_source_protocol_rip"
        elif key == "matchSourceProtocolStatic":
            suggest = "match_source_protocol_static"
        elif key == "matchTags":
            suggest = "match_tags"
        elif key == "matchTrack":
            suggest = "match_track"
        elif key == "setAsPathPrependAs":
            suggest = "set_as_path_prepend_as"
        elif key == "setAsPathPrependAsLegacy":
            suggest = "set_as_path_prepend_as_legacy"
        elif key == "setAsPathPrependLastAs":
            suggest = "set_as_path_prepend_last_as"
        elif key == "setAsPathPrependLastAsLegacy":
            suggest = "set_as_path_prepend_last_as_legacy"
        elif key == "setAsPathTag":
            suggest = "set_as_path_tag"
        elif key == "setAsPathTagLegacy":
            suggest = "set_as_path_tag_legacy"
        elif key == "setCommunities":
            suggest = "set_communities"
        elif key == "setCommunitiesAdditive":
            suggest = "set_communities_additive"
        elif key == "setCommunitiesAdditiveLegacy":
            suggest = "set_communities_additive_legacy"
        elif key == "setCommunitiesLegacies":
            suggest = "set_communities_legacies"
        elif key == "setCommunityListDelete":
            suggest = "set_community_list_delete"
        elif key == "setCommunityListDeleteLegacy":
            suggest = "set_community_list_delete_legacy"
        elif key == "setCommunityListExpanded":
            suggest = "set_community_list_expanded"
        elif key == "setCommunityListExpandedLegacy":
            suggest = "set_community_list_expanded_legacy"
        elif key == "setCommunityListName":
            suggest = "set_community_list_name"
        elif key == "setCommunityListNameLegacy":
            suggest = "set_community_list_name_legacy"
        elif key == "setCommunityListStandard":
            suggest = "set_community_list_standard"
        elif key == "setCommunityListStandardLegacy":
            suggest = "set_community_list_standard_legacy"
        elif key == "setCommunityNone":
            suggest = "set_community_none"
        elif key == "setCommunityNoneLegacy":
            suggest = "set_community_none_legacy"
        elif key == "setDefaultInterfaces":
            suggest = "set_default_interfaces"
        elif key == "setExtcomunityRtLegacies":
            suggest = "set_extcomunity_rt_legacies"
        elif key == "setExtcomunityRts":
            suggest = "set_extcomunity_rts"
        elif key == "setExtcomunitySoo":
            suggest = "set_extcomunity_soo"
        elif key == "setExtcomunitySooLegacy":
            suggest = "set_extcomunity_soo_legacy"
        elif key == "setExtcomunityVpnDistinguisher":
            suggest = "set_extcomunity_vpn_distinguisher"
        elif key == "setExtcomunityVpnDistinguisherAdditive":
            suggest = "set_extcomunity_vpn_distinguisher_additive"
        elif key == "setExtcomunityVpnDistinguisherLegacy":
            suggest = "set_extcomunity_vpn_distinguisher_legacy"
        elif key == "setGlobal":
            suggest = "set_global"
        elif key == "setInterfaces":
            suggest = "set_interfaces"
        elif key == "setIpAddress":
            suggest = "set_ip_address"
        elif key == "setIpDefaultGlobalNextHopAddresses":
            suggest = "set_ip_default_global_next_hop_addresses"
        elif key == "setIpDefaultNextHopAddresses":
            suggest = "set_ip_default_next_hop_addresses"
        elif key == "setIpGlobalNextHopAddresses":
            suggest = "set_ip_global_next_hop_addresses"
        elif key == "setIpNextHopAddresses":
            suggest = "set_ip_next_hop_addresses"
        elif key == "setIpNextHopSelf":
            suggest = "set_ip_next_hop_self"
        elif key == "setIpQosGroup":
            suggest = "set_ip_qos_group"
        elif key == "setIpv6Addresses":
            suggest = "set_ipv6_addresses"
        elif key == "setIpv6DefaultGlobalNextHop":
            suggest = "set_ipv6_default_global_next_hop"
        elif key == "setIpv6DefaultNextHops":
            suggest = "set_ipv6_default_next_hops"
        elif key == "setIpv6NextHops":
            suggest = "set_ipv6_next_hops"
        elif key == "setLevel1":
            suggest = "set_level1"
        elif key == "setLevel12":
            suggest = "set_level12"
        elif key == "setLevel2":
            suggest = "set_level2"
        elif key == "setLocalPreference":
            suggest = "set_local_preference"
        elif key == "setLocalPreferenceLegacy":
            suggest = "set_local_preference_legacy"
        elif key == "setMetricChange":
            suggest = "set_metric_change"
        elif key == "setMetricDelay":
            suggest = "set_metric_delay"
        elif key == "setMetricLoading":
            suggest = "set_metric_loading"
        elif key == "setMetricMtu":
            suggest = "set_metric_mtu"
        elif key == "setMetricReliability":
            suggest = "set_metric_reliability"
        elif key == "setMetricType":
            suggest = "set_metric_type"
        elif key == "setMetricValue":
            suggest = "set_metric_value"
        elif key == "setTag":
            suggest = "set_tag"
        elif key == "setVrf":
            suggest = "set_vrf"
        elif key == "setWeight":
            suggest = "set_weight"
        elif key == "setWeightLegacy":
            suggest = "set_weight_legacy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RouteMapEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RouteMapEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RouteMapEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 seq: int,
                 continue_: Optional[bool] = None,
                 continue_sequence_number: Optional[int] = None,
                 description: Optional[str] = None,
                 match_as_paths: Optional[Sequence[int]] = None,
                 match_as_paths_legacies: Optional[Sequence[int]] = None,
                 match_community_list_exact_match: Optional[bool] = None,
                 match_community_lists: Optional[Sequence[str]] = None,
                 match_community_lists_legacies: Optional[Sequence[str]] = None,
                 match_extcommunity_lists: Optional[Sequence[str]] = None,
                 match_extcommunity_lists_legacies: Optional[Sequence[str]] = None,
                 match_interfaces: Optional[Sequence[str]] = None,
                 match_ip_address_access_lists: Optional[Sequence[str]] = None,
                 match_ip_address_prefix_lists: Optional[Sequence[str]] = None,
                 match_ip_next_hop_access_lists: Optional[Sequence[str]] = None,
                 match_ip_next_hop_prefix_lists: Optional[Sequence[str]] = None,
                 match_ipv6_address_access_lists: Optional[str] = None,
                 match_ipv6_address_prefix_lists: Optional[str] = None,
                 match_ipv6_next_hop_access_lists: Optional[str] = None,
                 match_ipv6_next_hop_prefix_lists: Optional[str] = None,
                 match_local_preferences: Optional[Sequence[int]] = None,
                 match_local_preferences_legacies: Optional[Sequence[int]] = None,
                 match_route_type_external: Optional[bool] = None,
                 match_route_type_external_type1: Optional[bool] = None,
                 match_route_type_external_type2: Optional[bool] = None,
                 match_route_type_internal: Optional[bool] = None,
                 match_route_type_level1: Optional[bool] = None,
                 match_route_type_level2: Optional[bool] = None,
                 match_route_type_local: Optional[bool] = None,
                 match_source_protocol_bgps: Optional[Sequence[str]] = None,
                 match_source_protocol_connected: Optional[bool] = None,
                 match_source_protocol_eigrps: Optional[Sequence[str]] = None,
                 match_source_protocol_isis: Optional[bool] = None,
                 match_source_protocol_lisp: Optional[bool] = None,
                 match_source_protocol_ospfs: Optional[Sequence[str]] = None,
                 match_source_protocol_ospfv3s: Optional[Sequence[str]] = None,
                 match_source_protocol_rip: Optional[bool] = None,
                 match_source_protocol_static: Optional[bool] = None,
                 match_tags: Optional[Sequence[int]] = None,
                 match_track: Optional[int] = None,
                 operation: Optional[str] = None,
                 set_as_path_prepend_as: Optional[str] = None,
                 set_as_path_prepend_as_legacy: Optional[str] = None,
                 set_as_path_prepend_last_as: Optional[int] = None,
                 set_as_path_prepend_last_as_legacy: Optional[int] = None,
                 set_as_path_tag: Optional[bool] = None,
                 set_as_path_tag_legacy: Optional[bool] = None,
                 set_communities: Optional[Sequence[str]] = None,
                 set_communities_additive: Optional[bool] = None,
                 set_communities_additive_legacy: Optional[bool] = None,
                 set_communities_legacies: Optional[Sequence[str]] = None,
                 set_community_list_delete: Optional[bool] = None,
                 set_community_list_delete_legacy: Optional[bool] = None,
                 set_community_list_expanded: Optional[int] = None,
                 set_community_list_expanded_legacy: Optional[int] = None,
                 set_community_list_name: Optional[str] = None,
                 set_community_list_name_legacy: Optional[str] = None,
                 set_community_list_standard: Optional[int] = None,
                 set_community_list_standard_legacy: Optional[int] = None,
                 set_community_none: Optional[bool] = None,
                 set_community_none_legacy: Optional[bool] = None,
                 set_default_interfaces: Optional[Sequence[str]] = None,
                 set_extcomunity_rt_legacies: Optional[Sequence[str]] = None,
                 set_extcomunity_rts: Optional[Sequence[str]] = None,
                 set_extcomunity_soo: Optional[str] = None,
                 set_extcomunity_soo_legacy: Optional[str] = None,
                 set_extcomunity_vpn_distinguisher: Optional[str] = None,
                 set_extcomunity_vpn_distinguisher_additive: Optional[bool] = None,
                 set_extcomunity_vpn_distinguisher_legacy: Optional[str] = None,
                 set_global: Optional[bool] = None,
                 set_interfaces: Optional[Sequence[str]] = None,
                 set_ip_address: Optional[str] = None,
                 set_ip_default_global_next_hop_addresses: Optional[Sequence[str]] = None,
                 set_ip_default_next_hop_addresses: Optional[Sequence[str]] = None,
                 set_ip_global_next_hop_addresses: Optional[Sequence[str]] = None,
                 set_ip_next_hop_addresses: Optional[Sequence[str]] = None,
                 set_ip_next_hop_self: Optional[bool] = None,
                 set_ip_qos_group: Optional[int] = None,
                 set_ipv6_addresses: Optional[Sequence[str]] = None,
                 set_ipv6_default_global_next_hop: Optional[str] = None,
                 set_ipv6_default_next_hops: Optional[Sequence[str]] = None,
                 set_ipv6_next_hops: Optional[Sequence[str]] = None,
                 set_level1: Optional[bool] = None,
                 set_level12: Optional[bool] = None,
                 set_level2: Optional[bool] = None,
                 set_local_preference: Optional[int] = None,
                 set_local_preference_legacy: Optional[int] = None,
                 set_metric_change: Optional[str] = None,
                 set_metric_delay: Optional[str] = None,
                 set_metric_loading: Optional[int] = None,
                 set_metric_mtu: Optional[int] = None,
                 set_metric_reliability: Optional[int] = None,
                 set_metric_type: Optional[str] = None,
                 set_metric_value: Optional[int] = None,
                 set_tag: Optional[int] = None,
                 set_vrf: Optional[str] = None,
                 set_weight: Optional[int] = None,
                 set_weight_legacy: Optional[int] = None):
        pulumi.set(__self__, "seq", seq)
        if continue_ is not None:
            pulumi.set(__self__, "continue_", continue_)
        if continue_sequence_number is not None:
            pulumi.set(__self__, "continue_sequence_number", continue_sequence_number)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if match_as_paths is not None:
            pulumi.set(__self__, "match_as_paths", match_as_paths)
        if match_as_paths_legacies is not None:
            pulumi.set(__self__, "match_as_paths_legacies", match_as_paths_legacies)
        if match_community_list_exact_match is not None:
            pulumi.set(__self__, "match_community_list_exact_match", match_community_list_exact_match)
        if match_community_lists is not None:
            pulumi.set(__self__, "match_community_lists", match_community_lists)
        if match_community_lists_legacies is not None:
            pulumi.set(__self__, "match_community_lists_legacies", match_community_lists_legacies)
        if match_extcommunity_lists is not None:
            pulumi.set(__self__, "match_extcommunity_lists", match_extcommunity_lists)
        if match_extcommunity_lists_legacies is not None:
            pulumi.set(__self__, "match_extcommunity_lists_legacies", match_extcommunity_lists_legacies)
        if match_interfaces is not None:
            pulumi.set(__self__, "match_interfaces", match_interfaces)
        if match_ip_address_access_lists is not None:
            pulumi.set(__self__, "match_ip_address_access_lists", match_ip_address_access_lists)
        if match_ip_address_prefix_lists is not None:
            pulumi.set(__self__, "match_ip_address_prefix_lists", match_ip_address_prefix_lists)
        if match_ip_next_hop_access_lists is not None:
            pulumi.set(__self__, "match_ip_next_hop_access_lists", match_ip_next_hop_access_lists)
        if match_ip_next_hop_prefix_lists is not None:
            pulumi.set(__self__, "match_ip_next_hop_prefix_lists", match_ip_next_hop_prefix_lists)
        if match_ipv6_address_access_lists is not None:
            pulumi.set(__self__, "match_ipv6_address_access_lists", match_ipv6_address_access_lists)
        if match_ipv6_address_prefix_lists is not None:
            pulumi.set(__self__, "match_ipv6_address_prefix_lists", match_ipv6_address_prefix_lists)
        if match_ipv6_next_hop_access_lists is not None:
            pulumi.set(__self__, "match_ipv6_next_hop_access_lists", match_ipv6_next_hop_access_lists)
        if match_ipv6_next_hop_prefix_lists is not None:
            pulumi.set(__self__, "match_ipv6_next_hop_prefix_lists", match_ipv6_next_hop_prefix_lists)
        if match_local_preferences is not None:
            pulumi.set(__self__, "match_local_preferences", match_local_preferences)
        if match_local_preferences_legacies is not None:
            pulumi.set(__self__, "match_local_preferences_legacies", match_local_preferences_legacies)
        if match_route_type_external is not None:
            pulumi.set(__self__, "match_route_type_external", match_route_type_external)
        if match_route_type_external_type1 is not None:
            pulumi.set(__self__, "match_route_type_external_type1", match_route_type_external_type1)
        if match_route_type_external_type2 is not None:
            pulumi.set(__self__, "match_route_type_external_type2", match_route_type_external_type2)
        if match_route_type_internal is not None:
            pulumi.set(__self__, "match_route_type_internal", match_route_type_internal)
        if match_route_type_level1 is not None:
            pulumi.set(__self__, "match_route_type_level1", match_route_type_level1)
        if match_route_type_level2 is not None:
            pulumi.set(__self__, "match_route_type_level2", match_route_type_level2)
        if match_route_type_local is not None:
            pulumi.set(__self__, "match_route_type_local", match_route_type_local)
        if match_source_protocol_bgps is not None:
            pulumi.set(__self__, "match_source_protocol_bgps", match_source_protocol_bgps)
        if match_source_protocol_connected is not None:
            pulumi.set(__self__, "match_source_protocol_connected", match_source_protocol_connected)
        if match_source_protocol_eigrps is not None:
            pulumi.set(__self__, "match_source_protocol_eigrps", match_source_protocol_eigrps)
        if match_source_protocol_isis is not None:
            pulumi.set(__self__, "match_source_protocol_isis", match_source_protocol_isis)
        if match_source_protocol_lisp is not None:
            pulumi.set(__self__, "match_source_protocol_lisp", match_source_protocol_lisp)
        if match_source_protocol_ospfs is not None:
            pulumi.set(__self__, "match_source_protocol_ospfs", match_source_protocol_ospfs)
        if match_source_protocol_ospfv3s is not None:
            pulumi.set(__self__, "match_source_protocol_ospfv3s", match_source_protocol_ospfv3s)
        if match_source_protocol_rip is not None:
            pulumi.set(__self__, "match_source_protocol_rip", match_source_protocol_rip)
        if match_source_protocol_static is not None:
            pulumi.set(__self__, "match_source_protocol_static", match_source_protocol_static)
        if match_tags is not None:
            pulumi.set(__self__, "match_tags", match_tags)
        if match_track is not None:
            pulumi.set(__self__, "match_track", match_track)
        if operation is not None:
            pulumi.set(__self__, "operation", operation)
        if set_as_path_prepend_as is not None:
            pulumi.set(__self__, "set_as_path_prepend_as", set_as_path_prepend_as)
        if set_as_path_prepend_as_legacy is not None:
            pulumi.set(__self__, "set_as_path_prepend_as_legacy", set_as_path_prepend_as_legacy)
        if set_as_path_prepend_last_as is not None:
            pulumi.set(__self__, "set_as_path_prepend_last_as", set_as_path_prepend_last_as)
        if set_as_path_prepend_last_as_legacy is not None:
            pulumi.set(__self__, "set_as_path_prepend_last_as_legacy", set_as_path_prepend_last_as_legacy)
        if set_as_path_tag is not None:
            pulumi.set(__self__, "set_as_path_tag", set_as_path_tag)
        if set_as_path_tag_legacy is not None:
            pulumi.set(__self__, "set_as_path_tag_legacy", set_as_path_tag_legacy)
        if set_communities is not None:
            pulumi.set(__self__, "set_communities", set_communities)
        if set_communities_additive is not None:
            pulumi.set(__self__, "set_communities_additive", set_communities_additive)
        if set_communities_additive_legacy is not None:
            pulumi.set(__self__, "set_communities_additive_legacy", set_communities_additive_legacy)
        if set_communities_legacies is not None:
            pulumi.set(__self__, "set_communities_legacies", set_communities_legacies)
        if set_community_list_delete is not None:
            pulumi.set(__self__, "set_community_list_delete", set_community_list_delete)
        if set_community_list_delete_legacy is not None:
            pulumi.set(__self__, "set_community_list_delete_legacy", set_community_list_delete_legacy)
        if set_community_list_expanded is not None:
            pulumi.set(__self__, "set_community_list_expanded", set_community_list_expanded)
        if set_community_list_expanded_legacy is not None:
            pulumi.set(__self__, "set_community_list_expanded_legacy", set_community_list_expanded_legacy)
        if set_community_list_name is not None:
            pulumi.set(__self__, "set_community_list_name", set_community_list_name)
        if set_community_list_name_legacy is not None:
            pulumi.set(__self__, "set_community_list_name_legacy", set_community_list_name_legacy)
        if set_community_list_standard is not None:
            pulumi.set(__self__, "set_community_list_standard", set_community_list_standard)
        if set_community_list_standard_legacy is not None:
            pulumi.set(__self__, "set_community_list_standard_legacy", set_community_list_standard_legacy)
        if set_community_none is not None:
            pulumi.set(__self__, "set_community_none", set_community_none)
        if set_community_none_legacy is not None:
            pulumi.set(__self__, "set_community_none_legacy", set_community_none_legacy)
        if set_default_interfaces is not None:
            pulumi.set(__self__, "set_default_interfaces", set_default_interfaces)
        if set_extcomunity_rt_legacies is not None:
            pulumi.set(__self__, "set_extcomunity_rt_legacies", set_extcomunity_rt_legacies)
        if set_extcomunity_rts is not None:
            pulumi.set(__self__, "set_extcomunity_rts", set_extcomunity_rts)
        if set_extcomunity_soo is not None:
            pulumi.set(__self__, "set_extcomunity_soo", set_extcomunity_soo)
        if set_extcomunity_soo_legacy is not None:
            pulumi.set(__self__, "set_extcomunity_soo_legacy", set_extcomunity_soo_legacy)
        if set_extcomunity_vpn_distinguisher is not None:
            pulumi.set(__self__, "set_extcomunity_vpn_distinguisher", set_extcomunity_vpn_distinguisher)
        if set_extcomunity_vpn_distinguisher_additive is not None:
            pulumi.set(__self__, "set_extcomunity_vpn_distinguisher_additive", set_extcomunity_vpn_distinguisher_additive)
        if set_extcomunity_vpn_distinguisher_legacy is not None:
            pulumi.set(__self__, "set_extcomunity_vpn_distinguisher_legacy", set_extcomunity_vpn_distinguisher_legacy)
        if set_global is not None:
            pulumi.set(__self__, "set_global", set_global)
        if set_interfaces is not None:
            pulumi.set(__self__, "set_interfaces", set_interfaces)
        if set_ip_address is not None:
            pulumi.set(__self__, "set_ip_address", set_ip_address)
        if set_ip_default_global_next_hop_addresses is not None:
            pulumi.set(__self__, "set_ip_default_global_next_hop_addresses", set_ip_default_global_next_hop_addresses)
        if set_ip_default_next_hop_addresses is not None:
            pulumi.set(__self__, "set_ip_default_next_hop_addresses", set_ip_default_next_hop_addresses)
        if set_ip_global_next_hop_addresses is not None:
            pulumi.set(__self__, "set_ip_global_next_hop_addresses", set_ip_global_next_hop_addresses)
        if set_ip_next_hop_addresses is not None:
            pulumi.set(__self__, "set_ip_next_hop_addresses", set_ip_next_hop_addresses)
        if set_ip_next_hop_self is not None:
            pulumi.set(__self__, "set_ip_next_hop_self", set_ip_next_hop_self)
        if set_ip_qos_group is not None:
            pulumi.set(__self__, "set_ip_qos_group", set_ip_qos_group)
        if set_ipv6_addresses is not None:
            pulumi.set(__self__, "set_ipv6_addresses", set_ipv6_addresses)
        if set_ipv6_default_global_next_hop is not None:
            pulumi.set(__self__, "set_ipv6_default_global_next_hop", set_ipv6_default_global_next_hop)
        if set_ipv6_default_next_hops is not None:
            pulumi.set(__self__, "set_ipv6_default_next_hops", set_ipv6_default_next_hops)
        if set_ipv6_next_hops is not None:
            pulumi.set(__self__, "set_ipv6_next_hops", set_ipv6_next_hops)
        if set_level1 is not None:
            pulumi.set(__self__, "set_level1", set_level1)
        if set_level12 is not None:
            pulumi.set(__self__, "set_level12", set_level12)
        if set_level2 is not None:
            pulumi.set(__self__, "set_level2", set_level2)
        if set_local_preference is not None:
            pulumi.set(__self__, "set_local_preference", set_local_preference)
        if set_local_preference_legacy is not None:
            pulumi.set(__self__, "set_local_preference_legacy", set_local_preference_legacy)
        if set_metric_change is not None:
            pulumi.set(__self__, "set_metric_change", set_metric_change)
        if set_metric_delay is not None:
            pulumi.set(__self__, "set_metric_delay", set_metric_delay)
        if set_metric_loading is not None:
            pulumi.set(__self__, "set_metric_loading", set_metric_loading)
        if set_metric_mtu is not None:
            pulumi.set(__self__, "set_metric_mtu", set_metric_mtu)
        if set_metric_reliability is not None:
            pulumi.set(__self__, "set_metric_reliability", set_metric_reliability)
        if set_metric_type is not None:
            pulumi.set(__self__, "set_metric_type", set_metric_type)
        if set_metric_value is not None:
            pulumi.set(__self__, "set_metric_value", set_metric_value)
        if set_tag is not None:
            pulumi.set(__self__, "set_tag", set_tag)
        if set_vrf is not None:
            pulumi.set(__self__, "set_vrf", set_vrf)
        if set_weight is not None:
            pulumi.set(__self__, "set_weight", set_weight)
        if set_weight_legacy is not None:
            pulumi.set(__self__, "set_weight_legacy", set_weight_legacy)

    @property
    @pulumi.getter
    def seq(self) -> int:
        return pulumi.get(self, "seq")

    @property
    @pulumi.getter(name="continue")
    def continue_(self) -> Optional[bool]:
        return pulumi.get(self, "continue_")

    @property
    @pulumi.getter(name="continueSequenceNumber")
    def continue_sequence_number(self) -> Optional[int]:
        return pulumi.get(self, "continue_sequence_number")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="matchAsPaths")
    def match_as_paths(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "match_as_paths")

    @property
    @pulumi.getter(name="matchAsPathsLegacies")
    def match_as_paths_legacies(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "match_as_paths_legacies")

    @property
    @pulumi.getter(name="matchCommunityListExactMatch")
    def match_community_list_exact_match(self) -> Optional[bool]:
        return pulumi.get(self, "match_community_list_exact_match")

    @property
    @pulumi.getter(name="matchCommunityLists")
    def match_community_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "match_community_lists")

    @property
    @pulumi.getter(name="matchCommunityListsLegacies")
    def match_community_lists_legacies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "match_community_lists_legacies")

    @property
    @pulumi.getter(name="matchExtcommunityLists")
    def match_extcommunity_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "match_extcommunity_lists")

    @property
    @pulumi.getter(name="matchExtcommunityListsLegacies")
    def match_extcommunity_lists_legacies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "match_extcommunity_lists_legacies")

    @property
    @pulumi.getter(name="matchInterfaces")
    def match_interfaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "match_interfaces")

    @property
    @pulumi.getter(name="matchIpAddressAccessLists")
    def match_ip_address_access_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "match_ip_address_access_lists")

    @property
    @pulumi.getter(name="matchIpAddressPrefixLists")
    def match_ip_address_prefix_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "match_ip_address_prefix_lists")

    @property
    @pulumi.getter(name="matchIpNextHopAccessLists")
    def match_ip_next_hop_access_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "match_ip_next_hop_access_lists")

    @property
    @pulumi.getter(name="matchIpNextHopPrefixLists")
    def match_ip_next_hop_prefix_lists(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "match_ip_next_hop_prefix_lists")

    @property
    @pulumi.getter(name="matchIpv6AddressAccessLists")
    def match_ipv6_address_access_lists(self) -> Optional[str]:
        return pulumi.get(self, "match_ipv6_address_access_lists")

    @property
    @pulumi.getter(name="matchIpv6AddressPrefixLists")
    def match_ipv6_address_prefix_lists(self) -> Optional[str]:
        return pulumi.get(self, "match_ipv6_address_prefix_lists")

    @property
    @pulumi.getter(name="matchIpv6NextHopAccessLists")
    def match_ipv6_next_hop_access_lists(self) -> Optional[str]:
        return pulumi.get(self, "match_ipv6_next_hop_access_lists")

    @property
    @pulumi.getter(name="matchIpv6NextHopPrefixLists")
    def match_ipv6_next_hop_prefix_lists(self) -> Optional[str]:
        return pulumi.get(self, "match_ipv6_next_hop_prefix_lists")

    @property
    @pulumi.getter(name="matchLocalPreferences")
    def match_local_preferences(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "match_local_preferences")

    @property
    @pulumi.getter(name="matchLocalPreferencesLegacies")
    def match_local_preferences_legacies(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "match_local_preferences_legacies")

    @property
    @pulumi.getter(name="matchRouteTypeExternal")
    def match_route_type_external(self) -> Optional[bool]:
        return pulumi.get(self, "match_route_type_external")

    @property
    @pulumi.getter(name="matchRouteTypeExternalType1")
    def match_route_type_external_type1(self) -> Optional[bool]:
        return pulumi.get(self, "match_route_type_external_type1")

    @property
    @pulumi.getter(name="matchRouteTypeExternalType2")
    def match_route_type_external_type2(self) -> Optional[bool]:
        return pulumi.get(self, "match_route_type_external_type2")

    @property
    @pulumi.getter(name="matchRouteTypeInternal")
    def match_route_type_internal(self) -> Optional[bool]:
        return pulumi.get(self, "match_route_type_internal")

    @property
    @pulumi.getter(name="matchRouteTypeLevel1")
    def match_route_type_level1(self) -> Optional[bool]:
        return pulumi.get(self, "match_route_type_level1")

    @property
    @pulumi.getter(name="matchRouteTypeLevel2")
    def match_route_type_level2(self) -> Optional[bool]:
        return pulumi.get(self, "match_route_type_level2")

    @property
    @pulumi.getter(name="matchRouteTypeLocal")
    def match_route_type_local(self) -> Optional[bool]:
        return pulumi.get(self, "match_route_type_local")

    @property
    @pulumi.getter(name="matchSourceProtocolBgps")
    def match_source_protocol_bgps(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "match_source_protocol_bgps")

    @property
    @pulumi.getter(name="matchSourceProtocolConnected")
    def match_source_protocol_connected(self) -> Optional[bool]:
        return pulumi.get(self, "match_source_protocol_connected")

    @property
    @pulumi.getter(name="matchSourceProtocolEigrps")
    def match_source_protocol_eigrps(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "match_source_protocol_eigrps")

    @property
    @pulumi.getter(name="matchSourceProtocolIsis")
    def match_source_protocol_isis(self) -> Optional[bool]:
        return pulumi.get(self, "match_source_protocol_isis")

    @property
    @pulumi.getter(name="matchSourceProtocolLisp")
    def match_source_protocol_lisp(self) -> Optional[bool]:
        return pulumi.get(self, "match_source_protocol_lisp")

    @property
    @pulumi.getter(name="matchSourceProtocolOspfs")
    def match_source_protocol_ospfs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "match_source_protocol_ospfs")

    @property
    @pulumi.getter(name="matchSourceProtocolOspfv3s")
    def match_source_protocol_ospfv3s(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "match_source_protocol_ospfv3s")

    @property
    @pulumi.getter(name="matchSourceProtocolRip")
    def match_source_protocol_rip(self) -> Optional[bool]:
        return pulumi.get(self, "match_source_protocol_rip")

    @property
    @pulumi.getter(name="matchSourceProtocolStatic")
    def match_source_protocol_static(self) -> Optional[bool]:
        return pulumi.get(self, "match_source_protocol_static")

    @property
    @pulumi.getter(name="matchTags")
    def match_tags(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "match_tags")

    @property
    @pulumi.getter(name="matchTrack")
    def match_track(self) -> Optional[int]:
        return pulumi.get(self, "match_track")

    @property
    @pulumi.getter
    def operation(self) -> Optional[str]:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter(name="setAsPathPrependAs")
    def set_as_path_prepend_as(self) -> Optional[str]:
        return pulumi.get(self, "set_as_path_prepend_as")

    @property
    @pulumi.getter(name="setAsPathPrependAsLegacy")
    def set_as_path_prepend_as_legacy(self) -> Optional[str]:
        return pulumi.get(self, "set_as_path_prepend_as_legacy")

    @property
    @pulumi.getter(name="setAsPathPrependLastAs")
    def set_as_path_prepend_last_as(self) -> Optional[int]:
        return pulumi.get(self, "set_as_path_prepend_last_as")

    @property
    @pulumi.getter(name="setAsPathPrependLastAsLegacy")
    def set_as_path_prepend_last_as_legacy(self) -> Optional[int]:
        return pulumi.get(self, "set_as_path_prepend_last_as_legacy")

    @property
    @pulumi.getter(name="setAsPathTag")
    def set_as_path_tag(self) -> Optional[bool]:
        return pulumi.get(self, "set_as_path_tag")

    @property
    @pulumi.getter(name="setAsPathTagLegacy")
    def set_as_path_tag_legacy(self) -> Optional[bool]:
        return pulumi.get(self, "set_as_path_tag_legacy")

    @property
    @pulumi.getter(name="setCommunities")
    def set_communities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "set_communities")

    @property
    @pulumi.getter(name="setCommunitiesAdditive")
    def set_communities_additive(self) -> Optional[bool]:
        return pulumi.get(self, "set_communities_additive")

    @property
    @pulumi.getter(name="setCommunitiesAdditiveLegacy")
    def set_communities_additive_legacy(self) -> Optional[bool]:
        return pulumi.get(self, "set_communities_additive_legacy")

    @property
    @pulumi.getter(name="setCommunitiesLegacies")
    def set_communities_legacies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "set_communities_legacies")

    @property
    @pulumi.getter(name="setCommunityListDelete")
    def set_community_list_delete(self) -> Optional[bool]:
        return pulumi.get(self, "set_community_list_delete")

    @property
    @pulumi.getter(name="setCommunityListDeleteLegacy")
    def set_community_list_delete_legacy(self) -> Optional[bool]:
        return pulumi.get(self, "set_community_list_delete_legacy")

    @property
    @pulumi.getter(name="setCommunityListExpanded")
    def set_community_list_expanded(self) -> Optional[int]:
        return pulumi.get(self, "set_community_list_expanded")

    @property
    @pulumi.getter(name="setCommunityListExpandedLegacy")
    def set_community_list_expanded_legacy(self) -> Optional[int]:
        return pulumi.get(self, "set_community_list_expanded_legacy")

    @property
    @pulumi.getter(name="setCommunityListName")
    def set_community_list_name(self) -> Optional[str]:
        return pulumi.get(self, "set_community_list_name")

    @property
    @pulumi.getter(name="setCommunityListNameLegacy")
    def set_community_list_name_legacy(self) -> Optional[str]:
        return pulumi.get(self, "set_community_list_name_legacy")

    @property
    @pulumi.getter(name="setCommunityListStandard")
    def set_community_list_standard(self) -> Optional[int]:
        return pulumi.get(self, "set_community_list_standard")

    @property
    @pulumi.getter(name="setCommunityListStandardLegacy")
    def set_community_list_standard_legacy(self) -> Optional[int]:
        return pulumi.get(self, "set_community_list_standard_legacy")

    @property
    @pulumi.getter(name="setCommunityNone")
    def set_community_none(self) -> Optional[bool]:
        return pulumi.get(self, "set_community_none")

    @property
    @pulumi.getter(name="setCommunityNoneLegacy")
    def set_community_none_legacy(self) -> Optional[bool]:
        return pulumi.get(self, "set_community_none_legacy")

    @property
    @pulumi.getter(name="setDefaultInterfaces")
    def set_default_interfaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "set_default_interfaces")

    @property
    @pulumi.getter(name="setExtcomunityRtLegacies")
    def set_extcomunity_rt_legacies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "set_extcomunity_rt_legacies")

    @property
    @pulumi.getter(name="setExtcomunityRts")
    def set_extcomunity_rts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "set_extcomunity_rts")

    @property
    @pulumi.getter(name="setExtcomunitySoo")
    def set_extcomunity_soo(self) -> Optional[str]:
        return pulumi.get(self, "set_extcomunity_soo")

    @property
    @pulumi.getter(name="setExtcomunitySooLegacy")
    def set_extcomunity_soo_legacy(self) -> Optional[str]:
        return pulumi.get(self, "set_extcomunity_soo_legacy")

    @property
    @pulumi.getter(name="setExtcomunityVpnDistinguisher")
    def set_extcomunity_vpn_distinguisher(self) -> Optional[str]:
        return pulumi.get(self, "set_extcomunity_vpn_distinguisher")

    @property
    @pulumi.getter(name="setExtcomunityVpnDistinguisherAdditive")
    def set_extcomunity_vpn_distinguisher_additive(self) -> Optional[bool]:
        return pulumi.get(self, "set_extcomunity_vpn_distinguisher_additive")

    @property
    @pulumi.getter(name="setExtcomunityVpnDistinguisherLegacy")
    def set_extcomunity_vpn_distinguisher_legacy(self) -> Optional[str]:
        return pulumi.get(self, "set_extcomunity_vpn_distinguisher_legacy")

    @property
    @pulumi.getter(name="setGlobal")
    def set_global(self) -> Optional[bool]:
        return pulumi.get(self, "set_global")

    @property
    @pulumi.getter(name="setInterfaces")
    def set_interfaces(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "set_interfaces")

    @property
    @pulumi.getter(name="setIpAddress")
    def set_ip_address(self) -> Optional[str]:
        return pulumi.get(self, "set_ip_address")

    @property
    @pulumi.getter(name="setIpDefaultGlobalNextHopAddresses")
    def set_ip_default_global_next_hop_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "set_ip_default_global_next_hop_addresses")

    @property
    @pulumi.getter(name="setIpDefaultNextHopAddresses")
    def set_ip_default_next_hop_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "set_ip_default_next_hop_addresses")

    @property
    @pulumi.getter(name="setIpGlobalNextHopAddresses")
    def set_ip_global_next_hop_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "set_ip_global_next_hop_addresses")

    @property
    @pulumi.getter(name="setIpNextHopAddresses")
    def set_ip_next_hop_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "set_ip_next_hop_addresses")

    @property
    @pulumi.getter(name="setIpNextHopSelf")
    def set_ip_next_hop_self(self) -> Optional[bool]:
        return pulumi.get(self, "set_ip_next_hop_self")

    @property
    @pulumi.getter(name="setIpQosGroup")
    def set_ip_qos_group(self) -> Optional[int]:
        return pulumi.get(self, "set_ip_qos_group")

    @property
    @pulumi.getter(name="setIpv6Addresses")
    def set_ipv6_addresses(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "set_ipv6_addresses")

    @property
    @pulumi.getter(name="setIpv6DefaultGlobalNextHop")
    def set_ipv6_default_global_next_hop(self) -> Optional[str]:
        return pulumi.get(self, "set_ipv6_default_global_next_hop")

    @property
    @pulumi.getter(name="setIpv6DefaultNextHops")
    def set_ipv6_default_next_hops(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "set_ipv6_default_next_hops")

    @property
    @pulumi.getter(name="setIpv6NextHops")
    def set_ipv6_next_hops(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "set_ipv6_next_hops")

    @property
    @pulumi.getter(name="setLevel1")
    def set_level1(self) -> Optional[bool]:
        return pulumi.get(self, "set_level1")

    @property
    @pulumi.getter(name="setLevel12")
    def set_level12(self) -> Optional[bool]:
        return pulumi.get(self, "set_level12")

    @property
    @pulumi.getter(name="setLevel2")
    def set_level2(self) -> Optional[bool]:
        return pulumi.get(self, "set_level2")

    @property
    @pulumi.getter(name="setLocalPreference")
    def set_local_preference(self) -> Optional[int]:
        return pulumi.get(self, "set_local_preference")

    @property
    @pulumi.getter(name="setLocalPreferenceLegacy")
    def set_local_preference_legacy(self) -> Optional[int]:
        return pulumi.get(self, "set_local_preference_legacy")

    @property
    @pulumi.getter(name="setMetricChange")
    def set_metric_change(self) -> Optional[str]:
        return pulumi.get(self, "set_metric_change")

    @property
    @pulumi.getter(name="setMetricDelay")
    def set_metric_delay(self) -> Optional[str]:
        return pulumi.get(self, "set_metric_delay")

    @property
    @pulumi.getter(name="setMetricLoading")
    def set_metric_loading(self) -> Optional[int]:
        return pulumi.get(self, "set_metric_loading")

    @property
    @pulumi.getter(name="setMetricMtu")
    def set_metric_mtu(self) -> Optional[int]:
        return pulumi.get(self, "set_metric_mtu")

    @property
    @pulumi.getter(name="setMetricReliability")
    def set_metric_reliability(self) -> Optional[int]:
        return pulumi.get(self, "set_metric_reliability")

    @property
    @pulumi.getter(name="setMetricType")
    def set_metric_type(self) -> Optional[str]:
        return pulumi.get(self, "set_metric_type")

    @property
    @pulumi.getter(name="setMetricValue")
    def set_metric_value(self) -> Optional[int]:
        return pulumi.get(self, "set_metric_value")

    @property
    @pulumi.getter(name="setTag")
    def set_tag(self) -> Optional[int]:
        return pulumi.get(self, "set_tag")

    @property
    @pulumi.getter(name="setVrf")
    def set_vrf(self) -> Optional[str]:
        return pulumi.get(self, "set_vrf")

    @property
    @pulumi.getter(name="setWeight")
    def set_weight(self) -> Optional[int]:
        return pulumi.get(self, "set_weight")

    @property
    @pulumi.getter(name="setWeightLegacy")
    def set_weight_legacy(self) -> Optional[int]:
        return pulumi.get(self, "set_weight_legacy")


@pulumi.output_type
class ServiceTemplateAccessGroup(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class ServiceTemplateInterfaceTemplate(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class ServiceTemplateTag(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class SnmpServerContext(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class SnmpServerGroupV3Security(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityLevel":
            suggest = "security_level"
        elif key == "accessAclName":
            suggest = "access_acl_name"
        elif key == "accessIpv6Acl":
            suggest = "access_ipv6_acl"
        elif key == "accessStandardAcl":
            suggest = "access_standard_acl"
        elif key == "contextNode":
            suggest = "context_node"
        elif key == "matchNode":
            suggest = "match_node"
        elif key == "notifyNode":
            suggest = "notify_node"
        elif key == "readNode":
            suggest = "read_node"
        elif key == "writeNode":
            suggest = "write_node"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SnmpServerGroupV3Security. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SnmpServerGroupV3Security.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SnmpServerGroupV3Security.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_level: str,
                 access_acl_name: Optional[str] = None,
                 access_ipv6_acl: Optional[str] = None,
                 access_standard_acl: Optional[int] = None,
                 context_node: Optional[str] = None,
                 match_node: Optional[str] = None,
                 notify_node: Optional[str] = None,
                 read_node: Optional[str] = None,
                 write_node: Optional[str] = None):
        pulumi.set(__self__, "security_level", security_level)
        if access_acl_name is not None:
            pulumi.set(__self__, "access_acl_name", access_acl_name)
        if access_ipv6_acl is not None:
            pulumi.set(__self__, "access_ipv6_acl", access_ipv6_acl)
        if access_standard_acl is not None:
            pulumi.set(__self__, "access_standard_acl", access_standard_acl)
        if context_node is not None:
            pulumi.set(__self__, "context_node", context_node)
        if match_node is not None:
            pulumi.set(__self__, "match_node", match_node)
        if notify_node is not None:
            pulumi.set(__self__, "notify_node", notify_node)
        if read_node is not None:
            pulumi.set(__self__, "read_node", read_node)
        if write_node is not None:
            pulumi.set(__self__, "write_node", write_node)

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> str:
        return pulumi.get(self, "security_level")

    @property
    @pulumi.getter(name="accessAclName")
    def access_acl_name(self) -> Optional[str]:
        return pulumi.get(self, "access_acl_name")

    @property
    @pulumi.getter(name="accessIpv6Acl")
    def access_ipv6_acl(self) -> Optional[str]:
        return pulumi.get(self, "access_ipv6_acl")

    @property
    @pulumi.getter(name="accessStandardAcl")
    def access_standard_acl(self) -> Optional[int]:
        return pulumi.get(self, "access_standard_acl")

    @property
    @pulumi.getter(name="contextNode")
    def context_node(self) -> Optional[str]:
        return pulumi.get(self, "context_node")

    @property
    @pulumi.getter(name="matchNode")
    def match_node(self) -> Optional[str]:
        return pulumi.get(self, "match_node")

    @property
    @pulumi.getter(name="notifyNode")
    def notify_node(self) -> Optional[str]:
        return pulumi.get(self, "notify_node")

    @property
    @pulumi.getter(name="readNode")
    def read_node(self) -> Optional[str]:
        return pulumi.get(self, "read_node")

    @property
    @pulumi.getter(name="writeNode")
    def write_node(self) -> Optional[str]:
        return pulumi.get(self, "write_node")


@pulumi.output_type
class SnmpServerHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "communityOrUser":
            suggest = "community_or_user"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SnmpServerHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SnmpServerHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SnmpServerHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: str,
                 community_or_user: Optional[str] = None,
                 encryption: Optional[str] = None,
                 version: Optional[str] = None):
        pulumi.set(__self__, "ip_address", ip_address)
        if community_or_user is not None:
            pulumi.set(__self__, "community_or_user", community_or_user)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="communityOrUser")
    def community_or_user(self) -> Optional[str]:
        return pulumi.get(self, "community_or_user")

    @property
    @pulumi.getter
    def encryption(self) -> Optional[str]:
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class SnmpServerSnmpCommunity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessListName":
            suggest = "access_list_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SnmpServerSnmpCommunity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SnmpServerSnmpCommunity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SnmpServerSnmpCommunity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 access_list_name: Optional[str] = None,
                 ipv6: Optional[str] = None,
                 permission: Optional[str] = None,
                 view: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if access_list_name is not None:
            pulumi.set(__self__, "access_list_name", access_list_name)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if permission is not None:
            pulumi.set(__self__, "permission", permission)
        if view is not None:
            pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="accessListName")
    def access_list_name(self) -> Optional[str]:
        return pulumi.get(self, "access_list_name")

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[str]:
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter
    def permission(self) -> Optional[str]:
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter
    def view(self) -> Optional[str]:
        return pulumi.get(self, "view")


@pulumi.output_type
class SnmpServerView(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "incExl":
            suggest = "inc_exl"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SnmpServerView. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SnmpServerView.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SnmpServerView.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mib: str,
                 name: str,
                 inc_exl: Optional[str] = None):
        pulumi.set(__self__, "mib", mib)
        pulumi.set(__self__, "name", name)
        if inc_exl is not None:
            pulumi.set(__self__, "inc_exl", inc_exl)

    @property
    @pulumi.getter
    def mib(self) -> str:
        return pulumi.get(self, "mib")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="incExl")
    def inc_exl(self) -> Optional[str]:
        return pulumi.get(self, "inc_exl")


@pulumi.output_type
class StaticRouteNextHop(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextHop":
            suggest = "next_hop"
        elif key == "global":
            suggest = "global_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StaticRouteNextHop. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StaticRouteNextHop.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StaticRouteNextHop.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 next_hop: str,
                 global_: Optional[bool] = None,
                 metric: Optional[int] = None,
                 name: Optional[str] = None,
                 permanent: Optional[bool] = None,
                 tag: Optional[int] = None):
        pulumi.set(__self__, "next_hop", next_hop)
        if global_ is not None:
            pulumi.set(__self__, "global_", global_)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permanent is not None:
            pulumi.set(__self__, "permanent", permanent)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> str:
        return pulumi.get(self, "next_hop")

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[bool]:
        return pulumi.get(self, "global_")

    @property
    @pulumi.getter
    def metric(self) -> Optional[int]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permanent(self) -> Optional[bool]:
        return pulumi.get(self, "permanent")

    @property
    @pulumi.getter
    def tag(self) -> Optional[int]:
        return pulumi.get(self, "tag")


@pulumi.output_type
class StaticRouteVrfRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextHops":
            suggest = "next_hops"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StaticRouteVrfRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StaticRouteVrfRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StaticRouteVrfRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mask: str,
                 prefix: str,
                 next_hops: Optional[Sequence['outputs.StaticRouteVrfRouteNextHop']] = None):
        pulumi.set(__self__, "mask", mask)
        pulumi.set(__self__, "prefix", prefix)
        if next_hops is not None:
            pulumi.set(__self__, "next_hops", next_hops)

    @property
    @pulumi.getter
    def mask(self) -> str:
        return pulumi.get(self, "mask")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Optional[Sequence['outputs.StaticRouteVrfRouteNextHop']]:
        return pulumi.get(self, "next_hops")


@pulumi.output_type
class StaticRouteVrfRouteNextHop(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nextHop":
            suggest = "next_hop"
        elif key == "global":
            suggest = "global_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StaticRouteVrfRouteNextHop. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StaticRouteVrfRouteNextHop.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StaticRouteVrfRouteNextHop.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 next_hop: str,
                 global_: Optional[bool] = None,
                 metric: Optional[int] = None,
                 name: Optional[str] = None,
                 permanent: Optional[bool] = None,
                 tag: Optional[int] = None):
        pulumi.set(__self__, "next_hop", next_hop)
        if global_ is not None:
            pulumi.set(__self__, "global_", global_)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permanent is not None:
            pulumi.set(__self__, "permanent", permanent)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> str:
        return pulumi.get(self, "next_hop")

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[bool]:
        return pulumi.get(self, "global_")

    @property
    @pulumi.getter
    def metric(self) -> Optional[int]:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permanent(self) -> Optional[bool]:
        return pulumi.get(self, "permanent")

    @property
    @pulumi.getter
    def tag(self) -> Optional[int]:
        return pulumi.get(self, "tag")


@pulumi.output_type
class SystemMulticastRoutingVrf(dict):
    def __init__(__self__, *,
                 vrf: str,
                 distributed: Optional[bool] = None):
        pulumi.set(__self__, "vrf", vrf)
        if distributed is not None:
            pulumi.set(__self__, "distributed", distributed)

    @property
    @pulumi.getter
    def vrf(self) -> str:
        return pulumi.get(self, "vrf")

    @property
    @pulumi.getter
    def distributed(self) -> Optional[bool]:
        return pulumi.get(self, "distributed")


@pulumi.output_type
class TemplateDeviceTrackingAttachPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyName":
            suggest = "policy_name"
        elif key == "vlanRange":
            suggest = "vlan_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDeviceTrackingAttachPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDeviceTrackingAttachPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDeviceTrackingAttachPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_name: str,
                 vlan_range: Optional[str] = None):
        pulumi.set(__self__, "policy_name", policy_name)
        if vlan_range is not None:
            pulumi.set(__self__, "vlan_range", vlan_range)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="vlanRange")
    def vlan_range(self) -> Optional[str]:
        return pulumi.get(self, "vlan_range")


@pulumi.output_type
class TemplateIpAccessGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessList":
            suggest = "access_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateIpAccessGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateIpAccessGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateIpAccessGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 direction: str,
                 access_list: Optional[str] = None):
        pulumi.set(__self__, "direction", direction)
        if access_list is not None:
            pulumi.set(__self__, "access_list", access_list)

    @property
    @pulumi.getter
    def direction(self) -> str:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> Optional[str]:
        return pulumi.get(self, "access_list")


@pulumi.output_type
class TemplateSwitchportPortSecurityMaximumRange(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "vlanAccess":
            suggest = "vlan_access"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateSwitchportPortSecurityMaximumRange. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateSwitchportPortSecurityMaximumRange.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateSwitchportPortSecurityMaximumRange.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 range: int,
                 vlan: Optional[bool] = None,
                 vlan_access: Optional[bool] = None):
        pulumi.set(__self__, "range", range)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)
        if vlan_access is not None:
            pulumi.set(__self__, "vlan_access", vlan_access)

    @property
    @pulumi.getter
    def range(self) -> int:
        return pulumi.get(self, "range")

    @property
    @pulumi.getter
    def vlan(self) -> Optional[bool]:
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter(name="vlanAccess")
    def vlan_access(self) -> Optional[bool]:
        return pulumi.get(self, "vlan_access")


@pulumi.output_type
class VrfIpv4RouteTargetExport(dict):
    def __init__(__self__, *,
                 value: str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class VrfIpv4RouteTargetExportStitching(dict):
    def __init__(__self__, *,
                 value: str,
                 stitching: Optional[bool] = None):
        pulumi.set(__self__, "value", value)
        if stitching is not None:
            pulumi.set(__self__, "stitching", stitching)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def stitching(self) -> Optional[bool]:
        return pulumi.get(self, "stitching")


@pulumi.output_type
class VrfIpv4RouteTargetImport(dict):
    def __init__(__self__, *,
                 value: str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class VrfIpv4RouteTargetImportStitching(dict):
    def __init__(__self__, *,
                 value: str,
                 stitching: Optional[bool] = None):
        pulumi.set(__self__, "value", value)
        if stitching is not None:
            pulumi.set(__self__, "stitching", stitching)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def stitching(self) -> Optional[bool]:
        return pulumi.get(self, "stitching")


@pulumi.output_type
class VrfIpv6RouteTargetExport(dict):
    def __init__(__self__, *,
                 value: str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class VrfIpv6RouteTargetExportStitching(dict):
    def __init__(__self__, *,
                 value: str,
                 stitching: Optional[bool] = None):
        pulumi.set(__self__, "value", value)
        if stitching is not None:
            pulumi.set(__self__, "stitching", stitching)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def stitching(self) -> Optional[bool]:
        return pulumi.get(self, "stitching")


@pulumi.output_type
class VrfIpv6RouteTargetImport(dict):
    def __init__(__self__, *,
                 value: str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class VrfIpv6RouteTargetImportStitching(dict):
    def __init__(__self__, *,
                 value: str,
                 stitching: Optional[bool] = None):
        pulumi.set(__self__, "value", value)
        if stitching is not None:
            pulumi.set(__self__, "stitching", stitching)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def stitching(self) -> Optional[bool]:
        return pulumi.get(self, "stitching")


@pulumi.output_type
class VrfRouteTargetExport(dict):
    def __init__(__self__, *,
                 value: str,
                 stitching: Optional[bool] = None):
        pulumi.set(__self__, "value", value)
        if stitching is not None:
            pulumi.set(__self__, "stitching", stitching)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def stitching(self) -> Optional[bool]:
        return pulumi.get(self, "stitching")


@pulumi.output_type
class VrfRouteTargetImport(dict):
    def __init__(__self__, *,
                 value: str,
                 stitching: Optional[bool] = None):
        pulumi.set(__self__, "value", value)
        if stitching is not None:
            pulumi.set(__self__, "stitching", stitching)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def stitching(self) -> Optional[bool]:
        return pulumi.get(self, "stitching")


@pulumi.output_type
class GetAaaAccountingExecResult(dict):
    def __init__(__self__, *,
                 name: str,
                 start_stop_group1: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "start_stop_group1", start_stop_group1)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="startStopGroup1")
    def start_stop_group1(self) -> str:
        return pulumi.get(self, "start_stop_group1")


@pulumi.output_type
class GetAaaAccountingNetworkResult(dict):
    def __init__(__self__, *,
                 id: str,
                 start_stop_group1: str,
                 start_stop_group2: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "start_stop_group1", start_stop_group1)
        pulumi.set(__self__, "start_stop_group2", start_stop_group2)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="startStopGroup1")
    def start_stop_group1(self) -> str:
        return pulumi.get(self, "start_stop_group1")

    @property
    @pulumi.getter(name="startStopGroup2")
    def start_stop_group2(self) -> str:
        return pulumi.get(self, "start_stop_group2")


@pulumi.output_type
class GetAaaAuthenticationLoginResult(dict):
    def __init__(__self__, *,
                 a1_enable: bool,
                 a1_group: str,
                 a1_line: bool,
                 a1_local: bool,
                 a1_none: bool,
                 a2_enable: bool,
                 a2_group: str,
                 a2_line: bool,
                 a2_local: bool,
                 a2_none: bool,
                 a3_enable: bool,
                 a3_group: str,
                 a3_line: bool,
                 a3_local: bool,
                 a3_none: bool,
                 a4_enable: bool,
                 a4_group: str,
                 a4_line: bool,
                 a4_local: bool,
                 a4_none: bool,
                 name: str):
        pulumi.set(__self__, "a1_enable", a1_enable)
        pulumi.set(__self__, "a1_group", a1_group)
        pulumi.set(__self__, "a1_line", a1_line)
        pulumi.set(__self__, "a1_local", a1_local)
        pulumi.set(__self__, "a1_none", a1_none)
        pulumi.set(__self__, "a2_enable", a2_enable)
        pulumi.set(__self__, "a2_group", a2_group)
        pulumi.set(__self__, "a2_line", a2_line)
        pulumi.set(__self__, "a2_local", a2_local)
        pulumi.set(__self__, "a2_none", a2_none)
        pulumi.set(__self__, "a3_enable", a3_enable)
        pulumi.set(__self__, "a3_group", a3_group)
        pulumi.set(__self__, "a3_line", a3_line)
        pulumi.set(__self__, "a3_local", a3_local)
        pulumi.set(__self__, "a3_none", a3_none)
        pulumi.set(__self__, "a4_enable", a4_enable)
        pulumi.set(__self__, "a4_group", a4_group)
        pulumi.set(__self__, "a4_line", a4_line)
        pulumi.set(__self__, "a4_local", a4_local)
        pulumi.set(__self__, "a4_none", a4_none)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="a1Enable")
    def a1_enable(self) -> bool:
        return pulumi.get(self, "a1_enable")

    @property
    @pulumi.getter(name="a1Group")
    def a1_group(self) -> str:
        return pulumi.get(self, "a1_group")

    @property
    @pulumi.getter(name="a1Line")
    def a1_line(self) -> bool:
        return pulumi.get(self, "a1_line")

    @property
    @pulumi.getter(name="a1Local")
    def a1_local(self) -> bool:
        return pulumi.get(self, "a1_local")

    @property
    @pulumi.getter(name="a1None")
    def a1_none(self) -> bool:
        return pulumi.get(self, "a1_none")

    @property
    @pulumi.getter(name="a2Enable")
    def a2_enable(self) -> bool:
        return pulumi.get(self, "a2_enable")

    @property
    @pulumi.getter(name="a2Group")
    def a2_group(self) -> str:
        return pulumi.get(self, "a2_group")

    @property
    @pulumi.getter(name="a2Line")
    def a2_line(self) -> bool:
        return pulumi.get(self, "a2_line")

    @property
    @pulumi.getter(name="a2Local")
    def a2_local(self) -> bool:
        return pulumi.get(self, "a2_local")

    @property
    @pulumi.getter(name="a2None")
    def a2_none(self) -> bool:
        return pulumi.get(self, "a2_none")

    @property
    @pulumi.getter(name="a3Enable")
    def a3_enable(self) -> bool:
        return pulumi.get(self, "a3_enable")

    @property
    @pulumi.getter(name="a3Group")
    def a3_group(self) -> str:
        return pulumi.get(self, "a3_group")

    @property
    @pulumi.getter(name="a3Line")
    def a3_line(self) -> bool:
        return pulumi.get(self, "a3_line")

    @property
    @pulumi.getter(name="a3Local")
    def a3_local(self) -> bool:
        return pulumi.get(self, "a3_local")

    @property
    @pulumi.getter(name="a3None")
    def a3_none(self) -> bool:
        return pulumi.get(self, "a3_none")

    @property
    @pulumi.getter(name="a4Enable")
    def a4_enable(self) -> bool:
        return pulumi.get(self, "a4_enable")

    @property
    @pulumi.getter(name="a4Group")
    def a4_group(self) -> str:
        return pulumi.get(self, "a4_group")

    @property
    @pulumi.getter(name="a4Line")
    def a4_line(self) -> bool:
        return pulumi.get(self, "a4_line")

    @property
    @pulumi.getter(name="a4Local")
    def a4_local(self) -> bool:
        return pulumi.get(self, "a4_local")

    @property
    @pulumi.getter(name="a4None")
    def a4_none(self) -> bool:
        return pulumi.get(self, "a4_none")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAaaAuthorizationExecResult(dict):
    def __init__(__self__, *,
                 a1_group: str,
                 a1_if_authenticated: bool,
                 a1_local: bool,
                 a2_local: bool,
                 name: str):
        pulumi.set(__self__, "a1_group", a1_group)
        pulumi.set(__self__, "a1_if_authenticated", a1_if_authenticated)
        pulumi.set(__self__, "a1_local", a1_local)
        pulumi.set(__self__, "a2_local", a2_local)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="a1Group")
    def a1_group(self) -> str:
        return pulumi.get(self, "a1_group")

    @property
    @pulumi.getter(name="a1IfAuthenticated")
    def a1_if_authenticated(self) -> bool:
        return pulumi.get(self, "a1_if_authenticated")

    @property
    @pulumi.getter(name="a1Local")
    def a1_local(self) -> bool:
        return pulumi.get(self, "a1_local")

    @property
    @pulumi.getter(name="a2Local")
    def a2_local(self) -> bool:
        return pulumi.get(self, "a2_local")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAaaAuthorizationNetworkResult(dict):
    def __init__(__self__, *,
                 a1_group: str,
                 id: str):
        pulumi.set(__self__, "a1_group", a1_group)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="a1Group")
    def a1_group(self) -> str:
        return pulumi.get(self, "a1_group")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetAaaGroupServerRadiusResult(dict):
    def __init__(__self__, *,
                 ip_radius_source_interface_loopback: int,
                 name: str,
                 server_names: Sequence['outputs.GetAaaGroupServerRadiusServerNameResult']):
        pulumi.set(__self__, "ip_radius_source_interface_loopback", ip_radius_source_interface_loopback)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "server_names", server_names)

    @property
    @pulumi.getter(name="ipRadiusSourceInterfaceLoopback")
    def ip_radius_source_interface_loopback(self) -> int:
        return pulumi.get(self, "ip_radius_source_interface_loopback")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serverNames")
    def server_names(self) -> Sequence['outputs.GetAaaGroupServerRadiusServerNameResult']:
        return pulumi.get(self, "server_names")


@pulumi.output_type
class GetAaaGroupServerRadiusServerNameResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAaaGroupServerTacacsplusResult(dict):
    def __init__(__self__, *,
                 name: str,
                 server_names: Sequence['outputs.GetAaaGroupServerTacacsplusServerNameResult']):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "server_names", server_names)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serverNames")
    def server_names(self) -> Sequence['outputs.GetAaaGroupServerTacacsplusServerNameResult']:
        return pulumi.get(self, "server_names")


@pulumi.output_type
class GetAaaGroupServerTacacsplusServerNameResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAaaServerRadiusDynamicAuthorClientResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 server_key: str,
                 server_key_type: str):
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "server_key", server_key)
        pulumi.set(__self__, "server_key_type", server_key_type)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="serverKey")
    def server_key(self) -> str:
        return pulumi.get(self, "server_key")

    @property
    @pulumi.getter(name="serverKeyType")
    def server_key_type(self) -> str:
        return pulumi.get(self, "server_key_type")


@pulumi.output_type
class GetAccessListExtendedEntryResult(dict):
    def __init__(__self__, *,
                 ace_rule_action: str,
                 ace_rule_protocol: str,
                 ack: bool,
                 destination_any: bool,
                 destination_host: str,
                 destination_object_group: str,
                 destination_port_equal: str,
                 destination_port_greater_than: str,
                 destination_port_lesser_than: str,
                 destination_port_range_from: str,
                 destination_port_range_to: str,
                 destination_prefix: str,
                 destination_prefix_mask: str,
                 dscp: str,
                 established: bool,
                 fin: bool,
                 fragments: bool,
                 log: bool,
                 log_input: bool,
                 precedence: str,
                 psh: bool,
                 remark: str,
                 rst: bool,
                 sequence: int,
                 service_object_group: str,
                 source_any: bool,
                 source_host: str,
                 source_object_group: str,
                 source_port_equal: str,
                 source_port_greater_than: str,
                 source_port_lesser_than: str,
                 source_port_range_from: str,
                 source_port_range_to: str,
                 source_prefix: str,
                 source_prefix_mask: str,
                 syn: bool,
                 tos: str,
                 urg: bool):
        pulumi.set(__self__, "ace_rule_action", ace_rule_action)
        pulumi.set(__self__, "ace_rule_protocol", ace_rule_protocol)
        pulumi.set(__self__, "ack", ack)
        pulumi.set(__self__, "destination_any", destination_any)
        pulumi.set(__self__, "destination_host", destination_host)
        pulumi.set(__self__, "destination_object_group", destination_object_group)
        pulumi.set(__self__, "destination_port_equal", destination_port_equal)
        pulumi.set(__self__, "destination_port_greater_than", destination_port_greater_than)
        pulumi.set(__self__, "destination_port_lesser_than", destination_port_lesser_than)
        pulumi.set(__self__, "destination_port_range_from", destination_port_range_from)
        pulumi.set(__self__, "destination_port_range_to", destination_port_range_to)
        pulumi.set(__self__, "destination_prefix", destination_prefix)
        pulumi.set(__self__, "destination_prefix_mask", destination_prefix_mask)
        pulumi.set(__self__, "dscp", dscp)
        pulumi.set(__self__, "established", established)
        pulumi.set(__self__, "fin", fin)
        pulumi.set(__self__, "fragments", fragments)
        pulumi.set(__self__, "log", log)
        pulumi.set(__self__, "log_input", log_input)
        pulumi.set(__self__, "precedence", precedence)
        pulumi.set(__self__, "psh", psh)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "rst", rst)
        pulumi.set(__self__, "sequence", sequence)
        pulumi.set(__self__, "service_object_group", service_object_group)
        pulumi.set(__self__, "source_any", source_any)
        pulumi.set(__self__, "source_host", source_host)
        pulumi.set(__self__, "source_object_group", source_object_group)
        pulumi.set(__self__, "source_port_equal", source_port_equal)
        pulumi.set(__self__, "source_port_greater_than", source_port_greater_than)
        pulumi.set(__self__, "source_port_lesser_than", source_port_lesser_than)
        pulumi.set(__self__, "source_port_range_from", source_port_range_from)
        pulumi.set(__self__, "source_port_range_to", source_port_range_to)
        pulumi.set(__self__, "source_prefix", source_prefix)
        pulumi.set(__self__, "source_prefix_mask", source_prefix_mask)
        pulumi.set(__self__, "syn", syn)
        pulumi.set(__self__, "tos", tos)
        pulumi.set(__self__, "urg", urg)

    @property
    @pulumi.getter(name="aceRuleAction")
    def ace_rule_action(self) -> str:
        return pulumi.get(self, "ace_rule_action")

    @property
    @pulumi.getter(name="aceRuleProtocol")
    def ace_rule_protocol(self) -> str:
        return pulumi.get(self, "ace_rule_protocol")

    @property
    @pulumi.getter
    def ack(self) -> bool:
        return pulumi.get(self, "ack")

    @property
    @pulumi.getter(name="destinationAny")
    def destination_any(self) -> bool:
        return pulumi.get(self, "destination_any")

    @property
    @pulumi.getter(name="destinationHost")
    def destination_host(self) -> str:
        return pulumi.get(self, "destination_host")

    @property
    @pulumi.getter(name="destinationObjectGroup")
    def destination_object_group(self) -> str:
        return pulumi.get(self, "destination_object_group")

    @property
    @pulumi.getter(name="destinationPortEqual")
    def destination_port_equal(self) -> str:
        return pulumi.get(self, "destination_port_equal")

    @property
    @pulumi.getter(name="destinationPortGreaterThan")
    def destination_port_greater_than(self) -> str:
        return pulumi.get(self, "destination_port_greater_than")

    @property
    @pulumi.getter(name="destinationPortLesserThan")
    def destination_port_lesser_than(self) -> str:
        return pulumi.get(self, "destination_port_lesser_than")

    @property
    @pulumi.getter(name="destinationPortRangeFrom")
    def destination_port_range_from(self) -> str:
        return pulumi.get(self, "destination_port_range_from")

    @property
    @pulumi.getter(name="destinationPortRangeTo")
    def destination_port_range_to(self) -> str:
        return pulumi.get(self, "destination_port_range_to")

    @property
    @pulumi.getter(name="destinationPrefix")
    def destination_prefix(self) -> str:
        return pulumi.get(self, "destination_prefix")

    @property
    @pulumi.getter(name="destinationPrefixMask")
    def destination_prefix_mask(self) -> str:
        return pulumi.get(self, "destination_prefix_mask")

    @property
    @pulumi.getter
    def dscp(self) -> str:
        return pulumi.get(self, "dscp")

    @property
    @pulumi.getter
    def established(self) -> bool:
        return pulumi.get(self, "established")

    @property
    @pulumi.getter
    def fin(self) -> bool:
        return pulumi.get(self, "fin")

    @property
    @pulumi.getter
    def fragments(self) -> bool:
        return pulumi.get(self, "fragments")

    @property
    @pulumi.getter
    def log(self) -> bool:
        return pulumi.get(self, "log")

    @property
    @pulumi.getter(name="logInput")
    def log_input(self) -> bool:
        return pulumi.get(self, "log_input")

    @property
    @pulumi.getter
    def precedence(self) -> str:
        return pulumi.get(self, "precedence")

    @property
    @pulumi.getter
    def psh(self) -> bool:
        return pulumi.get(self, "psh")

    @property
    @pulumi.getter
    def remark(self) -> str:
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def rst(self) -> bool:
        return pulumi.get(self, "rst")

    @property
    @pulumi.getter
    def sequence(self) -> int:
        return pulumi.get(self, "sequence")

    @property
    @pulumi.getter(name="serviceObjectGroup")
    def service_object_group(self) -> str:
        return pulumi.get(self, "service_object_group")

    @property
    @pulumi.getter(name="sourceAny")
    def source_any(self) -> bool:
        return pulumi.get(self, "source_any")

    @property
    @pulumi.getter(name="sourceHost")
    def source_host(self) -> str:
        return pulumi.get(self, "source_host")

    @property
    @pulumi.getter(name="sourceObjectGroup")
    def source_object_group(self) -> str:
        return pulumi.get(self, "source_object_group")

    @property
    @pulumi.getter(name="sourcePortEqual")
    def source_port_equal(self) -> str:
        return pulumi.get(self, "source_port_equal")

    @property
    @pulumi.getter(name="sourcePortGreaterThan")
    def source_port_greater_than(self) -> str:
        return pulumi.get(self, "source_port_greater_than")

    @property
    @pulumi.getter(name="sourcePortLesserThan")
    def source_port_lesser_than(self) -> str:
        return pulumi.get(self, "source_port_lesser_than")

    @property
    @pulumi.getter(name="sourcePortRangeFrom")
    def source_port_range_from(self) -> str:
        return pulumi.get(self, "source_port_range_from")

    @property
    @pulumi.getter(name="sourcePortRangeTo")
    def source_port_range_to(self) -> str:
        return pulumi.get(self, "source_port_range_to")

    @property
    @pulumi.getter(name="sourcePrefix")
    def source_prefix(self) -> str:
        return pulumi.get(self, "source_prefix")

    @property
    @pulumi.getter(name="sourcePrefixMask")
    def source_prefix_mask(self) -> str:
        return pulumi.get(self, "source_prefix_mask")

    @property
    @pulumi.getter
    def syn(self) -> bool:
        return pulumi.get(self, "syn")

    @property
    @pulumi.getter
    def tos(self) -> str:
        return pulumi.get(self, "tos")

    @property
    @pulumi.getter
    def urg(self) -> bool:
        return pulumi.get(self, "urg")


@pulumi.output_type
class GetAccessListStandardEntryResult(dict):
    def __init__(__self__, *,
                 deny_any: bool,
                 deny_host: str,
                 deny_log: bool,
                 deny_prefix: str,
                 deny_prefix_mask: str,
                 permit_any: bool,
                 permit_host: str,
                 permit_log: bool,
                 permit_prefix: str,
                 permit_prefix_mask: str,
                 remark: str,
                 sequence: int):
        pulumi.set(__self__, "deny_any", deny_any)
        pulumi.set(__self__, "deny_host", deny_host)
        pulumi.set(__self__, "deny_log", deny_log)
        pulumi.set(__self__, "deny_prefix", deny_prefix)
        pulumi.set(__self__, "deny_prefix_mask", deny_prefix_mask)
        pulumi.set(__self__, "permit_any", permit_any)
        pulumi.set(__self__, "permit_host", permit_host)
        pulumi.set(__self__, "permit_log", permit_log)
        pulumi.set(__self__, "permit_prefix", permit_prefix)
        pulumi.set(__self__, "permit_prefix_mask", permit_prefix_mask)
        pulumi.set(__self__, "remark", remark)
        pulumi.set(__self__, "sequence", sequence)

    @property
    @pulumi.getter(name="denyAny")
    def deny_any(self) -> bool:
        return pulumi.get(self, "deny_any")

    @property
    @pulumi.getter(name="denyHost")
    def deny_host(self) -> str:
        return pulumi.get(self, "deny_host")

    @property
    @pulumi.getter(name="denyLog")
    def deny_log(self) -> bool:
        return pulumi.get(self, "deny_log")

    @property
    @pulumi.getter(name="denyPrefix")
    def deny_prefix(self) -> str:
        return pulumi.get(self, "deny_prefix")

    @property
    @pulumi.getter(name="denyPrefixMask")
    def deny_prefix_mask(self) -> str:
        return pulumi.get(self, "deny_prefix_mask")

    @property
    @pulumi.getter(name="permitAny")
    def permit_any(self) -> bool:
        return pulumi.get(self, "permit_any")

    @property
    @pulumi.getter(name="permitHost")
    def permit_host(self) -> str:
        return pulumi.get(self, "permit_host")

    @property
    @pulumi.getter(name="permitLog")
    def permit_log(self) -> bool:
        return pulumi.get(self, "permit_log")

    @property
    @pulumi.getter(name="permitPrefix")
    def permit_prefix(self) -> str:
        return pulumi.get(self, "permit_prefix")

    @property
    @pulumi.getter(name="permitPrefixMask")
    def permit_prefix_mask(self) -> str:
        return pulumi.get(self, "permit_prefix_mask")

    @property
    @pulumi.getter
    def remark(self) -> str:
        return pulumi.get(self, "remark")

    @property
    @pulumi.getter
    def sequence(self) -> int:
        return pulumi.get(self, "sequence")


@pulumi.output_type
class GetArpInspectionFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 vlans: Sequence['outputs.GetArpInspectionFilterVlanResult']):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "vlans", vlans)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def vlans(self) -> Sequence['outputs.GetArpInspectionFilterVlanResult']:
        return pulumi.get(self, "vlans")


@pulumi.output_type
class GetArpInspectionFilterVlanResult(dict):
    def __init__(__self__, *,
                 static: bool,
                 vlan_range: str):
        pulumi.set(__self__, "static", static)
        pulumi.set(__self__, "vlan_range", vlan_range)

    @property
    @pulumi.getter
    def static(self) -> bool:
        return pulumi.get(self, "static")

    @property
    @pulumi.getter(name="vlanRange")
    def vlan_range(self) -> str:
        return pulumi.get(self, "vlan_range")


@pulumi.output_type
class GetBfdIpv4BothVrfResult(dict):
    def __init__(__self__, *,
                 dest_ip: str,
                 dst_vrf: str,
                 src_ip: str,
                 src_vrf: str,
                 template_name: str):
        pulumi.set(__self__, "dest_ip", dest_ip)
        pulumi.set(__self__, "dst_vrf", dst_vrf)
        pulumi.set(__self__, "src_ip", src_ip)
        pulumi.set(__self__, "src_vrf", src_vrf)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="destIp")
    def dest_ip(self) -> str:
        return pulumi.get(self, "dest_ip")

    @property
    @pulumi.getter(name="dstVrf")
    def dst_vrf(self) -> str:
        return pulumi.get(self, "dst_vrf")

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> str:
        return pulumi.get(self, "src_ip")

    @property
    @pulumi.getter(name="srcVrf")
    def src_vrf(self) -> str:
        return pulumi.get(self, "src_vrf")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> str:
        return pulumi.get(self, "template_name")


@pulumi.output_type
class GetBfdIpv4WithDstVrfResult(dict):
    def __init__(__self__, *,
                 dest_ip: str,
                 dst_vrf: str,
                 src_ip: str,
                 template_name: str):
        pulumi.set(__self__, "dest_ip", dest_ip)
        pulumi.set(__self__, "dst_vrf", dst_vrf)
        pulumi.set(__self__, "src_ip", src_ip)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="destIp")
    def dest_ip(self) -> str:
        return pulumi.get(self, "dest_ip")

    @property
    @pulumi.getter(name="dstVrf")
    def dst_vrf(self) -> str:
        return pulumi.get(self, "dst_vrf")

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> str:
        return pulumi.get(self, "src_ip")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> str:
        return pulumi.get(self, "template_name")


@pulumi.output_type
class GetBfdIpv4WithSrcVrfResult(dict):
    def __init__(__self__, *,
                 dest_ip: str,
                 src_ip: str,
                 src_vrf: str,
                 template_name: str):
        pulumi.set(__self__, "dest_ip", dest_ip)
        pulumi.set(__self__, "src_ip", src_ip)
        pulumi.set(__self__, "src_vrf", src_vrf)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="destIp")
    def dest_ip(self) -> str:
        return pulumi.get(self, "dest_ip")

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> str:
        return pulumi.get(self, "src_ip")

    @property
    @pulumi.getter(name="srcVrf")
    def src_vrf(self) -> str:
        return pulumi.get(self, "src_vrf")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> str:
        return pulumi.get(self, "template_name")


@pulumi.output_type
class GetBfdIpv4WithoutVrfResult(dict):
    def __init__(__self__, *,
                 dest_ip: str,
                 src_ip: str,
                 template_name: str):
        pulumi.set(__self__, "dest_ip", dest_ip)
        pulumi.set(__self__, "src_ip", src_ip)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="destIp")
    def dest_ip(self) -> str:
        return pulumi.get(self, "dest_ip")

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> str:
        return pulumi.get(self, "src_ip")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> str:
        return pulumi.get(self, "template_name")


@pulumi.output_type
class GetBfdIpv6WithBothVrfResult(dict):
    def __init__(__self__, *,
                 dest_ipv6: str,
                 dst_vrf: str,
                 src_ipv6: str,
                 src_vrf: str,
                 template_name: str):
        pulumi.set(__self__, "dest_ipv6", dest_ipv6)
        pulumi.set(__self__, "dst_vrf", dst_vrf)
        pulumi.set(__self__, "src_ipv6", src_ipv6)
        pulumi.set(__self__, "src_vrf", src_vrf)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="destIpv6")
    def dest_ipv6(self) -> str:
        return pulumi.get(self, "dest_ipv6")

    @property
    @pulumi.getter(name="dstVrf")
    def dst_vrf(self) -> str:
        return pulumi.get(self, "dst_vrf")

    @property
    @pulumi.getter(name="srcIpv6")
    def src_ipv6(self) -> str:
        return pulumi.get(self, "src_ipv6")

    @property
    @pulumi.getter(name="srcVrf")
    def src_vrf(self) -> str:
        return pulumi.get(self, "src_vrf")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> str:
        return pulumi.get(self, "template_name")


@pulumi.output_type
class GetBfdIpv6WithDstVrfResult(dict):
    def __init__(__self__, *,
                 dest_ipv6: str,
                 dst_vrf: str,
                 src_ipv6: str,
                 template_name: str):
        pulumi.set(__self__, "dest_ipv6", dest_ipv6)
        pulumi.set(__self__, "dst_vrf", dst_vrf)
        pulumi.set(__self__, "src_ipv6", src_ipv6)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="destIpv6")
    def dest_ipv6(self) -> str:
        return pulumi.get(self, "dest_ipv6")

    @property
    @pulumi.getter(name="dstVrf")
    def dst_vrf(self) -> str:
        return pulumi.get(self, "dst_vrf")

    @property
    @pulumi.getter(name="srcIpv6")
    def src_ipv6(self) -> str:
        return pulumi.get(self, "src_ipv6")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> str:
        return pulumi.get(self, "template_name")


@pulumi.output_type
class GetBfdIpv6WithSrcVrfResult(dict):
    def __init__(__self__, *,
                 dest_ipv6: str,
                 src_ipv6: str,
                 src_vrf: str,
                 template_name: str):
        pulumi.set(__self__, "dest_ipv6", dest_ipv6)
        pulumi.set(__self__, "src_ipv6", src_ipv6)
        pulumi.set(__self__, "src_vrf", src_vrf)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="destIpv6")
    def dest_ipv6(self) -> str:
        return pulumi.get(self, "dest_ipv6")

    @property
    @pulumi.getter(name="srcIpv6")
    def src_ipv6(self) -> str:
        return pulumi.get(self, "src_ipv6")

    @property
    @pulumi.getter(name="srcVrf")
    def src_vrf(self) -> str:
        return pulumi.get(self, "src_vrf")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> str:
        return pulumi.get(self, "template_name")


@pulumi.output_type
class GetBfdIpv6WithoutVrfResult(dict):
    def __init__(__self__, *,
                 dest_ipv6: str,
                 src_ipv6: str,
                 template_name: str):
        pulumi.set(__self__, "dest_ipv6", dest_ipv6)
        pulumi.set(__self__, "src_ipv6", src_ipv6)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="destIpv6")
    def dest_ipv6(self) -> str:
        return pulumi.get(self, "dest_ipv6")

    @property
    @pulumi.getter(name="srcIpv6")
    def src_ipv6(self) -> str:
        return pulumi.get(self, "src_ipv6")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> str:
        return pulumi.get(self, "template_name")


@pulumi.output_type
class GetBgpAddressFamilyIpv4Ipv4UnicastNetworkResult(dict):
    def __init__(__self__, *,
                 backdoor: bool,
                 network: str,
                 route_map: str):
        pulumi.set(__self__, "backdoor", backdoor)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def backdoor(self) -> bool:
        return pulumi.get(self, "backdoor")

    @property
    @pulumi.getter
    def network(self) -> str:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> str:
        return pulumi.get(self, "route_map")


@pulumi.output_type
class GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskResult(dict):
    def __init__(__self__, *,
                 backdoor: bool,
                 mask: str,
                 network: str,
                 route_map: str):
        pulumi.set(__self__, "backdoor", backdoor)
        pulumi.set(__self__, "mask", mask)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def backdoor(self) -> bool:
        return pulumi.get(self, "backdoor")

    @property
    @pulumi.getter
    def mask(self) -> str:
        return pulumi.get(self, "mask")

    @property
    @pulumi.getter
    def network(self) -> str:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> str:
        return pulumi.get(self, "route_map")


@pulumi.output_type
class GetBgpAddressFamilyIpv4VrfVrfResult(dict):
    def __init__(__self__, *,
                 ipv4_unicast_advertise_l2vpn_evpn: bool,
                 ipv4_unicast_networks: Sequence['outputs.GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkResult'],
                 ipv4_unicast_networks_masks: Sequence['outputs.GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskResult'],
                 ipv4_unicast_redistribute_connected: bool,
                 ipv4_unicast_redistribute_static: bool,
                 name: str):
        pulumi.set(__self__, "ipv4_unicast_advertise_l2vpn_evpn", ipv4_unicast_advertise_l2vpn_evpn)
        pulumi.set(__self__, "ipv4_unicast_networks", ipv4_unicast_networks)
        pulumi.set(__self__, "ipv4_unicast_networks_masks", ipv4_unicast_networks_masks)
        pulumi.set(__self__, "ipv4_unicast_redistribute_connected", ipv4_unicast_redistribute_connected)
        pulumi.set(__self__, "ipv4_unicast_redistribute_static", ipv4_unicast_redistribute_static)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="ipv4UnicastAdvertiseL2vpnEvpn")
    def ipv4_unicast_advertise_l2vpn_evpn(self) -> bool:
        return pulumi.get(self, "ipv4_unicast_advertise_l2vpn_evpn")

    @property
    @pulumi.getter(name="ipv4UnicastNetworks")
    def ipv4_unicast_networks(self) -> Sequence['outputs.GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkResult']:
        return pulumi.get(self, "ipv4_unicast_networks")

    @property
    @pulumi.getter(name="ipv4UnicastNetworksMasks")
    def ipv4_unicast_networks_masks(self) -> Sequence['outputs.GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskResult']:
        return pulumi.get(self, "ipv4_unicast_networks_masks")

    @property
    @pulumi.getter(name="ipv4UnicastRedistributeConnected")
    def ipv4_unicast_redistribute_connected(self) -> bool:
        return pulumi.get(self, "ipv4_unicast_redistribute_connected")

    @property
    @pulumi.getter(name="ipv4UnicastRedistributeStatic")
    def ipv4_unicast_redistribute_static(self) -> bool:
        return pulumi.get(self, "ipv4_unicast_redistribute_static")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkResult(dict):
    def __init__(__self__, *,
                 backdoor: bool,
                 evpn: bool,
                 network: str,
                 route_map: str):
        pulumi.set(__self__, "backdoor", backdoor)
        pulumi.set(__self__, "evpn", evpn)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def backdoor(self) -> bool:
        return pulumi.get(self, "backdoor")

    @property
    @pulumi.getter
    def evpn(self) -> bool:
        return pulumi.get(self, "evpn")

    @property
    @pulumi.getter
    def network(self) -> str:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> str:
        return pulumi.get(self, "route_map")


@pulumi.output_type
class GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskResult(dict):
    def __init__(__self__, *,
                 backdoor: bool,
                 evpn: bool,
                 mask: str,
                 network: str,
                 route_map: str):
        pulumi.set(__self__, "backdoor", backdoor)
        pulumi.set(__self__, "evpn", evpn)
        pulumi.set(__self__, "mask", mask)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def backdoor(self) -> bool:
        return pulumi.get(self, "backdoor")

    @property
    @pulumi.getter
    def evpn(self) -> bool:
        return pulumi.get(self, "evpn")

    @property
    @pulumi.getter
    def mask(self) -> str:
        return pulumi.get(self, "mask")

    @property
    @pulumi.getter
    def network(self) -> str:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> str:
        return pulumi.get(self, "route_map")


@pulumi.output_type
class GetBgpAddressFamilyIpv6Ipv6UnicastNetworkResult(dict):
    def __init__(__self__, *,
                 backdoor: bool,
                 network: str,
                 route_map: str):
        pulumi.set(__self__, "backdoor", backdoor)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def backdoor(self) -> bool:
        return pulumi.get(self, "backdoor")

    @property
    @pulumi.getter
    def network(self) -> str:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> str:
        return pulumi.get(self, "route_map")


@pulumi.output_type
class GetBgpAddressFamilyIpv6VrfVrfResult(dict):
    def __init__(__self__, *,
                 ipv6_unicast_advertise_l2vpn_evpn: bool,
                 ipv6_unicast_networks: Sequence['outputs.GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkResult'],
                 ipv6_unicast_redistribute_connected: bool,
                 ipv6_unicast_redistribute_static: bool,
                 name: str):
        pulumi.set(__self__, "ipv6_unicast_advertise_l2vpn_evpn", ipv6_unicast_advertise_l2vpn_evpn)
        pulumi.set(__self__, "ipv6_unicast_networks", ipv6_unicast_networks)
        pulumi.set(__self__, "ipv6_unicast_redistribute_connected", ipv6_unicast_redistribute_connected)
        pulumi.set(__self__, "ipv6_unicast_redistribute_static", ipv6_unicast_redistribute_static)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="ipv6UnicastAdvertiseL2vpnEvpn")
    def ipv6_unicast_advertise_l2vpn_evpn(self) -> bool:
        return pulumi.get(self, "ipv6_unicast_advertise_l2vpn_evpn")

    @property
    @pulumi.getter(name="ipv6UnicastNetworks")
    def ipv6_unicast_networks(self) -> Sequence['outputs.GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkResult']:
        return pulumi.get(self, "ipv6_unicast_networks")

    @property
    @pulumi.getter(name="ipv6UnicastRedistributeConnected")
    def ipv6_unicast_redistribute_connected(self) -> bool:
        return pulumi.get(self, "ipv6_unicast_redistribute_connected")

    @property
    @pulumi.getter(name="ipv6UnicastRedistributeStatic")
    def ipv6_unicast_redistribute_static(self) -> bool:
        return pulumi.get(self, "ipv6_unicast_redistribute_static")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkResult(dict):
    def __init__(__self__, *,
                 backdoor: bool,
                 evpn: bool,
                 network: str,
                 route_map: str):
        pulumi.set(__self__, "backdoor", backdoor)
        pulumi.set(__self__, "evpn", evpn)
        pulumi.set(__self__, "network", network)
        pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def backdoor(self) -> bool:
        return pulumi.get(self, "backdoor")

    @property
    @pulumi.getter
    def evpn(self) -> bool:
        return pulumi.get(self, "evpn")

    @property
    @pulumi.getter
    def network(self) -> str:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> str:
        return pulumi.get(self, "route_map")


@pulumi.output_type
class GetBgpIpv4UnicastNeighborRouteMapResult(dict):
    def __init__(__self__, *,
                 in_out: str,
                 route_map_name: str):
        pulumi.set(__self__, "in_out", in_out)
        pulumi.set(__self__, "route_map_name", route_map_name)

    @property
    @pulumi.getter(name="inOut")
    def in_out(self) -> str:
        return pulumi.get(self, "in_out")

    @property
    @pulumi.getter(name="routeMapName")
    def route_map_name(self) -> str:
        return pulumi.get(self, "route_map_name")


@pulumi.output_type
class GetBgpIpv4UnicastVrfNeighborRouteMapResult(dict):
    def __init__(__self__, *,
                 in_out: str,
                 route_map_name: str):
        pulumi.set(__self__, "in_out", in_out)
        pulumi.set(__self__, "route_map_name", route_map_name)

    @property
    @pulumi.getter(name="inOut")
    def in_out(self) -> str:
        return pulumi.get(self, "in_out")

    @property
    @pulumi.getter(name="routeMapName")
    def route_map_name(self) -> str:
        return pulumi.get(self, "route_map_name")


@pulumi.output_type
class GetBgpIpv6UnicastNeighborRouteMapResult(dict):
    def __init__(__self__, *,
                 in_out: str,
                 route_map_name: str):
        pulumi.set(__self__, "in_out", in_out)
        pulumi.set(__self__, "route_map_name", route_map_name)

    @property
    @pulumi.getter(name="inOut")
    def in_out(self) -> str:
        return pulumi.get(self, "in_out")

    @property
    @pulumi.getter(name="routeMapName")
    def route_map_name(self) -> str:
        return pulumi.get(self, "route_map_name")


@pulumi.output_type
class GetCdpTlvListResult(dict):
    def __init__(__self__, *,
                 cos: bool,
                 duplex: bool,
                 name: str,
                 trust: bool,
                 version: bool,
                 vtp_mgmt_domain: bool):
        pulumi.set(__self__, "cos", cos)
        pulumi.set(__self__, "duplex", duplex)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "trust", trust)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "vtp_mgmt_domain", vtp_mgmt_domain)

    @property
    @pulumi.getter
    def cos(self) -> bool:
        return pulumi.get(self, "cos")

    @property
    @pulumi.getter
    def duplex(self) -> bool:
        return pulumi.get(self, "duplex")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def trust(self) -> bool:
        return pulumi.get(self, "trust")

    @property
    @pulumi.getter
    def version(self) -> bool:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="vtpMgmtDomain")
    def vtp_mgmt_domain(self) -> bool:
        return pulumi.get(self, "vtp_mgmt_domain")


@pulumi.output_type
class GetClassMapMatchActivatedServiceTemplateResult(dict):
    def __init__(__self__, *,
                 service_name: str):
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetCryptoIkev2KeyringPeerResult(dict):
    def __init__(__self__, *,
                 description: str,
                 hostname: str,
                 identity_address: str,
                 identity_email_domain: str,
                 identity_email_name: str,
                 identity_fqdn_domain: str,
                 identity_fqdn_name: str,
                 identity_key_id: str,
                 ipv4_address: str,
                 ipv4_mask: str,
                 ipv6_prefix: str,
                 name: str,
                 pre_shared_key: str,
                 pre_shared_key_encryption: str,
                 pre_shared_key_local: str,
                 pre_shared_key_local_encryption: str,
                 pre_shared_key_remote: str,
                 pre_shared_key_remote_encryption: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "identity_address", identity_address)
        pulumi.set(__self__, "identity_email_domain", identity_email_domain)
        pulumi.set(__self__, "identity_email_name", identity_email_name)
        pulumi.set(__self__, "identity_fqdn_domain", identity_fqdn_domain)
        pulumi.set(__self__, "identity_fqdn_name", identity_fqdn_name)
        pulumi.set(__self__, "identity_key_id", identity_key_id)
        pulumi.set(__self__, "ipv4_address", ipv4_address)
        pulumi.set(__self__, "ipv4_mask", ipv4_mask)
        pulumi.set(__self__, "ipv6_prefix", ipv6_prefix)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "pre_shared_key", pre_shared_key)
        pulumi.set(__self__, "pre_shared_key_encryption", pre_shared_key_encryption)
        pulumi.set(__self__, "pre_shared_key_local", pre_shared_key_local)
        pulumi.set(__self__, "pre_shared_key_local_encryption", pre_shared_key_local_encryption)
        pulumi.set(__self__, "pre_shared_key_remote", pre_shared_key_remote)
        pulumi.set(__self__, "pre_shared_key_remote_encryption", pre_shared_key_remote_encryption)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter(name="identityAddress")
    def identity_address(self) -> str:
        return pulumi.get(self, "identity_address")

    @property
    @pulumi.getter(name="identityEmailDomain")
    def identity_email_domain(self) -> str:
        return pulumi.get(self, "identity_email_domain")

    @property
    @pulumi.getter(name="identityEmailName")
    def identity_email_name(self) -> str:
        return pulumi.get(self, "identity_email_name")

    @property
    @pulumi.getter(name="identityFqdnDomain")
    def identity_fqdn_domain(self) -> str:
        return pulumi.get(self, "identity_fqdn_domain")

    @property
    @pulumi.getter(name="identityFqdnName")
    def identity_fqdn_name(self) -> str:
        return pulumi.get(self, "identity_fqdn_name")

    @property
    @pulumi.getter(name="identityKeyId")
    def identity_key_id(self) -> str:
        return pulumi.get(self, "identity_key_id")

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> str:
        return pulumi.get(self, "ipv4_address")

    @property
    @pulumi.getter(name="ipv4Mask")
    def ipv4_mask(self) -> str:
        return pulumi.get(self, "ipv4_mask")

    @property
    @pulumi.getter(name="ipv6Prefix")
    def ipv6_prefix(self) -> str:
        return pulumi.get(self, "ipv6_prefix")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="preSharedKey")
    def pre_shared_key(self) -> str:
        return pulumi.get(self, "pre_shared_key")

    @property
    @pulumi.getter(name="preSharedKeyEncryption")
    def pre_shared_key_encryption(self) -> str:
        return pulumi.get(self, "pre_shared_key_encryption")

    @property
    @pulumi.getter(name="preSharedKeyLocal")
    def pre_shared_key_local(self) -> str:
        return pulumi.get(self, "pre_shared_key_local")

    @property
    @pulumi.getter(name="preSharedKeyLocalEncryption")
    def pre_shared_key_local_encryption(self) -> str:
        return pulumi.get(self, "pre_shared_key_local_encryption")

    @property
    @pulumi.getter(name="preSharedKeyRemote")
    def pre_shared_key_remote(self) -> str:
        return pulumi.get(self, "pre_shared_key_remote")

    @property
    @pulumi.getter(name="preSharedKeyRemoteEncryption")
    def pre_shared_key_remote_encryption(self) -> str:
        return pulumi.get(self, "pre_shared_key_remote_encryption")


@pulumi.output_type
class GetCryptoIkev2PolicyProposalResult(dict):
    def __init__(__self__, *,
                 proposals: str):
        pulumi.set(__self__, "proposals", proposals)

    @property
    @pulumi.getter
    def proposals(self) -> str:
        return pulumi.get(self, "proposals")


@pulumi.output_type
class GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressResult(dict):
    def __init__(__self__, *,
                 address: str,
                 mask: str):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def mask(self) -> str:
        return pulumi.get(self, "mask")


@pulumi.output_type
class GetDhcpSnoopingVlanResult(dict):
    def __init__(__self__, *,
                 vlan_id: str):
        pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> str:
        return pulumi.get(self, "vlan_id")


@pulumi.output_type
class GetDot1xCredentialResult(dict):
    def __init__(__self__, *,
                 anonymous_id: str,
                 description: str,
                 password: str,
                 password_type: str,
                 pki_trustpoint: str,
                 profile_name: str,
                 username: str):
        pulumi.set(__self__, "anonymous_id", anonymous_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "password_type", password_type)
        pulumi.set(__self__, "pki_trustpoint", pki_trustpoint)
        pulumi.set(__self__, "profile_name", profile_name)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="anonymousId")
    def anonymous_id(self) -> str:
        return pulumi.get(self, "anonymous_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="passwordType")
    def password_type(self) -> str:
        return pulumi.get(self, "password_type")

    @property
    @pulumi.getter(name="pkiTrustpoint")
    def pki_trustpoint(self) -> str:
        return pulumi.get(self, "pki_trustpoint")

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> str:
        return pulumi.get(self, "profile_name")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetInterfaceEthernetHelperAddressResult(dict):
    def __init__(__self__, *,
                 address: str,
                 global_: bool,
                 vrf: str):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "global_", global_)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="global")
    def global_(self) -> bool:
        return pulumi.get(self, "global_")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class GetInterfaceEthernetIpv6AddressResult(dict):
    def __init__(__self__, *,
                 eui64: bool,
                 prefix: str):
        pulumi.set(__self__, "eui64", eui64)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def eui64(self) -> bool:
        return pulumi.get(self, "eui64")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetInterfaceEthernetIpv6LinkLocalAddressResult(dict):
    def __init__(__self__, *,
                 address: str,
                 link_local: bool):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "link_local", link_local)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="linkLocal")
    def link_local(self) -> bool:
        return pulumi.get(self, "link_local")


@pulumi.output_type
class GetInterfaceEthernetSourceTemplateResult(dict):
    def __init__(__self__, *,
                 merge: bool,
                 template_name: str):
        pulumi.set(__self__, "merge", merge)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter
    def merge(self) -> bool:
        return pulumi.get(self, "merge")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> str:
        return pulumi.get(self, "template_name")


@pulumi.output_type
class GetInterfaceLoopbackIpv6AddressResult(dict):
    def __init__(__self__, *,
                 eui64: bool,
                 prefix: str):
        pulumi.set(__self__, "eui64", eui64)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def eui64(self) -> bool:
        return pulumi.get(self, "eui64")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetInterfaceLoopbackIpv6LinkLocalAddressResult(dict):
    def __init__(__self__, *,
                 address: str,
                 link_local: bool):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "link_local", link_local)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="linkLocal")
    def link_local(self) -> bool:
        return pulumi.get(self, "link_local")


@pulumi.output_type
class GetInterfaceNveVniResult(dict):
    def __init__(__self__, *,
                 ingress_replication: bool,
                 ipv4_multicast_group: str,
                 vni_range: str):
        pulumi.set(__self__, "ingress_replication", ingress_replication)
        pulumi.set(__self__, "ipv4_multicast_group", ipv4_multicast_group)
        pulumi.set(__self__, "vni_range", vni_range)

    @property
    @pulumi.getter(name="ingressReplication")
    def ingress_replication(self) -> bool:
        return pulumi.get(self, "ingress_replication")

    @property
    @pulumi.getter(name="ipv4MulticastGroup")
    def ipv4_multicast_group(self) -> str:
        return pulumi.get(self, "ipv4_multicast_group")

    @property
    @pulumi.getter(name="vniRange")
    def vni_range(self) -> str:
        return pulumi.get(self, "vni_range")


@pulumi.output_type
class GetInterfaceNveVniVrfResult(dict):
    def __init__(__self__, *,
                 vni_range: str,
                 vrf: str):
        pulumi.set(__self__, "vni_range", vni_range)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="vniRange")
    def vni_range(self) -> str:
        return pulumi.get(self, "vni_range")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class GetInterfaceOspfMessageDigestKeyResult(dict):
    def __init__(__self__, *,
                 id: int,
                 md5_auth_key: str,
                 md5_auth_type: int):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "md5_auth_key", md5_auth_key)
        pulumi.set(__self__, "md5_auth_type", md5_auth_type)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="md5AuthKey")
    def md5_auth_key(self) -> str:
        return pulumi.get(self, "md5_auth_key")

    @property
    @pulumi.getter(name="md5AuthType")
    def md5_auth_type(self) -> int:
        return pulumi.get(self, "md5_auth_type")


@pulumi.output_type
class GetInterfaceOspfProcessIdResult(dict):
    def __init__(__self__, *,
                 areas: Sequence['outputs.GetInterfaceOspfProcessIdAreaResult'],
                 id: int):
        pulumi.set(__self__, "areas", areas)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def areas(self) -> Sequence['outputs.GetInterfaceOspfProcessIdAreaResult']:
        return pulumi.get(self, "areas")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetInterfaceOspfProcessIdAreaResult(dict):
    def __init__(__self__, *,
                 area_id: str):
        pulumi.set(__self__, "area_id", area_id)

    @property
    @pulumi.getter(name="areaId")
    def area_id(self) -> str:
        return pulumi.get(self, "area_id")


@pulumi.output_type
class GetInterfacePortChannelHelperAddressResult(dict):
    def __init__(__self__, *,
                 address: str,
                 global_: bool,
                 vrf: str):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "global_", global_)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="global")
    def global_(self) -> bool:
        return pulumi.get(self, "global_")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class GetInterfacePortChannelIpv6AddressResult(dict):
    def __init__(__self__, *,
                 eui64: bool,
                 prefix: str):
        pulumi.set(__self__, "eui64", eui64)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def eui64(self) -> bool:
        return pulumi.get(self, "eui64")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetInterfacePortChannelIpv6LinkLocalAddressResult(dict):
    def __init__(__self__, *,
                 address: str,
                 link_local: bool):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "link_local", link_local)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="linkLocal")
    def link_local(self) -> bool:
        return pulumi.get(self, "link_local")


@pulumi.output_type
class GetInterfacePortChannelSubinterfaceHelperAddressResult(dict):
    def __init__(__self__, *,
                 address: str,
                 global_: bool,
                 vrf: str):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "global_", global_)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="global")
    def global_(self) -> bool:
        return pulumi.get(self, "global_")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class GetInterfacePortChannelSubinterfaceIpv6AddressResult(dict):
    def __init__(__self__, *,
                 eui64: bool,
                 prefix: str):
        pulumi.set(__self__, "eui64", eui64)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def eui64(self) -> bool:
        return pulumi.get(self, "eui64")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressResult(dict):
    def __init__(__self__, *,
                 address: str,
                 link_local: bool):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "link_local", link_local)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="linkLocal")
    def link_local(self) -> bool:
        return pulumi.get(self, "link_local")


@pulumi.output_type
class GetInterfaceTunnelHelperAddressResult(dict):
    def __init__(__self__, *,
                 address: str,
                 global_: bool,
                 vrf: str):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "global_", global_)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="global")
    def global_(self) -> bool:
        return pulumi.get(self, "global_")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class GetInterfaceTunnelIpv6AddressResult(dict):
    def __init__(__self__, *,
                 eui64: bool,
                 prefix: str):
        pulumi.set(__self__, "eui64", eui64)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def eui64(self) -> bool:
        return pulumi.get(self, "eui64")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetInterfaceTunnelIpv6LinkLocalAddressResult(dict):
    def __init__(__self__, *,
                 address: str,
                 link_local: bool):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "link_local", link_local)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="linkLocal")
    def link_local(self) -> bool:
        return pulumi.get(self, "link_local")


@pulumi.output_type
class GetInterfaceVlanHelperAddressResult(dict):
    def __init__(__self__, *,
                 address: str,
                 global_: bool,
                 vrf: str):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "global_", global_)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="global")
    def global_(self) -> bool:
        return pulumi.get(self, "global_")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class GetInterfaceVlanIpv6AddressResult(dict):
    def __init__(__self__, *,
                 eui64: bool,
                 prefix: str):
        pulumi.set(__self__, "eui64", eui64)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def eui64(self) -> bool:
        return pulumi.get(self, "eui64")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetInterfaceVlanIpv6LinkLocalAddressResult(dict):
    def __init__(__self__, *,
                 address: str,
                 link_local: bool):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "link_local", link_local)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="linkLocal")
    def link_local(self) -> bool:
        return pulumi.get(self, "link_local")


@pulumi.output_type
class GetLineConsoleResult(dict):
    def __init__(__self__, *,
                 exec_timeout_minutes: int,
                 exec_timeout_seconds: int,
                 first: str,
                 login_authentication: str,
                 login_local: bool,
                 password: str,
                 password_level: int,
                 password_type: str,
                 privilege_level: int,
                 stopbits: str):
        pulumi.set(__self__, "exec_timeout_minutes", exec_timeout_minutes)
        pulumi.set(__self__, "exec_timeout_seconds", exec_timeout_seconds)
        pulumi.set(__self__, "first", first)
        pulumi.set(__self__, "login_authentication", login_authentication)
        pulumi.set(__self__, "login_local", login_local)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "password_level", password_level)
        pulumi.set(__self__, "password_type", password_type)
        pulumi.set(__self__, "privilege_level", privilege_level)
        pulumi.set(__self__, "stopbits", stopbits)

    @property
    @pulumi.getter(name="execTimeoutMinutes")
    def exec_timeout_minutes(self) -> int:
        return pulumi.get(self, "exec_timeout_minutes")

    @property
    @pulumi.getter(name="execTimeoutSeconds")
    def exec_timeout_seconds(self) -> int:
        return pulumi.get(self, "exec_timeout_seconds")

    @property
    @pulumi.getter
    def first(self) -> str:
        return pulumi.get(self, "first")

    @property
    @pulumi.getter(name="loginAuthentication")
    def login_authentication(self) -> str:
        return pulumi.get(self, "login_authentication")

    @property
    @pulumi.getter(name="loginLocal")
    def login_local(self) -> bool:
        return pulumi.get(self, "login_local")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="passwordLevel")
    def password_level(self) -> int:
        return pulumi.get(self, "password_level")

    @property
    @pulumi.getter(name="passwordType")
    def password_type(self) -> str:
        return pulumi.get(self, "password_type")

    @property
    @pulumi.getter(name="privilegeLevel")
    def privilege_level(self) -> int:
        return pulumi.get(self, "privilege_level")

    @property
    @pulumi.getter
    def stopbits(self) -> str:
        return pulumi.get(self, "stopbits")


@pulumi.output_type
class GetLineVtyResult(dict):
    def __init__(__self__, *,
                 access_classes: Sequence['outputs.GetLineVtyAccessClassResult'],
                 escape_character: str,
                 exec_timeout_minutes: int,
                 exec_timeout_seconds: int,
                 first: int,
                 last: int,
                 login_authentication: str,
                 password: str,
                 password_level: int,
                 password_type: str,
                 transport_preferred_protocol: str):
        pulumi.set(__self__, "access_classes", access_classes)
        pulumi.set(__self__, "escape_character", escape_character)
        pulumi.set(__self__, "exec_timeout_minutes", exec_timeout_minutes)
        pulumi.set(__self__, "exec_timeout_seconds", exec_timeout_seconds)
        pulumi.set(__self__, "first", first)
        pulumi.set(__self__, "last", last)
        pulumi.set(__self__, "login_authentication", login_authentication)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "password_level", password_level)
        pulumi.set(__self__, "password_type", password_type)
        pulumi.set(__self__, "transport_preferred_protocol", transport_preferred_protocol)

    @property
    @pulumi.getter(name="accessClasses")
    def access_classes(self) -> Sequence['outputs.GetLineVtyAccessClassResult']:
        return pulumi.get(self, "access_classes")

    @property
    @pulumi.getter(name="escapeCharacter")
    def escape_character(self) -> str:
        return pulumi.get(self, "escape_character")

    @property
    @pulumi.getter(name="execTimeoutMinutes")
    def exec_timeout_minutes(self) -> int:
        return pulumi.get(self, "exec_timeout_minutes")

    @property
    @pulumi.getter(name="execTimeoutSeconds")
    def exec_timeout_seconds(self) -> int:
        return pulumi.get(self, "exec_timeout_seconds")

    @property
    @pulumi.getter
    def first(self) -> int:
        return pulumi.get(self, "first")

    @property
    @pulumi.getter
    def last(self) -> int:
        return pulumi.get(self, "last")

    @property
    @pulumi.getter(name="loginAuthentication")
    def login_authentication(self) -> str:
        return pulumi.get(self, "login_authentication")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="passwordLevel")
    def password_level(self) -> int:
        return pulumi.get(self, "password_level")

    @property
    @pulumi.getter(name="passwordType")
    def password_type(self) -> str:
        return pulumi.get(self, "password_type")

    @property
    @pulumi.getter(name="transportPreferredProtocol")
    def transport_preferred_protocol(self) -> str:
        return pulumi.get(self, "transport_preferred_protocol")


@pulumi.output_type
class GetLineVtyAccessClassResult(dict):
    def __init__(__self__, *,
                 access_list: str,
                 direction: str,
                 vrf_also: bool):
        pulumi.set(__self__, "access_list", access_list)
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "vrf_also", vrf_also)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> str:
        return pulumi.get(self, "access_list")

    @property
    @pulumi.getter
    def direction(self) -> str:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter(name="vrfAlso")
    def vrf_also(self) -> bool:
        return pulumi.get(self, "vrf_also")


@pulumi.output_type
class GetLoggingIpv4HostResult(dict):
    def __init__(__self__, *,
                 ipv4_host: str):
        pulumi.set(__self__, "ipv4_host", ipv4_host)

    @property
    @pulumi.getter(name="ipv4Host")
    def ipv4_host(self) -> str:
        return pulumi.get(self, "ipv4_host")


@pulumi.output_type
class GetLoggingIpv4HostTransportTransportTcpPortResult(dict):
    def __init__(__self__, *,
                 port_number: int):
        pulumi.set(__self__, "port_number", port_number)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> int:
        return pulumi.get(self, "port_number")


@pulumi.output_type
class GetLoggingIpv4HostTransportTransportTlsPortResult(dict):
    def __init__(__self__, *,
                 port_number: int,
                 profile: str):
        pulumi.set(__self__, "port_number", port_number)
        pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> int:
        return pulumi.get(self, "port_number")

    @property
    @pulumi.getter
    def profile(self) -> str:
        return pulumi.get(self, "profile")


@pulumi.output_type
class GetLoggingIpv4HostTransportTransportUdpPortResult(dict):
    def __init__(__self__, *,
                 port_number: int):
        pulumi.set(__self__, "port_number", port_number)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> int:
        return pulumi.get(self, "port_number")


@pulumi.output_type
class GetLoggingIpv4HostVrfTransportTransportTcpPortResult(dict):
    def __init__(__self__, *,
                 port_number: int):
        pulumi.set(__self__, "port_number", port_number)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> int:
        return pulumi.get(self, "port_number")


@pulumi.output_type
class GetLoggingIpv4HostVrfTransportTransportTlsPortResult(dict):
    def __init__(__self__, *,
                 port_number: int,
                 profile: str):
        pulumi.set(__self__, "port_number", port_number)
        pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> int:
        return pulumi.get(self, "port_number")

    @property
    @pulumi.getter
    def profile(self) -> str:
        return pulumi.get(self, "profile")


@pulumi.output_type
class GetLoggingIpv4HostVrfTransportTransportUdpPortResult(dict):
    def __init__(__self__, *,
                 port_number: int):
        pulumi.set(__self__, "port_number", port_number)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> int:
        return pulumi.get(self, "port_number")


@pulumi.output_type
class GetLoggingIpv4VrfHostResult(dict):
    def __init__(__self__, *,
                 ipv4_host: str,
                 vrf: str):
        pulumi.set(__self__, "ipv4_host", ipv4_host)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="ipv4Host")
    def ipv4_host(self) -> str:
        return pulumi.get(self, "ipv4_host")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class GetLoggingIpv6HostResult(dict):
    def __init__(__self__, *,
                 ipv6_host: str):
        pulumi.set(__self__, "ipv6_host", ipv6_host)

    @property
    @pulumi.getter(name="ipv6Host")
    def ipv6_host(self) -> str:
        return pulumi.get(self, "ipv6_host")


@pulumi.output_type
class GetLoggingIpv6HostTransportTransportTcpPortResult(dict):
    def __init__(__self__, *,
                 port_number: int):
        pulumi.set(__self__, "port_number", port_number)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> int:
        return pulumi.get(self, "port_number")


@pulumi.output_type
class GetLoggingIpv6HostTransportTransportTlsPortResult(dict):
    def __init__(__self__, *,
                 port_number: int,
                 profile: str):
        pulumi.set(__self__, "port_number", port_number)
        pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> int:
        return pulumi.get(self, "port_number")

    @property
    @pulumi.getter
    def profile(self) -> str:
        return pulumi.get(self, "profile")


@pulumi.output_type
class GetLoggingIpv6HostTransportTransportUdpPortResult(dict):
    def __init__(__self__, *,
                 port_number: int):
        pulumi.set(__self__, "port_number", port_number)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> int:
        return pulumi.get(self, "port_number")


@pulumi.output_type
class GetLoggingIpv6HostVrfTransportTransportTcpPortResult(dict):
    def __init__(__self__, *,
                 port_number: int):
        pulumi.set(__self__, "port_number", port_number)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> int:
        return pulumi.get(self, "port_number")


@pulumi.output_type
class GetLoggingIpv6HostVrfTransportTransportTlsPortResult(dict):
    def __init__(__self__, *,
                 port_number: int,
                 profile: str):
        pulumi.set(__self__, "port_number", port_number)
        pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> int:
        return pulumi.get(self, "port_number")

    @property
    @pulumi.getter
    def profile(self) -> str:
        return pulumi.get(self, "profile")


@pulumi.output_type
class GetLoggingIpv6HostVrfTransportTransportUdpPortResult(dict):
    def __init__(__self__, *,
                 port_number: int):
        pulumi.set(__self__, "port_number", port_number)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> int:
        return pulumi.get(self, "port_number")


@pulumi.output_type
class GetLoggingIpv6VrfHostResult(dict):
    def __init__(__self__, *,
                 ipv6_host: str,
                 vrf: str):
        pulumi.set(__self__, "ipv6_host", ipv6_host)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="ipv6Host")
    def ipv6_host(self) -> str:
        return pulumi.get(self, "ipv6_host")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class GetLoggingSourceInterfacesVrfResult(dict):
    def __init__(__self__, *,
                 interface_name: str,
                 vrf: str):
        pulumi.set(__self__, "interface_name", interface_name)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> str:
        return pulumi.get(self, "interface_name")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class GetMdtSubscriptionReceiverResult(dict):
    def __init__(__self__, *,
                 address: str,
                 port: int,
                 protocol: str):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")


@pulumi.output_type
class GetMsdpPasswordResult(dict):
    def __init__(__self__, *,
                 addr: str,
                 encryption: int,
                 password: str):
        pulumi.set(__self__, "addr", addr)
        pulumi.set(__self__, "encryption", encryption)
        pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter
    def addr(self) -> str:
        return pulumi.get(self, "addr")

    @property
    @pulumi.getter
    def encryption(self) -> int:
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")


@pulumi.output_type
class GetMsdpPeerResult(dict):
    def __init__(__self__, *,
                 addr: str,
                 connect_source_loopback: int,
                 remote_as: int):
        pulumi.set(__self__, "addr", addr)
        pulumi.set(__self__, "connect_source_loopback", connect_source_loopback)
        pulumi.set(__self__, "remote_as", remote_as)

    @property
    @pulumi.getter
    def addr(self) -> str:
        return pulumi.get(self, "addr")

    @property
    @pulumi.getter(name="connectSourceLoopback")
    def connect_source_loopback(self) -> int:
        return pulumi.get(self, "connect_source_loopback")

    @property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> int:
        return pulumi.get(self, "remote_as")


@pulumi.output_type
class GetMsdpVrfPasswordResult(dict):
    def __init__(__self__, *,
                 addr: str,
                 encryption: int,
                 password: str):
        pulumi.set(__self__, "addr", addr)
        pulumi.set(__self__, "encryption", encryption)
        pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter
    def addr(self) -> str:
        return pulumi.get(self, "addr")

    @property
    @pulumi.getter
    def encryption(self) -> int:
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")


@pulumi.output_type
class GetMsdpVrfPeerResult(dict):
    def __init__(__self__, *,
                 addr: str,
                 connect_source_loopback: int,
                 remote_as: int):
        pulumi.set(__self__, "addr", addr)
        pulumi.set(__self__, "connect_source_loopback", connect_source_loopback)
        pulumi.set(__self__, "remote_as", remote_as)

    @property
    @pulumi.getter
    def addr(self) -> str:
        return pulumi.get(self, "addr")

    @property
    @pulumi.getter(name="connectSourceLoopback")
    def connect_source_loopback(self) -> int:
        return pulumi.get(self, "connect_source_loopback")

    @property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> int:
        return pulumi.get(self, "remote_as")


@pulumi.output_type
class GetNtpAuthenticationKeyResult(dict):
    def __init__(__self__, *,
                 cmac_aes128: str,
                 encryption_type: int,
                 hmac_sha1: str,
                 hmac_sha2256: str,
                 md5: str,
                 number: int,
                 sha1: str,
                 sha2: str):
        pulumi.set(__self__, "cmac_aes128", cmac_aes128)
        pulumi.set(__self__, "encryption_type", encryption_type)
        pulumi.set(__self__, "hmac_sha1", hmac_sha1)
        pulumi.set(__self__, "hmac_sha2256", hmac_sha2256)
        pulumi.set(__self__, "md5", md5)
        pulumi.set(__self__, "number", number)
        pulumi.set(__self__, "sha1", sha1)
        pulumi.set(__self__, "sha2", sha2)

    @property
    @pulumi.getter(name="cmacAes128")
    def cmac_aes128(self) -> str:
        return pulumi.get(self, "cmac_aes128")

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> int:
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter(name="hmacSha1")
    def hmac_sha1(self) -> str:
        return pulumi.get(self, "hmac_sha1")

    @property
    @pulumi.getter(name="hmacSha2256")
    def hmac_sha2256(self) -> str:
        return pulumi.get(self, "hmac_sha2256")

    @property
    @pulumi.getter
    def md5(self) -> str:
        return pulumi.get(self, "md5")

    @property
    @pulumi.getter
    def number(self) -> int:
        return pulumi.get(self, "number")

    @property
    @pulumi.getter
    def sha1(self) -> str:
        return pulumi.get(self, "sha1")

    @property
    @pulumi.getter
    def sha2(self) -> str:
        return pulumi.get(self, "sha2")


@pulumi.output_type
class GetNtpPeerResult(dict):
    def __init__(__self__, *,
                 ip_address: str,
                 key: int,
                 prefer: bool,
                 source: str,
                 version: int):
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "prefer", prefer)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def key(self) -> int:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def prefer(self) -> bool:
        return pulumi.get(self, "prefer")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def version(self) -> int:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetNtpPeerVrfResult(dict):
    def __init__(__self__, *,
                 name: str,
                 peers: Sequence['outputs.GetNtpPeerVrfPeerResult']):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "peers", peers)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def peers(self) -> Sequence['outputs.GetNtpPeerVrfPeerResult']:
        return pulumi.get(self, "peers")


@pulumi.output_type
class GetNtpPeerVrfPeerResult(dict):
    def __init__(__self__, *,
                 ip_address: str,
                 key: int,
                 prefer: bool,
                 version: int):
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "prefer", prefer)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def key(self) -> int:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def prefer(self) -> bool:
        return pulumi.get(self, "prefer")

    @property
    @pulumi.getter
    def version(self) -> int:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetNtpServerResult(dict):
    def __init__(__self__, *,
                 ip_address: str,
                 key: int,
                 prefer: bool,
                 source: str,
                 version: int):
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "prefer", prefer)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def key(self) -> int:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def prefer(self) -> bool:
        return pulumi.get(self, "prefer")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def version(self) -> int:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetNtpServerVrfResult(dict):
    def __init__(__self__, *,
                 name: str,
                 servers: Sequence['outputs.GetNtpServerVrfServerResult']):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "servers", servers)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def servers(self) -> Sequence['outputs.GetNtpServerVrfServerResult']:
        return pulumi.get(self, "servers")


@pulumi.output_type
class GetNtpServerVrfServerResult(dict):
    def __init__(__self__, *,
                 ip_address: str,
                 key: int,
                 prefer: bool,
                 version: int):
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "prefer", prefer)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def key(self) -> int:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def prefer(self) -> bool:
        return pulumi.get(self, "prefer")

    @property
    @pulumi.getter
    def version(self) -> int:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetOspfAreaResult(dict):
    def __init__(__self__, *,
                 area_id: str,
                 authentication_message_digest: bool,
                 nssa: bool,
                 nssa_default_information_originate: bool,
                 nssa_default_information_originate_metric: int,
                 nssa_default_information_originate_metric_type: int,
                 nssa_no_redistribution: bool,
                 nssa_no_summary: bool):
        pulumi.set(__self__, "area_id", area_id)
        pulumi.set(__self__, "authentication_message_digest", authentication_message_digest)
        pulumi.set(__self__, "nssa", nssa)
        pulumi.set(__self__, "nssa_default_information_originate", nssa_default_information_originate)
        pulumi.set(__self__, "nssa_default_information_originate_metric", nssa_default_information_originate_metric)
        pulumi.set(__self__, "nssa_default_information_originate_metric_type", nssa_default_information_originate_metric_type)
        pulumi.set(__self__, "nssa_no_redistribution", nssa_no_redistribution)
        pulumi.set(__self__, "nssa_no_summary", nssa_no_summary)

    @property
    @pulumi.getter(name="areaId")
    def area_id(self) -> str:
        return pulumi.get(self, "area_id")

    @property
    @pulumi.getter(name="authenticationMessageDigest")
    def authentication_message_digest(self) -> bool:
        return pulumi.get(self, "authentication_message_digest")

    @property
    @pulumi.getter
    def nssa(self) -> bool:
        return pulumi.get(self, "nssa")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginate")
    def nssa_default_information_originate(self) -> bool:
        return pulumi.get(self, "nssa_default_information_originate")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetric")
    def nssa_default_information_originate_metric(self) -> int:
        return pulumi.get(self, "nssa_default_information_originate_metric")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetricType")
    def nssa_default_information_originate_metric_type(self) -> int:
        return pulumi.get(self, "nssa_default_information_originate_metric_type")

    @property
    @pulumi.getter(name="nssaNoRedistribution")
    def nssa_no_redistribution(self) -> bool:
        return pulumi.get(self, "nssa_no_redistribution")

    @property
    @pulumi.getter(name="nssaNoSummary")
    def nssa_no_summary(self) -> bool:
        return pulumi.get(self, "nssa_no_summary")


@pulumi.output_type
class GetOspfNeighborResult(dict):
    def __init__(__self__, *,
                 cost: int,
                 ip: str,
                 priority: int):
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def cost(self) -> int:
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetOspfNetworkResult(dict):
    def __init__(__self__, *,
                 area: str,
                 ip: str,
                 wildcard: str):
        pulumi.set(__self__, "area", area)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "wildcard", wildcard)

    @property
    @pulumi.getter
    def area(self) -> str:
        return pulumi.get(self, "area")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def wildcard(self) -> str:
        return pulumi.get(self, "wildcard")


@pulumi.output_type
class GetOspfSummaryAddressResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 mask: str):
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def mask(self) -> str:
        return pulumi.get(self, "mask")


@pulumi.output_type
class GetOspfVrfAreaResult(dict):
    def __init__(__self__, *,
                 area_id: str,
                 authentication_message_digest: bool,
                 nssa: bool,
                 nssa_default_information_originate: bool,
                 nssa_default_information_originate_metric: int,
                 nssa_default_information_originate_metric_type: int,
                 nssa_no_redistribution: bool,
                 nssa_no_summary: bool):
        pulumi.set(__self__, "area_id", area_id)
        pulumi.set(__self__, "authentication_message_digest", authentication_message_digest)
        pulumi.set(__self__, "nssa", nssa)
        pulumi.set(__self__, "nssa_default_information_originate", nssa_default_information_originate)
        pulumi.set(__self__, "nssa_default_information_originate_metric", nssa_default_information_originate_metric)
        pulumi.set(__self__, "nssa_default_information_originate_metric_type", nssa_default_information_originate_metric_type)
        pulumi.set(__self__, "nssa_no_redistribution", nssa_no_redistribution)
        pulumi.set(__self__, "nssa_no_summary", nssa_no_summary)

    @property
    @pulumi.getter(name="areaId")
    def area_id(self) -> str:
        return pulumi.get(self, "area_id")

    @property
    @pulumi.getter(name="authenticationMessageDigest")
    def authentication_message_digest(self) -> bool:
        return pulumi.get(self, "authentication_message_digest")

    @property
    @pulumi.getter
    def nssa(self) -> bool:
        return pulumi.get(self, "nssa")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginate")
    def nssa_default_information_originate(self) -> bool:
        return pulumi.get(self, "nssa_default_information_originate")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetric")
    def nssa_default_information_originate_metric(self) -> int:
        return pulumi.get(self, "nssa_default_information_originate_metric")

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetricType")
    def nssa_default_information_originate_metric_type(self) -> int:
        return pulumi.get(self, "nssa_default_information_originate_metric_type")

    @property
    @pulumi.getter(name="nssaNoRedistribution")
    def nssa_no_redistribution(self) -> bool:
        return pulumi.get(self, "nssa_no_redistribution")

    @property
    @pulumi.getter(name="nssaNoSummary")
    def nssa_no_summary(self) -> bool:
        return pulumi.get(self, "nssa_no_summary")


@pulumi.output_type
class GetOspfVrfNeighborResult(dict):
    def __init__(__self__, *,
                 cost: int,
                 ip: str,
                 priority: int):
        pulumi.set(__self__, "cost", cost)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def cost(self) -> int:
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetOspfVrfNetworkResult(dict):
    def __init__(__self__, *,
                 area: str,
                 ip: str,
                 wildcard: str):
        pulumi.set(__self__, "area", area)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "wildcard", wildcard)

    @property
    @pulumi.getter
    def area(self) -> str:
        return pulumi.get(self, "area")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def wildcard(self) -> str:
        return pulumi.get(self, "wildcard")


@pulumi.output_type
class GetOspfVrfSummaryAddressResult(dict):
    def __init__(__self__, *,
                 ip: str,
                 mask: str):
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def mask(self) -> str:
        return pulumi.get(self, "mask")


@pulumi.output_type
class GetPimRpAddressResult(dict):
    def __init__(__self__, *,
                 access_list: str,
                 bidir: bool,
                 override: bool,
                 rp_address: str):
        pulumi.set(__self__, "access_list", access_list)
        pulumi.set(__self__, "bidir", bidir)
        pulumi.set(__self__, "override", override)
        pulumi.set(__self__, "rp_address", rp_address)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> str:
        return pulumi.get(self, "access_list")

    @property
    @pulumi.getter
    def bidir(self) -> bool:
        return pulumi.get(self, "bidir")

    @property
    @pulumi.getter
    def override(self) -> bool:
        return pulumi.get(self, "override")

    @property
    @pulumi.getter(name="rpAddress")
    def rp_address(self) -> str:
        return pulumi.get(self, "rp_address")


@pulumi.output_type
class GetPimRpCandidateResult(dict):
    def __init__(__self__, *,
                 bidir: bool,
                 group_list: str,
                 interface: str,
                 interval: int,
                 priority: int):
        pulumi.set(__self__, "bidir", bidir)
        pulumi.set(__self__, "group_list", group_list)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def bidir(self) -> bool:
        return pulumi.get(self, "bidir")

    @property
    @pulumi.getter(name="groupList")
    def group_list(self) -> str:
        return pulumi.get(self, "group_list")

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def interval(self) -> int:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetPimVrfRpAddressResult(dict):
    def __init__(__self__, *,
                 access_list: str,
                 bidir: bool,
                 override: bool,
                 rp_address: str):
        pulumi.set(__self__, "access_list", access_list)
        pulumi.set(__self__, "bidir", bidir)
        pulumi.set(__self__, "override", override)
        pulumi.set(__self__, "rp_address", rp_address)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> str:
        return pulumi.get(self, "access_list")

    @property
    @pulumi.getter
    def bidir(self) -> bool:
        return pulumi.get(self, "bidir")

    @property
    @pulumi.getter
    def override(self) -> bool:
        return pulumi.get(self, "override")

    @property
    @pulumi.getter(name="rpAddress")
    def rp_address(self) -> str:
        return pulumi.get(self, "rp_address")


@pulumi.output_type
class GetPimVrfRpCandidateResult(dict):
    def __init__(__self__, *,
                 bidir: bool,
                 group_list: str,
                 interface: str,
                 interval: int,
                 priority: int):
        pulumi.set(__self__, "bidir", bidir)
        pulumi.set(__self__, "group_list", group_list)
        pulumi.set(__self__, "interface", interface)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def bidir(self) -> bool:
        return pulumi.get(self, "bidir")

    @property
    @pulumi.getter(name="groupList")
    def group_list(self) -> str:
        return pulumi.get(self, "group_list")

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter
    def interval(self) -> int:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetPolicyMapEventClassNumberResult(dict):
    def __init__(__self__, *,
                 action_numbers: Sequence['outputs.GetPolicyMapEventClassNumberActionNumberResult'],
                 class_: str,
                 execution_type: str,
                 number: int):
        pulumi.set(__self__, "action_numbers", action_numbers)
        pulumi.set(__self__, "class_", class_)
        pulumi.set(__self__, "execution_type", execution_type)
        pulumi.set(__self__, "number", number)

    @property
    @pulumi.getter(name="actionNumbers")
    def action_numbers(self) -> Sequence['outputs.GetPolicyMapEventClassNumberActionNumberResult']:
        return pulumi.get(self, "action_numbers")

    @property
    @pulumi.getter(name="class")
    def class_(self) -> str:
        return pulumi.get(self, "class_")

    @property
    @pulumi.getter(name="executionType")
    def execution_type(self) -> str:
        return pulumi.get(self, "execution_type")

    @property
    @pulumi.getter
    def number(self) -> int:
        return pulumi.get(self, "number")


@pulumi.output_type
class GetPolicyMapEventClassNumberActionNumberResult(dict):
    def __init__(__self__, *,
                 activate_service_template_config_service_template: str,
                 authenticate_using_method: str,
                 authenticate_using_priority: int,
                 authenticate_using_retries: int,
                 authenticate_using_retry_time: int,
                 authorize: bool,
                 number: int,
                 pause_reauthentication: bool,
                 terminate_config: str):
        pulumi.set(__self__, "activate_service_template_config_service_template", activate_service_template_config_service_template)
        pulumi.set(__self__, "authenticate_using_method", authenticate_using_method)
        pulumi.set(__self__, "authenticate_using_priority", authenticate_using_priority)
        pulumi.set(__self__, "authenticate_using_retries", authenticate_using_retries)
        pulumi.set(__self__, "authenticate_using_retry_time", authenticate_using_retry_time)
        pulumi.set(__self__, "authorize", authorize)
        pulumi.set(__self__, "number", number)
        pulumi.set(__self__, "pause_reauthentication", pause_reauthentication)
        pulumi.set(__self__, "terminate_config", terminate_config)

    @property
    @pulumi.getter(name="activateServiceTemplateConfigServiceTemplate")
    def activate_service_template_config_service_template(self) -> str:
        return pulumi.get(self, "activate_service_template_config_service_template")

    @property
    @pulumi.getter(name="authenticateUsingMethod")
    def authenticate_using_method(self) -> str:
        return pulumi.get(self, "authenticate_using_method")

    @property
    @pulumi.getter(name="authenticateUsingPriority")
    def authenticate_using_priority(self) -> int:
        return pulumi.get(self, "authenticate_using_priority")

    @property
    @pulumi.getter(name="authenticateUsingRetries")
    def authenticate_using_retries(self) -> int:
        return pulumi.get(self, "authenticate_using_retries")

    @property
    @pulumi.getter(name="authenticateUsingRetryTime")
    def authenticate_using_retry_time(self) -> int:
        return pulumi.get(self, "authenticate_using_retry_time")

    @property
    @pulumi.getter
    def authorize(self) -> bool:
        return pulumi.get(self, "authorize")

    @property
    @pulumi.getter
    def number(self) -> int:
        return pulumi.get(self, "number")

    @property
    @pulumi.getter(name="pauseReauthentication")
    def pause_reauthentication(self) -> bool:
        return pulumi.get(self, "pause_reauthentication")

    @property
    @pulumi.getter(name="terminateConfig")
    def terminate_config(self) -> str:
        return pulumi.get(self, "terminate_config")


@pulumi.output_type
class GetPrefixListPrefixResult(dict):
    def __init__(__self__, *,
                 action: str,
                 ge: int,
                 ip: str,
                 le: int,
                 name: str,
                 seq: int):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "ge", ge)
        pulumi.set(__self__, "ip", ip)
        pulumi.set(__self__, "le", le)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "seq", seq)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def ge(self) -> int:
        return pulumi.get(self, "ge")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def le(self) -> int:
        return pulumi.get(self, "le")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def seq(self) -> int:
        return pulumi.get(self, "seq")


@pulumi.output_type
class GetRadiusServerAttributeResult(dict):
    def __init__(__self__, *,
                 access_request_include: bool,
                 attribute31_parameters: Sequence['outputs.GetRadiusServerAttributeAttribute31ParameterResult'],
                 number: str,
                 send_attributes: Sequence[str]):
        pulumi.set(__self__, "access_request_include", access_request_include)
        pulumi.set(__self__, "attribute31_parameters", attribute31_parameters)
        pulumi.set(__self__, "number", number)
        pulumi.set(__self__, "send_attributes", send_attributes)

    @property
    @pulumi.getter(name="accessRequestInclude")
    def access_request_include(self) -> bool:
        return pulumi.get(self, "access_request_include")

    @property
    @pulumi.getter(name="attribute31Parameters")
    def attribute31_parameters(self) -> Sequence['outputs.GetRadiusServerAttributeAttribute31ParameterResult']:
        return pulumi.get(self, "attribute31_parameters")

    @property
    @pulumi.getter
    def number(self) -> str:
        return pulumi.get(self, "number")

    @property
    @pulumi.getter(name="sendAttributes")
    def send_attributes(self) -> Sequence[str]:
        return pulumi.get(self, "send_attributes")


@pulumi.output_type
class GetRadiusServerAttributeAttribute31ParameterResult(dict):
    def __init__(__self__, *,
                 calling_station_id: str,
                 id_mac_format: str,
                 id_mac_lu_case: str,
                 id_send_mac_only: bool,
                 id_send_nas_port_detail: bool):
        pulumi.set(__self__, "calling_station_id", calling_station_id)
        pulumi.set(__self__, "id_mac_format", id_mac_format)
        pulumi.set(__self__, "id_mac_lu_case", id_mac_lu_case)
        pulumi.set(__self__, "id_send_mac_only", id_send_mac_only)
        pulumi.set(__self__, "id_send_nas_port_detail", id_send_nas_port_detail)

    @property
    @pulumi.getter(name="callingStationId")
    def calling_station_id(self) -> str:
        return pulumi.get(self, "calling_station_id")

    @property
    @pulumi.getter(name="idMacFormat")
    def id_mac_format(self) -> str:
        return pulumi.get(self, "id_mac_format")

    @property
    @pulumi.getter(name="idMacLuCase")
    def id_mac_lu_case(self) -> str:
        return pulumi.get(self, "id_mac_lu_case")

    @property
    @pulumi.getter(name="idSendMacOnly")
    def id_send_mac_only(self) -> bool:
        return pulumi.get(self, "id_send_mac_only")

    @property
    @pulumi.getter(name="idSendNasPortDetail")
    def id_send_nas_port_detail(self) -> bool:
        return pulumi.get(self, "id_send_nas_port_detail")


@pulumi.output_type
class GetRouteMapEntryResult(dict):
    def __init__(__self__, *,
                 continue_: bool,
                 continue_sequence_number: int,
                 description: str,
                 match_as_paths: Sequence[int],
                 match_as_paths_legacies: Sequence[int],
                 match_community_list_exact_match: bool,
                 match_community_lists: Sequence[str],
                 match_community_lists_legacies: Sequence[str],
                 match_extcommunity_lists: Sequence[str],
                 match_extcommunity_lists_legacies: Sequence[str],
                 match_interfaces: Sequence[str],
                 match_ip_address_access_lists: Sequence[str],
                 match_ip_address_prefix_lists: Sequence[str],
                 match_ip_next_hop_access_lists: Sequence[str],
                 match_ip_next_hop_prefix_lists: Sequence[str],
                 match_ipv6_address_access_lists: str,
                 match_ipv6_address_prefix_lists: str,
                 match_ipv6_next_hop_access_lists: str,
                 match_ipv6_next_hop_prefix_lists: str,
                 match_local_preferences: Sequence[int],
                 match_local_preferences_legacies: Sequence[int],
                 match_route_type_external: bool,
                 match_route_type_external_type1: bool,
                 match_route_type_external_type2: bool,
                 match_route_type_internal: bool,
                 match_route_type_level1: bool,
                 match_route_type_level2: bool,
                 match_route_type_local: bool,
                 match_source_protocol_bgps: Sequence[str],
                 match_source_protocol_connected: bool,
                 match_source_protocol_eigrps: Sequence[str],
                 match_source_protocol_isis: bool,
                 match_source_protocol_lisp: bool,
                 match_source_protocol_ospfs: Sequence[str],
                 match_source_protocol_ospfv3s: Sequence[str],
                 match_source_protocol_rip: bool,
                 match_source_protocol_static: bool,
                 match_tags: Sequence[int],
                 match_track: int,
                 operation: str,
                 seq: int,
                 set_as_path_prepend_as: str,
                 set_as_path_prepend_as_legacy: str,
                 set_as_path_prepend_last_as: int,
                 set_as_path_prepend_last_as_legacy: int,
                 set_as_path_tag: bool,
                 set_as_path_tag_legacy: bool,
                 set_communities: Sequence[str],
                 set_communities_additive: bool,
                 set_communities_additive_legacy: bool,
                 set_communities_legacies: Sequence[str],
                 set_community_list_delete: bool,
                 set_community_list_delete_legacy: bool,
                 set_community_list_expanded: int,
                 set_community_list_expanded_legacy: int,
                 set_community_list_name: str,
                 set_community_list_name_legacy: str,
                 set_community_list_standard: int,
                 set_community_list_standard_legacy: int,
                 set_community_none: bool,
                 set_community_none_legacy: bool,
                 set_default_interfaces: Sequence[str],
                 set_extcomunity_rt_legacies: Sequence[str],
                 set_extcomunity_rts: Sequence[str],
                 set_extcomunity_soo: str,
                 set_extcomunity_soo_legacy: str,
                 set_extcomunity_vpn_distinguisher: str,
                 set_extcomunity_vpn_distinguisher_additive: bool,
                 set_extcomunity_vpn_distinguisher_legacy: str,
                 set_global: bool,
                 set_interfaces: Sequence[str],
                 set_ip_address: str,
                 set_ip_default_global_next_hop_addresses: Sequence[str],
                 set_ip_default_next_hop_addresses: Sequence[str],
                 set_ip_global_next_hop_addresses: Sequence[str],
                 set_ip_next_hop_addresses: Sequence[str],
                 set_ip_next_hop_self: bool,
                 set_ip_qos_group: int,
                 set_ipv6_addresses: Sequence[str],
                 set_ipv6_default_global_next_hop: str,
                 set_ipv6_default_next_hops: Sequence[str],
                 set_ipv6_next_hops: Sequence[str],
                 set_level1: bool,
                 set_level12: bool,
                 set_level2: bool,
                 set_local_preference: int,
                 set_local_preference_legacy: int,
                 set_metric_change: str,
                 set_metric_delay: str,
                 set_metric_loading: int,
                 set_metric_mtu: int,
                 set_metric_reliability: int,
                 set_metric_type: str,
                 set_metric_value: int,
                 set_tag: int,
                 set_vrf: str,
                 set_weight: int,
                 set_weight_legacy: int):
        pulumi.set(__self__, "continue_", continue_)
        pulumi.set(__self__, "continue_sequence_number", continue_sequence_number)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "match_as_paths", match_as_paths)
        pulumi.set(__self__, "match_as_paths_legacies", match_as_paths_legacies)
        pulumi.set(__self__, "match_community_list_exact_match", match_community_list_exact_match)
        pulumi.set(__self__, "match_community_lists", match_community_lists)
        pulumi.set(__self__, "match_community_lists_legacies", match_community_lists_legacies)
        pulumi.set(__self__, "match_extcommunity_lists", match_extcommunity_lists)
        pulumi.set(__self__, "match_extcommunity_lists_legacies", match_extcommunity_lists_legacies)
        pulumi.set(__self__, "match_interfaces", match_interfaces)
        pulumi.set(__self__, "match_ip_address_access_lists", match_ip_address_access_lists)
        pulumi.set(__self__, "match_ip_address_prefix_lists", match_ip_address_prefix_lists)
        pulumi.set(__self__, "match_ip_next_hop_access_lists", match_ip_next_hop_access_lists)
        pulumi.set(__self__, "match_ip_next_hop_prefix_lists", match_ip_next_hop_prefix_lists)
        pulumi.set(__self__, "match_ipv6_address_access_lists", match_ipv6_address_access_lists)
        pulumi.set(__self__, "match_ipv6_address_prefix_lists", match_ipv6_address_prefix_lists)
        pulumi.set(__self__, "match_ipv6_next_hop_access_lists", match_ipv6_next_hop_access_lists)
        pulumi.set(__self__, "match_ipv6_next_hop_prefix_lists", match_ipv6_next_hop_prefix_lists)
        pulumi.set(__self__, "match_local_preferences", match_local_preferences)
        pulumi.set(__self__, "match_local_preferences_legacies", match_local_preferences_legacies)
        pulumi.set(__self__, "match_route_type_external", match_route_type_external)
        pulumi.set(__self__, "match_route_type_external_type1", match_route_type_external_type1)
        pulumi.set(__self__, "match_route_type_external_type2", match_route_type_external_type2)
        pulumi.set(__self__, "match_route_type_internal", match_route_type_internal)
        pulumi.set(__self__, "match_route_type_level1", match_route_type_level1)
        pulumi.set(__self__, "match_route_type_level2", match_route_type_level2)
        pulumi.set(__self__, "match_route_type_local", match_route_type_local)
        pulumi.set(__self__, "match_source_protocol_bgps", match_source_protocol_bgps)
        pulumi.set(__self__, "match_source_protocol_connected", match_source_protocol_connected)
        pulumi.set(__self__, "match_source_protocol_eigrps", match_source_protocol_eigrps)
        pulumi.set(__self__, "match_source_protocol_isis", match_source_protocol_isis)
        pulumi.set(__self__, "match_source_protocol_lisp", match_source_protocol_lisp)
        pulumi.set(__self__, "match_source_protocol_ospfs", match_source_protocol_ospfs)
        pulumi.set(__self__, "match_source_protocol_ospfv3s", match_source_protocol_ospfv3s)
        pulumi.set(__self__, "match_source_protocol_rip", match_source_protocol_rip)
        pulumi.set(__self__, "match_source_protocol_static", match_source_protocol_static)
        pulumi.set(__self__, "match_tags", match_tags)
        pulumi.set(__self__, "match_track", match_track)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "seq", seq)
        pulumi.set(__self__, "set_as_path_prepend_as", set_as_path_prepend_as)
        pulumi.set(__self__, "set_as_path_prepend_as_legacy", set_as_path_prepend_as_legacy)
        pulumi.set(__self__, "set_as_path_prepend_last_as", set_as_path_prepend_last_as)
        pulumi.set(__self__, "set_as_path_prepend_last_as_legacy", set_as_path_prepend_last_as_legacy)
        pulumi.set(__self__, "set_as_path_tag", set_as_path_tag)
        pulumi.set(__self__, "set_as_path_tag_legacy", set_as_path_tag_legacy)
        pulumi.set(__self__, "set_communities", set_communities)
        pulumi.set(__self__, "set_communities_additive", set_communities_additive)
        pulumi.set(__self__, "set_communities_additive_legacy", set_communities_additive_legacy)
        pulumi.set(__self__, "set_communities_legacies", set_communities_legacies)
        pulumi.set(__self__, "set_community_list_delete", set_community_list_delete)
        pulumi.set(__self__, "set_community_list_delete_legacy", set_community_list_delete_legacy)
        pulumi.set(__self__, "set_community_list_expanded", set_community_list_expanded)
        pulumi.set(__self__, "set_community_list_expanded_legacy", set_community_list_expanded_legacy)
        pulumi.set(__self__, "set_community_list_name", set_community_list_name)
        pulumi.set(__self__, "set_community_list_name_legacy", set_community_list_name_legacy)
        pulumi.set(__self__, "set_community_list_standard", set_community_list_standard)
        pulumi.set(__self__, "set_community_list_standard_legacy", set_community_list_standard_legacy)
        pulumi.set(__self__, "set_community_none", set_community_none)
        pulumi.set(__self__, "set_community_none_legacy", set_community_none_legacy)
        pulumi.set(__self__, "set_default_interfaces", set_default_interfaces)
        pulumi.set(__self__, "set_extcomunity_rt_legacies", set_extcomunity_rt_legacies)
        pulumi.set(__self__, "set_extcomunity_rts", set_extcomunity_rts)
        pulumi.set(__self__, "set_extcomunity_soo", set_extcomunity_soo)
        pulumi.set(__self__, "set_extcomunity_soo_legacy", set_extcomunity_soo_legacy)
        pulumi.set(__self__, "set_extcomunity_vpn_distinguisher", set_extcomunity_vpn_distinguisher)
        pulumi.set(__self__, "set_extcomunity_vpn_distinguisher_additive", set_extcomunity_vpn_distinguisher_additive)
        pulumi.set(__self__, "set_extcomunity_vpn_distinguisher_legacy", set_extcomunity_vpn_distinguisher_legacy)
        pulumi.set(__self__, "set_global", set_global)
        pulumi.set(__self__, "set_interfaces", set_interfaces)
        pulumi.set(__self__, "set_ip_address", set_ip_address)
        pulumi.set(__self__, "set_ip_default_global_next_hop_addresses", set_ip_default_global_next_hop_addresses)
        pulumi.set(__self__, "set_ip_default_next_hop_addresses", set_ip_default_next_hop_addresses)
        pulumi.set(__self__, "set_ip_global_next_hop_addresses", set_ip_global_next_hop_addresses)
        pulumi.set(__self__, "set_ip_next_hop_addresses", set_ip_next_hop_addresses)
        pulumi.set(__self__, "set_ip_next_hop_self", set_ip_next_hop_self)
        pulumi.set(__self__, "set_ip_qos_group", set_ip_qos_group)
        pulumi.set(__self__, "set_ipv6_addresses", set_ipv6_addresses)
        pulumi.set(__self__, "set_ipv6_default_global_next_hop", set_ipv6_default_global_next_hop)
        pulumi.set(__self__, "set_ipv6_default_next_hops", set_ipv6_default_next_hops)
        pulumi.set(__self__, "set_ipv6_next_hops", set_ipv6_next_hops)
        pulumi.set(__self__, "set_level1", set_level1)
        pulumi.set(__self__, "set_level12", set_level12)
        pulumi.set(__self__, "set_level2", set_level2)
        pulumi.set(__self__, "set_local_preference", set_local_preference)
        pulumi.set(__self__, "set_local_preference_legacy", set_local_preference_legacy)
        pulumi.set(__self__, "set_metric_change", set_metric_change)
        pulumi.set(__self__, "set_metric_delay", set_metric_delay)
        pulumi.set(__self__, "set_metric_loading", set_metric_loading)
        pulumi.set(__self__, "set_metric_mtu", set_metric_mtu)
        pulumi.set(__self__, "set_metric_reliability", set_metric_reliability)
        pulumi.set(__self__, "set_metric_type", set_metric_type)
        pulumi.set(__self__, "set_metric_value", set_metric_value)
        pulumi.set(__self__, "set_tag", set_tag)
        pulumi.set(__self__, "set_vrf", set_vrf)
        pulumi.set(__self__, "set_weight", set_weight)
        pulumi.set(__self__, "set_weight_legacy", set_weight_legacy)

    @property
    @pulumi.getter(name="continue")
    def continue_(self) -> bool:
        return pulumi.get(self, "continue_")

    @property
    @pulumi.getter(name="continueSequenceNumber")
    def continue_sequence_number(self) -> int:
        return pulumi.get(self, "continue_sequence_number")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="matchAsPaths")
    def match_as_paths(self) -> Sequence[int]:
        return pulumi.get(self, "match_as_paths")

    @property
    @pulumi.getter(name="matchAsPathsLegacies")
    def match_as_paths_legacies(self) -> Sequence[int]:
        return pulumi.get(self, "match_as_paths_legacies")

    @property
    @pulumi.getter(name="matchCommunityListExactMatch")
    def match_community_list_exact_match(self) -> bool:
        return pulumi.get(self, "match_community_list_exact_match")

    @property
    @pulumi.getter(name="matchCommunityLists")
    def match_community_lists(self) -> Sequence[str]:
        return pulumi.get(self, "match_community_lists")

    @property
    @pulumi.getter(name="matchCommunityListsLegacies")
    def match_community_lists_legacies(self) -> Sequence[str]:
        return pulumi.get(self, "match_community_lists_legacies")

    @property
    @pulumi.getter(name="matchExtcommunityLists")
    def match_extcommunity_lists(self) -> Sequence[str]:
        return pulumi.get(self, "match_extcommunity_lists")

    @property
    @pulumi.getter(name="matchExtcommunityListsLegacies")
    def match_extcommunity_lists_legacies(self) -> Sequence[str]:
        return pulumi.get(self, "match_extcommunity_lists_legacies")

    @property
    @pulumi.getter(name="matchInterfaces")
    def match_interfaces(self) -> Sequence[str]:
        return pulumi.get(self, "match_interfaces")

    @property
    @pulumi.getter(name="matchIpAddressAccessLists")
    def match_ip_address_access_lists(self) -> Sequence[str]:
        return pulumi.get(self, "match_ip_address_access_lists")

    @property
    @pulumi.getter(name="matchIpAddressPrefixLists")
    def match_ip_address_prefix_lists(self) -> Sequence[str]:
        return pulumi.get(self, "match_ip_address_prefix_lists")

    @property
    @pulumi.getter(name="matchIpNextHopAccessLists")
    def match_ip_next_hop_access_lists(self) -> Sequence[str]:
        return pulumi.get(self, "match_ip_next_hop_access_lists")

    @property
    @pulumi.getter(name="matchIpNextHopPrefixLists")
    def match_ip_next_hop_prefix_lists(self) -> Sequence[str]:
        return pulumi.get(self, "match_ip_next_hop_prefix_lists")

    @property
    @pulumi.getter(name="matchIpv6AddressAccessLists")
    def match_ipv6_address_access_lists(self) -> str:
        return pulumi.get(self, "match_ipv6_address_access_lists")

    @property
    @pulumi.getter(name="matchIpv6AddressPrefixLists")
    def match_ipv6_address_prefix_lists(self) -> str:
        return pulumi.get(self, "match_ipv6_address_prefix_lists")

    @property
    @pulumi.getter(name="matchIpv6NextHopAccessLists")
    def match_ipv6_next_hop_access_lists(self) -> str:
        return pulumi.get(self, "match_ipv6_next_hop_access_lists")

    @property
    @pulumi.getter(name="matchIpv6NextHopPrefixLists")
    def match_ipv6_next_hop_prefix_lists(self) -> str:
        return pulumi.get(self, "match_ipv6_next_hop_prefix_lists")

    @property
    @pulumi.getter(name="matchLocalPreferences")
    def match_local_preferences(self) -> Sequence[int]:
        return pulumi.get(self, "match_local_preferences")

    @property
    @pulumi.getter(name="matchLocalPreferencesLegacies")
    def match_local_preferences_legacies(self) -> Sequence[int]:
        return pulumi.get(self, "match_local_preferences_legacies")

    @property
    @pulumi.getter(name="matchRouteTypeExternal")
    def match_route_type_external(self) -> bool:
        return pulumi.get(self, "match_route_type_external")

    @property
    @pulumi.getter(name="matchRouteTypeExternalType1")
    def match_route_type_external_type1(self) -> bool:
        return pulumi.get(self, "match_route_type_external_type1")

    @property
    @pulumi.getter(name="matchRouteTypeExternalType2")
    def match_route_type_external_type2(self) -> bool:
        return pulumi.get(self, "match_route_type_external_type2")

    @property
    @pulumi.getter(name="matchRouteTypeInternal")
    def match_route_type_internal(self) -> bool:
        return pulumi.get(self, "match_route_type_internal")

    @property
    @pulumi.getter(name="matchRouteTypeLevel1")
    def match_route_type_level1(self) -> bool:
        return pulumi.get(self, "match_route_type_level1")

    @property
    @pulumi.getter(name="matchRouteTypeLevel2")
    def match_route_type_level2(self) -> bool:
        return pulumi.get(self, "match_route_type_level2")

    @property
    @pulumi.getter(name="matchRouteTypeLocal")
    def match_route_type_local(self) -> bool:
        return pulumi.get(self, "match_route_type_local")

    @property
    @pulumi.getter(name="matchSourceProtocolBgps")
    def match_source_protocol_bgps(self) -> Sequence[str]:
        return pulumi.get(self, "match_source_protocol_bgps")

    @property
    @pulumi.getter(name="matchSourceProtocolConnected")
    def match_source_protocol_connected(self) -> bool:
        return pulumi.get(self, "match_source_protocol_connected")

    @property
    @pulumi.getter(name="matchSourceProtocolEigrps")
    def match_source_protocol_eigrps(self) -> Sequence[str]:
        return pulumi.get(self, "match_source_protocol_eigrps")

    @property
    @pulumi.getter(name="matchSourceProtocolIsis")
    def match_source_protocol_isis(self) -> bool:
        return pulumi.get(self, "match_source_protocol_isis")

    @property
    @pulumi.getter(name="matchSourceProtocolLisp")
    def match_source_protocol_lisp(self) -> bool:
        return pulumi.get(self, "match_source_protocol_lisp")

    @property
    @pulumi.getter(name="matchSourceProtocolOspfs")
    def match_source_protocol_ospfs(self) -> Sequence[str]:
        return pulumi.get(self, "match_source_protocol_ospfs")

    @property
    @pulumi.getter(name="matchSourceProtocolOspfv3s")
    def match_source_protocol_ospfv3s(self) -> Sequence[str]:
        return pulumi.get(self, "match_source_protocol_ospfv3s")

    @property
    @pulumi.getter(name="matchSourceProtocolRip")
    def match_source_protocol_rip(self) -> bool:
        return pulumi.get(self, "match_source_protocol_rip")

    @property
    @pulumi.getter(name="matchSourceProtocolStatic")
    def match_source_protocol_static(self) -> bool:
        return pulumi.get(self, "match_source_protocol_static")

    @property
    @pulumi.getter(name="matchTags")
    def match_tags(self) -> Sequence[int]:
        return pulumi.get(self, "match_tags")

    @property
    @pulumi.getter(name="matchTrack")
    def match_track(self) -> int:
        return pulumi.get(self, "match_track")

    @property
    @pulumi.getter
    def operation(self) -> str:
        return pulumi.get(self, "operation")

    @property
    @pulumi.getter
    def seq(self) -> int:
        return pulumi.get(self, "seq")

    @property
    @pulumi.getter(name="setAsPathPrependAs")
    def set_as_path_prepend_as(self) -> str:
        return pulumi.get(self, "set_as_path_prepend_as")

    @property
    @pulumi.getter(name="setAsPathPrependAsLegacy")
    def set_as_path_prepend_as_legacy(self) -> str:
        return pulumi.get(self, "set_as_path_prepend_as_legacy")

    @property
    @pulumi.getter(name="setAsPathPrependLastAs")
    def set_as_path_prepend_last_as(self) -> int:
        return pulumi.get(self, "set_as_path_prepend_last_as")

    @property
    @pulumi.getter(name="setAsPathPrependLastAsLegacy")
    def set_as_path_prepend_last_as_legacy(self) -> int:
        return pulumi.get(self, "set_as_path_prepend_last_as_legacy")

    @property
    @pulumi.getter(name="setAsPathTag")
    def set_as_path_tag(self) -> bool:
        return pulumi.get(self, "set_as_path_tag")

    @property
    @pulumi.getter(name="setAsPathTagLegacy")
    def set_as_path_tag_legacy(self) -> bool:
        return pulumi.get(self, "set_as_path_tag_legacy")

    @property
    @pulumi.getter(name="setCommunities")
    def set_communities(self) -> Sequence[str]:
        return pulumi.get(self, "set_communities")

    @property
    @pulumi.getter(name="setCommunitiesAdditive")
    def set_communities_additive(self) -> bool:
        return pulumi.get(self, "set_communities_additive")

    @property
    @pulumi.getter(name="setCommunitiesAdditiveLegacy")
    def set_communities_additive_legacy(self) -> bool:
        return pulumi.get(self, "set_communities_additive_legacy")

    @property
    @pulumi.getter(name="setCommunitiesLegacies")
    def set_communities_legacies(self) -> Sequence[str]:
        return pulumi.get(self, "set_communities_legacies")

    @property
    @pulumi.getter(name="setCommunityListDelete")
    def set_community_list_delete(self) -> bool:
        return pulumi.get(self, "set_community_list_delete")

    @property
    @pulumi.getter(name="setCommunityListDeleteLegacy")
    def set_community_list_delete_legacy(self) -> bool:
        return pulumi.get(self, "set_community_list_delete_legacy")

    @property
    @pulumi.getter(name="setCommunityListExpanded")
    def set_community_list_expanded(self) -> int:
        return pulumi.get(self, "set_community_list_expanded")

    @property
    @pulumi.getter(name="setCommunityListExpandedLegacy")
    def set_community_list_expanded_legacy(self) -> int:
        return pulumi.get(self, "set_community_list_expanded_legacy")

    @property
    @pulumi.getter(name="setCommunityListName")
    def set_community_list_name(self) -> str:
        return pulumi.get(self, "set_community_list_name")

    @property
    @pulumi.getter(name="setCommunityListNameLegacy")
    def set_community_list_name_legacy(self) -> str:
        return pulumi.get(self, "set_community_list_name_legacy")

    @property
    @pulumi.getter(name="setCommunityListStandard")
    def set_community_list_standard(self) -> int:
        return pulumi.get(self, "set_community_list_standard")

    @property
    @pulumi.getter(name="setCommunityListStandardLegacy")
    def set_community_list_standard_legacy(self) -> int:
        return pulumi.get(self, "set_community_list_standard_legacy")

    @property
    @pulumi.getter(name="setCommunityNone")
    def set_community_none(self) -> bool:
        return pulumi.get(self, "set_community_none")

    @property
    @pulumi.getter(name="setCommunityNoneLegacy")
    def set_community_none_legacy(self) -> bool:
        return pulumi.get(self, "set_community_none_legacy")

    @property
    @pulumi.getter(name="setDefaultInterfaces")
    def set_default_interfaces(self) -> Sequence[str]:
        return pulumi.get(self, "set_default_interfaces")

    @property
    @pulumi.getter(name="setExtcomunityRtLegacies")
    def set_extcomunity_rt_legacies(self) -> Sequence[str]:
        return pulumi.get(self, "set_extcomunity_rt_legacies")

    @property
    @pulumi.getter(name="setExtcomunityRts")
    def set_extcomunity_rts(self) -> Sequence[str]:
        return pulumi.get(self, "set_extcomunity_rts")

    @property
    @pulumi.getter(name="setExtcomunitySoo")
    def set_extcomunity_soo(self) -> str:
        return pulumi.get(self, "set_extcomunity_soo")

    @property
    @pulumi.getter(name="setExtcomunitySooLegacy")
    def set_extcomunity_soo_legacy(self) -> str:
        return pulumi.get(self, "set_extcomunity_soo_legacy")

    @property
    @pulumi.getter(name="setExtcomunityVpnDistinguisher")
    def set_extcomunity_vpn_distinguisher(self) -> str:
        return pulumi.get(self, "set_extcomunity_vpn_distinguisher")

    @property
    @pulumi.getter(name="setExtcomunityVpnDistinguisherAdditive")
    def set_extcomunity_vpn_distinguisher_additive(self) -> bool:
        return pulumi.get(self, "set_extcomunity_vpn_distinguisher_additive")

    @property
    @pulumi.getter(name="setExtcomunityVpnDistinguisherLegacy")
    def set_extcomunity_vpn_distinguisher_legacy(self) -> str:
        return pulumi.get(self, "set_extcomunity_vpn_distinguisher_legacy")

    @property
    @pulumi.getter(name="setGlobal")
    def set_global(self) -> bool:
        return pulumi.get(self, "set_global")

    @property
    @pulumi.getter(name="setInterfaces")
    def set_interfaces(self) -> Sequence[str]:
        return pulumi.get(self, "set_interfaces")

    @property
    @pulumi.getter(name="setIpAddress")
    def set_ip_address(self) -> str:
        return pulumi.get(self, "set_ip_address")

    @property
    @pulumi.getter(name="setIpDefaultGlobalNextHopAddresses")
    def set_ip_default_global_next_hop_addresses(self) -> Sequence[str]:
        return pulumi.get(self, "set_ip_default_global_next_hop_addresses")

    @property
    @pulumi.getter(name="setIpDefaultNextHopAddresses")
    def set_ip_default_next_hop_addresses(self) -> Sequence[str]:
        return pulumi.get(self, "set_ip_default_next_hop_addresses")

    @property
    @pulumi.getter(name="setIpGlobalNextHopAddresses")
    def set_ip_global_next_hop_addresses(self) -> Sequence[str]:
        return pulumi.get(self, "set_ip_global_next_hop_addresses")

    @property
    @pulumi.getter(name="setIpNextHopAddresses")
    def set_ip_next_hop_addresses(self) -> Sequence[str]:
        return pulumi.get(self, "set_ip_next_hop_addresses")

    @property
    @pulumi.getter(name="setIpNextHopSelf")
    def set_ip_next_hop_self(self) -> bool:
        return pulumi.get(self, "set_ip_next_hop_self")

    @property
    @pulumi.getter(name="setIpQosGroup")
    def set_ip_qos_group(self) -> int:
        return pulumi.get(self, "set_ip_qos_group")

    @property
    @pulumi.getter(name="setIpv6Addresses")
    def set_ipv6_addresses(self) -> Sequence[str]:
        return pulumi.get(self, "set_ipv6_addresses")

    @property
    @pulumi.getter(name="setIpv6DefaultGlobalNextHop")
    def set_ipv6_default_global_next_hop(self) -> str:
        return pulumi.get(self, "set_ipv6_default_global_next_hop")

    @property
    @pulumi.getter(name="setIpv6DefaultNextHops")
    def set_ipv6_default_next_hops(self) -> Sequence[str]:
        return pulumi.get(self, "set_ipv6_default_next_hops")

    @property
    @pulumi.getter(name="setIpv6NextHops")
    def set_ipv6_next_hops(self) -> Sequence[str]:
        return pulumi.get(self, "set_ipv6_next_hops")

    @property
    @pulumi.getter(name="setLevel1")
    def set_level1(self) -> bool:
        return pulumi.get(self, "set_level1")

    @property
    @pulumi.getter(name="setLevel12")
    def set_level12(self) -> bool:
        return pulumi.get(self, "set_level12")

    @property
    @pulumi.getter(name="setLevel2")
    def set_level2(self) -> bool:
        return pulumi.get(self, "set_level2")

    @property
    @pulumi.getter(name="setLocalPreference")
    def set_local_preference(self) -> int:
        return pulumi.get(self, "set_local_preference")

    @property
    @pulumi.getter(name="setLocalPreferenceLegacy")
    def set_local_preference_legacy(self) -> int:
        return pulumi.get(self, "set_local_preference_legacy")

    @property
    @pulumi.getter(name="setMetricChange")
    def set_metric_change(self) -> str:
        return pulumi.get(self, "set_metric_change")

    @property
    @pulumi.getter(name="setMetricDelay")
    def set_metric_delay(self) -> str:
        return pulumi.get(self, "set_metric_delay")

    @property
    @pulumi.getter(name="setMetricLoading")
    def set_metric_loading(self) -> int:
        return pulumi.get(self, "set_metric_loading")

    @property
    @pulumi.getter(name="setMetricMtu")
    def set_metric_mtu(self) -> int:
        return pulumi.get(self, "set_metric_mtu")

    @property
    @pulumi.getter(name="setMetricReliability")
    def set_metric_reliability(self) -> int:
        return pulumi.get(self, "set_metric_reliability")

    @property
    @pulumi.getter(name="setMetricType")
    def set_metric_type(self) -> str:
        return pulumi.get(self, "set_metric_type")

    @property
    @pulumi.getter(name="setMetricValue")
    def set_metric_value(self) -> int:
        return pulumi.get(self, "set_metric_value")

    @property
    @pulumi.getter(name="setTag")
    def set_tag(self) -> int:
        return pulumi.get(self, "set_tag")

    @property
    @pulumi.getter(name="setVrf")
    def set_vrf(self) -> str:
        return pulumi.get(self, "set_vrf")

    @property
    @pulumi.getter(name="setWeight")
    def set_weight(self) -> int:
        return pulumi.get(self, "set_weight")

    @property
    @pulumi.getter(name="setWeightLegacy")
    def set_weight_legacy(self) -> int:
        return pulumi.get(self, "set_weight_legacy")


@pulumi.output_type
class GetServiceTemplateAccessGroupResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetServiceTemplateInterfaceTemplateResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetServiceTemplateTagResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSnmpServerContextResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetSnmpServerGroupV3SecurityResult(dict):
    def __init__(__self__, *,
                 access_acl_name: str,
                 access_ipv6_acl: str,
                 access_standard_acl: int,
                 context_node: str,
                 match_node: str,
                 notify_node: str,
                 read_node: str,
                 security_level: str,
                 write_node: str):
        pulumi.set(__self__, "access_acl_name", access_acl_name)
        pulumi.set(__self__, "access_ipv6_acl", access_ipv6_acl)
        pulumi.set(__self__, "access_standard_acl", access_standard_acl)
        pulumi.set(__self__, "context_node", context_node)
        pulumi.set(__self__, "match_node", match_node)
        pulumi.set(__self__, "notify_node", notify_node)
        pulumi.set(__self__, "read_node", read_node)
        pulumi.set(__self__, "security_level", security_level)
        pulumi.set(__self__, "write_node", write_node)

    @property
    @pulumi.getter(name="accessAclName")
    def access_acl_name(self) -> str:
        return pulumi.get(self, "access_acl_name")

    @property
    @pulumi.getter(name="accessIpv6Acl")
    def access_ipv6_acl(self) -> str:
        return pulumi.get(self, "access_ipv6_acl")

    @property
    @pulumi.getter(name="accessStandardAcl")
    def access_standard_acl(self) -> int:
        return pulumi.get(self, "access_standard_acl")

    @property
    @pulumi.getter(name="contextNode")
    def context_node(self) -> str:
        return pulumi.get(self, "context_node")

    @property
    @pulumi.getter(name="matchNode")
    def match_node(self) -> str:
        return pulumi.get(self, "match_node")

    @property
    @pulumi.getter(name="notifyNode")
    def notify_node(self) -> str:
        return pulumi.get(self, "notify_node")

    @property
    @pulumi.getter(name="readNode")
    def read_node(self) -> str:
        return pulumi.get(self, "read_node")

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> str:
        return pulumi.get(self, "security_level")

    @property
    @pulumi.getter(name="writeNode")
    def write_node(self) -> str:
        return pulumi.get(self, "write_node")


@pulumi.output_type
class GetSnmpServerHostResult(dict):
    def __init__(__self__, *,
                 community_or_user: str,
                 encryption: str,
                 ip_address: str,
                 version: str):
        pulumi.set(__self__, "community_or_user", community_or_user)
        pulumi.set(__self__, "encryption", encryption)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="communityOrUser")
    def community_or_user(self) -> str:
        return pulumi.get(self, "community_or_user")

    @property
    @pulumi.getter
    def encryption(self) -> str:
        return pulumi.get(self, "encryption")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetSnmpServerSnmpCommunityResult(dict):
    def __init__(__self__, *,
                 access_list_name: str,
                 ipv6: str,
                 name: str,
                 permission: str,
                 view: str):
        pulumi.set(__self__, "access_list_name", access_list_name)
        pulumi.set(__self__, "ipv6", ipv6)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "permission", permission)
        pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter(name="accessListName")
    def access_list_name(self) -> str:
        return pulumi.get(self, "access_list_name")

    @property
    @pulumi.getter
    def ipv6(self) -> str:
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permission(self) -> str:
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter
    def view(self) -> str:
        return pulumi.get(self, "view")


@pulumi.output_type
class GetSnmpServerViewResult(dict):
    def __init__(__self__, *,
                 inc_exl: str,
                 mib: str,
                 name: str):
        pulumi.set(__self__, "inc_exl", inc_exl)
        pulumi.set(__self__, "mib", mib)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="incExl")
    def inc_exl(self) -> str:
        return pulumi.get(self, "inc_exl")

    @property
    @pulumi.getter
    def mib(self) -> str:
        return pulumi.get(self, "mib")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetStaticRouteNextHopResult(dict):
    def __init__(__self__, *,
                 global_: bool,
                 metric: int,
                 name: str,
                 next_hop: str,
                 permanent: bool,
                 tag: int):
        pulumi.set(__self__, "global_", global_)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_hop", next_hop)
        pulumi.set(__self__, "permanent", permanent)
        pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="global")
    def global_(self) -> bool:
        return pulumi.get(self, "global_")

    @property
    @pulumi.getter
    def metric(self) -> int:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> str:
        return pulumi.get(self, "next_hop")

    @property
    @pulumi.getter
    def permanent(self) -> bool:
        return pulumi.get(self, "permanent")

    @property
    @pulumi.getter
    def tag(self) -> int:
        return pulumi.get(self, "tag")


@pulumi.output_type
class GetStaticRouteVrfRouteResult(dict):
    def __init__(__self__, *,
                 mask: str,
                 next_hops: Sequence['outputs.GetStaticRouteVrfRouteNextHopResult'],
                 prefix: str):
        pulumi.set(__self__, "mask", mask)
        pulumi.set(__self__, "next_hops", next_hops)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def mask(self) -> str:
        return pulumi.get(self, "mask")

    @property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Sequence['outputs.GetStaticRouteVrfRouteNextHopResult']:
        return pulumi.get(self, "next_hops")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class GetStaticRouteVrfRouteNextHopResult(dict):
    def __init__(__self__, *,
                 global_: bool,
                 metric: int,
                 name: str,
                 next_hop: str,
                 permanent: bool,
                 tag: int):
        pulumi.set(__self__, "global_", global_)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "next_hop", next_hop)
        pulumi.set(__self__, "permanent", permanent)
        pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="global")
    def global_(self) -> bool:
        return pulumi.get(self, "global_")

    @property
    @pulumi.getter
    def metric(self) -> int:
        return pulumi.get(self, "metric")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> str:
        return pulumi.get(self, "next_hop")

    @property
    @pulumi.getter
    def permanent(self) -> bool:
        return pulumi.get(self, "permanent")

    @property
    @pulumi.getter
    def tag(self) -> int:
        return pulumi.get(self, "tag")


@pulumi.output_type
class GetSystemMulticastRoutingVrfResult(dict):
    def __init__(__self__, *,
                 distributed: bool,
                 vrf: str):
        pulumi.set(__self__, "distributed", distributed)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def distributed(self) -> bool:
        return pulumi.get(self, "distributed")

    @property
    @pulumi.getter
    def vrf(self) -> str:
        return pulumi.get(self, "vrf")


@pulumi.output_type
class GetTemplateDeviceTrackingAttachPolicyResult(dict):
    def __init__(__self__, *,
                 policy_name: str,
                 vlan_range: str):
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "vlan_range", vlan_range)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="vlanRange")
    def vlan_range(self) -> str:
        return pulumi.get(self, "vlan_range")


@pulumi.output_type
class GetTemplateIpAccessGroupResult(dict):
    def __init__(__self__, *,
                 access_list: str,
                 direction: str):
        pulumi.set(__self__, "access_list", access_list)
        pulumi.set(__self__, "direction", direction)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> str:
        return pulumi.get(self, "access_list")

    @property
    @pulumi.getter
    def direction(self) -> str:
        return pulumi.get(self, "direction")


@pulumi.output_type
class GetTemplateSwitchportPortSecurityMaximumRangeResult(dict):
    def __init__(__self__, *,
                 range: int,
                 vlan: bool,
                 vlan_access: bool):
        pulumi.set(__self__, "range", range)
        pulumi.set(__self__, "vlan", vlan)
        pulumi.set(__self__, "vlan_access", vlan_access)

    @property
    @pulumi.getter
    def range(self) -> int:
        return pulumi.get(self, "range")

    @property
    @pulumi.getter
    def vlan(self) -> bool:
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter(name="vlanAccess")
    def vlan_access(self) -> bool:
        return pulumi.get(self, "vlan_access")


@pulumi.output_type
class GetVrfIpv4RouteTargetExportResult(dict):
    def __init__(__self__, *,
                 value: str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVrfIpv4RouteTargetExportStitchingResult(dict):
    def __init__(__self__, *,
                 stitching: bool,
                 value: str):
        pulumi.set(__self__, "stitching", stitching)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def stitching(self) -> bool:
        return pulumi.get(self, "stitching")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVrfIpv4RouteTargetImportResult(dict):
    def __init__(__self__, *,
                 value: str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVrfIpv4RouteTargetImportStitchingResult(dict):
    def __init__(__self__, *,
                 stitching: bool,
                 value: str):
        pulumi.set(__self__, "stitching", stitching)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def stitching(self) -> bool:
        return pulumi.get(self, "stitching")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVrfIpv6RouteTargetExportResult(dict):
    def __init__(__self__, *,
                 value: str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVrfIpv6RouteTargetExportStitchingResult(dict):
    def __init__(__self__, *,
                 stitching: bool,
                 value: str):
        pulumi.set(__self__, "stitching", stitching)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def stitching(self) -> bool:
        return pulumi.get(self, "stitching")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVrfIpv6RouteTargetImportResult(dict):
    def __init__(__self__, *,
                 value: str):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVrfIpv6RouteTargetImportStitchingResult(dict):
    def __init__(__self__, *,
                 stitching: bool,
                 value: str):
        pulumi.set(__self__, "stitching", stitching)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def stitching(self) -> bool:
        return pulumi.get(self, "stitching")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVrfRouteTargetExportResult(dict):
    def __init__(__self__, *,
                 stitching: bool,
                 value: str):
        pulumi.set(__self__, "stitching", stitching)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def stitching(self) -> bool:
        return pulumi.get(self, "stitching")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVrfRouteTargetImportResult(dict):
    def __init__(__self__, *,
                 stitching: bool,
                 value: str):
        pulumi.set(__self__, "stitching", stitching)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def stitching(self) -> bool:
        return pulumi.get(self, "stitching")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


