# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InterfaceTunnelArgs', 'InterfaceTunnel']

@pulumi.input_type
class InterfaceTunnelArgs:
    def __init__(__self__, *,
                 arp_timeout: Optional[pulumi.Input[int]] = None,
                 bfd_echo: Optional[pulumi.Input[bool]] = None,
                 bfd_enable: Optional[pulumi.Input[bool]] = None,
                 bfd_interval: Optional[pulumi.Input[int]] = None,
                 bfd_interval_min_rx: Optional[pulumi.Input[int]] = None,
                 bfd_interval_multiplier: Optional[pulumi.Input[int]] = None,
                 bfd_local_address: Optional[pulumi.Input[str]] = None,
                 bfd_template: Optional[pulumi.Input[str]] = None,
                 crypto_ipsec_df_bit: Optional[pulumi.Input[str]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 helper_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceTunnelHelperAddressArgs']]]] = None,
                 ip_access_group_in: Optional[pulumi.Input[str]] = None,
                 ip_access_group_in_enable: Optional[pulumi.Input[bool]] = None,
                 ip_access_group_out: Optional[pulumi.Input[str]] = None,
                 ip_access_group_out_enable: Optional[pulumi.Input[bool]] = None,
                 ip_dhcp_relay_source_interface: Optional[pulumi.Input[str]] = None,
                 ip_proxy_arp: Optional[pulumi.Input[bool]] = None,
                 ip_redirects: Optional[pulumi.Input[bool]] = None,
                 ip_unreachables: Optional[pulumi.Input[bool]] = None,
                 ipv4_address: Optional[pulumi.Input[str]] = None,
                 ipv4_address_mask: Optional[pulumi.Input[str]] = None,
                 ipv6_address_autoconfig_default: Optional[pulumi.Input[bool]] = None,
                 ipv6_address_dhcp: Optional[pulumi.Input[bool]] = None,
                 ipv6_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceTunnelIpv6AddressArgs']]]] = None,
                 ipv6_enable: Optional[pulumi.Input[bool]] = None,
                 ipv6_link_local_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceTunnelIpv6LinkLocalAddressArgs']]]] = None,
                 ipv6_mtu: Optional[pulumi.Input[int]] = None,
                 ipv6_nd_ra_suppress_all: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[int]] = None,
                 shutdown: Optional[pulumi.Input[bool]] = None,
                 tunnel_destination_ipv4: Optional[pulumi.Input[str]] = None,
                 tunnel_mode_ipsec_ipv4: Optional[pulumi.Input[bool]] = None,
                 tunnel_protection_ipsec_profile: Optional[pulumi.Input[str]] = None,
                 tunnel_source: Optional[pulumi.Input[str]] = None,
                 unnumbered: Optional[pulumi.Input[str]] = None,
                 vrf_forwarding: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a InterfaceTunnel resource.
        :param pulumi.Input[int] arp_timeout: Set ARP cache timeout - Range: `0`-`2147483`
        :param pulumi.Input[bool] bfd_echo: Use echo adjunct as bfd detection mechanism
        :param pulumi.Input[bool] bfd_enable: Enable BFD under the interface
        :param pulumi.Input[int] bfd_interval: - Range: `50`-`9999`
        :param pulumi.Input[int] bfd_interval_min_rx: Minimum receive interval capability - Range: `50`-`9999`
        :param pulumi.Input[int] bfd_interval_multiplier: Multiplier value used to compute holddown - Range: `3`-`50`
        :param pulumi.Input[str] bfd_local_address: The Source IP address to be used for BFD sessions over this interface.
        :param pulumi.Input[str] bfd_template: BFD template
        :param pulumi.Input[str] crypto_ipsec_df_bit: Handling of encapsulated DF bit. - Choices: `clear`, `copy`, `set`
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] description: Interface specific description
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceTunnelHelperAddressArgs']]] helper_addresses: Specify a destination address for UDP broadcasts
        :param pulumi.Input[bool] ip_access_group_in_enable: inbound packets
        :param pulumi.Input[bool] ip_access_group_out_enable: outbound packets
        :param pulumi.Input[str] ip_dhcp_relay_source_interface: Set source interface for relayed messages
        :param pulumi.Input[bool] ip_proxy_arp: Enable proxy ARP
        :param pulumi.Input[bool] ip_redirects: Enable sending ICMP Redirect messages
        :param pulumi.Input[bool] ip_unreachables: Enable sending ICMP Unreachable messages
        :param pulumi.Input[bool] ipv6_address_autoconfig_default: Insert default route
        :param pulumi.Input[bool] ipv6_address_dhcp: Obtain IPv6 address from DHCP server
        :param pulumi.Input[bool] ipv6_enable: Enable IPv6 on interface
        :param pulumi.Input[int] ipv6_mtu: Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
        :param pulumi.Input[bool] ipv6_nd_ra_suppress_all: Suppress all IPv6 RA
        :param pulumi.Input[int] name: - Range: `0`-`4294967295`
        :param pulumi.Input[bool] shutdown: Shutdown the selected interface
        :param pulumi.Input[str] tunnel_destination_ipv4: ip address or host name
        :param pulumi.Input[bool] tunnel_mode_ipsec_ipv4: over IPv4
        :param pulumi.Input[str] tunnel_protection_ipsec_profile: Determine the ipsec policy profile to use.
        :param pulumi.Input[str] tunnel_source: source of tunnel packets
        :param pulumi.Input[str] unnumbered: Enable IP processing without an explicit address
        :param pulumi.Input[str] vrf_forwarding: Configure forwarding table
        """
        if arp_timeout is not None:
            pulumi.set(__self__, "arp_timeout", arp_timeout)
        if bfd_echo is not None:
            pulumi.set(__self__, "bfd_echo", bfd_echo)
        if bfd_enable is not None:
            pulumi.set(__self__, "bfd_enable", bfd_enable)
        if bfd_interval is not None:
            pulumi.set(__self__, "bfd_interval", bfd_interval)
        if bfd_interval_min_rx is not None:
            pulumi.set(__self__, "bfd_interval_min_rx", bfd_interval_min_rx)
        if bfd_interval_multiplier is not None:
            pulumi.set(__self__, "bfd_interval_multiplier", bfd_interval_multiplier)
        if bfd_local_address is not None:
            pulumi.set(__self__, "bfd_local_address", bfd_local_address)
        if bfd_template is not None:
            pulumi.set(__self__, "bfd_template", bfd_template)
        if crypto_ipsec_df_bit is not None:
            pulumi.set(__self__, "crypto_ipsec_df_bit", crypto_ipsec_df_bit)
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if helper_addresses is not None:
            pulumi.set(__self__, "helper_addresses", helper_addresses)
        if ip_access_group_in is not None:
            pulumi.set(__self__, "ip_access_group_in", ip_access_group_in)
        if ip_access_group_in_enable is not None:
            pulumi.set(__self__, "ip_access_group_in_enable", ip_access_group_in_enable)
        if ip_access_group_out is not None:
            pulumi.set(__self__, "ip_access_group_out", ip_access_group_out)
        if ip_access_group_out_enable is not None:
            pulumi.set(__self__, "ip_access_group_out_enable", ip_access_group_out_enable)
        if ip_dhcp_relay_source_interface is not None:
            pulumi.set(__self__, "ip_dhcp_relay_source_interface", ip_dhcp_relay_source_interface)
        if ip_proxy_arp is not None:
            pulumi.set(__self__, "ip_proxy_arp", ip_proxy_arp)
        if ip_redirects is not None:
            pulumi.set(__self__, "ip_redirects", ip_redirects)
        if ip_unreachables is not None:
            pulumi.set(__self__, "ip_unreachables", ip_unreachables)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_address_mask is not None:
            pulumi.set(__self__, "ipv4_address_mask", ipv4_address_mask)
        if ipv6_address_autoconfig_default is not None:
            pulumi.set(__self__, "ipv6_address_autoconfig_default", ipv6_address_autoconfig_default)
        if ipv6_address_dhcp is not None:
            pulumi.set(__self__, "ipv6_address_dhcp", ipv6_address_dhcp)
        if ipv6_addresses is not None:
            pulumi.set(__self__, "ipv6_addresses", ipv6_addresses)
        if ipv6_enable is not None:
            pulumi.set(__self__, "ipv6_enable", ipv6_enable)
        if ipv6_link_local_addresses is not None:
            pulumi.set(__self__, "ipv6_link_local_addresses", ipv6_link_local_addresses)
        if ipv6_mtu is not None:
            pulumi.set(__self__, "ipv6_mtu", ipv6_mtu)
        if ipv6_nd_ra_suppress_all is not None:
            pulumi.set(__self__, "ipv6_nd_ra_suppress_all", ipv6_nd_ra_suppress_all)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if tunnel_destination_ipv4 is not None:
            pulumi.set(__self__, "tunnel_destination_ipv4", tunnel_destination_ipv4)
        if tunnel_mode_ipsec_ipv4 is not None:
            pulumi.set(__self__, "tunnel_mode_ipsec_ipv4", tunnel_mode_ipsec_ipv4)
        if tunnel_protection_ipsec_profile is not None:
            pulumi.set(__self__, "tunnel_protection_ipsec_profile", tunnel_protection_ipsec_profile)
        if tunnel_source is not None:
            pulumi.set(__self__, "tunnel_source", tunnel_source)
        if unnumbered is not None:
            pulumi.set(__self__, "unnumbered", unnumbered)
        if vrf_forwarding is not None:
            pulumi.set(__self__, "vrf_forwarding", vrf_forwarding)

    @property
    @pulumi.getter(name="arpTimeout")
    def arp_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Set ARP cache timeout - Range: `0`-`2147483`
        """
        return pulumi.get(self, "arp_timeout")

    @arp_timeout.setter
    def arp_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "arp_timeout", value)

    @property
    @pulumi.getter(name="bfdEcho")
    def bfd_echo(self) -> Optional[pulumi.Input[bool]]:
        """
        Use echo adjunct as bfd detection mechanism
        """
        return pulumi.get(self, "bfd_echo")

    @bfd_echo.setter
    def bfd_echo(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bfd_echo", value)

    @property
    @pulumi.getter(name="bfdEnable")
    def bfd_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable BFD under the interface
        """
        return pulumi.get(self, "bfd_enable")

    @bfd_enable.setter
    def bfd_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bfd_enable", value)

    @property
    @pulumi.getter(name="bfdInterval")
    def bfd_interval(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `50`-`9999`
        """
        return pulumi.get(self, "bfd_interval")

    @bfd_interval.setter
    def bfd_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_interval", value)

    @property
    @pulumi.getter(name="bfdIntervalMinRx")
    def bfd_interval_min_rx(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum receive interval capability - Range: `50`-`9999`
        """
        return pulumi.get(self, "bfd_interval_min_rx")

    @bfd_interval_min_rx.setter
    def bfd_interval_min_rx(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_interval_min_rx", value)

    @property
    @pulumi.getter(name="bfdIntervalMultiplier")
    def bfd_interval_multiplier(self) -> Optional[pulumi.Input[int]]:
        """
        Multiplier value used to compute holddown - Range: `3`-`50`
        """
        return pulumi.get(self, "bfd_interval_multiplier")

    @bfd_interval_multiplier.setter
    def bfd_interval_multiplier(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_interval_multiplier", value)

    @property
    @pulumi.getter(name="bfdLocalAddress")
    def bfd_local_address(self) -> Optional[pulumi.Input[str]]:
        """
        The Source IP address to be used for BFD sessions over this interface.
        """
        return pulumi.get(self, "bfd_local_address")

    @bfd_local_address.setter
    def bfd_local_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd_local_address", value)

    @property
    @pulumi.getter(name="bfdTemplate")
    def bfd_template(self) -> Optional[pulumi.Input[str]]:
        """
        BFD template
        """
        return pulumi.get(self, "bfd_template")

    @bfd_template.setter
    def bfd_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd_template", value)

    @property
    @pulumi.getter(name="cryptoIpsecDfBit")
    def crypto_ipsec_df_bit(self) -> Optional[pulumi.Input[str]]:
        """
        Handling of encapsulated DF bit. - Choices: `clear`, `copy`, `set`
        """
        return pulumi.get(self, "crypto_ipsec_df_bit")

    @crypto_ipsec_df_bit.setter
    def crypto_ipsec_df_bit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "crypto_ipsec_df_bit", value)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Interface specific description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="helperAddresses")
    def helper_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceTunnelHelperAddressArgs']]]]:
        """
        Specify a destination address for UDP broadcasts
        """
        return pulumi.get(self, "helper_addresses")

    @helper_addresses.setter
    def helper_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceTunnelHelperAddressArgs']]]]):
        pulumi.set(self, "helper_addresses", value)

    @property
    @pulumi.getter(name="ipAccessGroupIn")
    def ip_access_group_in(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_access_group_in")

    @ip_access_group_in.setter
    def ip_access_group_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_access_group_in", value)

    @property
    @pulumi.getter(name="ipAccessGroupInEnable")
    def ip_access_group_in_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        inbound packets
        """
        return pulumi.get(self, "ip_access_group_in_enable")

    @ip_access_group_in_enable.setter
    def ip_access_group_in_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_access_group_in_enable", value)

    @property
    @pulumi.getter(name="ipAccessGroupOut")
    def ip_access_group_out(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_access_group_out")

    @ip_access_group_out.setter
    def ip_access_group_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_access_group_out", value)

    @property
    @pulumi.getter(name="ipAccessGroupOutEnable")
    def ip_access_group_out_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        outbound packets
        """
        return pulumi.get(self, "ip_access_group_out_enable")

    @ip_access_group_out_enable.setter
    def ip_access_group_out_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_access_group_out_enable", value)

    @property
    @pulumi.getter(name="ipDhcpRelaySourceInterface")
    def ip_dhcp_relay_source_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Set source interface for relayed messages
        """
        return pulumi.get(self, "ip_dhcp_relay_source_interface")

    @ip_dhcp_relay_source_interface.setter
    def ip_dhcp_relay_source_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_dhcp_relay_source_interface", value)

    @property
    @pulumi.getter(name="ipProxyArp")
    def ip_proxy_arp(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable proxy ARP
        """
        return pulumi.get(self, "ip_proxy_arp")

    @ip_proxy_arp.setter
    def ip_proxy_arp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_proxy_arp", value)

    @property
    @pulumi.getter(name="ipRedirects")
    def ip_redirects(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable sending ICMP Redirect messages
        """
        return pulumi.get(self, "ip_redirects")

    @ip_redirects.setter
    def ip_redirects(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_redirects", value)

    @property
    @pulumi.getter(name="ipUnreachables")
    def ip_unreachables(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable sending ICMP Unreachable messages
        """
        return pulumi.get(self, "ip_unreachables")

    @ip_unreachables.setter
    def ip_unreachables(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_unreachables", value)

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_address", value)

    @property
    @pulumi.getter(name="ipv4AddressMask")
    def ipv4_address_mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_address_mask")

    @ipv4_address_mask.setter
    def ipv4_address_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_address_mask", value)

    @property
    @pulumi.getter(name="ipv6AddressAutoconfigDefault")
    def ipv6_address_autoconfig_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Insert default route
        """
        return pulumi.get(self, "ipv6_address_autoconfig_default")

    @ipv6_address_autoconfig_default.setter
    def ipv6_address_autoconfig_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipv6_address_autoconfig_default", value)

    @property
    @pulumi.getter(name="ipv6AddressDhcp")
    def ipv6_address_dhcp(self) -> Optional[pulumi.Input[bool]]:
        """
        Obtain IPv6 address from DHCP server
        """
        return pulumi.get(self, "ipv6_address_dhcp")

    @ipv6_address_dhcp.setter
    def ipv6_address_dhcp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipv6_address_dhcp", value)

    @property
    @pulumi.getter(name="ipv6Addresses")
    def ipv6_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceTunnelIpv6AddressArgs']]]]:
        return pulumi.get(self, "ipv6_addresses")

    @ipv6_addresses.setter
    def ipv6_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceTunnelIpv6AddressArgs']]]]):
        pulumi.set(self, "ipv6_addresses", value)

    @property
    @pulumi.getter(name="ipv6Enable")
    def ipv6_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IPv6 on interface
        """
        return pulumi.get(self, "ipv6_enable")

    @ipv6_enable.setter
    def ipv6_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipv6_enable", value)

    @property
    @pulumi.getter(name="ipv6LinkLocalAddresses")
    def ipv6_link_local_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceTunnelIpv6LinkLocalAddressArgs']]]]:
        return pulumi.get(self, "ipv6_link_local_addresses")

    @ipv6_link_local_addresses.setter
    def ipv6_link_local_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceTunnelIpv6LinkLocalAddressArgs']]]]):
        pulumi.set(self, "ipv6_link_local_addresses", value)

    @property
    @pulumi.getter(name="ipv6Mtu")
    def ipv6_mtu(self) -> Optional[pulumi.Input[int]]:
        """
        Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
        """
        return pulumi.get(self, "ipv6_mtu")

    @ipv6_mtu.setter
    def ipv6_mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipv6_mtu", value)

    @property
    @pulumi.getter(name="ipv6NdRaSuppressAll")
    def ipv6_nd_ra_suppress_all(self) -> Optional[pulumi.Input[bool]]:
        """
        Suppress all IPv6 RA
        """
        return pulumi.get(self, "ipv6_nd_ra_suppress_all")

    @ipv6_nd_ra_suppress_all.setter
    def ipv6_nd_ra_suppress_all(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipv6_nd_ra_suppress_all", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[bool]]:
        """
        Shutdown the selected interface
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "shutdown", value)

    @property
    @pulumi.getter(name="tunnelDestinationIpv4")
    def tunnel_destination_ipv4(self) -> Optional[pulumi.Input[str]]:
        """
        ip address or host name
        """
        return pulumi.get(self, "tunnel_destination_ipv4")

    @tunnel_destination_ipv4.setter
    def tunnel_destination_ipv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_destination_ipv4", value)

    @property
    @pulumi.getter(name="tunnelModeIpsecIpv4")
    def tunnel_mode_ipsec_ipv4(self) -> Optional[pulumi.Input[bool]]:
        """
        over IPv4
        """
        return pulumi.get(self, "tunnel_mode_ipsec_ipv4")

    @tunnel_mode_ipsec_ipv4.setter
    def tunnel_mode_ipsec_ipv4(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tunnel_mode_ipsec_ipv4", value)

    @property
    @pulumi.getter(name="tunnelProtectionIpsecProfile")
    def tunnel_protection_ipsec_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Determine the ipsec policy profile to use.
        """
        return pulumi.get(self, "tunnel_protection_ipsec_profile")

    @tunnel_protection_ipsec_profile.setter
    def tunnel_protection_ipsec_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_protection_ipsec_profile", value)

    @property
    @pulumi.getter(name="tunnelSource")
    def tunnel_source(self) -> Optional[pulumi.Input[str]]:
        """
        source of tunnel packets
        """
        return pulumi.get(self, "tunnel_source")

    @tunnel_source.setter
    def tunnel_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_source", value)

    @property
    @pulumi.getter
    def unnumbered(self) -> Optional[pulumi.Input[str]]:
        """
        Enable IP processing without an explicit address
        """
        return pulumi.get(self, "unnumbered")

    @unnumbered.setter
    def unnumbered(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unnumbered", value)

    @property
    @pulumi.getter(name="vrfForwarding")
    def vrf_forwarding(self) -> Optional[pulumi.Input[str]]:
        """
        Configure forwarding table
        """
        return pulumi.get(self, "vrf_forwarding")

    @vrf_forwarding.setter
    def vrf_forwarding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf_forwarding", value)


@pulumi.input_type
class _InterfaceTunnelState:
    def __init__(__self__, *,
                 arp_timeout: Optional[pulumi.Input[int]] = None,
                 bfd_echo: Optional[pulumi.Input[bool]] = None,
                 bfd_enable: Optional[pulumi.Input[bool]] = None,
                 bfd_interval: Optional[pulumi.Input[int]] = None,
                 bfd_interval_min_rx: Optional[pulumi.Input[int]] = None,
                 bfd_interval_multiplier: Optional[pulumi.Input[int]] = None,
                 bfd_local_address: Optional[pulumi.Input[str]] = None,
                 bfd_template: Optional[pulumi.Input[str]] = None,
                 crypto_ipsec_df_bit: Optional[pulumi.Input[str]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 helper_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceTunnelHelperAddressArgs']]]] = None,
                 ip_access_group_in: Optional[pulumi.Input[str]] = None,
                 ip_access_group_in_enable: Optional[pulumi.Input[bool]] = None,
                 ip_access_group_out: Optional[pulumi.Input[str]] = None,
                 ip_access_group_out_enable: Optional[pulumi.Input[bool]] = None,
                 ip_dhcp_relay_source_interface: Optional[pulumi.Input[str]] = None,
                 ip_proxy_arp: Optional[pulumi.Input[bool]] = None,
                 ip_redirects: Optional[pulumi.Input[bool]] = None,
                 ip_unreachables: Optional[pulumi.Input[bool]] = None,
                 ipv4_address: Optional[pulumi.Input[str]] = None,
                 ipv4_address_mask: Optional[pulumi.Input[str]] = None,
                 ipv6_address_autoconfig_default: Optional[pulumi.Input[bool]] = None,
                 ipv6_address_dhcp: Optional[pulumi.Input[bool]] = None,
                 ipv6_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceTunnelIpv6AddressArgs']]]] = None,
                 ipv6_enable: Optional[pulumi.Input[bool]] = None,
                 ipv6_link_local_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceTunnelIpv6LinkLocalAddressArgs']]]] = None,
                 ipv6_mtu: Optional[pulumi.Input[int]] = None,
                 ipv6_nd_ra_suppress_all: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[int]] = None,
                 shutdown: Optional[pulumi.Input[bool]] = None,
                 tunnel_destination_ipv4: Optional[pulumi.Input[str]] = None,
                 tunnel_mode_ipsec_ipv4: Optional[pulumi.Input[bool]] = None,
                 tunnel_protection_ipsec_profile: Optional[pulumi.Input[str]] = None,
                 tunnel_source: Optional[pulumi.Input[str]] = None,
                 unnumbered: Optional[pulumi.Input[str]] = None,
                 vrf_forwarding: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering InterfaceTunnel resources.
        :param pulumi.Input[int] arp_timeout: Set ARP cache timeout - Range: `0`-`2147483`
        :param pulumi.Input[bool] bfd_echo: Use echo adjunct as bfd detection mechanism
        :param pulumi.Input[bool] bfd_enable: Enable BFD under the interface
        :param pulumi.Input[int] bfd_interval: - Range: `50`-`9999`
        :param pulumi.Input[int] bfd_interval_min_rx: Minimum receive interval capability - Range: `50`-`9999`
        :param pulumi.Input[int] bfd_interval_multiplier: Multiplier value used to compute holddown - Range: `3`-`50`
        :param pulumi.Input[str] bfd_local_address: The Source IP address to be used for BFD sessions over this interface.
        :param pulumi.Input[str] bfd_template: BFD template
        :param pulumi.Input[str] crypto_ipsec_df_bit: Handling of encapsulated DF bit. - Choices: `clear`, `copy`, `set`
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] description: Interface specific description
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input['InterfaceTunnelHelperAddressArgs']]] helper_addresses: Specify a destination address for UDP broadcasts
        :param pulumi.Input[bool] ip_access_group_in_enable: inbound packets
        :param pulumi.Input[bool] ip_access_group_out_enable: outbound packets
        :param pulumi.Input[str] ip_dhcp_relay_source_interface: Set source interface for relayed messages
        :param pulumi.Input[bool] ip_proxy_arp: Enable proxy ARP
        :param pulumi.Input[bool] ip_redirects: Enable sending ICMP Redirect messages
        :param pulumi.Input[bool] ip_unreachables: Enable sending ICMP Unreachable messages
        :param pulumi.Input[bool] ipv6_address_autoconfig_default: Insert default route
        :param pulumi.Input[bool] ipv6_address_dhcp: Obtain IPv6 address from DHCP server
        :param pulumi.Input[bool] ipv6_enable: Enable IPv6 on interface
        :param pulumi.Input[int] ipv6_mtu: Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
        :param pulumi.Input[bool] ipv6_nd_ra_suppress_all: Suppress all IPv6 RA
        :param pulumi.Input[int] name: - Range: `0`-`4294967295`
        :param pulumi.Input[bool] shutdown: Shutdown the selected interface
        :param pulumi.Input[str] tunnel_destination_ipv4: ip address or host name
        :param pulumi.Input[bool] tunnel_mode_ipsec_ipv4: over IPv4
        :param pulumi.Input[str] tunnel_protection_ipsec_profile: Determine the ipsec policy profile to use.
        :param pulumi.Input[str] tunnel_source: source of tunnel packets
        :param pulumi.Input[str] unnumbered: Enable IP processing without an explicit address
        :param pulumi.Input[str] vrf_forwarding: Configure forwarding table
        """
        if arp_timeout is not None:
            pulumi.set(__self__, "arp_timeout", arp_timeout)
        if bfd_echo is not None:
            pulumi.set(__self__, "bfd_echo", bfd_echo)
        if bfd_enable is not None:
            pulumi.set(__self__, "bfd_enable", bfd_enable)
        if bfd_interval is not None:
            pulumi.set(__self__, "bfd_interval", bfd_interval)
        if bfd_interval_min_rx is not None:
            pulumi.set(__self__, "bfd_interval_min_rx", bfd_interval_min_rx)
        if bfd_interval_multiplier is not None:
            pulumi.set(__self__, "bfd_interval_multiplier", bfd_interval_multiplier)
        if bfd_local_address is not None:
            pulumi.set(__self__, "bfd_local_address", bfd_local_address)
        if bfd_template is not None:
            pulumi.set(__self__, "bfd_template", bfd_template)
        if crypto_ipsec_df_bit is not None:
            pulumi.set(__self__, "crypto_ipsec_df_bit", crypto_ipsec_df_bit)
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if helper_addresses is not None:
            pulumi.set(__self__, "helper_addresses", helper_addresses)
        if ip_access_group_in is not None:
            pulumi.set(__self__, "ip_access_group_in", ip_access_group_in)
        if ip_access_group_in_enable is not None:
            pulumi.set(__self__, "ip_access_group_in_enable", ip_access_group_in_enable)
        if ip_access_group_out is not None:
            pulumi.set(__self__, "ip_access_group_out", ip_access_group_out)
        if ip_access_group_out_enable is not None:
            pulumi.set(__self__, "ip_access_group_out_enable", ip_access_group_out_enable)
        if ip_dhcp_relay_source_interface is not None:
            pulumi.set(__self__, "ip_dhcp_relay_source_interface", ip_dhcp_relay_source_interface)
        if ip_proxy_arp is not None:
            pulumi.set(__self__, "ip_proxy_arp", ip_proxy_arp)
        if ip_redirects is not None:
            pulumi.set(__self__, "ip_redirects", ip_redirects)
        if ip_unreachables is not None:
            pulumi.set(__self__, "ip_unreachables", ip_unreachables)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_address_mask is not None:
            pulumi.set(__self__, "ipv4_address_mask", ipv4_address_mask)
        if ipv6_address_autoconfig_default is not None:
            pulumi.set(__self__, "ipv6_address_autoconfig_default", ipv6_address_autoconfig_default)
        if ipv6_address_dhcp is not None:
            pulumi.set(__self__, "ipv6_address_dhcp", ipv6_address_dhcp)
        if ipv6_addresses is not None:
            pulumi.set(__self__, "ipv6_addresses", ipv6_addresses)
        if ipv6_enable is not None:
            pulumi.set(__self__, "ipv6_enable", ipv6_enable)
        if ipv6_link_local_addresses is not None:
            pulumi.set(__self__, "ipv6_link_local_addresses", ipv6_link_local_addresses)
        if ipv6_mtu is not None:
            pulumi.set(__self__, "ipv6_mtu", ipv6_mtu)
        if ipv6_nd_ra_suppress_all is not None:
            pulumi.set(__self__, "ipv6_nd_ra_suppress_all", ipv6_nd_ra_suppress_all)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if tunnel_destination_ipv4 is not None:
            pulumi.set(__self__, "tunnel_destination_ipv4", tunnel_destination_ipv4)
        if tunnel_mode_ipsec_ipv4 is not None:
            pulumi.set(__self__, "tunnel_mode_ipsec_ipv4", tunnel_mode_ipsec_ipv4)
        if tunnel_protection_ipsec_profile is not None:
            pulumi.set(__self__, "tunnel_protection_ipsec_profile", tunnel_protection_ipsec_profile)
        if tunnel_source is not None:
            pulumi.set(__self__, "tunnel_source", tunnel_source)
        if unnumbered is not None:
            pulumi.set(__self__, "unnumbered", unnumbered)
        if vrf_forwarding is not None:
            pulumi.set(__self__, "vrf_forwarding", vrf_forwarding)

    @property
    @pulumi.getter(name="arpTimeout")
    def arp_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Set ARP cache timeout - Range: `0`-`2147483`
        """
        return pulumi.get(self, "arp_timeout")

    @arp_timeout.setter
    def arp_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "arp_timeout", value)

    @property
    @pulumi.getter(name="bfdEcho")
    def bfd_echo(self) -> Optional[pulumi.Input[bool]]:
        """
        Use echo adjunct as bfd detection mechanism
        """
        return pulumi.get(self, "bfd_echo")

    @bfd_echo.setter
    def bfd_echo(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bfd_echo", value)

    @property
    @pulumi.getter(name="bfdEnable")
    def bfd_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable BFD under the interface
        """
        return pulumi.get(self, "bfd_enable")

    @bfd_enable.setter
    def bfd_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bfd_enable", value)

    @property
    @pulumi.getter(name="bfdInterval")
    def bfd_interval(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `50`-`9999`
        """
        return pulumi.get(self, "bfd_interval")

    @bfd_interval.setter
    def bfd_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_interval", value)

    @property
    @pulumi.getter(name="bfdIntervalMinRx")
    def bfd_interval_min_rx(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum receive interval capability - Range: `50`-`9999`
        """
        return pulumi.get(self, "bfd_interval_min_rx")

    @bfd_interval_min_rx.setter
    def bfd_interval_min_rx(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_interval_min_rx", value)

    @property
    @pulumi.getter(name="bfdIntervalMultiplier")
    def bfd_interval_multiplier(self) -> Optional[pulumi.Input[int]]:
        """
        Multiplier value used to compute holddown - Range: `3`-`50`
        """
        return pulumi.get(self, "bfd_interval_multiplier")

    @bfd_interval_multiplier.setter
    def bfd_interval_multiplier(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bfd_interval_multiplier", value)

    @property
    @pulumi.getter(name="bfdLocalAddress")
    def bfd_local_address(self) -> Optional[pulumi.Input[str]]:
        """
        The Source IP address to be used for BFD sessions over this interface.
        """
        return pulumi.get(self, "bfd_local_address")

    @bfd_local_address.setter
    def bfd_local_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd_local_address", value)

    @property
    @pulumi.getter(name="bfdTemplate")
    def bfd_template(self) -> Optional[pulumi.Input[str]]:
        """
        BFD template
        """
        return pulumi.get(self, "bfd_template")

    @bfd_template.setter
    def bfd_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bfd_template", value)

    @property
    @pulumi.getter(name="cryptoIpsecDfBit")
    def crypto_ipsec_df_bit(self) -> Optional[pulumi.Input[str]]:
        """
        Handling of encapsulated DF bit. - Choices: `clear`, `copy`, `set`
        """
        return pulumi.get(self, "crypto_ipsec_df_bit")

    @crypto_ipsec_df_bit.setter
    def crypto_ipsec_df_bit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "crypto_ipsec_df_bit", value)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Interface specific description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="helperAddresses")
    def helper_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceTunnelHelperAddressArgs']]]]:
        """
        Specify a destination address for UDP broadcasts
        """
        return pulumi.get(self, "helper_addresses")

    @helper_addresses.setter
    def helper_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceTunnelHelperAddressArgs']]]]):
        pulumi.set(self, "helper_addresses", value)

    @property
    @pulumi.getter(name="ipAccessGroupIn")
    def ip_access_group_in(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_access_group_in")

    @ip_access_group_in.setter
    def ip_access_group_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_access_group_in", value)

    @property
    @pulumi.getter(name="ipAccessGroupInEnable")
    def ip_access_group_in_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        inbound packets
        """
        return pulumi.get(self, "ip_access_group_in_enable")

    @ip_access_group_in_enable.setter
    def ip_access_group_in_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_access_group_in_enable", value)

    @property
    @pulumi.getter(name="ipAccessGroupOut")
    def ip_access_group_out(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_access_group_out")

    @ip_access_group_out.setter
    def ip_access_group_out(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_access_group_out", value)

    @property
    @pulumi.getter(name="ipAccessGroupOutEnable")
    def ip_access_group_out_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        outbound packets
        """
        return pulumi.get(self, "ip_access_group_out_enable")

    @ip_access_group_out_enable.setter
    def ip_access_group_out_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_access_group_out_enable", value)

    @property
    @pulumi.getter(name="ipDhcpRelaySourceInterface")
    def ip_dhcp_relay_source_interface(self) -> Optional[pulumi.Input[str]]:
        """
        Set source interface for relayed messages
        """
        return pulumi.get(self, "ip_dhcp_relay_source_interface")

    @ip_dhcp_relay_source_interface.setter
    def ip_dhcp_relay_source_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_dhcp_relay_source_interface", value)

    @property
    @pulumi.getter(name="ipProxyArp")
    def ip_proxy_arp(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable proxy ARP
        """
        return pulumi.get(self, "ip_proxy_arp")

    @ip_proxy_arp.setter
    def ip_proxy_arp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_proxy_arp", value)

    @property
    @pulumi.getter(name="ipRedirects")
    def ip_redirects(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable sending ICMP Redirect messages
        """
        return pulumi.get(self, "ip_redirects")

    @ip_redirects.setter
    def ip_redirects(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_redirects", value)

    @property
    @pulumi.getter(name="ipUnreachables")
    def ip_unreachables(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable sending ICMP Unreachable messages
        """
        return pulumi.get(self, "ip_unreachables")

    @ip_unreachables.setter
    def ip_unreachables(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_unreachables", value)

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_address", value)

    @property
    @pulumi.getter(name="ipv4AddressMask")
    def ipv4_address_mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_address_mask")

    @ipv4_address_mask.setter
    def ipv4_address_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_address_mask", value)

    @property
    @pulumi.getter(name="ipv6AddressAutoconfigDefault")
    def ipv6_address_autoconfig_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Insert default route
        """
        return pulumi.get(self, "ipv6_address_autoconfig_default")

    @ipv6_address_autoconfig_default.setter
    def ipv6_address_autoconfig_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipv6_address_autoconfig_default", value)

    @property
    @pulumi.getter(name="ipv6AddressDhcp")
    def ipv6_address_dhcp(self) -> Optional[pulumi.Input[bool]]:
        """
        Obtain IPv6 address from DHCP server
        """
        return pulumi.get(self, "ipv6_address_dhcp")

    @ipv6_address_dhcp.setter
    def ipv6_address_dhcp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipv6_address_dhcp", value)

    @property
    @pulumi.getter(name="ipv6Addresses")
    def ipv6_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceTunnelIpv6AddressArgs']]]]:
        return pulumi.get(self, "ipv6_addresses")

    @ipv6_addresses.setter
    def ipv6_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceTunnelIpv6AddressArgs']]]]):
        pulumi.set(self, "ipv6_addresses", value)

    @property
    @pulumi.getter(name="ipv6Enable")
    def ipv6_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable IPv6 on interface
        """
        return pulumi.get(self, "ipv6_enable")

    @ipv6_enable.setter
    def ipv6_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipv6_enable", value)

    @property
    @pulumi.getter(name="ipv6LinkLocalAddresses")
    def ipv6_link_local_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceTunnelIpv6LinkLocalAddressArgs']]]]:
        return pulumi.get(self, "ipv6_link_local_addresses")

    @ipv6_link_local_addresses.setter
    def ipv6_link_local_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceTunnelIpv6LinkLocalAddressArgs']]]]):
        pulumi.set(self, "ipv6_link_local_addresses", value)

    @property
    @pulumi.getter(name="ipv6Mtu")
    def ipv6_mtu(self) -> Optional[pulumi.Input[int]]:
        """
        Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
        """
        return pulumi.get(self, "ipv6_mtu")

    @ipv6_mtu.setter
    def ipv6_mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ipv6_mtu", value)

    @property
    @pulumi.getter(name="ipv6NdRaSuppressAll")
    def ipv6_nd_ra_suppress_all(self) -> Optional[pulumi.Input[bool]]:
        """
        Suppress all IPv6 RA
        """
        return pulumi.get(self, "ipv6_nd_ra_suppress_all")

    @ipv6_nd_ra_suppress_all.setter
    def ipv6_nd_ra_suppress_all(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipv6_nd_ra_suppress_all", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[int]]:
        """
        - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[bool]]:
        """
        Shutdown the selected interface
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "shutdown", value)

    @property
    @pulumi.getter(name="tunnelDestinationIpv4")
    def tunnel_destination_ipv4(self) -> Optional[pulumi.Input[str]]:
        """
        ip address or host name
        """
        return pulumi.get(self, "tunnel_destination_ipv4")

    @tunnel_destination_ipv4.setter
    def tunnel_destination_ipv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_destination_ipv4", value)

    @property
    @pulumi.getter(name="tunnelModeIpsecIpv4")
    def tunnel_mode_ipsec_ipv4(self) -> Optional[pulumi.Input[bool]]:
        """
        over IPv4
        """
        return pulumi.get(self, "tunnel_mode_ipsec_ipv4")

    @tunnel_mode_ipsec_ipv4.setter
    def tunnel_mode_ipsec_ipv4(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tunnel_mode_ipsec_ipv4", value)

    @property
    @pulumi.getter(name="tunnelProtectionIpsecProfile")
    def tunnel_protection_ipsec_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Determine the ipsec policy profile to use.
        """
        return pulumi.get(self, "tunnel_protection_ipsec_profile")

    @tunnel_protection_ipsec_profile.setter
    def tunnel_protection_ipsec_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_protection_ipsec_profile", value)

    @property
    @pulumi.getter(name="tunnelSource")
    def tunnel_source(self) -> Optional[pulumi.Input[str]]:
        """
        source of tunnel packets
        """
        return pulumi.get(self, "tunnel_source")

    @tunnel_source.setter
    def tunnel_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tunnel_source", value)

    @property
    @pulumi.getter
    def unnumbered(self) -> Optional[pulumi.Input[str]]:
        """
        Enable IP processing without an explicit address
        """
        return pulumi.get(self, "unnumbered")

    @unnumbered.setter
    def unnumbered(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unnumbered", value)

    @property
    @pulumi.getter(name="vrfForwarding")
    def vrf_forwarding(self) -> Optional[pulumi.Input[str]]:
        """
        Configure forwarding table
        """
        return pulumi.get(self, "vrf_forwarding")

    @vrf_forwarding.setter
    def vrf_forwarding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf_forwarding", value)


class InterfaceTunnel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 arp_timeout: Optional[pulumi.Input[int]] = None,
                 bfd_echo: Optional[pulumi.Input[bool]] = None,
                 bfd_enable: Optional[pulumi.Input[bool]] = None,
                 bfd_interval: Optional[pulumi.Input[int]] = None,
                 bfd_interval_min_rx: Optional[pulumi.Input[int]] = None,
                 bfd_interval_multiplier: Optional[pulumi.Input[int]] = None,
                 bfd_local_address: Optional[pulumi.Input[str]] = None,
                 bfd_template: Optional[pulumi.Input[str]] = None,
                 crypto_ipsec_df_bit: Optional[pulumi.Input[str]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 helper_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceTunnelHelperAddressArgs']]]]] = None,
                 ip_access_group_in: Optional[pulumi.Input[str]] = None,
                 ip_access_group_in_enable: Optional[pulumi.Input[bool]] = None,
                 ip_access_group_out: Optional[pulumi.Input[str]] = None,
                 ip_access_group_out_enable: Optional[pulumi.Input[bool]] = None,
                 ip_dhcp_relay_source_interface: Optional[pulumi.Input[str]] = None,
                 ip_proxy_arp: Optional[pulumi.Input[bool]] = None,
                 ip_redirects: Optional[pulumi.Input[bool]] = None,
                 ip_unreachables: Optional[pulumi.Input[bool]] = None,
                 ipv4_address: Optional[pulumi.Input[str]] = None,
                 ipv4_address_mask: Optional[pulumi.Input[str]] = None,
                 ipv6_address_autoconfig_default: Optional[pulumi.Input[bool]] = None,
                 ipv6_address_dhcp: Optional[pulumi.Input[bool]] = None,
                 ipv6_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceTunnelIpv6AddressArgs']]]]] = None,
                 ipv6_enable: Optional[pulumi.Input[bool]] = None,
                 ipv6_link_local_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceTunnelIpv6LinkLocalAddressArgs']]]]] = None,
                 ipv6_mtu: Optional[pulumi.Input[int]] = None,
                 ipv6_nd_ra_suppress_all: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[int]] = None,
                 shutdown: Optional[pulumi.Input[bool]] = None,
                 tunnel_destination_ipv4: Optional[pulumi.Input[str]] = None,
                 tunnel_mode_ipsec_ipv4: Optional[pulumi.Input[bool]] = None,
                 tunnel_protection_ipsec_profile: Optional[pulumi.Input[str]] = None,
                 tunnel_source: Optional[pulumi.Input[str]] = None,
                 unnumbered: Optional[pulumi.Input[str]] = None,
                 vrf_forwarding: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a InterfaceTunnel resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] arp_timeout: Set ARP cache timeout - Range: `0`-`2147483`
        :param pulumi.Input[bool] bfd_echo: Use echo adjunct as bfd detection mechanism
        :param pulumi.Input[bool] bfd_enable: Enable BFD under the interface
        :param pulumi.Input[int] bfd_interval: - Range: `50`-`9999`
        :param pulumi.Input[int] bfd_interval_min_rx: Minimum receive interval capability - Range: `50`-`9999`
        :param pulumi.Input[int] bfd_interval_multiplier: Multiplier value used to compute holddown - Range: `3`-`50`
        :param pulumi.Input[str] bfd_local_address: The Source IP address to be used for BFD sessions over this interface.
        :param pulumi.Input[str] bfd_template: BFD template
        :param pulumi.Input[str] crypto_ipsec_df_bit: Handling of encapsulated DF bit. - Choices: `clear`, `copy`, `set`
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] description: Interface specific description
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceTunnelHelperAddressArgs']]]] helper_addresses: Specify a destination address for UDP broadcasts
        :param pulumi.Input[bool] ip_access_group_in_enable: inbound packets
        :param pulumi.Input[bool] ip_access_group_out_enable: outbound packets
        :param pulumi.Input[str] ip_dhcp_relay_source_interface: Set source interface for relayed messages
        :param pulumi.Input[bool] ip_proxy_arp: Enable proxy ARP
        :param pulumi.Input[bool] ip_redirects: Enable sending ICMP Redirect messages
        :param pulumi.Input[bool] ip_unreachables: Enable sending ICMP Unreachable messages
        :param pulumi.Input[bool] ipv6_address_autoconfig_default: Insert default route
        :param pulumi.Input[bool] ipv6_address_dhcp: Obtain IPv6 address from DHCP server
        :param pulumi.Input[bool] ipv6_enable: Enable IPv6 on interface
        :param pulumi.Input[int] ipv6_mtu: Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
        :param pulumi.Input[bool] ipv6_nd_ra_suppress_all: Suppress all IPv6 RA
        :param pulumi.Input[int] name: - Range: `0`-`4294967295`
        :param pulumi.Input[bool] shutdown: Shutdown the selected interface
        :param pulumi.Input[str] tunnel_destination_ipv4: ip address or host name
        :param pulumi.Input[bool] tunnel_mode_ipsec_ipv4: over IPv4
        :param pulumi.Input[str] tunnel_protection_ipsec_profile: Determine the ipsec policy profile to use.
        :param pulumi.Input[str] tunnel_source: source of tunnel packets
        :param pulumi.Input[str] unnumbered: Enable IP processing without an explicit address
        :param pulumi.Input[str] vrf_forwarding: Configure forwarding table
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[InterfaceTunnelArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a InterfaceTunnel resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param InterfaceTunnelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InterfaceTunnelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 arp_timeout: Optional[pulumi.Input[int]] = None,
                 bfd_echo: Optional[pulumi.Input[bool]] = None,
                 bfd_enable: Optional[pulumi.Input[bool]] = None,
                 bfd_interval: Optional[pulumi.Input[int]] = None,
                 bfd_interval_min_rx: Optional[pulumi.Input[int]] = None,
                 bfd_interval_multiplier: Optional[pulumi.Input[int]] = None,
                 bfd_local_address: Optional[pulumi.Input[str]] = None,
                 bfd_template: Optional[pulumi.Input[str]] = None,
                 crypto_ipsec_df_bit: Optional[pulumi.Input[str]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 helper_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceTunnelHelperAddressArgs']]]]] = None,
                 ip_access_group_in: Optional[pulumi.Input[str]] = None,
                 ip_access_group_in_enable: Optional[pulumi.Input[bool]] = None,
                 ip_access_group_out: Optional[pulumi.Input[str]] = None,
                 ip_access_group_out_enable: Optional[pulumi.Input[bool]] = None,
                 ip_dhcp_relay_source_interface: Optional[pulumi.Input[str]] = None,
                 ip_proxy_arp: Optional[pulumi.Input[bool]] = None,
                 ip_redirects: Optional[pulumi.Input[bool]] = None,
                 ip_unreachables: Optional[pulumi.Input[bool]] = None,
                 ipv4_address: Optional[pulumi.Input[str]] = None,
                 ipv4_address_mask: Optional[pulumi.Input[str]] = None,
                 ipv6_address_autoconfig_default: Optional[pulumi.Input[bool]] = None,
                 ipv6_address_dhcp: Optional[pulumi.Input[bool]] = None,
                 ipv6_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceTunnelIpv6AddressArgs']]]]] = None,
                 ipv6_enable: Optional[pulumi.Input[bool]] = None,
                 ipv6_link_local_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceTunnelIpv6LinkLocalAddressArgs']]]]] = None,
                 ipv6_mtu: Optional[pulumi.Input[int]] = None,
                 ipv6_nd_ra_suppress_all: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[int]] = None,
                 shutdown: Optional[pulumi.Input[bool]] = None,
                 tunnel_destination_ipv4: Optional[pulumi.Input[str]] = None,
                 tunnel_mode_ipsec_ipv4: Optional[pulumi.Input[bool]] = None,
                 tunnel_protection_ipsec_profile: Optional[pulumi.Input[str]] = None,
                 tunnel_source: Optional[pulumi.Input[str]] = None,
                 unnumbered: Optional[pulumi.Input[str]] = None,
                 vrf_forwarding: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InterfaceTunnelArgs.__new__(InterfaceTunnelArgs)

            __props__.__dict__["arp_timeout"] = arp_timeout
            __props__.__dict__["bfd_echo"] = bfd_echo
            __props__.__dict__["bfd_enable"] = bfd_enable
            __props__.__dict__["bfd_interval"] = bfd_interval
            __props__.__dict__["bfd_interval_min_rx"] = bfd_interval_min_rx
            __props__.__dict__["bfd_interval_multiplier"] = bfd_interval_multiplier
            __props__.__dict__["bfd_local_address"] = bfd_local_address
            __props__.__dict__["bfd_template"] = bfd_template
            __props__.__dict__["crypto_ipsec_df_bit"] = crypto_ipsec_df_bit
            __props__.__dict__["delete_mode"] = delete_mode
            __props__.__dict__["description"] = description
            __props__.__dict__["device"] = device
            __props__.__dict__["helper_addresses"] = helper_addresses
            __props__.__dict__["ip_access_group_in"] = ip_access_group_in
            __props__.__dict__["ip_access_group_in_enable"] = ip_access_group_in_enable
            __props__.__dict__["ip_access_group_out"] = ip_access_group_out
            __props__.__dict__["ip_access_group_out_enable"] = ip_access_group_out_enable
            __props__.__dict__["ip_dhcp_relay_source_interface"] = ip_dhcp_relay_source_interface
            __props__.__dict__["ip_proxy_arp"] = ip_proxy_arp
            __props__.__dict__["ip_redirects"] = ip_redirects
            __props__.__dict__["ip_unreachables"] = ip_unreachables
            __props__.__dict__["ipv4_address"] = ipv4_address
            __props__.__dict__["ipv4_address_mask"] = ipv4_address_mask
            __props__.__dict__["ipv6_address_autoconfig_default"] = ipv6_address_autoconfig_default
            __props__.__dict__["ipv6_address_dhcp"] = ipv6_address_dhcp
            __props__.__dict__["ipv6_addresses"] = ipv6_addresses
            __props__.__dict__["ipv6_enable"] = ipv6_enable
            __props__.__dict__["ipv6_link_local_addresses"] = ipv6_link_local_addresses
            __props__.__dict__["ipv6_mtu"] = ipv6_mtu
            __props__.__dict__["ipv6_nd_ra_suppress_all"] = ipv6_nd_ra_suppress_all
            __props__.__dict__["name"] = name
            __props__.__dict__["shutdown"] = shutdown
            __props__.__dict__["tunnel_destination_ipv4"] = tunnel_destination_ipv4
            __props__.__dict__["tunnel_mode_ipsec_ipv4"] = tunnel_mode_ipsec_ipv4
            __props__.__dict__["tunnel_protection_ipsec_profile"] = tunnel_protection_ipsec_profile
            __props__.__dict__["tunnel_source"] = tunnel_source
            __props__.__dict__["unnumbered"] = unnumbered
            __props__.__dict__["vrf_forwarding"] = vrf_forwarding
        super(InterfaceTunnel, __self__).__init__(
            'iosxe:iosxe/interfaceTunnel:InterfaceTunnel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            arp_timeout: Optional[pulumi.Input[int]] = None,
            bfd_echo: Optional[pulumi.Input[bool]] = None,
            bfd_enable: Optional[pulumi.Input[bool]] = None,
            bfd_interval: Optional[pulumi.Input[int]] = None,
            bfd_interval_min_rx: Optional[pulumi.Input[int]] = None,
            bfd_interval_multiplier: Optional[pulumi.Input[int]] = None,
            bfd_local_address: Optional[pulumi.Input[str]] = None,
            bfd_template: Optional[pulumi.Input[str]] = None,
            crypto_ipsec_df_bit: Optional[pulumi.Input[str]] = None,
            delete_mode: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            helper_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceTunnelHelperAddressArgs']]]]] = None,
            ip_access_group_in: Optional[pulumi.Input[str]] = None,
            ip_access_group_in_enable: Optional[pulumi.Input[bool]] = None,
            ip_access_group_out: Optional[pulumi.Input[str]] = None,
            ip_access_group_out_enable: Optional[pulumi.Input[bool]] = None,
            ip_dhcp_relay_source_interface: Optional[pulumi.Input[str]] = None,
            ip_proxy_arp: Optional[pulumi.Input[bool]] = None,
            ip_redirects: Optional[pulumi.Input[bool]] = None,
            ip_unreachables: Optional[pulumi.Input[bool]] = None,
            ipv4_address: Optional[pulumi.Input[str]] = None,
            ipv4_address_mask: Optional[pulumi.Input[str]] = None,
            ipv6_address_autoconfig_default: Optional[pulumi.Input[bool]] = None,
            ipv6_address_dhcp: Optional[pulumi.Input[bool]] = None,
            ipv6_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceTunnelIpv6AddressArgs']]]]] = None,
            ipv6_enable: Optional[pulumi.Input[bool]] = None,
            ipv6_link_local_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceTunnelIpv6LinkLocalAddressArgs']]]]] = None,
            ipv6_mtu: Optional[pulumi.Input[int]] = None,
            ipv6_nd_ra_suppress_all: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[int]] = None,
            shutdown: Optional[pulumi.Input[bool]] = None,
            tunnel_destination_ipv4: Optional[pulumi.Input[str]] = None,
            tunnel_mode_ipsec_ipv4: Optional[pulumi.Input[bool]] = None,
            tunnel_protection_ipsec_profile: Optional[pulumi.Input[str]] = None,
            tunnel_source: Optional[pulumi.Input[str]] = None,
            unnumbered: Optional[pulumi.Input[str]] = None,
            vrf_forwarding: Optional[pulumi.Input[str]] = None) -> 'InterfaceTunnel':
        """
        Get an existing InterfaceTunnel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] arp_timeout: Set ARP cache timeout - Range: `0`-`2147483`
        :param pulumi.Input[bool] bfd_echo: Use echo adjunct as bfd detection mechanism
        :param pulumi.Input[bool] bfd_enable: Enable BFD under the interface
        :param pulumi.Input[int] bfd_interval: - Range: `50`-`9999`
        :param pulumi.Input[int] bfd_interval_min_rx: Minimum receive interval capability - Range: `50`-`9999`
        :param pulumi.Input[int] bfd_interval_multiplier: Multiplier value used to compute holddown - Range: `3`-`50`
        :param pulumi.Input[str] bfd_local_address: The Source IP address to be used for BFD sessions over this interface.
        :param pulumi.Input[str] bfd_template: BFD template
        :param pulumi.Input[str] crypto_ipsec_df_bit: Handling of encapsulated DF bit. - Choices: `clear`, `copy`, `set`
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] description: Interface specific description
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['InterfaceTunnelHelperAddressArgs']]]] helper_addresses: Specify a destination address for UDP broadcasts
        :param pulumi.Input[bool] ip_access_group_in_enable: inbound packets
        :param pulumi.Input[bool] ip_access_group_out_enable: outbound packets
        :param pulumi.Input[str] ip_dhcp_relay_source_interface: Set source interface for relayed messages
        :param pulumi.Input[bool] ip_proxy_arp: Enable proxy ARP
        :param pulumi.Input[bool] ip_redirects: Enable sending ICMP Redirect messages
        :param pulumi.Input[bool] ip_unreachables: Enable sending ICMP Unreachable messages
        :param pulumi.Input[bool] ipv6_address_autoconfig_default: Insert default route
        :param pulumi.Input[bool] ipv6_address_dhcp: Obtain IPv6 address from DHCP server
        :param pulumi.Input[bool] ipv6_enable: Enable IPv6 on interface
        :param pulumi.Input[int] ipv6_mtu: Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
        :param pulumi.Input[bool] ipv6_nd_ra_suppress_all: Suppress all IPv6 RA
        :param pulumi.Input[int] name: - Range: `0`-`4294967295`
        :param pulumi.Input[bool] shutdown: Shutdown the selected interface
        :param pulumi.Input[str] tunnel_destination_ipv4: ip address or host name
        :param pulumi.Input[bool] tunnel_mode_ipsec_ipv4: over IPv4
        :param pulumi.Input[str] tunnel_protection_ipsec_profile: Determine the ipsec policy profile to use.
        :param pulumi.Input[str] tunnel_source: source of tunnel packets
        :param pulumi.Input[str] unnumbered: Enable IP processing without an explicit address
        :param pulumi.Input[str] vrf_forwarding: Configure forwarding table
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InterfaceTunnelState.__new__(_InterfaceTunnelState)

        __props__.__dict__["arp_timeout"] = arp_timeout
        __props__.__dict__["bfd_echo"] = bfd_echo
        __props__.__dict__["bfd_enable"] = bfd_enable
        __props__.__dict__["bfd_interval"] = bfd_interval
        __props__.__dict__["bfd_interval_min_rx"] = bfd_interval_min_rx
        __props__.__dict__["bfd_interval_multiplier"] = bfd_interval_multiplier
        __props__.__dict__["bfd_local_address"] = bfd_local_address
        __props__.__dict__["bfd_template"] = bfd_template
        __props__.__dict__["crypto_ipsec_df_bit"] = crypto_ipsec_df_bit
        __props__.__dict__["delete_mode"] = delete_mode
        __props__.__dict__["description"] = description
        __props__.__dict__["device"] = device
        __props__.__dict__["helper_addresses"] = helper_addresses
        __props__.__dict__["ip_access_group_in"] = ip_access_group_in
        __props__.__dict__["ip_access_group_in_enable"] = ip_access_group_in_enable
        __props__.__dict__["ip_access_group_out"] = ip_access_group_out
        __props__.__dict__["ip_access_group_out_enable"] = ip_access_group_out_enable
        __props__.__dict__["ip_dhcp_relay_source_interface"] = ip_dhcp_relay_source_interface
        __props__.__dict__["ip_proxy_arp"] = ip_proxy_arp
        __props__.__dict__["ip_redirects"] = ip_redirects
        __props__.__dict__["ip_unreachables"] = ip_unreachables
        __props__.__dict__["ipv4_address"] = ipv4_address
        __props__.__dict__["ipv4_address_mask"] = ipv4_address_mask
        __props__.__dict__["ipv6_address_autoconfig_default"] = ipv6_address_autoconfig_default
        __props__.__dict__["ipv6_address_dhcp"] = ipv6_address_dhcp
        __props__.__dict__["ipv6_addresses"] = ipv6_addresses
        __props__.__dict__["ipv6_enable"] = ipv6_enable
        __props__.__dict__["ipv6_link_local_addresses"] = ipv6_link_local_addresses
        __props__.__dict__["ipv6_mtu"] = ipv6_mtu
        __props__.__dict__["ipv6_nd_ra_suppress_all"] = ipv6_nd_ra_suppress_all
        __props__.__dict__["name"] = name
        __props__.__dict__["shutdown"] = shutdown
        __props__.__dict__["tunnel_destination_ipv4"] = tunnel_destination_ipv4
        __props__.__dict__["tunnel_mode_ipsec_ipv4"] = tunnel_mode_ipsec_ipv4
        __props__.__dict__["tunnel_protection_ipsec_profile"] = tunnel_protection_ipsec_profile
        __props__.__dict__["tunnel_source"] = tunnel_source
        __props__.__dict__["unnumbered"] = unnumbered
        __props__.__dict__["vrf_forwarding"] = vrf_forwarding
        return InterfaceTunnel(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="arpTimeout")
    def arp_timeout(self) -> pulumi.Output[Optional[int]]:
        """
        Set ARP cache timeout - Range: `0`-`2147483`
        """
        return pulumi.get(self, "arp_timeout")

    @property
    @pulumi.getter(name="bfdEcho")
    def bfd_echo(self) -> pulumi.Output[Optional[bool]]:
        """
        Use echo adjunct as bfd detection mechanism
        """
        return pulumi.get(self, "bfd_echo")

    @property
    @pulumi.getter(name="bfdEnable")
    def bfd_enable(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable BFD under the interface
        """
        return pulumi.get(self, "bfd_enable")

    @property
    @pulumi.getter(name="bfdInterval")
    def bfd_interval(self) -> pulumi.Output[Optional[int]]:
        """
        - Range: `50`-`9999`
        """
        return pulumi.get(self, "bfd_interval")

    @property
    @pulumi.getter(name="bfdIntervalMinRx")
    def bfd_interval_min_rx(self) -> pulumi.Output[Optional[int]]:
        """
        Minimum receive interval capability - Range: `50`-`9999`
        """
        return pulumi.get(self, "bfd_interval_min_rx")

    @property
    @pulumi.getter(name="bfdIntervalMultiplier")
    def bfd_interval_multiplier(self) -> pulumi.Output[Optional[int]]:
        """
        Multiplier value used to compute holddown - Range: `3`-`50`
        """
        return pulumi.get(self, "bfd_interval_multiplier")

    @property
    @pulumi.getter(name="bfdLocalAddress")
    def bfd_local_address(self) -> pulumi.Output[Optional[str]]:
        """
        The Source IP address to be used for BFD sessions over this interface.
        """
        return pulumi.get(self, "bfd_local_address")

    @property
    @pulumi.getter(name="bfdTemplate")
    def bfd_template(self) -> pulumi.Output[Optional[str]]:
        """
        BFD template
        """
        return pulumi.get(self, "bfd_template")

    @property
    @pulumi.getter(name="cryptoIpsecDfBit")
    def crypto_ipsec_df_bit(self) -> pulumi.Output[Optional[str]]:
        """
        Handling of encapsulated DF bit. - Choices: `clear`, `copy`, `set`
        """
        return pulumi.get(self, "crypto_ipsec_df_bit")

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Interface specific description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="helperAddresses")
    def helper_addresses(self) -> pulumi.Output[Optional[Sequence['outputs.InterfaceTunnelHelperAddress']]]:
        """
        Specify a destination address for UDP broadcasts
        """
        return pulumi.get(self, "helper_addresses")

    @property
    @pulumi.getter(name="ipAccessGroupIn")
    def ip_access_group_in(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ip_access_group_in")

    @property
    @pulumi.getter(name="ipAccessGroupInEnable")
    def ip_access_group_in_enable(self) -> pulumi.Output[Optional[bool]]:
        """
        inbound packets
        """
        return pulumi.get(self, "ip_access_group_in_enable")

    @property
    @pulumi.getter(name="ipAccessGroupOut")
    def ip_access_group_out(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ip_access_group_out")

    @property
    @pulumi.getter(name="ipAccessGroupOutEnable")
    def ip_access_group_out_enable(self) -> pulumi.Output[Optional[bool]]:
        """
        outbound packets
        """
        return pulumi.get(self, "ip_access_group_out_enable")

    @property
    @pulumi.getter(name="ipDhcpRelaySourceInterface")
    def ip_dhcp_relay_source_interface(self) -> pulumi.Output[Optional[str]]:
        """
        Set source interface for relayed messages
        """
        return pulumi.get(self, "ip_dhcp_relay_source_interface")

    @property
    @pulumi.getter(name="ipProxyArp")
    def ip_proxy_arp(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable proxy ARP
        """
        return pulumi.get(self, "ip_proxy_arp")

    @property
    @pulumi.getter(name="ipRedirects")
    def ip_redirects(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable sending ICMP Redirect messages
        """
        return pulumi.get(self, "ip_redirects")

    @property
    @pulumi.getter(name="ipUnreachables")
    def ip_unreachables(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable sending ICMP Unreachable messages
        """
        return pulumi.get(self, "ip_unreachables")

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ipv4_address")

    @property
    @pulumi.getter(name="ipv4AddressMask")
    def ipv4_address_mask(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ipv4_address_mask")

    @property
    @pulumi.getter(name="ipv6AddressAutoconfigDefault")
    def ipv6_address_autoconfig_default(self) -> pulumi.Output[Optional[bool]]:
        """
        Insert default route
        """
        return pulumi.get(self, "ipv6_address_autoconfig_default")

    @property
    @pulumi.getter(name="ipv6AddressDhcp")
    def ipv6_address_dhcp(self) -> pulumi.Output[Optional[bool]]:
        """
        Obtain IPv6 address from DHCP server
        """
        return pulumi.get(self, "ipv6_address_dhcp")

    @property
    @pulumi.getter(name="ipv6Addresses")
    def ipv6_addresses(self) -> pulumi.Output[Optional[Sequence['outputs.InterfaceTunnelIpv6Address']]]:
        return pulumi.get(self, "ipv6_addresses")

    @property
    @pulumi.getter(name="ipv6Enable")
    def ipv6_enable(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable IPv6 on interface
        """
        return pulumi.get(self, "ipv6_enable")

    @property
    @pulumi.getter(name="ipv6LinkLocalAddresses")
    def ipv6_link_local_addresses(self) -> pulumi.Output[Optional[Sequence['outputs.InterfaceTunnelIpv6LinkLocalAddress']]]:
        return pulumi.get(self, "ipv6_link_local_addresses")

    @property
    @pulumi.getter(name="ipv6Mtu")
    def ipv6_mtu(self) -> pulumi.Output[Optional[int]]:
        """
        Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
        """
        return pulumi.get(self, "ipv6_mtu")

    @property
    @pulumi.getter(name="ipv6NdRaSuppressAll")
    def ipv6_nd_ra_suppress_all(self) -> pulumi.Output[Optional[bool]]:
        """
        Suppress all IPv6 RA
        """
        return pulumi.get(self, "ipv6_nd_ra_suppress_all")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[int]:
        """
        - Range: `0`-`4294967295`
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def shutdown(self) -> pulumi.Output[Optional[bool]]:
        """
        Shutdown the selected interface
        """
        return pulumi.get(self, "shutdown")

    @property
    @pulumi.getter(name="tunnelDestinationIpv4")
    def tunnel_destination_ipv4(self) -> pulumi.Output[Optional[str]]:
        """
        ip address or host name
        """
        return pulumi.get(self, "tunnel_destination_ipv4")

    @property
    @pulumi.getter(name="tunnelModeIpsecIpv4")
    def tunnel_mode_ipsec_ipv4(self) -> pulumi.Output[Optional[bool]]:
        """
        over IPv4
        """
        return pulumi.get(self, "tunnel_mode_ipsec_ipv4")

    @property
    @pulumi.getter(name="tunnelProtectionIpsecProfile")
    def tunnel_protection_ipsec_profile(self) -> pulumi.Output[Optional[str]]:
        """
        Determine the ipsec policy profile to use.
        """
        return pulumi.get(self, "tunnel_protection_ipsec_profile")

    @property
    @pulumi.getter(name="tunnelSource")
    def tunnel_source(self) -> pulumi.Output[Optional[str]]:
        """
        source of tunnel packets
        """
        return pulumi.get(self, "tunnel_source")

    @property
    @pulumi.getter
    def unnumbered(self) -> pulumi.Output[Optional[str]]:
        """
        Enable IP processing without an explicit address
        """
        return pulumi.get(self, "unnumbered")

    @property
    @pulumi.getter(name="vrfForwarding")
    def vrf_forwarding(self) -> pulumi.Output[Optional[str]]:
        """
        Configure forwarding table
        """
        return pulumi.get(self, "vrf_forwarding")

