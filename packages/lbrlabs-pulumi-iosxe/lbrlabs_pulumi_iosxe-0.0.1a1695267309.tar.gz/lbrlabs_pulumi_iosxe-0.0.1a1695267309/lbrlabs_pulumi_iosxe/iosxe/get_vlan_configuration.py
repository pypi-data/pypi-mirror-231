# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetVlanConfigurationResult',
    'AwaitableGetVlanConfigurationResult',
    'get_vlan_configuration',
    'get_vlan_configuration_output',
]

@pulumi.output_type
class GetVlanConfigurationResult:
    """
    A collection of values returned by getVlanConfiguration.
    """
    def __init__(__self__, access_vfi=None, device=None, evpn_instance=None, evpn_instance_vni=None, id=None, vlan_id=None, vni=None):
        if access_vfi and not isinstance(access_vfi, str):
            raise TypeError("Expected argument 'access_vfi' to be a str")
        pulumi.set(__self__, "access_vfi", access_vfi)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if evpn_instance and not isinstance(evpn_instance, int):
            raise TypeError("Expected argument 'evpn_instance' to be a int")
        pulumi.set(__self__, "evpn_instance", evpn_instance)
        if evpn_instance_vni and not isinstance(evpn_instance_vni, int):
            raise TypeError("Expected argument 'evpn_instance_vni' to be a int")
        pulumi.set(__self__, "evpn_instance_vni", evpn_instance_vni)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if vlan_id and not isinstance(vlan_id, int):
            raise TypeError("Expected argument 'vlan_id' to be a int")
        pulumi.set(__self__, "vlan_id", vlan_id)
        if vni and not isinstance(vni, int):
            raise TypeError("Expected argument 'vni' to be a int")
        pulumi.set(__self__, "vni", vni)

    @property
    @pulumi.getter(name="accessVfi")
    def access_vfi(self) -> str:
        return pulumi.get(self, "access_vfi")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="evpnInstance")
    def evpn_instance(self) -> int:
        return pulumi.get(self, "evpn_instance")

    @property
    @pulumi.getter(name="evpnInstanceVni")
    def evpn_instance_vni(self) -> int:
        return pulumi.get(self, "evpn_instance_vni")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> int:
        return pulumi.get(self, "vlan_id")

    @property
    @pulumi.getter
    def vni(self) -> int:
        return pulumi.get(self, "vni")


class AwaitableGetVlanConfigurationResult(GetVlanConfigurationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVlanConfigurationResult(
            access_vfi=self.access_vfi,
            device=self.device,
            evpn_instance=self.evpn_instance,
            evpn_instance_vni=self.evpn_instance_vni,
            id=self.id,
            vlan_id=self.vlan_id,
            vni=self.vni)


def get_vlan_configuration(device: Optional[str] = None,
                           vlan_id: Optional[int] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVlanConfigurationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['vlanId'] = vlan_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:iosxe/getVlanConfiguration:getVlanConfiguration', __args__, opts=opts, typ=GetVlanConfigurationResult).value

    return AwaitableGetVlanConfigurationResult(
        access_vfi=pulumi.get(__ret__, 'access_vfi'),
        device=pulumi.get(__ret__, 'device'),
        evpn_instance=pulumi.get(__ret__, 'evpn_instance'),
        evpn_instance_vni=pulumi.get(__ret__, 'evpn_instance_vni'),
        id=pulumi.get(__ret__, 'id'),
        vlan_id=pulumi.get(__ret__, 'vlan_id'),
        vni=pulumi.get(__ret__, 'vni'))


@_utilities.lift_output_func(get_vlan_configuration)
def get_vlan_configuration_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                                  vlan_id: Optional[pulumi.Input[int]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVlanConfigurationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
