# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['VlanArgs', 'Vlan']

@pulumi.input_type
class VlanArgs:
    def __init__(__self__, *,
                 vlan_id: pulumi.Input[int],
                 device: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_vlan_association: Optional[pulumi.Input[str]] = None,
                 private_vlan_community: Optional[pulumi.Input[bool]] = None,
                 private_vlan_isolated: Optional[pulumi.Input[bool]] = None,
                 private_vlan_primary: Optional[pulumi.Input[bool]] = None,
                 remote_span: Optional[pulumi.Input[bool]] = None,
                 shutdown: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Vlan resource.
        :param pulumi.Input[int] vlan_id: a single VLAN id (allowed value range 1-4094)or Comma-separated VLAN id range.e.g. 99 or 1-30 or 1-20,30,40-50 - Range:
               `1`-`4094`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] name: Ascii name of the VLAN
        :param pulumi.Input[str] private_vlan_association: Configure association between private VLANs
        :param pulumi.Input[bool] private_vlan_community: Configure the VLAN as a community private VLAN
        :param pulumi.Input[bool] private_vlan_isolated: Configure the VLAN as an isolated private VLAN
        :param pulumi.Input[bool] private_vlan_primary: Configure the VLAN as a primary private VLAN
        :param pulumi.Input[bool] remote_span: Configure as Remote SPAN VLAN
        :param pulumi.Input[bool] shutdown: Shutdown VLAN switching
        """
        pulumi.set(__self__, "vlan_id", vlan_id)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_vlan_association is not None:
            pulumi.set(__self__, "private_vlan_association", private_vlan_association)
        if private_vlan_community is not None:
            pulumi.set(__self__, "private_vlan_community", private_vlan_community)
        if private_vlan_isolated is not None:
            pulumi.set(__self__, "private_vlan_isolated", private_vlan_isolated)
        if private_vlan_primary is not None:
            pulumi.set(__self__, "private_vlan_primary", private_vlan_primary)
        if remote_span is not None:
            pulumi.set(__self__, "remote_span", remote_span)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> pulumi.Input[int]:
        """
        a single VLAN id (allowed value range 1-4094)or Comma-separated VLAN id range.e.g. 99 or 1-30 or 1-20,30,40-50 - Range:
        `1`-`4094`
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "vlan_id", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Ascii name of the VLAN
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privateVlanAssociation")
    def private_vlan_association(self) -> Optional[pulumi.Input[str]]:
        """
        Configure association between private VLANs
        """
        return pulumi.get(self, "private_vlan_association")

    @private_vlan_association.setter
    def private_vlan_association(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_vlan_association", value)

    @property
    @pulumi.getter(name="privateVlanCommunity")
    def private_vlan_community(self) -> Optional[pulumi.Input[bool]]:
        """
        Configure the VLAN as a community private VLAN
        """
        return pulumi.get(self, "private_vlan_community")

    @private_vlan_community.setter
    def private_vlan_community(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_vlan_community", value)

    @property
    @pulumi.getter(name="privateVlanIsolated")
    def private_vlan_isolated(self) -> Optional[pulumi.Input[bool]]:
        """
        Configure the VLAN as an isolated private VLAN
        """
        return pulumi.get(self, "private_vlan_isolated")

    @private_vlan_isolated.setter
    def private_vlan_isolated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_vlan_isolated", value)

    @property
    @pulumi.getter(name="privateVlanPrimary")
    def private_vlan_primary(self) -> Optional[pulumi.Input[bool]]:
        """
        Configure the VLAN as a primary private VLAN
        """
        return pulumi.get(self, "private_vlan_primary")

    @private_vlan_primary.setter
    def private_vlan_primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_vlan_primary", value)

    @property
    @pulumi.getter(name="remoteSpan")
    def remote_span(self) -> Optional[pulumi.Input[bool]]:
        """
        Configure as Remote SPAN VLAN
        """
        return pulumi.get(self, "remote_span")

    @remote_span.setter
    def remote_span(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "remote_span", value)

    @property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[bool]]:
        """
        Shutdown VLAN switching
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "shutdown", value)


@pulumi.input_type
class _VlanState:
    def __init__(__self__, *,
                 device: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_vlan_association: Optional[pulumi.Input[str]] = None,
                 private_vlan_community: Optional[pulumi.Input[bool]] = None,
                 private_vlan_isolated: Optional[pulumi.Input[bool]] = None,
                 private_vlan_primary: Optional[pulumi.Input[bool]] = None,
                 remote_span: Optional[pulumi.Input[bool]] = None,
                 shutdown: Optional[pulumi.Input[bool]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Vlan resources.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] name: Ascii name of the VLAN
        :param pulumi.Input[str] private_vlan_association: Configure association between private VLANs
        :param pulumi.Input[bool] private_vlan_community: Configure the VLAN as a community private VLAN
        :param pulumi.Input[bool] private_vlan_isolated: Configure the VLAN as an isolated private VLAN
        :param pulumi.Input[bool] private_vlan_primary: Configure the VLAN as a primary private VLAN
        :param pulumi.Input[bool] remote_span: Configure as Remote SPAN VLAN
        :param pulumi.Input[bool] shutdown: Shutdown VLAN switching
        :param pulumi.Input[int] vlan_id: a single VLAN id (allowed value range 1-4094)or Comma-separated VLAN id range.e.g. 99 or 1-30 or 1-20,30,40-50 - Range:
               `1`-`4094`
        """
        if device is not None:
            pulumi.set(__self__, "device", device)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if private_vlan_association is not None:
            pulumi.set(__self__, "private_vlan_association", private_vlan_association)
        if private_vlan_community is not None:
            pulumi.set(__self__, "private_vlan_community", private_vlan_community)
        if private_vlan_isolated is not None:
            pulumi.set(__self__, "private_vlan_isolated", private_vlan_isolated)
        if private_vlan_primary is not None:
            pulumi.set(__self__, "private_vlan_primary", private_vlan_primary)
        if remote_span is not None:
            pulumi.set(__self__, "remote_span", remote_span)
        if shutdown is not None:
            pulumi.set(__self__, "shutdown", shutdown)
        if vlan_id is not None:
            pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Ascii name of the VLAN
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="privateVlanAssociation")
    def private_vlan_association(self) -> Optional[pulumi.Input[str]]:
        """
        Configure association between private VLANs
        """
        return pulumi.get(self, "private_vlan_association")

    @private_vlan_association.setter
    def private_vlan_association(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_vlan_association", value)

    @property
    @pulumi.getter(name="privateVlanCommunity")
    def private_vlan_community(self) -> Optional[pulumi.Input[bool]]:
        """
        Configure the VLAN as a community private VLAN
        """
        return pulumi.get(self, "private_vlan_community")

    @private_vlan_community.setter
    def private_vlan_community(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_vlan_community", value)

    @property
    @pulumi.getter(name="privateVlanIsolated")
    def private_vlan_isolated(self) -> Optional[pulumi.Input[bool]]:
        """
        Configure the VLAN as an isolated private VLAN
        """
        return pulumi.get(self, "private_vlan_isolated")

    @private_vlan_isolated.setter
    def private_vlan_isolated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_vlan_isolated", value)

    @property
    @pulumi.getter(name="privateVlanPrimary")
    def private_vlan_primary(self) -> Optional[pulumi.Input[bool]]:
        """
        Configure the VLAN as a primary private VLAN
        """
        return pulumi.get(self, "private_vlan_primary")

    @private_vlan_primary.setter
    def private_vlan_primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_vlan_primary", value)

    @property
    @pulumi.getter(name="remoteSpan")
    def remote_span(self) -> Optional[pulumi.Input[bool]]:
        """
        Configure as Remote SPAN VLAN
        """
        return pulumi.get(self, "remote_span")

    @remote_span.setter
    def remote_span(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "remote_span", value)

    @property
    @pulumi.getter
    def shutdown(self) -> Optional[pulumi.Input[bool]]:
        """
        Shutdown VLAN switching
        """
        return pulumi.get(self, "shutdown")

    @shutdown.setter
    def shutdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "shutdown", value)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> Optional[pulumi.Input[int]]:
        """
        a single VLAN id (allowed value range 1-4094)or Comma-separated VLAN id range.e.g. 99 or 1-30 or 1-20,30,40-50 - Range:
        `1`-`4094`
        """
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vlan_id", value)


class Vlan(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_vlan_association: Optional[pulumi.Input[str]] = None,
                 private_vlan_community: Optional[pulumi.Input[bool]] = None,
                 private_vlan_isolated: Optional[pulumi.Input[bool]] = None,
                 private_vlan_primary: Optional[pulumi.Input[bool]] = None,
                 remote_span: Optional[pulumi.Input[bool]] = None,
                 shutdown: Optional[pulumi.Input[bool]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a Vlan resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] name: Ascii name of the VLAN
        :param pulumi.Input[str] private_vlan_association: Configure association between private VLANs
        :param pulumi.Input[bool] private_vlan_community: Configure the VLAN as a community private VLAN
        :param pulumi.Input[bool] private_vlan_isolated: Configure the VLAN as an isolated private VLAN
        :param pulumi.Input[bool] private_vlan_primary: Configure the VLAN as a primary private VLAN
        :param pulumi.Input[bool] remote_span: Configure as Remote SPAN VLAN
        :param pulumi.Input[bool] shutdown: Shutdown VLAN switching
        :param pulumi.Input[int] vlan_id: a single VLAN id (allowed value range 1-4094)or Comma-separated VLAN id range.e.g. 99 or 1-30 or 1-20,30,40-50 - Range:
               `1`-`4094`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VlanArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Vlan resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VlanArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VlanArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 private_vlan_association: Optional[pulumi.Input[str]] = None,
                 private_vlan_community: Optional[pulumi.Input[bool]] = None,
                 private_vlan_isolated: Optional[pulumi.Input[bool]] = None,
                 private_vlan_primary: Optional[pulumi.Input[bool]] = None,
                 remote_span: Optional[pulumi.Input[bool]] = None,
                 shutdown: Optional[pulumi.Input[bool]] = None,
                 vlan_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VlanArgs.__new__(VlanArgs)

            __props__.__dict__["device"] = device
            __props__.__dict__["name"] = name
            __props__.__dict__["private_vlan_association"] = private_vlan_association
            __props__.__dict__["private_vlan_community"] = private_vlan_community
            __props__.__dict__["private_vlan_isolated"] = private_vlan_isolated
            __props__.__dict__["private_vlan_primary"] = private_vlan_primary
            __props__.__dict__["remote_span"] = remote_span
            __props__.__dict__["shutdown"] = shutdown
            if vlan_id is None and not opts.urn:
                raise TypeError("Missing required property 'vlan_id'")
            __props__.__dict__["vlan_id"] = vlan_id
        super(Vlan, __self__).__init__(
            'iosxe:iosxe/vlan:Vlan',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            device: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            private_vlan_association: Optional[pulumi.Input[str]] = None,
            private_vlan_community: Optional[pulumi.Input[bool]] = None,
            private_vlan_isolated: Optional[pulumi.Input[bool]] = None,
            private_vlan_primary: Optional[pulumi.Input[bool]] = None,
            remote_span: Optional[pulumi.Input[bool]] = None,
            shutdown: Optional[pulumi.Input[bool]] = None,
            vlan_id: Optional[pulumi.Input[int]] = None) -> 'Vlan':
        """
        Get an existing Vlan resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] name: Ascii name of the VLAN
        :param pulumi.Input[str] private_vlan_association: Configure association between private VLANs
        :param pulumi.Input[bool] private_vlan_community: Configure the VLAN as a community private VLAN
        :param pulumi.Input[bool] private_vlan_isolated: Configure the VLAN as an isolated private VLAN
        :param pulumi.Input[bool] private_vlan_primary: Configure the VLAN as a primary private VLAN
        :param pulumi.Input[bool] remote_span: Configure as Remote SPAN VLAN
        :param pulumi.Input[bool] shutdown: Shutdown VLAN switching
        :param pulumi.Input[int] vlan_id: a single VLAN id (allowed value range 1-4094)or Comma-separated VLAN id range.e.g. 99 or 1-30 or 1-20,30,40-50 - Range:
               `1`-`4094`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VlanState.__new__(_VlanState)

        __props__.__dict__["device"] = device
        __props__.__dict__["name"] = name
        __props__.__dict__["private_vlan_association"] = private_vlan_association
        __props__.__dict__["private_vlan_community"] = private_vlan_community
        __props__.__dict__["private_vlan_isolated"] = private_vlan_isolated
        __props__.__dict__["private_vlan_primary"] = private_vlan_primary
        __props__.__dict__["remote_span"] = remote_span
        __props__.__dict__["shutdown"] = shutdown
        __props__.__dict__["vlan_id"] = vlan_id
        return Vlan(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Ascii name of the VLAN
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="privateVlanAssociation")
    def private_vlan_association(self) -> pulumi.Output[Optional[str]]:
        """
        Configure association between private VLANs
        """
        return pulumi.get(self, "private_vlan_association")

    @property
    @pulumi.getter(name="privateVlanCommunity")
    def private_vlan_community(self) -> pulumi.Output[Optional[bool]]:
        """
        Configure the VLAN as a community private VLAN
        """
        return pulumi.get(self, "private_vlan_community")

    @property
    @pulumi.getter(name="privateVlanIsolated")
    def private_vlan_isolated(self) -> pulumi.Output[Optional[bool]]:
        """
        Configure the VLAN as an isolated private VLAN
        """
        return pulumi.get(self, "private_vlan_isolated")

    @property
    @pulumi.getter(name="privateVlanPrimary")
    def private_vlan_primary(self) -> pulumi.Output[Optional[bool]]:
        """
        Configure the VLAN as a primary private VLAN
        """
        return pulumi.get(self, "private_vlan_primary")

    @property
    @pulumi.getter(name="remoteSpan")
    def remote_span(self) -> pulumi.Output[Optional[bool]]:
        """
        Configure as Remote SPAN VLAN
        """
        return pulumi.get(self, "remote_span")

    @property
    @pulumi.getter
    def shutdown(self) -> pulumi.Output[Optional[bool]]:
        """
        Shutdown VLAN switching
        """
        return pulumi.get(self, "shutdown")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> pulumi.Output[int]:
        """
        a single VLAN id (allowed value range 1-4094)or Comma-separated VLAN id range.e.g. 99 or 1-30 or 1-20,30,40-50 - Range:
        `1`-`4094`
        """
        return pulumi.get(self, "vlan_id")

