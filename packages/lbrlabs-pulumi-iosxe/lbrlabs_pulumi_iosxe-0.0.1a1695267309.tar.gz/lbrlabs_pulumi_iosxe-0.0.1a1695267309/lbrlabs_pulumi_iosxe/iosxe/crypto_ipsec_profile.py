# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['CryptoIpsecProfileArgs', 'CryptoIpsecProfile']

@pulumi.input_type
class CryptoIpsecProfileArgs:
    def __init__(__self__, *,
                 device: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile: Optional[pulumi.Input[str]] = None,
                 set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile: Optional[pulumi.Input[str]] = None,
                 set_transform_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a CryptoIpsecProfile resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile: Specify ikev2 Profile
        :param pulumi.Input[str] set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile: Specify isakmp Profile
        :param pulumi.Input[Sequence[pulumi.Input[str]]] set_transform_sets: Specify list of transform sets in priority order
        """
        if device is not None:
            pulumi.set(__self__, "device", device)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile is not None:
            pulumi.set(__self__, "set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile", set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile)
        if set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile is not None:
            pulumi.set(__self__, "set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile", set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile)
        if set_transform_sets is not None:
            pulumi.set(__self__, "set_transform_sets", set_transform_sets)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="setIsakmpProfileIkev2ProfileIkev2ProfileCaseIkev2Profile")
    def set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Specify ikev2 Profile
        """
        return pulumi.get(self, "set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile")

    @set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile.setter
    def set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile", value)

    @property
    @pulumi.getter(name="setIsakmpProfileIkev2ProfileIsakmpProfileCaseIsakmpProfile")
    def set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Specify isakmp Profile
        """
        return pulumi.get(self, "set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile")

    @set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile.setter
    def set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile", value)

    @property
    @pulumi.getter(name="setTransformSets")
    def set_transform_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify list of transform sets in priority order
        """
        return pulumi.get(self, "set_transform_sets")

    @set_transform_sets.setter
    def set_transform_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "set_transform_sets", value)


@pulumi.input_type
class _CryptoIpsecProfileState:
    def __init__(__self__, *,
                 device: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile: Optional[pulumi.Input[str]] = None,
                 set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile: Optional[pulumi.Input[str]] = None,
                 set_transform_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering CryptoIpsecProfile resources.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile: Specify ikev2 Profile
        :param pulumi.Input[str] set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile: Specify isakmp Profile
        :param pulumi.Input[Sequence[pulumi.Input[str]]] set_transform_sets: Specify list of transform sets in priority order
        """
        if device is not None:
            pulumi.set(__self__, "device", device)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile is not None:
            pulumi.set(__self__, "set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile", set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile)
        if set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile is not None:
            pulumi.set(__self__, "set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile", set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile)
        if set_transform_sets is not None:
            pulumi.set(__self__, "set_transform_sets", set_transform_sets)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="setIsakmpProfileIkev2ProfileIkev2ProfileCaseIkev2Profile")
    def set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Specify ikev2 Profile
        """
        return pulumi.get(self, "set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile")

    @set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile.setter
    def set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile", value)

    @property
    @pulumi.getter(name="setIsakmpProfileIkev2ProfileIsakmpProfileCaseIsakmpProfile")
    def set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile(self) -> Optional[pulumi.Input[str]]:
        """
        Specify isakmp Profile
        """
        return pulumi.get(self, "set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile")

    @set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile.setter
    def set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile", value)

    @property
    @pulumi.getter(name="setTransformSets")
    def set_transform_sets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify list of transform sets in priority order
        """
        return pulumi.get(self, "set_transform_sets")

    @set_transform_sets.setter
    def set_transform_sets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "set_transform_sets", value)


class CryptoIpsecProfile(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile: Optional[pulumi.Input[str]] = None,
                 set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile: Optional[pulumi.Input[str]] = None,
                 set_transform_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a CryptoIpsecProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile: Specify ikev2 Profile
        :param pulumi.Input[str] set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile: Specify isakmp Profile
        :param pulumi.Input[Sequence[pulumi.Input[str]]] set_transform_sets: Specify list of transform sets in priority order
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CryptoIpsecProfileArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a CryptoIpsecProfile resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CryptoIpsecProfileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CryptoIpsecProfileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile: Optional[pulumi.Input[str]] = None,
                 set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile: Optional[pulumi.Input[str]] = None,
                 set_transform_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CryptoIpsecProfileArgs.__new__(CryptoIpsecProfileArgs)

            __props__.__dict__["device"] = device
            __props__.__dict__["name"] = name
            __props__.__dict__["set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile"] = set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile
            __props__.__dict__["set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile"] = set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile
            __props__.__dict__["set_transform_sets"] = set_transform_sets
        super(CryptoIpsecProfile, __self__).__init__(
            'iosxe:iosxe/cryptoIpsecProfile:CryptoIpsecProfile',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            device: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile: Optional[pulumi.Input[str]] = None,
            set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile: Optional[pulumi.Input[str]] = None,
            set_transform_sets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'CryptoIpsecProfile':
        """
        Get an existing CryptoIpsecProfile resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile: Specify ikev2 Profile
        :param pulumi.Input[str] set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile: Specify isakmp Profile
        :param pulumi.Input[Sequence[pulumi.Input[str]]] set_transform_sets: Specify list of transform sets in priority order
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CryptoIpsecProfileState.__new__(_CryptoIpsecProfileState)

        __props__.__dict__["device"] = device
        __props__.__dict__["name"] = name
        __props__.__dict__["set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile"] = set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile
        __props__.__dict__["set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile"] = set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile
        __props__.__dict__["set_transform_sets"] = set_transform_sets
        return CryptoIpsecProfile(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="setIsakmpProfileIkev2ProfileIkev2ProfileCaseIkev2Profile")
    def set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile(self) -> pulumi.Output[Optional[str]]:
        """
        Specify ikev2 Profile
        """
        return pulumi.get(self, "set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile")

    @property
    @pulumi.getter(name="setIsakmpProfileIkev2ProfileIsakmpProfileCaseIsakmpProfile")
    def set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile(self) -> pulumi.Output[Optional[str]]:
        """
        Specify isakmp Profile
        """
        return pulumi.get(self, "set_isakmp_profile_ikev2_profile_isakmp_profile_case_isakmp_profile")

    @property
    @pulumi.getter(name="setTransformSets")
    def set_transform_sets(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Specify list of transform sets in priority order
        """
        return pulumi.get(self, "set_transform_sets")

