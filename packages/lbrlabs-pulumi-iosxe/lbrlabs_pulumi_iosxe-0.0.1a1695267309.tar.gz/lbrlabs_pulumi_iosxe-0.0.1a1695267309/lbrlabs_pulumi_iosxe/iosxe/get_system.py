# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetSystemResult',
    'AwaitableGetSystemResult',
    'get_system',
    'get_system_output',
]

@pulumi.output_type
class GetSystemResult:
    """
    A collection of values returned by getSystem.
    """
    def __init__(__self__, device=None, hostname=None, id=None, ip_domain_lookup=None, ip_domain_name=None, ip_multicast_routing=None, ip_multicast_routing_distributed=None, ip_routing=None, ip_source_route=None, ipv6_unicast_routing=None, login_delay=None, login_on_failure=None, login_on_failure_log=None, login_on_success=None, login_on_success_log=None, mtu=None, multicast_routing_switch=None, multicast_routing_vrfs=None):
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if hostname and not isinstance(hostname, str):
            raise TypeError("Expected argument 'hostname' to be a str")
        pulumi.set(__self__, "hostname", hostname)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_domain_lookup and not isinstance(ip_domain_lookup, bool):
            raise TypeError("Expected argument 'ip_domain_lookup' to be a bool")
        pulumi.set(__self__, "ip_domain_lookup", ip_domain_lookup)
        if ip_domain_name and not isinstance(ip_domain_name, str):
            raise TypeError("Expected argument 'ip_domain_name' to be a str")
        pulumi.set(__self__, "ip_domain_name", ip_domain_name)
        if ip_multicast_routing and not isinstance(ip_multicast_routing, bool):
            raise TypeError("Expected argument 'ip_multicast_routing' to be a bool")
        pulumi.set(__self__, "ip_multicast_routing", ip_multicast_routing)
        if ip_multicast_routing_distributed and not isinstance(ip_multicast_routing_distributed, bool):
            raise TypeError("Expected argument 'ip_multicast_routing_distributed' to be a bool")
        pulumi.set(__self__, "ip_multicast_routing_distributed", ip_multicast_routing_distributed)
        if ip_routing and not isinstance(ip_routing, bool):
            raise TypeError("Expected argument 'ip_routing' to be a bool")
        pulumi.set(__self__, "ip_routing", ip_routing)
        if ip_source_route and not isinstance(ip_source_route, bool):
            raise TypeError("Expected argument 'ip_source_route' to be a bool")
        pulumi.set(__self__, "ip_source_route", ip_source_route)
        if ipv6_unicast_routing and not isinstance(ipv6_unicast_routing, bool):
            raise TypeError("Expected argument 'ipv6_unicast_routing' to be a bool")
        pulumi.set(__self__, "ipv6_unicast_routing", ipv6_unicast_routing)
        if login_delay and not isinstance(login_delay, int):
            raise TypeError("Expected argument 'login_delay' to be a int")
        pulumi.set(__self__, "login_delay", login_delay)
        if login_on_failure and not isinstance(login_on_failure, bool):
            raise TypeError("Expected argument 'login_on_failure' to be a bool")
        pulumi.set(__self__, "login_on_failure", login_on_failure)
        if login_on_failure_log and not isinstance(login_on_failure_log, bool):
            raise TypeError("Expected argument 'login_on_failure_log' to be a bool")
        pulumi.set(__self__, "login_on_failure_log", login_on_failure_log)
        if login_on_success and not isinstance(login_on_success, bool):
            raise TypeError("Expected argument 'login_on_success' to be a bool")
        pulumi.set(__self__, "login_on_success", login_on_success)
        if login_on_success_log and not isinstance(login_on_success_log, bool):
            raise TypeError("Expected argument 'login_on_success_log' to be a bool")
        pulumi.set(__self__, "login_on_success_log", login_on_success_log)
        if mtu and not isinstance(mtu, int):
            raise TypeError("Expected argument 'mtu' to be a int")
        pulumi.set(__self__, "mtu", mtu)
        if multicast_routing_switch and not isinstance(multicast_routing_switch, bool):
            raise TypeError("Expected argument 'multicast_routing_switch' to be a bool")
        pulumi.set(__self__, "multicast_routing_switch", multicast_routing_switch)
        if multicast_routing_vrfs and not isinstance(multicast_routing_vrfs, list):
            raise TypeError("Expected argument 'multicast_routing_vrfs' to be a list")
        pulumi.set(__self__, "multicast_routing_vrfs", multicast_routing_vrfs)

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipDomainLookup")
    def ip_domain_lookup(self) -> bool:
        return pulumi.get(self, "ip_domain_lookup")

    @property
    @pulumi.getter(name="ipDomainName")
    def ip_domain_name(self) -> str:
        return pulumi.get(self, "ip_domain_name")

    @property
    @pulumi.getter(name="ipMulticastRouting")
    def ip_multicast_routing(self) -> bool:
        return pulumi.get(self, "ip_multicast_routing")

    @property
    @pulumi.getter(name="ipMulticastRoutingDistributed")
    def ip_multicast_routing_distributed(self) -> bool:
        return pulumi.get(self, "ip_multicast_routing_distributed")

    @property
    @pulumi.getter(name="ipRouting")
    def ip_routing(self) -> bool:
        return pulumi.get(self, "ip_routing")

    @property
    @pulumi.getter(name="ipSourceRoute")
    def ip_source_route(self) -> bool:
        return pulumi.get(self, "ip_source_route")

    @property
    @pulumi.getter(name="ipv6UnicastRouting")
    def ipv6_unicast_routing(self) -> bool:
        return pulumi.get(self, "ipv6_unicast_routing")

    @property
    @pulumi.getter(name="loginDelay")
    def login_delay(self) -> int:
        return pulumi.get(self, "login_delay")

    @property
    @pulumi.getter(name="loginOnFailure")
    def login_on_failure(self) -> bool:
        return pulumi.get(self, "login_on_failure")

    @property
    @pulumi.getter(name="loginOnFailureLog")
    def login_on_failure_log(self) -> bool:
        return pulumi.get(self, "login_on_failure_log")

    @property
    @pulumi.getter(name="loginOnSuccess")
    def login_on_success(self) -> bool:
        return pulumi.get(self, "login_on_success")

    @property
    @pulumi.getter(name="loginOnSuccessLog")
    def login_on_success_log(self) -> bool:
        return pulumi.get(self, "login_on_success_log")

    @property
    @pulumi.getter
    def mtu(self) -> int:
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter(name="multicastRoutingSwitch")
    def multicast_routing_switch(self) -> bool:
        return pulumi.get(self, "multicast_routing_switch")

    @property
    @pulumi.getter(name="multicastRoutingVrfs")
    def multicast_routing_vrfs(self) -> Sequence['outputs.GetSystemMulticastRoutingVrfResult']:
        return pulumi.get(self, "multicast_routing_vrfs")


class AwaitableGetSystemResult(GetSystemResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSystemResult(
            device=self.device,
            hostname=self.hostname,
            id=self.id,
            ip_domain_lookup=self.ip_domain_lookup,
            ip_domain_name=self.ip_domain_name,
            ip_multicast_routing=self.ip_multicast_routing,
            ip_multicast_routing_distributed=self.ip_multicast_routing_distributed,
            ip_routing=self.ip_routing,
            ip_source_route=self.ip_source_route,
            ipv6_unicast_routing=self.ipv6_unicast_routing,
            login_delay=self.login_delay,
            login_on_failure=self.login_on_failure,
            login_on_failure_log=self.login_on_failure_log,
            login_on_success=self.login_on_success,
            login_on_success_log=self.login_on_success_log,
            mtu=self.mtu,
            multicast_routing_switch=self.multicast_routing_switch,
            multicast_routing_vrfs=self.multicast_routing_vrfs)


def get_system(device: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSystemResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['device'] = device
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:iosxe/getSystem:getSystem', __args__, opts=opts, typ=GetSystemResult).value

    return AwaitableGetSystemResult(
        device=pulumi.get(__ret__, 'device'),
        hostname=pulumi.get(__ret__, 'hostname'),
        id=pulumi.get(__ret__, 'id'),
        ip_domain_lookup=pulumi.get(__ret__, 'ip_domain_lookup'),
        ip_domain_name=pulumi.get(__ret__, 'ip_domain_name'),
        ip_multicast_routing=pulumi.get(__ret__, 'ip_multicast_routing'),
        ip_multicast_routing_distributed=pulumi.get(__ret__, 'ip_multicast_routing_distributed'),
        ip_routing=pulumi.get(__ret__, 'ip_routing'),
        ip_source_route=pulumi.get(__ret__, 'ip_source_route'),
        ipv6_unicast_routing=pulumi.get(__ret__, 'ipv6_unicast_routing'),
        login_delay=pulumi.get(__ret__, 'login_delay'),
        login_on_failure=pulumi.get(__ret__, 'login_on_failure'),
        login_on_failure_log=pulumi.get(__ret__, 'login_on_failure_log'),
        login_on_success=pulumi.get(__ret__, 'login_on_success'),
        login_on_success_log=pulumi.get(__ret__, 'login_on_success_log'),
        mtu=pulumi.get(__ret__, 'mtu'),
        multicast_routing_switch=pulumi.get(__ret__, 'multicast_routing_switch'),
        multicast_routing_vrfs=pulumi.get(__ret__, 'multicast_routing_vrfs'))


@_utilities.lift_output_func(get_system)
def get_system_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSystemResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
