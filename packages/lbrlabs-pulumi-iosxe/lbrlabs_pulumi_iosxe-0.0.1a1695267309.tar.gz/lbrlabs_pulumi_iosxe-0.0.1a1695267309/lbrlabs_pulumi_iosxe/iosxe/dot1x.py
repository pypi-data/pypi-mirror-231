# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['Dot1xArgs', 'Dot1x']

@pulumi.input_type
class Dot1xArgs:
    def __init__(__self__, *,
                 auth_fail_eapol: Optional[pulumi.Input[bool]] = None,
                 credentials: Optional[pulumi.Input[Sequence[pulumi.Input['Dot1xCredentialArgs']]]] = None,
                 critical_eapol_config_block: Optional[pulumi.Input[bool]] = None,
                 critical_recovery_delay: Optional[pulumi.Input[int]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 logging_verbose: Optional[pulumi.Input[bool]] = None,
                 supplicant_controlled_transient: Optional[pulumi.Input[bool]] = None,
                 supplicant_force_multicast: Optional[pulumi.Input[bool]] = None,
                 system_auth_control: Optional[pulumi.Input[bool]] = None,
                 test_timeout: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Dot1x resource.
        :param pulumi.Input[bool] auth_fail_eapol: Send EAPOL-Success on successful auth-fail Authorization
        :param pulumi.Input[Sequence[pulumi.Input['Dot1xCredentialArgs']]] credentials: Configure 802.1X credentials profiles
        :param pulumi.Input[bool] critical_eapol_config_block: Block all EAPoL transaction on Critical Authentication
        :param pulumi.Input[int] critical_recovery_delay: Set 802.1x Critical Authentication Recovery Delay period - Range: `1`-`10000`
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] logging_verbose: Show verbose messages in system logs
        :param pulumi.Input[bool] supplicant_controlled_transient: Controlled access is only applied during authentication
        :param pulumi.Input[bool] supplicant_force_multicast: Force 802.1X supplicant to send multicast packets
        :param pulumi.Input[bool] system_auth_control: Enable or Disable SysAuthControl
        :param pulumi.Input[int] test_timeout: Timeout for device EAPOL capabilities test in seconds - Range: `1`-`65535`
        """
        if auth_fail_eapol is not None:
            pulumi.set(__self__, "auth_fail_eapol", auth_fail_eapol)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if critical_eapol_config_block is not None:
            pulumi.set(__self__, "critical_eapol_config_block", critical_eapol_config_block)
        if critical_recovery_delay is not None:
            pulumi.set(__self__, "critical_recovery_delay", critical_recovery_delay)
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if logging_verbose is not None:
            pulumi.set(__self__, "logging_verbose", logging_verbose)
        if supplicant_controlled_transient is not None:
            pulumi.set(__self__, "supplicant_controlled_transient", supplicant_controlled_transient)
        if supplicant_force_multicast is not None:
            pulumi.set(__self__, "supplicant_force_multicast", supplicant_force_multicast)
        if system_auth_control is not None:
            pulumi.set(__self__, "system_auth_control", system_auth_control)
        if test_timeout is not None:
            pulumi.set(__self__, "test_timeout", test_timeout)

    @property
    @pulumi.getter(name="authFailEapol")
    def auth_fail_eapol(self) -> Optional[pulumi.Input[bool]]:
        """
        Send EAPOL-Success on successful auth-fail Authorization
        """
        return pulumi.get(self, "auth_fail_eapol")

    @auth_fail_eapol.setter
    def auth_fail_eapol(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auth_fail_eapol", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Dot1xCredentialArgs']]]]:
        """
        Configure 802.1X credentials profiles
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Dot1xCredentialArgs']]]]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="criticalEapolConfigBlock")
    def critical_eapol_config_block(self) -> Optional[pulumi.Input[bool]]:
        """
        Block all EAPoL transaction on Critical Authentication
        """
        return pulumi.get(self, "critical_eapol_config_block")

    @critical_eapol_config_block.setter
    def critical_eapol_config_block(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "critical_eapol_config_block", value)

    @property
    @pulumi.getter(name="criticalRecoveryDelay")
    def critical_recovery_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Set 802.1x Critical Authentication Recovery Delay period - Range: `1`-`10000`
        """
        return pulumi.get(self, "critical_recovery_delay")

    @critical_recovery_delay.setter
    def critical_recovery_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "critical_recovery_delay", value)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="loggingVerbose")
    def logging_verbose(self) -> Optional[pulumi.Input[bool]]:
        """
        Show verbose messages in system logs
        """
        return pulumi.get(self, "logging_verbose")

    @logging_verbose.setter
    def logging_verbose(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logging_verbose", value)

    @property
    @pulumi.getter(name="supplicantControlledTransient")
    def supplicant_controlled_transient(self) -> Optional[pulumi.Input[bool]]:
        """
        Controlled access is only applied during authentication
        """
        return pulumi.get(self, "supplicant_controlled_transient")

    @supplicant_controlled_transient.setter
    def supplicant_controlled_transient(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "supplicant_controlled_transient", value)

    @property
    @pulumi.getter(name="supplicantForceMulticast")
    def supplicant_force_multicast(self) -> Optional[pulumi.Input[bool]]:
        """
        Force 802.1X supplicant to send multicast packets
        """
        return pulumi.get(self, "supplicant_force_multicast")

    @supplicant_force_multicast.setter
    def supplicant_force_multicast(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "supplicant_force_multicast", value)

    @property
    @pulumi.getter(name="systemAuthControl")
    def system_auth_control(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable or Disable SysAuthControl
        """
        return pulumi.get(self, "system_auth_control")

    @system_auth_control.setter
    def system_auth_control(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "system_auth_control", value)

    @property
    @pulumi.getter(name="testTimeout")
    def test_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout for device EAPOL capabilities test in seconds - Range: `1`-`65535`
        """
        return pulumi.get(self, "test_timeout")

    @test_timeout.setter
    def test_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "test_timeout", value)


@pulumi.input_type
class _Dot1xState:
    def __init__(__self__, *,
                 auth_fail_eapol: Optional[pulumi.Input[bool]] = None,
                 credentials: Optional[pulumi.Input[Sequence[pulumi.Input['Dot1xCredentialArgs']]]] = None,
                 critical_eapol_config_block: Optional[pulumi.Input[bool]] = None,
                 critical_recovery_delay: Optional[pulumi.Input[int]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 logging_verbose: Optional[pulumi.Input[bool]] = None,
                 supplicant_controlled_transient: Optional[pulumi.Input[bool]] = None,
                 supplicant_force_multicast: Optional[pulumi.Input[bool]] = None,
                 system_auth_control: Optional[pulumi.Input[bool]] = None,
                 test_timeout: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Dot1x resources.
        :param pulumi.Input[bool] auth_fail_eapol: Send EAPOL-Success on successful auth-fail Authorization
        :param pulumi.Input[Sequence[pulumi.Input['Dot1xCredentialArgs']]] credentials: Configure 802.1X credentials profiles
        :param pulumi.Input[bool] critical_eapol_config_block: Block all EAPoL transaction on Critical Authentication
        :param pulumi.Input[int] critical_recovery_delay: Set 802.1x Critical Authentication Recovery Delay period - Range: `1`-`10000`
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] logging_verbose: Show verbose messages in system logs
        :param pulumi.Input[bool] supplicant_controlled_transient: Controlled access is only applied during authentication
        :param pulumi.Input[bool] supplicant_force_multicast: Force 802.1X supplicant to send multicast packets
        :param pulumi.Input[bool] system_auth_control: Enable or Disable SysAuthControl
        :param pulumi.Input[int] test_timeout: Timeout for device EAPOL capabilities test in seconds - Range: `1`-`65535`
        """
        if auth_fail_eapol is not None:
            pulumi.set(__self__, "auth_fail_eapol", auth_fail_eapol)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if critical_eapol_config_block is not None:
            pulumi.set(__self__, "critical_eapol_config_block", critical_eapol_config_block)
        if critical_recovery_delay is not None:
            pulumi.set(__self__, "critical_recovery_delay", critical_recovery_delay)
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if logging_verbose is not None:
            pulumi.set(__self__, "logging_verbose", logging_verbose)
        if supplicant_controlled_transient is not None:
            pulumi.set(__self__, "supplicant_controlled_transient", supplicant_controlled_transient)
        if supplicant_force_multicast is not None:
            pulumi.set(__self__, "supplicant_force_multicast", supplicant_force_multicast)
        if system_auth_control is not None:
            pulumi.set(__self__, "system_auth_control", system_auth_control)
        if test_timeout is not None:
            pulumi.set(__self__, "test_timeout", test_timeout)

    @property
    @pulumi.getter(name="authFailEapol")
    def auth_fail_eapol(self) -> Optional[pulumi.Input[bool]]:
        """
        Send EAPOL-Success on successful auth-fail Authorization
        """
        return pulumi.get(self, "auth_fail_eapol")

    @auth_fail_eapol.setter
    def auth_fail_eapol(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auth_fail_eapol", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Dot1xCredentialArgs']]]]:
        """
        Configure 802.1X credentials profiles
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Dot1xCredentialArgs']]]]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="criticalEapolConfigBlock")
    def critical_eapol_config_block(self) -> Optional[pulumi.Input[bool]]:
        """
        Block all EAPoL transaction on Critical Authentication
        """
        return pulumi.get(self, "critical_eapol_config_block")

    @critical_eapol_config_block.setter
    def critical_eapol_config_block(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "critical_eapol_config_block", value)

    @property
    @pulumi.getter(name="criticalRecoveryDelay")
    def critical_recovery_delay(self) -> Optional[pulumi.Input[int]]:
        """
        Set 802.1x Critical Authentication Recovery Delay period - Range: `1`-`10000`
        """
        return pulumi.get(self, "critical_recovery_delay")

    @critical_recovery_delay.setter
    def critical_recovery_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "critical_recovery_delay", value)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="loggingVerbose")
    def logging_verbose(self) -> Optional[pulumi.Input[bool]]:
        """
        Show verbose messages in system logs
        """
        return pulumi.get(self, "logging_verbose")

    @logging_verbose.setter
    def logging_verbose(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logging_verbose", value)

    @property
    @pulumi.getter(name="supplicantControlledTransient")
    def supplicant_controlled_transient(self) -> Optional[pulumi.Input[bool]]:
        """
        Controlled access is only applied during authentication
        """
        return pulumi.get(self, "supplicant_controlled_transient")

    @supplicant_controlled_transient.setter
    def supplicant_controlled_transient(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "supplicant_controlled_transient", value)

    @property
    @pulumi.getter(name="supplicantForceMulticast")
    def supplicant_force_multicast(self) -> Optional[pulumi.Input[bool]]:
        """
        Force 802.1X supplicant to send multicast packets
        """
        return pulumi.get(self, "supplicant_force_multicast")

    @supplicant_force_multicast.setter
    def supplicant_force_multicast(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "supplicant_force_multicast", value)

    @property
    @pulumi.getter(name="systemAuthControl")
    def system_auth_control(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable or Disable SysAuthControl
        """
        return pulumi.get(self, "system_auth_control")

    @system_auth_control.setter
    def system_auth_control(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "system_auth_control", value)

    @property
    @pulumi.getter(name="testTimeout")
    def test_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout for device EAPOL capabilities test in seconds - Range: `1`-`65535`
        """
        return pulumi.get(self, "test_timeout")

    @test_timeout.setter
    def test_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "test_timeout", value)


class Dot1x(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_fail_eapol: Optional[pulumi.Input[bool]] = None,
                 credentials: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Dot1xCredentialArgs']]]]] = None,
                 critical_eapol_config_block: Optional[pulumi.Input[bool]] = None,
                 critical_recovery_delay: Optional[pulumi.Input[int]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 logging_verbose: Optional[pulumi.Input[bool]] = None,
                 supplicant_controlled_transient: Optional[pulumi.Input[bool]] = None,
                 supplicant_force_multicast: Optional[pulumi.Input[bool]] = None,
                 system_auth_control: Optional[pulumi.Input[bool]] = None,
                 test_timeout: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a Dot1x resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auth_fail_eapol: Send EAPOL-Success on successful auth-fail Authorization
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Dot1xCredentialArgs']]]] credentials: Configure 802.1X credentials profiles
        :param pulumi.Input[bool] critical_eapol_config_block: Block all EAPoL transaction on Critical Authentication
        :param pulumi.Input[int] critical_recovery_delay: Set 802.1x Critical Authentication Recovery Delay period - Range: `1`-`10000`
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] logging_verbose: Show verbose messages in system logs
        :param pulumi.Input[bool] supplicant_controlled_transient: Controlled access is only applied during authentication
        :param pulumi.Input[bool] supplicant_force_multicast: Force 802.1X supplicant to send multicast packets
        :param pulumi.Input[bool] system_auth_control: Enable or Disable SysAuthControl
        :param pulumi.Input[int] test_timeout: Timeout for device EAPOL capabilities test in seconds - Range: `1`-`65535`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[Dot1xArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Dot1x resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param Dot1xArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(Dot1xArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_fail_eapol: Optional[pulumi.Input[bool]] = None,
                 credentials: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Dot1xCredentialArgs']]]]] = None,
                 critical_eapol_config_block: Optional[pulumi.Input[bool]] = None,
                 critical_recovery_delay: Optional[pulumi.Input[int]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 logging_verbose: Optional[pulumi.Input[bool]] = None,
                 supplicant_controlled_transient: Optional[pulumi.Input[bool]] = None,
                 supplicant_force_multicast: Optional[pulumi.Input[bool]] = None,
                 system_auth_control: Optional[pulumi.Input[bool]] = None,
                 test_timeout: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = Dot1xArgs.__new__(Dot1xArgs)

            __props__.__dict__["auth_fail_eapol"] = auth_fail_eapol
            __props__.__dict__["credentials"] = credentials
            __props__.__dict__["critical_eapol_config_block"] = critical_eapol_config_block
            __props__.__dict__["critical_recovery_delay"] = critical_recovery_delay
            __props__.__dict__["delete_mode"] = delete_mode
            __props__.__dict__["device"] = device
            __props__.__dict__["logging_verbose"] = logging_verbose
            __props__.__dict__["supplicant_controlled_transient"] = supplicant_controlled_transient
            __props__.__dict__["supplicant_force_multicast"] = supplicant_force_multicast
            __props__.__dict__["system_auth_control"] = system_auth_control
            __props__.__dict__["test_timeout"] = test_timeout
        super(Dot1x, __self__).__init__(
            'iosxe:iosxe/dot1x:Dot1x',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_fail_eapol: Optional[pulumi.Input[bool]] = None,
            credentials: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Dot1xCredentialArgs']]]]] = None,
            critical_eapol_config_block: Optional[pulumi.Input[bool]] = None,
            critical_recovery_delay: Optional[pulumi.Input[int]] = None,
            delete_mode: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            logging_verbose: Optional[pulumi.Input[bool]] = None,
            supplicant_controlled_transient: Optional[pulumi.Input[bool]] = None,
            supplicant_force_multicast: Optional[pulumi.Input[bool]] = None,
            system_auth_control: Optional[pulumi.Input[bool]] = None,
            test_timeout: Optional[pulumi.Input[int]] = None) -> 'Dot1x':
        """
        Get an existing Dot1x resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auth_fail_eapol: Send EAPOL-Success on successful auth-fail Authorization
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Dot1xCredentialArgs']]]] credentials: Configure 802.1X credentials profiles
        :param pulumi.Input[bool] critical_eapol_config_block: Block all EAPoL transaction on Critical Authentication
        :param pulumi.Input[int] critical_recovery_delay: Set 802.1x Critical Authentication Recovery Delay period - Range: `1`-`10000`
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] logging_verbose: Show verbose messages in system logs
        :param pulumi.Input[bool] supplicant_controlled_transient: Controlled access is only applied during authentication
        :param pulumi.Input[bool] supplicant_force_multicast: Force 802.1X supplicant to send multicast packets
        :param pulumi.Input[bool] system_auth_control: Enable or Disable SysAuthControl
        :param pulumi.Input[int] test_timeout: Timeout for device EAPOL capabilities test in seconds - Range: `1`-`65535`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _Dot1xState.__new__(_Dot1xState)

        __props__.__dict__["auth_fail_eapol"] = auth_fail_eapol
        __props__.__dict__["credentials"] = credentials
        __props__.__dict__["critical_eapol_config_block"] = critical_eapol_config_block
        __props__.__dict__["critical_recovery_delay"] = critical_recovery_delay
        __props__.__dict__["delete_mode"] = delete_mode
        __props__.__dict__["device"] = device
        __props__.__dict__["logging_verbose"] = logging_verbose
        __props__.__dict__["supplicant_controlled_transient"] = supplicant_controlled_transient
        __props__.__dict__["supplicant_force_multicast"] = supplicant_force_multicast
        __props__.__dict__["system_auth_control"] = system_auth_control
        __props__.__dict__["test_timeout"] = test_timeout
        return Dot1x(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authFailEapol")
    def auth_fail_eapol(self) -> pulumi.Output[Optional[bool]]:
        """
        Send EAPOL-Success on successful auth-fail Authorization
        """
        return pulumi.get(self, "auth_fail_eapol")

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Output[Optional[Sequence['outputs.Dot1xCredential']]]:
        """
        Configure 802.1X credentials profiles
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="criticalEapolConfigBlock")
    def critical_eapol_config_block(self) -> pulumi.Output[Optional[bool]]:
        """
        Block all EAPoL transaction on Critical Authentication
        """
        return pulumi.get(self, "critical_eapol_config_block")

    @property
    @pulumi.getter(name="criticalRecoveryDelay")
    def critical_recovery_delay(self) -> pulumi.Output[Optional[int]]:
        """
        Set 802.1x Critical Authentication Recovery Delay period - Range: `1`-`10000`
        """
        return pulumi.get(self, "critical_recovery_delay")

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="loggingVerbose")
    def logging_verbose(self) -> pulumi.Output[Optional[bool]]:
        """
        Show verbose messages in system logs
        """
        return pulumi.get(self, "logging_verbose")

    @property
    @pulumi.getter(name="supplicantControlledTransient")
    def supplicant_controlled_transient(self) -> pulumi.Output[Optional[bool]]:
        """
        Controlled access is only applied during authentication
        """
        return pulumi.get(self, "supplicant_controlled_transient")

    @property
    @pulumi.getter(name="supplicantForceMulticast")
    def supplicant_force_multicast(self) -> pulumi.Output[Optional[bool]]:
        """
        Force 802.1X supplicant to send multicast packets
        """
        return pulumi.get(self, "supplicant_force_multicast")

    @property
    @pulumi.getter(name="systemAuthControl")
    def system_auth_control(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable or Disable SysAuthControl
        """
        return pulumi.get(self, "system_auth_control")

    @property
    @pulumi.getter(name="testTimeout")
    def test_timeout(self) -> pulumi.Output[Optional[int]]:
        """
        Timeout for device EAPOL capabilities test in seconds - Range: `1`-`65535`
        """
        return pulumi.get(self, "test_timeout")

