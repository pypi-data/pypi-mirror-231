# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetBgpAddressFamilyIpv4Result',
    'AwaitableGetBgpAddressFamilyIpv4Result',
    'get_bgp_address_family_ipv4',
    'get_bgp_address_family_ipv4_output',
]

@pulumi.output_type
class GetBgpAddressFamilyIpv4Result:
    """
    A collection of values returned by getBgpAddressFamilyIpv4.
    """
    def __init__(__self__, af_name=None, asn=None, device=None, id=None, ipv4_unicast_networks=None, ipv4_unicast_networks_masks=None, ipv4_unicast_redistribute_connected=None, ipv4_unicast_redistribute_static=None):
        if af_name and not isinstance(af_name, str):
            raise TypeError("Expected argument 'af_name' to be a str")
        pulumi.set(__self__, "af_name", af_name)
        if asn and not isinstance(asn, str):
            raise TypeError("Expected argument 'asn' to be a str")
        pulumi.set(__self__, "asn", asn)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ipv4_unicast_networks and not isinstance(ipv4_unicast_networks, list):
            raise TypeError("Expected argument 'ipv4_unicast_networks' to be a list")
        pulumi.set(__self__, "ipv4_unicast_networks", ipv4_unicast_networks)
        if ipv4_unicast_networks_masks and not isinstance(ipv4_unicast_networks_masks, list):
            raise TypeError("Expected argument 'ipv4_unicast_networks_masks' to be a list")
        pulumi.set(__self__, "ipv4_unicast_networks_masks", ipv4_unicast_networks_masks)
        if ipv4_unicast_redistribute_connected and not isinstance(ipv4_unicast_redistribute_connected, bool):
            raise TypeError("Expected argument 'ipv4_unicast_redistribute_connected' to be a bool")
        pulumi.set(__self__, "ipv4_unicast_redistribute_connected", ipv4_unicast_redistribute_connected)
        if ipv4_unicast_redistribute_static and not isinstance(ipv4_unicast_redistribute_static, bool):
            raise TypeError("Expected argument 'ipv4_unicast_redistribute_static' to be a bool")
        pulumi.set(__self__, "ipv4_unicast_redistribute_static", ipv4_unicast_redistribute_static)

    @property
    @pulumi.getter(name="afName")
    def af_name(self) -> str:
        return pulumi.get(self, "af_name")

    @property
    @pulumi.getter
    def asn(self) -> str:
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipv4UnicastNetworks")
    def ipv4_unicast_networks(self) -> Sequence['outputs.GetBgpAddressFamilyIpv4Ipv4UnicastNetworkResult']:
        return pulumi.get(self, "ipv4_unicast_networks")

    @property
    @pulumi.getter(name="ipv4UnicastNetworksMasks")
    def ipv4_unicast_networks_masks(self) -> Sequence['outputs.GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskResult']:
        return pulumi.get(self, "ipv4_unicast_networks_masks")

    @property
    @pulumi.getter(name="ipv4UnicastRedistributeConnected")
    def ipv4_unicast_redistribute_connected(self) -> bool:
        return pulumi.get(self, "ipv4_unicast_redistribute_connected")

    @property
    @pulumi.getter(name="ipv4UnicastRedistributeStatic")
    def ipv4_unicast_redistribute_static(self) -> bool:
        return pulumi.get(self, "ipv4_unicast_redistribute_static")


class AwaitableGetBgpAddressFamilyIpv4Result(GetBgpAddressFamilyIpv4Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBgpAddressFamilyIpv4Result(
            af_name=self.af_name,
            asn=self.asn,
            device=self.device,
            id=self.id,
            ipv4_unicast_networks=self.ipv4_unicast_networks,
            ipv4_unicast_networks_masks=self.ipv4_unicast_networks_masks,
            ipv4_unicast_redistribute_connected=self.ipv4_unicast_redistribute_connected,
            ipv4_unicast_redistribute_static=self.ipv4_unicast_redistribute_static)


def get_bgp_address_family_ipv4(af_name: Optional[str] = None,
                                asn: Optional[str] = None,
                                device: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBgpAddressFamilyIpv4Result:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['afName'] = af_name
    __args__['asn'] = asn
    __args__['device'] = device
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:iosxe/getBgpAddressFamilyIpv4:getBgpAddressFamilyIpv4', __args__, opts=opts, typ=GetBgpAddressFamilyIpv4Result).value

    return AwaitableGetBgpAddressFamilyIpv4Result(
        af_name=pulumi.get(__ret__, 'af_name'),
        asn=pulumi.get(__ret__, 'asn'),
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        ipv4_unicast_networks=pulumi.get(__ret__, 'ipv4_unicast_networks'),
        ipv4_unicast_networks_masks=pulumi.get(__ret__, 'ipv4_unicast_networks_masks'),
        ipv4_unicast_redistribute_connected=pulumi.get(__ret__, 'ipv4_unicast_redistribute_connected'),
        ipv4_unicast_redistribute_static=pulumi.get(__ret__, 'ipv4_unicast_redistribute_static'))


@_utilities.lift_output_func(get_bgp_address_family_ipv4)
def get_bgp_address_family_ipv4_output(af_name: Optional[pulumi.Input[str]] = None,
                                       asn: Optional[pulumi.Input[str]] = None,
                                       device: Optional[pulumi.Input[Optional[str]]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBgpAddressFamilyIpv4Result]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
