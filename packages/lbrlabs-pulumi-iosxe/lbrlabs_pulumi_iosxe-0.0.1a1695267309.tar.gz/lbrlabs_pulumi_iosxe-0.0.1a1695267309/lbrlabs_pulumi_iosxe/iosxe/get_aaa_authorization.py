# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetAaaAuthorizationResult',
    'AwaitableGetAaaAuthorizationResult',
    'get_aaa_authorization',
    'get_aaa_authorization_output',
]

@pulumi.output_type
class GetAaaAuthorizationResult:
    """
    A collection of values returned by getAaaAuthorization.
    """
    def __init__(__self__, device=None, execs=None, id=None, networks=None):
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if execs and not isinstance(execs, list):
            raise TypeError("Expected argument 'execs' to be a list")
        pulumi.set(__self__, "execs", execs)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if networks and not isinstance(networks, list):
            raise TypeError("Expected argument 'networks' to be a list")
        pulumi.set(__self__, "networks", networks)

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def execs(self) -> Sequence['outputs.GetAaaAuthorizationExecResult']:
        return pulumi.get(self, "execs")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def networks(self) -> Sequence['outputs.GetAaaAuthorizationNetworkResult']:
        return pulumi.get(self, "networks")


class AwaitableGetAaaAuthorizationResult(GetAaaAuthorizationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAaaAuthorizationResult(
            device=self.device,
            execs=self.execs,
            id=self.id,
            networks=self.networks)


def get_aaa_authorization(device: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAaaAuthorizationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['device'] = device
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:iosxe/getAaaAuthorization:getAaaAuthorization', __args__, opts=opts, typ=GetAaaAuthorizationResult).value

    return AwaitableGetAaaAuthorizationResult(
        device=pulumi.get(__ret__, 'device'),
        execs=pulumi.get(__ret__, 'execs'),
        id=pulumi.get(__ret__, 'id'),
        networks=pulumi.get(__ret__, 'networks'))


@_utilities.lift_output_func(get_aaa_authorization)
def get_aaa_authorization_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAaaAuthorizationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
