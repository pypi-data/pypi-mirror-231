# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BfdArgs', 'Bfd']

@pulumi.input_type
class BfdArgs:
    def __init__(__self__, *,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 ipv4_both_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv4BothVrfArgs']]]] = None,
                 ipv4_with_dst_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv4WithDstVrfArgs']]]] = None,
                 ipv4_with_src_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv4WithSrcVrfArgs']]]] = None,
                 ipv4_without_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv4WithoutVrfArgs']]]] = None,
                 ipv6_with_both_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithBothVrfArgs']]]] = None,
                 ipv6_with_dst_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithDstVrfArgs']]]] = None,
                 ipv6_with_src_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithSrcVrfArgs']]]] = None,
                 ipv6_without_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithoutVrfArgs']]]] = None,
                 slow_timers: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Bfd resource.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input['BfdIpv4BothVrfArgs']]] ipv4_both_vrfs: IPv4 Address Family with vrf
        :param pulumi.Input[Sequence[pulumi.Input['BfdIpv4WithDstVrfArgs']]] ipv4_with_dst_vrfs: IPv4 Address Family with vrf
        :param pulumi.Input[Sequence[pulumi.Input['BfdIpv4WithSrcVrfArgs']]] ipv4_with_src_vrfs: IPv4 Address Family with vrf
        :param pulumi.Input[Sequence[pulumi.Input['BfdIpv4WithoutVrfArgs']]] ipv4_without_vrfs: IPv4 Address Family with vrf
        :param pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithBothVrfArgs']]] ipv6_with_both_vrfs: IPv6 Address Family with vrf
        :param pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithDstVrfArgs']]] ipv6_with_dst_vrfs: IPv6 Address Family with vrf
        :param pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithSrcVrfArgs']]] ipv6_with_src_vrfs: IPv6 Address Family with vrf
        :param pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithoutVrfArgs']]] ipv6_without_vrfs: IPv6 Address Family with vrf
        :param pulumi.Input[int] slow_timers: Value in ms to use for slow timers - Range: `1000`-`30000`
        """
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if ipv4_both_vrfs is not None:
            pulumi.set(__self__, "ipv4_both_vrfs", ipv4_both_vrfs)
        if ipv4_with_dst_vrfs is not None:
            pulumi.set(__self__, "ipv4_with_dst_vrfs", ipv4_with_dst_vrfs)
        if ipv4_with_src_vrfs is not None:
            pulumi.set(__self__, "ipv4_with_src_vrfs", ipv4_with_src_vrfs)
        if ipv4_without_vrfs is not None:
            pulumi.set(__self__, "ipv4_without_vrfs", ipv4_without_vrfs)
        if ipv6_with_both_vrfs is not None:
            pulumi.set(__self__, "ipv6_with_both_vrfs", ipv6_with_both_vrfs)
        if ipv6_with_dst_vrfs is not None:
            pulumi.set(__self__, "ipv6_with_dst_vrfs", ipv6_with_dst_vrfs)
        if ipv6_with_src_vrfs is not None:
            pulumi.set(__self__, "ipv6_with_src_vrfs", ipv6_with_src_vrfs)
        if ipv6_without_vrfs is not None:
            pulumi.set(__self__, "ipv6_without_vrfs", ipv6_without_vrfs)
        if slow_timers is not None:
            pulumi.set(__self__, "slow_timers", slow_timers)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="ipv4BothVrfs")
    def ipv4_both_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv4BothVrfArgs']]]]:
        """
        IPv4 Address Family with vrf
        """
        return pulumi.get(self, "ipv4_both_vrfs")

    @ipv4_both_vrfs.setter
    def ipv4_both_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv4BothVrfArgs']]]]):
        pulumi.set(self, "ipv4_both_vrfs", value)

    @property
    @pulumi.getter(name="ipv4WithDstVrfs")
    def ipv4_with_dst_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv4WithDstVrfArgs']]]]:
        """
        IPv4 Address Family with vrf
        """
        return pulumi.get(self, "ipv4_with_dst_vrfs")

    @ipv4_with_dst_vrfs.setter
    def ipv4_with_dst_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv4WithDstVrfArgs']]]]):
        pulumi.set(self, "ipv4_with_dst_vrfs", value)

    @property
    @pulumi.getter(name="ipv4WithSrcVrfs")
    def ipv4_with_src_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv4WithSrcVrfArgs']]]]:
        """
        IPv4 Address Family with vrf
        """
        return pulumi.get(self, "ipv4_with_src_vrfs")

    @ipv4_with_src_vrfs.setter
    def ipv4_with_src_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv4WithSrcVrfArgs']]]]):
        pulumi.set(self, "ipv4_with_src_vrfs", value)

    @property
    @pulumi.getter(name="ipv4WithoutVrfs")
    def ipv4_without_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv4WithoutVrfArgs']]]]:
        """
        IPv4 Address Family with vrf
        """
        return pulumi.get(self, "ipv4_without_vrfs")

    @ipv4_without_vrfs.setter
    def ipv4_without_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv4WithoutVrfArgs']]]]):
        pulumi.set(self, "ipv4_without_vrfs", value)

    @property
    @pulumi.getter(name="ipv6WithBothVrfs")
    def ipv6_with_both_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithBothVrfArgs']]]]:
        """
        IPv6 Address Family with vrf
        """
        return pulumi.get(self, "ipv6_with_both_vrfs")

    @ipv6_with_both_vrfs.setter
    def ipv6_with_both_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithBothVrfArgs']]]]):
        pulumi.set(self, "ipv6_with_both_vrfs", value)

    @property
    @pulumi.getter(name="ipv6WithDstVrfs")
    def ipv6_with_dst_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithDstVrfArgs']]]]:
        """
        IPv6 Address Family with vrf
        """
        return pulumi.get(self, "ipv6_with_dst_vrfs")

    @ipv6_with_dst_vrfs.setter
    def ipv6_with_dst_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithDstVrfArgs']]]]):
        pulumi.set(self, "ipv6_with_dst_vrfs", value)

    @property
    @pulumi.getter(name="ipv6WithSrcVrfs")
    def ipv6_with_src_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithSrcVrfArgs']]]]:
        """
        IPv6 Address Family with vrf
        """
        return pulumi.get(self, "ipv6_with_src_vrfs")

    @ipv6_with_src_vrfs.setter
    def ipv6_with_src_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithSrcVrfArgs']]]]):
        pulumi.set(self, "ipv6_with_src_vrfs", value)

    @property
    @pulumi.getter(name="ipv6WithoutVrfs")
    def ipv6_without_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithoutVrfArgs']]]]:
        """
        IPv6 Address Family with vrf
        """
        return pulumi.get(self, "ipv6_without_vrfs")

    @ipv6_without_vrfs.setter
    def ipv6_without_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithoutVrfArgs']]]]):
        pulumi.set(self, "ipv6_without_vrfs", value)

    @property
    @pulumi.getter(name="slowTimers")
    def slow_timers(self) -> Optional[pulumi.Input[int]]:
        """
        Value in ms to use for slow timers - Range: `1000`-`30000`
        """
        return pulumi.get(self, "slow_timers")

    @slow_timers.setter
    def slow_timers(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "slow_timers", value)


@pulumi.input_type
class _BfdState:
    def __init__(__self__, *,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 ipv4_both_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv4BothVrfArgs']]]] = None,
                 ipv4_with_dst_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv4WithDstVrfArgs']]]] = None,
                 ipv4_with_src_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv4WithSrcVrfArgs']]]] = None,
                 ipv4_without_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv4WithoutVrfArgs']]]] = None,
                 ipv6_with_both_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithBothVrfArgs']]]] = None,
                 ipv6_with_dst_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithDstVrfArgs']]]] = None,
                 ipv6_with_src_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithSrcVrfArgs']]]] = None,
                 ipv6_without_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithoutVrfArgs']]]] = None,
                 slow_timers: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Bfd resources.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input['BfdIpv4BothVrfArgs']]] ipv4_both_vrfs: IPv4 Address Family with vrf
        :param pulumi.Input[Sequence[pulumi.Input['BfdIpv4WithDstVrfArgs']]] ipv4_with_dst_vrfs: IPv4 Address Family with vrf
        :param pulumi.Input[Sequence[pulumi.Input['BfdIpv4WithSrcVrfArgs']]] ipv4_with_src_vrfs: IPv4 Address Family with vrf
        :param pulumi.Input[Sequence[pulumi.Input['BfdIpv4WithoutVrfArgs']]] ipv4_without_vrfs: IPv4 Address Family with vrf
        :param pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithBothVrfArgs']]] ipv6_with_both_vrfs: IPv6 Address Family with vrf
        :param pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithDstVrfArgs']]] ipv6_with_dst_vrfs: IPv6 Address Family with vrf
        :param pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithSrcVrfArgs']]] ipv6_with_src_vrfs: IPv6 Address Family with vrf
        :param pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithoutVrfArgs']]] ipv6_without_vrfs: IPv6 Address Family with vrf
        :param pulumi.Input[int] slow_timers: Value in ms to use for slow timers - Range: `1000`-`30000`
        """
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if ipv4_both_vrfs is not None:
            pulumi.set(__self__, "ipv4_both_vrfs", ipv4_both_vrfs)
        if ipv4_with_dst_vrfs is not None:
            pulumi.set(__self__, "ipv4_with_dst_vrfs", ipv4_with_dst_vrfs)
        if ipv4_with_src_vrfs is not None:
            pulumi.set(__self__, "ipv4_with_src_vrfs", ipv4_with_src_vrfs)
        if ipv4_without_vrfs is not None:
            pulumi.set(__self__, "ipv4_without_vrfs", ipv4_without_vrfs)
        if ipv6_with_both_vrfs is not None:
            pulumi.set(__self__, "ipv6_with_both_vrfs", ipv6_with_both_vrfs)
        if ipv6_with_dst_vrfs is not None:
            pulumi.set(__self__, "ipv6_with_dst_vrfs", ipv6_with_dst_vrfs)
        if ipv6_with_src_vrfs is not None:
            pulumi.set(__self__, "ipv6_with_src_vrfs", ipv6_with_src_vrfs)
        if ipv6_without_vrfs is not None:
            pulumi.set(__self__, "ipv6_without_vrfs", ipv6_without_vrfs)
        if slow_timers is not None:
            pulumi.set(__self__, "slow_timers", slow_timers)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="ipv4BothVrfs")
    def ipv4_both_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv4BothVrfArgs']]]]:
        """
        IPv4 Address Family with vrf
        """
        return pulumi.get(self, "ipv4_both_vrfs")

    @ipv4_both_vrfs.setter
    def ipv4_both_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv4BothVrfArgs']]]]):
        pulumi.set(self, "ipv4_both_vrfs", value)

    @property
    @pulumi.getter(name="ipv4WithDstVrfs")
    def ipv4_with_dst_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv4WithDstVrfArgs']]]]:
        """
        IPv4 Address Family with vrf
        """
        return pulumi.get(self, "ipv4_with_dst_vrfs")

    @ipv4_with_dst_vrfs.setter
    def ipv4_with_dst_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv4WithDstVrfArgs']]]]):
        pulumi.set(self, "ipv4_with_dst_vrfs", value)

    @property
    @pulumi.getter(name="ipv4WithSrcVrfs")
    def ipv4_with_src_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv4WithSrcVrfArgs']]]]:
        """
        IPv4 Address Family with vrf
        """
        return pulumi.get(self, "ipv4_with_src_vrfs")

    @ipv4_with_src_vrfs.setter
    def ipv4_with_src_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv4WithSrcVrfArgs']]]]):
        pulumi.set(self, "ipv4_with_src_vrfs", value)

    @property
    @pulumi.getter(name="ipv4WithoutVrfs")
    def ipv4_without_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv4WithoutVrfArgs']]]]:
        """
        IPv4 Address Family with vrf
        """
        return pulumi.get(self, "ipv4_without_vrfs")

    @ipv4_without_vrfs.setter
    def ipv4_without_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv4WithoutVrfArgs']]]]):
        pulumi.set(self, "ipv4_without_vrfs", value)

    @property
    @pulumi.getter(name="ipv6WithBothVrfs")
    def ipv6_with_both_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithBothVrfArgs']]]]:
        """
        IPv6 Address Family with vrf
        """
        return pulumi.get(self, "ipv6_with_both_vrfs")

    @ipv6_with_both_vrfs.setter
    def ipv6_with_both_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithBothVrfArgs']]]]):
        pulumi.set(self, "ipv6_with_both_vrfs", value)

    @property
    @pulumi.getter(name="ipv6WithDstVrfs")
    def ipv6_with_dst_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithDstVrfArgs']]]]:
        """
        IPv6 Address Family with vrf
        """
        return pulumi.get(self, "ipv6_with_dst_vrfs")

    @ipv6_with_dst_vrfs.setter
    def ipv6_with_dst_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithDstVrfArgs']]]]):
        pulumi.set(self, "ipv6_with_dst_vrfs", value)

    @property
    @pulumi.getter(name="ipv6WithSrcVrfs")
    def ipv6_with_src_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithSrcVrfArgs']]]]:
        """
        IPv6 Address Family with vrf
        """
        return pulumi.get(self, "ipv6_with_src_vrfs")

    @ipv6_with_src_vrfs.setter
    def ipv6_with_src_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithSrcVrfArgs']]]]):
        pulumi.set(self, "ipv6_with_src_vrfs", value)

    @property
    @pulumi.getter(name="ipv6WithoutVrfs")
    def ipv6_without_vrfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithoutVrfArgs']]]]:
        """
        IPv6 Address Family with vrf
        """
        return pulumi.get(self, "ipv6_without_vrfs")

    @ipv6_without_vrfs.setter
    def ipv6_without_vrfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BfdIpv6WithoutVrfArgs']]]]):
        pulumi.set(self, "ipv6_without_vrfs", value)

    @property
    @pulumi.getter(name="slowTimers")
    def slow_timers(self) -> Optional[pulumi.Input[int]]:
        """
        Value in ms to use for slow timers - Range: `1000`-`30000`
        """
        return pulumi.get(self, "slow_timers")

    @slow_timers.setter
    def slow_timers(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "slow_timers", value)


class Bfd(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 ipv4_both_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv4BothVrfArgs']]]]] = None,
                 ipv4_with_dst_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv4WithDstVrfArgs']]]]] = None,
                 ipv4_with_src_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv4WithSrcVrfArgs']]]]] = None,
                 ipv4_without_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv4WithoutVrfArgs']]]]] = None,
                 ipv6_with_both_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv6WithBothVrfArgs']]]]] = None,
                 ipv6_with_dst_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv6WithDstVrfArgs']]]]] = None,
                 ipv6_with_src_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv6WithSrcVrfArgs']]]]] = None,
                 ipv6_without_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv6WithoutVrfArgs']]]]] = None,
                 slow_timers: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a Bfd resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv4BothVrfArgs']]]] ipv4_both_vrfs: IPv4 Address Family with vrf
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv4WithDstVrfArgs']]]] ipv4_with_dst_vrfs: IPv4 Address Family with vrf
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv4WithSrcVrfArgs']]]] ipv4_with_src_vrfs: IPv4 Address Family with vrf
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv4WithoutVrfArgs']]]] ipv4_without_vrfs: IPv4 Address Family with vrf
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv6WithBothVrfArgs']]]] ipv6_with_both_vrfs: IPv6 Address Family with vrf
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv6WithDstVrfArgs']]]] ipv6_with_dst_vrfs: IPv6 Address Family with vrf
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv6WithSrcVrfArgs']]]] ipv6_with_src_vrfs: IPv6 Address Family with vrf
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv6WithoutVrfArgs']]]] ipv6_without_vrfs: IPv6 Address Family with vrf
        :param pulumi.Input[int] slow_timers: Value in ms to use for slow timers - Range: `1000`-`30000`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[BfdArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Bfd resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param BfdArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BfdArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 ipv4_both_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv4BothVrfArgs']]]]] = None,
                 ipv4_with_dst_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv4WithDstVrfArgs']]]]] = None,
                 ipv4_with_src_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv4WithSrcVrfArgs']]]]] = None,
                 ipv4_without_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv4WithoutVrfArgs']]]]] = None,
                 ipv6_with_both_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv6WithBothVrfArgs']]]]] = None,
                 ipv6_with_dst_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv6WithDstVrfArgs']]]]] = None,
                 ipv6_with_src_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv6WithSrcVrfArgs']]]]] = None,
                 ipv6_without_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv6WithoutVrfArgs']]]]] = None,
                 slow_timers: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BfdArgs.__new__(BfdArgs)

            __props__.__dict__["delete_mode"] = delete_mode
            __props__.__dict__["device"] = device
            __props__.__dict__["ipv4_both_vrfs"] = ipv4_both_vrfs
            __props__.__dict__["ipv4_with_dst_vrfs"] = ipv4_with_dst_vrfs
            __props__.__dict__["ipv4_with_src_vrfs"] = ipv4_with_src_vrfs
            __props__.__dict__["ipv4_without_vrfs"] = ipv4_without_vrfs
            __props__.__dict__["ipv6_with_both_vrfs"] = ipv6_with_both_vrfs
            __props__.__dict__["ipv6_with_dst_vrfs"] = ipv6_with_dst_vrfs
            __props__.__dict__["ipv6_with_src_vrfs"] = ipv6_with_src_vrfs
            __props__.__dict__["ipv6_without_vrfs"] = ipv6_without_vrfs
            __props__.__dict__["slow_timers"] = slow_timers
        super(Bfd, __self__).__init__(
            'iosxe:iosxe/bfd:Bfd',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            delete_mode: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            ipv4_both_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv4BothVrfArgs']]]]] = None,
            ipv4_with_dst_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv4WithDstVrfArgs']]]]] = None,
            ipv4_with_src_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv4WithSrcVrfArgs']]]]] = None,
            ipv4_without_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv4WithoutVrfArgs']]]]] = None,
            ipv6_with_both_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv6WithBothVrfArgs']]]]] = None,
            ipv6_with_dst_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv6WithDstVrfArgs']]]]] = None,
            ipv6_with_src_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv6WithSrcVrfArgs']]]]] = None,
            ipv6_without_vrfs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv6WithoutVrfArgs']]]]] = None,
            slow_timers: Optional[pulumi.Input[int]] = None) -> 'Bfd':
        """
        Get an existing Bfd resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv4BothVrfArgs']]]] ipv4_both_vrfs: IPv4 Address Family with vrf
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv4WithDstVrfArgs']]]] ipv4_with_dst_vrfs: IPv4 Address Family with vrf
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv4WithSrcVrfArgs']]]] ipv4_with_src_vrfs: IPv4 Address Family with vrf
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv4WithoutVrfArgs']]]] ipv4_without_vrfs: IPv4 Address Family with vrf
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv6WithBothVrfArgs']]]] ipv6_with_both_vrfs: IPv6 Address Family with vrf
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv6WithDstVrfArgs']]]] ipv6_with_dst_vrfs: IPv6 Address Family with vrf
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv6WithSrcVrfArgs']]]] ipv6_with_src_vrfs: IPv6 Address Family with vrf
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['BfdIpv6WithoutVrfArgs']]]] ipv6_without_vrfs: IPv6 Address Family with vrf
        :param pulumi.Input[int] slow_timers: Value in ms to use for slow timers - Range: `1000`-`30000`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BfdState.__new__(_BfdState)

        __props__.__dict__["delete_mode"] = delete_mode
        __props__.__dict__["device"] = device
        __props__.__dict__["ipv4_both_vrfs"] = ipv4_both_vrfs
        __props__.__dict__["ipv4_with_dst_vrfs"] = ipv4_with_dst_vrfs
        __props__.__dict__["ipv4_with_src_vrfs"] = ipv4_with_src_vrfs
        __props__.__dict__["ipv4_without_vrfs"] = ipv4_without_vrfs
        __props__.__dict__["ipv6_with_both_vrfs"] = ipv6_with_both_vrfs
        __props__.__dict__["ipv6_with_dst_vrfs"] = ipv6_with_dst_vrfs
        __props__.__dict__["ipv6_with_src_vrfs"] = ipv6_with_src_vrfs
        __props__.__dict__["ipv6_without_vrfs"] = ipv6_without_vrfs
        __props__.__dict__["slow_timers"] = slow_timers
        return Bfd(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="ipv4BothVrfs")
    def ipv4_both_vrfs(self) -> pulumi.Output[Optional[Sequence['outputs.BfdIpv4BothVrf']]]:
        """
        IPv4 Address Family with vrf
        """
        return pulumi.get(self, "ipv4_both_vrfs")

    @property
    @pulumi.getter(name="ipv4WithDstVrfs")
    def ipv4_with_dst_vrfs(self) -> pulumi.Output[Optional[Sequence['outputs.BfdIpv4WithDstVrf']]]:
        """
        IPv4 Address Family with vrf
        """
        return pulumi.get(self, "ipv4_with_dst_vrfs")

    @property
    @pulumi.getter(name="ipv4WithSrcVrfs")
    def ipv4_with_src_vrfs(self) -> pulumi.Output[Optional[Sequence['outputs.BfdIpv4WithSrcVrf']]]:
        """
        IPv4 Address Family with vrf
        """
        return pulumi.get(self, "ipv4_with_src_vrfs")

    @property
    @pulumi.getter(name="ipv4WithoutVrfs")
    def ipv4_without_vrfs(self) -> pulumi.Output[Optional[Sequence['outputs.BfdIpv4WithoutVrf']]]:
        """
        IPv4 Address Family with vrf
        """
        return pulumi.get(self, "ipv4_without_vrfs")

    @property
    @pulumi.getter(name="ipv6WithBothVrfs")
    def ipv6_with_both_vrfs(self) -> pulumi.Output[Optional[Sequence['outputs.BfdIpv6WithBothVrf']]]:
        """
        IPv6 Address Family with vrf
        """
        return pulumi.get(self, "ipv6_with_both_vrfs")

    @property
    @pulumi.getter(name="ipv6WithDstVrfs")
    def ipv6_with_dst_vrfs(self) -> pulumi.Output[Optional[Sequence['outputs.BfdIpv6WithDstVrf']]]:
        """
        IPv6 Address Family with vrf
        """
        return pulumi.get(self, "ipv6_with_dst_vrfs")

    @property
    @pulumi.getter(name="ipv6WithSrcVrfs")
    def ipv6_with_src_vrfs(self) -> pulumi.Output[Optional[Sequence['outputs.BfdIpv6WithSrcVrf']]]:
        """
        IPv6 Address Family with vrf
        """
        return pulumi.get(self, "ipv6_with_src_vrfs")

    @property
    @pulumi.getter(name="ipv6WithoutVrfs")
    def ipv6_without_vrfs(self) -> pulumi.Output[Optional[Sequence['outputs.BfdIpv6WithoutVrf']]]:
        """
        IPv6 Address Family with vrf
        """
        return pulumi.get(self, "ipv6_without_vrfs")

    @property
    @pulumi.getter(name="slowTimers")
    def slow_timers(self) -> pulumi.Output[Optional[int]]:
        """
        Value in ms to use for slow timers - Range: `1000`-`30000`
        """
        return pulumi.get(self, "slow_timers")

