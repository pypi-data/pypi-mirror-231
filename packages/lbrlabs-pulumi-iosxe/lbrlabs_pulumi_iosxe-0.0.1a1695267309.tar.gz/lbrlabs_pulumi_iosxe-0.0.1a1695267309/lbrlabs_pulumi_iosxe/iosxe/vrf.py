# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VrfArgs', 'Vrf']

@pulumi.input_type
class VrfArgs:
    def __init__(__self__, *,
                 address_family_ipv4: Optional[pulumi.Input[bool]] = None,
                 address_family_ipv6: Optional[pulumi.Input[bool]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 ipv4_route_target_export_stitchings: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetExportStitchingArgs']]]] = None,
                 ipv4_route_target_exports: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetExportArgs']]]] = None,
                 ipv4_route_target_import_stitchings: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetImportStitchingArgs']]]] = None,
                 ipv4_route_target_imports: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetImportArgs']]]] = None,
                 ipv6_route_target_export_stitchings: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetExportStitchingArgs']]]] = None,
                 ipv6_route_target_exports: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetExportArgs']]]] = None,
                 ipv6_route_target_import_stitchings: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetImportStitchingArgs']]]] = None,
                 ipv6_route_target_imports: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetImportArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rd: Optional[pulumi.Input[str]] = None,
                 route_target_exports: Optional[pulumi.Input[Sequence[pulumi.Input['VrfRouteTargetExportArgs']]]] = None,
                 route_target_imports: Optional[pulumi.Input[Sequence[pulumi.Input['VrfRouteTargetImportArgs']]]] = None,
                 vpn_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Vrf resource.
        :param pulumi.Input[bool] address_family_ipv4: Address family
        :param pulumi.Input[bool] address_family_ipv6: Address family
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] description: VRF specific description
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetExportStitchingArgs']]] ipv4_route_target_export_stitchings: Export Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetExportArgs']]] ipv4_route_target_exports: Export Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetImportStitchingArgs']]] ipv4_route_target_import_stitchings: Import Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetImportArgs']]] ipv4_route_target_imports: Import Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetExportStitchingArgs']]] ipv6_route_target_export_stitchings: Export Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetExportArgs']]] ipv6_route_target_exports: Export Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetImportStitchingArgs']]] ipv6_route_target_import_stitchings: Import Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetImportArgs']]] ipv6_route_target_imports: Import Target-VPN community
        :param pulumi.Input[str] name: WORD;;VRF name
        :param pulumi.Input[str] rd: Specify Route Distinguisher
        :param pulumi.Input[Sequence[pulumi.Input['VrfRouteTargetExportArgs']]] route_target_exports: Export Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input['VrfRouteTargetImportArgs']]] route_target_imports: Import Target-VPN community
        :param pulumi.Input[str] vpn_id: Configure VPN ID in rfc2685 format
        """
        if address_family_ipv4 is not None:
            pulumi.set(__self__, "address_family_ipv4", address_family_ipv4)
        if address_family_ipv6 is not None:
            pulumi.set(__self__, "address_family_ipv6", address_family_ipv6)
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if ipv4_route_target_export_stitchings is not None:
            pulumi.set(__self__, "ipv4_route_target_export_stitchings", ipv4_route_target_export_stitchings)
        if ipv4_route_target_exports is not None:
            pulumi.set(__self__, "ipv4_route_target_exports", ipv4_route_target_exports)
        if ipv4_route_target_import_stitchings is not None:
            pulumi.set(__self__, "ipv4_route_target_import_stitchings", ipv4_route_target_import_stitchings)
        if ipv4_route_target_imports is not None:
            pulumi.set(__self__, "ipv4_route_target_imports", ipv4_route_target_imports)
        if ipv6_route_target_export_stitchings is not None:
            pulumi.set(__self__, "ipv6_route_target_export_stitchings", ipv6_route_target_export_stitchings)
        if ipv6_route_target_exports is not None:
            pulumi.set(__self__, "ipv6_route_target_exports", ipv6_route_target_exports)
        if ipv6_route_target_import_stitchings is not None:
            pulumi.set(__self__, "ipv6_route_target_import_stitchings", ipv6_route_target_import_stitchings)
        if ipv6_route_target_imports is not None:
            pulumi.set(__self__, "ipv6_route_target_imports", ipv6_route_target_imports)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rd is not None:
            pulumi.set(__self__, "rd", rd)
        if route_target_exports is not None:
            pulumi.set(__self__, "route_target_exports", route_target_exports)
        if route_target_imports is not None:
            pulumi.set(__self__, "route_target_imports", route_target_imports)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)

    @property
    @pulumi.getter(name="addressFamilyIpv4")
    def address_family_ipv4(self) -> Optional[pulumi.Input[bool]]:
        """
        Address family
        """
        return pulumi.get(self, "address_family_ipv4")

    @address_family_ipv4.setter
    def address_family_ipv4(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "address_family_ipv4", value)

    @property
    @pulumi.getter(name="addressFamilyIpv6")
    def address_family_ipv6(self) -> Optional[pulumi.Input[bool]]:
        """
        Address family
        """
        return pulumi.get(self, "address_family_ipv6")

    @address_family_ipv6.setter
    def address_family_ipv6(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "address_family_ipv6", value)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        VRF specific description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="ipv4RouteTargetExportStitchings")
    def ipv4_route_target_export_stitchings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetExportStitchingArgs']]]]:
        """
        Export Target-VPN community
        """
        return pulumi.get(self, "ipv4_route_target_export_stitchings")

    @ipv4_route_target_export_stitchings.setter
    def ipv4_route_target_export_stitchings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetExportStitchingArgs']]]]):
        pulumi.set(self, "ipv4_route_target_export_stitchings", value)

    @property
    @pulumi.getter(name="ipv4RouteTargetExports")
    def ipv4_route_target_exports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetExportArgs']]]]:
        """
        Export Target-VPN community
        """
        return pulumi.get(self, "ipv4_route_target_exports")

    @ipv4_route_target_exports.setter
    def ipv4_route_target_exports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetExportArgs']]]]):
        pulumi.set(self, "ipv4_route_target_exports", value)

    @property
    @pulumi.getter(name="ipv4RouteTargetImportStitchings")
    def ipv4_route_target_import_stitchings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetImportStitchingArgs']]]]:
        """
        Import Target-VPN community
        """
        return pulumi.get(self, "ipv4_route_target_import_stitchings")

    @ipv4_route_target_import_stitchings.setter
    def ipv4_route_target_import_stitchings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetImportStitchingArgs']]]]):
        pulumi.set(self, "ipv4_route_target_import_stitchings", value)

    @property
    @pulumi.getter(name="ipv4RouteTargetImports")
    def ipv4_route_target_imports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetImportArgs']]]]:
        """
        Import Target-VPN community
        """
        return pulumi.get(self, "ipv4_route_target_imports")

    @ipv4_route_target_imports.setter
    def ipv4_route_target_imports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetImportArgs']]]]):
        pulumi.set(self, "ipv4_route_target_imports", value)

    @property
    @pulumi.getter(name="ipv6RouteTargetExportStitchings")
    def ipv6_route_target_export_stitchings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetExportStitchingArgs']]]]:
        """
        Export Target-VPN community
        """
        return pulumi.get(self, "ipv6_route_target_export_stitchings")

    @ipv6_route_target_export_stitchings.setter
    def ipv6_route_target_export_stitchings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetExportStitchingArgs']]]]):
        pulumi.set(self, "ipv6_route_target_export_stitchings", value)

    @property
    @pulumi.getter(name="ipv6RouteTargetExports")
    def ipv6_route_target_exports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetExportArgs']]]]:
        """
        Export Target-VPN community
        """
        return pulumi.get(self, "ipv6_route_target_exports")

    @ipv6_route_target_exports.setter
    def ipv6_route_target_exports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetExportArgs']]]]):
        pulumi.set(self, "ipv6_route_target_exports", value)

    @property
    @pulumi.getter(name="ipv6RouteTargetImportStitchings")
    def ipv6_route_target_import_stitchings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetImportStitchingArgs']]]]:
        """
        Import Target-VPN community
        """
        return pulumi.get(self, "ipv6_route_target_import_stitchings")

    @ipv6_route_target_import_stitchings.setter
    def ipv6_route_target_import_stitchings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetImportStitchingArgs']]]]):
        pulumi.set(self, "ipv6_route_target_import_stitchings", value)

    @property
    @pulumi.getter(name="ipv6RouteTargetImports")
    def ipv6_route_target_imports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetImportArgs']]]]:
        """
        Import Target-VPN community
        """
        return pulumi.get(self, "ipv6_route_target_imports")

    @ipv6_route_target_imports.setter
    def ipv6_route_target_imports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetImportArgs']]]]):
        pulumi.set(self, "ipv6_route_target_imports", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        WORD;;VRF name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def rd(self) -> Optional[pulumi.Input[str]]:
        """
        Specify Route Distinguisher
        """
        return pulumi.get(self, "rd")

    @rd.setter
    def rd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rd", value)

    @property
    @pulumi.getter(name="routeTargetExports")
    def route_target_exports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VrfRouteTargetExportArgs']]]]:
        """
        Export Target-VPN community
        """
        return pulumi.get(self, "route_target_exports")

    @route_target_exports.setter
    def route_target_exports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VrfRouteTargetExportArgs']]]]):
        pulumi.set(self, "route_target_exports", value)

    @property
    @pulumi.getter(name="routeTargetImports")
    def route_target_imports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VrfRouteTargetImportArgs']]]]:
        """
        Import Target-VPN community
        """
        return pulumi.get(self, "route_target_imports")

    @route_target_imports.setter
    def route_target_imports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VrfRouteTargetImportArgs']]]]):
        pulumi.set(self, "route_target_imports", value)

    @property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[pulumi.Input[str]]:
        """
        Configure VPN ID in rfc2685 format
        """
        return pulumi.get(self, "vpn_id")

    @vpn_id.setter
    def vpn_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_id", value)


@pulumi.input_type
class _VrfState:
    def __init__(__self__, *,
                 address_family_ipv4: Optional[pulumi.Input[bool]] = None,
                 address_family_ipv6: Optional[pulumi.Input[bool]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 ipv4_route_target_export_stitchings: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetExportStitchingArgs']]]] = None,
                 ipv4_route_target_exports: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetExportArgs']]]] = None,
                 ipv4_route_target_import_stitchings: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetImportStitchingArgs']]]] = None,
                 ipv4_route_target_imports: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetImportArgs']]]] = None,
                 ipv6_route_target_export_stitchings: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetExportStitchingArgs']]]] = None,
                 ipv6_route_target_exports: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetExportArgs']]]] = None,
                 ipv6_route_target_import_stitchings: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetImportStitchingArgs']]]] = None,
                 ipv6_route_target_imports: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetImportArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rd: Optional[pulumi.Input[str]] = None,
                 route_target_exports: Optional[pulumi.Input[Sequence[pulumi.Input['VrfRouteTargetExportArgs']]]] = None,
                 route_target_imports: Optional[pulumi.Input[Sequence[pulumi.Input['VrfRouteTargetImportArgs']]]] = None,
                 vpn_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Vrf resources.
        :param pulumi.Input[bool] address_family_ipv4: Address family
        :param pulumi.Input[bool] address_family_ipv6: Address family
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] description: VRF specific description
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetExportStitchingArgs']]] ipv4_route_target_export_stitchings: Export Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetExportArgs']]] ipv4_route_target_exports: Export Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetImportStitchingArgs']]] ipv4_route_target_import_stitchings: Import Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetImportArgs']]] ipv4_route_target_imports: Import Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetExportStitchingArgs']]] ipv6_route_target_export_stitchings: Export Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetExportArgs']]] ipv6_route_target_exports: Export Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetImportStitchingArgs']]] ipv6_route_target_import_stitchings: Import Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetImportArgs']]] ipv6_route_target_imports: Import Target-VPN community
        :param pulumi.Input[str] name: WORD;;VRF name
        :param pulumi.Input[str] rd: Specify Route Distinguisher
        :param pulumi.Input[Sequence[pulumi.Input['VrfRouteTargetExportArgs']]] route_target_exports: Export Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input['VrfRouteTargetImportArgs']]] route_target_imports: Import Target-VPN community
        :param pulumi.Input[str] vpn_id: Configure VPN ID in rfc2685 format
        """
        if address_family_ipv4 is not None:
            pulumi.set(__self__, "address_family_ipv4", address_family_ipv4)
        if address_family_ipv6 is not None:
            pulumi.set(__self__, "address_family_ipv6", address_family_ipv6)
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if ipv4_route_target_export_stitchings is not None:
            pulumi.set(__self__, "ipv4_route_target_export_stitchings", ipv4_route_target_export_stitchings)
        if ipv4_route_target_exports is not None:
            pulumi.set(__self__, "ipv4_route_target_exports", ipv4_route_target_exports)
        if ipv4_route_target_import_stitchings is not None:
            pulumi.set(__self__, "ipv4_route_target_import_stitchings", ipv4_route_target_import_stitchings)
        if ipv4_route_target_imports is not None:
            pulumi.set(__self__, "ipv4_route_target_imports", ipv4_route_target_imports)
        if ipv6_route_target_export_stitchings is not None:
            pulumi.set(__self__, "ipv6_route_target_export_stitchings", ipv6_route_target_export_stitchings)
        if ipv6_route_target_exports is not None:
            pulumi.set(__self__, "ipv6_route_target_exports", ipv6_route_target_exports)
        if ipv6_route_target_import_stitchings is not None:
            pulumi.set(__self__, "ipv6_route_target_import_stitchings", ipv6_route_target_import_stitchings)
        if ipv6_route_target_imports is not None:
            pulumi.set(__self__, "ipv6_route_target_imports", ipv6_route_target_imports)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rd is not None:
            pulumi.set(__self__, "rd", rd)
        if route_target_exports is not None:
            pulumi.set(__self__, "route_target_exports", route_target_exports)
        if route_target_imports is not None:
            pulumi.set(__self__, "route_target_imports", route_target_imports)
        if vpn_id is not None:
            pulumi.set(__self__, "vpn_id", vpn_id)

    @property
    @pulumi.getter(name="addressFamilyIpv4")
    def address_family_ipv4(self) -> Optional[pulumi.Input[bool]]:
        """
        Address family
        """
        return pulumi.get(self, "address_family_ipv4")

    @address_family_ipv4.setter
    def address_family_ipv4(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "address_family_ipv4", value)

    @property
    @pulumi.getter(name="addressFamilyIpv6")
    def address_family_ipv6(self) -> Optional[pulumi.Input[bool]]:
        """
        Address family
        """
        return pulumi.get(self, "address_family_ipv6")

    @address_family_ipv6.setter
    def address_family_ipv6(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "address_family_ipv6", value)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        VRF specific description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="ipv4RouteTargetExportStitchings")
    def ipv4_route_target_export_stitchings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetExportStitchingArgs']]]]:
        """
        Export Target-VPN community
        """
        return pulumi.get(self, "ipv4_route_target_export_stitchings")

    @ipv4_route_target_export_stitchings.setter
    def ipv4_route_target_export_stitchings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetExportStitchingArgs']]]]):
        pulumi.set(self, "ipv4_route_target_export_stitchings", value)

    @property
    @pulumi.getter(name="ipv4RouteTargetExports")
    def ipv4_route_target_exports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetExportArgs']]]]:
        """
        Export Target-VPN community
        """
        return pulumi.get(self, "ipv4_route_target_exports")

    @ipv4_route_target_exports.setter
    def ipv4_route_target_exports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetExportArgs']]]]):
        pulumi.set(self, "ipv4_route_target_exports", value)

    @property
    @pulumi.getter(name="ipv4RouteTargetImportStitchings")
    def ipv4_route_target_import_stitchings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetImportStitchingArgs']]]]:
        """
        Import Target-VPN community
        """
        return pulumi.get(self, "ipv4_route_target_import_stitchings")

    @ipv4_route_target_import_stitchings.setter
    def ipv4_route_target_import_stitchings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetImportStitchingArgs']]]]):
        pulumi.set(self, "ipv4_route_target_import_stitchings", value)

    @property
    @pulumi.getter(name="ipv4RouteTargetImports")
    def ipv4_route_target_imports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetImportArgs']]]]:
        """
        Import Target-VPN community
        """
        return pulumi.get(self, "ipv4_route_target_imports")

    @ipv4_route_target_imports.setter
    def ipv4_route_target_imports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv4RouteTargetImportArgs']]]]):
        pulumi.set(self, "ipv4_route_target_imports", value)

    @property
    @pulumi.getter(name="ipv6RouteTargetExportStitchings")
    def ipv6_route_target_export_stitchings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetExportStitchingArgs']]]]:
        """
        Export Target-VPN community
        """
        return pulumi.get(self, "ipv6_route_target_export_stitchings")

    @ipv6_route_target_export_stitchings.setter
    def ipv6_route_target_export_stitchings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetExportStitchingArgs']]]]):
        pulumi.set(self, "ipv6_route_target_export_stitchings", value)

    @property
    @pulumi.getter(name="ipv6RouteTargetExports")
    def ipv6_route_target_exports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetExportArgs']]]]:
        """
        Export Target-VPN community
        """
        return pulumi.get(self, "ipv6_route_target_exports")

    @ipv6_route_target_exports.setter
    def ipv6_route_target_exports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetExportArgs']]]]):
        pulumi.set(self, "ipv6_route_target_exports", value)

    @property
    @pulumi.getter(name="ipv6RouteTargetImportStitchings")
    def ipv6_route_target_import_stitchings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetImportStitchingArgs']]]]:
        """
        Import Target-VPN community
        """
        return pulumi.get(self, "ipv6_route_target_import_stitchings")

    @ipv6_route_target_import_stitchings.setter
    def ipv6_route_target_import_stitchings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetImportStitchingArgs']]]]):
        pulumi.set(self, "ipv6_route_target_import_stitchings", value)

    @property
    @pulumi.getter(name="ipv6RouteTargetImports")
    def ipv6_route_target_imports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetImportArgs']]]]:
        """
        Import Target-VPN community
        """
        return pulumi.get(self, "ipv6_route_target_imports")

    @ipv6_route_target_imports.setter
    def ipv6_route_target_imports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VrfIpv6RouteTargetImportArgs']]]]):
        pulumi.set(self, "ipv6_route_target_imports", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        WORD;;VRF name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def rd(self) -> Optional[pulumi.Input[str]]:
        """
        Specify Route Distinguisher
        """
        return pulumi.get(self, "rd")

    @rd.setter
    def rd(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rd", value)

    @property
    @pulumi.getter(name="routeTargetExports")
    def route_target_exports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VrfRouteTargetExportArgs']]]]:
        """
        Export Target-VPN community
        """
        return pulumi.get(self, "route_target_exports")

    @route_target_exports.setter
    def route_target_exports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VrfRouteTargetExportArgs']]]]):
        pulumi.set(self, "route_target_exports", value)

    @property
    @pulumi.getter(name="routeTargetImports")
    def route_target_imports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VrfRouteTargetImportArgs']]]]:
        """
        Import Target-VPN community
        """
        return pulumi.get(self, "route_target_imports")

    @route_target_imports.setter
    def route_target_imports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VrfRouteTargetImportArgs']]]]):
        pulumi.set(self, "route_target_imports", value)

    @property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> Optional[pulumi.Input[str]]:
        """
        Configure VPN ID in rfc2685 format
        """
        return pulumi.get(self, "vpn_id")

    @vpn_id.setter
    def vpn_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_id", value)


class Vrf(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_family_ipv4: Optional[pulumi.Input[bool]] = None,
                 address_family_ipv6: Optional[pulumi.Input[bool]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 ipv4_route_target_export_stitchings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv4RouteTargetExportStitchingArgs']]]]] = None,
                 ipv4_route_target_exports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv4RouteTargetExportArgs']]]]] = None,
                 ipv4_route_target_import_stitchings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv4RouteTargetImportStitchingArgs']]]]] = None,
                 ipv4_route_target_imports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv4RouteTargetImportArgs']]]]] = None,
                 ipv6_route_target_export_stitchings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv6RouteTargetExportStitchingArgs']]]]] = None,
                 ipv6_route_target_exports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv6RouteTargetExportArgs']]]]] = None,
                 ipv6_route_target_import_stitchings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv6RouteTargetImportStitchingArgs']]]]] = None,
                 ipv6_route_target_imports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv6RouteTargetImportArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rd: Optional[pulumi.Input[str]] = None,
                 route_target_exports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfRouteTargetExportArgs']]]]] = None,
                 route_target_imports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfRouteTargetImportArgs']]]]] = None,
                 vpn_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Vrf resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] address_family_ipv4: Address family
        :param pulumi.Input[bool] address_family_ipv6: Address family
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] description: VRF specific description
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv4RouteTargetExportStitchingArgs']]]] ipv4_route_target_export_stitchings: Export Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv4RouteTargetExportArgs']]]] ipv4_route_target_exports: Export Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv4RouteTargetImportStitchingArgs']]]] ipv4_route_target_import_stitchings: Import Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv4RouteTargetImportArgs']]]] ipv4_route_target_imports: Import Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv6RouteTargetExportStitchingArgs']]]] ipv6_route_target_export_stitchings: Export Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv6RouteTargetExportArgs']]]] ipv6_route_target_exports: Export Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv6RouteTargetImportStitchingArgs']]]] ipv6_route_target_import_stitchings: Import Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv6RouteTargetImportArgs']]]] ipv6_route_target_imports: Import Target-VPN community
        :param pulumi.Input[str] name: WORD;;VRF name
        :param pulumi.Input[str] rd: Specify Route Distinguisher
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfRouteTargetExportArgs']]]] route_target_exports: Export Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfRouteTargetImportArgs']]]] route_target_imports: Import Target-VPN community
        :param pulumi.Input[str] vpn_id: Configure VPN ID in rfc2685 format
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[VrfArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Vrf resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VrfArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VrfArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address_family_ipv4: Optional[pulumi.Input[bool]] = None,
                 address_family_ipv6: Optional[pulumi.Input[bool]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 ipv4_route_target_export_stitchings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv4RouteTargetExportStitchingArgs']]]]] = None,
                 ipv4_route_target_exports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv4RouteTargetExportArgs']]]]] = None,
                 ipv4_route_target_import_stitchings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv4RouteTargetImportStitchingArgs']]]]] = None,
                 ipv4_route_target_imports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv4RouteTargetImportArgs']]]]] = None,
                 ipv6_route_target_export_stitchings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv6RouteTargetExportStitchingArgs']]]]] = None,
                 ipv6_route_target_exports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv6RouteTargetExportArgs']]]]] = None,
                 ipv6_route_target_import_stitchings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv6RouteTargetImportStitchingArgs']]]]] = None,
                 ipv6_route_target_imports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv6RouteTargetImportArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rd: Optional[pulumi.Input[str]] = None,
                 route_target_exports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfRouteTargetExportArgs']]]]] = None,
                 route_target_imports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfRouteTargetImportArgs']]]]] = None,
                 vpn_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VrfArgs.__new__(VrfArgs)

            __props__.__dict__["address_family_ipv4"] = address_family_ipv4
            __props__.__dict__["address_family_ipv6"] = address_family_ipv6
            __props__.__dict__["delete_mode"] = delete_mode
            __props__.__dict__["description"] = description
            __props__.__dict__["device"] = device
            __props__.__dict__["ipv4_route_target_export_stitchings"] = ipv4_route_target_export_stitchings
            __props__.__dict__["ipv4_route_target_exports"] = ipv4_route_target_exports
            __props__.__dict__["ipv4_route_target_import_stitchings"] = ipv4_route_target_import_stitchings
            __props__.__dict__["ipv4_route_target_imports"] = ipv4_route_target_imports
            __props__.__dict__["ipv6_route_target_export_stitchings"] = ipv6_route_target_export_stitchings
            __props__.__dict__["ipv6_route_target_exports"] = ipv6_route_target_exports
            __props__.__dict__["ipv6_route_target_import_stitchings"] = ipv6_route_target_import_stitchings
            __props__.__dict__["ipv6_route_target_imports"] = ipv6_route_target_imports
            __props__.__dict__["name"] = name
            __props__.__dict__["rd"] = rd
            __props__.__dict__["route_target_exports"] = route_target_exports
            __props__.__dict__["route_target_imports"] = route_target_imports
            __props__.__dict__["vpn_id"] = vpn_id
        super(Vrf, __self__).__init__(
            'iosxe:iosxe/vrf:Vrf',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address_family_ipv4: Optional[pulumi.Input[bool]] = None,
            address_family_ipv6: Optional[pulumi.Input[bool]] = None,
            delete_mode: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            ipv4_route_target_export_stitchings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv4RouteTargetExportStitchingArgs']]]]] = None,
            ipv4_route_target_exports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv4RouteTargetExportArgs']]]]] = None,
            ipv4_route_target_import_stitchings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv4RouteTargetImportStitchingArgs']]]]] = None,
            ipv4_route_target_imports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv4RouteTargetImportArgs']]]]] = None,
            ipv6_route_target_export_stitchings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv6RouteTargetExportStitchingArgs']]]]] = None,
            ipv6_route_target_exports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv6RouteTargetExportArgs']]]]] = None,
            ipv6_route_target_import_stitchings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv6RouteTargetImportStitchingArgs']]]]] = None,
            ipv6_route_target_imports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv6RouteTargetImportArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            rd: Optional[pulumi.Input[str]] = None,
            route_target_exports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfRouteTargetExportArgs']]]]] = None,
            route_target_imports: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfRouteTargetImportArgs']]]]] = None,
            vpn_id: Optional[pulumi.Input[str]] = None) -> 'Vrf':
        """
        Get an existing Vrf resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] address_family_ipv4: Address family
        :param pulumi.Input[bool] address_family_ipv6: Address family
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] description: VRF specific description
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv4RouteTargetExportStitchingArgs']]]] ipv4_route_target_export_stitchings: Export Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv4RouteTargetExportArgs']]]] ipv4_route_target_exports: Export Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv4RouteTargetImportStitchingArgs']]]] ipv4_route_target_import_stitchings: Import Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv4RouteTargetImportArgs']]]] ipv4_route_target_imports: Import Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv6RouteTargetExportStitchingArgs']]]] ipv6_route_target_export_stitchings: Export Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv6RouteTargetExportArgs']]]] ipv6_route_target_exports: Export Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv6RouteTargetImportStitchingArgs']]]] ipv6_route_target_import_stitchings: Import Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfIpv6RouteTargetImportArgs']]]] ipv6_route_target_imports: Import Target-VPN community
        :param pulumi.Input[str] name: WORD;;VRF name
        :param pulumi.Input[str] rd: Specify Route Distinguisher
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfRouteTargetExportArgs']]]] route_target_exports: Export Target-VPN community
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VrfRouteTargetImportArgs']]]] route_target_imports: Import Target-VPN community
        :param pulumi.Input[str] vpn_id: Configure VPN ID in rfc2685 format
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VrfState.__new__(_VrfState)

        __props__.__dict__["address_family_ipv4"] = address_family_ipv4
        __props__.__dict__["address_family_ipv6"] = address_family_ipv6
        __props__.__dict__["delete_mode"] = delete_mode
        __props__.__dict__["description"] = description
        __props__.__dict__["device"] = device
        __props__.__dict__["ipv4_route_target_export_stitchings"] = ipv4_route_target_export_stitchings
        __props__.__dict__["ipv4_route_target_exports"] = ipv4_route_target_exports
        __props__.__dict__["ipv4_route_target_import_stitchings"] = ipv4_route_target_import_stitchings
        __props__.__dict__["ipv4_route_target_imports"] = ipv4_route_target_imports
        __props__.__dict__["ipv6_route_target_export_stitchings"] = ipv6_route_target_export_stitchings
        __props__.__dict__["ipv6_route_target_exports"] = ipv6_route_target_exports
        __props__.__dict__["ipv6_route_target_import_stitchings"] = ipv6_route_target_import_stitchings
        __props__.__dict__["ipv6_route_target_imports"] = ipv6_route_target_imports
        __props__.__dict__["name"] = name
        __props__.__dict__["rd"] = rd
        __props__.__dict__["route_target_exports"] = route_target_exports
        __props__.__dict__["route_target_imports"] = route_target_imports
        __props__.__dict__["vpn_id"] = vpn_id
        return Vrf(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="addressFamilyIpv4")
    def address_family_ipv4(self) -> pulumi.Output[Optional[bool]]:
        """
        Address family
        """
        return pulumi.get(self, "address_family_ipv4")

    @property
    @pulumi.getter(name="addressFamilyIpv6")
    def address_family_ipv6(self) -> pulumi.Output[Optional[bool]]:
        """
        Address family
        """
        return pulumi.get(self, "address_family_ipv6")

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        VRF specific description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="ipv4RouteTargetExportStitchings")
    def ipv4_route_target_export_stitchings(self) -> pulumi.Output[Optional[Sequence['outputs.VrfIpv4RouteTargetExportStitching']]]:
        """
        Export Target-VPN community
        """
        return pulumi.get(self, "ipv4_route_target_export_stitchings")

    @property
    @pulumi.getter(name="ipv4RouteTargetExports")
    def ipv4_route_target_exports(self) -> pulumi.Output[Optional[Sequence['outputs.VrfIpv4RouteTargetExport']]]:
        """
        Export Target-VPN community
        """
        return pulumi.get(self, "ipv4_route_target_exports")

    @property
    @pulumi.getter(name="ipv4RouteTargetImportStitchings")
    def ipv4_route_target_import_stitchings(self) -> pulumi.Output[Optional[Sequence['outputs.VrfIpv4RouteTargetImportStitching']]]:
        """
        Import Target-VPN community
        """
        return pulumi.get(self, "ipv4_route_target_import_stitchings")

    @property
    @pulumi.getter(name="ipv4RouteTargetImports")
    def ipv4_route_target_imports(self) -> pulumi.Output[Optional[Sequence['outputs.VrfIpv4RouteTargetImport']]]:
        """
        Import Target-VPN community
        """
        return pulumi.get(self, "ipv4_route_target_imports")

    @property
    @pulumi.getter(name="ipv6RouteTargetExportStitchings")
    def ipv6_route_target_export_stitchings(self) -> pulumi.Output[Optional[Sequence['outputs.VrfIpv6RouteTargetExportStitching']]]:
        """
        Export Target-VPN community
        """
        return pulumi.get(self, "ipv6_route_target_export_stitchings")

    @property
    @pulumi.getter(name="ipv6RouteTargetExports")
    def ipv6_route_target_exports(self) -> pulumi.Output[Optional[Sequence['outputs.VrfIpv6RouteTargetExport']]]:
        """
        Export Target-VPN community
        """
        return pulumi.get(self, "ipv6_route_target_exports")

    @property
    @pulumi.getter(name="ipv6RouteTargetImportStitchings")
    def ipv6_route_target_import_stitchings(self) -> pulumi.Output[Optional[Sequence['outputs.VrfIpv6RouteTargetImportStitching']]]:
        """
        Import Target-VPN community
        """
        return pulumi.get(self, "ipv6_route_target_import_stitchings")

    @property
    @pulumi.getter(name="ipv6RouteTargetImports")
    def ipv6_route_target_imports(self) -> pulumi.Output[Optional[Sequence['outputs.VrfIpv6RouteTargetImport']]]:
        """
        Import Target-VPN community
        """
        return pulumi.get(self, "ipv6_route_target_imports")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        WORD;;VRF name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def rd(self) -> pulumi.Output[Optional[str]]:
        """
        Specify Route Distinguisher
        """
        return pulumi.get(self, "rd")

    @property
    @pulumi.getter(name="routeTargetExports")
    def route_target_exports(self) -> pulumi.Output[Optional[Sequence['outputs.VrfRouteTargetExport']]]:
        """
        Export Target-VPN community
        """
        return pulumi.get(self, "route_target_exports")

    @property
    @pulumi.getter(name="routeTargetImports")
    def route_target_imports(self) -> pulumi.Output[Optional[Sequence['outputs.VrfRouteTargetImport']]]:
        """
        Import Target-VPN community
        """
        return pulumi.get(self, "route_target_imports")

    @property
    @pulumi.getter(name="vpnId")
    def vpn_id(self) -> pulumi.Output[Optional[str]]:
        """
        Configure VPN ID in rfc2685 format
        """
        return pulumi.get(self, "vpn_id")

