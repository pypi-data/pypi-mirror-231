# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetVtpResult',
    'AwaitableGetVtpResult',
    'get_vtp',
    'get_vtp_output',
]

@pulumi.output_type
class GetVtpResult:
    """
    A collection of values returned by getVtp.
    """
    def __init__(__self__, device=None, domain=None, file=None, id=None, interface=None, interface_only=None, mode_client_mst=None, mode_client_unknown=None, mode_client_vlan=None, mode_off_mst=None, mode_off_unknown=None, mode_off_vlan=None, mode_server_mst=None, mode_server_unknown=None, mode_server_vlan=None, mode_transparent_mst=None, mode_transparent_unknown=None, mode_transparent_vlan=None, password=None, password_hidden=None, password_secret=None, pruning=None, version=None):
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if file and not isinstance(file, str):
            raise TypeError("Expected argument 'file' to be a str")
        pulumi.set(__self__, "file", file)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface and not isinstance(interface, str):
            raise TypeError("Expected argument 'interface' to be a str")
        pulumi.set(__self__, "interface", interface)
        if interface_only and not isinstance(interface_only, bool):
            raise TypeError("Expected argument 'interface_only' to be a bool")
        pulumi.set(__self__, "interface_only", interface_only)
        if mode_client_mst and not isinstance(mode_client_mst, bool):
            raise TypeError("Expected argument 'mode_client_mst' to be a bool")
        pulumi.set(__self__, "mode_client_mst", mode_client_mst)
        if mode_client_unknown and not isinstance(mode_client_unknown, bool):
            raise TypeError("Expected argument 'mode_client_unknown' to be a bool")
        pulumi.set(__self__, "mode_client_unknown", mode_client_unknown)
        if mode_client_vlan and not isinstance(mode_client_vlan, bool):
            raise TypeError("Expected argument 'mode_client_vlan' to be a bool")
        pulumi.set(__self__, "mode_client_vlan", mode_client_vlan)
        if mode_off_mst and not isinstance(mode_off_mst, bool):
            raise TypeError("Expected argument 'mode_off_mst' to be a bool")
        pulumi.set(__self__, "mode_off_mst", mode_off_mst)
        if mode_off_unknown and not isinstance(mode_off_unknown, bool):
            raise TypeError("Expected argument 'mode_off_unknown' to be a bool")
        pulumi.set(__self__, "mode_off_unknown", mode_off_unknown)
        if mode_off_vlan and not isinstance(mode_off_vlan, bool):
            raise TypeError("Expected argument 'mode_off_vlan' to be a bool")
        pulumi.set(__self__, "mode_off_vlan", mode_off_vlan)
        if mode_server_mst and not isinstance(mode_server_mst, bool):
            raise TypeError("Expected argument 'mode_server_mst' to be a bool")
        pulumi.set(__self__, "mode_server_mst", mode_server_mst)
        if mode_server_unknown and not isinstance(mode_server_unknown, bool):
            raise TypeError("Expected argument 'mode_server_unknown' to be a bool")
        pulumi.set(__self__, "mode_server_unknown", mode_server_unknown)
        if mode_server_vlan and not isinstance(mode_server_vlan, bool):
            raise TypeError("Expected argument 'mode_server_vlan' to be a bool")
        pulumi.set(__self__, "mode_server_vlan", mode_server_vlan)
        if mode_transparent_mst and not isinstance(mode_transparent_mst, bool):
            raise TypeError("Expected argument 'mode_transparent_mst' to be a bool")
        pulumi.set(__self__, "mode_transparent_mst", mode_transparent_mst)
        if mode_transparent_unknown and not isinstance(mode_transparent_unknown, bool):
            raise TypeError("Expected argument 'mode_transparent_unknown' to be a bool")
        pulumi.set(__self__, "mode_transparent_unknown", mode_transparent_unknown)
        if mode_transparent_vlan and not isinstance(mode_transparent_vlan, bool):
            raise TypeError("Expected argument 'mode_transparent_vlan' to be a bool")
        pulumi.set(__self__, "mode_transparent_vlan", mode_transparent_vlan)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if password_hidden and not isinstance(password_hidden, bool):
            raise TypeError("Expected argument 'password_hidden' to be a bool")
        pulumi.set(__self__, "password_hidden", password_hidden)
        if password_secret and not isinstance(password_secret, bool):
            raise TypeError("Expected argument 'password_secret' to be a bool")
        pulumi.set(__self__, "password_secret", password_secret)
        if pruning and not isinstance(pruning, bool):
            raise TypeError("Expected argument 'pruning' to be a bool")
        pulumi.set(__self__, "pruning", pruning)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter
    def file(self) -> str:
        return pulumi.get(self, "file")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def interface(self) -> str:
        return pulumi.get(self, "interface")

    @property
    @pulumi.getter(name="interfaceOnly")
    def interface_only(self) -> bool:
        return pulumi.get(self, "interface_only")

    @property
    @pulumi.getter(name="modeClientMst")
    def mode_client_mst(self) -> bool:
        return pulumi.get(self, "mode_client_mst")

    @property
    @pulumi.getter(name="modeClientUnknown")
    def mode_client_unknown(self) -> bool:
        return pulumi.get(self, "mode_client_unknown")

    @property
    @pulumi.getter(name="modeClientVlan")
    def mode_client_vlan(self) -> bool:
        return pulumi.get(self, "mode_client_vlan")

    @property
    @pulumi.getter(name="modeOffMst")
    def mode_off_mst(self) -> bool:
        return pulumi.get(self, "mode_off_mst")

    @property
    @pulumi.getter(name="modeOffUnknown")
    def mode_off_unknown(self) -> bool:
        return pulumi.get(self, "mode_off_unknown")

    @property
    @pulumi.getter(name="modeOffVlan")
    def mode_off_vlan(self) -> bool:
        return pulumi.get(self, "mode_off_vlan")

    @property
    @pulumi.getter(name="modeServerMst")
    def mode_server_mst(self) -> bool:
        return pulumi.get(self, "mode_server_mst")

    @property
    @pulumi.getter(name="modeServerUnknown")
    def mode_server_unknown(self) -> bool:
        return pulumi.get(self, "mode_server_unknown")

    @property
    @pulumi.getter(name="modeServerVlan")
    def mode_server_vlan(self) -> bool:
        return pulumi.get(self, "mode_server_vlan")

    @property
    @pulumi.getter(name="modeTransparentMst")
    def mode_transparent_mst(self) -> bool:
        return pulumi.get(self, "mode_transparent_mst")

    @property
    @pulumi.getter(name="modeTransparentUnknown")
    def mode_transparent_unknown(self) -> bool:
        return pulumi.get(self, "mode_transparent_unknown")

    @property
    @pulumi.getter(name="modeTransparentVlan")
    def mode_transparent_vlan(self) -> bool:
        return pulumi.get(self, "mode_transparent_vlan")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="passwordHidden")
    def password_hidden(self) -> bool:
        return pulumi.get(self, "password_hidden")

    @property
    @pulumi.getter(name="passwordSecret")
    def password_secret(self) -> bool:
        return pulumi.get(self, "password_secret")

    @property
    @pulumi.getter
    def pruning(self) -> bool:
        return pulumi.get(self, "pruning")

    @property
    @pulumi.getter
    def version(self) -> int:
        return pulumi.get(self, "version")


class AwaitableGetVtpResult(GetVtpResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVtpResult(
            device=self.device,
            domain=self.domain,
            file=self.file,
            id=self.id,
            interface=self.interface,
            interface_only=self.interface_only,
            mode_client_mst=self.mode_client_mst,
            mode_client_unknown=self.mode_client_unknown,
            mode_client_vlan=self.mode_client_vlan,
            mode_off_mst=self.mode_off_mst,
            mode_off_unknown=self.mode_off_unknown,
            mode_off_vlan=self.mode_off_vlan,
            mode_server_mst=self.mode_server_mst,
            mode_server_unknown=self.mode_server_unknown,
            mode_server_vlan=self.mode_server_vlan,
            mode_transparent_mst=self.mode_transparent_mst,
            mode_transparent_unknown=self.mode_transparent_unknown,
            mode_transparent_vlan=self.mode_transparent_vlan,
            password=self.password,
            password_hidden=self.password_hidden,
            password_secret=self.password_secret,
            pruning=self.pruning,
            version=self.version)


def get_vtp(device: Optional[str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVtpResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['device'] = device
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:iosxe/getVtp:getVtp', __args__, opts=opts, typ=GetVtpResult).value

    return AwaitableGetVtpResult(
        device=pulumi.get(__ret__, 'device'),
        domain=pulumi.get(__ret__, 'domain'),
        file=pulumi.get(__ret__, 'file'),
        id=pulumi.get(__ret__, 'id'),
        interface=pulumi.get(__ret__, 'interface'),
        interface_only=pulumi.get(__ret__, 'interface_only'),
        mode_client_mst=pulumi.get(__ret__, 'mode_client_mst'),
        mode_client_unknown=pulumi.get(__ret__, 'mode_client_unknown'),
        mode_client_vlan=pulumi.get(__ret__, 'mode_client_vlan'),
        mode_off_mst=pulumi.get(__ret__, 'mode_off_mst'),
        mode_off_unknown=pulumi.get(__ret__, 'mode_off_unknown'),
        mode_off_vlan=pulumi.get(__ret__, 'mode_off_vlan'),
        mode_server_mst=pulumi.get(__ret__, 'mode_server_mst'),
        mode_server_unknown=pulumi.get(__ret__, 'mode_server_unknown'),
        mode_server_vlan=pulumi.get(__ret__, 'mode_server_vlan'),
        mode_transparent_mst=pulumi.get(__ret__, 'mode_transparent_mst'),
        mode_transparent_unknown=pulumi.get(__ret__, 'mode_transparent_unknown'),
        mode_transparent_vlan=pulumi.get(__ret__, 'mode_transparent_vlan'),
        password=pulumi.get(__ret__, 'password'),
        password_hidden=pulumi.get(__ret__, 'password_hidden'),
        password_secret=pulumi.get(__ret__, 'password_secret'),
        pruning=pulumi.get(__ret__, 'pruning'),
        version=pulumi.get(__ret__, 'version'))


@_utilities.lift_output_func(get_vtp)
def get_vtp_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVtpResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
