# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AaaAccountingExecArgs',
    'AaaAccountingNetworkArgs',
    'AaaAuthenticationLoginArgs',
    'AaaAuthorizationExecArgs',
    'AaaAuthorizationNetworkArgs',
    'AaaGroupServerRadiusArgs',
    'AaaGroupServerRadiusServerNameArgs',
    'AaaGroupServerTacacsplusArgs',
    'AaaGroupServerTacacsplusServerNameArgs',
    'AaaServerRadiusDynamicAuthorClientArgs',
    'AccessListExtendedEntryArgs',
    'AccessListStandardEntryArgs',
    'ArpInspectionFilterArgs',
    'ArpInspectionFilterVlanArgs',
    'BfdIpv4BothVrfArgs',
    'BfdIpv4WithDstVrfArgs',
    'BfdIpv4WithSrcVrfArgs',
    'BfdIpv4WithoutVrfArgs',
    'BfdIpv6WithBothVrfArgs',
    'BfdIpv6WithDstVrfArgs',
    'BfdIpv6WithSrcVrfArgs',
    'BfdIpv6WithoutVrfArgs',
    'BgpAddressFamilyIpv4Ipv4UnicastNetworkArgs',
    'BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArgs',
    'BgpAddressFamilyIpv4VrfVrfArgs',
    'BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArgs',
    'BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArgs',
    'BgpAddressFamilyIpv6Ipv6UnicastNetworkArgs',
    'BgpAddressFamilyIpv6VrfVrfArgs',
    'BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArgs',
    'BgpIpv4UnicastNeighborRouteMapArgs',
    'BgpIpv4UnicastVrfNeighborRouteMapArgs',
    'BgpIpv6UnicastNeighborRouteMapArgs',
    'CdpTlvListArgs',
    'ClassMapMatchActivatedServiceTemplateArgs',
    'CryptoIkev2KeyringPeerArgs',
    'CryptoIkev2PolicyProposalArgs',
    'CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs',
    'DhcpSnoopingVlanArgs',
    'Dot1xCredentialArgs',
    'InterfaceEthernetHelperAddressArgs',
    'InterfaceEthernetIpv6AddressArgs',
    'InterfaceEthernetIpv6LinkLocalAddressArgs',
    'InterfaceEthernetSourceTemplateArgs',
    'InterfaceLoopbackIpv6AddressArgs',
    'InterfaceLoopbackIpv6LinkLocalAddressArgs',
    'InterfaceNveVniArgs',
    'InterfaceNveVniVrfArgs',
    'InterfaceOspfMessageDigestKeyArgs',
    'InterfaceOspfProcessIdArgs',
    'InterfaceOspfProcessIdAreaArgs',
    'InterfacePortChannelHelperAddressArgs',
    'InterfacePortChannelIpv6AddressArgs',
    'InterfacePortChannelIpv6LinkLocalAddressArgs',
    'InterfacePortChannelSubinterfaceHelperAddressArgs',
    'InterfacePortChannelSubinterfaceIpv6AddressArgs',
    'InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs',
    'InterfaceTunnelHelperAddressArgs',
    'InterfaceTunnelIpv6AddressArgs',
    'InterfaceTunnelIpv6LinkLocalAddressArgs',
    'InterfaceVlanHelperAddressArgs',
    'InterfaceVlanIpv6AddressArgs',
    'InterfaceVlanIpv6LinkLocalAddressArgs',
    'LineConsoleArgs',
    'LineVtyArgs',
    'LineVtyAccessClassArgs',
    'LoggingIpv4HostArgs',
    'LoggingIpv4HostTransportTransportTcpPortArgs',
    'LoggingIpv4HostTransportTransportTlsPortArgs',
    'LoggingIpv4HostTransportTransportUdpPortArgs',
    'LoggingIpv4HostVrfTransportTransportTcpPortArgs',
    'LoggingIpv4HostVrfTransportTransportTlsPortArgs',
    'LoggingIpv4HostVrfTransportTransportUdpPortArgs',
    'LoggingIpv4VrfHostArgs',
    'LoggingIpv6HostArgs',
    'LoggingIpv6HostTransportTransportTcpPortArgs',
    'LoggingIpv6HostTransportTransportTlsPortArgs',
    'LoggingIpv6HostTransportTransportUdpPortArgs',
    'LoggingIpv6HostVrfTransportTransportTcpPortArgs',
    'LoggingIpv6HostVrfTransportTransportTlsPortArgs',
    'LoggingIpv6HostVrfTransportTransportUdpPortArgs',
    'LoggingIpv6VrfHostArgs',
    'LoggingSourceInterfacesVrfArgs',
    'MdtSubscriptionReceiverArgs',
    'MsdpPasswordArgs',
    'MsdpPeerArgs',
    'MsdpVrfPasswordArgs',
    'MsdpVrfPeerArgs',
    'NtpAuthenticationKeyArgs',
    'NtpPeerArgs',
    'NtpPeerVrfArgs',
    'NtpPeerVrfPeerArgs',
    'NtpServerArgs',
    'NtpServerVrfArgs',
    'NtpServerVrfServerArgs',
    'OspfAreaArgs',
    'OspfNeighborArgs',
    'OspfNetworkArgs',
    'OspfSummaryAddressArgs',
    'OspfVrfAreaArgs',
    'OspfVrfNeighborArgs',
    'OspfVrfNetworkArgs',
    'OspfVrfSummaryAddressArgs',
    'PimRpAddressArgs',
    'PimRpCandidateArgs',
    'PimVrfRpAddressArgs',
    'PimVrfRpCandidateArgs',
    'PolicyMapEventClassNumberArgs',
    'PolicyMapEventClassNumberActionNumberArgs',
    'PrefixListPrefixArgs',
    'RadiusServerAttributeArgs',
    'RadiusServerAttributeAttribute31ParameterArgs',
    'RestconfListArgs',
    'RouteMapEntryArgs',
    'ServiceTemplateAccessGroupArgs',
    'ServiceTemplateInterfaceTemplateArgs',
    'ServiceTemplateTagArgs',
    'SnmpServerContextArgs',
    'SnmpServerGroupV3SecurityArgs',
    'SnmpServerHostArgs',
    'SnmpServerSnmpCommunityArgs',
    'SnmpServerViewArgs',
    'StaticRouteNextHopArgs',
    'StaticRouteVrfRouteArgs',
    'StaticRouteVrfRouteNextHopArgs',
    'SystemMulticastRoutingVrfArgs',
    'TemplateDeviceTrackingAttachPolicyArgs',
    'TemplateIpAccessGroupArgs',
    'TemplateSwitchportPortSecurityMaximumRangeArgs',
    'VrfIpv4RouteTargetExportArgs',
    'VrfIpv4RouteTargetExportStitchingArgs',
    'VrfIpv4RouteTargetImportArgs',
    'VrfIpv4RouteTargetImportStitchingArgs',
    'VrfIpv6RouteTargetExportArgs',
    'VrfIpv6RouteTargetExportStitchingArgs',
    'VrfIpv6RouteTargetImportArgs',
    'VrfIpv6RouteTargetImportStitchingArgs',
    'VrfRouteTargetExportArgs',
    'VrfRouteTargetImportArgs',
]

@pulumi.input_type
class AaaAccountingExecArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 start_stop_group1: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        if start_stop_group1 is not None:
            pulumi.set(__self__, "start_stop_group1", start_stop_group1)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="startStopGroup1")
    def start_stop_group1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_stop_group1")

    @start_stop_group1.setter
    def start_stop_group1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_stop_group1", value)


@pulumi.input_type
class AaaAccountingNetworkArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 start_stop_group1: Optional[pulumi.Input[str]] = None,
                 start_stop_group2: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "id", id)
        if start_stop_group1 is not None:
            pulumi.set(__self__, "start_stop_group1", start_stop_group1)
        if start_stop_group2 is not None:
            pulumi.set(__self__, "start_stop_group2", start_stop_group2)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="startStopGroup1")
    def start_stop_group1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_stop_group1")

    @start_stop_group1.setter
    def start_stop_group1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_stop_group1", value)

    @property
    @pulumi.getter(name="startStopGroup2")
    def start_stop_group2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_stop_group2")

    @start_stop_group2.setter
    def start_stop_group2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_stop_group2", value)


@pulumi.input_type
class AaaAuthenticationLoginArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 a1_enable: Optional[pulumi.Input[bool]] = None,
                 a1_group: Optional[pulumi.Input[str]] = None,
                 a1_line: Optional[pulumi.Input[bool]] = None,
                 a1_local: Optional[pulumi.Input[bool]] = None,
                 a1_none: Optional[pulumi.Input[bool]] = None,
                 a2_enable: Optional[pulumi.Input[bool]] = None,
                 a2_group: Optional[pulumi.Input[str]] = None,
                 a2_line: Optional[pulumi.Input[bool]] = None,
                 a2_local: Optional[pulumi.Input[bool]] = None,
                 a2_none: Optional[pulumi.Input[bool]] = None,
                 a3_enable: Optional[pulumi.Input[bool]] = None,
                 a3_group: Optional[pulumi.Input[str]] = None,
                 a3_line: Optional[pulumi.Input[bool]] = None,
                 a3_local: Optional[pulumi.Input[bool]] = None,
                 a3_none: Optional[pulumi.Input[bool]] = None,
                 a4_enable: Optional[pulumi.Input[bool]] = None,
                 a4_group: Optional[pulumi.Input[str]] = None,
                 a4_line: Optional[pulumi.Input[bool]] = None,
                 a4_local: Optional[pulumi.Input[bool]] = None,
                 a4_none: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "name", name)
        if a1_enable is not None:
            pulumi.set(__self__, "a1_enable", a1_enable)
        if a1_group is not None:
            pulumi.set(__self__, "a1_group", a1_group)
        if a1_line is not None:
            pulumi.set(__self__, "a1_line", a1_line)
        if a1_local is not None:
            pulumi.set(__self__, "a1_local", a1_local)
        if a1_none is not None:
            pulumi.set(__self__, "a1_none", a1_none)
        if a2_enable is not None:
            pulumi.set(__self__, "a2_enable", a2_enable)
        if a2_group is not None:
            pulumi.set(__self__, "a2_group", a2_group)
        if a2_line is not None:
            pulumi.set(__self__, "a2_line", a2_line)
        if a2_local is not None:
            pulumi.set(__self__, "a2_local", a2_local)
        if a2_none is not None:
            pulumi.set(__self__, "a2_none", a2_none)
        if a3_enable is not None:
            pulumi.set(__self__, "a3_enable", a3_enable)
        if a3_group is not None:
            pulumi.set(__self__, "a3_group", a3_group)
        if a3_line is not None:
            pulumi.set(__self__, "a3_line", a3_line)
        if a3_local is not None:
            pulumi.set(__self__, "a3_local", a3_local)
        if a3_none is not None:
            pulumi.set(__self__, "a3_none", a3_none)
        if a4_enable is not None:
            pulumi.set(__self__, "a4_enable", a4_enable)
        if a4_group is not None:
            pulumi.set(__self__, "a4_group", a4_group)
        if a4_line is not None:
            pulumi.set(__self__, "a4_line", a4_line)
        if a4_local is not None:
            pulumi.set(__self__, "a4_local", a4_local)
        if a4_none is not None:
            pulumi.set(__self__, "a4_none", a4_none)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="a1Enable")
    def a1_enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "a1_enable")

    @a1_enable.setter
    def a1_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "a1_enable", value)

    @property
    @pulumi.getter(name="a1Group")
    def a1_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "a1_group")

    @a1_group.setter
    def a1_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "a1_group", value)

    @property
    @pulumi.getter(name="a1Line")
    def a1_line(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "a1_line")

    @a1_line.setter
    def a1_line(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "a1_line", value)

    @property
    @pulumi.getter(name="a1Local")
    def a1_local(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "a1_local")

    @a1_local.setter
    def a1_local(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "a1_local", value)

    @property
    @pulumi.getter(name="a1None")
    def a1_none(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "a1_none")

    @a1_none.setter
    def a1_none(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "a1_none", value)

    @property
    @pulumi.getter(name="a2Enable")
    def a2_enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "a2_enable")

    @a2_enable.setter
    def a2_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "a2_enable", value)

    @property
    @pulumi.getter(name="a2Group")
    def a2_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "a2_group")

    @a2_group.setter
    def a2_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "a2_group", value)

    @property
    @pulumi.getter(name="a2Line")
    def a2_line(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "a2_line")

    @a2_line.setter
    def a2_line(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "a2_line", value)

    @property
    @pulumi.getter(name="a2Local")
    def a2_local(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "a2_local")

    @a2_local.setter
    def a2_local(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "a2_local", value)

    @property
    @pulumi.getter(name="a2None")
    def a2_none(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "a2_none")

    @a2_none.setter
    def a2_none(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "a2_none", value)

    @property
    @pulumi.getter(name="a3Enable")
    def a3_enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "a3_enable")

    @a3_enable.setter
    def a3_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "a3_enable", value)

    @property
    @pulumi.getter(name="a3Group")
    def a3_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "a3_group")

    @a3_group.setter
    def a3_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "a3_group", value)

    @property
    @pulumi.getter(name="a3Line")
    def a3_line(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "a3_line")

    @a3_line.setter
    def a3_line(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "a3_line", value)

    @property
    @pulumi.getter(name="a3Local")
    def a3_local(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "a3_local")

    @a3_local.setter
    def a3_local(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "a3_local", value)

    @property
    @pulumi.getter(name="a3None")
    def a3_none(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "a3_none")

    @a3_none.setter
    def a3_none(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "a3_none", value)

    @property
    @pulumi.getter(name="a4Enable")
    def a4_enable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "a4_enable")

    @a4_enable.setter
    def a4_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "a4_enable", value)

    @property
    @pulumi.getter(name="a4Group")
    def a4_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "a4_group")

    @a4_group.setter
    def a4_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "a4_group", value)

    @property
    @pulumi.getter(name="a4Line")
    def a4_line(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "a4_line")

    @a4_line.setter
    def a4_line(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "a4_line", value)

    @property
    @pulumi.getter(name="a4Local")
    def a4_local(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "a4_local")

    @a4_local.setter
    def a4_local(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "a4_local", value)

    @property
    @pulumi.getter(name="a4None")
    def a4_none(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "a4_none")

    @a4_none.setter
    def a4_none(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "a4_none", value)


@pulumi.input_type
class AaaAuthorizationExecArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 a1_group: Optional[pulumi.Input[str]] = None,
                 a1_if_authenticated: Optional[pulumi.Input[bool]] = None,
                 a1_local: Optional[pulumi.Input[bool]] = None,
                 a2_local: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "name", name)
        if a1_group is not None:
            pulumi.set(__self__, "a1_group", a1_group)
        if a1_if_authenticated is not None:
            pulumi.set(__self__, "a1_if_authenticated", a1_if_authenticated)
        if a1_local is not None:
            pulumi.set(__self__, "a1_local", a1_local)
        if a2_local is not None:
            pulumi.set(__self__, "a2_local", a2_local)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="a1Group")
    def a1_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "a1_group")

    @a1_group.setter
    def a1_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "a1_group", value)

    @property
    @pulumi.getter(name="a1IfAuthenticated")
    def a1_if_authenticated(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "a1_if_authenticated")

    @a1_if_authenticated.setter
    def a1_if_authenticated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "a1_if_authenticated", value)

    @property
    @pulumi.getter(name="a1Local")
    def a1_local(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "a1_local")

    @a1_local.setter
    def a1_local(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "a1_local", value)

    @property
    @pulumi.getter(name="a2Local")
    def a2_local(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "a2_local")

    @a2_local.setter
    def a2_local(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "a2_local", value)


@pulumi.input_type
class AaaAuthorizationNetworkArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 a1_group: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "id", id)
        if a1_group is not None:
            pulumi.set(__self__, "a1_group", a1_group)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="a1Group")
    def a1_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "a1_group")

    @a1_group.setter
    def a1_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "a1_group", value)


@pulumi.input_type
class AaaGroupServerRadiusArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 ip_radius_source_interface_loopback: Optional[pulumi.Input[int]] = None,
                 server_names: Optional[pulumi.Input[Sequence[pulumi.Input['AaaGroupServerRadiusServerNameArgs']]]] = None):
        pulumi.set(__self__, "name", name)
        if ip_radius_source_interface_loopback is not None:
            pulumi.set(__self__, "ip_radius_source_interface_loopback", ip_radius_source_interface_loopback)
        if server_names is not None:
            pulumi.set(__self__, "server_names", server_names)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ipRadiusSourceInterfaceLoopback")
    def ip_radius_source_interface_loopback(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ip_radius_source_interface_loopback")

    @ip_radius_source_interface_loopback.setter
    def ip_radius_source_interface_loopback(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip_radius_source_interface_loopback", value)

    @property
    @pulumi.getter(name="serverNames")
    def server_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AaaGroupServerRadiusServerNameArgs']]]]:
        return pulumi.get(self, "server_names")

    @server_names.setter
    def server_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AaaGroupServerRadiusServerNameArgs']]]]):
        pulumi.set(self, "server_names", value)


@pulumi.input_type
class AaaGroupServerRadiusServerNameArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AaaGroupServerTacacsplusArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 server_names: Optional[pulumi.Input[Sequence[pulumi.Input['AaaGroupServerTacacsplusServerNameArgs']]]] = None):
        pulumi.set(__self__, "name", name)
        if server_names is not None:
            pulumi.set(__self__, "server_names", server_names)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serverNames")
    def server_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AaaGroupServerTacacsplusServerNameArgs']]]]:
        return pulumi.get(self, "server_names")

    @server_names.setter
    def server_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AaaGroupServerTacacsplusServerNameArgs']]]]):
        pulumi.set(self, "server_names", value)


@pulumi.input_type
class AaaGroupServerTacacsplusServerNameArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AaaServerRadiusDynamicAuthorClientArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[str],
                 server_key: Optional[pulumi.Input[str]] = None,
                 server_key_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ip", ip)
        if server_key is not None:
            pulumi.set(__self__, "server_key", server_key)
        if server_key_type is not None:
            pulumi.set(__self__, "server_key_type", server_key_type)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter(name="serverKey")
    def server_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_key")

    @server_key.setter
    def server_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_key", value)

    @property
    @pulumi.getter(name="serverKeyType")
    def server_key_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_key_type")

    @server_key_type.setter
    def server_key_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_key_type", value)


@pulumi.input_type
class AccessListExtendedEntryArgs:
    def __init__(__self__, *,
                 sequence: pulumi.Input[int],
                 ace_rule_action: Optional[pulumi.Input[str]] = None,
                 ace_rule_protocol: Optional[pulumi.Input[str]] = None,
                 ack: Optional[pulumi.Input[bool]] = None,
                 destination_any: Optional[pulumi.Input[bool]] = None,
                 destination_host: Optional[pulumi.Input[str]] = None,
                 destination_object_group: Optional[pulumi.Input[str]] = None,
                 destination_port_equal: Optional[pulumi.Input[str]] = None,
                 destination_port_greater_than: Optional[pulumi.Input[str]] = None,
                 destination_port_lesser_than: Optional[pulumi.Input[str]] = None,
                 destination_port_range_from: Optional[pulumi.Input[str]] = None,
                 destination_port_range_to: Optional[pulumi.Input[str]] = None,
                 destination_prefix: Optional[pulumi.Input[str]] = None,
                 destination_prefix_mask: Optional[pulumi.Input[str]] = None,
                 dscp: Optional[pulumi.Input[str]] = None,
                 established: Optional[pulumi.Input[bool]] = None,
                 fin: Optional[pulumi.Input[bool]] = None,
                 fragments: Optional[pulumi.Input[bool]] = None,
                 log: Optional[pulumi.Input[bool]] = None,
                 log_input: Optional[pulumi.Input[bool]] = None,
                 precedence: Optional[pulumi.Input[str]] = None,
                 psh: Optional[pulumi.Input[bool]] = None,
                 remark: Optional[pulumi.Input[str]] = None,
                 rst: Optional[pulumi.Input[bool]] = None,
                 service_object_group: Optional[pulumi.Input[str]] = None,
                 source_any: Optional[pulumi.Input[bool]] = None,
                 source_host: Optional[pulumi.Input[str]] = None,
                 source_object_group: Optional[pulumi.Input[str]] = None,
                 source_port_equal: Optional[pulumi.Input[str]] = None,
                 source_port_greater_than: Optional[pulumi.Input[str]] = None,
                 source_port_lesser_than: Optional[pulumi.Input[str]] = None,
                 source_port_range_from: Optional[pulumi.Input[str]] = None,
                 source_port_range_to: Optional[pulumi.Input[str]] = None,
                 source_prefix: Optional[pulumi.Input[str]] = None,
                 source_prefix_mask: Optional[pulumi.Input[str]] = None,
                 syn: Optional[pulumi.Input[bool]] = None,
                 tos: Optional[pulumi.Input[str]] = None,
                 urg: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "sequence", sequence)
        if ace_rule_action is not None:
            pulumi.set(__self__, "ace_rule_action", ace_rule_action)
        if ace_rule_protocol is not None:
            pulumi.set(__self__, "ace_rule_protocol", ace_rule_protocol)
        if ack is not None:
            pulumi.set(__self__, "ack", ack)
        if destination_any is not None:
            pulumi.set(__self__, "destination_any", destination_any)
        if destination_host is not None:
            pulumi.set(__self__, "destination_host", destination_host)
        if destination_object_group is not None:
            pulumi.set(__self__, "destination_object_group", destination_object_group)
        if destination_port_equal is not None:
            pulumi.set(__self__, "destination_port_equal", destination_port_equal)
        if destination_port_greater_than is not None:
            pulumi.set(__self__, "destination_port_greater_than", destination_port_greater_than)
        if destination_port_lesser_than is not None:
            pulumi.set(__self__, "destination_port_lesser_than", destination_port_lesser_than)
        if destination_port_range_from is not None:
            pulumi.set(__self__, "destination_port_range_from", destination_port_range_from)
        if destination_port_range_to is not None:
            pulumi.set(__self__, "destination_port_range_to", destination_port_range_to)
        if destination_prefix is not None:
            pulumi.set(__self__, "destination_prefix", destination_prefix)
        if destination_prefix_mask is not None:
            pulumi.set(__self__, "destination_prefix_mask", destination_prefix_mask)
        if dscp is not None:
            pulumi.set(__self__, "dscp", dscp)
        if established is not None:
            pulumi.set(__self__, "established", established)
        if fin is not None:
            pulumi.set(__self__, "fin", fin)
        if fragments is not None:
            pulumi.set(__self__, "fragments", fragments)
        if log is not None:
            pulumi.set(__self__, "log", log)
        if log_input is not None:
            pulumi.set(__self__, "log_input", log_input)
        if precedence is not None:
            pulumi.set(__self__, "precedence", precedence)
        if psh is not None:
            pulumi.set(__self__, "psh", psh)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)
        if rst is not None:
            pulumi.set(__self__, "rst", rst)
        if service_object_group is not None:
            pulumi.set(__self__, "service_object_group", service_object_group)
        if source_any is not None:
            pulumi.set(__self__, "source_any", source_any)
        if source_host is not None:
            pulumi.set(__self__, "source_host", source_host)
        if source_object_group is not None:
            pulumi.set(__self__, "source_object_group", source_object_group)
        if source_port_equal is not None:
            pulumi.set(__self__, "source_port_equal", source_port_equal)
        if source_port_greater_than is not None:
            pulumi.set(__self__, "source_port_greater_than", source_port_greater_than)
        if source_port_lesser_than is not None:
            pulumi.set(__self__, "source_port_lesser_than", source_port_lesser_than)
        if source_port_range_from is not None:
            pulumi.set(__self__, "source_port_range_from", source_port_range_from)
        if source_port_range_to is not None:
            pulumi.set(__self__, "source_port_range_to", source_port_range_to)
        if source_prefix is not None:
            pulumi.set(__self__, "source_prefix", source_prefix)
        if source_prefix_mask is not None:
            pulumi.set(__self__, "source_prefix_mask", source_prefix_mask)
        if syn is not None:
            pulumi.set(__self__, "syn", syn)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)
        if urg is not None:
            pulumi.set(__self__, "urg", urg)

    @property
    @pulumi.getter
    def sequence(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sequence")

    @sequence.setter
    def sequence(self, value: pulumi.Input[int]):
        pulumi.set(self, "sequence", value)

    @property
    @pulumi.getter(name="aceRuleAction")
    def ace_rule_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ace_rule_action")

    @ace_rule_action.setter
    def ace_rule_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ace_rule_action", value)

    @property
    @pulumi.getter(name="aceRuleProtocol")
    def ace_rule_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ace_rule_protocol")

    @ace_rule_protocol.setter
    def ace_rule_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ace_rule_protocol", value)

    @property
    @pulumi.getter
    def ack(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ack")

    @ack.setter
    def ack(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ack", value)

    @property
    @pulumi.getter(name="destinationAny")
    def destination_any(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "destination_any")

    @destination_any.setter
    def destination_any(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "destination_any", value)

    @property
    @pulumi.getter(name="destinationHost")
    def destination_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_host")

    @destination_host.setter
    def destination_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_host", value)

    @property
    @pulumi.getter(name="destinationObjectGroup")
    def destination_object_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_object_group")

    @destination_object_group.setter
    def destination_object_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_object_group", value)

    @property
    @pulumi.getter(name="destinationPortEqual")
    def destination_port_equal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_port_equal")

    @destination_port_equal.setter
    def destination_port_equal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_port_equal", value)

    @property
    @pulumi.getter(name="destinationPortGreaterThan")
    def destination_port_greater_than(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_port_greater_than")

    @destination_port_greater_than.setter
    def destination_port_greater_than(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_port_greater_than", value)

    @property
    @pulumi.getter(name="destinationPortLesserThan")
    def destination_port_lesser_than(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_port_lesser_than")

    @destination_port_lesser_than.setter
    def destination_port_lesser_than(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_port_lesser_than", value)

    @property
    @pulumi.getter(name="destinationPortRangeFrom")
    def destination_port_range_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_port_range_from")

    @destination_port_range_from.setter
    def destination_port_range_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_port_range_from", value)

    @property
    @pulumi.getter(name="destinationPortRangeTo")
    def destination_port_range_to(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_port_range_to")

    @destination_port_range_to.setter
    def destination_port_range_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_port_range_to", value)

    @property
    @pulumi.getter(name="destinationPrefix")
    def destination_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_prefix")

    @destination_prefix.setter
    def destination_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_prefix", value)

    @property
    @pulumi.getter(name="destinationPrefixMask")
    def destination_prefix_mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_prefix_mask")

    @destination_prefix_mask.setter
    def destination_prefix_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_prefix_mask", value)

    @property
    @pulumi.getter
    def dscp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dscp")

    @dscp.setter
    def dscp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dscp", value)

    @property
    @pulumi.getter
    def established(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "established")

    @established.setter
    def established(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "established", value)

    @property
    @pulumi.getter
    def fin(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fin")

    @fin.setter
    def fin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fin", value)

    @property
    @pulumi.getter
    def fragments(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fragments")

    @fragments.setter
    def fragments(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fragments", value)

    @property
    @pulumi.getter
    def log(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "log")

    @log.setter
    def log(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log", value)

    @property
    @pulumi.getter(name="logInput")
    def log_input(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "log_input")

    @log_input.setter
    def log_input(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_input", value)

    @property
    @pulumi.getter
    def precedence(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "precedence")

    @precedence.setter
    def precedence(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "precedence", value)

    @property
    @pulumi.getter
    def psh(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "psh")

    @psh.setter
    def psh(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "psh", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)

    @property
    @pulumi.getter
    def rst(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "rst")

    @rst.setter
    def rst(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "rst", value)

    @property
    @pulumi.getter(name="serviceObjectGroup")
    def service_object_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_object_group")

    @service_object_group.setter
    def service_object_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_object_group", value)

    @property
    @pulumi.getter(name="sourceAny")
    def source_any(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "source_any")

    @source_any.setter
    def source_any(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "source_any", value)

    @property
    @pulumi.getter(name="sourceHost")
    def source_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_host")

    @source_host.setter
    def source_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_host", value)

    @property
    @pulumi.getter(name="sourceObjectGroup")
    def source_object_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_object_group")

    @source_object_group.setter
    def source_object_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_object_group", value)

    @property
    @pulumi.getter(name="sourcePortEqual")
    def source_port_equal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_port_equal")

    @source_port_equal.setter
    def source_port_equal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_port_equal", value)

    @property
    @pulumi.getter(name="sourcePortGreaterThan")
    def source_port_greater_than(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_port_greater_than")

    @source_port_greater_than.setter
    def source_port_greater_than(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_port_greater_than", value)

    @property
    @pulumi.getter(name="sourcePortLesserThan")
    def source_port_lesser_than(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_port_lesser_than")

    @source_port_lesser_than.setter
    def source_port_lesser_than(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_port_lesser_than", value)

    @property
    @pulumi.getter(name="sourcePortRangeFrom")
    def source_port_range_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_port_range_from")

    @source_port_range_from.setter
    def source_port_range_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_port_range_from", value)

    @property
    @pulumi.getter(name="sourcePortRangeTo")
    def source_port_range_to(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_port_range_to")

    @source_port_range_to.setter
    def source_port_range_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_port_range_to", value)

    @property
    @pulumi.getter(name="sourcePrefix")
    def source_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_prefix")

    @source_prefix.setter
    def source_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_prefix", value)

    @property
    @pulumi.getter(name="sourcePrefixMask")
    def source_prefix_mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_prefix_mask")

    @source_prefix_mask.setter
    def source_prefix_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_prefix_mask", value)

    @property
    @pulumi.getter
    def syn(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "syn")

    @syn.setter
    def syn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "syn", value)

    @property
    @pulumi.getter
    def tos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tos")

    @tos.setter
    def tos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tos", value)

    @property
    @pulumi.getter
    def urg(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "urg")

    @urg.setter
    def urg(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "urg", value)


@pulumi.input_type
class AccessListStandardEntryArgs:
    def __init__(__self__, *,
                 sequence: pulumi.Input[int],
                 deny_any: Optional[pulumi.Input[bool]] = None,
                 deny_host: Optional[pulumi.Input[str]] = None,
                 deny_log: Optional[pulumi.Input[bool]] = None,
                 deny_prefix: Optional[pulumi.Input[str]] = None,
                 deny_prefix_mask: Optional[pulumi.Input[str]] = None,
                 permit_any: Optional[pulumi.Input[bool]] = None,
                 permit_host: Optional[pulumi.Input[str]] = None,
                 permit_log: Optional[pulumi.Input[bool]] = None,
                 permit_prefix: Optional[pulumi.Input[str]] = None,
                 permit_prefix_mask: Optional[pulumi.Input[str]] = None,
                 remark: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "sequence", sequence)
        if deny_any is not None:
            pulumi.set(__self__, "deny_any", deny_any)
        if deny_host is not None:
            pulumi.set(__self__, "deny_host", deny_host)
        if deny_log is not None:
            pulumi.set(__self__, "deny_log", deny_log)
        if deny_prefix is not None:
            pulumi.set(__self__, "deny_prefix", deny_prefix)
        if deny_prefix_mask is not None:
            pulumi.set(__self__, "deny_prefix_mask", deny_prefix_mask)
        if permit_any is not None:
            pulumi.set(__self__, "permit_any", permit_any)
        if permit_host is not None:
            pulumi.set(__self__, "permit_host", permit_host)
        if permit_log is not None:
            pulumi.set(__self__, "permit_log", permit_log)
        if permit_prefix is not None:
            pulumi.set(__self__, "permit_prefix", permit_prefix)
        if permit_prefix_mask is not None:
            pulumi.set(__self__, "permit_prefix_mask", permit_prefix_mask)
        if remark is not None:
            pulumi.set(__self__, "remark", remark)

    @property
    @pulumi.getter
    def sequence(self) -> pulumi.Input[int]:
        return pulumi.get(self, "sequence")

    @sequence.setter
    def sequence(self, value: pulumi.Input[int]):
        pulumi.set(self, "sequence", value)

    @property
    @pulumi.getter(name="denyAny")
    def deny_any(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "deny_any")

    @deny_any.setter
    def deny_any(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deny_any", value)

    @property
    @pulumi.getter(name="denyHost")
    def deny_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deny_host")

    @deny_host.setter
    def deny_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deny_host", value)

    @property
    @pulumi.getter(name="denyLog")
    def deny_log(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "deny_log")

    @deny_log.setter
    def deny_log(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deny_log", value)

    @property
    @pulumi.getter(name="denyPrefix")
    def deny_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deny_prefix")

    @deny_prefix.setter
    def deny_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deny_prefix", value)

    @property
    @pulumi.getter(name="denyPrefixMask")
    def deny_prefix_mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "deny_prefix_mask")

    @deny_prefix_mask.setter
    def deny_prefix_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deny_prefix_mask", value)

    @property
    @pulumi.getter(name="permitAny")
    def permit_any(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "permit_any")

    @permit_any.setter
    def permit_any(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "permit_any", value)

    @property
    @pulumi.getter(name="permitHost")
    def permit_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "permit_host")

    @permit_host.setter
    def permit_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permit_host", value)

    @property
    @pulumi.getter(name="permitLog")
    def permit_log(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "permit_log")

    @permit_log.setter
    def permit_log(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "permit_log", value)

    @property
    @pulumi.getter(name="permitPrefix")
    def permit_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "permit_prefix")

    @permit_prefix.setter
    def permit_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permit_prefix", value)

    @property
    @pulumi.getter(name="permitPrefixMask")
    def permit_prefix_mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "permit_prefix_mask")

    @permit_prefix_mask.setter
    def permit_prefix_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permit_prefix_mask", value)

    @property
    @pulumi.getter
    def remark(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remark")

    @remark.setter
    def remark(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remark", value)


@pulumi.input_type
class ArpInspectionFilterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 vlans: Optional[pulumi.Input[Sequence[pulumi.Input['ArpInspectionFilterVlanArgs']]]] = None):
        pulumi.set(__self__, "name", name)
        if vlans is not None:
            pulumi.set(__self__, "vlans", vlans)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def vlans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ArpInspectionFilterVlanArgs']]]]:
        return pulumi.get(self, "vlans")

    @vlans.setter
    def vlans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ArpInspectionFilterVlanArgs']]]]):
        pulumi.set(self, "vlans", value)


@pulumi.input_type
class ArpInspectionFilterVlanArgs:
    def __init__(__self__, *,
                 vlan_range: pulumi.Input[str],
                 static: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "vlan_range", vlan_range)
        if static is not None:
            pulumi.set(__self__, "static", static)

    @property
    @pulumi.getter(name="vlanRange")
    def vlan_range(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vlan_range")

    @vlan_range.setter
    def vlan_range(self, value: pulumi.Input[str]):
        pulumi.set(self, "vlan_range", value)

    @property
    @pulumi.getter
    def static(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "static")

    @static.setter
    def static(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "static", value)


@pulumi.input_type
class BfdIpv4BothVrfArgs:
    def __init__(__self__, *,
                 dest_ip: pulumi.Input[str],
                 dst_vrf: pulumi.Input[str],
                 src_ip: pulumi.Input[str],
                 src_vrf: pulumi.Input[str],
                 template_name: pulumi.Input[str]):
        pulumi.set(__self__, "dest_ip", dest_ip)
        pulumi.set(__self__, "dst_vrf", dst_vrf)
        pulumi.set(__self__, "src_ip", src_ip)
        pulumi.set(__self__, "src_vrf", src_vrf)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="destIp")
    def dest_ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dest_ip")

    @dest_ip.setter
    def dest_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "dest_ip", value)

    @property
    @pulumi.getter(name="dstVrf")
    def dst_vrf(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dst_vrf")

    @dst_vrf.setter
    def dst_vrf(self, value: pulumi.Input[str]):
        pulumi.set(self, "dst_vrf", value)

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "src_ip")

    @src_ip.setter
    def src_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "src_ip", value)

    @property
    @pulumi.getter(name="srcVrf")
    def src_vrf(self) -> pulumi.Input[str]:
        return pulumi.get(self, "src_vrf")

    @src_vrf.setter
    def src_vrf(self, value: pulumi.Input[str]):
        pulumi.set(self, "src_vrf", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "template_name", value)


@pulumi.input_type
class BfdIpv4WithDstVrfArgs:
    def __init__(__self__, *,
                 dest_ip: pulumi.Input[str],
                 dst_vrf: pulumi.Input[str],
                 src_ip: pulumi.Input[str],
                 template_name: pulumi.Input[str]):
        pulumi.set(__self__, "dest_ip", dest_ip)
        pulumi.set(__self__, "dst_vrf", dst_vrf)
        pulumi.set(__self__, "src_ip", src_ip)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="destIp")
    def dest_ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dest_ip")

    @dest_ip.setter
    def dest_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "dest_ip", value)

    @property
    @pulumi.getter(name="dstVrf")
    def dst_vrf(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dst_vrf")

    @dst_vrf.setter
    def dst_vrf(self, value: pulumi.Input[str]):
        pulumi.set(self, "dst_vrf", value)

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "src_ip")

    @src_ip.setter
    def src_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "src_ip", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "template_name", value)


@pulumi.input_type
class BfdIpv4WithSrcVrfArgs:
    def __init__(__self__, *,
                 dest_ip: pulumi.Input[str],
                 src_ip: pulumi.Input[str],
                 src_vrf: pulumi.Input[str],
                 template_name: pulumi.Input[str]):
        pulumi.set(__self__, "dest_ip", dest_ip)
        pulumi.set(__self__, "src_ip", src_ip)
        pulumi.set(__self__, "src_vrf", src_vrf)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="destIp")
    def dest_ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dest_ip")

    @dest_ip.setter
    def dest_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "dest_ip", value)

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "src_ip")

    @src_ip.setter
    def src_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "src_ip", value)

    @property
    @pulumi.getter(name="srcVrf")
    def src_vrf(self) -> pulumi.Input[str]:
        return pulumi.get(self, "src_vrf")

    @src_vrf.setter
    def src_vrf(self, value: pulumi.Input[str]):
        pulumi.set(self, "src_vrf", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "template_name", value)


@pulumi.input_type
class BfdIpv4WithoutVrfArgs:
    def __init__(__self__, *,
                 dest_ip: pulumi.Input[str],
                 src_ip: pulumi.Input[str],
                 template_name: pulumi.Input[str]):
        pulumi.set(__self__, "dest_ip", dest_ip)
        pulumi.set(__self__, "src_ip", src_ip)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="destIp")
    def dest_ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dest_ip")

    @dest_ip.setter
    def dest_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "dest_ip", value)

    @property
    @pulumi.getter(name="srcIp")
    def src_ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "src_ip")

    @src_ip.setter
    def src_ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "src_ip", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "template_name", value)


@pulumi.input_type
class BfdIpv6WithBothVrfArgs:
    def __init__(__self__, *,
                 dest_ipv6: pulumi.Input[str],
                 dst_vrf: pulumi.Input[str],
                 src_ipv6: pulumi.Input[str],
                 src_vrf: pulumi.Input[str],
                 template_name: pulumi.Input[str]):
        pulumi.set(__self__, "dest_ipv6", dest_ipv6)
        pulumi.set(__self__, "dst_vrf", dst_vrf)
        pulumi.set(__self__, "src_ipv6", src_ipv6)
        pulumi.set(__self__, "src_vrf", src_vrf)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="destIpv6")
    def dest_ipv6(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dest_ipv6")

    @dest_ipv6.setter
    def dest_ipv6(self, value: pulumi.Input[str]):
        pulumi.set(self, "dest_ipv6", value)

    @property
    @pulumi.getter(name="dstVrf")
    def dst_vrf(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dst_vrf")

    @dst_vrf.setter
    def dst_vrf(self, value: pulumi.Input[str]):
        pulumi.set(self, "dst_vrf", value)

    @property
    @pulumi.getter(name="srcIpv6")
    def src_ipv6(self) -> pulumi.Input[str]:
        return pulumi.get(self, "src_ipv6")

    @src_ipv6.setter
    def src_ipv6(self, value: pulumi.Input[str]):
        pulumi.set(self, "src_ipv6", value)

    @property
    @pulumi.getter(name="srcVrf")
    def src_vrf(self) -> pulumi.Input[str]:
        return pulumi.get(self, "src_vrf")

    @src_vrf.setter
    def src_vrf(self, value: pulumi.Input[str]):
        pulumi.set(self, "src_vrf", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "template_name", value)


@pulumi.input_type
class BfdIpv6WithDstVrfArgs:
    def __init__(__self__, *,
                 dest_ipv6: pulumi.Input[str],
                 dst_vrf: pulumi.Input[str],
                 src_ipv6: pulumi.Input[str],
                 template_name: pulumi.Input[str]):
        pulumi.set(__self__, "dest_ipv6", dest_ipv6)
        pulumi.set(__self__, "dst_vrf", dst_vrf)
        pulumi.set(__self__, "src_ipv6", src_ipv6)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="destIpv6")
    def dest_ipv6(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dest_ipv6")

    @dest_ipv6.setter
    def dest_ipv6(self, value: pulumi.Input[str]):
        pulumi.set(self, "dest_ipv6", value)

    @property
    @pulumi.getter(name="dstVrf")
    def dst_vrf(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dst_vrf")

    @dst_vrf.setter
    def dst_vrf(self, value: pulumi.Input[str]):
        pulumi.set(self, "dst_vrf", value)

    @property
    @pulumi.getter(name="srcIpv6")
    def src_ipv6(self) -> pulumi.Input[str]:
        return pulumi.get(self, "src_ipv6")

    @src_ipv6.setter
    def src_ipv6(self, value: pulumi.Input[str]):
        pulumi.set(self, "src_ipv6", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "template_name", value)


@pulumi.input_type
class BfdIpv6WithSrcVrfArgs:
    def __init__(__self__, *,
                 dest_ipv6: pulumi.Input[str],
                 src_ipv6: pulumi.Input[str],
                 src_vrf: pulumi.Input[str],
                 template_name: pulumi.Input[str]):
        pulumi.set(__self__, "dest_ipv6", dest_ipv6)
        pulumi.set(__self__, "src_ipv6", src_ipv6)
        pulumi.set(__self__, "src_vrf", src_vrf)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="destIpv6")
    def dest_ipv6(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dest_ipv6")

    @dest_ipv6.setter
    def dest_ipv6(self, value: pulumi.Input[str]):
        pulumi.set(self, "dest_ipv6", value)

    @property
    @pulumi.getter(name="srcIpv6")
    def src_ipv6(self) -> pulumi.Input[str]:
        return pulumi.get(self, "src_ipv6")

    @src_ipv6.setter
    def src_ipv6(self, value: pulumi.Input[str]):
        pulumi.set(self, "src_ipv6", value)

    @property
    @pulumi.getter(name="srcVrf")
    def src_vrf(self) -> pulumi.Input[str]:
        return pulumi.get(self, "src_vrf")

    @src_vrf.setter
    def src_vrf(self, value: pulumi.Input[str]):
        pulumi.set(self, "src_vrf", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "template_name", value)


@pulumi.input_type
class BfdIpv6WithoutVrfArgs:
    def __init__(__self__, *,
                 dest_ipv6: pulumi.Input[str],
                 src_ipv6: pulumi.Input[str],
                 template_name: pulumi.Input[str]):
        pulumi.set(__self__, "dest_ipv6", dest_ipv6)
        pulumi.set(__self__, "src_ipv6", src_ipv6)
        pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="destIpv6")
    def dest_ipv6(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dest_ipv6")

    @dest_ipv6.setter
    def dest_ipv6(self, value: pulumi.Input[str]):
        pulumi.set(self, "dest_ipv6", value)

    @property
    @pulumi.getter(name="srcIpv6")
    def src_ipv6(self) -> pulumi.Input[str]:
        return pulumi.get(self, "src_ipv6")

    @src_ipv6.setter
    def src_ipv6(self, value: pulumi.Input[str]):
        pulumi.set(self, "src_ipv6", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "template_name", value)


@pulumi.input_type
class BgpAddressFamilyIpv4Ipv4UnicastNetworkArgs:
    def __init__(__self__, *,
                 network: pulumi.Input[str],
                 backdoor: Optional[pulumi.Input[bool]] = None,
                 route_map: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "network", network)
        if backdoor is not None:
            pulumi.set(__self__, "backdoor", backdoor)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def network(self) -> pulumi.Input[str]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: pulumi.Input[str]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def backdoor(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "backdoor")

    @backdoor.setter
    def backdoor(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "backdoor", value)

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map")

    @route_map.setter
    def route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map", value)


@pulumi.input_type
class BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArgs:
    def __init__(__self__, *,
                 mask: pulumi.Input[str],
                 network: pulumi.Input[str],
                 backdoor: Optional[pulumi.Input[bool]] = None,
                 route_map: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mask", mask)
        pulumi.set(__self__, "network", network)
        if backdoor is not None:
            pulumi.set(__self__, "backdoor", backdoor)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def mask(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mask")

    @mask.setter
    def mask(self, value: pulumi.Input[str]):
        pulumi.set(self, "mask", value)

    @property
    @pulumi.getter
    def network(self) -> pulumi.Input[str]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: pulumi.Input[str]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def backdoor(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "backdoor")

    @backdoor.setter
    def backdoor(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "backdoor", value)

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map")

    @route_map.setter
    def route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map", value)


@pulumi.input_type
class BgpAddressFamilyIpv4VrfVrfArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 ipv4_unicast_advertise_l2vpn_evpn: Optional[pulumi.Input[bool]] = None,
                 ipv4_unicast_networks: Optional[pulumi.Input[Sequence[pulumi.Input['BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArgs']]]] = None,
                 ipv4_unicast_networks_masks: Optional[pulumi.Input[Sequence[pulumi.Input['BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArgs']]]] = None,
                 ipv4_unicast_redistribute_connected: Optional[pulumi.Input[bool]] = None,
                 ipv4_unicast_redistribute_static: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "name", name)
        if ipv4_unicast_advertise_l2vpn_evpn is not None:
            pulumi.set(__self__, "ipv4_unicast_advertise_l2vpn_evpn", ipv4_unicast_advertise_l2vpn_evpn)
        if ipv4_unicast_networks is not None:
            pulumi.set(__self__, "ipv4_unicast_networks", ipv4_unicast_networks)
        if ipv4_unicast_networks_masks is not None:
            pulumi.set(__self__, "ipv4_unicast_networks_masks", ipv4_unicast_networks_masks)
        if ipv4_unicast_redistribute_connected is not None:
            pulumi.set(__self__, "ipv4_unicast_redistribute_connected", ipv4_unicast_redistribute_connected)
        if ipv4_unicast_redistribute_static is not None:
            pulumi.set(__self__, "ipv4_unicast_redistribute_static", ipv4_unicast_redistribute_static)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ipv4UnicastAdvertiseL2vpnEvpn")
    def ipv4_unicast_advertise_l2vpn_evpn(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ipv4_unicast_advertise_l2vpn_evpn")

    @ipv4_unicast_advertise_l2vpn_evpn.setter
    def ipv4_unicast_advertise_l2vpn_evpn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipv4_unicast_advertise_l2vpn_evpn", value)

    @property
    @pulumi.getter(name="ipv4UnicastNetworks")
    def ipv4_unicast_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArgs']]]]:
        return pulumi.get(self, "ipv4_unicast_networks")

    @ipv4_unicast_networks.setter
    def ipv4_unicast_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArgs']]]]):
        pulumi.set(self, "ipv4_unicast_networks", value)

    @property
    @pulumi.getter(name="ipv4UnicastNetworksMasks")
    def ipv4_unicast_networks_masks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArgs']]]]:
        return pulumi.get(self, "ipv4_unicast_networks_masks")

    @ipv4_unicast_networks_masks.setter
    def ipv4_unicast_networks_masks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArgs']]]]):
        pulumi.set(self, "ipv4_unicast_networks_masks", value)

    @property
    @pulumi.getter(name="ipv4UnicastRedistributeConnected")
    def ipv4_unicast_redistribute_connected(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ipv4_unicast_redistribute_connected")

    @ipv4_unicast_redistribute_connected.setter
    def ipv4_unicast_redistribute_connected(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipv4_unicast_redistribute_connected", value)

    @property
    @pulumi.getter(name="ipv4UnicastRedistributeStatic")
    def ipv4_unicast_redistribute_static(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ipv4_unicast_redistribute_static")

    @ipv4_unicast_redistribute_static.setter
    def ipv4_unicast_redistribute_static(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipv4_unicast_redistribute_static", value)


@pulumi.input_type
class BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArgs:
    def __init__(__self__, *,
                 network: pulumi.Input[str],
                 backdoor: Optional[pulumi.Input[bool]] = None,
                 evpn: Optional[pulumi.Input[bool]] = None,
                 route_map: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "network", network)
        if backdoor is not None:
            pulumi.set(__self__, "backdoor", backdoor)
        if evpn is not None:
            pulumi.set(__self__, "evpn", evpn)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def network(self) -> pulumi.Input[str]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: pulumi.Input[str]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def backdoor(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "backdoor")

    @backdoor.setter
    def backdoor(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "backdoor", value)

    @property
    @pulumi.getter
    def evpn(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "evpn")

    @evpn.setter
    def evpn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "evpn", value)

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map")

    @route_map.setter
    def route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map", value)


@pulumi.input_type
class BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArgs:
    def __init__(__self__, *,
                 mask: pulumi.Input[str],
                 network: pulumi.Input[str],
                 backdoor: Optional[pulumi.Input[bool]] = None,
                 evpn: Optional[pulumi.Input[bool]] = None,
                 route_map: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mask", mask)
        pulumi.set(__self__, "network", network)
        if backdoor is not None:
            pulumi.set(__self__, "backdoor", backdoor)
        if evpn is not None:
            pulumi.set(__self__, "evpn", evpn)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def mask(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mask")

    @mask.setter
    def mask(self, value: pulumi.Input[str]):
        pulumi.set(self, "mask", value)

    @property
    @pulumi.getter
    def network(self) -> pulumi.Input[str]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: pulumi.Input[str]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def backdoor(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "backdoor")

    @backdoor.setter
    def backdoor(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "backdoor", value)

    @property
    @pulumi.getter
    def evpn(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "evpn")

    @evpn.setter
    def evpn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "evpn", value)

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map")

    @route_map.setter
    def route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map", value)


@pulumi.input_type
class BgpAddressFamilyIpv6Ipv6UnicastNetworkArgs:
    def __init__(__self__, *,
                 network: pulumi.Input[str],
                 backdoor: Optional[pulumi.Input[bool]] = None,
                 route_map: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "network", network)
        if backdoor is not None:
            pulumi.set(__self__, "backdoor", backdoor)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def network(self) -> pulumi.Input[str]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: pulumi.Input[str]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def backdoor(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "backdoor")

    @backdoor.setter
    def backdoor(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "backdoor", value)

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map")

    @route_map.setter
    def route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map", value)


@pulumi.input_type
class BgpAddressFamilyIpv6VrfVrfArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 ipv6_unicast_advertise_l2vpn_evpn: Optional[pulumi.Input[bool]] = None,
                 ipv6_unicast_networks: Optional[pulumi.Input[Sequence[pulumi.Input['BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArgs']]]] = None,
                 ipv6_unicast_redistribute_connected: Optional[pulumi.Input[bool]] = None,
                 ipv6_unicast_redistribute_static: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "name", name)
        if ipv6_unicast_advertise_l2vpn_evpn is not None:
            pulumi.set(__self__, "ipv6_unicast_advertise_l2vpn_evpn", ipv6_unicast_advertise_l2vpn_evpn)
        if ipv6_unicast_networks is not None:
            pulumi.set(__self__, "ipv6_unicast_networks", ipv6_unicast_networks)
        if ipv6_unicast_redistribute_connected is not None:
            pulumi.set(__self__, "ipv6_unicast_redistribute_connected", ipv6_unicast_redistribute_connected)
        if ipv6_unicast_redistribute_static is not None:
            pulumi.set(__self__, "ipv6_unicast_redistribute_static", ipv6_unicast_redistribute_static)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ipv6UnicastAdvertiseL2vpnEvpn")
    def ipv6_unicast_advertise_l2vpn_evpn(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ipv6_unicast_advertise_l2vpn_evpn")

    @ipv6_unicast_advertise_l2vpn_evpn.setter
    def ipv6_unicast_advertise_l2vpn_evpn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipv6_unicast_advertise_l2vpn_evpn", value)

    @property
    @pulumi.getter(name="ipv6UnicastNetworks")
    def ipv6_unicast_networks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArgs']]]]:
        return pulumi.get(self, "ipv6_unicast_networks")

    @ipv6_unicast_networks.setter
    def ipv6_unicast_networks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArgs']]]]):
        pulumi.set(self, "ipv6_unicast_networks", value)

    @property
    @pulumi.getter(name="ipv6UnicastRedistributeConnected")
    def ipv6_unicast_redistribute_connected(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ipv6_unicast_redistribute_connected")

    @ipv6_unicast_redistribute_connected.setter
    def ipv6_unicast_redistribute_connected(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipv6_unicast_redistribute_connected", value)

    @property
    @pulumi.getter(name="ipv6UnicastRedistributeStatic")
    def ipv6_unicast_redistribute_static(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ipv6_unicast_redistribute_static")

    @ipv6_unicast_redistribute_static.setter
    def ipv6_unicast_redistribute_static(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ipv6_unicast_redistribute_static", value)


@pulumi.input_type
class BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArgs:
    def __init__(__self__, *,
                 network: pulumi.Input[str],
                 backdoor: Optional[pulumi.Input[bool]] = None,
                 evpn: Optional[pulumi.Input[bool]] = None,
                 route_map: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "network", network)
        if backdoor is not None:
            pulumi.set(__self__, "backdoor", backdoor)
        if evpn is not None:
            pulumi.set(__self__, "evpn", evpn)
        if route_map is not None:
            pulumi.set(__self__, "route_map", route_map)

    @property
    @pulumi.getter
    def network(self) -> pulumi.Input[str]:
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: pulumi.Input[str]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def backdoor(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "backdoor")

    @backdoor.setter
    def backdoor(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "backdoor", value)

    @property
    @pulumi.getter
    def evpn(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "evpn")

    @evpn.setter
    def evpn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "evpn", value)

    @property
    @pulumi.getter(name="routeMap")
    def route_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "route_map")

    @route_map.setter
    def route_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_map", value)


@pulumi.input_type
class BgpIpv4UnicastNeighborRouteMapArgs:
    def __init__(__self__, *,
                 in_out: pulumi.Input[str],
                 route_map_name: pulumi.Input[str]):
        pulumi.set(__self__, "in_out", in_out)
        pulumi.set(__self__, "route_map_name", route_map_name)

    @property
    @pulumi.getter(name="inOut")
    def in_out(self) -> pulumi.Input[str]:
        return pulumi.get(self, "in_out")

    @in_out.setter
    def in_out(self, value: pulumi.Input[str]):
        pulumi.set(self, "in_out", value)

    @property
    @pulumi.getter(name="routeMapName")
    def route_map_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "route_map_name")

    @route_map_name.setter
    def route_map_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "route_map_name", value)


@pulumi.input_type
class BgpIpv4UnicastVrfNeighborRouteMapArgs:
    def __init__(__self__, *,
                 in_out: pulumi.Input[str],
                 route_map_name: pulumi.Input[str]):
        pulumi.set(__self__, "in_out", in_out)
        pulumi.set(__self__, "route_map_name", route_map_name)

    @property
    @pulumi.getter(name="inOut")
    def in_out(self) -> pulumi.Input[str]:
        return pulumi.get(self, "in_out")

    @in_out.setter
    def in_out(self, value: pulumi.Input[str]):
        pulumi.set(self, "in_out", value)

    @property
    @pulumi.getter(name="routeMapName")
    def route_map_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "route_map_name")

    @route_map_name.setter
    def route_map_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "route_map_name", value)


@pulumi.input_type
class BgpIpv6UnicastNeighborRouteMapArgs:
    def __init__(__self__, *,
                 in_out: pulumi.Input[str],
                 route_map_name: pulumi.Input[str]):
        pulumi.set(__self__, "in_out", in_out)
        pulumi.set(__self__, "route_map_name", route_map_name)

    @property
    @pulumi.getter(name="inOut")
    def in_out(self) -> pulumi.Input[str]:
        return pulumi.get(self, "in_out")

    @in_out.setter
    def in_out(self, value: pulumi.Input[str]):
        pulumi.set(self, "in_out", value)

    @property
    @pulumi.getter(name="routeMapName")
    def route_map_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "route_map_name")

    @route_map_name.setter
    def route_map_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "route_map_name", value)


@pulumi.input_type
class CdpTlvListArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 cos: Optional[pulumi.Input[bool]] = None,
                 duplex: Optional[pulumi.Input[bool]] = None,
                 trust: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[bool]] = None,
                 vtp_mgmt_domain: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "name", name)
        if cos is not None:
            pulumi.set(__self__, "cos", cos)
        if duplex is not None:
            pulumi.set(__self__, "duplex", duplex)
        if trust is not None:
            pulumi.set(__self__, "trust", trust)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if vtp_mgmt_domain is not None:
            pulumi.set(__self__, "vtp_mgmt_domain", vtp_mgmt_domain)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def cos(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "cos")

    @cos.setter
    def cos(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cos", value)

    @property
    @pulumi.getter
    def duplex(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "duplex")

    @duplex.setter
    def duplex(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "duplex", value)

    @property
    @pulumi.getter
    def trust(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "trust")

    @trust.setter
    def trust(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trust", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="vtpMgmtDomain")
    def vtp_mgmt_domain(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "vtp_mgmt_domain")

    @vtp_mgmt_domain.setter
    def vtp_mgmt_domain(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vtp_mgmt_domain", value)


@pulumi.input_type
class ClassMapMatchActivatedServiceTemplateArgs:
    def __init__(__self__, *,
                 service_name: pulumi.Input[str]):
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)


@pulumi.input_type
class CryptoIkev2KeyringPeerArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 hostname: Optional[pulumi.Input[str]] = None,
                 identity_address: Optional[pulumi.Input[str]] = None,
                 identity_email_domain: Optional[pulumi.Input[str]] = None,
                 identity_email_name: Optional[pulumi.Input[str]] = None,
                 identity_fqdn_domain: Optional[pulumi.Input[str]] = None,
                 identity_fqdn_name: Optional[pulumi.Input[str]] = None,
                 identity_key_id: Optional[pulumi.Input[str]] = None,
                 ipv4_address: Optional[pulumi.Input[str]] = None,
                 ipv4_mask: Optional[pulumi.Input[str]] = None,
                 ipv6_prefix: Optional[pulumi.Input[str]] = None,
                 pre_shared_key: Optional[pulumi.Input[str]] = None,
                 pre_shared_key_encryption: Optional[pulumi.Input[str]] = None,
                 pre_shared_key_local: Optional[pulumi.Input[str]] = None,
                 pre_shared_key_local_encryption: Optional[pulumi.Input[str]] = None,
                 pre_shared_key_remote: Optional[pulumi.Input[str]] = None,
                 pre_shared_key_remote_encryption: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if identity_address is not None:
            pulumi.set(__self__, "identity_address", identity_address)
        if identity_email_domain is not None:
            pulumi.set(__self__, "identity_email_domain", identity_email_domain)
        if identity_email_name is not None:
            pulumi.set(__self__, "identity_email_name", identity_email_name)
        if identity_fqdn_domain is not None:
            pulumi.set(__self__, "identity_fqdn_domain", identity_fqdn_domain)
        if identity_fqdn_name is not None:
            pulumi.set(__self__, "identity_fqdn_name", identity_fqdn_name)
        if identity_key_id is not None:
            pulumi.set(__self__, "identity_key_id", identity_key_id)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_mask is not None:
            pulumi.set(__self__, "ipv4_mask", ipv4_mask)
        if ipv6_prefix is not None:
            pulumi.set(__self__, "ipv6_prefix", ipv6_prefix)
        if pre_shared_key is not None:
            pulumi.set(__self__, "pre_shared_key", pre_shared_key)
        if pre_shared_key_encryption is not None:
            pulumi.set(__self__, "pre_shared_key_encryption", pre_shared_key_encryption)
        if pre_shared_key_local is not None:
            pulumi.set(__self__, "pre_shared_key_local", pre_shared_key_local)
        if pre_shared_key_local_encryption is not None:
            pulumi.set(__self__, "pre_shared_key_local_encryption", pre_shared_key_local_encryption)
        if pre_shared_key_remote is not None:
            pulumi.set(__self__, "pre_shared_key_remote", pre_shared_key_remote)
        if pre_shared_key_remote_encryption is not None:
            pulumi.set(__self__, "pre_shared_key_remote_encryption", pre_shared_key_remote_encryption)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)

    @property
    @pulumi.getter(name="identityAddress")
    def identity_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_address")

    @identity_address.setter
    def identity_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_address", value)

    @property
    @pulumi.getter(name="identityEmailDomain")
    def identity_email_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_email_domain")

    @identity_email_domain.setter
    def identity_email_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_email_domain", value)

    @property
    @pulumi.getter(name="identityEmailName")
    def identity_email_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_email_name")

    @identity_email_name.setter
    def identity_email_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_email_name", value)

    @property
    @pulumi.getter(name="identityFqdnDomain")
    def identity_fqdn_domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_fqdn_domain")

    @identity_fqdn_domain.setter
    def identity_fqdn_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_fqdn_domain", value)

    @property
    @pulumi.getter(name="identityFqdnName")
    def identity_fqdn_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_fqdn_name")

    @identity_fqdn_name.setter
    def identity_fqdn_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_fqdn_name", value)

    @property
    @pulumi.getter(name="identityKeyId")
    def identity_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "identity_key_id")

    @identity_key_id.setter
    def identity_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identity_key_id", value)

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_address", value)

    @property
    @pulumi.getter(name="ipv4Mask")
    def ipv4_mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_mask")

    @ipv4_mask.setter
    def ipv4_mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_mask", value)

    @property
    @pulumi.getter(name="ipv6Prefix")
    def ipv6_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6_prefix")

    @ipv6_prefix.setter
    def ipv6_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6_prefix", value)

    @property
    @pulumi.getter(name="preSharedKey")
    def pre_shared_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pre_shared_key")

    @pre_shared_key.setter
    def pre_shared_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_shared_key", value)

    @property
    @pulumi.getter(name="preSharedKeyEncryption")
    def pre_shared_key_encryption(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pre_shared_key_encryption")

    @pre_shared_key_encryption.setter
    def pre_shared_key_encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_shared_key_encryption", value)

    @property
    @pulumi.getter(name="preSharedKeyLocal")
    def pre_shared_key_local(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pre_shared_key_local")

    @pre_shared_key_local.setter
    def pre_shared_key_local(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_shared_key_local", value)

    @property
    @pulumi.getter(name="preSharedKeyLocalEncryption")
    def pre_shared_key_local_encryption(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pre_shared_key_local_encryption")

    @pre_shared_key_local_encryption.setter
    def pre_shared_key_local_encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_shared_key_local_encryption", value)

    @property
    @pulumi.getter(name="preSharedKeyRemote")
    def pre_shared_key_remote(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pre_shared_key_remote")

    @pre_shared_key_remote.setter
    def pre_shared_key_remote(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_shared_key_remote", value)

    @property
    @pulumi.getter(name="preSharedKeyRemoteEncryption")
    def pre_shared_key_remote_encryption(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pre_shared_key_remote_encryption")

    @pre_shared_key_remote_encryption.setter
    def pre_shared_key_remote_encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_shared_key_remote_encryption", value)


@pulumi.input_type
class CryptoIkev2PolicyProposalArgs:
    def __init__(__self__, *,
                 proposals: pulumi.Input[str]):
        pulumi.set(__self__, "proposals", proposals)

    @property
    @pulumi.getter
    def proposals(self) -> pulumi.Input[str]:
        return pulumi.get(self, "proposals")

    @proposals.setter
    def proposals(self, value: pulumi.Input[str]):
        pulumi.set(self, "proposals", value)


@pulumi.input_type
class CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 mask: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "address", address)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mask")

    @mask.setter
    def mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mask", value)


@pulumi.input_type
class DhcpSnoopingVlanArgs:
    def __init__(__self__, *,
                 vlan_id: pulumi.Input[str]):
        pulumi.set(__self__, "vlan_id", vlan_id)

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vlan_id")

    @vlan_id.setter
    def vlan_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "vlan_id", value)


@pulumi.input_type
class Dot1xCredentialArgs:
    def __init__(__self__, *,
                 profile_name: pulumi.Input[str],
                 anonymous_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_type: Optional[pulumi.Input[str]] = None,
                 pki_trustpoint: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "profile_name", profile_name)
        if anonymous_id is not None:
            pulumi.set(__self__, "anonymous_id", anonymous_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_type is not None:
            pulumi.set(__self__, "password_type", password_type)
        if pki_trustpoint is not None:
            pulumi.set(__self__, "pki_trustpoint", pki_trustpoint)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="profileName")
    def profile_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "profile_name")

    @profile_name.setter
    def profile_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "profile_name", value)

    @property
    @pulumi.getter(name="anonymousId")
    def anonymous_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "anonymous_id")

    @anonymous_id.setter
    def anonymous_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anonymous_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="passwordType")
    def password_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password_type")

    @password_type.setter
    def password_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_type", value)

    @property
    @pulumi.getter(name="pkiTrustpoint")
    def pki_trustpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pki_trustpoint")

    @pki_trustpoint.setter
    def pki_trustpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pki_trustpoint", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class InterfaceEthernetHelperAddressArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 global_: Optional[pulumi.Input[bool]] = None,
                 vrf: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "address", address)
        if global_ is not None:
            pulumi.set(__self__, "global_", global_)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "global_")

    @global_.setter
    def global_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "global_", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf", value)


@pulumi.input_type
class InterfaceEthernetIpv6AddressArgs:
    def __init__(__self__, *,
                 prefix: pulumi.Input[str],
                 eui64: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "prefix", prefix)
        if eui64 is not None:
            pulumi.set(__self__, "eui64", eui64)

    @property
    @pulumi.getter
    def prefix(self) -> pulumi.Input[str]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def eui64(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "eui64")

    @eui64.setter
    def eui64(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "eui64", value)


@pulumi.input_type
class InterfaceEthernetIpv6LinkLocalAddressArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 link_local: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "address", address)
        if link_local is not None:
            pulumi.set(__self__, "link_local", link_local)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="linkLocal")
    def link_local(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "link_local")

    @link_local.setter
    def link_local(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "link_local", value)


@pulumi.input_type
class InterfaceEthernetSourceTemplateArgs:
    def __init__(__self__, *,
                 template_name: pulumi.Input[str],
                 merge: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "template_name", template_name)
        if merge is not None:
            pulumi.set(__self__, "merge", merge)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "template_name", value)

    @property
    @pulumi.getter
    def merge(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "merge")

    @merge.setter
    def merge(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "merge", value)


@pulumi.input_type
class InterfaceLoopbackIpv6AddressArgs:
    def __init__(__self__, *,
                 prefix: pulumi.Input[str],
                 eui64: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "prefix", prefix)
        if eui64 is not None:
            pulumi.set(__self__, "eui64", eui64)

    @property
    @pulumi.getter
    def prefix(self) -> pulumi.Input[str]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def eui64(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "eui64")

    @eui64.setter
    def eui64(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "eui64", value)


@pulumi.input_type
class InterfaceLoopbackIpv6LinkLocalAddressArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 link_local: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "address", address)
        if link_local is not None:
            pulumi.set(__self__, "link_local", link_local)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="linkLocal")
    def link_local(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "link_local")

    @link_local.setter
    def link_local(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "link_local", value)


@pulumi.input_type
class InterfaceNveVniArgs:
    def __init__(__self__, *,
                 vni_range: pulumi.Input[str],
                 ingress_replication: Optional[pulumi.Input[bool]] = None,
                 ipv4_multicast_group: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "vni_range", vni_range)
        if ingress_replication is not None:
            pulumi.set(__self__, "ingress_replication", ingress_replication)
        if ipv4_multicast_group is not None:
            pulumi.set(__self__, "ipv4_multicast_group", ipv4_multicast_group)

    @property
    @pulumi.getter(name="vniRange")
    def vni_range(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vni_range")

    @vni_range.setter
    def vni_range(self, value: pulumi.Input[str]):
        pulumi.set(self, "vni_range", value)

    @property
    @pulumi.getter(name="ingressReplication")
    def ingress_replication(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ingress_replication")

    @ingress_replication.setter
    def ingress_replication(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ingress_replication", value)

    @property
    @pulumi.getter(name="ipv4MulticastGroup")
    def ipv4_multicast_group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv4_multicast_group")

    @ipv4_multicast_group.setter
    def ipv4_multicast_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_multicast_group", value)


@pulumi.input_type
class InterfaceNveVniVrfArgs:
    def __init__(__self__, *,
                 vni_range: pulumi.Input[str],
                 vrf: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "vni_range", vni_range)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="vniRange")
    def vni_range(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vni_range")

    @vni_range.setter
    def vni_range(self, value: pulumi.Input[str]):
        pulumi.set(self, "vni_range", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf", value)


@pulumi.input_type
class InterfaceOspfMessageDigestKeyArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[int],
                 md5_auth_key: Optional[pulumi.Input[str]] = None,
                 md5_auth_type: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "id", id)
        if md5_auth_key is not None:
            pulumi.set(__self__, "md5_auth_key", md5_auth_key)
        if md5_auth_type is not None:
            pulumi.set(__self__, "md5_auth_type", md5_auth_type)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="md5AuthKey")
    def md5_auth_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "md5_auth_key")

    @md5_auth_key.setter
    def md5_auth_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "md5_auth_key", value)

    @property
    @pulumi.getter(name="md5AuthType")
    def md5_auth_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "md5_auth_type")

    @md5_auth_type.setter
    def md5_auth_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "md5_auth_type", value)


@pulumi.input_type
class InterfaceOspfProcessIdArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[int],
                 areas: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceOspfProcessIdAreaArgs']]]] = None):
        pulumi.set(__self__, "id", id)
        if areas is not None:
            pulumi.set(__self__, "areas", areas)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[int]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def areas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceOspfProcessIdAreaArgs']]]]:
        return pulumi.get(self, "areas")

    @areas.setter
    def areas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InterfaceOspfProcessIdAreaArgs']]]]):
        pulumi.set(self, "areas", value)


@pulumi.input_type
class InterfaceOspfProcessIdAreaArgs:
    def __init__(__self__, *,
                 area_id: pulumi.Input[str]):
        pulumi.set(__self__, "area_id", area_id)

    @property
    @pulumi.getter(name="areaId")
    def area_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "area_id")

    @area_id.setter
    def area_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "area_id", value)


@pulumi.input_type
class InterfacePortChannelHelperAddressArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 global_: Optional[pulumi.Input[bool]] = None,
                 vrf: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "address", address)
        if global_ is not None:
            pulumi.set(__self__, "global_", global_)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "global_")

    @global_.setter
    def global_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "global_", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf", value)


@pulumi.input_type
class InterfacePortChannelIpv6AddressArgs:
    def __init__(__self__, *,
                 prefix: pulumi.Input[str],
                 eui64: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "prefix", prefix)
        if eui64 is not None:
            pulumi.set(__self__, "eui64", eui64)

    @property
    @pulumi.getter
    def prefix(self) -> pulumi.Input[str]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def eui64(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "eui64")

    @eui64.setter
    def eui64(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "eui64", value)


@pulumi.input_type
class InterfacePortChannelIpv6LinkLocalAddressArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 link_local: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "address", address)
        if link_local is not None:
            pulumi.set(__self__, "link_local", link_local)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="linkLocal")
    def link_local(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "link_local")

    @link_local.setter
    def link_local(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "link_local", value)


@pulumi.input_type
class InterfacePortChannelSubinterfaceHelperAddressArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 global_: Optional[pulumi.Input[bool]] = None,
                 vrf: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "address", address)
        if global_ is not None:
            pulumi.set(__self__, "global_", global_)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "global_")

    @global_.setter
    def global_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "global_", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf", value)


@pulumi.input_type
class InterfacePortChannelSubinterfaceIpv6AddressArgs:
    def __init__(__self__, *,
                 prefix: pulumi.Input[str],
                 eui64: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "prefix", prefix)
        if eui64 is not None:
            pulumi.set(__self__, "eui64", eui64)

    @property
    @pulumi.getter
    def prefix(self) -> pulumi.Input[str]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def eui64(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "eui64")

    @eui64.setter
    def eui64(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "eui64", value)


@pulumi.input_type
class InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 link_local: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "address", address)
        if link_local is not None:
            pulumi.set(__self__, "link_local", link_local)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="linkLocal")
    def link_local(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "link_local")

    @link_local.setter
    def link_local(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "link_local", value)


@pulumi.input_type
class InterfaceTunnelHelperAddressArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 global_: Optional[pulumi.Input[bool]] = None,
                 vrf: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "address", address)
        if global_ is not None:
            pulumi.set(__self__, "global_", global_)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "global_")

    @global_.setter
    def global_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "global_", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf", value)


@pulumi.input_type
class InterfaceTunnelIpv6AddressArgs:
    def __init__(__self__, *,
                 prefix: pulumi.Input[str],
                 eui64: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "prefix", prefix)
        if eui64 is not None:
            pulumi.set(__self__, "eui64", eui64)

    @property
    @pulumi.getter
    def prefix(self) -> pulumi.Input[str]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def eui64(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "eui64")

    @eui64.setter
    def eui64(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "eui64", value)


@pulumi.input_type
class InterfaceTunnelIpv6LinkLocalAddressArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 link_local: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "address", address)
        if link_local is not None:
            pulumi.set(__self__, "link_local", link_local)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="linkLocal")
    def link_local(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "link_local")

    @link_local.setter
    def link_local(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "link_local", value)


@pulumi.input_type
class InterfaceVlanHelperAddressArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 global_: Optional[pulumi.Input[bool]] = None,
                 vrf: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "address", address)
        if global_ is not None:
            pulumi.set(__self__, "global_", global_)
        if vrf is not None:
            pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "global_")

    @global_.setter
    def global_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "global_", value)

    @property
    @pulumi.getter
    def vrf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vrf", value)


@pulumi.input_type
class InterfaceVlanIpv6AddressArgs:
    def __init__(__self__, *,
                 prefix: pulumi.Input[str],
                 eui64: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "prefix", prefix)
        if eui64 is not None:
            pulumi.set(__self__, "eui64", eui64)

    @property
    @pulumi.getter
    def prefix(self) -> pulumi.Input[str]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def eui64(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "eui64")

    @eui64.setter
    def eui64(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "eui64", value)


@pulumi.input_type
class InterfaceVlanIpv6LinkLocalAddressArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 link_local: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "address", address)
        if link_local is not None:
            pulumi.set(__self__, "link_local", link_local)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="linkLocal")
    def link_local(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "link_local")

    @link_local.setter
    def link_local(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "link_local", value)


@pulumi.input_type
class LineConsoleArgs:
    def __init__(__self__, *,
                 first: pulumi.Input[str],
                 exec_timeout_minutes: Optional[pulumi.Input[int]] = None,
                 exec_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 login_authentication: Optional[pulumi.Input[str]] = None,
                 login_local: Optional[pulumi.Input[bool]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_level: Optional[pulumi.Input[int]] = None,
                 password_type: Optional[pulumi.Input[str]] = None,
                 privilege_level: Optional[pulumi.Input[int]] = None,
                 stopbits: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "first", first)
        if exec_timeout_minutes is not None:
            pulumi.set(__self__, "exec_timeout_minutes", exec_timeout_minutes)
        if exec_timeout_seconds is not None:
            pulumi.set(__self__, "exec_timeout_seconds", exec_timeout_seconds)
        if login_authentication is not None:
            pulumi.set(__self__, "login_authentication", login_authentication)
        if login_local is not None:
            pulumi.set(__self__, "login_local", login_local)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_level is not None:
            pulumi.set(__self__, "password_level", password_level)
        if password_type is not None:
            pulumi.set(__self__, "password_type", password_type)
        if privilege_level is not None:
            pulumi.set(__self__, "privilege_level", privilege_level)
        if stopbits is not None:
            pulumi.set(__self__, "stopbits", stopbits)

    @property
    @pulumi.getter
    def first(self) -> pulumi.Input[str]:
        return pulumi.get(self, "first")

    @first.setter
    def first(self, value: pulumi.Input[str]):
        pulumi.set(self, "first", value)

    @property
    @pulumi.getter(name="execTimeoutMinutes")
    def exec_timeout_minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "exec_timeout_minutes")

    @exec_timeout_minutes.setter
    def exec_timeout_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "exec_timeout_minutes", value)

    @property
    @pulumi.getter(name="execTimeoutSeconds")
    def exec_timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "exec_timeout_seconds")

    @exec_timeout_seconds.setter
    def exec_timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "exec_timeout_seconds", value)

    @property
    @pulumi.getter(name="loginAuthentication")
    def login_authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_authentication")

    @login_authentication.setter
    def login_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_authentication", value)

    @property
    @pulumi.getter(name="loginLocal")
    def login_local(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "login_local")

    @login_local.setter
    def login_local(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "login_local", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="passwordLevel")
    def password_level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "password_level")

    @password_level.setter
    def password_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "password_level", value)

    @property
    @pulumi.getter(name="passwordType")
    def password_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password_type")

    @password_type.setter
    def password_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_type", value)

    @property
    @pulumi.getter(name="privilegeLevel")
    def privilege_level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "privilege_level")

    @privilege_level.setter
    def privilege_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "privilege_level", value)

    @property
    @pulumi.getter
    def stopbits(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stopbits")

    @stopbits.setter
    def stopbits(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stopbits", value)


@pulumi.input_type
class LineVtyArgs:
    def __init__(__self__, *,
                 first: pulumi.Input[int],
                 access_classes: Optional[pulumi.Input[Sequence[pulumi.Input['LineVtyAccessClassArgs']]]] = None,
                 escape_character: Optional[pulumi.Input[str]] = None,
                 exec_timeout_minutes: Optional[pulumi.Input[int]] = None,
                 exec_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 last: Optional[pulumi.Input[int]] = None,
                 login_authentication: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_level: Optional[pulumi.Input[int]] = None,
                 password_type: Optional[pulumi.Input[str]] = None,
                 transport_preferred_protocol: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "first", first)
        if access_classes is not None:
            pulumi.set(__self__, "access_classes", access_classes)
        if escape_character is not None:
            pulumi.set(__self__, "escape_character", escape_character)
        if exec_timeout_minutes is not None:
            pulumi.set(__self__, "exec_timeout_minutes", exec_timeout_minutes)
        if exec_timeout_seconds is not None:
            pulumi.set(__self__, "exec_timeout_seconds", exec_timeout_seconds)
        if last is not None:
            pulumi.set(__self__, "last", last)
        if login_authentication is not None:
            pulumi.set(__self__, "login_authentication", login_authentication)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_level is not None:
            pulumi.set(__self__, "password_level", password_level)
        if password_type is not None:
            pulumi.set(__self__, "password_type", password_type)
        if transport_preferred_protocol is not None:
            pulumi.set(__self__, "transport_preferred_protocol", transport_preferred_protocol)

    @property
    @pulumi.getter
    def first(self) -> pulumi.Input[int]:
        return pulumi.get(self, "first")

    @first.setter
    def first(self, value: pulumi.Input[int]):
        pulumi.set(self, "first", value)

    @property
    @pulumi.getter(name="accessClasses")
    def access_classes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LineVtyAccessClassArgs']]]]:
        return pulumi.get(self, "access_classes")

    @access_classes.setter
    def access_classes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LineVtyAccessClassArgs']]]]):
        pulumi.set(self, "access_classes", value)

    @property
    @pulumi.getter(name="escapeCharacter")
    def escape_character(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "escape_character")

    @escape_character.setter
    def escape_character(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "escape_character", value)

    @property
    @pulumi.getter(name="execTimeoutMinutes")
    def exec_timeout_minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "exec_timeout_minutes")

    @exec_timeout_minutes.setter
    def exec_timeout_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "exec_timeout_minutes", value)

    @property
    @pulumi.getter(name="execTimeoutSeconds")
    def exec_timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "exec_timeout_seconds")

    @exec_timeout_seconds.setter
    def exec_timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "exec_timeout_seconds", value)

    @property
    @pulumi.getter
    def last(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "last")

    @last.setter
    def last(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "last", value)

    @property
    @pulumi.getter(name="loginAuthentication")
    def login_authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_authentication")

    @login_authentication.setter
    def login_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_authentication", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="passwordLevel")
    def password_level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "password_level")

    @password_level.setter
    def password_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "password_level", value)

    @property
    @pulumi.getter(name="passwordType")
    def password_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password_type")

    @password_type.setter
    def password_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_type", value)

    @property
    @pulumi.getter(name="transportPreferredProtocol")
    def transport_preferred_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transport_preferred_protocol")

    @transport_preferred_protocol.setter
    def transport_preferred_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transport_preferred_protocol", value)


@pulumi.input_type
class LineVtyAccessClassArgs:
    def __init__(__self__, *,
                 access_list: pulumi.Input[str],
                 direction: pulumi.Input[str],
                 vrf_also: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "access_list", access_list)
        pulumi.set(__self__, "direction", direction)
        if vrf_also is not None:
            pulumi.set(__self__, "vrf_also", vrf_also)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_list")

    @access_list.setter
    def access_list(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_list", value)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input[str]:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[str]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="vrfAlso")
    def vrf_also(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "vrf_also")

    @vrf_also.setter
    def vrf_also(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vrf_also", value)


@pulumi.input_type
class LoggingIpv4HostArgs:
    def __init__(__self__, *,
                 ipv4_host: pulumi.Input[str]):
        pulumi.set(__self__, "ipv4_host", ipv4_host)

    @property
    @pulumi.getter(name="ipv4Host")
    def ipv4_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ipv4_host")

    @ipv4_host.setter
    def ipv4_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "ipv4_host", value)


@pulumi.input_type
class LoggingIpv4HostTransportTransportTcpPortArgs:
    def __init__(__self__, *,
                 port_number: pulumi.Input[int]):
        pulumi.set(__self__, "port_number", port_number)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port_number")

    @port_number.setter
    def port_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "port_number", value)


@pulumi.input_type
class LoggingIpv4HostTransportTransportTlsPortArgs:
    def __init__(__self__, *,
                 port_number: pulumi.Input[int],
                 profile: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "port_number", port_number)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port_number")

    @port_number.setter
    def port_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "port_number", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)


@pulumi.input_type
class LoggingIpv4HostTransportTransportUdpPortArgs:
    def __init__(__self__, *,
                 port_number: pulumi.Input[int]):
        pulumi.set(__self__, "port_number", port_number)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port_number")

    @port_number.setter
    def port_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "port_number", value)


@pulumi.input_type
class LoggingIpv4HostVrfTransportTransportTcpPortArgs:
    def __init__(__self__, *,
                 port_number: pulumi.Input[int]):
        pulumi.set(__self__, "port_number", port_number)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port_number")

    @port_number.setter
    def port_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "port_number", value)


@pulumi.input_type
class LoggingIpv4HostVrfTransportTransportTlsPortArgs:
    def __init__(__self__, *,
                 port_number: pulumi.Input[int],
                 profile: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "port_number", port_number)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port_number")

    @port_number.setter
    def port_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "port_number", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)


@pulumi.input_type
class LoggingIpv4HostVrfTransportTransportUdpPortArgs:
    def __init__(__self__, *,
                 port_number: pulumi.Input[int]):
        pulumi.set(__self__, "port_number", port_number)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port_number")

    @port_number.setter
    def port_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "port_number", value)


@pulumi.input_type
class LoggingIpv4VrfHostArgs:
    def __init__(__self__, *,
                 ipv4_host: pulumi.Input[str],
                 vrf: pulumi.Input[str]):
        pulumi.set(__self__, "ipv4_host", ipv4_host)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="ipv4Host")
    def ipv4_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ipv4_host")

    @ipv4_host.setter
    def ipv4_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "ipv4_host", value)

    @property
    @pulumi.getter
    def vrf(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: pulumi.Input[str]):
        pulumi.set(self, "vrf", value)


@pulumi.input_type
class LoggingIpv6HostArgs:
    def __init__(__self__, *,
                 ipv6_host: pulumi.Input[str]):
        pulumi.set(__self__, "ipv6_host", ipv6_host)

    @property
    @pulumi.getter(name="ipv6Host")
    def ipv6_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ipv6_host")

    @ipv6_host.setter
    def ipv6_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "ipv6_host", value)


@pulumi.input_type
class LoggingIpv6HostTransportTransportTcpPortArgs:
    def __init__(__self__, *,
                 port_number: pulumi.Input[int]):
        pulumi.set(__self__, "port_number", port_number)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port_number")

    @port_number.setter
    def port_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "port_number", value)


@pulumi.input_type
class LoggingIpv6HostTransportTransportTlsPortArgs:
    def __init__(__self__, *,
                 port_number: pulumi.Input[int],
                 profile: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "port_number", port_number)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port_number")

    @port_number.setter
    def port_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "port_number", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)


@pulumi.input_type
class LoggingIpv6HostTransportTransportUdpPortArgs:
    def __init__(__self__, *,
                 port_number: pulumi.Input[int]):
        pulumi.set(__self__, "port_number", port_number)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port_number")

    @port_number.setter
    def port_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "port_number", value)


@pulumi.input_type
class LoggingIpv6HostVrfTransportTransportTcpPortArgs:
    def __init__(__self__, *,
                 port_number: pulumi.Input[int]):
        pulumi.set(__self__, "port_number", port_number)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port_number")

    @port_number.setter
    def port_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "port_number", value)


@pulumi.input_type
class LoggingIpv6HostVrfTransportTransportTlsPortArgs:
    def __init__(__self__, *,
                 port_number: pulumi.Input[int],
                 profile: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "port_number", port_number)
        if profile is not None:
            pulumi.set(__self__, "profile", profile)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port_number")

    @port_number.setter
    def port_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "port_number", value)

    @property
    @pulumi.getter
    def profile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "profile")

    @profile.setter
    def profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "profile", value)


@pulumi.input_type
class LoggingIpv6HostVrfTransportTransportUdpPortArgs:
    def __init__(__self__, *,
                 port_number: pulumi.Input[int]):
        pulumi.set(__self__, "port_number", port_number)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port_number")

    @port_number.setter
    def port_number(self, value: pulumi.Input[int]):
        pulumi.set(self, "port_number", value)


@pulumi.input_type
class LoggingIpv6VrfHostArgs:
    def __init__(__self__, *,
                 ipv6_host: pulumi.Input[str],
                 vrf: pulumi.Input[str]):
        pulumi.set(__self__, "ipv6_host", ipv6_host)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="ipv6Host")
    def ipv6_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ipv6_host")

    @ipv6_host.setter
    def ipv6_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "ipv6_host", value)

    @property
    @pulumi.getter
    def vrf(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: pulumi.Input[str]):
        pulumi.set(self, "vrf", value)


@pulumi.input_type
class LoggingSourceInterfacesVrfArgs:
    def __init__(__self__, *,
                 interface_name: pulumi.Input[str],
                 vrf: pulumi.Input[str]):
        pulumi.set(__self__, "interface_name", interface_name)
        pulumi.set(__self__, "vrf", vrf)

    @property
    @pulumi.getter(name="interfaceName")
    def interface_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "interface_name")

    @interface_name.setter
    def interface_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface_name", value)

    @property
    @pulumi.getter
    def vrf(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: pulumi.Input[str]):
        pulumi.set(self, "vrf", value)


@pulumi.input_type
class MdtSubscriptionReceiverArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 port: pulumi.Input[int],
                 protocol: pulumi.Input[str]):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class MsdpPasswordArgs:
    def __init__(__self__, *,
                 addr: pulumi.Input[str],
                 password: pulumi.Input[str],
                 encryption: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "addr", addr)
        pulumi.set(__self__, "password", password)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)

    @property
    @pulumi.getter
    def addr(self) -> pulumi.Input[str]:
        return pulumi.get(self, "addr")

    @addr.setter
    def addr(self, value: pulumi.Input[str]):
        pulumi.set(self, "addr", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "encryption", value)


@pulumi.input_type
class MsdpPeerArgs:
    def __init__(__self__, *,
                 addr: pulumi.Input[str],
                 connect_source_loopback: Optional[pulumi.Input[int]] = None,
                 remote_as: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "addr", addr)
        if connect_source_loopback is not None:
            pulumi.set(__self__, "connect_source_loopback", connect_source_loopback)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)

    @property
    @pulumi.getter
    def addr(self) -> pulumi.Input[str]:
        return pulumi.get(self, "addr")

    @addr.setter
    def addr(self, value: pulumi.Input[str]):
        pulumi.set(self, "addr", value)

    @property
    @pulumi.getter(name="connectSourceLoopback")
    def connect_source_loopback(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "connect_source_loopback")

    @connect_source_loopback.setter
    def connect_source_loopback(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connect_source_loopback", value)

    @property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remote_as")

    @remote_as.setter
    def remote_as(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remote_as", value)


@pulumi.input_type
class MsdpVrfPasswordArgs:
    def __init__(__self__, *,
                 addr: pulumi.Input[str],
                 password: pulumi.Input[str],
                 encryption: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "addr", addr)
        pulumi.set(__self__, "password", password)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)

    @property
    @pulumi.getter
    def addr(self) -> pulumi.Input[str]:
        return pulumi.get(self, "addr")

    @addr.setter
    def addr(self, value: pulumi.Input[str]):
        pulumi.set(self, "addr", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "encryption", value)


@pulumi.input_type
class MsdpVrfPeerArgs:
    def __init__(__self__, *,
                 addr: pulumi.Input[str],
                 connect_source_loopback: Optional[pulumi.Input[int]] = None,
                 remote_as: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "addr", addr)
        if connect_source_loopback is not None:
            pulumi.set(__self__, "connect_source_loopback", connect_source_loopback)
        if remote_as is not None:
            pulumi.set(__self__, "remote_as", remote_as)

    @property
    @pulumi.getter
    def addr(self) -> pulumi.Input[str]:
        return pulumi.get(self, "addr")

    @addr.setter
    def addr(self, value: pulumi.Input[str]):
        pulumi.set(self, "addr", value)

    @property
    @pulumi.getter(name="connectSourceLoopback")
    def connect_source_loopback(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "connect_source_loopback")

    @connect_source_loopback.setter
    def connect_source_loopback(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connect_source_loopback", value)

    @property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "remote_as")

    @remote_as.setter
    def remote_as(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "remote_as", value)


@pulumi.input_type
class NtpAuthenticationKeyArgs:
    def __init__(__self__, *,
                 number: pulumi.Input[int],
                 cmac_aes128: Optional[pulumi.Input[str]] = None,
                 encryption_type: Optional[pulumi.Input[int]] = None,
                 hmac_sha1: Optional[pulumi.Input[str]] = None,
                 hmac_sha2256: Optional[pulumi.Input[str]] = None,
                 md5: Optional[pulumi.Input[str]] = None,
                 sha1: Optional[pulumi.Input[str]] = None,
                 sha2: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "number", number)
        if cmac_aes128 is not None:
            pulumi.set(__self__, "cmac_aes128", cmac_aes128)
        if encryption_type is not None:
            pulumi.set(__self__, "encryption_type", encryption_type)
        if hmac_sha1 is not None:
            pulumi.set(__self__, "hmac_sha1", hmac_sha1)
        if hmac_sha2256 is not None:
            pulumi.set(__self__, "hmac_sha2256", hmac_sha2256)
        if md5 is not None:
            pulumi.set(__self__, "md5", md5)
        if sha1 is not None:
            pulumi.set(__self__, "sha1", sha1)
        if sha2 is not None:
            pulumi.set(__self__, "sha2", sha2)

    @property
    @pulumi.getter
    def number(self) -> pulumi.Input[int]:
        return pulumi.get(self, "number")

    @number.setter
    def number(self, value: pulumi.Input[int]):
        pulumi.set(self, "number", value)

    @property
    @pulumi.getter(name="cmacAes128")
    def cmac_aes128(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cmac_aes128")

    @cmac_aes128.setter
    def cmac_aes128(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cmac_aes128", value)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "encryption_type")

    @encryption_type.setter
    def encryption_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "encryption_type", value)

    @property
    @pulumi.getter(name="hmacSha1")
    def hmac_sha1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hmac_sha1")

    @hmac_sha1.setter
    def hmac_sha1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hmac_sha1", value)

    @property
    @pulumi.getter(name="hmacSha2256")
    def hmac_sha2256(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hmac_sha2256")

    @hmac_sha2256.setter
    def hmac_sha2256(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hmac_sha2256", value)

    @property
    @pulumi.getter
    def md5(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "md5")

    @md5.setter
    def md5(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "md5", value)

    @property
    @pulumi.getter
    def sha1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sha1")

    @sha1.setter
    def sha1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sha1", value)

    @property
    @pulumi.getter
    def sha2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sha2")

    @sha2.setter
    def sha2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sha2", value)


@pulumi.input_type
class NtpPeerArgs:
    def __init__(__self__, *,
                 ip_address: pulumi.Input[str],
                 key: Optional[pulumi.Input[int]] = None,
                 prefer: Optional[pulumi.Input[bool]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "ip_address", ip_address)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if prefer is not None:
            pulumi.set(__self__, "prefer", prefer)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def prefer(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "prefer")

    @prefer.setter
    def prefer(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prefer", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class NtpPeerVrfArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 peers: Optional[pulumi.Input[Sequence[pulumi.Input['NtpPeerVrfPeerArgs']]]] = None):
        pulumi.set(__self__, "name", name)
        if peers is not None:
            pulumi.set(__self__, "peers", peers)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def peers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NtpPeerVrfPeerArgs']]]]:
        return pulumi.get(self, "peers")

    @peers.setter
    def peers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NtpPeerVrfPeerArgs']]]]):
        pulumi.set(self, "peers", value)


@pulumi.input_type
class NtpPeerVrfPeerArgs:
    def __init__(__self__, *,
                 ip_address: pulumi.Input[str],
                 key: Optional[pulumi.Input[int]] = None,
                 prefer: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "ip_address", ip_address)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if prefer is not None:
            pulumi.set(__self__, "prefer", prefer)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def prefer(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "prefer")

    @prefer.setter
    def prefer(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prefer", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class NtpServerArgs:
    def __init__(__self__, *,
                 ip_address: pulumi.Input[str],
                 key: Optional[pulumi.Input[int]] = None,
                 prefer: Optional[pulumi.Input[bool]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "ip_address", ip_address)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if prefer is not None:
            pulumi.set(__self__, "prefer", prefer)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def prefer(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "prefer")

    @prefer.setter
    def prefer(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prefer", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class NtpServerVrfArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input['NtpServerVrfServerArgs']]]] = None):
        pulumi.set(__self__, "name", name)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NtpServerVrfServerArgs']]]]:
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NtpServerVrfServerArgs']]]]):
        pulumi.set(self, "servers", value)


@pulumi.input_type
class NtpServerVrfServerArgs:
    def __init__(__self__, *,
                 ip_address: pulumi.Input[str],
                 key: Optional[pulumi.Input[int]] = None,
                 prefer: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "ip_address", ip_address)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if prefer is not None:
            pulumi.set(__self__, "prefer", prefer)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def prefer(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "prefer")

    @prefer.setter
    def prefer(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "prefer", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class OspfAreaArgs:
    def __init__(__self__, *,
                 area_id: pulumi.Input[str],
                 authentication_message_digest: Optional[pulumi.Input[bool]] = None,
                 nssa: Optional[pulumi.Input[bool]] = None,
                 nssa_default_information_originate: Optional[pulumi.Input[bool]] = None,
                 nssa_default_information_originate_metric: Optional[pulumi.Input[int]] = None,
                 nssa_default_information_originate_metric_type: Optional[pulumi.Input[int]] = None,
                 nssa_no_redistribution: Optional[pulumi.Input[bool]] = None,
                 nssa_no_summary: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "area_id", area_id)
        if authentication_message_digest is not None:
            pulumi.set(__self__, "authentication_message_digest", authentication_message_digest)
        if nssa is not None:
            pulumi.set(__self__, "nssa", nssa)
        if nssa_default_information_originate is not None:
            pulumi.set(__self__, "nssa_default_information_originate", nssa_default_information_originate)
        if nssa_default_information_originate_metric is not None:
            pulumi.set(__self__, "nssa_default_information_originate_metric", nssa_default_information_originate_metric)
        if nssa_default_information_originate_metric_type is not None:
            pulumi.set(__self__, "nssa_default_information_originate_metric_type", nssa_default_information_originate_metric_type)
        if nssa_no_redistribution is not None:
            pulumi.set(__self__, "nssa_no_redistribution", nssa_no_redistribution)
        if nssa_no_summary is not None:
            pulumi.set(__self__, "nssa_no_summary", nssa_no_summary)

    @property
    @pulumi.getter(name="areaId")
    def area_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "area_id")

    @area_id.setter
    def area_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "area_id", value)

    @property
    @pulumi.getter(name="authenticationMessageDigest")
    def authentication_message_digest(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "authentication_message_digest")

    @authentication_message_digest.setter
    def authentication_message_digest(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authentication_message_digest", value)

    @property
    @pulumi.getter
    def nssa(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "nssa")

    @nssa.setter
    def nssa(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "nssa", value)

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginate")
    def nssa_default_information_originate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "nssa_default_information_originate")

    @nssa_default_information_originate.setter
    def nssa_default_information_originate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "nssa_default_information_originate", value)

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetric")
    def nssa_default_information_originate_metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "nssa_default_information_originate_metric")

    @nssa_default_information_originate_metric.setter
    def nssa_default_information_originate_metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nssa_default_information_originate_metric", value)

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetricType")
    def nssa_default_information_originate_metric_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "nssa_default_information_originate_metric_type")

    @nssa_default_information_originate_metric_type.setter
    def nssa_default_information_originate_metric_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nssa_default_information_originate_metric_type", value)

    @property
    @pulumi.getter(name="nssaNoRedistribution")
    def nssa_no_redistribution(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "nssa_no_redistribution")

    @nssa_no_redistribution.setter
    def nssa_no_redistribution(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "nssa_no_redistribution", value)

    @property
    @pulumi.getter(name="nssaNoSummary")
    def nssa_no_summary(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "nssa_no_summary")

    @nssa_no_summary.setter
    def nssa_no_summary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "nssa_no_summary", value)


@pulumi.input_type
class OspfNeighborArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[str],
                 cost: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "ip", ip)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class OspfNetworkArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[str],
                 area: Optional[pulumi.Input[str]] = None,
                 wildcard: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ip", ip)
        if area is not None:
            pulumi.set(__self__, "area", area)
        if wildcard is not None:
            pulumi.set(__self__, "wildcard", wildcard)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def area(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "area")

    @area.setter
    def area(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "area", value)

    @property
    @pulumi.getter
    def wildcard(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wildcard")

    @wildcard.setter
    def wildcard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wildcard", value)


@pulumi.input_type
class OspfSummaryAddressArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[str],
                 mask: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ip", ip)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mask")

    @mask.setter
    def mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mask", value)


@pulumi.input_type
class OspfVrfAreaArgs:
    def __init__(__self__, *,
                 area_id: pulumi.Input[str],
                 authentication_message_digest: Optional[pulumi.Input[bool]] = None,
                 nssa: Optional[pulumi.Input[bool]] = None,
                 nssa_default_information_originate: Optional[pulumi.Input[bool]] = None,
                 nssa_default_information_originate_metric: Optional[pulumi.Input[int]] = None,
                 nssa_default_information_originate_metric_type: Optional[pulumi.Input[int]] = None,
                 nssa_no_redistribution: Optional[pulumi.Input[bool]] = None,
                 nssa_no_summary: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "area_id", area_id)
        if authentication_message_digest is not None:
            pulumi.set(__self__, "authentication_message_digest", authentication_message_digest)
        if nssa is not None:
            pulumi.set(__self__, "nssa", nssa)
        if nssa_default_information_originate is not None:
            pulumi.set(__self__, "nssa_default_information_originate", nssa_default_information_originate)
        if nssa_default_information_originate_metric is not None:
            pulumi.set(__self__, "nssa_default_information_originate_metric", nssa_default_information_originate_metric)
        if nssa_default_information_originate_metric_type is not None:
            pulumi.set(__self__, "nssa_default_information_originate_metric_type", nssa_default_information_originate_metric_type)
        if nssa_no_redistribution is not None:
            pulumi.set(__self__, "nssa_no_redistribution", nssa_no_redistribution)
        if nssa_no_summary is not None:
            pulumi.set(__self__, "nssa_no_summary", nssa_no_summary)

    @property
    @pulumi.getter(name="areaId")
    def area_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "area_id")

    @area_id.setter
    def area_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "area_id", value)

    @property
    @pulumi.getter(name="authenticationMessageDigest")
    def authentication_message_digest(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "authentication_message_digest")

    @authentication_message_digest.setter
    def authentication_message_digest(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authentication_message_digest", value)

    @property
    @pulumi.getter
    def nssa(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "nssa")

    @nssa.setter
    def nssa(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "nssa", value)

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginate")
    def nssa_default_information_originate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "nssa_default_information_originate")

    @nssa_default_information_originate.setter
    def nssa_default_information_originate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "nssa_default_information_originate", value)

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetric")
    def nssa_default_information_originate_metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "nssa_default_information_originate_metric")

    @nssa_default_information_originate_metric.setter
    def nssa_default_information_originate_metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nssa_default_information_originate_metric", value)

    @property
    @pulumi.getter(name="nssaDefaultInformationOriginateMetricType")
    def nssa_default_information_originate_metric_type(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "nssa_default_information_originate_metric_type")

    @nssa_default_information_originate_metric_type.setter
    def nssa_default_information_originate_metric_type(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nssa_default_information_originate_metric_type", value)

    @property
    @pulumi.getter(name="nssaNoRedistribution")
    def nssa_no_redistribution(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "nssa_no_redistribution")

    @nssa_no_redistribution.setter
    def nssa_no_redistribution(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "nssa_no_redistribution", value)

    @property
    @pulumi.getter(name="nssaNoSummary")
    def nssa_no_summary(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "nssa_no_summary")

    @nssa_no_summary.setter
    def nssa_no_summary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "nssa_no_summary", value)


@pulumi.input_type
class OspfVrfNeighborArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[str],
                 cost: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "ip", ip)
        if cost is not None:
            pulumi.set(__self__, "cost", cost)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def cost(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cost")

    @cost.setter
    def cost(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cost", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class OspfVrfNetworkArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[str],
                 area: Optional[pulumi.Input[str]] = None,
                 wildcard: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ip", ip)
        if area is not None:
            pulumi.set(__self__, "area", area)
        if wildcard is not None:
            pulumi.set(__self__, "wildcard", wildcard)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def area(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "area")

    @area.setter
    def area(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "area", value)

    @property
    @pulumi.getter
    def wildcard(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "wildcard")

    @wildcard.setter
    def wildcard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wildcard", value)


@pulumi.input_type
class OspfVrfSummaryAddressArgs:
    def __init__(__self__, *,
                 ip: pulumi.Input[str],
                 mask: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ip", ip)
        if mask is not None:
            pulumi.set(__self__, "mask", mask)

    @property
    @pulumi.getter
    def ip(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def mask(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mask")

    @mask.setter
    def mask(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mask", value)


@pulumi.input_type
class PimRpAddressArgs:
    def __init__(__self__, *,
                 access_list: pulumi.Input[str],
                 bidir: Optional[pulumi.Input[bool]] = None,
                 override: Optional[pulumi.Input[bool]] = None,
                 rp_address: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_list", access_list)
        if bidir is not None:
            pulumi.set(__self__, "bidir", bidir)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if rp_address is not None:
            pulumi.set(__self__, "rp_address", rp_address)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_list")

    @access_list.setter
    def access_list(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_list", value)

    @property
    @pulumi.getter
    def bidir(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "bidir")

    @bidir.setter
    def bidir(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bidir", value)

    @property
    @pulumi.getter
    def override(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "override")

    @override.setter
    def override(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "override", value)

    @property
    @pulumi.getter(name="rpAddress")
    def rp_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rp_address")

    @rp_address.setter
    def rp_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rp_address", value)


@pulumi.input_type
class PimRpCandidateArgs:
    def __init__(__self__, *,
                 interface: pulumi.Input[str],
                 bidir: Optional[pulumi.Input[bool]] = None,
                 group_list: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "interface", interface)
        if bidir is not None:
            pulumi.set(__self__, "bidir", bidir)
        if group_list is not None:
            pulumi.set(__self__, "group_list", group_list)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Input[str]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def bidir(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "bidir")

    @bidir.setter
    def bidir(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bidir", value)

    @property
    @pulumi.getter(name="groupList")
    def group_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_list")

    @group_list.setter
    def group_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_list", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class PimVrfRpAddressArgs:
    def __init__(__self__, *,
                 access_list: pulumi.Input[str],
                 bidir: Optional[pulumi.Input[bool]] = None,
                 override: Optional[pulumi.Input[bool]] = None,
                 rp_address: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_list", access_list)
        if bidir is not None:
            pulumi.set(__self__, "bidir", bidir)
        if override is not None:
            pulumi.set(__self__, "override", override)
        if rp_address is not None:
            pulumi.set(__self__, "rp_address", rp_address)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_list")

    @access_list.setter
    def access_list(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_list", value)

    @property
    @pulumi.getter
    def bidir(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "bidir")

    @bidir.setter
    def bidir(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bidir", value)

    @property
    @pulumi.getter
    def override(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "override")

    @override.setter
    def override(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "override", value)

    @property
    @pulumi.getter(name="rpAddress")
    def rp_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rp_address")

    @rp_address.setter
    def rp_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rp_address", value)


@pulumi.input_type
class PimVrfRpCandidateArgs:
    def __init__(__self__, *,
                 interface: pulumi.Input[str],
                 bidir: Optional[pulumi.Input[bool]] = None,
                 group_list: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "interface", interface)
        if bidir is not None:
            pulumi.set(__self__, "bidir", bidir)
        if group_list is not None:
            pulumi.set(__self__, "group_list", group_list)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def interface(self) -> pulumi.Input[str]:
        return pulumi.get(self, "interface")

    @interface.setter
    def interface(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface", value)

    @property
    @pulumi.getter
    def bidir(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "bidir")

    @bidir.setter
    def bidir(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bidir", value)

    @property
    @pulumi.getter(name="groupList")
    def group_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_list")

    @group_list.setter
    def group_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_list", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class PolicyMapEventClassNumberArgs:
    def __init__(__self__, *,
                 number: pulumi.Input[int],
                 action_numbers: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyMapEventClassNumberActionNumberArgs']]]] = None,
                 class_: Optional[pulumi.Input[str]] = None,
                 execution_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "number", number)
        if action_numbers is not None:
            pulumi.set(__self__, "action_numbers", action_numbers)
        if class_ is not None:
            pulumi.set(__self__, "class_", class_)
        if execution_type is not None:
            pulumi.set(__self__, "execution_type", execution_type)

    @property
    @pulumi.getter
    def number(self) -> pulumi.Input[int]:
        return pulumi.get(self, "number")

    @number.setter
    def number(self, value: pulumi.Input[int]):
        pulumi.set(self, "number", value)

    @property
    @pulumi.getter(name="actionNumbers")
    def action_numbers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PolicyMapEventClassNumberActionNumberArgs']]]]:
        return pulumi.get(self, "action_numbers")

    @action_numbers.setter
    def action_numbers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PolicyMapEventClassNumberActionNumberArgs']]]]):
        pulumi.set(self, "action_numbers", value)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "class_")

    @class_.setter
    def class_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "class_", value)

    @property
    @pulumi.getter(name="executionType")
    def execution_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "execution_type")

    @execution_type.setter
    def execution_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "execution_type", value)


@pulumi.input_type
class PolicyMapEventClassNumberActionNumberArgs:
    def __init__(__self__, *,
                 number: pulumi.Input[int],
                 activate_service_template_config_service_template: Optional[pulumi.Input[str]] = None,
                 authenticate_using_method: Optional[pulumi.Input[str]] = None,
                 authenticate_using_priority: Optional[pulumi.Input[int]] = None,
                 authenticate_using_retries: Optional[pulumi.Input[int]] = None,
                 authenticate_using_retry_time: Optional[pulumi.Input[int]] = None,
                 authorize: Optional[pulumi.Input[bool]] = None,
                 pause_reauthentication: Optional[pulumi.Input[bool]] = None,
                 terminate_config: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "number", number)
        if activate_service_template_config_service_template is not None:
            pulumi.set(__self__, "activate_service_template_config_service_template", activate_service_template_config_service_template)
        if authenticate_using_method is not None:
            pulumi.set(__self__, "authenticate_using_method", authenticate_using_method)
        if authenticate_using_priority is not None:
            pulumi.set(__self__, "authenticate_using_priority", authenticate_using_priority)
        if authenticate_using_retries is not None:
            pulumi.set(__self__, "authenticate_using_retries", authenticate_using_retries)
        if authenticate_using_retry_time is not None:
            pulumi.set(__self__, "authenticate_using_retry_time", authenticate_using_retry_time)
        if authorize is not None:
            pulumi.set(__self__, "authorize", authorize)
        if pause_reauthentication is not None:
            pulumi.set(__self__, "pause_reauthentication", pause_reauthentication)
        if terminate_config is not None:
            pulumi.set(__self__, "terminate_config", terminate_config)

    @property
    @pulumi.getter
    def number(self) -> pulumi.Input[int]:
        return pulumi.get(self, "number")

    @number.setter
    def number(self, value: pulumi.Input[int]):
        pulumi.set(self, "number", value)

    @property
    @pulumi.getter(name="activateServiceTemplateConfigServiceTemplate")
    def activate_service_template_config_service_template(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "activate_service_template_config_service_template")

    @activate_service_template_config_service_template.setter
    def activate_service_template_config_service_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "activate_service_template_config_service_template", value)

    @property
    @pulumi.getter(name="authenticateUsingMethod")
    def authenticate_using_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authenticate_using_method")

    @authenticate_using_method.setter
    def authenticate_using_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authenticate_using_method", value)

    @property
    @pulumi.getter(name="authenticateUsingPriority")
    def authenticate_using_priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "authenticate_using_priority")

    @authenticate_using_priority.setter
    def authenticate_using_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "authenticate_using_priority", value)

    @property
    @pulumi.getter(name="authenticateUsingRetries")
    def authenticate_using_retries(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "authenticate_using_retries")

    @authenticate_using_retries.setter
    def authenticate_using_retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "authenticate_using_retries", value)

    @property
    @pulumi.getter(name="authenticateUsingRetryTime")
    def authenticate_using_retry_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "authenticate_using_retry_time")

    @authenticate_using_retry_time.setter
    def authenticate_using_retry_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "authenticate_using_retry_time", value)

    @property
    @pulumi.getter
    def authorize(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "authorize")

    @authorize.setter
    def authorize(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authorize", value)

    @property
    @pulumi.getter(name="pauseReauthentication")
    def pause_reauthentication(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pause_reauthentication")

    @pause_reauthentication.setter
    def pause_reauthentication(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pause_reauthentication", value)

    @property
    @pulumi.getter(name="terminateConfig")
    def terminate_config(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "terminate_config")

    @terminate_config.setter
    def terminate_config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "terminate_config", value)


@pulumi.input_type
class PrefixListPrefixArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 seq: pulumi.Input[int],
                 action: Optional[pulumi.Input[str]] = None,
                 ge: Optional[pulumi.Input[int]] = None,
                 ip: Optional[pulumi.Input[str]] = None,
                 le: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "seq", seq)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if ge is not None:
            pulumi.set(__self__, "ge", ge)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if le is not None:
            pulumi.set(__self__, "le", le)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def seq(self) -> pulumi.Input[int]:
        return pulumi.get(self, "seq")

    @seq.setter
    def seq(self, value: pulumi.Input[int]):
        pulumi.set(self, "seq", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def ge(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "ge")

    @ge.setter
    def ge(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ge", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def le(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "le")

    @le.setter
    def le(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "le", value)


@pulumi.input_type
class RadiusServerAttributeArgs:
    def __init__(__self__, *,
                 number: pulumi.Input[str],
                 access_request_include: Optional[pulumi.Input[bool]] = None,
                 attribute31_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['RadiusServerAttributeAttribute31ParameterArgs']]]] = None,
                 send_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "number", number)
        if access_request_include is not None:
            pulumi.set(__self__, "access_request_include", access_request_include)
        if attribute31_parameters is not None:
            pulumi.set(__self__, "attribute31_parameters", attribute31_parameters)
        if send_attributes is not None:
            pulumi.set(__self__, "send_attributes", send_attributes)

    @property
    @pulumi.getter
    def number(self) -> pulumi.Input[str]:
        return pulumi.get(self, "number")

    @number.setter
    def number(self, value: pulumi.Input[str]):
        pulumi.set(self, "number", value)

    @property
    @pulumi.getter(name="accessRequestInclude")
    def access_request_include(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "access_request_include")

    @access_request_include.setter
    def access_request_include(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "access_request_include", value)

    @property
    @pulumi.getter(name="attribute31Parameters")
    def attribute31_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RadiusServerAttributeAttribute31ParameterArgs']]]]:
        return pulumi.get(self, "attribute31_parameters")

    @attribute31_parameters.setter
    def attribute31_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RadiusServerAttributeAttribute31ParameterArgs']]]]):
        pulumi.set(self, "attribute31_parameters", value)

    @property
    @pulumi.getter(name="sendAttributes")
    def send_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "send_attributes")

    @send_attributes.setter
    def send_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "send_attributes", value)


@pulumi.input_type
class RadiusServerAttributeAttribute31ParameterArgs:
    def __init__(__self__, *,
                 calling_station_id: pulumi.Input[str],
                 id_mac_format: Optional[pulumi.Input[str]] = None,
                 id_mac_lu_case: Optional[pulumi.Input[str]] = None,
                 id_send_mac_only: Optional[pulumi.Input[bool]] = None,
                 id_send_nas_port_detail: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "calling_station_id", calling_station_id)
        if id_mac_format is not None:
            pulumi.set(__self__, "id_mac_format", id_mac_format)
        if id_mac_lu_case is not None:
            pulumi.set(__self__, "id_mac_lu_case", id_mac_lu_case)
        if id_send_mac_only is not None:
            pulumi.set(__self__, "id_send_mac_only", id_send_mac_only)
        if id_send_nas_port_detail is not None:
            pulumi.set(__self__, "id_send_nas_port_detail", id_send_nas_port_detail)

    @property
    @pulumi.getter(name="callingStationId")
    def calling_station_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "calling_station_id")

    @calling_station_id.setter
    def calling_station_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "calling_station_id", value)

    @property
    @pulumi.getter(name="idMacFormat")
    def id_mac_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id_mac_format")

    @id_mac_format.setter
    def id_mac_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id_mac_format", value)

    @property
    @pulumi.getter(name="idMacLuCase")
    def id_mac_lu_case(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id_mac_lu_case")

    @id_mac_lu_case.setter
    def id_mac_lu_case(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id_mac_lu_case", value)

    @property
    @pulumi.getter(name="idSendMacOnly")
    def id_send_mac_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "id_send_mac_only")

    @id_send_mac_only.setter
    def id_send_mac_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "id_send_mac_only", value)

    @property
    @pulumi.getter(name="idSendNasPortDetail")
    def id_send_nas_port_detail(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "id_send_nas_port_detail")

    @id_send_nas_port_detail.setter
    def id_send_nas_port_detail(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "id_send_nas_port_detail", value)


@pulumi.input_type
class RestconfListArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 name: pulumi.Input[str],
                 items: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "name", name)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Mapping[str, pulumi.Input[str]]]]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class RouteMapEntryArgs:
    def __init__(__self__, *,
                 seq: pulumi.Input[int],
                 continue_: Optional[pulumi.Input[bool]] = None,
                 continue_sequence_number: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 match_as_paths: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 match_as_paths_legacies: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 match_community_list_exact_match: Optional[pulumi.Input[bool]] = None,
                 match_community_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match_community_lists_legacies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match_extcommunity_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match_extcommunity_lists_legacies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match_ip_address_access_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match_ip_address_prefix_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match_ip_next_hop_access_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match_ip_next_hop_prefix_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match_ipv6_address_access_lists: Optional[pulumi.Input[str]] = None,
                 match_ipv6_address_prefix_lists: Optional[pulumi.Input[str]] = None,
                 match_ipv6_next_hop_access_lists: Optional[pulumi.Input[str]] = None,
                 match_ipv6_next_hop_prefix_lists: Optional[pulumi.Input[str]] = None,
                 match_local_preferences: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 match_local_preferences_legacies: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 match_route_type_external: Optional[pulumi.Input[bool]] = None,
                 match_route_type_external_type1: Optional[pulumi.Input[bool]] = None,
                 match_route_type_external_type2: Optional[pulumi.Input[bool]] = None,
                 match_route_type_internal: Optional[pulumi.Input[bool]] = None,
                 match_route_type_level1: Optional[pulumi.Input[bool]] = None,
                 match_route_type_level2: Optional[pulumi.Input[bool]] = None,
                 match_route_type_local: Optional[pulumi.Input[bool]] = None,
                 match_source_protocol_bgps: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match_source_protocol_connected: Optional[pulumi.Input[bool]] = None,
                 match_source_protocol_eigrps: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match_source_protocol_isis: Optional[pulumi.Input[bool]] = None,
                 match_source_protocol_lisp: Optional[pulumi.Input[bool]] = None,
                 match_source_protocol_ospfs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match_source_protocol_ospfv3s: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match_source_protocol_rip: Optional[pulumi.Input[bool]] = None,
                 match_source_protocol_static: Optional[pulumi.Input[bool]] = None,
                 match_tags: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 match_track: Optional[pulumi.Input[int]] = None,
                 operation: Optional[pulumi.Input[str]] = None,
                 set_as_path_prepend_as: Optional[pulumi.Input[str]] = None,
                 set_as_path_prepend_as_legacy: Optional[pulumi.Input[str]] = None,
                 set_as_path_prepend_last_as: Optional[pulumi.Input[int]] = None,
                 set_as_path_prepend_last_as_legacy: Optional[pulumi.Input[int]] = None,
                 set_as_path_tag: Optional[pulumi.Input[bool]] = None,
                 set_as_path_tag_legacy: Optional[pulumi.Input[bool]] = None,
                 set_communities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set_communities_additive: Optional[pulumi.Input[bool]] = None,
                 set_communities_additive_legacy: Optional[pulumi.Input[bool]] = None,
                 set_communities_legacies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set_community_list_delete: Optional[pulumi.Input[bool]] = None,
                 set_community_list_delete_legacy: Optional[pulumi.Input[bool]] = None,
                 set_community_list_expanded: Optional[pulumi.Input[int]] = None,
                 set_community_list_expanded_legacy: Optional[pulumi.Input[int]] = None,
                 set_community_list_name: Optional[pulumi.Input[str]] = None,
                 set_community_list_name_legacy: Optional[pulumi.Input[str]] = None,
                 set_community_list_standard: Optional[pulumi.Input[int]] = None,
                 set_community_list_standard_legacy: Optional[pulumi.Input[int]] = None,
                 set_community_none: Optional[pulumi.Input[bool]] = None,
                 set_community_none_legacy: Optional[pulumi.Input[bool]] = None,
                 set_default_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set_extcomunity_rt_legacies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set_extcomunity_rts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set_extcomunity_soo: Optional[pulumi.Input[str]] = None,
                 set_extcomunity_soo_legacy: Optional[pulumi.Input[str]] = None,
                 set_extcomunity_vpn_distinguisher: Optional[pulumi.Input[str]] = None,
                 set_extcomunity_vpn_distinguisher_additive: Optional[pulumi.Input[bool]] = None,
                 set_extcomunity_vpn_distinguisher_legacy: Optional[pulumi.Input[str]] = None,
                 set_global: Optional[pulumi.Input[bool]] = None,
                 set_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set_ip_address: Optional[pulumi.Input[str]] = None,
                 set_ip_default_global_next_hop_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set_ip_default_next_hop_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set_ip_global_next_hop_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set_ip_next_hop_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set_ip_next_hop_self: Optional[pulumi.Input[bool]] = None,
                 set_ip_qos_group: Optional[pulumi.Input[int]] = None,
                 set_ipv6_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set_ipv6_default_global_next_hop: Optional[pulumi.Input[str]] = None,
                 set_ipv6_default_next_hops: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set_ipv6_next_hops: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set_level1: Optional[pulumi.Input[bool]] = None,
                 set_level12: Optional[pulumi.Input[bool]] = None,
                 set_level2: Optional[pulumi.Input[bool]] = None,
                 set_local_preference: Optional[pulumi.Input[int]] = None,
                 set_local_preference_legacy: Optional[pulumi.Input[int]] = None,
                 set_metric_change: Optional[pulumi.Input[str]] = None,
                 set_metric_delay: Optional[pulumi.Input[str]] = None,
                 set_metric_loading: Optional[pulumi.Input[int]] = None,
                 set_metric_mtu: Optional[pulumi.Input[int]] = None,
                 set_metric_reliability: Optional[pulumi.Input[int]] = None,
                 set_metric_type: Optional[pulumi.Input[str]] = None,
                 set_metric_value: Optional[pulumi.Input[int]] = None,
                 set_tag: Optional[pulumi.Input[int]] = None,
                 set_vrf: Optional[pulumi.Input[str]] = None,
                 set_weight: Optional[pulumi.Input[int]] = None,
                 set_weight_legacy: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "seq", seq)
        if continue_ is not None:
            pulumi.set(__self__, "continue_", continue_)
        if continue_sequence_number is not None:
            pulumi.set(__self__, "continue_sequence_number", continue_sequence_number)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if match_as_paths is not None:
            pulumi.set(__self__, "match_as_paths", match_as_paths)
        if match_as_paths_legacies is not None:
            pulumi.set(__self__, "match_as_paths_legacies", match_as_paths_legacies)
        if match_community_list_exact_match is not None:
            pulumi.set(__self__, "match_community_list_exact_match", match_community_list_exact_match)
        if match_community_lists is not None:
            pulumi.set(__self__, "match_community_lists", match_community_lists)
        if match_community_lists_legacies is not None:
            pulumi.set(__self__, "match_community_lists_legacies", match_community_lists_legacies)
        if match_extcommunity_lists is not None:
            pulumi.set(__self__, "match_extcommunity_lists", match_extcommunity_lists)
        if match_extcommunity_lists_legacies is not None:
            pulumi.set(__self__, "match_extcommunity_lists_legacies", match_extcommunity_lists_legacies)
        if match_interfaces is not None:
            pulumi.set(__self__, "match_interfaces", match_interfaces)
        if match_ip_address_access_lists is not None:
            pulumi.set(__self__, "match_ip_address_access_lists", match_ip_address_access_lists)
        if match_ip_address_prefix_lists is not None:
            pulumi.set(__self__, "match_ip_address_prefix_lists", match_ip_address_prefix_lists)
        if match_ip_next_hop_access_lists is not None:
            pulumi.set(__self__, "match_ip_next_hop_access_lists", match_ip_next_hop_access_lists)
        if match_ip_next_hop_prefix_lists is not None:
            pulumi.set(__self__, "match_ip_next_hop_prefix_lists", match_ip_next_hop_prefix_lists)
        if match_ipv6_address_access_lists is not None:
            pulumi.set(__self__, "match_ipv6_address_access_lists", match_ipv6_address_access_lists)
        if match_ipv6_address_prefix_lists is not None:
            pulumi.set(__self__, "match_ipv6_address_prefix_lists", match_ipv6_address_prefix_lists)
        if match_ipv6_next_hop_access_lists is not None:
            pulumi.set(__self__, "match_ipv6_next_hop_access_lists", match_ipv6_next_hop_access_lists)
        if match_ipv6_next_hop_prefix_lists is not None:
            pulumi.set(__self__, "match_ipv6_next_hop_prefix_lists", match_ipv6_next_hop_prefix_lists)
        if match_local_preferences is not None:
            pulumi.set(__self__, "match_local_preferences", match_local_preferences)
        if match_local_preferences_legacies is not None:
            pulumi.set(__self__, "match_local_preferences_legacies", match_local_preferences_legacies)
        if match_route_type_external is not None:
            pulumi.set(__self__, "match_route_type_external", match_route_type_external)
        if match_route_type_external_type1 is not None:
            pulumi.set(__self__, "match_route_type_external_type1", match_route_type_external_type1)
        if match_route_type_external_type2 is not None:
            pulumi.set(__self__, "match_route_type_external_type2", match_route_type_external_type2)
        if match_route_type_internal is not None:
            pulumi.set(__self__, "match_route_type_internal", match_route_type_internal)
        if match_route_type_level1 is not None:
            pulumi.set(__self__, "match_route_type_level1", match_route_type_level1)
        if match_route_type_level2 is not None:
            pulumi.set(__self__, "match_route_type_level2", match_route_type_level2)
        if match_route_type_local is not None:
            pulumi.set(__self__, "match_route_type_local", match_route_type_local)
        if match_source_protocol_bgps is not None:
            pulumi.set(__self__, "match_source_protocol_bgps", match_source_protocol_bgps)
        if match_source_protocol_connected is not None:
            pulumi.set(__self__, "match_source_protocol_connected", match_source_protocol_connected)
        if match_source_protocol_eigrps is not None:
            pulumi.set(__self__, "match_source_protocol_eigrps", match_source_protocol_eigrps)
        if match_source_protocol_isis is not None:
            pulumi.set(__self__, "match_source_protocol_isis", match_source_protocol_isis)
        if match_source_protocol_lisp is not None:
            pulumi.set(__self__, "match_source_protocol_lisp", match_source_protocol_lisp)
        if match_source_protocol_ospfs is not None:
            pulumi.set(__self__, "match_source_protocol_ospfs", match_source_protocol_ospfs)
        if match_source_protocol_ospfv3s is not None:
            pulumi.set(__self__, "match_source_protocol_ospfv3s", match_source_protocol_ospfv3s)
        if match_source_protocol_rip is not None:
            pulumi.set(__self__, "match_source_protocol_rip", match_source_protocol_rip)
        if match_source_protocol_static is not None:
            pulumi.set(__self__, "match_source_protocol_static", match_source_protocol_static)
        if match_tags is not None:
            pulumi.set(__self__, "match_tags", match_tags)
        if match_track is not None:
            pulumi.set(__self__, "match_track", match_track)
        if operation is not None:
            pulumi.set(__self__, "operation", operation)
        if set_as_path_prepend_as is not None:
            pulumi.set(__self__, "set_as_path_prepend_as", set_as_path_prepend_as)
        if set_as_path_prepend_as_legacy is not None:
            pulumi.set(__self__, "set_as_path_prepend_as_legacy", set_as_path_prepend_as_legacy)
        if set_as_path_prepend_last_as is not None:
            pulumi.set(__self__, "set_as_path_prepend_last_as", set_as_path_prepend_last_as)
        if set_as_path_prepend_last_as_legacy is not None:
            pulumi.set(__self__, "set_as_path_prepend_last_as_legacy", set_as_path_prepend_last_as_legacy)
        if set_as_path_tag is not None:
            pulumi.set(__self__, "set_as_path_tag", set_as_path_tag)
        if set_as_path_tag_legacy is not None:
            pulumi.set(__self__, "set_as_path_tag_legacy", set_as_path_tag_legacy)
        if set_communities is not None:
            pulumi.set(__self__, "set_communities", set_communities)
        if set_communities_additive is not None:
            pulumi.set(__self__, "set_communities_additive", set_communities_additive)
        if set_communities_additive_legacy is not None:
            pulumi.set(__self__, "set_communities_additive_legacy", set_communities_additive_legacy)
        if set_communities_legacies is not None:
            pulumi.set(__self__, "set_communities_legacies", set_communities_legacies)
        if set_community_list_delete is not None:
            pulumi.set(__self__, "set_community_list_delete", set_community_list_delete)
        if set_community_list_delete_legacy is not None:
            pulumi.set(__self__, "set_community_list_delete_legacy", set_community_list_delete_legacy)
        if set_community_list_expanded is not None:
            pulumi.set(__self__, "set_community_list_expanded", set_community_list_expanded)
        if set_community_list_expanded_legacy is not None:
            pulumi.set(__self__, "set_community_list_expanded_legacy", set_community_list_expanded_legacy)
        if set_community_list_name is not None:
            pulumi.set(__self__, "set_community_list_name", set_community_list_name)
        if set_community_list_name_legacy is not None:
            pulumi.set(__self__, "set_community_list_name_legacy", set_community_list_name_legacy)
        if set_community_list_standard is not None:
            pulumi.set(__self__, "set_community_list_standard", set_community_list_standard)
        if set_community_list_standard_legacy is not None:
            pulumi.set(__self__, "set_community_list_standard_legacy", set_community_list_standard_legacy)
        if set_community_none is not None:
            pulumi.set(__self__, "set_community_none", set_community_none)
        if set_community_none_legacy is not None:
            pulumi.set(__self__, "set_community_none_legacy", set_community_none_legacy)
        if set_default_interfaces is not None:
            pulumi.set(__self__, "set_default_interfaces", set_default_interfaces)
        if set_extcomunity_rt_legacies is not None:
            pulumi.set(__self__, "set_extcomunity_rt_legacies", set_extcomunity_rt_legacies)
        if set_extcomunity_rts is not None:
            pulumi.set(__self__, "set_extcomunity_rts", set_extcomunity_rts)
        if set_extcomunity_soo is not None:
            pulumi.set(__self__, "set_extcomunity_soo", set_extcomunity_soo)
        if set_extcomunity_soo_legacy is not None:
            pulumi.set(__self__, "set_extcomunity_soo_legacy", set_extcomunity_soo_legacy)
        if set_extcomunity_vpn_distinguisher is not None:
            pulumi.set(__self__, "set_extcomunity_vpn_distinguisher", set_extcomunity_vpn_distinguisher)
        if set_extcomunity_vpn_distinguisher_additive is not None:
            pulumi.set(__self__, "set_extcomunity_vpn_distinguisher_additive", set_extcomunity_vpn_distinguisher_additive)
        if set_extcomunity_vpn_distinguisher_legacy is not None:
            pulumi.set(__self__, "set_extcomunity_vpn_distinguisher_legacy", set_extcomunity_vpn_distinguisher_legacy)
        if set_global is not None:
            pulumi.set(__self__, "set_global", set_global)
        if set_interfaces is not None:
            pulumi.set(__self__, "set_interfaces", set_interfaces)
        if set_ip_address is not None:
            pulumi.set(__self__, "set_ip_address", set_ip_address)
        if set_ip_default_global_next_hop_addresses is not None:
            pulumi.set(__self__, "set_ip_default_global_next_hop_addresses", set_ip_default_global_next_hop_addresses)
        if set_ip_default_next_hop_addresses is not None:
            pulumi.set(__self__, "set_ip_default_next_hop_addresses", set_ip_default_next_hop_addresses)
        if set_ip_global_next_hop_addresses is not None:
            pulumi.set(__self__, "set_ip_global_next_hop_addresses", set_ip_global_next_hop_addresses)
        if set_ip_next_hop_addresses is not None:
            pulumi.set(__self__, "set_ip_next_hop_addresses", set_ip_next_hop_addresses)
        if set_ip_next_hop_self is not None:
            pulumi.set(__self__, "set_ip_next_hop_self", set_ip_next_hop_self)
        if set_ip_qos_group is not None:
            pulumi.set(__self__, "set_ip_qos_group", set_ip_qos_group)
        if set_ipv6_addresses is not None:
            pulumi.set(__self__, "set_ipv6_addresses", set_ipv6_addresses)
        if set_ipv6_default_global_next_hop is not None:
            pulumi.set(__self__, "set_ipv6_default_global_next_hop", set_ipv6_default_global_next_hop)
        if set_ipv6_default_next_hops is not None:
            pulumi.set(__self__, "set_ipv6_default_next_hops", set_ipv6_default_next_hops)
        if set_ipv6_next_hops is not None:
            pulumi.set(__self__, "set_ipv6_next_hops", set_ipv6_next_hops)
        if set_level1 is not None:
            pulumi.set(__self__, "set_level1", set_level1)
        if set_level12 is not None:
            pulumi.set(__self__, "set_level12", set_level12)
        if set_level2 is not None:
            pulumi.set(__self__, "set_level2", set_level2)
        if set_local_preference is not None:
            pulumi.set(__self__, "set_local_preference", set_local_preference)
        if set_local_preference_legacy is not None:
            pulumi.set(__self__, "set_local_preference_legacy", set_local_preference_legacy)
        if set_metric_change is not None:
            pulumi.set(__self__, "set_metric_change", set_metric_change)
        if set_metric_delay is not None:
            pulumi.set(__self__, "set_metric_delay", set_metric_delay)
        if set_metric_loading is not None:
            pulumi.set(__self__, "set_metric_loading", set_metric_loading)
        if set_metric_mtu is not None:
            pulumi.set(__self__, "set_metric_mtu", set_metric_mtu)
        if set_metric_reliability is not None:
            pulumi.set(__self__, "set_metric_reliability", set_metric_reliability)
        if set_metric_type is not None:
            pulumi.set(__self__, "set_metric_type", set_metric_type)
        if set_metric_value is not None:
            pulumi.set(__self__, "set_metric_value", set_metric_value)
        if set_tag is not None:
            pulumi.set(__self__, "set_tag", set_tag)
        if set_vrf is not None:
            pulumi.set(__self__, "set_vrf", set_vrf)
        if set_weight is not None:
            pulumi.set(__self__, "set_weight", set_weight)
        if set_weight_legacy is not None:
            pulumi.set(__self__, "set_weight_legacy", set_weight_legacy)

    @property
    @pulumi.getter
    def seq(self) -> pulumi.Input[int]:
        return pulumi.get(self, "seq")

    @seq.setter
    def seq(self, value: pulumi.Input[int]):
        pulumi.set(self, "seq", value)

    @property
    @pulumi.getter(name="continue")
    def continue_(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "continue_")

    @continue_.setter
    def continue_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "continue_", value)

    @property
    @pulumi.getter(name="continueSequenceNumber")
    def continue_sequence_number(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "continue_sequence_number")

    @continue_sequence_number.setter
    def continue_sequence_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "continue_sequence_number", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="matchAsPaths")
    def match_as_paths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "match_as_paths")

    @match_as_paths.setter
    def match_as_paths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "match_as_paths", value)

    @property
    @pulumi.getter(name="matchAsPathsLegacies")
    def match_as_paths_legacies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "match_as_paths_legacies")

    @match_as_paths_legacies.setter
    def match_as_paths_legacies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "match_as_paths_legacies", value)

    @property
    @pulumi.getter(name="matchCommunityListExactMatch")
    def match_community_list_exact_match(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "match_community_list_exact_match")

    @match_community_list_exact_match.setter
    def match_community_list_exact_match(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "match_community_list_exact_match", value)

    @property
    @pulumi.getter(name="matchCommunityLists")
    def match_community_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "match_community_lists")

    @match_community_lists.setter
    def match_community_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "match_community_lists", value)

    @property
    @pulumi.getter(name="matchCommunityListsLegacies")
    def match_community_lists_legacies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "match_community_lists_legacies")

    @match_community_lists_legacies.setter
    def match_community_lists_legacies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "match_community_lists_legacies", value)

    @property
    @pulumi.getter(name="matchExtcommunityLists")
    def match_extcommunity_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "match_extcommunity_lists")

    @match_extcommunity_lists.setter
    def match_extcommunity_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "match_extcommunity_lists", value)

    @property
    @pulumi.getter(name="matchExtcommunityListsLegacies")
    def match_extcommunity_lists_legacies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "match_extcommunity_lists_legacies")

    @match_extcommunity_lists_legacies.setter
    def match_extcommunity_lists_legacies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "match_extcommunity_lists_legacies", value)

    @property
    @pulumi.getter(name="matchInterfaces")
    def match_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "match_interfaces")

    @match_interfaces.setter
    def match_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "match_interfaces", value)

    @property
    @pulumi.getter(name="matchIpAddressAccessLists")
    def match_ip_address_access_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "match_ip_address_access_lists")

    @match_ip_address_access_lists.setter
    def match_ip_address_access_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "match_ip_address_access_lists", value)

    @property
    @pulumi.getter(name="matchIpAddressPrefixLists")
    def match_ip_address_prefix_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "match_ip_address_prefix_lists")

    @match_ip_address_prefix_lists.setter
    def match_ip_address_prefix_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "match_ip_address_prefix_lists", value)

    @property
    @pulumi.getter(name="matchIpNextHopAccessLists")
    def match_ip_next_hop_access_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "match_ip_next_hop_access_lists")

    @match_ip_next_hop_access_lists.setter
    def match_ip_next_hop_access_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "match_ip_next_hop_access_lists", value)

    @property
    @pulumi.getter(name="matchIpNextHopPrefixLists")
    def match_ip_next_hop_prefix_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "match_ip_next_hop_prefix_lists")

    @match_ip_next_hop_prefix_lists.setter
    def match_ip_next_hop_prefix_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "match_ip_next_hop_prefix_lists", value)

    @property
    @pulumi.getter(name="matchIpv6AddressAccessLists")
    def match_ipv6_address_access_lists(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_ipv6_address_access_lists")

    @match_ipv6_address_access_lists.setter
    def match_ipv6_address_access_lists(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_ipv6_address_access_lists", value)

    @property
    @pulumi.getter(name="matchIpv6AddressPrefixLists")
    def match_ipv6_address_prefix_lists(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_ipv6_address_prefix_lists")

    @match_ipv6_address_prefix_lists.setter
    def match_ipv6_address_prefix_lists(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_ipv6_address_prefix_lists", value)

    @property
    @pulumi.getter(name="matchIpv6NextHopAccessLists")
    def match_ipv6_next_hop_access_lists(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_ipv6_next_hop_access_lists")

    @match_ipv6_next_hop_access_lists.setter
    def match_ipv6_next_hop_access_lists(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_ipv6_next_hop_access_lists", value)

    @property
    @pulumi.getter(name="matchIpv6NextHopPrefixLists")
    def match_ipv6_next_hop_prefix_lists(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_ipv6_next_hop_prefix_lists")

    @match_ipv6_next_hop_prefix_lists.setter
    def match_ipv6_next_hop_prefix_lists(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_ipv6_next_hop_prefix_lists", value)

    @property
    @pulumi.getter(name="matchLocalPreferences")
    def match_local_preferences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "match_local_preferences")

    @match_local_preferences.setter
    def match_local_preferences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "match_local_preferences", value)

    @property
    @pulumi.getter(name="matchLocalPreferencesLegacies")
    def match_local_preferences_legacies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "match_local_preferences_legacies")

    @match_local_preferences_legacies.setter
    def match_local_preferences_legacies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "match_local_preferences_legacies", value)

    @property
    @pulumi.getter(name="matchRouteTypeExternal")
    def match_route_type_external(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "match_route_type_external")

    @match_route_type_external.setter
    def match_route_type_external(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "match_route_type_external", value)

    @property
    @pulumi.getter(name="matchRouteTypeExternalType1")
    def match_route_type_external_type1(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "match_route_type_external_type1")

    @match_route_type_external_type1.setter
    def match_route_type_external_type1(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "match_route_type_external_type1", value)

    @property
    @pulumi.getter(name="matchRouteTypeExternalType2")
    def match_route_type_external_type2(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "match_route_type_external_type2")

    @match_route_type_external_type2.setter
    def match_route_type_external_type2(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "match_route_type_external_type2", value)

    @property
    @pulumi.getter(name="matchRouteTypeInternal")
    def match_route_type_internal(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "match_route_type_internal")

    @match_route_type_internal.setter
    def match_route_type_internal(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "match_route_type_internal", value)

    @property
    @pulumi.getter(name="matchRouteTypeLevel1")
    def match_route_type_level1(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "match_route_type_level1")

    @match_route_type_level1.setter
    def match_route_type_level1(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "match_route_type_level1", value)

    @property
    @pulumi.getter(name="matchRouteTypeLevel2")
    def match_route_type_level2(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "match_route_type_level2")

    @match_route_type_level2.setter
    def match_route_type_level2(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "match_route_type_level2", value)

    @property
    @pulumi.getter(name="matchRouteTypeLocal")
    def match_route_type_local(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "match_route_type_local")

    @match_route_type_local.setter
    def match_route_type_local(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "match_route_type_local", value)

    @property
    @pulumi.getter(name="matchSourceProtocolBgps")
    def match_source_protocol_bgps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "match_source_protocol_bgps")

    @match_source_protocol_bgps.setter
    def match_source_protocol_bgps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "match_source_protocol_bgps", value)

    @property
    @pulumi.getter(name="matchSourceProtocolConnected")
    def match_source_protocol_connected(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "match_source_protocol_connected")

    @match_source_protocol_connected.setter
    def match_source_protocol_connected(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "match_source_protocol_connected", value)

    @property
    @pulumi.getter(name="matchSourceProtocolEigrps")
    def match_source_protocol_eigrps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "match_source_protocol_eigrps")

    @match_source_protocol_eigrps.setter
    def match_source_protocol_eigrps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "match_source_protocol_eigrps", value)

    @property
    @pulumi.getter(name="matchSourceProtocolIsis")
    def match_source_protocol_isis(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "match_source_protocol_isis")

    @match_source_protocol_isis.setter
    def match_source_protocol_isis(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "match_source_protocol_isis", value)

    @property
    @pulumi.getter(name="matchSourceProtocolLisp")
    def match_source_protocol_lisp(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "match_source_protocol_lisp")

    @match_source_protocol_lisp.setter
    def match_source_protocol_lisp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "match_source_protocol_lisp", value)

    @property
    @pulumi.getter(name="matchSourceProtocolOspfs")
    def match_source_protocol_ospfs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "match_source_protocol_ospfs")

    @match_source_protocol_ospfs.setter
    def match_source_protocol_ospfs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "match_source_protocol_ospfs", value)

    @property
    @pulumi.getter(name="matchSourceProtocolOspfv3s")
    def match_source_protocol_ospfv3s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "match_source_protocol_ospfv3s")

    @match_source_protocol_ospfv3s.setter
    def match_source_protocol_ospfv3s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "match_source_protocol_ospfv3s", value)

    @property
    @pulumi.getter(name="matchSourceProtocolRip")
    def match_source_protocol_rip(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "match_source_protocol_rip")

    @match_source_protocol_rip.setter
    def match_source_protocol_rip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "match_source_protocol_rip", value)

    @property
    @pulumi.getter(name="matchSourceProtocolStatic")
    def match_source_protocol_static(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "match_source_protocol_static")

    @match_source_protocol_static.setter
    def match_source_protocol_static(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "match_source_protocol_static", value)

    @property
    @pulumi.getter(name="matchTags")
    def match_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "match_tags")

    @match_tags.setter
    def match_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "match_tags", value)

    @property
    @pulumi.getter(name="matchTrack")
    def match_track(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "match_track")

    @match_track.setter
    def match_track(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "match_track", value)

    @property
    @pulumi.getter
    def operation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter(name="setAsPathPrependAs")
    def set_as_path_prepend_as(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "set_as_path_prepend_as")

    @set_as_path_prepend_as.setter
    def set_as_path_prepend_as(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_as_path_prepend_as", value)

    @property
    @pulumi.getter(name="setAsPathPrependAsLegacy")
    def set_as_path_prepend_as_legacy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "set_as_path_prepend_as_legacy")

    @set_as_path_prepend_as_legacy.setter
    def set_as_path_prepend_as_legacy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_as_path_prepend_as_legacy", value)

    @property
    @pulumi.getter(name="setAsPathPrependLastAs")
    def set_as_path_prepend_last_as(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_as_path_prepend_last_as")

    @set_as_path_prepend_last_as.setter
    def set_as_path_prepend_last_as(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_as_path_prepend_last_as", value)

    @property
    @pulumi.getter(name="setAsPathPrependLastAsLegacy")
    def set_as_path_prepend_last_as_legacy(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_as_path_prepend_last_as_legacy")

    @set_as_path_prepend_last_as_legacy.setter
    def set_as_path_prepend_last_as_legacy(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_as_path_prepend_last_as_legacy", value)

    @property
    @pulumi.getter(name="setAsPathTag")
    def set_as_path_tag(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "set_as_path_tag")

    @set_as_path_tag.setter
    def set_as_path_tag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "set_as_path_tag", value)

    @property
    @pulumi.getter(name="setAsPathTagLegacy")
    def set_as_path_tag_legacy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "set_as_path_tag_legacy")

    @set_as_path_tag_legacy.setter
    def set_as_path_tag_legacy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "set_as_path_tag_legacy", value)

    @property
    @pulumi.getter(name="setCommunities")
    def set_communities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "set_communities")

    @set_communities.setter
    def set_communities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "set_communities", value)

    @property
    @pulumi.getter(name="setCommunitiesAdditive")
    def set_communities_additive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "set_communities_additive")

    @set_communities_additive.setter
    def set_communities_additive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "set_communities_additive", value)

    @property
    @pulumi.getter(name="setCommunitiesAdditiveLegacy")
    def set_communities_additive_legacy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "set_communities_additive_legacy")

    @set_communities_additive_legacy.setter
    def set_communities_additive_legacy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "set_communities_additive_legacy", value)

    @property
    @pulumi.getter(name="setCommunitiesLegacies")
    def set_communities_legacies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "set_communities_legacies")

    @set_communities_legacies.setter
    def set_communities_legacies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "set_communities_legacies", value)

    @property
    @pulumi.getter(name="setCommunityListDelete")
    def set_community_list_delete(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "set_community_list_delete")

    @set_community_list_delete.setter
    def set_community_list_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "set_community_list_delete", value)

    @property
    @pulumi.getter(name="setCommunityListDeleteLegacy")
    def set_community_list_delete_legacy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "set_community_list_delete_legacy")

    @set_community_list_delete_legacy.setter
    def set_community_list_delete_legacy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "set_community_list_delete_legacy", value)

    @property
    @pulumi.getter(name="setCommunityListExpanded")
    def set_community_list_expanded(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_community_list_expanded")

    @set_community_list_expanded.setter
    def set_community_list_expanded(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_community_list_expanded", value)

    @property
    @pulumi.getter(name="setCommunityListExpandedLegacy")
    def set_community_list_expanded_legacy(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_community_list_expanded_legacy")

    @set_community_list_expanded_legacy.setter
    def set_community_list_expanded_legacy(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_community_list_expanded_legacy", value)

    @property
    @pulumi.getter(name="setCommunityListName")
    def set_community_list_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "set_community_list_name")

    @set_community_list_name.setter
    def set_community_list_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_community_list_name", value)

    @property
    @pulumi.getter(name="setCommunityListNameLegacy")
    def set_community_list_name_legacy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "set_community_list_name_legacy")

    @set_community_list_name_legacy.setter
    def set_community_list_name_legacy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_community_list_name_legacy", value)

    @property
    @pulumi.getter(name="setCommunityListStandard")
    def set_community_list_standard(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_community_list_standard")

    @set_community_list_standard.setter
    def set_community_list_standard(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_community_list_standard", value)

    @property
    @pulumi.getter(name="setCommunityListStandardLegacy")
    def set_community_list_standard_legacy(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_community_list_standard_legacy")

    @set_community_list_standard_legacy.setter
    def set_community_list_standard_legacy(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_community_list_standard_legacy", value)

    @property
    @pulumi.getter(name="setCommunityNone")
    def set_community_none(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "set_community_none")

    @set_community_none.setter
    def set_community_none(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "set_community_none", value)

    @property
    @pulumi.getter(name="setCommunityNoneLegacy")
    def set_community_none_legacy(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "set_community_none_legacy")

    @set_community_none_legacy.setter
    def set_community_none_legacy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "set_community_none_legacy", value)

    @property
    @pulumi.getter(name="setDefaultInterfaces")
    def set_default_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "set_default_interfaces")

    @set_default_interfaces.setter
    def set_default_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "set_default_interfaces", value)

    @property
    @pulumi.getter(name="setExtcomunityRtLegacies")
    def set_extcomunity_rt_legacies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "set_extcomunity_rt_legacies")

    @set_extcomunity_rt_legacies.setter
    def set_extcomunity_rt_legacies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "set_extcomunity_rt_legacies", value)

    @property
    @pulumi.getter(name="setExtcomunityRts")
    def set_extcomunity_rts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "set_extcomunity_rts")

    @set_extcomunity_rts.setter
    def set_extcomunity_rts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "set_extcomunity_rts", value)

    @property
    @pulumi.getter(name="setExtcomunitySoo")
    def set_extcomunity_soo(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "set_extcomunity_soo")

    @set_extcomunity_soo.setter
    def set_extcomunity_soo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_extcomunity_soo", value)

    @property
    @pulumi.getter(name="setExtcomunitySooLegacy")
    def set_extcomunity_soo_legacy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "set_extcomunity_soo_legacy")

    @set_extcomunity_soo_legacy.setter
    def set_extcomunity_soo_legacy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_extcomunity_soo_legacy", value)

    @property
    @pulumi.getter(name="setExtcomunityVpnDistinguisher")
    def set_extcomunity_vpn_distinguisher(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "set_extcomunity_vpn_distinguisher")

    @set_extcomunity_vpn_distinguisher.setter
    def set_extcomunity_vpn_distinguisher(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_extcomunity_vpn_distinguisher", value)

    @property
    @pulumi.getter(name="setExtcomunityVpnDistinguisherAdditive")
    def set_extcomunity_vpn_distinguisher_additive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "set_extcomunity_vpn_distinguisher_additive")

    @set_extcomunity_vpn_distinguisher_additive.setter
    def set_extcomunity_vpn_distinguisher_additive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "set_extcomunity_vpn_distinguisher_additive", value)

    @property
    @pulumi.getter(name="setExtcomunityVpnDistinguisherLegacy")
    def set_extcomunity_vpn_distinguisher_legacy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "set_extcomunity_vpn_distinguisher_legacy")

    @set_extcomunity_vpn_distinguisher_legacy.setter
    def set_extcomunity_vpn_distinguisher_legacy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_extcomunity_vpn_distinguisher_legacy", value)

    @property
    @pulumi.getter(name="setGlobal")
    def set_global(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "set_global")

    @set_global.setter
    def set_global(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "set_global", value)

    @property
    @pulumi.getter(name="setInterfaces")
    def set_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "set_interfaces")

    @set_interfaces.setter
    def set_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "set_interfaces", value)

    @property
    @pulumi.getter(name="setIpAddress")
    def set_ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "set_ip_address")

    @set_ip_address.setter
    def set_ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_ip_address", value)

    @property
    @pulumi.getter(name="setIpDefaultGlobalNextHopAddresses")
    def set_ip_default_global_next_hop_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "set_ip_default_global_next_hop_addresses")

    @set_ip_default_global_next_hop_addresses.setter
    def set_ip_default_global_next_hop_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "set_ip_default_global_next_hop_addresses", value)

    @property
    @pulumi.getter(name="setIpDefaultNextHopAddresses")
    def set_ip_default_next_hop_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "set_ip_default_next_hop_addresses")

    @set_ip_default_next_hop_addresses.setter
    def set_ip_default_next_hop_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "set_ip_default_next_hop_addresses", value)

    @property
    @pulumi.getter(name="setIpGlobalNextHopAddresses")
    def set_ip_global_next_hop_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "set_ip_global_next_hop_addresses")

    @set_ip_global_next_hop_addresses.setter
    def set_ip_global_next_hop_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "set_ip_global_next_hop_addresses", value)

    @property
    @pulumi.getter(name="setIpNextHopAddresses")
    def set_ip_next_hop_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "set_ip_next_hop_addresses")

    @set_ip_next_hop_addresses.setter
    def set_ip_next_hop_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "set_ip_next_hop_addresses", value)

    @property
    @pulumi.getter(name="setIpNextHopSelf")
    def set_ip_next_hop_self(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "set_ip_next_hop_self")

    @set_ip_next_hop_self.setter
    def set_ip_next_hop_self(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "set_ip_next_hop_self", value)

    @property
    @pulumi.getter(name="setIpQosGroup")
    def set_ip_qos_group(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_ip_qos_group")

    @set_ip_qos_group.setter
    def set_ip_qos_group(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_ip_qos_group", value)

    @property
    @pulumi.getter(name="setIpv6Addresses")
    def set_ipv6_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "set_ipv6_addresses")

    @set_ipv6_addresses.setter
    def set_ipv6_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "set_ipv6_addresses", value)

    @property
    @pulumi.getter(name="setIpv6DefaultGlobalNextHop")
    def set_ipv6_default_global_next_hop(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "set_ipv6_default_global_next_hop")

    @set_ipv6_default_global_next_hop.setter
    def set_ipv6_default_global_next_hop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_ipv6_default_global_next_hop", value)

    @property
    @pulumi.getter(name="setIpv6DefaultNextHops")
    def set_ipv6_default_next_hops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "set_ipv6_default_next_hops")

    @set_ipv6_default_next_hops.setter
    def set_ipv6_default_next_hops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "set_ipv6_default_next_hops", value)

    @property
    @pulumi.getter(name="setIpv6NextHops")
    def set_ipv6_next_hops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "set_ipv6_next_hops")

    @set_ipv6_next_hops.setter
    def set_ipv6_next_hops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "set_ipv6_next_hops", value)

    @property
    @pulumi.getter(name="setLevel1")
    def set_level1(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "set_level1")

    @set_level1.setter
    def set_level1(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "set_level1", value)

    @property
    @pulumi.getter(name="setLevel12")
    def set_level12(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "set_level12")

    @set_level12.setter
    def set_level12(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "set_level12", value)

    @property
    @pulumi.getter(name="setLevel2")
    def set_level2(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "set_level2")

    @set_level2.setter
    def set_level2(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "set_level2", value)

    @property
    @pulumi.getter(name="setLocalPreference")
    def set_local_preference(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_local_preference")

    @set_local_preference.setter
    def set_local_preference(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_local_preference", value)

    @property
    @pulumi.getter(name="setLocalPreferenceLegacy")
    def set_local_preference_legacy(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_local_preference_legacy")

    @set_local_preference_legacy.setter
    def set_local_preference_legacy(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_local_preference_legacy", value)

    @property
    @pulumi.getter(name="setMetricChange")
    def set_metric_change(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "set_metric_change")

    @set_metric_change.setter
    def set_metric_change(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_metric_change", value)

    @property
    @pulumi.getter(name="setMetricDelay")
    def set_metric_delay(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "set_metric_delay")

    @set_metric_delay.setter
    def set_metric_delay(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_metric_delay", value)

    @property
    @pulumi.getter(name="setMetricLoading")
    def set_metric_loading(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_metric_loading")

    @set_metric_loading.setter
    def set_metric_loading(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_metric_loading", value)

    @property
    @pulumi.getter(name="setMetricMtu")
    def set_metric_mtu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_metric_mtu")

    @set_metric_mtu.setter
    def set_metric_mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_metric_mtu", value)

    @property
    @pulumi.getter(name="setMetricReliability")
    def set_metric_reliability(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_metric_reliability")

    @set_metric_reliability.setter
    def set_metric_reliability(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_metric_reliability", value)

    @property
    @pulumi.getter(name="setMetricType")
    def set_metric_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "set_metric_type")

    @set_metric_type.setter
    def set_metric_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_metric_type", value)

    @property
    @pulumi.getter(name="setMetricValue")
    def set_metric_value(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_metric_value")

    @set_metric_value.setter
    def set_metric_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_metric_value", value)

    @property
    @pulumi.getter(name="setTag")
    def set_tag(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_tag")

    @set_tag.setter
    def set_tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_tag", value)

    @property
    @pulumi.getter(name="setVrf")
    def set_vrf(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "set_vrf")

    @set_vrf.setter
    def set_vrf(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "set_vrf", value)

    @property
    @pulumi.getter(name="setWeight")
    def set_weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_weight")

    @set_weight.setter
    def set_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_weight", value)

    @property
    @pulumi.getter(name="setWeightLegacy")
    def set_weight_legacy(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "set_weight_legacy")

    @set_weight_legacy.setter
    def set_weight_legacy(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "set_weight_legacy", value)


@pulumi.input_type
class ServiceTemplateAccessGroupArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceTemplateInterfaceTemplateArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceTemplateTagArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SnmpServerContextArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SnmpServerGroupV3SecurityArgs:
    def __init__(__self__, *,
                 security_level: pulumi.Input[str],
                 access_acl_name: Optional[pulumi.Input[str]] = None,
                 access_ipv6_acl: Optional[pulumi.Input[str]] = None,
                 access_standard_acl: Optional[pulumi.Input[int]] = None,
                 context_node: Optional[pulumi.Input[str]] = None,
                 match_node: Optional[pulumi.Input[str]] = None,
                 notify_node: Optional[pulumi.Input[str]] = None,
                 read_node: Optional[pulumi.Input[str]] = None,
                 write_node: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "security_level", security_level)
        if access_acl_name is not None:
            pulumi.set(__self__, "access_acl_name", access_acl_name)
        if access_ipv6_acl is not None:
            pulumi.set(__self__, "access_ipv6_acl", access_ipv6_acl)
        if access_standard_acl is not None:
            pulumi.set(__self__, "access_standard_acl", access_standard_acl)
        if context_node is not None:
            pulumi.set(__self__, "context_node", context_node)
        if match_node is not None:
            pulumi.set(__self__, "match_node", match_node)
        if notify_node is not None:
            pulumi.set(__self__, "notify_node", notify_node)
        if read_node is not None:
            pulumi.set(__self__, "read_node", read_node)
        if write_node is not None:
            pulumi.set(__self__, "write_node", write_node)

    @property
    @pulumi.getter(name="securityLevel")
    def security_level(self) -> pulumi.Input[str]:
        return pulumi.get(self, "security_level")

    @security_level.setter
    def security_level(self, value: pulumi.Input[str]):
        pulumi.set(self, "security_level", value)

    @property
    @pulumi.getter(name="accessAclName")
    def access_acl_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_acl_name")

    @access_acl_name.setter
    def access_acl_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_acl_name", value)

    @property
    @pulumi.getter(name="accessIpv6Acl")
    def access_ipv6_acl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_ipv6_acl")

    @access_ipv6_acl.setter
    def access_ipv6_acl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_ipv6_acl", value)

    @property
    @pulumi.getter(name="accessStandardAcl")
    def access_standard_acl(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "access_standard_acl")

    @access_standard_acl.setter
    def access_standard_acl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "access_standard_acl", value)

    @property
    @pulumi.getter(name="contextNode")
    def context_node(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "context_node")

    @context_node.setter
    def context_node(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "context_node", value)

    @property
    @pulumi.getter(name="matchNode")
    def match_node(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_node")

    @match_node.setter
    def match_node(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_node", value)

    @property
    @pulumi.getter(name="notifyNode")
    def notify_node(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notify_node")

    @notify_node.setter
    def notify_node(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notify_node", value)

    @property
    @pulumi.getter(name="readNode")
    def read_node(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "read_node")

    @read_node.setter
    def read_node(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_node", value)

    @property
    @pulumi.getter(name="writeNode")
    def write_node(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "write_node")

    @write_node.setter
    def write_node(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "write_node", value)


@pulumi.input_type
class SnmpServerHostArgs:
    def __init__(__self__, *,
                 ip_address: pulumi.Input[str],
                 community_or_user: Optional[pulumi.Input[str]] = None,
                 encryption: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ip_address", ip_address)
        if community_or_user is not None:
            pulumi.set(__self__, "community_or_user", community_or_user)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="communityOrUser")
    def community_or_user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "community_or_user")

    @community_or_user.setter
    def community_or_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "community_or_user", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class SnmpServerSnmpCommunityArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 access_list_name: Optional[pulumi.Input[str]] = None,
                 ipv6: Optional[pulumi.Input[str]] = None,
                 permission: Optional[pulumi.Input[str]] = None,
                 view: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        if access_list_name is not None:
            pulumi.set(__self__, "access_list_name", access_list_name)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if permission is not None:
            pulumi.set(__self__, "permission", permission)
        if view is not None:
            pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="accessListName")
    def access_list_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_list_name")

    @access_list_name.setter
    def access_list_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_list_name", value)

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ipv6")

    @ipv6.setter
    def ipv6(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv6", value)

    @property
    @pulumi.getter
    def permission(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permission", value)

    @property
    @pulumi.getter
    def view(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "view")

    @view.setter
    def view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "view", value)


@pulumi.input_type
class SnmpServerViewArgs:
    def __init__(__self__, *,
                 mib: pulumi.Input[str],
                 name: pulumi.Input[str],
                 inc_exl: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mib", mib)
        pulumi.set(__self__, "name", name)
        if inc_exl is not None:
            pulumi.set(__self__, "inc_exl", inc_exl)

    @property
    @pulumi.getter
    def mib(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mib")

    @mib.setter
    def mib(self, value: pulumi.Input[str]):
        pulumi.set(self, "mib", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="incExl")
    def inc_exl(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "inc_exl")

    @inc_exl.setter
    def inc_exl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inc_exl", value)


@pulumi.input_type
class StaticRouteNextHopArgs:
    def __init__(__self__, *,
                 next_hop: pulumi.Input[str],
                 global_: Optional[pulumi.Input[bool]] = None,
                 metric: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permanent: Optional[pulumi.Input[bool]] = None,
                 tag: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "next_hop", next_hop)
        if global_ is not None:
            pulumi.set(__self__, "global_", global_)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permanent is not None:
            pulumi.set(__self__, "permanent", permanent)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> pulumi.Input[str]:
        return pulumi.get(self, "next_hop")

    @next_hop.setter
    def next_hop(self, value: pulumi.Input[str]):
        pulumi.set(self, "next_hop", value)

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "global_")

    @global_.setter
    def global_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "global_", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def permanent(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "permanent")

    @permanent.setter
    def permanent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "permanent", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class StaticRouteVrfRouteArgs:
    def __init__(__self__, *,
                 mask: pulumi.Input[str],
                 prefix: pulumi.Input[str],
                 next_hops: Optional[pulumi.Input[Sequence[pulumi.Input['StaticRouteVrfRouteNextHopArgs']]]] = None):
        pulumi.set(__self__, "mask", mask)
        pulumi.set(__self__, "prefix", prefix)
        if next_hops is not None:
            pulumi.set(__self__, "next_hops", next_hops)

    @property
    @pulumi.getter
    def mask(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mask")

    @mask.setter
    def mask(self, value: pulumi.Input[str]):
        pulumi.set(self, "mask", value)

    @property
    @pulumi.getter
    def prefix(self) -> pulumi.Input[str]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="nextHops")
    def next_hops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StaticRouteVrfRouteNextHopArgs']]]]:
        return pulumi.get(self, "next_hops")

    @next_hops.setter
    def next_hops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StaticRouteVrfRouteNextHopArgs']]]]):
        pulumi.set(self, "next_hops", value)


@pulumi.input_type
class StaticRouteVrfRouteNextHopArgs:
    def __init__(__self__, *,
                 next_hop: pulumi.Input[str],
                 global_: Optional[pulumi.Input[bool]] = None,
                 metric: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permanent: Optional[pulumi.Input[bool]] = None,
                 tag: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "next_hop", next_hop)
        if global_ is not None:
            pulumi.set(__self__, "global_", global_)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permanent is not None:
            pulumi.set(__self__, "permanent", permanent)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="nextHop")
    def next_hop(self) -> pulumi.Input[str]:
        return pulumi.get(self, "next_hop")

    @next_hop.setter
    def next_hop(self, value: pulumi.Input[str]):
        pulumi.set(self, "next_hop", value)

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "global_")

    @global_.setter
    def global_(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "global_", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def permanent(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "permanent")

    @permanent.setter
    def permanent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "permanent", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class SystemMulticastRoutingVrfArgs:
    def __init__(__self__, *,
                 vrf: pulumi.Input[str],
                 distributed: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "vrf", vrf)
        if distributed is not None:
            pulumi.set(__self__, "distributed", distributed)

    @property
    @pulumi.getter
    def vrf(self) -> pulumi.Input[str]:
        return pulumi.get(self, "vrf")

    @vrf.setter
    def vrf(self, value: pulumi.Input[str]):
        pulumi.set(self, "vrf", value)

    @property
    @pulumi.getter
    def distributed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "distributed")

    @distributed.setter
    def distributed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "distributed", value)


@pulumi.input_type
class TemplateDeviceTrackingAttachPolicyArgs:
    def __init__(__self__, *,
                 policy_name: pulumi.Input[str],
                 vlan_range: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "policy_name", policy_name)
        if vlan_range is not None:
            pulumi.set(__self__, "vlan_range", vlan_range)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_name", value)

    @property
    @pulumi.getter(name="vlanRange")
    def vlan_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vlan_range")

    @vlan_range.setter
    def vlan_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vlan_range", value)


@pulumi.input_type
class TemplateIpAccessGroupArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input[str],
                 access_list: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "direction", direction)
        if access_list is not None:
            pulumi.set(__self__, "access_list", access_list)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input[str]:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input[str]):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="accessList")
    def access_list(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_list")

    @access_list.setter
    def access_list(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_list", value)


@pulumi.input_type
class TemplateSwitchportPortSecurityMaximumRangeArgs:
    def __init__(__self__, *,
                 range: pulumi.Input[int],
                 vlan: Optional[pulumi.Input[bool]] = None,
                 vlan_access: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "range", range)
        if vlan is not None:
            pulumi.set(__self__, "vlan", vlan)
        if vlan_access is not None:
            pulumi.set(__self__, "vlan_access", vlan_access)

    @property
    @pulumi.getter
    def range(self) -> pulumi.Input[int]:
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: pulumi.Input[int]):
        pulumi.set(self, "range", value)

    @property
    @pulumi.getter
    def vlan(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "vlan")

    @vlan.setter
    def vlan(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vlan", value)

    @property
    @pulumi.getter(name="vlanAccess")
    def vlan_access(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "vlan_access")

    @vlan_access.setter
    def vlan_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "vlan_access", value)


@pulumi.input_type
class VrfIpv4RouteTargetExportArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VrfIpv4RouteTargetExportStitchingArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 stitching: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "value", value)
        if stitching is not None:
            pulumi.set(__self__, "stitching", stitching)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def stitching(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "stitching")

    @stitching.setter
    def stitching(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stitching", value)


@pulumi.input_type
class VrfIpv4RouteTargetImportArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VrfIpv4RouteTargetImportStitchingArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 stitching: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "value", value)
        if stitching is not None:
            pulumi.set(__self__, "stitching", stitching)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def stitching(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "stitching")

    @stitching.setter
    def stitching(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stitching", value)


@pulumi.input_type
class VrfIpv6RouteTargetExportArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VrfIpv6RouteTargetExportStitchingArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 stitching: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "value", value)
        if stitching is not None:
            pulumi.set(__self__, "stitching", stitching)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def stitching(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "stitching")

    @stitching.setter
    def stitching(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stitching", value)


@pulumi.input_type
class VrfIpv6RouteTargetImportArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VrfIpv6RouteTargetImportStitchingArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 stitching: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "value", value)
        if stitching is not None:
            pulumi.set(__self__, "stitching", stitching)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def stitching(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "stitching")

    @stitching.setter
    def stitching(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stitching", value)


@pulumi.input_type
class VrfRouteTargetExportArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 stitching: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "value", value)
        if stitching is not None:
            pulumi.set(__self__, "stitching", stitching)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def stitching(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "stitching")

    @stitching.setter
    def stitching(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stitching", value)


@pulumi.input_type
class VrfRouteTargetImportArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 stitching: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "value", value)
        if stitching is not None:
            pulumi.set(__self__, "stitching", stitching)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def stitching(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "stitching")

    @stitching.setter
    def stitching(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stitching", value)


