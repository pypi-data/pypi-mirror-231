# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RadiusArgs', 'Radius']

@pulumi.input_type
class RadiusArgs:
    def __init__(__self__, *,
                 accounting_port: Optional[pulumi.Input[int]] = None,
                 authentication_port: Optional[pulumi.Input[int]] = None,
                 automate_tester_ignore_acct_port: Optional[pulumi.Input[bool]] = None,
                 automate_tester_probe_on_config: Optional[pulumi.Input[bool]] = None,
                 automate_tester_username: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 ipv4_address: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pac_key: Optional[pulumi.Input[str]] = None,
                 pac_key_encryption: Optional[pulumi.Input[str]] = None,
                 retransmit: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Radius resource.
        :param pulumi.Input[int] accounting_port: UDP port for RADIUS accounting server (default is 1813) - Range: `0`-`65534`
        :param pulumi.Input[int] authentication_port: UDP port for RADIUS authentication server (default is 1812) - Range: `0`-`65534`
        :param pulumi.Input[bool] automate_tester_ignore_acct_port: Do not test accounting ports of the servers.
        :param pulumi.Input[bool] automate_tester_probe_on_config: Send a packet to verify the server status
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] ipv4_address: IPv4 address or Hostname for radius server
        :param pulumi.Input[str] name: Name for the radius server configuration
        :param pulumi.Input[str] pac_key: The UNENCRYPTED (cleartext) server key
        :param pulumi.Input[str] pac_key_encryption: 0 - Specifies an UNENCRYPTED key will follow 6 - Specifies an ENCRYPTED key will follow 7 - Specifies HIDDEN key will
               follow - Choices: `0`, `6`, `7`
        :param pulumi.Input[int] retransmit: Number of retries to active server (overrides default) - Range: `0`-`100`
        :param pulumi.Input[int] timeout: Time to wait for a RADIUS server to reply (overrides default) - Range: `1`-`1000`
        """
        if accounting_port is not None:
            pulumi.set(__self__, "accounting_port", accounting_port)
        if authentication_port is not None:
            pulumi.set(__self__, "authentication_port", authentication_port)
        if automate_tester_ignore_acct_port is not None:
            pulumi.set(__self__, "automate_tester_ignore_acct_port", automate_tester_ignore_acct_port)
        if automate_tester_probe_on_config is not None:
            pulumi.set(__self__, "automate_tester_probe_on_config", automate_tester_probe_on_config)
        if automate_tester_username is not None:
            pulumi.set(__self__, "automate_tester_username", automate_tester_username)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pac_key is not None:
            pulumi.set(__self__, "pac_key", pac_key)
        if pac_key_encryption is not None:
            pulumi.set(__self__, "pac_key_encryption", pac_key_encryption)
        if retransmit is not None:
            pulumi.set(__self__, "retransmit", retransmit)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="accountingPort")
    def accounting_port(self) -> Optional[pulumi.Input[int]]:
        """
        UDP port for RADIUS accounting server (default is 1813) - Range: `0`-`65534`
        """
        return pulumi.get(self, "accounting_port")

    @accounting_port.setter
    def accounting_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "accounting_port", value)

    @property
    @pulumi.getter(name="authenticationPort")
    def authentication_port(self) -> Optional[pulumi.Input[int]]:
        """
        UDP port for RADIUS authentication server (default is 1812) - Range: `0`-`65534`
        """
        return pulumi.get(self, "authentication_port")

    @authentication_port.setter
    def authentication_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "authentication_port", value)

    @property
    @pulumi.getter(name="automateTesterIgnoreAcctPort")
    def automate_tester_ignore_acct_port(self) -> Optional[pulumi.Input[bool]]:
        """
        Do not test accounting ports of the servers.
        """
        return pulumi.get(self, "automate_tester_ignore_acct_port")

    @automate_tester_ignore_acct_port.setter
    def automate_tester_ignore_acct_port(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "automate_tester_ignore_acct_port", value)

    @property
    @pulumi.getter(name="automateTesterProbeOnConfig")
    def automate_tester_probe_on_config(self) -> Optional[pulumi.Input[bool]]:
        """
        Send a packet to verify the server status
        """
        return pulumi.get(self, "automate_tester_probe_on_config")

    @automate_tester_probe_on_config.setter
    def automate_tester_probe_on_config(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "automate_tester_probe_on_config", value)

    @property
    @pulumi.getter(name="automateTesterUsername")
    def automate_tester_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "automate_tester_username")

    @automate_tester_username.setter
    def automate_tester_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "automate_tester_username", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address or Hostname for radius server
        """
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_address", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name for the radius server configuration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pacKey")
    def pac_key(self) -> Optional[pulumi.Input[str]]:
        """
        The UNENCRYPTED (cleartext) server key
        """
        return pulumi.get(self, "pac_key")

    @pac_key.setter
    def pac_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_key", value)

    @property
    @pulumi.getter(name="pacKeyEncryption")
    def pac_key_encryption(self) -> Optional[pulumi.Input[str]]:
        """
        0 - Specifies an UNENCRYPTED key will follow 6 - Specifies an ENCRYPTED key will follow 7 - Specifies HIDDEN key will
        follow - Choices: `0`, `6`, `7`
        """
        return pulumi.get(self, "pac_key_encryption")

    @pac_key_encryption.setter
    def pac_key_encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_key_encryption", value)

    @property
    @pulumi.getter
    def retransmit(self) -> Optional[pulumi.Input[int]]:
        """
        Number of retries to active server (overrides default) - Range: `0`-`100`
        """
        return pulumi.get(self, "retransmit")

    @retransmit.setter
    def retransmit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retransmit", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time to wait for a RADIUS server to reply (overrides default) - Range: `1`-`1000`
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class _RadiusState:
    def __init__(__self__, *,
                 accounting_port: Optional[pulumi.Input[int]] = None,
                 authentication_port: Optional[pulumi.Input[int]] = None,
                 automate_tester_ignore_acct_port: Optional[pulumi.Input[bool]] = None,
                 automate_tester_probe_on_config: Optional[pulumi.Input[bool]] = None,
                 automate_tester_username: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 ipv4_address: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pac_key: Optional[pulumi.Input[str]] = None,
                 pac_key_encryption: Optional[pulumi.Input[str]] = None,
                 retransmit: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Radius resources.
        :param pulumi.Input[int] accounting_port: UDP port for RADIUS accounting server (default is 1813) - Range: `0`-`65534`
        :param pulumi.Input[int] authentication_port: UDP port for RADIUS authentication server (default is 1812) - Range: `0`-`65534`
        :param pulumi.Input[bool] automate_tester_ignore_acct_port: Do not test accounting ports of the servers.
        :param pulumi.Input[bool] automate_tester_probe_on_config: Send a packet to verify the server status
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] ipv4_address: IPv4 address or Hostname for radius server
        :param pulumi.Input[str] name: Name for the radius server configuration
        :param pulumi.Input[str] pac_key: The UNENCRYPTED (cleartext) server key
        :param pulumi.Input[str] pac_key_encryption: 0 - Specifies an UNENCRYPTED key will follow 6 - Specifies an ENCRYPTED key will follow 7 - Specifies HIDDEN key will
               follow - Choices: `0`, `6`, `7`
        :param pulumi.Input[int] retransmit: Number of retries to active server (overrides default) - Range: `0`-`100`
        :param pulumi.Input[int] timeout: Time to wait for a RADIUS server to reply (overrides default) - Range: `1`-`1000`
        """
        if accounting_port is not None:
            pulumi.set(__self__, "accounting_port", accounting_port)
        if authentication_port is not None:
            pulumi.set(__self__, "authentication_port", authentication_port)
        if automate_tester_ignore_acct_port is not None:
            pulumi.set(__self__, "automate_tester_ignore_acct_port", automate_tester_ignore_acct_port)
        if automate_tester_probe_on_config is not None:
            pulumi.set(__self__, "automate_tester_probe_on_config", automate_tester_probe_on_config)
        if automate_tester_username is not None:
            pulumi.set(__self__, "automate_tester_username", automate_tester_username)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pac_key is not None:
            pulumi.set(__self__, "pac_key", pac_key)
        if pac_key_encryption is not None:
            pulumi.set(__self__, "pac_key_encryption", pac_key_encryption)
        if retransmit is not None:
            pulumi.set(__self__, "retransmit", retransmit)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter(name="accountingPort")
    def accounting_port(self) -> Optional[pulumi.Input[int]]:
        """
        UDP port for RADIUS accounting server (default is 1813) - Range: `0`-`65534`
        """
        return pulumi.get(self, "accounting_port")

    @accounting_port.setter
    def accounting_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "accounting_port", value)

    @property
    @pulumi.getter(name="authenticationPort")
    def authentication_port(self) -> Optional[pulumi.Input[int]]:
        """
        UDP port for RADIUS authentication server (default is 1812) - Range: `0`-`65534`
        """
        return pulumi.get(self, "authentication_port")

    @authentication_port.setter
    def authentication_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "authentication_port", value)

    @property
    @pulumi.getter(name="automateTesterIgnoreAcctPort")
    def automate_tester_ignore_acct_port(self) -> Optional[pulumi.Input[bool]]:
        """
        Do not test accounting ports of the servers.
        """
        return pulumi.get(self, "automate_tester_ignore_acct_port")

    @automate_tester_ignore_acct_port.setter
    def automate_tester_ignore_acct_port(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "automate_tester_ignore_acct_port", value)

    @property
    @pulumi.getter(name="automateTesterProbeOnConfig")
    def automate_tester_probe_on_config(self) -> Optional[pulumi.Input[bool]]:
        """
        Send a packet to verify the server status
        """
        return pulumi.get(self, "automate_tester_probe_on_config")

    @automate_tester_probe_on_config.setter
    def automate_tester_probe_on_config(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "automate_tester_probe_on_config", value)

    @property
    @pulumi.getter(name="automateTesterUsername")
    def automate_tester_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "automate_tester_username")

    @automate_tester_username.setter
    def automate_tester_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "automate_tester_username", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[pulumi.Input[str]]:
        """
        IPv4 address or Hostname for radius server
        """
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ipv4_address", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name for the radius server configuration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pacKey")
    def pac_key(self) -> Optional[pulumi.Input[str]]:
        """
        The UNENCRYPTED (cleartext) server key
        """
        return pulumi.get(self, "pac_key")

    @pac_key.setter
    def pac_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_key", value)

    @property
    @pulumi.getter(name="pacKeyEncryption")
    def pac_key_encryption(self) -> Optional[pulumi.Input[str]]:
        """
        0 - Specifies an UNENCRYPTED key will follow 6 - Specifies an ENCRYPTED key will follow 7 - Specifies HIDDEN key will
        follow - Choices: `0`, `6`, `7`
        """
        return pulumi.get(self, "pac_key_encryption")

    @pac_key_encryption.setter
    def pac_key_encryption(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pac_key_encryption", value)

    @property
    @pulumi.getter
    def retransmit(self) -> Optional[pulumi.Input[int]]:
        """
        Number of retries to active server (overrides default) - Range: `0`-`100`
        """
        return pulumi.get(self, "retransmit")

    @retransmit.setter
    def retransmit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retransmit", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Time to wait for a RADIUS server to reply (overrides default) - Range: `1`-`1000`
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


class Radius(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accounting_port: Optional[pulumi.Input[int]] = None,
                 authentication_port: Optional[pulumi.Input[int]] = None,
                 automate_tester_ignore_acct_port: Optional[pulumi.Input[bool]] = None,
                 automate_tester_probe_on_config: Optional[pulumi.Input[bool]] = None,
                 automate_tester_username: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 ipv4_address: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pac_key: Optional[pulumi.Input[str]] = None,
                 pac_key_encryption: Optional[pulumi.Input[str]] = None,
                 retransmit: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a Radius resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] accounting_port: UDP port for RADIUS accounting server (default is 1813) - Range: `0`-`65534`
        :param pulumi.Input[int] authentication_port: UDP port for RADIUS authentication server (default is 1812) - Range: `0`-`65534`
        :param pulumi.Input[bool] automate_tester_ignore_acct_port: Do not test accounting ports of the servers.
        :param pulumi.Input[bool] automate_tester_probe_on_config: Send a packet to verify the server status
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] ipv4_address: IPv4 address or Hostname for radius server
        :param pulumi.Input[str] name: Name for the radius server configuration
        :param pulumi.Input[str] pac_key: The UNENCRYPTED (cleartext) server key
        :param pulumi.Input[str] pac_key_encryption: 0 - Specifies an UNENCRYPTED key will follow 6 - Specifies an ENCRYPTED key will follow 7 - Specifies HIDDEN key will
               follow - Choices: `0`, `6`, `7`
        :param pulumi.Input[int] retransmit: Number of retries to active server (overrides default) - Range: `0`-`100`
        :param pulumi.Input[int] timeout: Time to wait for a RADIUS server to reply (overrides default) - Range: `1`-`1000`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[RadiusArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Radius resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RadiusArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RadiusArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 accounting_port: Optional[pulumi.Input[int]] = None,
                 authentication_port: Optional[pulumi.Input[int]] = None,
                 automate_tester_ignore_acct_port: Optional[pulumi.Input[bool]] = None,
                 automate_tester_probe_on_config: Optional[pulumi.Input[bool]] = None,
                 automate_tester_username: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 ipv4_address: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pac_key: Optional[pulumi.Input[str]] = None,
                 pac_key_encryption: Optional[pulumi.Input[str]] = None,
                 retransmit: Optional[pulumi.Input[int]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RadiusArgs.__new__(RadiusArgs)

            __props__.__dict__["accounting_port"] = accounting_port
            __props__.__dict__["authentication_port"] = authentication_port
            __props__.__dict__["automate_tester_ignore_acct_port"] = automate_tester_ignore_acct_port
            __props__.__dict__["automate_tester_probe_on_config"] = automate_tester_probe_on_config
            __props__.__dict__["automate_tester_username"] = automate_tester_username
            __props__.__dict__["device"] = device
            __props__.__dict__["ipv4_address"] = ipv4_address
            __props__.__dict__["key"] = key
            __props__.__dict__["name"] = name
            __props__.__dict__["pac_key"] = pac_key
            __props__.__dict__["pac_key_encryption"] = pac_key_encryption
            __props__.__dict__["retransmit"] = retransmit
            __props__.__dict__["timeout"] = timeout
        super(Radius, __self__).__init__(
            'iosxe:iosxe/radius:Radius',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            accounting_port: Optional[pulumi.Input[int]] = None,
            authentication_port: Optional[pulumi.Input[int]] = None,
            automate_tester_ignore_acct_port: Optional[pulumi.Input[bool]] = None,
            automate_tester_probe_on_config: Optional[pulumi.Input[bool]] = None,
            automate_tester_username: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            ipv4_address: Optional[pulumi.Input[str]] = None,
            key: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            pac_key: Optional[pulumi.Input[str]] = None,
            pac_key_encryption: Optional[pulumi.Input[str]] = None,
            retransmit: Optional[pulumi.Input[int]] = None,
            timeout: Optional[pulumi.Input[int]] = None) -> 'Radius':
        """
        Get an existing Radius resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] accounting_port: UDP port for RADIUS accounting server (default is 1813) - Range: `0`-`65534`
        :param pulumi.Input[int] authentication_port: UDP port for RADIUS authentication server (default is 1812) - Range: `0`-`65534`
        :param pulumi.Input[bool] automate_tester_ignore_acct_port: Do not test accounting ports of the servers.
        :param pulumi.Input[bool] automate_tester_probe_on_config: Send a packet to verify the server status
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] ipv4_address: IPv4 address or Hostname for radius server
        :param pulumi.Input[str] name: Name for the radius server configuration
        :param pulumi.Input[str] pac_key: The UNENCRYPTED (cleartext) server key
        :param pulumi.Input[str] pac_key_encryption: 0 - Specifies an UNENCRYPTED key will follow 6 - Specifies an ENCRYPTED key will follow 7 - Specifies HIDDEN key will
               follow - Choices: `0`, `6`, `7`
        :param pulumi.Input[int] retransmit: Number of retries to active server (overrides default) - Range: `0`-`100`
        :param pulumi.Input[int] timeout: Time to wait for a RADIUS server to reply (overrides default) - Range: `1`-`1000`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RadiusState.__new__(_RadiusState)

        __props__.__dict__["accounting_port"] = accounting_port
        __props__.__dict__["authentication_port"] = authentication_port
        __props__.__dict__["automate_tester_ignore_acct_port"] = automate_tester_ignore_acct_port
        __props__.__dict__["automate_tester_probe_on_config"] = automate_tester_probe_on_config
        __props__.__dict__["automate_tester_username"] = automate_tester_username
        __props__.__dict__["device"] = device
        __props__.__dict__["ipv4_address"] = ipv4_address
        __props__.__dict__["key"] = key
        __props__.__dict__["name"] = name
        __props__.__dict__["pac_key"] = pac_key
        __props__.__dict__["pac_key_encryption"] = pac_key_encryption
        __props__.__dict__["retransmit"] = retransmit
        __props__.__dict__["timeout"] = timeout
        return Radius(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountingPort")
    def accounting_port(self) -> pulumi.Output[Optional[int]]:
        """
        UDP port for RADIUS accounting server (default is 1813) - Range: `0`-`65534`
        """
        return pulumi.get(self, "accounting_port")

    @property
    @pulumi.getter(name="authenticationPort")
    def authentication_port(self) -> pulumi.Output[Optional[int]]:
        """
        UDP port for RADIUS authentication server (default is 1812) - Range: `0`-`65534`
        """
        return pulumi.get(self, "authentication_port")

    @property
    @pulumi.getter(name="automateTesterIgnoreAcctPort")
    def automate_tester_ignore_acct_port(self) -> pulumi.Output[Optional[bool]]:
        """
        Do not test accounting ports of the servers.
        """
        return pulumi.get(self, "automate_tester_ignore_acct_port")

    @property
    @pulumi.getter(name="automateTesterProbeOnConfig")
    def automate_tester_probe_on_config(self) -> pulumi.Output[Optional[bool]]:
        """
        Send a packet to verify the server status
        """
        return pulumi.get(self, "automate_tester_probe_on_config")

    @property
    @pulumi.getter(name="automateTesterUsername")
    def automate_tester_username(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "automate_tester_username")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> pulumi.Output[Optional[str]]:
        """
        IPv4 address or Hostname for radius server
        """
        return pulumi.get(self, "ipv4_address")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name for the radius server configuration
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pacKey")
    def pac_key(self) -> pulumi.Output[Optional[str]]:
        """
        The UNENCRYPTED (cleartext) server key
        """
        return pulumi.get(self, "pac_key")

    @property
    @pulumi.getter(name="pacKeyEncryption")
    def pac_key_encryption(self) -> pulumi.Output[Optional[str]]:
        """
        0 - Specifies an UNENCRYPTED key will follow 6 - Specifies an ENCRYPTED key will follow 7 - Specifies HIDDEN key will
        follow - Choices: `0`, `6`, `7`
        """
        return pulumi.get(self, "pac_key_encryption")

    @property
    @pulumi.getter
    def retransmit(self) -> pulumi.Output[Optional[int]]:
        """
        Number of retries to active server (overrides default) - Range: `0`-`100`
        """
        return pulumi.get(self, "retransmit")

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[Optional[int]]:
        """
        Time to wait for a RADIUS server to reply (overrides default) - Range: `1`-`1000`
        """
        return pulumi.get(self, "timeout")

