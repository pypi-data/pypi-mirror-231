# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['SnmpServerUserArgs', 'SnmpServerUser']

@pulumi.input_type
class SnmpServerUserArgs:
    def __init__(__self__, *,
                 grpname: pulumi.Input[str],
                 username: pulumi.Input[str],
                 v3_auth_algorithm: pulumi.Input[str],
                 v3_auth_password: pulumi.Input[str],
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 v3_auth_access_acl_name: Optional[pulumi.Input[str]] = None,
                 v3_auth_access_ipv6_acl: Optional[pulumi.Input[str]] = None,
                 v3_auth_access_standard_acl: Optional[pulumi.Input[int]] = None,
                 v3_auth_priv_aes_access_acl_name: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_aes_access_ipv6_acl: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_aes_access_standard_acl: Optional[pulumi.Input[int]] = None,
                 v3_auth_priv_aes_algorithm: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_aes_password: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_des3_access_acl_name: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_des3_access_ipv6_acl: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_des3_access_standard_acl: Optional[pulumi.Input[int]] = None,
                 v3_auth_priv_des3_password: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_des_access_acl_name: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_des_access_ipv6_acl: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_des_access_standard_acl: Optional[pulumi.Input[int]] = None,
                 v3_auth_priv_des_password: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SnmpServerUser resource.
        :param pulumi.Input[str] grpname: Group to which the user belongs
        :param pulumi.Input[str] username: Name of the user
        :param pulumi.Input[str] v3_auth_algorithm: Use HMAC SHA/MD5 algorithm for authentication - Choices: `md5`, `sha`
        :param pulumi.Input[str] v3_auth_password: Authentication password for user
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] v3_auth_access_acl_name: Access-list name
        :param pulumi.Input[str] v3_auth_access_ipv6_acl: Specify IPv6 Named Access-List
        :param pulumi.Input[int] v3_auth_access_standard_acl: Standard IP Access-list allowing access with this community string - Range: `1`-`99`
        :param pulumi.Input[str] v3_auth_priv_aes_access_acl_name: Access-list name
        :param pulumi.Input[str] v3_auth_priv_aes_access_ipv6_acl: Specify IPv6 Named Access-List
        :param pulumi.Input[int] v3_auth_priv_aes_access_standard_acl: Standard IP Access-list allowing access with this community string - Range: `1`-`99`
        :param pulumi.Input[str] v3_auth_priv_aes_algorithm: - Choices: `128`, `192`, `256`
        :param pulumi.Input[str] v3_auth_priv_aes_password: Authentication password for user
        :param pulumi.Input[str] v3_auth_priv_des3_access_acl_name: Access-list name
        :param pulumi.Input[str] v3_auth_priv_des3_access_ipv6_acl: Specify IPv6 Named Access-List
        :param pulumi.Input[int] v3_auth_priv_des3_access_standard_acl: Standard IP Access-list allowing access with this community string - Range: `1`-`99`
        :param pulumi.Input[str] v3_auth_priv_des3_password: Authentication password for user
        :param pulumi.Input[str] v3_auth_priv_des_access_acl_name: Access-list name
        :param pulumi.Input[str] v3_auth_priv_des_access_ipv6_acl: Specify IPv6 Named Access-List
        :param pulumi.Input[int] v3_auth_priv_des_access_standard_acl: Standard IP Access-list allowing access with this community string - Range: `1`-`99`
        :param pulumi.Input[str] v3_auth_priv_des_password: Authentication password for user
        """
        pulumi.set(__self__, "grpname", grpname)
        pulumi.set(__self__, "username", username)
        pulumi.set(__self__, "v3_auth_algorithm", v3_auth_algorithm)
        pulumi.set(__self__, "v3_auth_password", v3_auth_password)
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if v3_auth_access_acl_name is not None:
            pulumi.set(__self__, "v3_auth_access_acl_name", v3_auth_access_acl_name)
        if v3_auth_access_ipv6_acl is not None:
            pulumi.set(__self__, "v3_auth_access_ipv6_acl", v3_auth_access_ipv6_acl)
        if v3_auth_access_standard_acl is not None:
            pulumi.set(__self__, "v3_auth_access_standard_acl", v3_auth_access_standard_acl)
        if v3_auth_priv_aes_access_acl_name is not None:
            pulumi.set(__self__, "v3_auth_priv_aes_access_acl_name", v3_auth_priv_aes_access_acl_name)
        if v3_auth_priv_aes_access_ipv6_acl is not None:
            pulumi.set(__self__, "v3_auth_priv_aes_access_ipv6_acl", v3_auth_priv_aes_access_ipv6_acl)
        if v3_auth_priv_aes_access_standard_acl is not None:
            pulumi.set(__self__, "v3_auth_priv_aes_access_standard_acl", v3_auth_priv_aes_access_standard_acl)
        if v3_auth_priv_aes_algorithm is not None:
            pulumi.set(__self__, "v3_auth_priv_aes_algorithm", v3_auth_priv_aes_algorithm)
        if v3_auth_priv_aes_password is not None:
            pulumi.set(__self__, "v3_auth_priv_aes_password", v3_auth_priv_aes_password)
        if v3_auth_priv_des3_access_acl_name is not None:
            pulumi.set(__self__, "v3_auth_priv_des3_access_acl_name", v3_auth_priv_des3_access_acl_name)
        if v3_auth_priv_des3_access_ipv6_acl is not None:
            pulumi.set(__self__, "v3_auth_priv_des3_access_ipv6_acl", v3_auth_priv_des3_access_ipv6_acl)
        if v3_auth_priv_des3_access_standard_acl is not None:
            pulumi.set(__self__, "v3_auth_priv_des3_access_standard_acl", v3_auth_priv_des3_access_standard_acl)
        if v3_auth_priv_des3_password is not None:
            pulumi.set(__self__, "v3_auth_priv_des3_password", v3_auth_priv_des3_password)
        if v3_auth_priv_des_access_acl_name is not None:
            pulumi.set(__self__, "v3_auth_priv_des_access_acl_name", v3_auth_priv_des_access_acl_name)
        if v3_auth_priv_des_access_ipv6_acl is not None:
            pulumi.set(__self__, "v3_auth_priv_des_access_ipv6_acl", v3_auth_priv_des_access_ipv6_acl)
        if v3_auth_priv_des_access_standard_acl is not None:
            pulumi.set(__self__, "v3_auth_priv_des_access_standard_acl", v3_auth_priv_des_access_standard_acl)
        if v3_auth_priv_des_password is not None:
            pulumi.set(__self__, "v3_auth_priv_des_password", v3_auth_priv_des_password)

    @property
    @pulumi.getter
    def grpname(self) -> pulumi.Input[str]:
        """
        Group to which the user belongs
        """
        return pulumi.get(self, "grpname")

    @grpname.setter
    def grpname(self, value: pulumi.Input[str]):
        pulumi.set(self, "grpname", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        Name of the user
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="v3AuthAlgorithm")
    def v3_auth_algorithm(self) -> pulumi.Input[str]:
        """
        Use HMAC SHA/MD5 algorithm for authentication - Choices: `md5`, `sha`
        """
        return pulumi.get(self, "v3_auth_algorithm")

    @v3_auth_algorithm.setter
    def v3_auth_algorithm(self, value: pulumi.Input[str]):
        pulumi.set(self, "v3_auth_algorithm", value)

    @property
    @pulumi.getter(name="v3AuthPassword")
    def v3_auth_password(self) -> pulumi.Input[str]:
        """
        Authentication password for user
        """
        return pulumi.get(self, "v3_auth_password")

    @v3_auth_password.setter
    def v3_auth_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "v3_auth_password", value)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="v3AuthAccessAclName")
    def v3_auth_access_acl_name(self) -> Optional[pulumi.Input[str]]:
        """
        Access-list name
        """
        return pulumi.get(self, "v3_auth_access_acl_name")

    @v3_auth_access_acl_name.setter
    def v3_auth_access_acl_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_auth_access_acl_name", value)

    @property
    @pulumi.getter(name="v3AuthAccessIpv6Acl")
    def v3_auth_access_ipv6_acl(self) -> Optional[pulumi.Input[str]]:
        """
        Specify IPv6 Named Access-List
        """
        return pulumi.get(self, "v3_auth_access_ipv6_acl")

    @v3_auth_access_ipv6_acl.setter
    def v3_auth_access_ipv6_acl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_auth_access_ipv6_acl", value)

    @property
    @pulumi.getter(name="v3AuthAccessStandardAcl")
    def v3_auth_access_standard_acl(self) -> Optional[pulumi.Input[int]]:
        """
        Standard IP Access-list allowing access with this community string - Range: `1`-`99`
        """
        return pulumi.get(self, "v3_auth_access_standard_acl")

    @v3_auth_access_standard_acl.setter
    def v3_auth_access_standard_acl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "v3_auth_access_standard_acl", value)

    @property
    @pulumi.getter(name="v3AuthPrivAesAccessAclName")
    def v3_auth_priv_aes_access_acl_name(self) -> Optional[pulumi.Input[str]]:
        """
        Access-list name
        """
        return pulumi.get(self, "v3_auth_priv_aes_access_acl_name")

    @v3_auth_priv_aes_access_acl_name.setter
    def v3_auth_priv_aes_access_acl_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_auth_priv_aes_access_acl_name", value)

    @property
    @pulumi.getter(name="v3AuthPrivAesAccessIpv6Acl")
    def v3_auth_priv_aes_access_ipv6_acl(self) -> Optional[pulumi.Input[str]]:
        """
        Specify IPv6 Named Access-List
        """
        return pulumi.get(self, "v3_auth_priv_aes_access_ipv6_acl")

    @v3_auth_priv_aes_access_ipv6_acl.setter
    def v3_auth_priv_aes_access_ipv6_acl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_auth_priv_aes_access_ipv6_acl", value)

    @property
    @pulumi.getter(name="v3AuthPrivAesAccessStandardAcl")
    def v3_auth_priv_aes_access_standard_acl(self) -> Optional[pulumi.Input[int]]:
        """
        Standard IP Access-list allowing access with this community string - Range: `1`-`99`
        """
        return pulumi.get(self, "v3_auth_priv_aes_access_standard_acl")

    @v3_auth_priv_aes_access_standard_acl.setter
    def v3_auth_priv_aes_access_standard_acl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "v3_auth_priv_aes_access_standard_acl", value)

    @property
    @pulumi.getter(name="v3AuthPrivAesAlgorithm")
    def v3_auth_priv_aes_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        - Choices: `128`, `192`, `256`
        """
        return pulumi.get(self, "v3_auth_priv_aes_algorithm")

    @v3_auth_priv_aes_algorithm.setter
    def v3_auth_priv_aes_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_auth_priv_aes_algorithm", value)

    @property
    @pulumi.getter(name="v3AuthPrivAesPassword")
    def v3_auth_priv_aes_password(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication password for user
        """
        return pulumi.get(self, "v3_auth_priv_aes_password")

    @v3_auth_priv_aes_password.setter
    def v3_auth_priv_aes_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_auth_priv_aes_password", value)

    @property
    @pulumi.getter(name="v3AuthPrivDes3AccessAclName")
    def v3_auth_priv_des3_access_acl_name(self) -> Optional[pulumi.Input[str]]:
        """
        Access-list name
        """
        return pulumi.get(self, "v3_auth_priv_des3_access_acl_name")

    @v3_auth_priv_des3_access_acl_name.setter
    def v3_auth_priv_des3_access_acl_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_auth_priv_des3_access_acl_name", value)

    @property
    @pulumi.getter(name="v3AuthPrivDes3AccessIpv6Acl")
    def v3_auth_priv_des3_access_ipv6_acl(self) -> Optional[pulumi.Input[str]]:
        """
        Specify IPv6 Named Access-List
        """
        return pulumi.get(self, "v3_auth_priv_des3_access_ipv6_acl")

    @v3_auth_priv_des3_access_ipv6_acl.setter
    def v3_auth_priv_des3_access_ipv6_acl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_auth_priv_des3_access_ipv6_acl", value)

    @property
    @pulumi.getter(name="v3AuthPrivDes3AccessStandardAcl")
    def v3_auth_priv_des3_access_standard_acl(self) -> Optional[pulumi.Input[int]]:
        """
        Standard IP Access-list allowing access with this community string - Range: `1`-`99`
        """
        return pulumi.get(self, "v3_auth_priv_des3_access_standard_acl")

    @v3_auth_priv_des3_access_standard_acl.setter
    def v3_auth_priv_des3_access_standard_acl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "v3_auth_priv_des3_access_standard_acl", value)

    @property
    @pulumi.getter(name="v3AuthPrivDes3Password")
    def v3_auth_priv_des3_password(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication password for user
        """
        return pulumi.get(self, "v3_auth_priv_des3_password")

    @v3_auth_priv_des3_password.setter
    def v3_auth_priv_des3_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_auth_priv_des3_password", value)

    @property
    @pulumi.getter(name="v3AuthPrivDesAccessAclName")
    def v3_auth_priv_des_access_acl_name(self) -> Optional[pulumi.Input[str]]:
        """
        Access-list name
        """
        return pulumi.get(self, "v3_auth_priv_des_access_acl_name")

    @v3_auth_priv_des_access_acl_name.setter
    def v3_auth_priv_des_access_acl_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_auth_priv_des_access_acl_name", value)

    @property
    @pulumi.getter(name="v3AuthPrivDesAccessIpv6Acl")
    def v3_auth_priv_des_access_ipv6_acl(self) -> Optional[pulumi.Input[str]]:
        """
        Specify IPv6 Named Access-List
        """
        return pulumi.get(self, "v3_auth_priv_des_access_ipv6_acl")

    @v3_auth_priv_des_access_ipv6_acl.setter
    def v3_auth_priv_des_access_ipv6_acl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_auth_priv_des_access_ipv6_acl", value)

    @property
    @pulumi.getter(name="v3AuthPrivDesAccessStandardAcl")
    def v3_auth_priv_des_access_standard_acl(self) -> Optional[pulumi.Input[int]]:
        """
        Standard IP Access-list allowing access with this community string - Range: `1`-`99`
        """
        return pulumi.get(self, "v3_auth_priv_des_access_standard_acl")

    @v3_auth_priv_des_access_standard_acl.setter
    def v3_auth_priv_des_access_standard_acl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "v3_auth_priv_des_access_standard_acl", value)

    @property
    @pulumi.getter(name="v3AuthPrivDesPassword")
    def v3_auth_priv_des_password(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication password for user
        """
        return pulumi.get(self, "v3_auth_priv_des_password")

    @v3_auth_priv_des_password.setter
    def v3_auth_priv_des_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_auth_priv_des_password", value)


@pulumi.input_type
class _SnmpServerUserState:
    def __init__(__self__, *,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 grpname: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 v3_auth_access_acl_name: Optional[pulumi.Input[str]] = None,
                 v3_auth_access_ipv6_acl: Optional[pulumi.Input[str]] = None,
                 v3_auth_access_standard_acl: Optional[pulumi.Input[int]] = None,
                 v3_auth_algorithm: Optional[pulumi.Input[str]] = None,
                 v3_auth_password: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_aes_access_acl_name: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_aes_access_ipv6_acl: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_aes_access_standard_acl: Optional[pulumi.Input[int]] = None,
                 v3_auth_priv_aes_algorithm: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_aes_password: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_des3_access_acl_name: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_des3_access_ipv6_acl: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_des3_access_standard_acl: Optional[pulumi.Input[int]] = None,
                 v3_auth_priv_des3_password: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_des_access_acl_name: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_des_access_ipv6_acl: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_des_access_standard_acl: Optional[pulumi.Input[int]] = None,
                 v3_auth_priv_des_password: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SnmpServerUser resources.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] grpname: Group to which the user belongs
        :param pulumi.Input[str] username: Name of the user
        :param pulumi.Input[str] v3_auth_access_acl_name: Access-list name
        :param pulumi.Input[str] v3_auth_access_ipv6_acl: Specify IPv6 Named Access-List
        :param pulumi.Input[int] v3_auth_access_standard_acl: Standard IP Access-list allowing access with this community string - Range: `1`-`99`
        :param pulumi.Input[str] v3_auth_algorithm: Use HMAC SHA/MD5 algorithm for authentication - Choices: `md5`, `sha`
        :param pulumi.Input[str] v3_auth_password: Authentication password for user
        :param pulumi.Input[str] v3_auth_priv_aes_access_acl_name: Access-list name
        :param pulumi.Input[str] v3_auth_priv_aes_access_ipv6_acl: Specify IPv6 Named Access-List
        :param pulumi.Input[int] v3_auth_priv_aes_access_standard_acl: Standard IP Access-list allowing access with this community string - Range: `1`-`99`
        :param pulumi.Input[str] v3_auth_priv_aes_algorithm: - Choices: `128`, `192`, `256`
        :param pulumi.Input[str] v3_auth_priv_aes_password: Authentication password for user
        :param pulumi.Input[str] v3_auth_priv_des3_access_acl_name: Access-list name
        :param pulumi.Input[str] v3_auth_priv_des3_access_ipv6_acl: Specify IPv6 Named Access-List
        :param pulumi.Input[int] v3_auth_priv_des3_access_standard_acl: Standard IP Access-list allowing access with this community string - Range: `1`-`99`
        :param pulumi.Input[str] v3_auth_priv_des3_password: Authentication password for user
        :param pulumi.Input[str] v3_auth_priv_des_access_acl_name: Access-list name
        :param pulumi.Input[str] v3_auth_priv_des_access_ipv6_acl: Specify IPv6 Named Access-List
        :param pulumi.Input[int] v3_auth_priv_des_access_standard_acl: Standard IP Access-list allowing access with this community string - Range: `1`-`99`
        :param pulumi.Input[str] v3_auth_priv_des_password: Authentication password for user
        """
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if grpname is not None:
            pulumi.set(__self__, "grpname", grpname)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if v3_auth_access_acl_name is not None:
            pulumi.set(__self__, "v3_auth_access_acl_name", v3_auth_access_acl_name)
        if v3_auth_access_ipv6_acl is not None:
            pulumi.set(__self__, "v3_auth_access_ipv6_acl", v3_auth_access_ipv6_acl)
        if v3_auth_access_standard_acl is not None:
            pulumi.set(__self__, "v3_auth_access_standard_acl", v3_auth_access_standard_acl)
        if v3_auth_algorithm is not None:
            pulumi.set(__self__, "v3_auth_algorithm", v3_auth_algorithm)
        if v3_auth_password is not None:
            pulumi.set(__self__, "v3_auth_password", v3_auth_password)
        if v3_auth_priv_aes_access_acl_name is not None:
            pulumi.set(__self__, "v3_auth_priv_aes_access_acl_name", v3_auth_priv_aes_access_acl_name)
        if v3_auth_priv_aes_access_ipv6_acl is not None:
            pulumi.set(__self__, "v3_auth_priv_aes_access_ipv6_acl", v3_auth_priv_aes_access_ipv6_acl)
        if v3_auth_priv_aes_access_standard_acl is not None:
            pulumi.set(__self__, "v3_auth_priv_aes_access_standard_acl", v3_auth_priv_aes_access_standard_acl)
        if v3_auth_priv_aes_algorithm is not None:
            pulumi.set(__self__, "v3_auth_priv_aes_algorithm", v3_auth_priv_aes_algorithm)
        if v3_auth_priv_aes_password is not None:
            pulumi.set(__self__, "v3_auth_priv_aes_password", v3_auth_priv_aes_password)
        if v3_auth_priv_des3_access_acl_name is not None:
            pulumi.set(__self__, "v3_auth_priv_des3_access_acl_name", v3_auth_priv_des3_access_acl_name)
        if v3_auth_priv_des3_access_ipv6_acl is not None:
            pulumi.set(__self__, "v3_auth_priv_des3_access_ipv6_acl", v3_auth_priv_des3_access_ipv6_acl)
        if v3_auth_priv_des3_access_standard_acl is not None:
            pulumi.set(__self__, "v3_auth_priv_des3_access_standard_acl", v3_auth_priv_des3_access_standard_acl)
        if v3_auth_priv_des3_password is not None:
            pulumi.set(__self__, "v3_auth_priv_des3_password", v3_auth_priv_des3_password)
        if v3_auth_priv_des_access_acl_name is not None:
            pulumi.set(__self__, "v3_auth_priv_des_access_acl_name", v3_auth_priv_des_access_acl_name)
        if v3_auth_priv_des_access_ipv6_acl is not None:
            pulumi.set(__self__, "v3_auth_priv_des_access_ipv6_acl", v3_auth_priv_des_access_ipv6_acl)
        if v3_auth_priv_des_access_standard_acl is not None:
            pulumi.set(__self__, "v3_auth_priv_des_access_standard_acl", v3_auth_priv_des_access_standard_acl)
        if v3_auth_priv_des_password is not None:
            pulumi.set(__self__, "v3_auth_priv_des_password", v3_auth_priv_des_password)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter
    def grpname(self) -> Optional[pulumi.Input[str]]:
        """
        Group to which the user belongs
        """
        return pulumi.get(self, "grpname")

    @grpname.setter
    def grpname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grpname", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the user
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="v3AuthAccessAclName")
    def v3_auth_access_acl_name(self) -> Optional[pulumi.Input[str]]:
        """
        Access-list name
        """
        return pulumi.get(self, "v3_auth_access_acl_name")

    @v3_auth_access_acl_name.setter
    def v3_auth_access_acl_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_auth_access_acl_name", value)

    @property
    @pulumi.getter(name="v3AuthAccessIpv6Acl")
    def v3_auth_access_ipv6_acl(self) -> Optional[pulumi.Input[str]]:
        """
        Specify IPv6 Named Access-List
        """
        return pulumi.get(self, "v3_auth_access_ipv6_acl")

    @v3_auth_access_ipv6_acl.setter
    def v3_auth_access_ipv6_acl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_auth_access_ipv6_acl", value)

    @property
    @pulumi.getter(name="v3AuthAccessStandardAcl")
    def v3_auth_access_standard_acl(self) -> Optional[pulumi.Input[int]]:
        """
        Standard IP Access-list allowing access with this community string - Range: `1`-`99`
        """
        return pulumi.get(self, "v3_auth_access_standard_acl")

    @v3_auth_access_standard_acl.setter
    def v3_auth_access_standard_acl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "v3_auth_access_standard_acl", value)

    @property
    @pulumi.getter(name="v3AuthAlgorithm")
    def v3_auth_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        Use HMAC SHA/MD5 algorithm for authentication - Choices: `md5`, `sha`
        """
        return pulumi.get(self, "v3_auth_algorithm")

    @v3_auth_algorithm.setter
    def v3_auth_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_auth_algorithm", value)

    @property
    @pulumi.getter(name="v3AuthPassword")
    def v3_auth_password(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication password for user
        """
        return pulumi.get(self, "v3_auth_password")

    @v3_auth_password.setter
    def v3_auth_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_auth_password", value)

    @property
    @pulumi.getter(name="v3AuthPrivAesAccessAclName")
    def v3_auth_priv_aes_access_acl_name(self) -> Optional[pulumi.Input[str]]:
        """
        Access-list name
        """
        return pulumi.get(self, "v3_auth_priv_aes_access_acl_name")

    @v3_auth_priv_aes_access_acl_name.setter
    def v3_auth_priv_aes_access_acl_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_auth_priv_aes_access_acl_name", value)

    @property
    @pulumi.getter(name="v3AuthPrivAesAccessIpv6Acl")
    def v3_auth_priv_aes_access_ipv6_acl(self) -> Optional[pulumi.Input[str]]:
        """
        Specify IPv6 Named Access-List
        """
        return pulumi.get(self, "v3_auth_priv_aes_access_ipv6_acl")

    @v3_auth_priv_aes_access_ipv6_acl.setter
    def v3_auth_priv_aes_access_ipv6_acl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_auth_priv_aes_access_ipv6_acl", value)

    @property
    @pulumi.getter(name="v3AuthPrivAesAccessStandardAcl")
    def v3_auth_priv_aes_access_standard_acl(self) -> Optional[pulumi.Input[int]]:
        """
        Standard IP Access-list allowing access with this community string - Range: `1`-`99`
        """
        return pulumi.get(self, "v3_auth_priv_aes_access_standard_acl")

    @v3_auth_priv_aes_access_standard_acl.setter
    def v3_auth_priv_aes_access_standard_acl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "v3_auth_priv_aes_access_standard_acl", value)

    @property
    @pulumi.getter(name="v3AuthPrivAesAlgorithm")
    def v3_auth_priv_aes_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        - Choices: `128`, `192`, `256`
        """
        return pulumi.get(self, "v3_auth_priv_aes_algorithm")

    @v3_auth_priv_aes_algorithm.setter
    def v3_auth_priv_aes_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_auth_priv_aes_algorithm", value)

    @property
    @pulumi.getter(name="v3AuthPrivAesPassword")
    def v3_auth_priv_aes_password(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication password for user
        """
        return pulumi.get(self, "v3_auth_priv_aes_password")

    @v3_auth_priv_aes_password.setter
    def v3_auth_priv_aes_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_auth_priv_aes_password", value)

    @property
    @pulumi.getter(name="v3AuthPrivDes3AccessAclName")
    def v3_auth_priv_des3_access_acl_name(self) -> Optional[pulumi.Input[str]]:
        """
        Access-list name
        """
        return pulumi.get(self, "v3_auth_priv_des3_access_acl_name")

    @v3_auth_priv_des3_access_acl_name.setter
    def v3_auth_priv_des3_access_acl_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_auth_priv_des3_access_acl_name", value)

    @property
    @pulumi.getter(name="v3AuthPrivDes3AccessIpv6Acl")
    def v3_auth_priv_des3_access_ipv6_acl(self) -> Optional[pulumi.Input[str]]:
        """
        Specify IPv6 Named Access-List
        """
        return pulumi.get(self, "v3_auth_priv_des3_access_ipv6_acl")

    @v3_auth_priv_des3_access_ipv6_acl.setter
    def v3_auth_priv_des3_access_ipv6_acl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_auth_priv_des3_access_ipv6_acl", value)

    @property
    @pulumi.getter(name="v3AuthPrivDes3AccessStandardAcl")
    def v3_auth_priv_des3_access_standard_acl(self) -> Optional[pulumi.Input[int]]:
        """
        Standard IP Access-list allowing access with this community string - Range: `1`-`99`
        """
        return pulumi.get(self, "v3_auth_priv_des3_access_standard_acl")

    @v3_auth_priv_des3_access_standard_acl.setter
    def v3_auth_priv_des3_access_standard_acl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "v3_auth_priv_des3_access_standard_acl", value)

    @property
    @pulumi.getter(name="v3AuthPrivDes3Password")
    def v3_auth_priv_des3_password(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication password for user
        """
        return pulumi.get(self, "v3_auth_priv_des3_password")

    @v3_auth_priv_des3_password.setter
    def v3_auth_priv_des3_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_auth_priv_des3_password", value)

    @property
    @pulumi.getter(name="v3AuthPrivDesAccessAclName")
    def v3_auth_priv_des_access_acl_name(self) -> Optional[pulumi.Input[str]]:
        """
        Access-list name
        """
        return pulumi.get(self, "v3_auth_priv_des_access_acl_name")

    @v3_auth_priv_des_access_acl_name.setter
    def v3_auth_priv_des_access_acl_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_auth_priv_des_access_acl_name", value)

    @property
    @pulumi.getter(name="v3AuthPrivDesAccessIpv6Acl")
    def v3_auth_priv_des_access_ipv6_acl(self) -> Optional[pulumi.Input[str]]:
        """
        Specify IPv6 Named Access-List
        """
        return pulumi.get(self, "v3_auth_priv_des_access_ipv6_acl")

    @v3_auth_priv_des_access_ipv6_acl.setter
    def v3_auth_priv_des_access_ipv6_acl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_auth_priv_des_access_ipv6_acl", value)

    @property
    @pulumi.getter(name="v3AuthPrivDesAccessStandardAcl")
    def v3_auth_priv_des_access_standard_acl(self) -> Optional[pulumi.Input[int]]:
        """
        Standard IP Access-list allowing access with this community string - Range: `1`-`99`
        """
        return pulumi.get(self, "v3_auth_priv_des_access_standard_acl")

    @v3_auth_priv_des_access_standard_acl.setter
    def v3_auth_priv_des_access_standard_acl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "v3_auth_priv_des_access_standard_acl", value)

    @property
    @pulumi.getter(name="v3AuthPrivDesPassword")
    def v3_auth_priv_des_password(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication password for user
        """
        return pulumi.get(self, "v3_auth_priv_des_password")

    @v3_auth_priv_des_password.setter
    def v3_auth_priv_des_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "v3_auth_priv_des_password", value)


class SnmpServerUser(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 grpname: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 v3_auth_access_acl_name: Optional[pulumi.Input[str]] = None,
                 v3_auth_access_ipv6_acl: Optional[pulumi.Input[str]] = None,
                 v3_auth_access_standard_acl: Optional[pulumi.Input[int]] = None,
                 v3_auth_algorithm: Optional[pulumi.Input[str]] = None,
                 v3_auth_password: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_aes_access_acl_name: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_aes_access_ipv6_acl: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_aes_access_standard_acl: Optional[pulumi.Input[int]] = None,
                 v3_auth_priv_aes_algorithm: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_aes_password: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_des3_access_acl_name: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_des3_access_ipv6_acl: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_des3_access_standard_acl: Optional[pulumi.Input[int]] = None,
                 v3_auth_priv_des3_password: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_des_access_acl_name: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_des_access_ipv6_acl: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_des_access_standard_acl: Optional[pulumi.Input[int]] = None,
                 v3_auth_priv_des_password: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a SnmpServerUser resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] grpname: Group to which the user belongs
        :param pulumi.Input[str] username: Name of the user
        :param pulumi.Input[str] v3_auth_access_acl_name: Access-list name
        :param pulumi.Input[str] v3_auth_access_ipv6_acl: Specify IPv6 Named Access-List
        :param pulumi.Input[int] v3_auth_access_standard_acl: Standard IP Access-list allowing access with this community string - Range: `1`-`99`
        :param pulumi.Input[str] v3_auth_algorithm: Use HMAC SHA/MD5 algorithm for authentication - Choices: `md5`, `sha`
        :param pulumi.Input[str] v3_auth_password: Authentication password for user
        :param pulumi.Input[str] v3_auth_priv_aes_access_acl_name: Access-list name
        :param pulumi.Input[str] v3_auth_priv_aes_access_ipv6_acl: Specify IPv6 Named Access-List
        :param pulumi.Input[int] v3_auth_priv_aes_access_standard_acl: Standard IP Access-list allowing access with this community string - Range: `1`-`99`
        :param pulumi.Input[str] v3_auth_priv_aes_algorithm: - Choices: `128`, `192`, `256`
        :param pulumi.Input[str] v3_auth_priv_aes_password: Authentication password for user
        :param pulumi.Input[str] v3_auth_priv_des3_access_acl_name: Access-list name
        :param pulumi.Input[str] v3_auth_priv_des3_access_ipv6_acl: Specify IPv6 Named Access-List
        :param pulumi.Input[int] v3_auth_priv_des3_access_standard_acl: Standard IP Access-list allowing access with this community string - Range: `1`-`99`
        :param pulumi.Input[str] v3_auth_priv_des3_password: Authentication password for user
        :param pulumi.Input[str] v3_auth_priv_des_access_acl_name: Access-list name
        :param pulumi.Input[str] v3_auth_priv_des_access_ipv6_acl: Specify IPv6 Named Access-List
        :param pulumi.Input[int] v3_auth_priv_des_access_standard_acl: Standard IP Access-list allowing access with this community string - Range: `1`-`99`
        :param pulumi.Input[str] v3_auth_priv_des_password: Authentication password for user
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SnmpServerUserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SnmpServerUser resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SnmpServerUserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SnmpServerUserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 grpname: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 v3_auth_access_acl_name: Optional[pulumi.Input[str]] = None,
                 v3_auth_access_ipv6_acl: Optional[pulumi.Input[str]] = None,
                 v3_auth_access_standard_acl: Optional[pulumi.Input[int]] = None,
                 v3_auth_algorithm: Optional[pulumi.Input[str]] = None,
                 v3_auth_password: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_aes_access_acl_name: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_aes_access_ipv6_acl: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_aes_access_standard_acl: Optional[pulumi.Input[int]] = None,
                 v3_auth_priv_aes_algorithm: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_aes_password: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_des3_access_acl_name: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_des3_access_ipv6_acl: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_des3_access_standard_acl: Optional[pulumi.Input[int]] = None,
                 v3_auth_priv_des3_password: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_des_access_acl_name: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_des_access_ipv6_acl: Optional[pulumi.Input[str]] = None,
                 v3_auth_priv_des_access_standard_acl: Optional[pulumi.Input[int]] = None,
                 v3_auth_priv_des_password: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SnmpServerUserArgs.__new__(SnmpServerUserArgs)

            __props__.__dict__["delete_mode"] = delete_mode
            __props__.__dict__["device"] = device
            if grpname is None and not opts.urn:
                raise TypeError("Missing required property 'grpname'")
            __props__.__dict__["grpname"] = grpname
            if username is None and not opts.urn:
                raise TypeError("Missing required property 'username'")
            __props__.__dict__["username"] = username
            __props__.__dict__["v3_auth_access_acl_name"] = v3_auth_access_acl_name
            __props__.__dict__["v3_auth_access_ipv6_acl"] = v3_auth_access_ipv6_acl
            __props__.__dict__["v3_auth_access_standard_acl"] = v3_auth_access_standard_acl
            if v3_auth_algorithm is None and not opts.urn:
                raise TypeError("Missing required property 'v3_auth_algorithm'")
            __props__.__dict__["v3_auth_algorithm"] = v3_auth_algorithm
            if v3_auth_password is None and not opts.urn:
                raise TypeError("Missing required property 'v3_auth_password'")
            __props__.__dict__["v3_auth_password"] = v3_auth_password
            __props__.__dict__["v3_auth_priv_aes_access_acl_name"] = v3_auth_priv_aes_access_acl_name
            __props__.__dict__["v3_auth_priv_aes_access_ipv6_acl"] = v3_auth_priv_aes_access_ipv6_acl
            __props__.__dict__["v3_auth_priv_aes_access_standard_acl"] = v3_auth_priv_aes_access_standard_acl
            __props__.__dict__["v3_auth_priv_aes_algorithm"] = v3_auth_priv_aes_algorithm
            __props__.__dict__["v3_auth_priv_aes_password"] = v3_auth_priv_aes_password
            __props__.__dict__["v3_auth_priv_des3_access_acl_name"] = v3_auth_priv_des3_access_acl_name
            __props__.__dict__["v3_auth_priv_des3_access_ipv6_acl"] = v3_auth_priv_des3_access_ipv6_acl
            __props__.__dict__["v3_auth_priv_des3_access_standard_acl"] = v3_auth_priv_des3_access_standard_acl
            __props__.__dict__["v3_auth_priv_des3_password"] = v3_auth_priv_des3_password
            __props__.__dict__["v3_auth_priv_des_access_acl_name"] = v3_auth_priv_des_access_acl_name
            __props__.__dict__["v3_auth_priv_des_access_ipv6_acl"] = v3_auth_priv_des_access_ipv6_acl
            __props__.__dict__["v3_auth_priv_des_access_standard_acl"] = v3_auth_priv_des_access_standard_acl
            __props__.__dict__["v3_auth_priv_des_password"] = v3_auth_priv_des_password
        super(SnmpServerUser, __self__).__init__(
            'iosxe:iosxe/snmpServerUser:SnmpServerUser',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            delete_mode: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            grpname: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None,
            v3_auth_access_acl_name: Optional[pulumi.Input[str]] = None,
            v3_auth_access_ipv6_acl: Optional[pulumi.Input[str]] = None,
            v3_auth_access_standard_acl: Optional[pulumi.Input[int]] = None,
            v3_auth_algorithm: Optional[pulumi.Input[str]] = None,
            v3_auth_password: Optional[pulumi.Input[str]] = None,
            v3_auth_priv_aes_access_acl_name: Optional[pulumi.Input[str]] = None,
            v3_auth_priv_aes_access_ipv6_acl: Optional[pulumi.Input[str]] = None,
            v3_auth_priv_aes_access_standard_acl: Optional[pulumi.Input[int]] = None,
            v3_auth_priv_aes_algorithm: Optional[pulumi.Input[str]] = None,
            v3_auth_priv_aes_password: Optional[pulumi.Input[str]] = None,
            v3_auth_priv_des3_access_acl_name: Optional[pulumi.Input[str]] = None,
            v3_auth_priv_des3_access_ipv6_acl: Optional[pulumi.Input[str]] = None,
            v3_auth_priv_des3_access_standard_acl: Optional[pulumi.Input[int]] = None,
            v3_auth_priv_des3_password: Optional[pulumi.Input[str]] = None,
            v3_auth_priv_des_access_acl_name: Optional[pulumi.Input[str]] = None,
            v3_auth_priv_des_access_ipv6_acl: Optional[pulumi.Input[str]] = None,
            v3_auth_priv_des_access_standard_acl: Optional[pulumi.Input[int]] = None,
            v3_auth_priv_des_password: Optional[pulumi.Input[str]] = None) -> 'SnmpServerUser':
        """
        Get an existing SnmpServerUser resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[str] grpname: Group to which the user belongs
        :param pulumi.Input[str] username: Name of the user
        :param pulumi.Input[str] v3_auth_access_acl_name: Access-list name
        :param pulumi.Input[str] v3_auth_access_ipv6_acl: Specify IPv6 Named Access-List
        :param pulumi.Input[int] v3_auth_access_standard_acl: Standard IP Access-list allowing access with this community string - Range: `1`-`99`
        :param pulumi.Input[str] v3_auth_algorithm: Use HMAC SHA/MD5 algorithm for authentication - Choices: `md5`, `sha`
        :param pulumi.Input[str] v3_auth_password: Authentication password for user
        :param pulumi.Input[str] v3_auth_priv_aes_access_acl_name: Access-list name
        :param pulumi.Input[str] v3_auth_priv_aes_access_ipv6_acl: Specify IPv6 Named Access-List
        :param pulumi.Input[int] v3_auth_priv_aes_access_standard_acl: Standard IP Access-list allowing access with this community string - Range: `1`-`99`
        :param pulumi.Input[str] v3_auth_priv_aes_algorithm: - Choices: `128`, `192`, `256`
        :param pulumi.Input[str] v3_auth_priv_aes_password: Authentication password for user
        :param pulumi.Input[str] v3_auth_priv_des3_access_acl_name: Access-list name
        :param pulumi.Input[str] v3_auth_priv_des3_access_ipv6_acl: Specify IPv6 Named Access-List
        :param pulumi.Input[int] v3_auth_priv_des3_access_standard_acl: Standard IP Access-list allowing access with this community string - Range: `1`-`99`
        :param pulumi.Input[str] v3_auth_priv_des3_password: Authentication password for user
        :param pulumi.Input[str] v3_auth_priv_des_access_acl_name: Access-list name
        :param pulumi.Input[str] v3_auth_priv_des_access_ipv6_acl: Specify IPv6 Named Access-List
        :param pulumi.Input[int] v3_auth_priv_des_access_standard_acl: Standard IP Access-list allowing access with this community string - Range: `1`-`99`
        :param pulumi.Input[str] v3_auth_priv_des_password: Authentication password for user
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SnmpServerUserState.__new__(_SnmpServerUserState)

        __props__.__dict__["delete_mode"] = delete_mode
        __props__.__dict__["device"] = device
        __props__.__dict__["grpname"] = grpname
        __props__.__dict__["username"] = username
        __props__.__dict__["v3_auth_access_acl_name"] = v3_auth_access_acl_name
        __props__.__dict__["v3_auth_access_ipv6_acl"] = v3_auth_access_ipv6_acl
        __props__.__dict__["v3_auth_access_standard_acl"] = v3_auth_access_standard_acl
        __props__.__dict__["v3_auth_algorithm"] = v3_auth_algorithm
        __props__.__dict__["v3_auth_password"] = v3_auth_password
        __props__.__dict__["v3_auth_priv_aes_access_acl_name"] = v3_auth_priv_aes_access_acl_name
        __props__.__dict__["v3_auth_priv_aes_access_ipv6_acl"] = v3_auth_priv_aes_access_ipv6_acl
        __props__.__dict__["v3_auth_priv_aes_access_standard_acl"] = v3_auth_priv_aes_access_standard_acl
        __props__.__dict__["v3_auth_priv_aes_algorithm"] = v3_auth_priv_aes_algorithm
        __props__.__dict__["v3_auth_priv_aes_password"] = v3_auth_priv_aes_password
        __props__.__dict__["v3_auth_priv_des3_access_acl_name"] = v3_auth_priv_des3_access_acl_name
        __props__.__dict__["v3_auth_priv_des3_access_ipv6_acl"] = v3_auth_priv_des3_access_ipv6_acl
        __props__.__dict__["v3_auth_priv_des3_access_standard_acl"] = v3_auth_priv_des3_access_standard_acl
        __props__.__dict__["v3_auth_priv_des3_password"] = v3_auth_priv_des3_password
        __props__.__dict__["v3_auth_priv_des_access_acl_name"] = v3_auth_priv_des_access_acl_name
        __props__.__dict__["v3_auth_priv_des_access_ipv6_acl"] = v3_auth_priv_des_access_ipv6_acl
        __props__.__dict__["v3_auth_priv_des_access_standard_acl"] = v3_auth_priv_des_access_standard_acl
        __props__.__dict__["v3_auth_priv_des_password"] = v3_auth_priv_des_password
        return SnmpServerUser(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def grpname(self) -> pulumi.Output[str]:
        """
        Group to which the user belongs
        """
        return pulumi.get(self, "grpname")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        Name of the user
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="v3AuthAccessAclName")
    def v3_auth_access_acl_name(self) -> pulumi.Output[Optional[str]]:
        """
        Access-list name
        """
        return pulumi.get(self, "v3_auth_access_acl_name")

    @property
    @pulumi.getter(name="v3AuthAccessIpv6Acl")
    def v3_auth_access_ipv6_acl(self) -> pulumi.Output[Optional[str]]:
        """
        Specify IPv6 Named Access-List
        """
        return pulumi.get(self, "v3_auth_access_ipv6_acl")

    @property
    @pulumi.getter(name="v3AuthAccessStandardAcl")
    def v3_auth_access_standard_acl(self) -> pulumi.Output[Optional[int]]:
        """
        Standard IP Access-list allowing access with this community string - Range: `1`-`99`
        """
        return pulumi.get(self, "v3_auth_access_standard_acl")

    @property
    @pulumi.getter(name="v3AuthAlgorithm")
    def v3_auth_algorithm(self) -> pulumi.Output[str]:
        """
        Use HMAC SHA/MD5 algorithm for authentication - Choices: `md5`, `sha`
        """
        return pulumi.get(self, "v3_auth_algorithm")

    @property
    @pulumi.getter(name="v3AuthPassword")
    def v3_auth_password(self) -> pulumi.Output[str]:
        """
        Authentication password for user
        """
        return pulumi.get(self, "v3_auth_password")

    @property
    @pulumi.getter(name="v3AuthPrivAesAccessAclName")
    def v3_auth_priv_aes_access_acl_name(self) -> pulumi.Output[Optional[str]]:
        """
        Access-list name
        """
        return pulumi.get(self, "v3_auth_priv_aes_access_acl_name")

    @property
    @pulumi.getter(name="v3AuthPrivAesAccessIpv6Acl")
    def v3_auth_priv_aes_access_ipv6_acl(self) -> pulumi.Output[Optional[str]]:
        """
        Specify IPv6 Named Access-List
        """
        return pulumi.get(self, "v3_auth_priv_aes_access_ipv6_acl")

    @property
    @pulumi.getter(name="v3AuthPrivAesAccessStandardAcl")
    def v3_auth_priv_aes_access_standard_acl(self) -> pulumi.Output[Optional[int]]:
        """
        Standard IP Access-list allowing access with this community string - Range: `1`-`99`
        """
        return pulumi.get(self, "v3_auth_priv_aes_access_standard_acl")

    @property
    @pulumi.getter(name="v3AuthPrivAesAlgorithm")
    def v3_auth_priv_aes_algorithm(self) -> pulumi.Output[Optional[str]]:
        """
        - Choices: `128`, `192`, `256`
        """
        return pulumi.get(self, "v3_auth_priv_aes_algorithm")

    @property
    @pulumi.getter(name="v3AuthPrivAesPassword")
    def v3_auth_priv_aes_password(self) -> pulumi.Output[Optional[str]]:
        """
        Authentication password for user
        """
        return pulumi.get(self, "v3_auth_priv_aes_password")

    @property
    @pulumi.getter(name="v3AuthPrivDes3AccessAclName")
    def v3_auth_priv_des3_access_acl_name(self) -> pulumi.Output[Optional[str]]:
        """
        Access-list name
        """
        return pulumi.get(self, "v3_auth_priv_des3_access_acl_name")

    @property
    @pulumi.getter(name="v3AuthPrivDes3AccessIpv6Acl")
    def v3_auth_priv_des3_access_ipv6_acl(self) -> pulumi.Output[Optional[str]]:
        """
        Specify IPv6 Named Access-List
        """
        return pulumi.get(self, "v3_auth_priv_des3_access_ipv6_acl")

    @property
    @pulumi.getter(name="v3AuthPrivDes3AccessStandardAcl")
    def v3_auth_priv_des3_access_standard_acl(self) -> pulumi.Output[Optional[int]]:
        """
        Standard IP Access-list allowing access with this community string - Range: `1`-`99`
        """
        return pulumi.get(self, "v3_auth_priv_des3_access_standard_acl")

    @property
    @pulumi.getter(name="v3AuthPrivDes3Password")
    def v3_auth_priv_des3_password(self) -> pulumi.Output[Optional[str]]:
        """
        Authentication password for user
        """
        return pulumi.get(self, "v3_auth_priv_des3_password")

    @property
    @pulumi.getter(name="v3AuthPrivDesAccessAclName")
    def v3_auth_priv_des_access_acl_name(self) -> pulumi.Output[Optional[str]]:
        """
        Access-list name
        """
        return pulumi.get(self, "v3_auth_priv_des_access_acl_name")

    @property
    @pulumi.getter(name="v3AuthPrivDesAccessIpv6Acl")
    def v3_auth_priv_des_access_ipv6_acl(self) -> pulumi.Output[Optional[str]]:
        """
        Specify IPv6 Named Access-List
        """
        return pulumi.get(self, "v3_auth_priv_des_access_ipv6_acl")

    @property
    @pulumi.getter(name="v3AuthPrivDesAccessStandardAcl")
    def v3_auth_priv_des_access_standard_acl(self) -> pulumi.Output[Optional[int]]:
        """
        Standard IP Access-list allowing access with this community string - Range: `1`-`99`
        """
        return pulumi.get(self, "v3_auth_priv_des_access_standard_acl")

    @property
    @pulumi.getter(name="v3AuthPrivDesPassword")
    def v3_auth_priv_des_password(self) -> pulumi.Output[Optional[str]]:
        """
        Authentication password for user
        """
        return pulumi.get(self, "v3_auth_priv_des_password")

