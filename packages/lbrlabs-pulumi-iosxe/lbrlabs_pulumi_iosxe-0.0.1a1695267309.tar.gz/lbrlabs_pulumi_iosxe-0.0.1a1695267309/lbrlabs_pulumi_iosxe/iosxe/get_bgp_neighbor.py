# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetBgpNeighborResult',
    'AwaitableGetBgpNeighborResult',
    'get_bgp_neighbor',
    'get_bgp_neighbor_output',
]

@pulumi.output_type
class GetBgpNeighborResult:
    """
    A collection of values returned by getBgpNeighbor.
    """
    def __init__(__self__, asn=None, cluster_id=None, description=None, device=None, disable_connected_check=None, ebgp_multihop=None, ebgp_multihop_max_hop=None, fall_over_bfd_check_control_plane_failure=None, fall_over_bfd_multi_hop=None, fall_over_bfd_single_hop=None, fall_over_bfd_strict_mode=None, fall_over_default_enable=None, fall_over_default_route_map=None, fall_over_maximum_metric_route_map=None, id=None, ip=None, local_as=None, local_as_dual_as=None, local_as_no_prepend=None, local_as_replace_as=None, log_neighbor_changes=None, password=None, password_type=None, remote_as=None, shutdown=None, timers_holdtime=None, timers_keepalive_interval=None, timers_minimum_neighbor_hold=None, ttl_security_hops=None, update_source_loopback=None, version=None):
        if asn and not isinstance(asn, str):
            raise TypeError("Expected argument 'asn' to be a str")
        pulumi.set(__self__, "asn", asn)
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if disable_connected_check and not isinstance(disable_connected_check, bool):
            raise TypeError("Expected argument 'disable_connected_check' to be a bool")
        pulumi.set(__self__, "disable_connected_check", disable_connected_check)
        if ebgp_multihop and not isinstance(ebgp_multihop, bool):
            raise TypeError("Expected argument 'ebgp_multihop' to be a bool")
        pulumi.set(__self__, "ebgp_multihop", ebgp_multihop)
        if ebgp_multihop_max_hop and not isinstance(ebgp_multihop_max_hop, int):
            raise TypeError("Expected argument 'ebgp_multihop_max_hop' to be a int")
        pulumi.set(__self__, "ebgp_multihop_max_hop", ebgp_multihop_max_hop)
        if fall_over_bfd_check_control_plane_failure and not isinstance(fall_over_bfd_check_control_plane_failure, bool):
            raise TypeError("Expected argument 'fall_over_bfd_check_control_plane_failure' to be a bool")
        pulumi.set(__self__, "fall_over_bfd_check_control_plane_failure", fall_over_bfd_check_control_plane_failure)
        if fall_over_bfd_multi_hop and not isinstance(fall_over_bfd_multi_hop, bool):
            raise TypeError("Expected argument 'fall_over_bfd_multi_hop' to be a bool")
        pulumi.set(__self__, "fall_over_bfd_multi_hop", fall_over_bfd_multi_hop)
        if fall_over_bfd_single_hop and not isinstance(fall_over_bfd_single_hop, bool):
            raise TypeError("Expected argument 'fall_over_bfd_single_hop' to be a bool")
        pulumi.set(__self__, "fall_over_bfd_single_hop", fall_over_bfd_single_hop)
        if fall_over_bfd_strict_mode and not isinstance(fall_over_bfd_strict_mode, bool):
            raise TypeError("Expected argument 'fall_over_bfd_strict_mode' to be a bool")
        pulumi.set(__self__, "fall_over_bfd_strict_mode", fall_over_bfd_strict_mode)
        if fall_over_default_enable and not isinstance(fall_over_default_enable, bool):
            raise TypeError("Expected argument 'fall_over_default_enable' to be a bool")
        pulumi.set(__self__, "fall_over_default_enable", fall_over_default_enable)
        if fall_over_default_route_map and not isinstance(fall_over_default_route_map, str):
            raise TypeError("Expected argument 'fall_over_default_route_map' to be a str")
        pulumi.set(__self__, "fall_over_default_route_map", fall_over_default_route_map)
        if fall_over_maximum_metric_route_map and not isinstance(fall_over_maximum_metric_route_map, str):
            raise TypeError("Expected argument 'fall_over_maximum_metric_route_map' to be a str")
        pulumi.set(__self__, "fall_over_maximum_metric_route_map", fall_over_maximum_metric_route_map)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip and not isinstance(ip, str):
            raise TypeError("Expected argument 'ip' to be a str")
        pulumi.set(__self__, "ip", ip)
        if local_as and not isinstance(local_as, str):
            raise TypeError("Expected argument 'local_as' to be a str")
        pulumi.set(__self__, "local_as", local_as)
        if local_as_dual_as and not isinstance(local_as_dual_as, bool):
            raise TypeError("Expected argument 'local_as_dual_as' to be a bool")
        pulumi.set(__self__, "local_as_dual_as", local_as_dual_as)
        if local_as_no_prepend and not isinstance(local_as_no_prepend, bool):
            raise TypeError("Expected argument 'local_as_no_prepend' to be a bool")
        pulumi.set(__self__, "local_as_no_prepend", local_as_no_prepend)
        if local_as_replace_as and not isinstance(local_as_replace_as, bool):
            raise TypeError("Expected argument 'local_as_replace_as' to be a bool")
        pulumi.set(__self__, "local_as_replace_as", local_as_replace_as)
        if log_neighbor_changes and not isinstance(log_neighbor_changes, bool):
            raise TypeError("Expected argument 'log_neighbor_changes' to be a bool")
        pulumi.set(__self__, "log_neighbor_changes", log_neighbor_changes)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if password_type and not isinstance(password_type, int):
            raise TypeError("Expected argument 'password_type' to be a int")
        pulumi.set(__self__, "password_type", password_type)
        if remote_as and not isinstance(remote_as, str):
            raise TypeError("Expected argument 'remote_as' to be a str")
        pulumi.set(__self__, "remote_as", remote_as)
        if shutdown and not isinstance(shutdown, bool):
            raise TypeError("Expected argument 'shutdown' to be a bool")
        pulumi.set(__self__, "shutdown", shutdown)
        if timers_holdtime and not isinstance(timers_holdtime, int):
            raise TypeError("Expected argument 'timers_holdtime' to be a int")
        pulumi.set(__self__, "timers_holdtime", timers_holdtime)
        if timers_keepalive_interval and not isinstance(timers_keepalive_interval, int):
            raise TypeError("Expected argument 'timers_keepalive_interval' to be a int")
        pulumi.set(__self__, "timers_keepalive_interval", timers_keepalive_interval)
        if timers_minimum_neighbor_hold and not isinstance(timers_minimum_neighbor_hold, int):
            raise TypeError("Expected argument 'timers_minimum_neighbor_hold' to be a int")
        pulumi.set(__self__, "timers_minimum_neighbor_hold", timers_minimum_neighbor_hold)
        if ttl_security_hops and not isinstance(ttl_security_hops, int):
            raise TypeError("Expected argument 'ttl_security_hops' to be a int")
        pulumi.set(__self__, "ttl_security_hops", ttl_security_hops)
        if update_source_loopback and not isinstance(update_source_loopback, str):
            raise TypeError("Expected argument 'update_source_loopback' to be a str")
        pulumi.set(__self__, "update_source_loopback", update_source_loopback)
        if version and not isinstance(version, int):
            raise TypeError("Expected argument 'version' to be a int")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def asn(self) -> str:
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="disableConnectedCheck")
    def disable_connected_check(self) -> bool:
        return pulumi.get(self, "disable_connected_check")

    @property
    @pulumi.getter(name="ebgpMultihop")
    def ebgp_multihop(self) -> bool:
        return pulumi.get(self, "ebgp_multihop")

    @property
    @pulumi.getter(name="ebgpMultihopMaxHop")
    def ebgp_multihop_max_hop(self) -> int:
        return pulumi.get(self, "ebgp_multihop_max_hop")

    @property
    @pulumi.getter(name="fallOverBfdCheckControlPlaneFailure")
    def fall_over_bfd_check_control_plane_failure(self) -> bool:
        return pulumi.get(self, "fall_over_bfd_check_control_plane_failure")

    @property
    @pulumi.getter(name="fallOverBfdMultiHop")
    def fall_over_bfd_multi_hop(self) -> bool:
        return pulumi.get(self, "fall_over_bfd_multi_hop")

    @property
    @pulumi.getter(name="fallOverBfdSingleHop")
    def fall_over_bfd_single_hop(self) -> bool:
        return pulumi.get(self, "fall_over_bfd_single_hop")

    @property
    @pulumi.getter(name="fallOverBfdStrictMode")
    def fall_over_bfd_strict_mode(self) -> bool:
        return pulumi.get(self, "fall_over_bfd_strict_mode")

    @property
    @pulumi.getter(name="fallOverDefaultEnable")
    def fall_over_default_enable(self) -> bool:
        return pulumi.get(self, "fall_over_default_enable")

    @property
    @pulumi.getter(name="fallOverDefaultRouteMap")
    def fall_over_default_route_map(self) -> str:
        return pulumi.get(self, "fall_over_default_route_map")

    @property
    @pulumi.getter(name="fallOverMaximumMetricRouteMap")
    def fall_over_maximum_metric_route_map(self) -> str:
        return pulumi.get(self, "fall_over_maximum_metric_route_map")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> str:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter(name="localAs")
    def local_as(self) -> str:
        return pulumi.get(self, "local_as")

    @property
    @pulumi.getter(name="localAsDualAs")
    def local_as_dual_as(self) -> bool:
        return pulumi.get(self, "local_as_dual_as")

    @property
    @pulumi.getter(name="localAsNoPrepend")
    def local_as_no_prepend(self) -> bool:
        return pulumi.get(self, "local_as_no_prepend")

    @property
    @pulumi.getter(name="localAsReplaceAs")
    def local_as_replace_as(self) -> bool:
        return pulumi.get(self, "local_as_replace_as")

    @property
    @pulumi.getter(name="logNeighborChanges")
    def log_neighbor_changes(self) -> bool:
        return pulumi.get(self, "log_neighbor_changes")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="passwordType")
    def password_type(self) -> int:
        return pulumi.get(self, "password_type")

    @property
    @pulumi.getter(name="remoteAs")
    def remote_as(self) -> str:
        return pulumi.get(self, "remote_as")

    @property
    @pulumi.getter
    def shutdown(self) -> bool:
        return pulumi.get(self, "shutdown")

    @property
    @pulumi.getter(name="timersHoldtime")
    def timers_holdtime(self) -> int:
        return pulumi.get(self, "timers_holdtime")

    @property
    @pulumi.getter(name="timersKeepaliveInterval")
    def timers_keepalive_interval(self) -> int:
        return pulumi.get(self, "timers_keepalive_interval")

    @property
    @pulumi.getter(name="timersMinimumNeighborHold")
    def timers_minimum_neighbor_hold(self) -> int:
        return pulumi.get(self, "timers_minimum_neighbor_hold")

    @property
    @pulumi.getter(name="ttlSecurityHops")
    def ttl_security_hops(self) -> int:
        return pulumi.get(self, "ttl_security_hops")

    @property
    @pulumi.getter(name="updateSourceLoopback")
    def update_source_loopback(self) -> str:
        return pulumi.get(self, "update_source_loopback")

    @property
    @pulumi.getter
    def version(self) -> int:
        return pulumi.get(self, "version")


class AwaitableGetBgpNeighborResult(GetBgpNeighborResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBgpNeighborResult(
            asn=self.asn,
            cluster_id=self.cluster_id,
            description=self.description,
            device=self.device,
            disable_connected_check=self.disable_connected_check,
            ebgp_multihop=self.ebgp_multihop,
            ebgp_multihop_max_hop=self.ebgp_multihop_max_hop,
            fall_over_bfd_check_control_plane_failure=self.fall_over_bfd_check_control_plane_failure,
            fall_over_bfd_multi_hop=self.fall_over_bfd_multi_hop,
            fall_over_bfd_single_hop=self.fall_over_bfd_single_hop,
            fall_over_bfd_strict_mode=self.fall_over_bfd_strict_mode,
            fall_over_default_enable=self.fall_over_default_enable,
            fall_over_default_route_map=self.fall_over_default_route_map,
            fall_over_maximum_metric_route_map=self.fall_over_maximum_metric_route_map,
            id=self.id,
            ip=self.ip,
            local_as=self.local_as,
            local_as_dual_as=self.local_as_dual_as,
            local_as_no_prepend=self.local_as_no_prepend,
            local_as_replace_as=self.local_as_replace_as,
            log_neighbor_changes=self.log_neighbor_changes,
            password=self.password,
            password_type=self.password_type,
            remote_as=self.remote_as,
            shutdown=self.shutdown,
            timers_holdtime=self.timers_holdtime,
            timers_keepalive_interval=self.timers_keepalive_interval,
            timers_minimum_neighbor_hold=self.timers_minimum_neighbor_hold,
            ttl_security_hops=self.ttl_security_hops,
            update_source_loopback=self.update_source_loopback,
            version=self.version)


def get_bgp_neighbor(asn: Optional[str] = None,
                     device: Optional[str] = None,
                     ip: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBgpNeighborResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['asn'] = asn
    __args__['device'] = device
    __args__['ip'] = ip
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:iosxe/getBgpNeighbor:getBgpNeighbor', __args__, opts=opts, typ=GetBgpNeighborResult).value

    return AwaitableGetBgpNeighborResult(
        asn=pulumi.get(__ret__, 'asn'),
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        description=pulumi.get(__ret__, 'description'),
        device=pulumi.get(__ret__, 'device'),
        disable_connected_check=pulumi.get(__ret__, 'disable_connected_check'),
        ebgp_multihop=pulumi.get(__ret__, 'ebgp_multihop'),
        ebgp_multihop_max_hop=pulumi.get(__ret__, 'ebgp_multihop_max_hop'),
        fall_over_bfd_check_control_plane_failure=pulumi.get(__ret__, 'fall_over_bfd_check_control_plane_failure'),
        fall_over_bfd_multi_hop=pulumi.get(__ret__, 'fall_over_bfd_multi_hop'),
        fall_over_bfd_single_hop=pulumi.get(__ret__, 'fall_over_bfd_single_hop'),
        fall_over_bfd_strict_mode=pulumi.get(__ret__, 'fall_over_bfd_strict_mode'),
        fall_over_default_enable=pulumi.get(__ret__, 'fall_over_default_enable'),
        fall_over_default_route_map=pulumi.get(__ret__, 'fall_over_default_route_map'),
        fall_over_maximum_metric_route_map=pulumi.get(__ret__, 'fall_over_maximum_metric_route_map'),
        id=pulumi.get(__ret__, 'id'),
        ip=pulumi.get(__ret__, 'ip'),
        local_as=pulumi.get(__ret__, 'local_as'),
        local_as_dual_as=pulumi.get(__ret__, 'local_as_dual_as'),
        local_as_no_prepend=pulumi.get(__ret__, 'local_as_no_prepend'),
        local_as_replace_as=pulumi.get(__ret__, 'local_as_replace_as'),
        log_neighbor_changes=pulumi.get(__ret__, 'log_neighbor_changes'),
        password=pulumi.get(__ret__, 'password'),
        password_type=pulumi.get(__ret__, 'password_type'),
        remote_as=pulumi.get(__ret__, 'remote_as'),
        shutdown=pulumi.get(__ret__, 'shutdown'),
        timers_holdtime=pulumi.get(__ret__, 'timers_holdtime'),
        timers_keepalive_interval=pulumi.get(__ret__, 'timers_keepalive_interval'),
        timers_minimum_neighbor_hold=pulumi.get(__ret__, 'timers_minimum_neighbor_hold'),
        ttl_security_hops=pulumi.get(__ret__, 'ttl_security_hops'),
        update_source_loopback=pulumi.get(__ret__, 'update_source_loopback'),
        version=pulumi.get(__ret__, 'version'))


@_utilities.lift_output_func(get_bgp_neighbor)
def get_bgp_neighbor_output(asn: Optional[pulumi.Input[str]] = None,
                            device: Optional[pulumi.Input[Optional[str]]] = None,
                            ip: Optional[pulumi.Input[str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetBgpNeighborResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
