# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetInterfaceMplsResult',
    'AwaitableGetInterfaceMplsResult',
    'get_interface_mpls',
    'get_interface_mpls_output',
]

@pulumi.output_type
class GetInterfaceMplsResult:
    """
    A collection of values returned by getInterfaceMpls.
    """
    def __init__(__self__, device=None, id=None, ip=None, mtu=None, name=None, type=None):
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip and not isinstance(ip, bool):
            raise TypeError("Expected argument 'ip' to be a bool")
        pulumi.set(__self__, "ip", ip)
        if mtu and not isinstance(mtu, str):
            raise TypeError("Expected argument 'mtu' to be a str")
        pulumi.set(__self__, "mtu", mtu)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ip(self) -> bool:
        return pulumi.get(self, "ip")

    @property
    @pulumi.getter
    def mtu(self) -> str:
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


class AwaitableGetInterfaceMplsResult(GetInterfaceMplsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInterfaceMplsResult(
            device=self.device,
            id=self.id,
            ip=self.ip,
            mtu=self.mtu,
            name=self.name,
            type=self.type)


def get_interface_mpls(device: Optional[str] = None,
                       name: Optional[str] = None,
                       type: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInterfaceMplsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['name'] = name
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('iosxe:iosxe/getInterfaceMpls:getInterfaceMpls', __args__, opts=opts, typ=GetInterfaceMplsResult).value

    return AwaitableGetInterfaceMplsResult(
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        ip=pulumi.get(__ret__, 'ip'),
        mtu=pulumi.get(__ret__, 'mtu'),
        name=pulumi.get(__ret__, 'name'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_interface_mpls)
def get_interface_mpls_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                              name: Optional[pulumi.Input[str]] = None,
                              type: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInterfaceMplsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
