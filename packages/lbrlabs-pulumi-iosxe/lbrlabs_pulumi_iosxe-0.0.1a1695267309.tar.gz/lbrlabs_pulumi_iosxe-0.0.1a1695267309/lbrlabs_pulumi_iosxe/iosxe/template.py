# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TemplateArgs', 'Template']

@pulumi.input_type
class TemplateArgs:
    def __init__(__self__, *,
                 template_name: pulumi.Input[str],
                 access_session_closed: Optional[pulumi.Input[bool]] = None,
                 access_session_control_direction: Optional[pulumi.Input[str]] = None,
                 access_session_host_mode: Optional[pulumi.Input[str]] = None,
                 access_session_interface_template_sticky: Optional[pulumi.Input[bool]] = None,
                 access_session_interface_template_sticky_timer: Optional[pulumi.Input[int]] = None,
                 access_session_monitor: Optional[pulumi.Input[bool]] = None,
                 access_session_port_control: Optional[pulumi.Input[str]] = None,
                 authentication_periodic: Optional[pulumi.Input[bool]] = None,
                 authentication_timer_reauthenticate_range: Optional[pulumi.Input[int]] = None,
                 authentication_timer_reauthenticate_server: Optional[pulumi.Input[bool]] = None,
                 cts_manual: Optional[pulumi.Input[bool]] = None,
                 cts_manual_policy_static_sgt: Optional[pulumi.Input[int]] = None,
                 cts_manual_policy_static_trusted: Optional[pulumi.Input[bool]] = None,
                 cts_manual_propagate_sgt: Optional[pulumi.Input[bool]] = None,
                 cts_role_based_enforcement: Optional[pulumi.Input[bool]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 device_tracking: Optional[pulumi.Input[bool]] = None,
                 device_tracking_attach_policies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDeviceTrackingAttachPolicyArgs']]]] = None,
                 device_tracking_vlan_range: Optional[pulumi.Input[str]] = None,
                 dot1x_max_reauth_req: Optional[pulumi.Input[int]] = None,
                 dot1x_max_req: Optional[pulumi.Input[int]] = None,
                 dot1x_pae: Optional[pulumi.Input[str]] = None,
                 dot1x_timeout_tx_period: Optional[pulumi.Input[int]] = None,
                 ip_access_groups: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateIpAccessGroupArgs']]]] = None,
                 ip_dhcp_snooping_limit_rate: Optional[pulumi.Input[int]] = None,
                 ip_dhcp_snooping_trust: Optional[pulumi.Input[bool]] = None,
                 load_interval: Optional[pulumi.Input[int]] = None,
                 mab: Optional[pulumi.Input[bool]] = None,
                 mab_eap: Optional[pulumi.Input[bool]] = None,
                 service_policy_input: Optional[pulumi.Input[str]] = None,
                 service_policy_output: Optional[pulumi.Input[str]] = None,
                 service_policy_type_control_subscriber: Optional[pulumi.Input[str]] = None,
                 source_template: Optional[pulumi.Input[str]] = None,
                 spanning_tree_bpduguard_enable: Optional[pulumi.Input[bool]] = None,
                 spanning_tree_portfast: Optional[pulumi.Input[bool]] = None,
                 spanning_tree_portfast_disable: Optional[pulumi.Input[bool]] = None,
                 spanning_tree_portfast_edge: Optional[pulumi.Input[bool]] = None,
                 spanning_tree_portfast_network: Optional[pulumi.Input[bool]] = None,
                 spanning_tree_service_policy: Optional[pulumi.Input[bool]] = None,
                 storm_control_action_shutdown: Optional[pulumi.Input[bool]] = None,
                 storm_control_action_trap: Optional[pulumi.Input[bool]] = None,
                 storm_control_broadcast_level_bps_threshold: Optional[pulumi.Input[float]] = None,
                 storm_control_broadcast_level_pps_threshold: Optional[pulumi.Input[str]] = None,
                 storm_control_broadcast_level_threshold: Optional[pulumi.Input[float]] = None,
                 storm_control_multicast_level_bps_threshold: Optional[pulumi.Input[float]] = None,
                 storm_control_multicast_level_pps_threshold: Optional[pulumi.Input[str]] = None,
                 storm_control_multicast_level_threshold: Optional[pulumi.Input[float]] = None,
                 subscriber_aging_inactivity_timer_probe: Optional[pulumi.Input[bool]] = None,
                 subscriber_aging_inactivity_timer_value: Optional[pulumi.Input[int]] = None,
                 subscriber_aging_probe: Optional[pulumi.Input[bool]] = None,
                 switchport_access_vlan: Optional[pulumi.Input[int]] = None,
                 switchport_block_unicast: Optional[pulumi.Input[bool]] = None,
                 switchport_mode_access: Optional[pulumi.Input[bool]] = None,
                 switchport_mode_trunk: Optional[pulumi.Input[bool]] = None,
                 switchport_nonegotiate: Optional[pulumi.Input[bool]] = None,
                 switchport_port_security: Optional[pulumi.Input[bool]] = None,
                 switchport_port_security_aging_static: Optional[pulumi.Input[bool]] = None,
                 switchport_port_security_aging_time: Optional[pulumi.Input[int]] = None,
                 switchport_port_security_aging_type: Optional[pulumi.Input[bool]] = None,
                 switchport_port_security_aging_type_inactivity: Optional[pulumi.Input[bool]] = None,
                 switchport_port_security_maximum_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSwitchportPortSecurityMaximumRangeArgs']]]] = None,
                 switchport_port_security_violation_protect: Optional[pulumi.Input[bool]] = None,
                 switchport_port_security_violation_restrict: Optional[pulumi.Input[bool]] = None,
                 switchport_port_security_violation_shutdown: Optional[pulumi.Input[bool]] = None,
                 switchport_private_vlan_host_association_primary_range: Optional[pulumi.Input[int]] = None,
                 switchport_private_vlan_host_association_secondary_range: Optional[pulumi.Input[int]] = None,
                 switchport_trunk_allowed_vlans: Optional[pulumi.Input[str]] = None,
                 switchport_trunk_allowed_vlans_all: Optional[pulumi.Input[bool]] = None,
                 switchport_trunk_allowed_vlans_none: Optional[pulumi.Input[bool]] = None,
                 switchport_trunk_native_vlan_tag: Optional[pulumi.Input[bool]] = None,
                 switchport_trunk_native_vlan_vlan_id: Optional[pulumi.Input[int]] = None,
                 switchport_voice_vlan: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Template resource.
        :param pulumi.Input[str] template_name: Template name
        :param pulumi.Input[bool] access_session_closed: Enable closed access on port (disabled by default, i.e. open access)
        :param pulumi.Input[str] access_session_control_direction: Set the control-direction on the interface - Choices: `both`, `in`
        :param pulumi.Input[str] access_session_host_mode: Set the Host mode for authentication on this interface - Choices: `multi-auth`, `multi-domain`, `multi-host`,
               `single-host`
        :param pulumi.Input[bool] access_session_interface_template_sticky: Interface templates set to sticky
        :param pulumi.Input[int] access_session_interface_template_sticky_timer: Sticky timer value - Range: `1`-`65535`
        :param pulumi.Input[bool] access_session_monitor: Apply template to monitor access sessions on the port
        :param pulumi.Input[str] access_session_port_control: Set the port-control value - Choices: `auto`, `force-authorized`, `force-unauthorized`
        :param pulumi.Input[bool] authentication_periodic: Enable or Disable Reauthentication for this port
        :param pulumi.Input[int] authentication_timer_reauthenticate_range: Enter a value between 1 and 65535 - Range: `1`-`65535`
        :param pulumi.Input[bool] authentication_timer_reauthenticate_server: Obtain re-authentication timeout value from the server
        :param pulumi.Input[bool] cts_manual: Supply local configuration for CTS parameters
        :param pulumi.Input[int] cts_manual_policy_static_sgt: Source Security Group Tag to apply to untagged or non-trusted incoming traffic - Range: `2`-`65519`
        :param pulumi.Input[bool] cts_manual_policy_static_trusted: Trust the Source Group Tags (SGT) that the peer uses for sending
        :param pulumi.Input[bool] cts_manual_propagate_sgt: CTS SGT Propagation configuration
        :param pulumi.Input[bool] cts_role_based_enforcement: Enable Role-based Access Control enforcement
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] device_tracking: Configure device-tracking on the interface
        :param pulumi.Input[Sequence[pulumi.Input['TemplateDeviceTrackingAttachPolicyArgs']]] device_tracking_attach_policies: policy name for device tracking
        :param pulumi.Input[str] device_tracking_vlan_range: VLAN IDs of the VLANs for which this policy applies
        :param pulumi.Input[int] dot1x_max_reauth_req: Max No. of Reauthentication Attempts - Range: `1`-`10`
        :param pulumi.Input[int] dot1x_max_req: Max No. of Retries - Range: `1`-`10`
        :param pulumi.Input[str] dot1x_pae: Set 802.1x interface pae type - Choices: `authenticator`, `both`, `supplicant`
        :param pulumi.Input[int] dot1x_timeout_tx_period: Timeout for supplicant retries - Range: `1`-`65535`
        :param pulumi.Input[Sequence[pulumi.Input['TemplateIpAccessGroupArgs']]] ip_access_groups: Access control list for IP packets
        :param pulumi.Input[int] ip_dhcp_snooping_limit_rate: DHCP snooping rate limit - Range: `1`-`2048`
        :param pulumi.Input[bool] ip_dhcp_snooping_trust: DHCP Snooping trust config
        :param pulumi.Input[int] load_interval: Load interval delay in seconds - Range: `30`-`600`
        :param pulumi.Input[bool] mab: MAC Authentication Bypass Interface Config Commands
        :param pulumi.Input[bool] mab_eap: Use EAP authentication for MAC Auth Bypass
        :param pulumi.Input[str] service_policy_input: policy-map name
        :param pulumi.Input[str] service_policy_output: policy-map name
        :param pulumi.Input[str] service_policy_type_control_subscriber: Apply a subscriber control policy to the interface
        :param pulumi.Input[str] source_template: Get config from a template
        :param pulumi.Input[bool] spanning_tree_bpduguard_enable: Enable BPDU guard for this interface
        :param pulumi.Input[bool] spanning_tree_portfast: Portfast options for the interface
        :param pulumi.Input[bool] spanning_tree_portfast_disable: Disable portfast for this interface
        :param pulumi.Input[bool] spanning_tree_portfast_edge: Enable portfast edge on the interface
        :param pulumi.Input[bool] spanning_tree_portfast_network: Enable portfast network on the interface
        :param pulumi.Input[bool] spanning_tree_service_policy: help
        :param pulumi.Input[bool] storm_control_action_shutdown: Shutdown this interface if a storm occurs
        :param pulumi.Input[bool] storm_control_action_trap: Send SNMP trap if a storm occurs
        :param pulumi.Input[float] storm_control_broadcast_level_bps_threshold: Enter threshold
        :param pulumi.Input[str] storm_control_broadcast_level_pps_threshold: Enter threshold
        :param pulumi.Input[float] storm_control_broadcast_level_threshold: Enter threshold
        :param pulumi.Input[float] storm_control_multicast_level_bps_threshold: Enter threshold
        :param pulumi.Input[str] storm_control_multicast_level_pps_threshold: Enter threshold
        :param pulumi.Input[float] storm_control_multicast_level_threshold: Enter threshold
        :param pulumi.Input[bool] subscriber_aging_inactivity_timer_probe: ARP probe
        :param pulumi.Input[int] subscriber_aging_inactivity_timer_value: Enter a value between 1 and 65535 in seconds - Range: `1`-`65535`
        :param pulumi.Input[bool] subscriber_aging_probe: ARP probe
        :param pulumi.Input[int] switchport_access_vlan: VLAN ID of the VLAN when this port is in access mode - Range: `1`-`4094`
        :param pulumi.Input[bool] switchport_block_unicast: Block unknown unicast addresses
        :param pulumi.Input[bool] switchport_mode_access: Set trunking mode to ACCESS unconditionally
        :param pulumi.Input[bool] switchport_mode_trunk: Set trunking mode to TRUNK unconditionally
        :param pulumi.Input[bool] switchport_nonegotiate: Device will not engage in negotiation protocol on this interface
        :param pulumi.Input[bool] switchport_port_security: Security related command
        :param pulumi.Input[bool] switchport_port_security_aging_static: Enable aging for configured secure addresses
        :param pulumi.Input[int] switchport_port_security_aging_time: Port-security aging time - Range: `1`-`1440`
        :param pulumi.Input[bool] switchport_port_security_aging_type: Port-security aging type
        :param pulumi.Input[bool] switchport_port_security_aging_type_inactivity: Aging based on inactivity time period
        :param pulumi.Input[bool] switchport_port_security_violation_protect: Security violation protect mode
        :param pulumi.Input[bool] switchport_port_security_violation_restrict: Security violation restrict mode
        :param pulumi.Input[bool] switchport_port_security_violation_shutdown: Security violation shutdown mode
        :param pulumi.Input[int] switchport_private_vlan_host_association_primary_range: Primary normal range VLAN ID of the private VLAN port association - Range: `2`-`1001`
        :param pulumi.Input[int] switchport_private_vlan_host_association_secondary_range: Secondary normal range VLAN ID of the private VLAN host port association - Range: `2`-`1001`
        :param pulumi.Input[str] switchport_trunk_allowed_vlans: VLAN IDs of the allowed VLANs when this port is in trunking mode
        :param pulumi.Input[bool] switchport_trunk_allowed_vlans_all: all VLANs
        :param pulumi.Input[bool] switchport_trunk_allowed_vlans_none: no VLANs
        :param pulumi.Input[bool] switchport_trunk_native_vlan_tag: Set native VLAN tagging state
        :param pulumi.Input[int] switchport_trunk_native_vlan_vlan_id: VLAN ID of the native VLAN when this port is in trunking mode - Range: `1`-`4094`
        :param pulumi.Input[int] switchport_voice_vlan: Vlan for voice traffic - Range: `1`-`4094`
        """
        pulumi.set(__self__, "template_name", template_name)
        if access_session_closed is not None:
            pulumi.set(__self__, "access_session_closed", access_session_closed)
        if access_session_control_direction is not None:
            pulumi.set(__self__, "access_session_control_direction", access_session_control_direction)
        if access_session_host_mode is not None:
            pulumi.set(__self__, "access_session_host_mode", access_session_host_mode)
        if access_session_interface_template_sticky is not None:
            pulumi.set(__self__, "access_session_interface_template_sticky", access_session_interface_template_sticky)
        if access_session_interface_template_sticky_timer is not None:
            pulumi.set(__self__, "access_session_interface_template_sticky_timer", access_session_interface_template_sticky_timer)
        if access_session_monitor is not None:
            pulumi.set(__self__, "access_session_monitor", access_session_monitor)
        if access_session_port_control is not None:
            pulumi.set(__self__, "access_session_port_control", access_session_port_control)
        if authentication_periodic is not None:
            pulumi.set(__self__, "authentication_periodic", authentication_periodic)
        if authentication_timer_reauthenticate_range is not None:
            pulumi.set(__self__, "authentication_timer_reauthenticate_range", authentication_timer_reauthenticate_range)
        if authentication_timer_reauthenticate_server is not None:
            pulumi.set(__self__, "authentication_timer_reauthenticate_server", authentication_timer_reauthenticate_server)
        if cts_manual is not None:
            pulumi.set(__self__, "cts_manual", cts_manual)
        if cts_manual_policy_static_sgt is not None:
            pulumi.set(__self__, "cts_manual_policy_static_sgt", cts_manual_policy_static_sgt)
        if cts_manual_policy_static_trusted is not None:
            pulumi.set(__self__, "cts_manual_policy_static_trusted", cts_manual_policy_static_trusted)
        if cts_manual_propagate_sgt is not None:
            pulumi.set(__self__, "cts_manual_propagate_sgt", cts_manual_propagate_sgt)
        if cts_role_based_enforcement is not None:
            pulumi.set(__self__, "cts_role_based_enforcement", cts_role_based_enforcement)
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if device_tracking is not None:
            pulumi.set(__self__, "device_tracking", device_tracking)
        if device_tracking_attach_policies is not None:
            pulumi.set(__self__, "device_tracking_attach_policies", device_tracking_attach_policies)
        if device_tracking_vlan_range is not None:
            pulumi.set(__self__, "device_tracking_vlan_range", device_tracking_vlan_range)
        if dot1x_max_reauth_req is not None:
            pulumi.set(__self__, "dot1x_max_reauth_req", dot1x_max_reauth_req)
        if dot1x_max_req is not None:
            pulumi.set(__self__, "dot1x_max_req", dot1x_max_req)
        if dot1x_pae is not None:
            pulumi.set(__self__, "dot1x_pae", dot1x_pae)
        if dot1x_timeout_tx_period is not None:
            pulumi.set(__self__, "dot1x_timeout_tx_period", dot1x_timeout_tx_period)
        if ip_access_groups is not None:
            pulumi.set(__self__, "ip_access_groups", ip_access_groups)
        if ip_dhcp_snooping_limit_rate is not None:
            pulumi.set(__self__, "ip_dhcp_snooping_limit_rate", ip_dhcp_snooping_limit_rate)
        if ip_dhcp_snooping_trust is not None:
            pulumi.set(__self__, "ip_dhcp_snooping_trust", ip_dhcp_snooping_trust)
        if load_interval is not None:
            pulumi.set(__self__, "load_interval", load_interval)
        if mab is not None:
            pulumi.set(__self__, "mab", mab)
        if mab_eap is not None:
            pulumi.set(__self__, "mab_eap", mab_eap)
        if service_policy_input is not None:
            pulumi.set(__self__, "service_policy_input", service_policy_input)
        if service_policy_output is not None:
            pulumi.set(__self__, "service_policy_output", service_policy_output)
        if service_policy_type_control_subscriber is not None:
            pulumi.set(__self__, "service_policy_type_control_subscriber", service_policy_type_control_subscriber)
        if source_template is not None:
            pulumi.set(__self__, "source_template", source_template)
        if spanning_tree_bpduguard_enable is not None:
            pulumi.set(__self__, "spanning_tree_bpduguard_enable", spanning_tree_bpduguard_enable)
        if spanning_tree_portfast is not None:
            pulumi.set(__self__, "spanning_tree_portfast", spanning_tree_portfast)
        if spanning_tree_portfast_disable is not None:
            pulumi.set(__self__, "spanning_tree_portfast_disable", spanning_tree_portfast_disable)
        if spanning_tree_portfast_edge is not None:
            pulumi.set(__self__, "spanning_tree_portfast_edge", spanning_tree_portfast_edge)
        if spanning_tree_portfast_network is not None:
            pulumi.set(__self__, "spanning_tree_portfast_network", spanning_tree_portfast_network)
        if spanning_tree_service_policy is not None:
            pulumi.set(__self__, "spanning_tree_service_policy", spanning_tree_service_policy)
        if storm_control_action_shutdown is not None:
            pulumi.set(__self__, "storm_control_action_shutdown", storm_control_action_shutdown)
        if storm_control_action_trap is not None:
            pulumi.set(__self__, "storm_control_action_trap", storm_control_action_trap)
        if storm_control_broadcast_level_bps_threshold is not None:
            pulumi.set(__self__, "storm_control_broadcast_level_bps_threshold", storm_control_broadcast_level_bps_threshold)
        if storm_control_broadcast_level_pps_threshold is not None:
            pulumi.set(__self__, "storm_control_broadcast_level_pps_threshold", storm_control_broadcast_level_pps_threshold)
        if storm_control_broadcast_level_threshold is not None:
            pulumi.set(__self__, "storm_control_broadcast_level_threshold", storm_control_broadcast_level_threshold)
        if storm_control_multicast_level_bps_threshold is not None:
            pulumi.set(__self__, "storm_control_multicast_level_bps_threshold", storm_control_multicast_level_bps_threshold)
        if storm_control_multicast_level_pps_threshold is not None:
            pulumi.set(__self__, "storm_control_multicast_level_pps_threshold", storm_control_multicast_level_pps_threshold)
        if storm_control_multicast_level_threshold is not None:
            pulumi.set(__self__, "storm_control_multicast_level_threshold", storm_control_multicast_level_threshold)
        if subscriber_aging_inactivity_timer_probe is not None:
            pulumi.set(__self__, "subscriber_aging_inactivity_timer_probe", subscriber_aging_inactivity_timer_probe)
        if subscriber_aging_inactivity_timer_value is not None:
            pulumi.set(__self__, "subscriber_aging_inactivity_timer_value", subscriber_aging_inactivity_timer_value)
        if subscriber_aging_probe is not None:
            pulumi.set(__self__, "subscriber_aging_probe", subscriber_aging_probe)
        if switchport_access_vlan is not None:
            pulumi.set(__self__, "switchport_access_vlan", switchport_access_vlan)
        if switchport_block_unicast is not None:
            pulumi.set(__self__, "switchport_block_unicast", switchport_block_unicast)
        if switchport_mode_access is not None:
            pulumi.set(__self__, "switchport_mode_access", switchport_mode_access)
        if switchport_mode_trunk is not None:
            pulumi.set(__self__, "switchport_mode_trunk", switchport_mode_trunk)
        if switchport_nonegotiate is not None:
            pulumi.set(__self__, "switchport_nonegotiate", switchport_nonegotiate)
        if switchport_port_security is not None:
            pulumi.set(__self__, "switchport_port_security", switchport_port_security)
        if switchport_port_security_aging_static is not None:
            pulumi.set(__self__, "switchport_port_security_aging_static", switchport_port_security_aging_static)
        if switchport_port_security_aging_time is not None:
            pulumi.set(__self__, "switchport_port_security_aging_time", switchport_port_security_aging_time)
        if switchport_port_security_aging_type is not None:
            pulumi.set(__self__, "switchport_port_security_aging_type", switchport_port_security_aging_type)
        if switchport_port_security_aging_type_inactivity is not None:
            pulumi.set(__self__, "switchport_port_security_aging_type_inactivity", switchport_port_security_aging_type_inactivity)
        if switchport_port_security_maximum_ranges is not None:
            pulumi.set(__self__, "switchport_port_security_maximum_ranges", switchport_port_security_maximum_ranges)
        if switchport_port_security_violation_protect is not None:
            pulumi.set(__self__, "switchport_port_security_violation_protect", switchport_port_security_violation_protect)
        if switchport_port_security_violation_restrict is not None:
            pulumi.set(__self__, "switchport_port_security_violation_restrict", switchport_port_security_violation_restrict)
        if switchport_port_security_violation_shutdown is not None:
            pulumi.set(__self__, "switchport_port_security_violation_shutdown", switchport_port_security_violation_shutdown)
        if switchport_private_vlan_host_association_primary_range is not None:
            pulumi.set(__self__, "switchport_private_vlan_host_association_primary_range", switchport_private_vlan_host_association_primary_range)
        if switchport_private_vlan_host_association_secondary_range is not None:
            pulumi.set(__self__, "switchport_private_vlan_host_association_secondary_range", switchport_private_vlan_host_association_secondary_range)
        if switchport_trunk_allowed_vlans is not None:
            pulumi.set(__self__, "switchport_trunk_allowed_vlans", switchport_trunk_allowed_vlans)
        if switchport_trunk_allowed_vlans_all is not None:
            pulumi.set(__self__, "switchport_trunk_allowed_vlans_all", switchport_trunk_allowed_vlans_all)
        if switchport_trunk_allowed_vlans_none is not None:
            pulumi.set(__self__, "switchport_trunk_allowed_vlans_none", switchport_trunk_allowed_vlans_none)
        if switchport_trunk_native_vlan_tag is not None:
            pulumi.set(__self__, "switchport_trunk_native_vlan_tag", switchport_trunk_native_vlan_tag)
        if switchport_trunk_native_vlan_vlan_id is not None:
            pulumi.set(__self__, "switchport_trunk_native_vlan_vlan_id", switchport_trunk_native_vlan_vlan_id)
        if switchport_voice_vlan is not None:
            pulumi.set(__self__, "switchport_voice_vlan", switchport_voice_vlan)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Input[str]:
        """
        Template name
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "template_name", value)

    @property
    @pulumi.getter(name="accessSessionClosed")
    def access_session_closed(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable closed access on port (disabled by default, i.e. open access)
        """
        return pulumi.get(self, "access_session_closed")

    @access_session_closed.setter
    def access_session_closed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "access_session_closed", value)

    @property
    @pulumi.getter(name="accessSessionControlDirection")
    def access_session_control_direction(self) -> Optional[pulumi.Input[str]]:
        """
        Set the control-direction on the interface - Choices: `both`, `in`
        """
        return pulumi.get(self, "access_session_control_direction")

    @access_session_control_direction.setter
    def access_session_control_direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_session_control_direction", value)

    @property
    @pulumi.getter(name="accessSessionHostMode")
    def access_session_host_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Set the Host mode for authentication on this interface - Choices: `multi-auth`, `multi-domain`, `multi-host`,
        `single-host`
        """
        return pulumi.get(self, "access_session_host_mode")

    @access_session_host_mode.setter
    def access_session_host_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_session_host_mode", value)

    @property
    @pulumi.getter(name="accessSessionInterfaceTemplateSticky")
    def access_session_interface_template_sticky(self) -> Optional[pulumi.Input[bool]]:
        """
        Interface templates set to sticky
        """
        return pulumi.get(self, "access_session_interface_template_sticky")

    @access_session_interface_template_sticky.setter
    def access_session_interface_template_sticky(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "access_session_interface_template_sticky", value)

    @property
    @pulumi.getter(name="accessSessionInterfaceTemplateStickyTimer")
    def access_session_interface_template_sticky_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Sticky timer value - Range: `1`-`65535`
        """
        return pulumi.get(self, "access_session_interface_template_sticky_timer")

    @access_session_interface_template_sticky_timer.setter
    def access_session_interface_template_sticky_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "access_session_interface_template_sticky_timer", value)

    @property
    @pulumi.getter(name="accessSessionMonitor")
    def access_session_monitor(self) -> Optional[pulumi.Input[bool]]:
        """
        Apply template to monitor access sessions on the port
        """
        return pulumi.get(self, "access_session_monitor")

    @access_session_monitor.setter
    def access_session_monitor(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "access_session_monitor", value)

    @property
    @pulumi.getter(name="accessSessionPortControl")
    def access_session_port_control(self) -> Optional[pulumi.Input[str]]:
        """
        Set the port-control value - Choices: `auto`, `force-authorized`, `force-unauthorized`
        """
        return pulumi.get(self, "access_session_port_control")

    @access_session_port_control.setter
    def access_session_port_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_session_port_control", value)

    @property
    @pulumi.getter(name="authenticationPeriodic")
    def authentication_periodic(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable or Disable Reauthentication for this port
        """
        return pulumi.get(self, "authentication_periodic")

    @authentication_periodic.setter
    def authentication_periodic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authentication_periodic", value)

    @property
    @pulumi.getter(name="authenticationTimerReauthenticateRange")
    def authentication_timer_reauthenticate_range(self) -> Optional[pulumi.Input[int]]:
        """
        Enter a value between 1 and 65535 - Range: `1`-`65535`
        """
        return pulumi.get(self, "authentication_timer_reauthenticate_range")

    @authentication_timer_reauthenticate_range.setter
    def authentication_timer_reauthenticate_range(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "authentication_timer_reauthenticate_range", value)

    @property
    @pulumi.getter(name="authenticationTimerReauthenticateServer")
    def authentication_timer_reauthenticate_server(self) -> Optional[pulumi.Input[bool]]:
        """
        Obtain re-authentication timeout value from the server
        """
        return pulumi.get(self, "authentication_timer_reauthenticate_server")

    @authentication_timer_reauthenticate_server.setter
    def authentication_timer_reauthenticate_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authentication_timer_reauthenticate_server", value)

    @property
    @pulumi.getter(name="ctsManual")
    def cts_manual(self) -> Optional[pulumi.Input[bool]]:
        """
        Supply local configuration for CTS parameters
        """
        return pulumi.get(self, "cts_manual")

    @cts_manual.setter
    def cts_manual(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cts_manual", value)

    @property
    @pulumi.getter(name="ctsManualPolicyStaticSgt")
    def cts_manual_policy_static_sgt(self) -> Optional[pulumi.Input[int]]:
        """
        Source Security Group Tag to apply to untagged or non-trusted incoming traffic - Range: `2`-`65519`
        """
        return pulumi.get(self, "cts_manual_policy_static_sgt")

    @cts_manual_policy_static_sgt.setter
    def cts_manual_policy_static_sgt(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cts_manual_policy_static_sgt", value)

    @property
    @pulumi.getter(name="ctsManualPolicyStaticTrusted")
    def cts_manual_policy_static_trusted(self) -> Optional[pulumi.Input[bool]]:
        """
        Trust the Source Group Tags (SGT) that the peer uses for sending
        """
        return pulumi.get(self, "cts_manual_policy_static_trusted")

    @cts_manual_policy_static_trusted.setter
    def cts_manual_policy_static_trusted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cts_manual_policy_static_trusted", value)

    @property
    @pulumi.getter(name="ctsManualPropagateSgt")
    def cts_manual_propagate_sgt(self) -> Optional[pulumi.Input[bool]]:
        """
        CTS SGT Propagation configuration
        """
        return pulumi.get(self, "cts_manual_propagate_sgt")

    @cts_manual_propagate_sgt.setter
    def cts_manual_propagate_sgt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cts_manual_propagate_sgt", value)

    @property
    @pulumi.getter(name="ctsRoleBasedEnforcement")
    def cts_role_based_enforcement(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Role-based Access Control enforcement
        """
        return pulumi.get(self, "cts_role_based_enforcement")

    @cts_role_based_enforcement.setter
    def cts_role_based_enforcement(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cts_role_based_enforcement", value)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="deviceTracking")
    def device_tracking(self) -> Optional[pulumi.Input[bool]]:
        """
        Configure device-tracking on the interface
        """
        return pulumi.get(self, "device_tracking")

    @device_tracking.setter
    def device_tracking(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "device_tracking", value)

    @property
    @pulumi.getter(name="deviceTrackingAttachPolicies")
    def device_tracking_attach_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDeviceTrackingAttachPolicyArgs']]]]:
        """
        policy name for device tracking
        """
        return pulumi.get(self, "device_tracking_attach_policies")

    @device_tracking_attach_policies.setter
    def device_tracking_attach_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDeviceTrackingAttachPolicyArgs']]]]):
        pulumi.set(self, "device_tracking_attach_policies", value)

    @property
    @pulumi.getter(name="deviceTrackingVlanRange")
    def device_tracking_vlan_range(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN IDs of the VLANs for which this policy applies
        """
        return pulumi.get(self, "device_tracking_vlan_range")

    @device_tracking_vlan_range.setter
    def device_tracking_vlan_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_tracking_vlan_range", value)

    @property
    @pulumi.getter(name="dot1xMaxReauthReq")
    def dot1x_max_reauth_req(self) -> Optional[pulumi.Input[int]]:
        """
        Max No. of Reauthentication Attempts - Range: `1`-`10`
        """
        return pulumi.get(self, "dot1x_max_reauth_req")

    @dot1x_max_reauth_req.setter
    def dot1x_max_reauth_req(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dot1x_max_reauth_req", value)

    @property
    @pulumi.getter(name="dot1xMaxReq")
    def dot1x_max_req(self) -> Optional[pulumi.Input[int]]:
        """
        Max No. of Retries - Range: `1`-`10`
        """
        return pulumi.get(self, "dot1x_max_req")

    @dot1x_max_req.setter
    def dot1x_max_req(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dot1x_max_req", value)

    @property
    @pulumi.getter(name="dot1xPae")
    def dot1x_pae(self) -> Optional[pulumi.Input[str]]:
        """
        Set 802.1x interface pae type - Choices: `authenticator`, `both`, `supplicant`
        """
        return pulumi.get(self, "dot1x_pae")

    @dot1x_pae.setter
    def dot1x_pae(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dot1x_pae", value)

    @property
    @pulumi.getter(name="dot1xTimeoutTxPeriod")
    def dot1x_timeout_tx_period(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout for supplicant retries - Range: `1`-`65535`
        """
        return pulumi.get(self, "dot1x_timeout_tx_period")

    @dot1x_timeout_tx_period.setter
    def dot1x_timeout_tx_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dot1x_timeout_tx_period", value)

    @property
    @pulumi.getter(name="ipAccessGroups")
    def ip_access_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateIpAccessGroupArgs']]]]:
        """
        Access control list for IP packets
        """
        return pulumi.get(self, "ip_access_groups")

    @ip_access_groups.setter
    def ip_access_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateIpAccessGroupArgs']]]]):
        pulumi.set(self, "ip_access_groups", value)

    @property
    @pulumi.getter(name="ipDhcpSnoopingLimitRate")
    def ip_dhcp_snooping_limit_rate(self) -> Optional[pulumi.Input[int]]:
        """
        DHCP snooping rate limit - Range: `1`-`2048`
        """
        return pulumi.get(self, "ip_dhcp_snooping_limit_rate")

    @ip_dhcp_snooping_limit_rate.setter
    def ip_dhcp_snooping_limit_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip_dhcp_snooping_limit_rate", value)

    @property
    @pulumi.getter(name="ipDhcpSnoopingTrust")
    def ip_dhcp_snooping_trust(self) -> Optional[pulumi.Input[bool]]:
        """
        DHCP Snooping trust config
        """
        return pulumi.get(self, "ip_dhcp_snooping_trust")

    @ip_dhcp_snooping_trust.setter
    def ip_dhcp_snooping_trust(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_dhcp_snooping_trust", value)

    @property
    @pulumi.getter(name="loadInterval")
    def load_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Load interval delay in seconds - Range: `30`-`600`
        """
        return pulumi.get(self, "load_interval")

    @load_interval.setter
    def load_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "load_interval", value)

    @property
    @pulumi.getter
    def mab(self) -> Optional[pulumi.Input[bool]]:
        """
        MAC Authentication Bypass Interface Config Commands
        """
        return pulumi.get(self, "mab")

    @mab.setter
    def mab(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mab", value)

    @property
    @pulumi.getter(name="mabEap")
    def mab_eap(self) -> Optional[pulumi.Input[bool]]:
        """
        Use EAP authentication for MAC Auth Bypass
        """
        return pulumi.get(self, "mab_eap")

    @mab_eap.setter
    def mab_eap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mab_eap", value)

    @property
    @pulumi.getter(name="servicePolicyInput")
    def service_policy_input(self) -> Optional[pulumi.Input[str]]:
        """
        policy-map name
        """
        return pulumi.get(self, "service_policy_input")

    @service_policy_input.setter
    def service_policy_input(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_policy_input", value)

    @property
    @pulumi.getter(name="servicePolicyOutput")
    def service_policy_output(self) -> Optional[pulumi.Input[str]]:
        """
        policy-map name
        """
        return pulumi.get(self, "service_policy_output")

    @service_policy_output.setter
    def service_policy_output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_policy_output", value)

    @property
    @pulumi.getter(name="servicePolicyTypeControlSubscriber")
    def service_policy_type_control_subscriber(self) -> Optional[pulumi.Input[str]]:
        """
        Apply a subscriber control policy to the interface
        """
        return pulumi.get(self, "service_policy_type_control_subscriber")

    @service_policy_type_control_subscriber.setter
    def service_policy_type_control_subscriber(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_policy_type_control_subscriber", value)

    @property
    @pulumi.getter(name="sourceTemplate")
    def source_template(self) -> Optional[pulumi.Input[str]]:
        """
        Get config from a template
        """
        return pulumi.get(self, "source_template")

    @source_template.setter
    def source_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_template", value)

    @property
    @pulumi.getter(name="spanningTreeBpduguardEnable")
    def spanning_tree_bpduguard_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable BPDU guard for this interface
        """
        return pulumi.get(self, "spanning_tree_bpduguard_enable")

    @spanning_tree_bpduguard_enable.setter
    def spanning_tree_bpduguard_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "spanning_tree_bpduguard_enable", value)

    @property
    @pulumi.getter(name="spanningTreePortfast")
    def spanning_tree_portfast(self) -> Optional[pulumi.Input[bool]]:
        """
        Portfast options for the interface
        """
        return pulumi.get(self, "spanning_tree_portfast")

    @spanning_tree_portfast.setter
    def spanning_tree_portfast(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "spanning_tree_portfast", value)

    @property
    @pulumi.getter(name="spanningTreePortfastDisable")
    def spanning_tree_portfast_disable(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable portfast for this interface
        """
        return pulumi.get(self, "spanning_tree_portfast_disable")

    @spanning_tree_portfast_disable.setter
    def spanning_tree_portfast_disable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "spanning_tree_portfast_disable", value)

    @property
    @pulumi.getter(name="spanningTreePortfastEdge")
    def spanning_tree_portfast_edge(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable portfast edge on the interface
        """
        return pulumi.get(self, "spanning_tree_portfast_edge")

    @spanning_tree_portfast_edge.setter
    def spanning_tree_portfast_edge(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "spanning_tree_portfast_edge", value)

    @property
    @pulumi.getter(name="spanningTreePortfastNetwork")
    def spanning_tree_portfast_network(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable portfast network on the interface
        """
        return pulumi.get(self, "spanning_tree_portfast_network")

    @spanning_tree_portfast_network.setter
    def spanning_tree_portfast_network(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "spanning_tree_portfast_network", value)

    @property
    @pulumi.getter(name="spanningTreeServicePolicy")
    def spanning_tree_service_policy(self) -> Optional[pulumi.Input[bool]]:
        """
        help
        """
        return pulumi.get(self, "spanning_tree_service_policy")

    @spanning_tree_service_policy.setter
    def spanning_tree_service_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "spanning_tree_service_policy", value)

    @property
    @pulumi.getter(name="stormControlActionShutdown")
    def storm_control_action_shutdown(self) -> Optional[pulumi.Input[bool]]:
        """
        Shutdown this interface if a storm occurs
        """
        return pulumi.get(self, "storm_control_action_shutdown")

    @storm_control_action_shutdown.setter
    def storm_control_action_shutdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "storm_control_action_shutdown", value)

    @property
    @pulumi.getter(name="stormControlActionTrap")
    def storm_control_action_trap(self) -> Optional[pulumi.Input[bool]]:
        """
        Send SNMP trap if a storm occurs
        """
        return pulumi.get(self, "storm_control_action_trap")

    @storm_control_action_trap.setter
    def storm_control_action_trap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "storm_control_action_trap", value)

    @property
    @pulumi.getter(name="stormControlBroadcastLevelBpsThreshold")
    def storm_control_broadcast_level_bps_threshold(self) -> Optional[pulumi.Input[float]]:
        """
        Enter threshold
        """
        return pulumi.get(self, "storm_control_broadcast_level_bps_threshold")

    @storm_control_broadcast_level_bps_threshold.setter
    def storm_control_broadcast_level_bps_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "storm_control_broadcast_level_bps_threshold", value)

    @property
    @pulumi.getter(name="stormControlBroadcastLevelPpsThreshold")
    def storm_control_broadcast_level_pps_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Enter threshold
        """
        return pulumi.get(self, "storm_control_broadcast_level_pps_threshold")

    @storm_control_broadcast_level_pps_threshold.setter
    def storm_control_broadcast_level_pps_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storm_control_broadcast_level_pps_threshold", value)

    @property
    @pulumi.getter(name="stormControlBroadcastLevelThreshold")
    def storm_control_broadcast_level_threshold(self) -> Optional[pulumi.Input[float]]:
        """
        Enter threshold
        """
        return pulumi.get(self, "storm_control_broadcast_level_threshold")

    @storm_control_broadcast_level_threshold.setter
    def storm_control_broadcast_level_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "storm_control_broadcast_level_threshold", value)

    @property
    @pulumi.getter(name="stormControlMulticastLevelBpsThreshold")
    def storm_control_multicast_level_bps_threshold(self) -> Optional[pulumi.Input[float]]:
        """
        Enter threshold
        """
        return pulumi.get(self, "storm_control_multicast_level_bps_threshold")

    @storm_control_multicast_level_bps_threshold.setter
    def storm_control_multicast_level_bps_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "storm_control_multicast_level_bps_threshold", value)

    @property
    @pulumi.getter(name="stormControlMulticastLevelPpsThreshold")
    def storm_control_multicast_level_pps_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Enter threshold
        """
        return pulumi.get(self, "storm_control_multicast_level_pps_threshold")

    @storm_control_multicast_level_pps_threshold.setter
    def storm_control_multicast_level_pps_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storm_control_multicast_level_pps_threshold", value)

    @property
    @pulumi.getter(name="stormControlMulticastLevelThreshold")
    def storm_control_multicast_level_threshold(self) -> Optional[pulumi.Input[float]]:
        """
        Enter threshold
        """
        return pulumi.get(self, "storm_control_multicast_level_threshold")

    @storm_control_multicast_level_threshold.setter
    def storm_control_multicast_level_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "storm_control_multicast_level_threshold", value)

    @property
    @pulumi.getter(name="subscriberAgingInactivityTimerProbe")
    def subscriber_aging_inactivity_timer_probe(self) -> Optional[pulumi.Input[bool]]:
        """
        ARP probe
        """
        return pulumi.get(self, "subscriber_aging_inactivity_timer_probe")

    @subscriber_aging_inactivity_timer_probe.setter
    def subscriber_aging_inactivity_timer_probe(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "subscriber_aging_inactivity_timer_probe", value)

    @property
    @pulumi.getter(name="subscriberAgingInactivityTimerValue")
    def subscriber_aging_inactivity_timer_value(self) -> Optional[pulumi.Input[int]]:
        """
        Enter a value between 1 and 65535 in seconds - Range: `1`-`65535`
        """
        return pulumi.get(self, "subscriber_aging_inactivity_timer_value")

    @subscriber_aging_inactivity_timer_value.setter
    def subscriber_aging_inactivity_timer_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "subscriber_aging_inactivity_timer_value", value)

    @property
    @pulumi.getter(name="subscriberAgingProbe")
    def subscriber_aging_probe(self) -> Optional[pulumi.Input[bool]]:
        """
        ARP probe
        """
        return pulumi.get(self, "subscriber_aging_probe")

    @subscriber_aging_probe.setter
    def subscriber_aging_probe(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "subscriber_aging_probe", value)

    @property
    @pulumi.getter(name="switchportAccessVlan")
    def switchport_access_vlan(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN ID of the VLAN when this port is in access mode - Range: `1`-`4094`
        """
        return pulumi.get(self, "switchport_access_vlan")

    @switchport_access_vlan.setter
    def switchport_access_vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switchport_access_vlan", value)

    @property
    @pulumi.getter(name="switchportBlockUnicast")
    def switchport_block_unicast(self) -> Optional[pulumi.Input[bool]]:
        """
        Block unknown unicast addresses
        """
        return pulumi.get(self, "switchport_block_unicast")

    @switchport_block_unicast.setter
    def switchport_block_unicast(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switchport_block_unicast", value)

    @property
    @pulumi.getter(name="switchportModeAccess")
    def switchport_mode_access(self) -> Optional[pulumi.Input[bool]]:
        """
        Set trunking mode to ACCESS unconditionally
        """
        return pulumi.get(self, "switchport_mode_access")

    @switchport_mode_access.setter
    def switchport_mode_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switchport_mode_access", value)

    @property
    @pulumi.getter(name="switchportModeTrunk")
    def switchport_mode_trunk(self) -> Optional[pulumi.Input[bool]]:
        """
        Set trunking mode to TRUNK unconditionally
        """
        return pulumi.get(self, "switchport_mode_trunk")

    @switchport_mode_trunk.setter
    def switchport_mode_trunk(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switchport_mode_trunk", value)

    @property
    @pulumi.getter(name="switchportNonegotiate")
    def switchport_nonegotiate(self) -> Optional[pulumi.Input[bool]]:
        """
        Device will not engage in negotiation protocol on this interface
        """
        return pulumi.get(self, "switchport_nonegotiate")

    @switchport_nonegotiate.setter
    def switchport_nonegotiate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switchport_nonegotiate", value)

    @property
    @pulumi.getter(name="switchportPortSecurity")
    def switchport_port_security(self) -> Optional[pulumi.Input[bool]]:
        """
        Security related command
        """
        return pulumi.get(self, "switchport_port_security")

    @switchport_port_security.setter
    def switchport_port_security(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switchport_port_security", value)

    @property
    @pulumi.getter(name="switchportPortSecurityAgingStatic")
    def switchport_port_security_aging_static(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable aging for configured secure addresses
        """
        return pulumi.get(self, "switchport_port_security_aging_static")

    @switchport_port_security_aging_static.setter
    def switchport_port_security_aging_static(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switchport_port_security_aging_static", value)

    @property
    @pulumi.getter(name="switchportPortSecurityAgingTime")
    def switchport_port_security_aging_time(self) -> Optional[pulumi.Input[int]]:
        """
        Port-security aging time - Range: `1`-`1440`
        """
        return pulumi.get(self, "switchport_port_security_aging_time")

    @switchport_port_security_aging_time.setter
    def switchport_port_security_aging_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switchport_port_security_aging_time", value)

    @property
    @pulumi.getter(name="switchportPortSecurityAgingType")
    def switchport_port_security_aging_type(self) -> Optional[pulumi.Input[bool]]:
        """
        Port-security aging type
        """
        return pulumi.get(self, "switchport_port_security_aging_type")

    @switchport_port_security_aging_type.setter
    def switchport_port_security_aging_type(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switchport_port_security_aging_type", value)

    @property
    @pulumi.getter(name="switchportPortSecurityAgingTypeInactivity")
    def switchport_port_security_aging_type_inactivity(self) -> Optional[pulumi.Input[bool]]:
        """
        Aging based on inactivity time period
        """
        return pulumi.get(self, "switchport_port_security_aging_type_inactivity")

    @switchport_port_security_aging_type_inactivity.setter
    def switchport_port_security_aging_type_inactivity(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switchport_port_security_aging_type_inactivity", value)

    @property
    @pulumi.getter(name="switchportPortSecurityMaximumRanges")
    def switchport_port_security_maximum_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSwitchportPortSecurityMaximumRangeArgs']]]]:
        return pulumi.get(self, "switchport_port_security_maximum_ranges")

    @switchport_port_security_maximum_ranges.setter
    def switchport_port_security_maximum_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSwitchportPortSecurityMaximumRangeArgs']]]]):
        pulumi.set(self, "switchport_port_security_maximum_ranges", value)

    @property
    @pulumi.getter(name="switchportPortSecurityViolationProtect")
    def switchport_port_security_violation_protect(self) -> Optional[pulumi.Input[bool]]:
        """
        Security violation protect mode
        """
        return pulumi.get(self, "switchport_port_security_violation_protect")

    @switchport_port_security_violation_protect.setter
    def switchport_port_security_violation_protect(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switchport_port_security_violation_protect", value)

    @property
    @pulumi.getter(name="switchportPortSecurityViolationRestrict")
    def switchport_port_security_violation_restrict(self) -> Optional[pulumi.Input[bool]]:
        """
        Security violation restrict mode
        """
        return pulumi.get(self, "switchport_port_security_violation_restrict")

    @switchport_port_security_violation_restrict.setter
    def switchport_port_security_violation_restrict(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switchport_port_security_violation_restrict", value)

    @property
    @pulumi.getter(name="switchportPortSecurityViolationShutdown")
    def switchport_port_security_violation_shutdown(self) -> Optional[pulumi.Input[bool]]:
        """
        Security violation shutdown mode
        """
        return pulumi.get(self, "switchport_port_security_violation_shutdown")

    @switchport_port_security_violation_shutdown.setter
    def switchport_port_security_violation_shutdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switchport_port_security_violation_shutdown", value)

    @property
    @pulumi.getter(name="switchportPrivateVlanHostAssociationPrimaryRange")
    def switchport_private_vlan_host_association_primary_range(self) -> Optional[pulumi.Input[int]]:
        """
        Primary normal range VLAN ID of the private VLAN port association - Range: `2`-`1001`
        """
        return pulumi.get(self, "switchport_private_vlan_host_association_primary_range")

    @switchport_private_vlan_host_association_primary_range.setter
    def switchport_private_vlan_host_association_primary_range(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switchport_private_vlan_host_association_primary_range", value)

    @property
    @pulumi.getter(name="switchportPrivateVlanHostAssociationSecondaryRange")
    def switchport_private_vlan_host_association_secondary_range(self) -> Optional[pulumi.Input[int]]:
        """
        Secondary normal range VLAN ID of the private VLAN host port association - Range: `2`-`1001`
        """
        return pulumi.get(self, "switchport_private_vlan_host_association_secondary_range")

    @switchport_private_vlan_host_association_secondary_range.setter
    def switchport_private_vlan_host_association_secondary_range(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switchport_private_vlan_host_association_secondary_range", value)

    @property
    @pulumi.getter(name="switchportTrunkAllowedVlans")
    def switchport_trunk_allowed_vlans(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN IDs of the allowed VLANs when this port is in trunking mode
        """
        return pulumi.get(self, "switchport_trunk_allowed_vlans")

    @switchport_trunk_allowed_vlans.setter
    def switchport_trunk_allowed_vlans(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switchport_trunk_allowed_vlans", value)

    @property
    @pulumi.getter(name="switchportTrunkAllowedVlansAll")
    def switchport_trunk_allowed_vlans_all(self) -> Optional[pulumi.Input[bool]]:
        """
        all VLANs
        """
        return pulumi.get(self, "switchport_trunk_allowed_vlans_all")

    @switchport_trunk_allowed_vlans_all.setter
    def switchport_trunk_allowed_vlans_all(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switchport_trunk_allowed_vlans_all", value)

    @property
    @pulumi.getter(name="switchportTrunkAllowedVlansNone")
    def switchport_trunk_allowed_vlans_none(self) -> Optional[pulumi.Input[bool]]:
        """
        no VLANs
        """
        return pulumi.get(self, "switchport_trunk_allowed_vlans_none")

    @switchport_trunk_allowed_vlans_none.setter
    def switchport_trunk_allowed_vlans_none(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switchport_trunk_allowed_vlans_none", value)

    @property
    @pulumi.getter(name="switchportTrunkNativeVlanTag")
    def switchport_trunk_native_vlan_tag(self) -> Optional[pulumi.Input[bool]]:
        """
        Set native VLAN tagging state
        """
        return pulumi.get(self, "switchport_trunk_native_vlan_tag")

    @switchport_trunk_native_vlan_tag.setter
    def switchport_trunk_native_vlan_tag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switchport_trunk_native_vlan_tag", value)

    @property
    @pulumi.getter(name="switchportTrunkNativeVlanVlanId")
    def switchport_trunk_native_vlan_vlan_id(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN ID of the native VLAN when this port is in trunking mode - Range: `1`-`4094`
        """
        return pulumi.get(self, "switchport_trunk_native_vlan_vlan_id")

    @switchport_trunk_native_vlan_vlan_id.setter
    def switchport_trunk_native_vlan_vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switchport_trunk_native_vlan_vlan_id", value)

    @property
    @pulumi.getter(name="switchportVoiceVlan")
    def switchport_voice_vlan(self) -> Optional[pulumi.Input[int]]:
        """
        Vlan for voice traffic - Range: `1`-`4094`
        """
        return pulumi.get(self, "switchport_voice_vlan")

    @switchport_voice_vlan.setter
    def switchport_voice_vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switchport_voice_vlan", value)


@pulumi.input_type
class _TemplateState:
    def __init__(__self__, *,
                 access_session_closed: Optional[pulumi.Input[bool]] = None,
                 access_session_control_direction: Optional[pulumi.Input[str]] = None,
                 access_session_host_mode: Optional[pulumi.Input[str]] = None,
                 access_session_interface_template_sticky: Optional[pulumi.Input[bool]] = None,
                 access_session_interface_template_sticky_timer: Optional[pulumi.Input[int]] = None,
                 access_session_monitor: Optional[pulumi.Input[bool]] = None,
                 access_session_port_control: Optional[pulumi.Input[str]] = None,
                 authentication_periodic: Optional[pulumi.Input[bool]] = None,
                 authentication_timer_reauthenticate_range: Optional[pulumi.Input[int]] = None,
                 authentication_timer_reauthenticate_server: Optional[pulumi.Input[bool]] = None,
                 cts_manual: Optional[pulumi.Input[bool]] = None,
                 cts_manual_policy_static_sgt: Optional[pulumi.Input[int]] = None,
                 cts_manual_policy_static_trusted: Optional[pulumi.Input[bool]] = None,
                 cts_manual_propagate_sgt: Optional[pulumi.Input[bool]] = None,
                 cts_role_based_enforcement: Optional[pulumi.Input[bool]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 device_tracking: Optional[pulumi.Input[bool]] = None,
                 device_tracking_attach_policies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDeviceTrackingAttachPolicyArgs']]]] = None,
                 device_tracking_vlan_range: Optional[pulumi.Input[str]] = None,
                 dot1x_max_reauth_req: Optional[pulumi.Input[int]] = None,
                 dot1x_max_req: Optional[pulumi.Input[int]] = None,
                 dot1x_pae: Optional[pulumi.Input[str]] = None,
                 dot1x_timeout_tx_period: Optional[pulumi.Input[int]] = None,
                 ip_access_groups: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateIpAccessGroupArgs']]]] = None,
                 ip_dhcp_snooping_limit_rate: Optional[pulumi.Input[int]] = None,
                 ip_dhcp_snooping_trust: Optional[pulumi.Input[bool]] = None,
                 load_interval: Optional[pulumi.Input[int]] = None,
                 mab: Optional[pulumi.Input[bool]] = None,
                 mab_eap: Optional[pulumi.Input[bool]] = None,
                 service_policy_input: Optional[pulumi.Input[str]] = None,
                 service_policy_output: Optional[pulumi.Input[str]] = None,
                 service_policy_type_control_subscriber: Optional[pulumi.Input[str]] = None,
                 source_template: Optional[pulumi.Input[str]] = None,
                 spanning_tree_bpduguard_enable: Optional[pulumi.Input[bool]] = None,
                 spanning_tree_portfast: Optional[pulumi.Input[bool]] = None,
                 spanning_tree_portfast_disable: Optional[pulumi.Input[bool]] = None,
                 spanning_tree_portfast_edge: Optional[pulumi.Input[bool]] = None,
                 spanning_tree_portfast_network: Optional[pulumi.Input[bool]] = None,
                 spanning_tree_service_policy: Optional[pulumi.Input[bool]] = None,
                 storm_control_action_shutdown: Optional[pulumi.Input[bool]] = None,
                 storm_control_action_trap: Optional[pulumi.Input[bool]] = None,
                 storm_control_broadcast_level_bps_threshold: Optional[pulumi.Input[float]] = None,
                 storm_control_broadcast_level_pps_threshold: Optional[pulumi.Input[str]] = None,
                 storm_control_broadcast_level_threshold: Optional[pulumi.Input[float]] = None,
                 storm_control_multicast_level_bps_threshold: Optional[pulumi.Input[float]] = None,
                 storm_control_multicast_level_pps_threshold: Optional[pulumi.Input[str]] = None,
                 storm_control_multicast_level_threshold: Optional[pulumi.Input[float]] = None,
                 subscriber_aging_inactivity_timer_probe: Optional[pulumi.Input[bool]] = None,
                 subscriber_aging_inactivity_timer_value: Optional[pulumi.Input[int]] = None,
                 subscriber_aging_probe: Optional[pulumi.Input[bool]] = None,
                 switchport_access_vlan: Optional[pulumi.Input[int]] = None,
                 switchport_block_unicast: Optional[pulumi.Input[bool]] = None,
                 switchport_mode_access: Optional[pulumi.Input[bool]] = None,
                 switchport_mode_trunk: Optional[pulumi.Input[bool]] = None,
                 switchport_nonegotiate: Optional[pulumi.Input[bool]] = None,
                 switchport_port_security: Optional[pulumi.Input[bool]] = None,
                 switchport_port_security_aging_static: Optional[pulumi.Input[bool]] = None,
                 switchport_port_security_aging_time: Optional[pulumi.Input[int]] = None,
                 switchport_port_security_aging_type: Optional[pulumi.Input[bool]] = None,
                 switchport_port_security_aging_type_inactivity: Optional[pulumi.Input[bool]] = None,
                 switchport_port_security_maximum_ranges: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSwitchportPortSecurityMaximumRangeArgs']]]] = None,
                 switchport_port_security_violation_protect: Optional[pulumi.Input[bool]] = None,
                 switchport_port_security_violation_restrict: Optional[pulumi.Input[bool]] = None,
                 switchport_port_security_violation_shutdown: Optional[pulumi.Input[bool]] = None,
                 switchport_private_vlan_host_association_primary_range: Optional[pulumi.Input[int]] = None,
                 switchport_private_vlan_host_association_secondary_range: Optional[pulumi.Input[int]] = None,
                 switchport_trunk_allowed_vlans: Optional[pulumi.Input[str]] = None,
                 switchport_trunk_allowed_vlans_all: Optional[pulumi.Input[bool]] = None,
                 switchport_trunk_allowed_vlans_none: Optional[pulumi.Input[bool]] = None,
                 switchport_trunk_native_vlan_tag: Optional[pulumi.Input[bool]] = None,
                 switchport_trunk_native_vlan_vlan_id: Optional[pulumi.Input[int]] = None,
                 switchport_voice_vlan: Optional[pulumi.Input[int]] = None,
                 template_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Template resources.
        :param pulumi.Input[bool] access_session_closed: Enable closed access on port (disabled by default, i.e. open access)
        :param pulumi.Input[str] access_session_control_direction: Set the control-direction on the interface - Choices: `both`, `in`
        :param pulumi.Input[str] access_session_host_mode: Set the Host mode for authentication on this interface - Choices: `multi-auth`, `multi-domain`, `multi-host`,
               `single-host`
        :param pulumi.Input[bool] access_session_interface_template_sticky: Interface templates set to sticky
        :param pulumi.Input[int] access_session_interface_template_sticky_timer: Sticky timer value - Range: `1`-`65535`
        :param pulumi.Input[bool] access_session_monitor: Apply template to monitor access sessions on the port
        :param pulumi.Input[str] access_session_port_control: Set the port-control value - Choices: `auto`, `force-authorized`, `force-unauthorized`
        :param pulumi.Input[bool] authentication_periodic: Enable or Disable Reauthentication for this port
        :param pulumi.Input[int] authentication_timer_reauthenticate_range: Enter a value between 1 and 65535 - Range: `1`-`65535`
        :param pulumi.Input[bool] authentication_timer_reauthenticate_server: Obtain re-authentication timeout value from the server
        :param pulumi.Input[bool] cts_manual: Supply local configuration for CTS parameters
        :param pulumi.Input[int] cts_manual_policy_static_sgt: Source Security Group Tag to apply to untagged or non-trusted incoming traffic - Range: `2`-`65519`
        :param pulumi.Input[bool] cts_manual_policy_static_trusted: Trust the Source Group Tags (SGT) that the peer uses for sending
        :param pulumi.Input[bool] cts_manual_propagate_sgt: CTS SGT Propagation configuration
        :param pulumi.Input[bool] cts_role_based_enforcement: Enable Role-based Access Control enforcement
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] device_tracking: Configure device-tracking on the interface
        :param pulumi.Input[Sequence[pulumi.Input['TemplateDeviceTrackingAttachPolicyArgs']]] device_tracking_attach_policies: policy name for device tracking
        :param pulumi.Input[str] device_tracking_vlan_range: VLAN IDs of the VLANs for which this policy applies
        :param pulumi.Input[int] dot1x_max_reauth_req: Max No. of Reauthentication Attempts - Range: `1`-`10`
        :param pulumi.Input[int] dot1x_max_req: Max No. of Retries - Range: `1`-`10`
        :param pulumi.Input[str] dot1x_pae: Set 802.1x interface pae type - Choices: `authenticator`, `both`, `supplicant`
        :param pulumi.Input[int] dot1x_timeout_tx_period: Timeout for supplicant retries - Range: `1`-`65535`
        :param pulumi.Input[Sequence[pulumi.Input['TemplateIpAccessGroupArgs']]] ip_access_groups: Access control list for IP packets
        :param pulumi.Input[int] ip_dhcp_snooping_limit_rate: DHCP snooping rate limit - Range: `1`-`2048`
        :param pulumi.Input[bool] ip_dhcp_snooping_trust: DHCP Snooping trust config
        :param pulumi.Input[int] load_interval: Load interval delay in seconds - Range: `30`-`600`
        :param pulumi.Input[bool] mab: MAC Authentication Bypass Interface Config Commands
        :param pulumi.Input[bool] mab_eap: Use EAP authentication for MAC Auth Bypass
        :param pulumi.Input[str] service_policy_input: policy-map name
        :param pulumi.Input[str] service_policy_output: policy-map name
        :param pulumi.Input[str] service_policy_type_control_subscriber: Apply a subscriber control policy to the interface
        :param pulumi.Input[str] source_template: Get config from a template
        :param pulumi.Input[bool] spanning_tree_bpduguard_enable: Enable BPDU guard for this interface
        :param pulumi.Input[bool] spanning_tree_portfast: Portfast options for the interface
        :param pulumi.Input[bool] spanning_tree_portfast_disable: Disable portfast for this interface
        :param pulumi.Input[bool] spanning_tree_portfast_edge: Enable portfast edge on the interface
        :param pulumi.Input[bool] spanning_tree_portfast_network: Enable portfast network on the interface
        :param pulumi.Input[bool] spanning_tree_service_policy: help
        :param pulumi.Input[bool] storm_control_action_shutdown: Shutdown this interface if a storm occurs
        :param pulumi.Input[bool] storm_control_action_trap: Send SNMP trap if a storm occurs
        :param pulumi.Input[float] storm_control_broadcast_level_bps_threshold: Enter threshold
        :param pulumi.Input[str] storm_control_broadcast_level_pps_threshold: Enter threshold
        :param pulumi.Input[float] storm_control_broadcast_level_threshold: Enter threshold
        :param pulumi.Input[float] storm_control_multicast_level_bps_threshold: Enter threshold
        :param pulumi.Input[str] storm_control_multicast_level_pps_threshold: Enter threshold
        :param pulumi.Input[float] storm_control_multicast_level_threshold: Enter threshold
        :param pulumi.Input[bool] subscriber_aging_inactivity_timer_probe: ARP probe
        :param pulumi.Input[int] subscriber_aging_inactivity_timer_value: Enter a value between 1 and 65535 in seconds - Range: `1`-`65535`
        :param pulumi.Input[bool] subscriber_aging_probe: ARP probe
        :param pulumi.Input[int] switchport_access_vlan: VLAN ID of the VLAN when this port is in access mode - Range: `1`-`4094`
        :param pulumi.Input[bool] switchport_block_unicast: Block unknown unicast addresses
        :param pulumi.Input[bool] switchport_mode_access: Set trunking mode to ACCESS unconditionally
        :param pulumi.Input[bool] switchport_mode_trunk: Set trunking mode to TRUNK unconditionally
        :param pulumi.Input[bool] switchport_nonegotiate: Device will not engage in negotiation protocol on this interface
        :param pulumi.Input[bool] switchport_port_security: Security related command
        :param pulumi.Input[bool] switchport_port_security_aging_static: Enable aging for configured secure addresses
        :param pulumi.Input[int] switchport_port_security_aging_time: Port-security aging time - Range: `1`-`1440`
        :param pulumi.Input[bool] switchport_port_security_aging_type: Port-security aging type
        :param pulumi.Input[bool] switchport_port_security_aging_type_inactivity: Aging based on inactivity time period
        :param pulumi.Input[bool] switchport_port_security_violation_protect: Security violation protect mode
        :param pulumi.Input[bool] switchport_port_security_violation_restrict: Security violation restrict mode
        :param pulumi.Input[bool] switchport_port_security_violation_shutdown: Security violation shutdown mode
        :param pulumi.Input[int] switchport_private_vlan_host_association_primary_range: Primary normal range VLAN ID of the private VLAN port association - Range: `2`-`1001`
        :param pulumi.Input[int] switchport_private_vlan_host_association_secondary_range: Secondary normal range VLAN ID of the private VLAN host port association - Range: `2`-`1001`
        :param pulumi.Input[str] switchport_trunk_allowed_vlans: VLAN IDs of the allowed VLANs when this port is in trunking mode
        :param pulumi.Input[bool] switchport_trunk_allowed_vlans_all: all VLANs
        :param pulumi.Input[bool] switchport_trunk_allowed_vlans_none: no VLANs
        :param pulumi.Input[bool] switchport_trunk_native_vlan_tag: Set native VLAN tagging state
        :param pulumi.Input[int] switchport_trunk_native_vlan_vlan_id: VLAN ID of the native VLAN when this port is in trunking mode - Range: `1`-`4094`
        :param pulumi.Input[int] switchport_voice_vlan: Vlan for voice traffic - Range: `1`-`4094`
        :param pulumi.Input[str] template_name: Template name
        """
        if access_session_closed is not None:
            pulumi.set(__self__, "access_session_closed", access_session_closed)
        if access_session_control_direction is not None:
            pulumi.set(__self__, "access_session_control_direction", access_session_control_direction)
        if access_session_host_mode is not None:
            pulumi.set(__self__, "access_session_host_mode", access_session_host_mode)
        if access_session_interface_template_sticky is not None:
            pulumi.set(__self__, "access_session_interface_template_sticky", access_session_interface_template_sticky)
        if access_session_interface_template_sticky_timer is not None:
            pulumi.set(__self__, "access_session_interface_template_sticky_timer", access_session_interface_template_sticky_timer)
        if access_session_monitor is not None:
            pulumi.set(__self__, "access_session_monitor", access_session_monitor)
        if access_session_port_control is not None:
            pulumi.set(__self__, "access_session_port_control", access_session_port_control)
        if authentication_periodic is not None:
            pulumi.set(__self__, "authentication_periodic", authentication_periodic)
        if authentication_timer_reauthenticate_range is not None:
            pulumi.set(__self__, "authentication_timer_reauthenticate_range", authentication_timer_reauthenticate_range)
        if authentication_timer_reauthenticate_server is not None:
            pulumi.set(__self__, "authentication_timer_reauthenticate_server", authentication_timer_reauthenticate_server)
        if cts_manual is not None:
            pulumi.set(__self__, "cts_manual", cts_manual)
        if cts_manual_policy_static_sgt is not None:
            pulumi.set(__self__, "cts_manual_policy_static_sgt", cts_manual_policy_static_sgt)
        if cts_manual_policy_static_trusted is not None:
            pulumi.set(__self__, "cts_manual_policy_static_trusted", cts_manual_policy_static_trusted)
        if cts_manual_propagate_sgt is not None:
            pulumi.set(__self__, "cts_manual_propagate_sgt", cts_manual_propagate_sgt)
        if cts_role_based_enforcement is not None:
            pulumi.set(__self__, "cts_role_based_enforcement", cts_role_based_enforcement)
        if delete_mode is not None:
            pulumi.set(__self__, "delete_mode", delete_mode)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if device_tracking is not None:
            pulumi.set(__self__, "device_tracking", device_tracking)
        if device_tracking_attach_policies is not None:
            pulumi.set(__self__, "device_tracking_attach_policies", device_tracking_attach_policies)
        if device_tracking_vlan_range is not None:
            pulumi.set(__self__, "device_tracking_vlan_range", device_tracking_vlan_range)
        if dot1x_max_reauth_req is not None:
            pulumi.set(__self__, "dot1x_max_reauth_req", dot1x_max_reauth_req)
        if dot1x_max_req is not None:
            pulumi.set(__self__, "dot1x_max_req", dot1x_max_req)
        if dot1x_pae is not None:
            pulumi.set(__self__, "dot1x_pae", dot1x_pae)
        if dot1x_timeout_tx_period is not None:
            pulumi.set(__self__, "dot1x_timeout_tx_period", dot1x_timeout_tx_period)
        if ip_access_groups is not None:
            pulumi.set(__self__, "ip_access_groups", ip_access_groups)
        if ip_dhcp_snooping_limit_rate is not None:
            pulumi.set(__self__, "ip_dhcp_snooping_limit_rate", ip_dhcp_snooping_limit_rate)
        if ip_dhcp_snooping_trust is not None:
            pulumi.set(__self__, "ip_dhcp_snooping_trust", ip_dhcp_snooping_trust)
        if load_interval is not None:
            pulumi.set(__self__, "load_interval", load_interval)
        if mab is not None:
            pulumi.set(__self__, "mab", mab)
        if mab_eap is not None:
            pulumi.set(__self__, "mab_eap", mab_eap)
        if service_policy_input is not None:
            pulumi.set(__self__, "service_policy_input", service_policy_input)
        if service_policy_output is not None:
            pulumi.set(__self__, "service_policy_output", service_policy_output)
        if service_policy_type_control_subscriber is not None:
            pulumi.set(__self__, "service_policy_type_control_subscriber", service_policy_type_control_subscriber)
        if source_template is not None:
            pulumi.set(__self__, "source_template", source_template)
        if spanning_tree_bpduguard_enable is not None:
            pulumi.set(__self__, "spanning_tree_bpduguard_enable", spanning_tree_bpduguard_enable)
        if spanning_tree_portfast is not None:
            pulumi.set(__self__, "spanning_tree_portfast", spanning_tree_portfast)
        if spanning_tree_portfast_disable is not None:
            pulumi.set(__self__, "spanning_tree_portfast_disable", spanning_tree_portfast_disable)
        if spanning_tree_portfast_edge is not None:
            pulumi.set(__self__, "spanning_tree_portfast_edge", spanning_tree_portfast_edge)
        if spanning_tree_portfast_network is not None:
            pulumi.set(__self__, "spanning_tree_portfast_network", spanning_tree_portfast_network)
        if spanning_tree_service_policy is not None:
            pulumi.set(__self__, "spanning_tree_service_policy", spanning_tree_service_policy)
        if storm_control_action_shutdown is not None:
            pulumi.set(__self__, "storm_control_action_shutdown", storm_control_action_shutdown)
        if storm_control_action_trap is not None:
            pulumi.set(__self__, "storm_control_action_trap", storm_control_action_trap)
        if storm_control_broadcast_level_bps_threshold is not None:
            pulumi.set(__self__, "storm_control_broadcast_level_bps_threshold", storm_control_broadcast_level_bps_threshold)
        if storm_control_broadcast_level_pps_threshold is not None:
            pulumi.set(__self__, "storm_control_broadcast_level_pps_threshold", storm_control_broadcast_level_pps_threshold)
        if storm_control_broadcast_level_threshold is not None:
            pulumi.set(__self__, "storm_control_broadcast_level_threshold", storm_control_broadcast_level_threshold)
        if storm_control_multicast_level_bps_threshold is not None:
            pulumi.set(__self__, "storm_control_multicast_level_bps_threshold", storm_control_multicast_level_bps_threshold)
        if storm_control_multicast_level_pps_threshold is not None:
            pulumi.set(__self__, "storm_control_multicast_level_pps_threshold", storm_control_multicast_level_pps_threshold)
        if storm_control_multicast_level_threshold is not None:
            pulumi.set(__self__, "storm_control_multicast_level_threshold", storm_control_multicast_level_threshold)
        if subscriber_aging_inactivity_timer_probe is not None:
            pulumi.set(__self__, "subscriber_aging_inactivity_timer_probe", subscriber_aging_inactivity_timer_probe)
        if subscriber_aging_inactivity_timer_value is not None:
            pulumi.set(__self__, "subscriber_aging_inactivity_timer_value", subscriber_aging_inactivity_timer_value)
        if subscriber_aging_probe is not None:
            pulumi.set(__self__, "subscriber_aging_probe", subscriber_aging_probe)
        if switchport_access_vlan is not None:
            pulumi.set(__self__, "switchport_access_vlan", switchport_access_vlan)
        if switchport_block_unicast is not None:
            pulumi.set(__self__, "switchport_block_unicast", switchport_block_unicast)
        if switchport_mode_access is not None:
            pulumi.set(__self__, "switchport_mode_access", switchport_mode_access)
        if switchport_mode_trunk is not None:
            pulumi.set(__self__, "switchport_mode_trunk", switchport_mode_trunk)
        if switchport_nonegotiate is not None:
            pulumi.set(__self__, "switchport_nonegotiate", switchport_nonegotiate)
        if switchport_port_security is not None:
            pulumi.set(__self__, "switchport_port_security", switchport_port_security)
        if switchport_port_security_aging_static is not None:
            pulumi.set(__self__, "switchport_port_security_aging_static", switchport_port_security_aging_static)
        if switchport_port_security_aging_time is not None:
            pulumi.set(__self__, "switchport_port_security_aging_time", switchport_port_security_aging_time)
        if switchport_port_security_aging_type is not None:
            pulumi.set(__self__, "switchport_port_security_aging_type", switchport_port_security_aging_type)
        if switchport_port_security_aging_type_inactivity is not None:
            pulumi.set(__self__, "switchport_port_security_aging_type_inactivity", switchport_port_security_aging_type_inactivity)
        if switchport_port_security_maximum_ranges is not None:
            pulumi.set(__self__, "switchport_port_security_maximum_ranges", switchport_port_security_maximum_ranges)
        if switchport_port_security_violation_protect is not None:
            pulumi.set(__self__, "switchport_port_security_violation_protect", switchport_port_security_violation_protect)
        if switchport_port_security_violation_restrict is not None:
            pulumi.set(__self__, "switchport_port_security_violation_restrict", switchport_port_security_violation_restrict)
        if switchport_port_security_violation_shutdown is not None:
            pulumi.set(__self__, "switchport_port_security_violation_shutdown", switchport_port_security_violation_shutdown)
        if switchport_private_vlan_host_association_primary_range is not None:
            pulumi.set(__self__, "switchport_private_vlan_host_association_primary_range", switchport_private_vlan_host_association_primary_range)
        if switchport_private_vlan_host_association_secondary_range is not None:
            pulumi.set(__self__, "switchport_private_vlan_host_association_secondary_range", switchport_private_vlan_host_association_secondary_range)
        if switchport_trunk_allowed_vlans is not None:
            pulumi.set(__self__, "switchport_trunk_allowed_vlans", switchport_trunk_allowed_vlans)
        if switchport_trunk_allowed_vlans_all is not None:
            pulumi.set(__self__, "switchport_trunk_allowed_vlans_all", switchport_trunk_allowed_vlans_all)
        if switchport_trunk_allowed_vlans_none is not None:
            pulumi.set(__self__, "switchport_trunk_allowed_vlans_none", switchport_trunk_allowed_vlans_none)
        if switchport_trunk_native_vlan_tag is not None:
            pulumi.set(__self__, "switchport_trunk_native_vlan_tag", switchport_trunk_native_vlan_tag)
        if switchport_trunk_native_vlan_vlan_id is not None:
            pulumi.set(__self__, "switchport_trunk_native_vlan_vlan_id", switchport_trunk_native_vlan_vlan_id)
        if switchport_voice_vlan is not None:
            pulumi.set(__self__, "switchport_voice_vlan", switchport_voice_vlan)
        if template_name is not None:
            pulumi.set(__self__, "template_name", template_name)

    @property
    @pulumi.getter(name="accessSessionClosed")
    def access_session_closed(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable closed access on port (disabled by default, i.e. open access)
        """
        return pulumi.get(self, "access_session_closed")

    @access_session_closed.setter
    def access_session_closed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "access_session_closed", value)

    @property
    @pulumi.getter(name="accessSessionControlDirection")
    def access_session_control_direction(self) -> Optional[pulumi.Input[str]]:
        """
        Set the control-direction on the interface - Choices: `both`, `in`
        """
        return pulumi.get(self, "access_session_control_direction")

    @access_session_control_direction.setter
    def access_session_control_direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_session_control_direction", value)

    @property
    @pulumi.getter(name="accessSessionHostMode")
    def access_session_host_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Set the Host mode for authentication on this interface - Choices: `multi-auth`, `multi-domain`, `multi-host`,
        `single-host`
        """
        return pulumi.get(self, "access_session_host_mode")

    @access_session_host_mode.setter
    def access_session_host_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_session_host_mode", value)

    @property
    @pulumi.getter(name="accessSessionInterfaceTemplateSticky")
    def access_session_interface_template_sticky(self) -> Optional[pulumi.Input[bool]]:
        """
        Interface templates set to sticky
        """
        return pulumi.get(self, "access_session_interface_template_sticky")

    @access_session_interface_template_sticky.setter
    def access_session_interface_template_sticky(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "access_session_interface_template_sticky", value)

    @property
    @pulumi.getter(name="accessSessionInterfaceTemplateStickyTimer")
    def access_session_interface_template_sticky_timer(self) -> Optional[pulumi.Input[int]]:
        """
        Sticky timer value - Range: `1`-`65535`
        """
        return pulumi.get(self, "access_session_interface_template_sticky_timer")

    @access_session_interface_template_sticky_timer.setter
    def access_session_interface_template_sticky_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "access_session_interface_template_sticky_timer", value)

    @property
    @pulumi.getter(name="accessSessionMonitor")
    def access_session_monitor(self) -> Optional[pulumi.Input[bool]]:
        """
        Apply template to monitor access sessions on the port
        """
        return pulumi.get(self, "access_session_monitor")

    @access_session_monitor.setter
    def access_session_monitor(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "access_session_monitor", value)

    @property
    @pulumi.getter(name="accessSessionPortControl")
    def access_session_port_control(self) -> Optional[pulumi.Input[str]]:
        """
        Set the port-control value - Choices: `auto`, `force-authorized`, `force-unauthorized`
        """
        return pulumi.get(self, "access_session_port_control")

    @access_session_port_control.setter
    def access_session_port_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_session_port_control", value)

    @property
    @pulumi.getter(name="authenticationPeriodic")
    def authentication_periodic(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable or Disable Reauthentication for this port
        """
        return pulumi.get(self, "authentication_periodic")

    @authentication_periodic.setter
    def authentication_periodic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authentication_periodic", value)

    @property
    @pulumi.getter(name="authenticationTimerReauthenticateRange")
    def authentication_timer_reauthenticate_range(self) -> Optional[pulumi.Input[int]]:
        """
        Enter a value between 1 and 65535 - Range: `1`-`65535`
        """
        return pulumi.get(self, "authentication_timer_reauthenticate_range")

    @authentication_timer_reauthenticate_range.setter
    def authentication_timer_reauthenticate_range(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "authentication_timer_reauthenticate_range", value)

    @property
    @pulumi.getter(name="authenticationTimerReauthenticateServer")
    def authentication_timer_reauthenticate_server(self) -> Optional[pulumi.Input[bool]]:
        """
        Obtain re-authentication timeout value from the server
        """
        return pulumi.get(self, "authentication_timer_reauthenticate_server")

    @authentication_timer_reauthenticate_server.setter
    def authentication_timer_reauthenticate_server(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authentication_timer_reauthenticate_server", value)

    @property
    @pulumi.getter(name="ctsManual")
    def cts_manual(self) -> Optional[pulumi.Input[bool]]:
        """
        Supply local configuration for CTS parameters
        """
        return pulumi.get(self, "cts_manual")

    @cts_manual.setter
    def cts_manual(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cts_manual", value)

    @property
    @pulumi.getter(name="ctsManualPolicyStaticSgt")
    def cts_manual_policy_static_sgt(self) -> Optional[pulumi.Input[int]]:
        """
        Source Security Group Tag to apply to untagged or non-trusted incoming traffic - Range: `2`-`65519`
        """
        return pulumi.get(self, "cts_manual_policy_static_sgt")

    @cts_manual_policy_static_sgt.setter
    def cts_manual_policy_static_sgt(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cts_manual_policy_static_sgt", value)

    @property
    @pulumi.getter(name="ctsManualPolicyStaticTrusted")
    def cts_manual_policy_static_trusted(self) -> Optional[pulumi.Input[bool]]:
        """
        Trust the Source Group Tags (SGT) that the peer uses for sending
        """
        return pulumi.get(self, "cts_manual_policy_static_trusted")

    @cts_manual_policy_static_trusted.setter
    def cts_manual_policy_static_trusted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cts_manual_policy_static_trusted", value)

    @property
    @pulumi.getter(name="ctsManualPropagateSgt")
    def cts_manual_propagate_sgt(self) -> Optional[pulumi.Input[bool]]:
        """
        CTS SGT Propagation configuration
        """
        return pulumi.get(self, "cts_manual_propagate_sgt")

    @cts_manual_propagate_sgt.setter
    def cts_manual_propagate_sgt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cts_manual_propagate_sgt", value)

    @property
    @pulumi.getter(name="ctsRoleBasedEnforcement")
    def cts_role_based_enforcement(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable Role-based Access Control enforcement
        """
        return pulumi.get(self, "cts_role_based_enforcement")

    @cts_role_based_enforcement.setter
    def cts_role_based_enforcement(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cts_role_based_enforcement", value)

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @delete_mode.setter
    def delete_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_mode", value)

    @property
    @pulumi.getter
    def device(self) -> Optional[pulumi.Input[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @device.setter
    def device(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device", value)

    @property
    @pulumi.getter(name="deviceTracking")
    def device_tracking(self) -> Optional[pulumi.Input[bool]]:
        """
        Configure device-tracking on the interface
        """
        return pulumi.get(self, "device_tracking")

    @device_tracking.setter
    def device_tracking(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "device_tracking", value)

    @property
    @pulumi.getter(name="deviceTrackingAttachPolicies")
    def device_tracking_attach_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDeviceTrackingAttachPolicyArgs']]]]:
        """
        policy name for device tracking
        """
        return pulumi.get(self, "device_tracking_attach_policies")

    @device_tracking_attach_policies.setter
    def device_tracking_attach_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDeviceTrackingAttachPolicyArgs']]]]):
        pulumi.set(self, "device_tracking_attach_policies", value)

    @property
    @pulumi.getter(name="deviceTrackingVlanRange")
    def device_tracking_vlan_range(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN IDs of the VLANs for which this policy applies
        """
        return pulumi.get(self, "device_tracking_vlan_range")

    @device_tracking_vlan_range.setter
    def device_tracking_vlan_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_tracking_vlan_range", value)

    @property
    @pulumi.getter(name="dot1xMaxReauthReq")
    def dot1x_max_reauth_req(self) -> Optional[pulumi.Input[int]]:
        """
        Max No. of Reauthentication Attempts - Range: `1`-`10`
        """
        return pulumi.get(self, "dot1x_max_reauth_req")

    @dot1x_max_reauth_req.setter
    def dot1x_max_reauth_req(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dot1x_max_reauth_req", value)

    @property
    @pulumi.getter(name="dot1xMaxReq")
    def dot1x_max_req(self) -> Optional[pulumi.Input[int]]:
        """
        Max No. of Retries - Range: `1`-`10`
        """
        return pulumi.get(self, "dot1x_max_req")

    @dot1x_max_req.setter
    def dot1x_max_req(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dot1x_max_req", value)

    @property
    @pulumi.getter(name="dot1xPae")
    def dot1x_pae(self) -> Optional[pulumi.Input[str]]:
        """
        Set 802.1x interface pae type - Choices: `authenticator`, `both`, `supplicant`
        """
        return pulumi.get(self, "dot1x_pae")

    @dot1x_pae.setter
    def dot1x_pae(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dot1x_pae", value)

    @property
    @pulumi.getter(name="dot1xTimeoutTxPeriod")
    def dot1x_timeout_tx_period(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout for supplicant retries - Range: `1`-`65535`
        """
        return pulumi.get(self, "dot1x_timeout_tx_period")

    @dot1x_timeout_tx_period.setter
    def dot1x_timeout_tx_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dot1x_timeout_tx_period", value)

    @property
    @pulumi.getter(name="ipAccessGroups")
    def ip_access_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateIpAccessGroupArgs']]]]:
        """
        Access control list for IP packets
        """
        return pulumi.get(self, "ip_access_groups")

    @ip_access_groups.setter
    def ip_access_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateIpAccessGroupArgs']]]]):
        pulumi.set(self, "ip_access_groups", value)

    @property
    @pulumi.getter(name="ipDhcpSnoopingLimitRate")
    def ip_dhcp_snooping_limit_rate(self) -> Optional[pulumi.Input[int]]:
        """
        DHCP snooping rate limit - Range: `1`-`2048`
        """
        return pulumi.get(self, "ip_dhcp_snooping_limit_rate")

    @ip_dhcp_snooping_limit_rate.setter
    def ip_dhcp_snooping_limit_rate(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ip_dhcp_snooping_limit_rate", value)

    @property
    @pulumi.getter(name="ipDhcpSnoopingTrust")
    def ip_dhcp_snooping_trust(self) -> Optional[pulumi.Input[bool]]:
        """
        DHCP Snooping trust config
        """
        return pulumi.get(self, "ip_dhcp_snooping_trust")

    @ip_dhcp_snooping_trust.setter
    def ip_dhcp_snooping_trust(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_dhcp_snooping_trust", value)

    @property
    @pulumi.getter(name="loadInterval")
    def load_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Load interval delay in seconds - Range: `30`-`600`
        """
        return pulumi.get(self, "load_interval")

    @load_interval.setter
    def load_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "load_interval", value)

    @property
    @pulumi.getter
    def mab(self) -> Optional[pulumi.Input[bool]]:
        """
        MAC Authentication Bypass Interface Config Commands
        """
        return pulumi.get(self, "mab")

    @mab.setter
    def mab(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mab", value)

    @property
    @pulumi.getter(name="mabEap")
    def mab_eap(self) -> Optional[pulumi.Input[bool]]:
        """
        Use EAP authentication for MAC Auth Bypass
        """
        return pulumi.get(self, "mab_eap")

    @mab_eap.setter
    def mab_eap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mab_eap", value)

    @property
    @pulumi.getter(name="servicePolicyInput")
    def service_policy_input(self) -> Optional[pulumi.Input[str]]:
        """
        policy-map name
        """
        return pulumi.get(self, "service_policy_input")

    @service_policy_input.setter
    def service_policy_input(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_policy_input", value)

    @property
    @pulumi.getter(name="servicePolicyOutput")
    def service_policy_output(self) -> Optional[pulumi.Input[str]]:
        """
        policy-map name
        """
        return pulumi.get(self, "service_policy_output")

    @service_policy_output.setter
    def service_policy_output(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_policy_output", value)

    @property
    @pulumi.getter(name="servicePolicyTypeControlSubscriber")
    def service_policy_type_control_subscriber(self) -> Optional[pulumi.Input[str]]:
        """
        Apply a subscriber control policy to the interface
        """
        return pulumi.get(self, "service_policy_type_control_subscriber")

    @service_policy_type_control_subscriber.setter
    def service_policy_type_control_subscriber(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_policy_type_control_subscriber", value)

    @property
    @pulumi.getter(name="sourceTemplate")
    def source_template(self) -> Optional[pulumi.Input[str]]:
        """
        Get config from a template
        """
        return pulumi.get(self, "source_template")

    @source_template.setter
    def source_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_template", value)

    @property
    @pulumi.getter(name="spanningTreeBpduguardEnable")
    def spanning_tree_bpduguard_enable(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable BPDU guard for this interface
        """
        return pulumi.get(self, "spanning_tree_bpduguard_enable")

    @spanning_tree_bpduguard_enable.setter
    def spanning_tree_bpduguard_enable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "spanning_tree_bpduguard_enable", value)

    @property
    @pulumi.getter(name="spanningTreePortfast")
    def spanning_tree_portfast(self) -> Optional[pulumi.Input[bool]]:
        """
        Portfast options for the interface
        """
        return pulumi.get(self, "spanning_tree_portfast")

    @spanning_tree_portfast.setter
    def spanning_tree_portfast(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "spanning_tree_portfast", value)

    @property
    @pulumi.getter(name="spanningTreePortfastDisable")
    def spanning_tree_portfast_disable(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable portfast for this interface
        """
        return pulumi.get(self, "spanning_tree_portfast_disable")

    @spanning_tree_portfast_disable.setter
    def spanning_tree_portfast_disable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "spanning_tree_portfast_disable", value)

    @property
    @pulumi.getter(name="spanningTreePortfastEdge")
    def spanning_tree_portfast_edge(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable portfast edge on the interface
        """
        return pulumi.get(self, "spanning_tree_portfast_edge")

    @spanning_tree_portfast_edge.setter
    def spanning_tree_portfast_edge(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "spanning_tree_portfast_edge", value)

    @property
    @pulumi.getter(name="spanningTreePortfastNetwork")
    def spanning_tree_portfast_network(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable portfast network on the interface
        """
        return pulumi.get(self, "spanning_tree_portfast_network")

    @spanning_tree_portfast_network.setter
    def spanning_tree_portfast_network(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "spanning_tree_portfast_network", value)

    @property
    @pulumi.getter(name="spanningTreeServicePolicy")
    def spanning_tree_service_policy(self) -> Optional[pulumi.Input[bool]]:
        """
        help
        """
        return pulumi.get(self, "spanning_tree_service_policy")

    @spanning_tree_service_policy.setter
    def spanning_tree_service_policy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "spanning_tree_service_policy", value)

    @property
    @pulumi.getter(name="stormControlActionShutdown")
    def storm_control_action_shutdown(self) -> Optional[pulumi.Input[bool]]:
        """
        Shutdown this interface if a storm occurs
        """
        return pulumi.get(self, "storm_control_action_shutdown")

    @storm_control_action_shutdown.setter
    def storm_control_action_shutdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "storm_control_action_shutdown", value)

    @property
    @pulumi.getter(name="stormControlActionTrap")
    def storm_control_action_trap(self) -> Optional[pulumi.Input[bool]]:
        """
        Send SNMP trap if a storm occurs
        """
        return pulumi.get(self, "storm_control_action_trap")

    @storm_control_action_trap.setter
    def storm_control_action_trap(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "storm_control_action_trap", value)

    @property
    @pulumi.getter(name="stormControlBroadcastLevelBpsThreshold")
    def storm_control_broadcast_level_bps_threshold(self) -> Optional[pulumi.Input[float]]:
        """
        Enter threshold
        """
        return pulumi.get(self, "storm_control_broadcast_level_bps_threshold")

    @storm_control_broadcast_level_bps_threshold.setter
    def storm_control_broadcast_level_bps_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "storm_control_broadcast_level_bps_threshold", value)

    @property
    @pulumi.getter(name="stormControlBroadcastLevelPpsThreshold")
    def storm_control_broadcast_level_pps_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Enter threshold
        """
        return pulumi.get(self, "storm_control_broadcast_level_pps_threshold")

    @storm_control_broadcast_level_pps_threshold.setter
    def storm_control_broadcast_level_pps_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storm_control_broadcast_level_pps_threshold", value)

    @property
    @pulumi.getter(name="stormControlBroadcastLevelThreshold")
    def storm_control_broadcast_level_threshold(self) -> Optional[pulumi.Input[float]]:
        """
        Enter threshold
        """
        return pulumi.get(self, "storm_control_broadcast_level_threshold")

    @storm_control_broadcast_level_threshold.setter
    def storm_control_broadcast_level_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "storm_control_broadcast_level_threshold", value)

    @property
    @pulumi.getter(name="stormControlMulticastLevelBpsThreshold")
    def storm_control_multicast_level_bps_threshold(self) -> Optional[pulumi.Input[float]]:
        """
        Enter threshold
        """
        return pulumi.get(self, "storm_control_multicast_level_bps_threshold")

    @storm_control_multicast_level_bps_threshold.setter
    def storm_control_multicast_level_bps_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "storm_control_multicast_level_bps_threshold", value)

    @property
    @pulumi.getter(name="stormControlMulticastLevelPpsThreshold")
    def storm_control_multicast_level_pps_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        Enter threshold
        """
        return pulumi.get(self, "storm_control_multicast_level_pps_threshold")

    @storm_control_multicast_level_pps_threshold.setter
    def storm_control_multicast_level_pps_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storm_control_multicast_level_pps_threshold", value)

    @property
    @pulumi.getter(name="stormControlMulticastLevelThreshold")
    def storm_control_multicast_level_threshold(self) -> Optional[pulumi.Input[float]]:
        """
        Enter threshold
        """
        return pulumi.get(self, "storm_control_multicast_level_threshold")

    @storm_control_multicast_level_threshold.setter
    def storm_control_multicast_level_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "storm_control_multicast_level_threshold", value)

    @property
    @pulumi.getter(name="subscriberAgingInactivityTimerProbe")
    def subscriber_aging_inactivity_timer_probe(self) -> Optional[pulumi.Input[bool]]:
        """
        ARP probe
        """
        return pulumi.get(self, "subscriber_aging_inactivity_timer_probe")

    @subscriber_aging_inactivity_timer_probe.setter
    def subscriber_aging_inactivity_timer_probe(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "subscriber_aging_inactivity_timer_probe", value)

    @property
    @pulumi.getter(name="subscriberAgingInactivityTimerValue")
    def subscriber_aging_inactivity_timer_value(self) -> Optional[pulumi.Input[int]]:
        """
        Enter a value between 1 and 65535 in seconds - Range: `1`-`65535`
        """
        return pulumi.get(self, "subscriber_aging_inactivity_timer_value")

    @subscriber_aging_inactivity_timer_value.setter
    def subscriber_aging_inactivity_timer_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "subscriber_aging_inactivity_timer_value", value)

    @property
    @pulumi.getter(name="subscriberAgingProbe")
    def subscriber_aging_probe(self) -> Optional[pulumi.Input[bool]]:
        """
        ARP probe
        """
        return pulumi.get(self, "subscriber_aging_probe")

    @subscriber_aging_probe.setter
    def subscriber_aging_probe(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "subscriber_aging_probe", value)

    @property
    @pulumi.getter(name="switchportAccessVlan")
    def switchport_access_vlan(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN ID of the VLAN when this port is in access mode - Range: `1`-`4094`
        """
        return pulumi.get(self, "switchport_access_vlan")

    @switchport_access_vlan.setter
    def switchport_access_vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switchport_access_vlan", value)

    @property
    @pulumi.getter(name="switchportBlockUnicast")
    def switchport_block_unicast(self) -> Optional[pulumi.Input[bool]]:
        """
        Block unknown unicast addresses
        """
        return pulumi.get(self, "switchport_block_unicast")

    @switchport_block_unicast.setter
    def switchport_block_unicast(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switchport_block_unicast", value)

    @property
    @pulumi.getter(name="switchportModeAccess")
    def switchport_mode_access(self) -> Optional[pulumi.Input[bool]]:
        """
        Set trunking mode to ACCESS unconditionally
        """
        return pulumi.get(self, "switchport_mode_access")

    @switchport_mode_access.setter
    def switchport_mode_access(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switchport_mode_access", value)

    @property
    @pulumi.getter(name="switchportModeTrunk")
    def switchport_mode_trunk(self) -> Optional[pulumi.Input[bool]]:
        """
        Set trunking mode to TRUNK unconditionally
        """
        return pulumi.get(self, "switchport_mode_trunk")

    @switchport_mode_trunk.setter
    def switchport_mode_trunk(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switchport_mode_trunk", value)

    @property
    @pulumi.getter(name="switchportNonegotiate")
    def switchport_nonegotiate(self) -> Optional[pulumi.Input[bool]]:
        """
        Device will not engage in negotiation protocol on this interface
        """
        return pulumi.get(self, "switchport_nonegotiate")

    @switchport_nonegotiate.setter
    def switchport_nonegotiate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switchport_nonegotiate", value)

    @property
    @pulumi.getter(name="switchportPortSecurity")
    def switchport_port_security(self) -> Optional[pulumi.Input[bool]]:
        """
        Security related command
        """
        return pulumi.get(self, "switchport_port_security")

    @switchport_port_security.setter
    def switchport_port_security(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switchport_port_security", value)

    @property
    @pulumi.getter(name="switchportPortSecurityAgingStatic")
    def switchport_port_security_aging_static(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable aging for configured secure addresses
        """
        return pulumi.get(self, "switchport_port_security_aging_static")

    @switchport_port_security_aging_static.setter
    def switchport_port_security_aging_static(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switchport_port_security_aging_static", value)

    @property
    @pulumi.getter(name="switchportPortSecurityAgingTime")
    def switchport_port_security_aging_time(self) -> Optional[pulumi.Input[int]]:
        """
        Port-security aging time - Range: `1`-`1440`
        """
        return pulumi.get(self, "switchport_port_security_aging_time")

    @switchport_port_security_aging_time.setter
    def switchport_port_security_aging_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switchport_port_security_aging_time", value)

    @property
    @pulumi.getter(name="switchportPortSecurityAgingType")
    def switchport_port_security_aging_type(self) -> Optional[pulumi.Input[bool]]:
        """
        Port-security aging type
        """
        return pulumi.get(self, "switchport_port_security_aging_type")

    @switchport_port_security_aging_type.setter
    def switchport_port_security_aging_type(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switchport_port_security_aging_type", value)

    @property
    @pulumi.getter(name="switchportPortSecurityAgingTypeInactivity")
    def switchport_port_security_aging_type_inactivity(self) -> Optional[pulumi.Input[bool]]:
        """
        Aging based on inactivity time period
        """
        return pulumi.get(self, "switchport_port_security_aging_type_inactivity")

    @switchport_port_security_aging_type_inactivity.setter
    def switchport_port_security_aging_type_inactivity(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switchport_port_security_aging_type_inactivity", value)

    @property
    @pulumi.getter(name="switchportPortSecurityMaximumRanges")
    def switchport_port_security_maximum_ranges(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSwitchportPortSecurityMaximumRangeArgs']]]]:
        return pulumi.get(self, "switchport_port_security_maximum_ranges")

    @switchport_port_security_maximum_ranges.setter
    def switchport_port_security_maximum_ranges(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSwitchportPortSecurityMaximumRangeArgs']]]]):
        pulumi.set(self, "switchport_port_security_maximum_ranges", value)

    @property
    @pulumi.getter(name="switchportPortSecurityViolationProtect")
    def switchport_port_security_violation_protect(self) -> Optional[pulumi.Input[bool]]:
        """
        Security violation protect mode
        """
        return pulumi.get(self, "switchport_port_security_violation_protect")

    @switchport_port_security_violation_protect.setter
    def switchport_port_security_violation_protect(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switchport_port_security_violation_protect", value)

    @property
    @pulumi.getter(name="switchportPortSecurityViolationRestrict")
    def switchport_port_security_violation_restrict(self) -> Optional[pulumi.Input[bool]]:
        """
        Security violation restrict mode
        """
        return pulumi.get(self, "switchport_port_security_violation_restrict")

    @switchport_port_security_violation_restrict.setter
    def switchport_port_security_violation_restrict(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switchport_port_security_violation_restrict", value)

    @property
    @pulumi.getter(name="switchportPortSecurityViolationShutdown")
    def switchport_port_security_violation_shutdown(self) -> Optional[pulumi.Input[bool]]:
        """
        Security violation shutdown mode
        """
        return pulumi.get(self, "switchport_port_security_violation_shutdown")

    @switchport_port_security_violation_shutdown.setter
    def switchport_port_security_violation_shutdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switchport_port_security_violation_shutdown", value)

    @property
    @pulumi.getter(name="switchportPrivateVlanHostAssociationPrimaryRange")
    def switchport_private_vlan_host_association_primary_range(self) -> Optional[pulumi.Input[int]]:
        """
        Primary normal range VLAN ID of the private VLAN port association - Range: `2`-`1001`
        """
        return pulumi.get(self, "switchport_private_vlan_host_association_primary_range")

    @switchport_private_vlan_host_association_primary_range.setter
    def switchport_private_vlan_host_association_primary_range(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switchport_private_vlan_host_association_primary_range", value)

    @property
    @pulumi.getter(name="switchportPrivateVlanHostAssociationSecondaryRange")
    def switchport_private_vlan_host_association_secondary_range(self) -> Optional[pulumi.Input[int]]:
        """
        Secondary normal range VLAN ID of the private VLAN host port association - Range: `2`-`1001`
        """
        return pulumi.get(self, "switchport_private_vlan_host_association_secondary_range")

    @switchport_private_vlan_host_association_secondary_range.setter
    def switchport_private_vlan_host_association_secondary_range(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switchport_private_vlan_host_association_secondary_range", value)

    @property
    @pulumi.getter(name="switchportTrunkAllowedVlans")
    def switchport_trunk_allowed_vlans(self) -> Optional[pulumi.Input[str]]:
        """
        VLAN IDs of the allowed VLANs when this port is in trunking mode
        """
        return pulumi.get(self, "switchport_trunk_allowed_vlans")

    @switchport_trunk_allowed_vlans.setter
    def switchport_trunk_allowed_vlans(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "switchport_trunk_allowed_vlans", value)

    @property
    @pulumi.getter(name="switchportTrunkAllowedVlansAll")
    def switchport_trunk_allowed_vlans_all(self) -> Optional[pulumi.Input[bool]]:
        """
        all VLANs
        """
        return pulumi.get(self, "switchport_trunk_allowed_vlans_all")

    @switchport_trunk_allowed_vlans_all.setter
    def switchport_trunk_allowed_vlans_all(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switchport_trunk_allowed_vlans_all", value)

    @property
    @pulumi.getter(name="switchportTrunkAllowedVlansNone")
    def switchport_trunk_allowed_vlans_none(self) -> Optional[pulumi.Input[bool]]:
        """
        no VLANs
        """
        return pulumi.get(self, "switchport_trunk_allowed_vlans_none")

    @switchport_trunk_allowed_vlans_none.setter
    def switchport_trunk_allowed_vlans_none(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switchport_trunk_allowed_vlans_none", value)

    @property
    @pulumi.getter(name="switchportTrunkNativeVlanTag")
    def switchport_trunk_native_vlan_tag(self) -> Optional[pulumi.Input[bool]]:
        """
        Set native VLAN tagging state
        """
        return pulumi.get(self, "switchport_trunk_native_vlan_tag")

    @switchport_trunk_native_vlan_tag.setter
    def switchport_trunk_native_vlan_tag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "switchport_trunk_native_vlan_tag", value)

    @property
    @pulumi.getter(name="switchportTrunkNativeVlanVlanId")
    def switchport_trunk_native_vlan_vlan_id(self) -> Optional[pulumi.Input[int]]:
        """
        VLAN ID of the native VLAN when this port is in trunking mode - Range: `1`-`4094`
        """
        return pulumi.get(self, "switchport_trunk_native_vlan_vlan_id")

    @switchport_trunk_native_vlan_vlan_id.setter
    def switchport_trunk_native_vlan_vlan_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switchport_trunk_native_vlan_vlan_id", value)

    @property
    @pulumi.getter(name="switchportVoiceVlan")
    def switchport_voice_vlan(self) -> Optional[pulumi.Input[int]]:
        """
        Vlan for voice traffic - Range: `1`-`4094`
        """
        return pulumi.get(self, "switchport_voice_vlan")

    @switchport_voice_vlan.setter
    def switchport_voice_vlan(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "switchport_voice_vlan", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[pulumi.Input[str]]:
        """
        Template name
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_name", value)


class Template(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_session_closed: Optional[pulumi.Input[bool]] = None,
                 access_session_control_direction: Optional[pulumi.Input[str]] = None,
                 access_session_host_mode: Optional[pulumi.Input[str]] = None,
                 access_session_interface_template_sticky: Optional[pulumi.Input[bool]] = None,
                 access_session_interface_template_sticky_timer: Optional[pulumi.Input[int]] = None,
                 access_session_monitor: Optional[pulumi.Input[bool]] = None,
                 access_session_port_control: Optional[pulumi.Input[str]] = None,
                 authentication_periodic: Optional[pulumi.Input[bool]] = None,
                 authentication_timer_reauthenticate_range: Optional[pulumi.Input[int]] = None,
                 authentication_timer_reauthenticate_server: Optional[pulumi.Input[bool]] = None,
                 cts_manual: Optional[pulumi.Input[bool]] = None,
                 cts_manual_policy_static_sgt: Optional[pulumi.Input[int]] = None,
                 cts_manual_policy_static_trusted: Optional[pulumi.Input[bool]] = None,
                 cts_manual_propagate_sgt: Optional[pulumi.Input[bool]] = None,
                 cts_role_based_enforcement: Optional[pulumi.Input[bool]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 device_tracking: Optional[pulumi.Input[bool]] = None,
                 device_tracking_attach_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TemplateDeviceTrackingAttachPolicyArgs']]]]] = None,
                 device_tracking_vlan_range: Optional[pulumi.Input[str]] = None,
                 dot1x_max_reauth_req: Optional[pulumi.Input[int]] = None,
                 dot1x_max_req: Optional[pulumi.Input[int]] = None,
                 dot1x_pae: Optional[pulumi.Input[str]] = None,
                 dot1x_timeout_tx_period: Optional[pulumi.Input[int]] = None,
                 ip_access_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TemplateIpAccessGroupArgs']]]]] = None,
                 ip_dhcp_snooping_limit_rate: Optional[pulumi.Input[int]] = None,
                 ip_dhcp_snooping_trust: Optional[pulumi.Input[bool]] = None,
                 load_interval: Optional[pulumi.Input[int]] = None,
                 mab: Optional[pulumi.Input[bool]] = None,
                 mab_eap: Optional[pulumi.Input[bool]] = None,
                 service_policy_input: Optional[pulumi.Input[str]] = None,
                 service_policy_output: Optional[pulumi.Input[str]] = None,
                 service_policy_type_control_subscriber: Optional[pulumi.Input[str]] = None,
                 source_template: Optional[pulumi.Input[str]] = None,
                 spanning_tree_bpduguard_enable: Optional[pulumi.Input[bool]] = None,
                 spanning_tree_portfast: Optional[pulumi.Input[bool]] = None,
                 spanning_tree_portfast_disable: Optional[pulumi.Input[bool]] = None,
                 spanning_tree_portfast_edge: Optional[pulumi.Input[bool]] = None,
                 spanning_tree_portfast_network: Optional[pulumi.Input[bool]] = None,
                 spanning_tree_service_policy: Optional[pulumi.Input[bool]] = None,
                 storm_control_action_shutdown: Optional[pulumi.Input[bool]] = None,
                 storm_control_action_trap: Optional[pulumi.Input[bool]] = None,
                 storm_control_broadcast_level_bps_threshold: Optional[pulumi.Input[float]] = None,
                 storm_control_broadcast_level_pps_threshold: Optional[pulumi.Input[str]] = None,
                 storm_control_broadcast_level_threshold: Optional[pulumi.Input[float]] = None,
                 storm_control_multicast_level_bps_threshold: Optional[pulumi.Input[float]] = None,
                 storm_control_multicast_level_pps_threshold: Optional[pulumi.Input[str]] = None,
                 storm_control_multicast_level_threshold: Optional[pulumi.Input[float]] = None,
                 subscriber_aging_inactivity_timer_probe: Optional[pulumi.Input[bool]] = None,
                 subscriber_aging_inactivity_timer_value: Optional[pulumi.Input[int]] = None,
                 subscriber_aging_probe: Optional[pulumi.Input[bool]] = None,
                 switchport_access_vlan: Optional[pulumi.Input[int]] = None,
                 switchport_block_unicast: Optional[pulumi.Input[bool]] = None,
                 switchport_mode_access: Optional[pulumi.Input[bool]] = None,
                 switchport_mode_trunk: Optional[pulumi.Input[bool]] = None,
                 switchport_nonegotiate: Optional[pulumi.Input[bool]] = None,
                 switchport_port_security: Optional[pulumi.Input[bool]] = None,
                 switchport_port_security_aging_static: Optional[pulumi.Input[bool]] = None,
                 switchport_port_security_aging_time: Optional[pulumi.Input[int]] = None,
                 switchport_port_security_aging_type: Optional[pulumi.Input[bool]] = None,
                 switchport_port_security_aging_type_inactivity: Optional[pulumi.Input[bool]] = None,
                 switchport_port_security_maximum_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TemplateSwitchportPortSecurityMaximumRangeArgs']]]]] = None,
                 switchport_port_security_violation_protect: Optional[pulumi.Input[bool]] = None,
                 switchport_port_security_violation_restrict: Optional[pulumi.Input[bool]] = None,
                 switchport_port_security_violation_shutdown: Optional[pulumi.Input[bool]] = None,
                 switchport_private_vlan_host_association_primary_range: Optional[pulumi.Input[int]] = None,
                 switchport_private_vlan_host_association_secondary_range: Optional[pulumi.Input[int]] = None,
                 switchport_trunk_allowed_vlans: Optional[pulumi.Input[str]] = None,
                 switchport_trunk_allowed_vlans_all: Optional[pulumi.Input[bool]] = None,
                 switchport_trunk_allowed_vlans_none: Optional[pulumi.Input[bool]] = None,
                 switchport_trunk_native_vlan_tag: Optional[pulumi.Input[bool]] = None,
                 switchport_trunk_native_vlan_vlan_id: Optional[pulumi.Input[int]] = None,
                 switchport_voice_vlan: Optional[pulumi.Input[int]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Template resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] access_session_closed: Enable closed access on port (disabled by default, i.e. open access)
        :param pulumi.Input[str] access_session_control_direction: Set the control-direction on the interface - Choices: `both`, `in`
        :param pulumi.Input[str] access_session_host_mode: Set the Host mode for authentication on this interface - Choices: `multi-auth`, `multi-domain`, `multi-host`,
               `single-host`
        :param pulumi.Input[bool] access_session_interface_template_sticky: Interface templates set to sticky
        :param pulumi.Input[int] access_session_interface_template_sticky_timer: Sticky timer value - Range: `1`-`65535`
        :param pulumi.Input[bool] access_session_monitor: Apply template to monitor access sessions on the port
        :param pulumi.Input[str] access_session_port_control: Set the port-control value - Choices: `auto`, `force-authorized`, `force-unauthorized`
        :param pulumi.Input[bool] authentication_periodic: Enable or Disable Reauthentication for this port
        :param pulumi.Input[int] authentication_timer_reauthenticate_range: Enter a value between 1 and 65535 - Range: `1`-`65535`
        :param pulumi.Input[bool] authentication_timer_reauthenticate_server: Obtain re-authentication timeout value from the server
        :param pulumi.Input[bool] cts_manual: Supply local configuration for CTS parameters
        :param pulumi.Input[int] cts_manual_policy_static_sgt: Source Security Group Tag to apply to untagged or non-trusted incoming traffic - Range: `2`-`65519`
        :param pulumi.Input[bool] cts_manual_policy_static_trusted: Trust the Source Group Tags (SGT) that the peer uses for sending
        :param pulumi.Input[bool] cts_manual_propagate_sgt: CTS SGT Propagation configuration
        :param pulumi.Input[bool] cts_role_based_enforcement: Enable Role-based Access Control enforcement
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] device_tracking: Configure device-tracking on the interface
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TemplateDeviceTrackingAttachPolicyArgs']]]] device_tracking_attach_policies: policy name for device tracking
        :param pulumi.Input[str] device_tracking_vlan_range: VLAN IDs of the VLANs for which this policy applies
        :param pulumi.Input[int] dot1x_max_reauth_req: Max No. of Reauthentication Attempts - Range: `1`-`10`
        :param pulumi.Input[int] dot1x_max_req: Max No. of Retries - Range: `1`-`10`
        :param pulumi.Input[str] dot1x_pae: Set 802.1x interface pae type - Choices: `authenticator`, `both`, `supplicant`
        :param pulumi.Input[int] dot1x_timeout_tx_period: Timeout for supplicant retries - Range: `1`-`65535`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TemplateIpAccessGroupArgs']]]] ip_access_groups: Access control list for IP packets
        :param pulumi.Input[int] ip_dhcp_snooping_limit_rate: DHCP snooping rate limit - Range: `1`-`2048`
        :param pulumi.Input[bool] ip_dhcp_snooping_trust: DHCP Snooping trust config
        :param pulumi.Input[int] load_interval: Load interval delay in seconds - Range: `30`-`600`
        :param pulumi.Input[bool] mab: MAC Authentication Bypass Interface Config Commands
        :param pulumi.Input[bool] mab_eap: Use EAP authentication for MAC Auth Bypass
        :param pulumi.Input[str] service_policy_input: policy-map name
        :param pulumi.Input[str] service_policy_output: policy-map name
        :param pulumi.Input[str] service_policy_type_control_subscriber: Apply a subscriber control policy to the interface
        :param pulumi.Input[str] source_template: Get config from a template
        :param pulumi.Input[bool] spanning_tree_bpduguard_enable: Enable BPDU guard for this interface
        :param pulumi.Input[bool] spanning_tree_portfast: Portfast options for the interface
        :param pulumi.Input[bool] spanning_tree_portfast_disable: Disable portfast for this interface
        :param pulumi.Input[bool] spanning_tree_portfast_edge: Enable portfast edge on the interface
        :param pulumi.Input[bool] spanning_tree_portfast_network: Enable portfast network on the interface
        :param pulumi.Input[bool] spanning_tree_service_policy: help
        :param pulumi.Input[bool] storm_control_action_shutdown: Shutdown this interface if a storm occurs
        :param pulumi.Input[bool] storm_control_action_trap: Send SNMP trap if a storm occurs
        :param pulumi.Input[float] storm_control_broadcast_level_bps_threshold: Enter threshold
        :param pulumi.Input[str] storm_control_broadcast_level_pps_threshold: Enter threshold
        :param pulumi.Input[float] storm_control_broadcast_level_threshold: Enter threshold
        :param pulumi.Input[float] storm_control_multicast_level_bps_threshold: Enter threshold
        :param pulumi.Input[str] storm_control_multicast_level_pps_threshold: Enter threshold
        :param pulumi.Input[float] storm_control_multicast_level_threshold: Enter threshold
        :param pulumi.Input[bool] subscriber_aging_inactivity_timer_probe: ARP probe
        :param pulumi.Input[int] subscriber_aging_inactivity_timer_value: Enter a value between 1 and 65535 in seconds - Range: `1`-`65535`
        :param pulumi.Input[bool] subscriber_aging_probe: ARP probe
        :param pulumi.Input[int] switchport_access_vlan: VLAN ID of the VLAN when this port is in access mode - Range: `1`-`4094`
        :param pulumi.Input[bool] switchport_block_unicast: Block unknown unicast addresses
        :param pulumi.Input[bool] switchport_mode_access: Set trunking mode to ACCESS unconditionally
        :param pulumi.Input[bool] switchport_mode_trunk: Set trunking mode to TRUNK unconditionally
        :param pulumi.Input[bool] switchport_nonegotiate: Device will not engage in negotiation protocol on this interface
        :param pulumi.Input[bool] switchport_port_security: Security related command
        :param pulumi.Input[bool] switchport_port_security_aging_static: Enable aging for configured secure addresses
        :param pulumi.Input[int] switchport_port_security_aging_time: Port-security aging time - Range: `1`-`1440`
        :param pulumi.Input[bool] switchport_port_security_aging_type: Port-security aging type
        :param pulumi.Input[bool] switchport_port_security_aging_type_inactivity: Aging based on inactivity time period
        :param pulumi.Input[bool] switchport_port_security_violation_protect: Security violation protect mode
        :param pulumi.Input[bool] switchport_port_security_violation_restrict: Security violation restrict mode
        :param pulumi.Input[bool] switchport_port_security_violation_shutdown: Security violation shutdown mode
        :param pulumi.Input[int] switchport_private_vlan_host_association_primary_range: Primary normal range VLAN ID of the private VLAN port association - Range: `2`-`1001`
        :param pulumi.Input[int] switchport_private_vlan_host_association_secondary_range: Secondary normal range VLAN ID of the private VLAN host port association - Range: `2`-`1001`
        :param pulumi.Input[str] switchport_trunk_allowed_vlans: VLAN IDs of the allowed VLANs when this port is in trunking mode
        :param pulumi.Input[bool] switchport_trunk_allowed_vlans_all: all VLANs
        :param pulumi.Input[bool] switchport_trunk_allowed_vlans_none: no VLANs
        :param pulumi.Input[bool] switchport_trunk_native_vlan_tag: Set native VLAN tagging state
        :param pulumi.Input[int] switchport_trunk_native_vlan_vlan_id: VLAN ID of the native VLAN when this port is in trunking mode - Range: `1`-`4094`
        :param pulumi.Input[int] switchport_voice_vlan: Vlan for voice traffic - Range: `1`-`4094`
        :param pulumi.Input[str] template_name: Template name
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Template resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param TemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_session_closed: Optional[pulumi.Input[bool]] = None,
                 access_session_control_direction: Optional[pulumi.Input[str]] = None,
                 access_session_host_mode: Optional[pulumi.Input[str]] = None,
                 access_session_interface_template_sticky: Optional[pulumi.Input[bool]] = None,
                 access_session_interface_template_sticky_timer: Optional[pulumi.Input[int]] = None,
                 access_session_monitor: Optional[pulumi.Input[bool]] = None,
                 access_session_port_control: Optional[pulumi.Input[str]] = None,
                 authentication_periodic: Optional[pulumi.Input[bool]] = None,
                 authentication_timer_reauthenticate_range: Optional[pulumi.Input[int]] = None,
                 authentication_timer_reauthenticate_server: Optional[pulumi.Input[bool]] = None,
                 cts_manual: Optional[pulumi.Input[bool]] = None,
                 cts_manual_policy_static_sgt: Optional[pulumi.Input[int]] = None,
                 cts_manual_policy_static_trusted: Optional[pulumi.Input[bool]] = None,
                 cts_manual_propagate_sgt: Optional[pulumi.Input[bool]] = None,
                 cts_role_based_enforcement: Optional[pulumi.Input[bool]] = None,
                 delete_mode: Optional[pulumi.Input[str]] = None,
                 device: Optional[pulumi.Input[str]] = None,
                 device_tracking: Optional[pulumi.Input[bool]] = None,
                 device_tracking_attach_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TemplateDeviceTrackingAttachPolicyArgs']]]]] = None,
                 device_tracking_vlan_range: Optional[pulumi.Input[str]] = None,
                 dot1x_max_reauth_req: Optional[pulumi.Input[int]] = None,
                 dot1x_max_req: Optional[pulumi.Input[int]] = None,
                 dot1x_pae: Optional[pulumi.Input[str]] = None,
                 dot1x_timeout_tx_period: Optional[pulumi.Input[int]] = None,
                 ip_access_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TemplateIpAccessGroupArgs']]]]] = None,
                 ip_dhcp_snooping_limit_rate: Optional[pulumi.Input[int]] = None,
                 ip_dhcp_snooping_trust: Optional[pulumi.Input[bool]] = None,
                 load_interval: Optional[pulumi.Input[int]] = None,
                 mab: Optional[pulumi.Input[bool]] = None,
                 mab_eap: Optional[pulumi.Input[bool]] = None,
                 service_policy_input: Optional[pulumi.Input[str]] = None,
                 service_policy_output: Optional[pulumi.Input[str]] = None,
                 service_policy_type_control_subscriber: Optional[pulumi.Input[str]] = None,
                 source_template: Optional[pulumi.Input[str]] = None,
                 spanning_tree_bpduguard_enable: Optional[pulumi.Input[bool]] = None,
                 spanning_tree_portfast: Optional[pulumi.Input[bool]] = None,
                 spanning_tree_portfast_disable: Optional[pulumi.Input[bool]] = None,
                 spanning_tree_portfast_edge: Optional[pulumi.Input[bool]] = None,
                 spanning_tree_portfast_network: Optional[pulumi.Input[bool]] = None,
                 spanning_tree_service_policy: Optional[pulumi.Input[bool]] = None,
                 storm_control_action_shutdown: Optional[pulumi.Input[bool]] = None,
                 storm_control_action_trap: Optional[pulumi.Input[bool]] = None,
                 storm_control_broadcast_level_bps_threshold: Optional[pulumi.Input[float]] = None,
                 storm_control_broadcast_level_pps_threshold: Optional[pulumi.Input[str]] = None,
                 storm_control_broadcast_level_threshold: Optional[pulumi.Input[float]] = None,
                 storm_control_multicast_level_bps_threshold: Optional[pulumi.Input[float]] = None,
                 storm_control_multicast_level_pps_threshold: Optional[pulumi.Input[str]] = None,
                 storm_control_multicast_level_threshold: Optional[pulumi.Input[float]] = None,
                 subscriber_aging_inactivity_timer_probe: Optional[pulumi.Input[bool]] = None,
                 subscriber_aging_inactivity_timer_value: Optional[pulumi.Input[int]] = None,
                 subscriber_aging_probe: Optional[pulumi.Input[bool]] = None,
                 switchport_access_vlan: Optional[pulumi.Input[int]] = None,
                 switchport_block_unicast: Optional[pulumi.Input[bool]] = None,
                 switchport_mode_access: Optional[pulumi.Input[bool]] = None,
                 switchport_mode_trunk: Optional[pulumi.Input[bool]] = None,
                 switchport_nonegotiate: Optional[pulumi.Input[bool]] = None,
                 switchport_port_security: Optional[pulumi.Input[bool]] = None,
                 switchport_port_security_aging_static: Optional[pulumi.Input[bool]] = None,
                 switchport_port_security_aging_time: Optional[pulumi.Input[int]] = None,
                 switchport_port_security_aging_type: Optional[pulumi.Input[bool]] = None,
                 switchport_port_security_aging_type_inactivity: Optional[pulumi.Input[bool]] = None,
                 switchport_port_security_maximum_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TemplateSwitchportPortSecurityMaximumRangeArgs']]]]] = None,
                 switchport_port_security_violation_protect: Optional[pulumi.Input[bool]] = None,
                 switchport_port_security_violation_restrict: Optional[pulumi.Input[bool]] = None,
                 switchport_port_security_violation_shutdown: Optional[pulumi.Input[bool]] = None,
                 switchport_private_vlan_host_association_primary_range: Optional[pulumi.Input[int]] = None,
                 switchport_private_vlan_host_association_secondary_range: Optional[pulumi.Input[int]] = None,
                 switchport_trunk_allowed_vlans: Optional[pulumi.Input[str]] = None,
                 switchport_trunk_allowed_vlans_all: Optional[pulumi.Input[bool]] = None,
                 switchport_trunk_allowed_vlans_none: Optional[pulumi.Input[bool]] = None,
                 switchport_trunk_native_vlan_tag: Optional[pulumi.Input[bool]] = None,
                 switchport_trunk_native_vlan_vlan_id: Optional[pulumi.Input[int]] = None,
                 switchport_voice_vlan: Optional[pulumi.Input[int]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TemplateArgs.__new__(TemplateArgs)

            __props__.__dict__["access_session_closed"] = access_session_closed
            __props__.__dict__["access_session_control_direction"] = access_session_control_direction
            __props__.__dict__["access_session_host_mode"] = access_session_host_mode
            __props__.__dict__["access_session_interface_template_sticky"] = access_session_interface_template_sticky
            __props__.__dict__["access_session_interface_template_sticky_timer"] = access_session_interface_template_sticky_timer
            __props__.__dict__["access_session_monitor"] = access_session_monitor
            __props__.__dict__["access_session_port_control"] = access_session_port_control
            __props__.__dict__["authentication_periodic"] = authentication_periodic
            __props__.__dict__["authentication_timer_reauthenticate_range"] = authentication_timer_reauthenticate_range
            __props__.__dict__["authentication_timer_reauthenticate_server"] = authentication_timer_reauthenticate_server
            __props__.__dict__["cts_manual"] = cts_manual
            __props__.__dict__["cts_manual_policy_static_sgt"] = cts_manual_policy_static_sgt
            __props__.__dict__["cts_manual_policy_static_trusted"] = cts_manual_policy_static_trusted
            __props__.__dict__["cts_manual_propagate_sgt"] = cts_manual_propagate_sgt
            __props__.__dict__["cts_role_based_enforcement"] = cts_role_based_enforcement
            __props__.__dict__["delete_mode"] = delete_mode
            __props__.__dict__["device"] = device
            __props__.__dict__["device_tracking"] = device_tracking
            __props__.__dict__["device_tracking_attach_policies"] = device_tracking_attach_policies
            __props__.__dict__["device_tracking_vlan_range"] = device_tracking_vlan_range
            __props__.__dict__["dot1x_max_reauth_req"] = dot1x_max_reauth_req
            __props__.__dict__["dot1x_max_req"] = dot1x_max_req
            __props__.__dict__["dot1x_pae"] = dot1x_pae
            __props__.__dict__["dot1x_timeout_tx_period"] = dot1x_timeout_tx_period
            __props__.__dict__["ip_access_groups"] = ip_access_groups
            __props__.__dict__["ip_dhcp_snooping_limit_rate"] = ip_dhcp_snooping_limit_rate
            __props__.__dict__["ip_dhcp_snooping_trust"] = ip_dhcp_snooping_trust
            __props__.__dict__["load_interval"] = load_interval
            __props__.__dict__["mab"] = mab
            __props__.__dict__["mab_eap"] = mab_eap
            __props__.__dict__["service_policy_input"] = service_policy_input
            __props__.__dict__["service_policy_output"] = service_policy_output
            __props__.__dict__["service_policy_type_control_subscriber"] = service_policy_type_control_subscriber
            __props__.__dict__["source_template"] = source_template
            __props__.__dict__["spanning_tree_bpduguard_enable"] = spanning_tree_bpduguard_enable
            __props__.__dict__["spanning_tree_portfast"] = spanning_tree_portfast
            __props__.__dict__["spanning_tree_portfast_disable"] = spanning_tree_portfast_disable
            __props__.__dict__["spanning_tree_portfast_edge"] = spanning_tree_portfast_edge
            __props__.__dict__["spanning_tree_portfast_network"] = spanning_tree_portfast_network
            __props__.__dict__["spanning_tree_service_policy"] = spanning_tree_service_policy
            __props__.__dict__["storm_control_action_shutdown"] = storm_control_action_shutdown
            __props__.__dict__["storm_control_action_trap"] = storm_control_action_trap
            __props__.__dict__["storm_control_broadcast_level_bps_threshold"] = storm_control_broadcast_level_bps_threshold
            __props__.__dict__["storm_control_broadcast_level_pps_threshold"] = storm_control_broadcast_level_pps_threshold
            __props__.__dict__["storm_control_broadcast_level_threshold"] = storm_control_broadcast_level_threshold
            __props__.__dict__["storm_control_multicast_level_bps_threshold"] = storm_control_multicast_level_bps_threshold
            __props__.__dict__["storm_control_multicast_level_pps_threshold"] = storm_control_multicast_level_pps_threshold
            __props__.__dict__["storm_control_multicast_level_threshold"] = storm_control_multicast_level_threshold
            __props__.__dict__["subscriber_aging_inactivity_timer_probe"] = subscriber_aging_inactivity_timer_probe
            __props__.__dict__["subscriber_aging_inactivity_timer_value"] = subscriber_aging_inactivity_timer_value
            __props__.__dict__["subscriber_aging_probe"] = subscriber_aging_probe
            __props__.__dict__["switchport_access_vlan"] = switchport_access_vlan
            __props__.__dict__["switchport_block_unicast"] = switchport_block_unicast
            __props__.__dict__["switchport_mode_access"] = switchport_mode_access
            __props__.__dict__["switchport_mode_trunk"] = switchport_mode_trunk
            __props__.__dict__["switchport_nonegotiate"] = switchport_nonegotiate
            __props__.__dict__["switchport_port_security"] = switchport_port_security
            __props__.__dict__["switchport_port_security_aging_static"] = switchport_port_security_aging_static
            __props__.__dict__["switchport_port_security_aging_time"] = switchport_port_security_aging_time
            __props__.__dict__["switchport_port_security_aging_type"] = switchport_port_security_aging_type
            __props__.__dict__["switchport_port_security_aging_type_inactivity"] = switchport_port_security_aging_type_inactivity
            __props__.__dict__["switchport_port_security_maximum_ranges"] = switchport_port_security_maximum_ranges
            __props__.__dict__["switchport_port_security_violation_protect"] = switchport_port_security_violation_protect
            __props__.__dict__["switchport_port_security_violation_restrict"] = switchport_port_security_violation_restrict
            __props__.__dict__["switchport_port_security_violation_shutdown"] = switchport_port_security_violation_shutdown
            __props__.__dict__["switchport_private_vlan_host_association_primary_range"] = switchport_private_vlan_host_association_primary_range
            __props__.__dict__["switchport_private_vlan_host_association_secondary_range"] = switchport_private_vlan_host_association_secondary_range
            __props__.__dict__["switchport_trunk_allowed_vlans"] = switchport_trunk_allowed_vlans
            __props__.__dict__["switchport_trunk_allowed_vlans_all"] = switchport_trunk_allowed_vlans_all
            __props__.__dict__["switchport_trunk_allowed_vlans_none"] = switchport_trunk_allowed_vlans_none
            __props__.__dict__["switchport_trunk_native_vlan_tag"] = switchport_trunk_native_vlan_tag
            __props__.__dict__["switchport_trunk_native_vlan_vlan_id"] = switchport_trunk_native_vlan_vlan_id
            __props__.__dict__["switchport_voice_vlan"] = switchport_voice_vlan
            if template_name is None and not opts.urn:
                raise TypeError("Missing required property 'template_name'")
            __props__.__dict__["template_name"] = template_name
        super(Template, __self__).__init__(
            'iosxe:iosxe/template:Template',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_session_closed: Optional[pulumi.Input[bool]] = None,
            access_session_control_direction: Optional[pulumi.Input[str]] = None,
            access_session_host_mode: Optional[pulumi.Input[str]] = None,
            access_session_interface_template_sticky: Optional[pulumi.Input[bool]] = None,
            access_session_interface_template_sticky_timer: Optional[pulumi.Input[int]] = None,
            access_session_monitor: Optional[pulumi.Input[bool]] = None,
            access_session_port_control: Optional[pulumi.Input[str]] = None,
            authentication_periodic: Optional[pulumi.Input[bool]] = None,
            authentication_timer_reauthenticate_range: Optional[pulumi.Input[int]] = None,
            authentication_timer_reauthenticate_server: Optional[pulumi.Input[bool]] = None,
            cts_manual: Optional[pulumi.Input[bool]] = None,
            cts_manual_policy_static_sgt: Optional[pulumi.Input[int]] = None,
            cts_manual_policy_static_trusted: Optional[pulumi.Input[bool]] = None,
            cts_manual_propagate_sgt: Optional[pulumi.Input[bool]] = None,
            cts_role_based_enforcement: Optional[pulumi.Input[bool]] = None,
            delete_mode: Optional[pulumi.Input[str]] = None,
            device: Optional[pulumi.Input[str]] = None,
            device_tracking: Optional[pulumi.Input[bool]] = None,
            device_tracking_attach_policies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TemplateDeviceTrackingAttachPolicyArgs']]]]] = None,
            device_tracking_vlan_range: Optional[pulumi.Input[str]] = None,
            dot1x_max_reauth_req: Optional[pulumi.Input[int]] = None,
            dot1x_max_req: Optional[pulumi.Input[int]] = None,
            dot1x_pae: Optional[pulumi.Input[str]] = None,
            dot1x_timeout_tx_period: Optional[pulumi.Input[int]] = None,
            ip_access_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TemplateIpAccessGroupArgs']]]]] = None,
            ip_dhcp_snooping_limit_rate: Optional[pulumi.Input[int]] = None,
            ip_dhcp_snooping_trust: Optional[pulumi.Input[bool]] = None,
            load_interval: Optional[pulumi.Input[int]] = None,
            mab: Optional[pulumi.Input[bool]] = None,
            mab_eap: Optional[pulumi.Input[bool]] = None,
            service_policy_input: Optional[pulumi.Input[str]] = None,
            service_policy_output: Optional[pulumi.Input[str]] = None,
            service_policy_type_control_subscriber: Optional[pulumi.Input[str]] = None,
            source_template: Optional[pulumi.Input[str]] = None,
            spanning_tree_bpduguard_enable: Optional[pulumi.Input[bool]] = None,
            spanning_tree_portfast: Optional[pulumi.Input[bool]] = None,
            spanning_tree_portfast_disable: Optional[pulumi.Input[bool]] = None,
            spanning_tree_portfast_edge: Optional[pulumi.Input[bool]] = None,
            spanning_tree_portfast_network: Optional[pulumi.Input[bool]] = None,
            spanning_tree_service_policy: Optional[pulumi.Input[bool]] = None,
            storm_control_action_shutdown: Optional[pulumi.Input[bool]] = None,
            storm_control_action_trap: Optional[pulumi.Input[bool]] = None,
            storm_control_broadcast_level_bps_threshold: Optional[pulumi.Input[float]] = None,
            storm_control_broadcast_level_pps_threshold: Optional[pulumi.Input[str]] = None,
            storm_control_broadcast_level_threshold: Optional[pulumi.Input[float]] = None,
            storm_control_multicast_level_bps_threshold: Optional[pulumi.Input[float]] = None,
            storm_control_multicast_level_pps_threshold: Optional[pulumi.Input[str]] = None,
            storm_control_multicast_level_threshold: Optional[pulumi.Input[float]] = None,
            subscriber_aging_inactivity_timer_probe: Optional[pulumi.Input[bool]] = None,
            subscriber_aging_inactivity_timer_value: Optional[pulumi.Input[int]] = None,
            subscriber_aging_probe: Optional[pulumi.Input[bool]] = None,
            switchport_access_vlan: Optional[pulumi.Input[int]] = None,
            switchport_block_unicast: Optional[pulumi.Input[bool]] = None,
            switchport_mode_access: Optional[pulumi.Input[bool]] = None,
            switchport_mode_trunk: Optional[pulumi.Input[bool]] = None,
            switchport_nonegotiate: Optional[pulumi.Input[bool]] = None,
            switchport_port_security: Optional[pulumi.Input[bool]] = None,
            switchport_port_security_aging_static: Optional[pulumi.Input[bool]] = None,
            switchport_port_security_aging_time: Optional[pulumi.Input[int]] = None,
            switchport_port_security_aging_type: Optional[pulumi.Input[bool]] = None,
            switchport_port_security_aging_type_inactivity: Optional[pulumi.Input[bool]] = None,
            switchport_port_security_maximum_ranges: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TemplateSwitchportPortSecurityMaximumRangeArgs']]]]] = None,
            switchport_port_security_violation_protect: Optional[pulumi.Input[bool]] = None,
            switchport_port_security_violation_restrict: Optional[pulumi.Input[bool]] = None,
            switchport_port_security_violation_shutdown: Optional[pulumi.Input[bool]] = None,
            switchport_private_vlan_host_association_primary_range: Optional[pulumi.Input[int]] = None,
            switchport_private_vlan_host_association_secondary_range: Optional[pulumi.Input[int]] = None,
            switchport_trunk_allowed_vlans: Optional[pulumi.Input[str]] = None,
            switchport_trunk_allowed_vlans_all: Optional[pulumi.Input[bool]] = None,
            switchport_trunk_allowed_vlans_none: Optional[pulumi.Input[bool]] = None,
            switchport_trunk_native_vlan_tag: Optional[pulumi.Input[bool]] = None,
            switchport_trunk_native_vlan_vlan_id: Optional[pulumi.Input[int]] = None,
            switchport_voice_vlan: Optional[pulumi.Input[int]] = None,
            template_name: Optional[pulumi.Input[str]] = None) -> 'Template':
        """
        Get an existing Template resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] access_session_closed: Enable closed access on port (disabled by default, i.e. open access)
        :param pulumi.Input[str] access_session_control_direction: Set the control-direction on the interface - Choices: `both`, `in`
        :param pulumi.Input[str] access_session_host_mode: Set the Host mode for authentication on this interface - Choices: `multi-auth`, `multi-domain`, `multi-host`,
               `single-host`
        :param pulumi.Input[bool] access_session_interface_template_sticky: Interface templates set to sticky
        :param pulumi.Input[int] access_session_interface_template_sticky_timer: Sticky timer value - Range: `1`-`65535`
        :param pulumi.Input[bool] access_session_monitor: Apply template to monitor access sessions on the port
        :param pulumi.Input[str] access_session_port_control: Set the port-control value - Choices: `auto`, `force-authorized`, `force-unauthorized`
        :param pulumi.Input[bool] authentication_periodic: Enable or Disable Reauthentication for this port
        :param pulumi.Input[int] authentication_timer_reauthenticate_range: Enter a value between 1 and 65535 - Range: `1`-`65535`
        :param pulumi.Input[bool] authentication_timer_reauthenticate_server: Obtain re-authentication timeout value from the server
        :param pulumi.Input[bool] cts_manual: Supply local configuration for CTS parameters
        :param pulumi.Input[int] cts_manual_policy_static_sgt: Source Security Group Tag to apply to untagged or non-trusted incoming traffic - Range: `2`-`65519`
        :param pulumi.Input[bool] cts_manual_policy_static_trusted: Trust the Source Group Tags (SGT) that the peer uses for sending
        :param pulumi.Input[bool] cts_manual_propagate_sgt: CTS SGT Propagation configuration
        :param pulumi.Input[bool] cts_role_based_enforcement: Enable Role-based Access Control enforcement
        :param pulumi.Input[str] delete_mode: Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
               managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
               Default value is `all`. - Choices: `all`, `attributes`
        :param pulumi.Input[str] device: A device name from the provider configuration.
        :param pulumi.Input[bool] device_tracking: Configure device-tracking on the interface
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TemplateDeviceTrackingAttachPolicyArgs']]]] device_tracking_attach_policies: policy name for device tracking
        :param pulumi.Input[str] device_tracking_vlan_range: VLAN IDs of the VLANs for which this policy applies
        :param pulumi.Input[int] dot1x_max_reauth_req: Max No. of Reauthentication Attempts - Range: `1`-`10`
        :param pulumi.Input[int] dot1x_max_req: Max No. of Retries - Range: `1`-`10`
        :param pulumi.Input[str] dot1x_pae: Set 802.1x interface pae type - Choices: `authenticator`, `both`, `supplicant`
        :param pulumi.Input[int] dot1x_timeout_tx_period: Timeout for supplicant retries - Range: `1`-`65535`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TemplateIpAccessGroupArgs']]]] ip_access_groups: Access control list for IP packets
        :param pulumi.Input[int] ip_dhcp_snooping_limit_rate: DHCP snooping rate limit - Range: `1`-`2048`
        :param pulumi.Input[bool] ip_dhcp_snooping_trust: DHCP Snooping trust config
        :param pulumi.Input[int] load_interval: Load interval delay in seconds - Range: `30`-`600`
        :param pulumi.Input[bool] mab: MAC Authentication Bypass Interface Config Commands
        :param pulumi.Input[bool] mab_eap: Use EAP authentication for MAC Auth Bypass
        :param pulumi.Input[str] service_policy_input: policy-map name
        :param pulumi.Input[str] service_policy_output: policy-map name
        :param pulumi.Input[str] service_policy_type_control_subscriber: Apply a subscriber control policy to the interface
        :param pulumi.Input[str] source_template: Get config from a template
        :param pulumi.Input[bool] spanning_tree_bpduguard_enable: Enable BPDU guard for this interface
        :param pulumi.Input[bool] spanning_tree_portfast: Portfast options for the interface
        :param pulumi.Input[bool] spanning_tree_portfast_disable: Disable portfast for this interface
        :param pulumi.Input[bool] spanning_tree_portfast_edge: Enable portfast edge on the interface
        :param pulumi.Input[bool] spanning_tree_portfast_network: Enable portfast network on the interface
        :param pulumi.Input[bool] spanning_tree_service_policy: help
        :param pulumi.Input[bool] storm_control_action_shutdown: Shutdown this interface if a storm occurs
        :param pulumi.Input[bool] storm_control_action_trap: Send SNMP trap if a storm occurs
        :param pulumi.Input[float] storm_control_broadcast_level_bps_threshold: Enter threshold
        :param pulumi.Input[str] storm_control_broadcast_level_pps_threshold: Enter threshold
        :param pulumi.Input[float] storm_control_broadcast_level_threshold: Enter threshold
        :param pulumi.Input[float] storm_control_multicast_level_bps_threshold: Enter threshold
        :param pulumi.Input[str] storm_control_multicast_level_pps_threshold: Enter threshold
        :param pulumi.Input[float] storm_control_multicast_level_threshold: Enter threshold
        :param pulumi.Input[bool] subscriber_aging_inactivity_timer_probe: ARP probe
        :param pulumi.Input[int] subscriber_aging_inactivity_timer_value: Enter a value between 1 and 65535 in seconds - Range: `1`-`65535`
        :param pulumi.Input[bool] subscriber_aging_probe: ARP probe
        :param pulumi.Input[int] switchport_access_vlan: VLAN ID of the VLAN when this port is in access mode - Range: `1`-`4094`
        :param pulumi.Input[bool] switchport_block_unicast: Block unknown unicast addresses
        :param pulumi.Input[bool] switchport_mode_access: Set trunking mode to ACCESS unconditionally
        :param pulumi.Input[bool] switchport_mode_trunk: Set trunking mode to TRUNK unconditionally
        :param pulumi.Input[bool] switchport_nonegotiate: Device will not engage in negotiation protocol on this interface
        :param pulumi.Input[bool] switchport_port_security: Security related command
        :param pulumi.Input[bool] switchport_port_security_aging_static: Enable aging for configured secure addresses
        :param pulumi.Input[int] switchport_port_security_aging_time: Port-security aging time - Range: `1`-`1440`
        :param pulumi.Input[bool] switchport_port_security_aging_type: Port-security aging type
        :param pulumi.Input[bool] switchport_port_security_aging_type_inactivity: Aging based on inactivity time period
        :param pulumi.Input[bool] switchport_port_security_violation_protect: Security violation protect mode
        :param pulumi.Input[bool] switchport_port_security_violation_restrict: Security violation restrict mode
        :param pulumi.Input[bool] switchport_port_security_violation_shutdown: Security violation shutdown mode
        :param pulumi.Input[int] switchport_private_vlan_host_association_primary_range: Primary normal range VLAN ID of the private VLAN port association - Range: `2`-`1001`
        :param pulumi.Input[int] switchport_private_vlan_host_association_secondary_range: Secondary normal range VLAN ID of the private VLAN host port association - Range: `2`-`1001`
        :param pulumi.Input[str] switchport_trunk_allowed_vlans: VLAN IDs of the allowed VLANs when this port is in trunking mode
        :param pulumi.Input[bool] switchport_trunk_allowed_vlans_all: all VLANs
        :param pulumi.Input[bool] switchport_trunk_allowed_vlans_none: no VLANs
        :param pulumi.Input[bool] switchport_trunk_native_vlan_tag: Set native VLAN tagging state
        :param pulumi.Input[int] switchport_trunk_native_vlan_vlan_id: VLAN ID of the native VLAN when this port is in trunking mode - Range: `1`-`4094`
        :param pulumi.Input[int] switchport_voice_vlan: Vlan for voice traffic - Range: `1`-`4094`
        :param pulumi.Input[str] template_name: Template name
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TemplateState.__new__(_TemplateState)

        __props__.__dict__["access_session_closed"] = access_session_closed
        __props__.__dict__["access_session_control_direction"] = access_session_control_direction
        __props__.__dict__["access_session_host_mode"] = access_session_host_mode
        __props__.__dict__["access_session_interface_template_sticky"] = access_session_interface_template_sticky
        __props__.__dict__["access_session_interface_template_sticky_timer"] = access_session_interface_template_sticky_timer
        __props__.__dict__["access_session_monitor"] = access_session_monitor
        __props__.__dict__["access_session_port_control"] = access_session_port_control
        __props__.__dict__["authentication_periodic"] = authentication_periodic
        __props__.__dict__["authentication_timer_reauthenticate_range"] = authentication_timer_reauthenticate_range
        __props__.__dict__["authentication_timer_reauthenticate_server"] = authentication_timer_reauthenticate_server
        __props__.__dict__["cts_manual"] = cts_manual
        __props__.__dict__["cts_manual_policy_static_sgt"] = cts_manual_policy_static_sgt
        __props__.__dict__["cts_manual_policy_static_trusted"] = cts_manual_policy_static_trusted
        __props__.__dict__["cts_manual_propagate_sgt"] = cts_manual_propagate_sgt
        __props__.__dict__["cts_role_based_enforcement"] = cts_role_based_enforcement
        __props__.__dict__["delete_mode"] = delete_mode
        __props__.__dict__["device"] = device
        __props__.__dict__["device_tracking"] = device_tracking
        __props__.__dict__["device_tracking_attach_policies"] = device_tracking_attach_policies
        __props__.__dict__["device_tracking_vlan_range"] = device_tracking_vlan_range
        __props__.__dict__["dot1x_max_reauth_req"] = dot1x_max_reauth_req
        __props__.__dict__["dot1x_max_req"] = dot1x_max_req
        __props__.__dict__["dot1x_pae"] = dot1x_pae
        __props__.__dict__["dot1x_timeout_tx_period"] = dot1x_timeout_tx_period
        __props__.__dict__["ip_access_groups"] = ip_access_groups
        __props__.__dict__["ip_dhcp_snooping_limit_rate"] = ip_dhcp_snooping_limit_rate
        __props__.__dict__["ip_dhcp_snooping_trust"] = ip_dhcp_snooping_trust
        __props__.__dict__["load_interval"] = load_interval
        __props__.__dict__["mab"] = mab
        __props__.__dict__["mab_eap"] = mab_eap
        __props__.__dict__["service_policy_input"] = service_policy_input
        __props__.__dict__["service_policy_output"] = service_policy_output
        __props__.__dict__["service_policy_type_control_subscriber"] = service_policy_type_control_subscriber
        __props__.__dict__["source_template"] = source_template
        __props__.__dict__["spanning_tree_bpduguard_enable"] = spanning_tree_bpduguard_enable
        __props__.__dict__["spanning_tree_portfast"] = spanning_tree_portfast
        __props__.__dict__["spanning_tree_portfast_disable"] = spanning_tree_portfast_disable
        __props__.__dict__["spanning_tree_portfast_edge"] = spanning_tree_portfast_edge
        __props__.__dict__["spanning_tree_portfast_network"] = spanning_tree_portfast_network
        __props__.__dict__["spanning_tree_service_policy"] = spanning_tree_service_policy
        __props__.__dict__["storm_control_action_shutdown"] = storm_control_action_shutdown
        __props__.__dict__["storm_control_action_trap"] = storm_control_action_trap
        __props__.__dict__["storm_control_broadcast_level_bps_threshold"] = storm_control_broadcast_level_bps_threshold
        __props__.__dict__["storm_control_broadcast_level_pps_threshold"] = storm_control_broadcast_level_pps_threshold
        __props__.__dict__["storm_control_broadcast_level_threshold"] = storm_control_broadcast_level_threshold
        __props__.__dict__["storm_control_multicast_level_bps_threshold"] = storm_control_multicast_level_bps_threshold
        __props__.__dict__["storm_control_multicast_level_pps_threshold"] = storm_control_multicast_level_pps_threshold
        __props__.__dict__["storm_control_multicast_level_threshold"] = storm_control_multicast_level_threshold
        __props__.__dict__["subscriber_aging_inactivity_timer_probe"] = subscriber_aging_inactivity_timer_probe
        __props__.__dict__["subscriber_aging_inactivity_timer_value"] = subscriber_aging_inactivity_timer_value
        __props__.__dict__["subscriber_aging_probe"] = subscriber_aging_probe
        __props__.__dict__["switchport_access_vlan"] = switchport_access_vlan
        __props__.__dict__["switchport_block_unicast"] = switchport_block_unicast
        __props__.__dict__["switchport_mode_access"] = switchport_mode_access
        __props__.__dict__["switchport_mode_trunk"] = switchport_mode_trunk
        __props__.__dict__["switchport_nonegotiate"] = switchport_nonegotiate
        __props__.__dict__["switchport_port_security"] = switchport_port_security
        __props__.__dict__["switchport_port_security_aging_static"] = switchport_port_security_aging_static
        __props__.__dict__["switchport_port_security_aging_time"] = switchport_port_security_aging_time
        __props__.__dict__["switchport_port_security_aging_type"] = switchport_port_security_aging_type
        __props__.__dict__["switchport_port_security_aging_type_inactivity"] = switchport_port_security_aging_type_inactivity
        __props__.__dict__["switchport_port_security_maximum_ranges"] = switchport_port_security_maximum_ranges
        __props__.__dict__["switchport_port_security_violation_protect"] = switchport_port_security_violation_protect
        __props__.__dict__["switchport_port_security_violation_restrict"] = switchport_port_security_violation_restrict
        __props__.__dict__["switchport_port_security_violation_shutdown"] = switchport_port_security_violation_shutdown
        __props__.__dict__["switchport_private_vlan_host_association_primary_range"] = switchport_private_vlan_host_association_primary_range
        __props__.__dict__["switchport_private_vlan_host_association_secondary_range"] = switchport_private_vlan_host_association_secondary_range
        __props__.__dict__["switchport_trunk_allowed_vlans"] = switchport_trunk_allowed_vlans
        __props__.__dict__["switchport_trunk_allowed_vlans_all"] = switchport_trunk_allowed_vlans_all
        __props__.__dict__["switchport_trunk_allowed_vlans_none"] = switchport_trunk_allowed_vlans_none
        __props__.__dict__["switchport_trunk_native_vlan_tag"] = switchport_trunk_native_vlan_tag
        __props__.__dict__["switchport_trunk_native_vlan_vlan_id"] = switchport_trunk_native_vlan_vlan_id
        __props__.__dict__["switchport_voice_vlan"] = switchport_voice_vlan
        __props__.__dict__["template_name"] = template_name
        return Template(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessSessionClosed")
    def access_session_closed(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable closed access on port (disabled by default, i.e. open access)
        """
        return pulumi.get(self, "access_session_closed")

    @property
    @pulumi.getter(name="accessSessionControlDirection")
    def access_session_control_direction(self) -> pulumi.Output[Optional[str]]:
        """
        Set the control-direction on the interface - Choices: `both`, `in`
        """
        return pulumi.get(self, "access_session_control_direction")

    @property
    @pulumi.getter(name="accessSessionHostMode")
    def access_session_host_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Set the Host mode for authentication on this interface - Choices: `multi-auth`, `multi-domain`, `multi-host`,
        `single-host`
        """
        return pulumi.get(self, "access_session_host_mode")

    @property
    @pulumi.getter(name="accessSessionInterfaceTemplateSticky")
    def access_session_interface_template_sticky(self) -> pulumi.Output[Optional[bool]]:
        """
        Interface templates set to sticky
        """
        return pulumi.get(self, "access_session_interface_template_sticky")

    @property
    @pulumi.getter(name="accessSessionInterfaceTemplateStickyTimer")
    def access_session_interface_template_sticky_timer(self) -> pulumi.Output[Optional[int]]:
        """
        Sticky timer value - Range: `1`-`65535`
        """
        return pulumi.get(self, "access_session_interface_template_sticky_timer")

    @property
    @pulumi.getter(name="accessSessionMonitor")
    def access_session_monitor(self) -> pulumi.Output[Optional[bool]]:
        """
        Apply template to monitor access sessions on the port
        """
        return pulumi.get(self, "access_session_monitor")

    @property
    @pulumi.getter(name="accessSessionPortControl")
    def access_session_port_control(self) -> pulumi.Output[Optional[str]]:
        """
        Set the port-control value - Choices: `auto`, `force-authorized`, `force-unauthorized`
        """
        return pulumi.get(self, "access_session_port_control")

    @property
    @pulumi.getter(name="authenticationPeriodic")
    def authentication_periodic(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable or Disable Reauthentication for this port
        """
        return pulumi.get(self, "authentication_periodic")

    @property
    @pulumi.getter(name="authenticationTimerReauthenticateRange")
    def authentication_timer_reauthenticate_range(self) -> pulumi.Output[Optional[int]]:
        """
        Enter a value between 1 and 65535 - Range: `1`-`65535`
        """
        return pulumi.get(self, "authentication_timer_reauthenticate_range")

    @property
    @pulumi.getter(name="authenticationTimerReauthenticateServer")
    def authentication_timer_reauthenticate_server(self) -> pulumi.Output[Optional[bool]]:
        """
        Obtain re-authentication timeout value from the server
        """
        return pulumi.get(self, "authentication_timer_reauthenticate_server")

    @property
    @pulumi.getter(name="ctsManual")
    def cts_manual(self) -> pulumi.Output[Optional[bool]]:
        """
        Supply local configuration for CTS parameters
        """
        return pulumi.get(self, "cts_manual")

    @property
    @pulumi.getter(name="ctsManualPolicyStaticSgt")
    def cts_manual_policy_static_sgt(self) -> pulumi.Output[Optional[int]]:
        """
        Source Security Group Tag to apply to untagged or non-trusted incoming traffic - Range: `2`-`65519`
        """
        return pulumi.get(self, "cts_manual_policy_static_sgt")

    @property
    @pulumi.getter(name="ctsManualPolicyStaticTrusted")
    def cts_manual_policy_static_trusted(self) -> pulumi.Output[Optional[bool]]:
        """
        Trust the Source Group Tags (SGT) that the peer uses for sending
        """
        return pulumi.get(self, "cts_manual_policy_static_trusted")

    @property
    @pulumi.getter(name="ctsManualPropagateSgt")
    def cts_manual_propagate_sgt(self) -> pulumi.Output[Optional[bool]]:
        """
        CTS SGT Propagation configuration
        """
        return pulumi.get(self, "cts_manual_propagate_sgt")

    @property
    @pulumi.getter(name="ctsRoleBasedEnforcement")
    def cts_role_based_enforcement(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable Role-based Access Control enforcement
        """
        return pulumi.get(self, "cts_role_based_enforcement")

    @property
    @pulumi.getter(name="deleteMode")
    def delete_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        Default value is `all`. - Choices: `all`, `attributes`
        """
        return pulumi.get(self, "delete_mode")

    @property
    @pulumi.getter
    def device(self) -> pulumi.Output[Optional[str]]:
        """
        A device name from the provider configuration.
        """
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="deviceTracking")
    def device_tracking(self) -> pulumi.Output[Optional[bool]]:
        """
        Configure device-tracking on the interface
        """
        return pulumi.get(self, "device_tracking")

    @property
    @pulumi.getter(name="deviceTrackingAttachPolicies")
    def device_tracking_attach_policies(self) -> pulumi.Output[Optional[Sequence['outputs.TemplateDeviceTrackingAttachPolicy']]]:
        """
        policy name for device tracking
        """
        return pulumi.get(self, "device_tracking_attach_policies")

    @property
    @pulumi.getter(name="deviceTrackingVlanRange")
    def device_tracking_vlan_range(self) -> pulumi.Output[Optional[str]]:
        """
        VLAN IDs of the VLANs for which this policy applies
        """
        return pulumi.get(self, "device_tracking_vlan_range")

    @property
    @pulumi.getter(name="dot1xMaxReauthReq")
    def dot1x_max_reauth_req(self) -> pulumi.Output[Optional[int]]:
        """
        Max No. of Reauthentication Attempts - Range: `1`-`10`
        """
        return pulumi.get(self, "dot1x_max_reauth_req")

    @property
    @pulumi.getter(name="dot1xMaxReq")
    def dot1x_max_req(self) -> pulumi.Output[Optional[int]]:
        """
        Max No. of Retries - Range: `1`-`10`
        """
        return pulumi.get(self, "dot1x_max_req")

    @property
    @pulumi.getter(name="dot1xPae")
    def dot1x_pae(self) -> pulumi.Output[Optional[str]]:
        """
        Set 802.1x interface pae type - Choices: `authenticator`, `both`, `supplicant`
        """
        return pulumi.get(self, "dot1x_pae")

    @property
    @pulumi.getter(name="dot1xTimeoutTxPeriod")
    def dot1x_timeout_tx_period(self) -> pulumi.Output[Optional[int]]:
        """
        Timeout for supplicant retries - Range: `1`-`65535`
        """
        return pulumi.get(self, "dot1x_timeout_tx_period")

    @property
    @pulumi.getter(name="ipAccessGroups")
    def ip_access_groups(self) -> pulumi.Output[Optional[Sequence['outputs.TemplateIpAccessGroup']]]:
        """
        Access control list for IP packets
        """
        return pulumi.get(self, "ip_access_groups")

    @property
    @pulumi.getter(name="ipDhcpSnoopingLimitRate")
    def ip_dhcp_snooping_limit_rate(self) -> pulumi.Output[Optional[int]]:
        """
        DHCP snooping rate limit - Range: `1`-`2048`
        """
        return pulumi.get(self, "ip_dhcp_snooping_limit_rate")

    @property
    @pulumi.getter(name="ipDhcpSnoopingTrust")
    def ip_dhcp_snooping_trust(self) -> pulumi.Output[Optional[bool]]:
        """
        DHCP Snooping trust config
        """
        return pulumi.get(self, "ip_dhcp_snooping_trust")

    @property
    @pulumi.getter(name="loadInterval")
    def load_interval(self) -> pulumi.Output[Optional[int]]:
        """
        Load interval delay in seconds - Range: `30`-`600`
        """
        return pulumi.get(self, "load_interval")

    @property
    @pulumi.getter
    def mab(self) -> pulumi.Output[Optional[bool]]:
        """
        MAC Authentication Bypass Interface Config Commands
        """
        return pulumi.get(self, "mab")

    @property
    @pulumi.getter(name="mabEap")
    def mab_eap(self) -> pulumi.Output[Optional[bool]]:
        """
        Use EAP authentication for MAC Auth Bypass
        """
        return pulumi.get(self, "mab_eap")

    @property
    @pulumi.getter(name="servicePolicyInput")
    def service_policy_input(self) -> pulumi.Output[Optional[str]]:
        """
        policy-map name
        """
        return pulumi.get(self, "service_policy_input")

    @property
    @pulumi.getter(name="servicePolicyOutput")
    def service_policy_output(self) -> pulumi.Output[Optional[str]]:
        """
        policy-map name
        """
        return pulumi.get(self, "service_policy_output")

    @property
    @pulumi.getter(name="servicePolicyTypeControlSubscriber")
    def service_policy_type_control_subscriber(self) -> pulumi.Output[Optional[str]]:
        """
        Apply a subscriber control policy to the interface
        """
        return pulumi.get(self, "service_policy_type_control_subscriber")

    @property
    @pulumi.getter(name="sourceTemplate")
    def source_template(self) -> pulumi.Output[Optional[str]]:
        """
        Get config from a template
        """
        return pulumi.get(self, "source_template")

    @property
    @pulumi.getter(name="spanningTreeBpduguardEnable")
    def spanning_tree_bpduguard_enable(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable BPDU guard for this interface
        """
        return pulumi.get(self, "spanning_tree_bpduguard_enable")

    @property
    @pulumi.getter(name="spanningTreePortfast")
    def spanning_tree_portfast(self) -> pulumi.Output[Optional[bool]]:
        """
        Portfast options for the interface
        """
        return pulumi.get(self, "spanning_tree_portfast")

    @property
    @pulumi.getter(name="spanningTreePortfastDisable")
    def spanning_tree_portfast_disable(self) -> pulumi.Output[Optional[bool]]:
        """
        Disable portfast for this interface
        """
        return pulumi.get(self, "spanning_tree_portfast_disable")

    @property
    @pulumi.getter(name="spanningTreePortfastEdge")
    def spanning_tree_portfast_edge(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable portfast edge on the interface
        """
        return pulumi.get(self, "spanning_tree_portfast_edge")

    @property
    @pulumi.getter(name="spanningTreePortfastNetwork")
    def spanning_tree_portfast_network(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable portfast network on the interface
        """
        return pulumi.get(self, "spanning_tree_portfast_network")

    @property
    @pulumi.getter(name="spanningTreeServicePolicy")
    def spanning_tree_service_policy(self) -> pulumi.Output[Optional[bool]]:
        """
        help
        """
        return pulumi.get(self, "spanning_tree_service_policy")

    @property
    @pulumi.getter(name="stormControlActionShutdown")
    def storm_control_action_shutdown(self) -> pulumi.Output[Optional[bool]]:
        """
        Shutdown this interface if a storm occurs
        """
        return pulumi.get(self, "storm_control_action_shutdown")

    @property
    @pulumi.getter(name="stormControlActionTrap")
    def storm_control_action_trap(self) -> pulumi.Output[Optional[bool]]:
        """
        Send SNMP trap if a storm occurs
        """
        return pulumi.get(self, "storm_control_action_trap")

    @property
    @pulumi.getter(name="stormControlBroadcastLevelBpsThreshold")
    def storm_control_broadcast_level_bps_threshold(self) -> pulumi.Output[Optional[float]]:
        """
        Enter threshold
        """
        return pulumi.get(self, "storm_control_broadcast_level_bps_threshold")

    @property
    @pulumi.getter(name="stormControlBroadcastLevelPpsThreshold")
    def storm_control_broadcast_level_pps_threshold(self) -> pulumi.Output[Optional[str]]:
        """
        Enter threshold
        """
        return pulumi.get(self, "storm_control_broadcast_level_pps_threshold")

    @property
    @pulumi.getter(name="stormControlBroadcastLevelThreshold")
    def storm_control_broadcast_level_threshold(self) -> pulumi.Output[Optional[float]]:
        """
        Enter threshold
        """
        return pulumi.get(self, "storm_control_broadcast_level_threshold")

    @property
    @pulumi.getter(name="stormControlMulticastLevelBpsThreshold")
    def storm_control_multicast_level_bps_threshold(self) -> pulumi.Output[Optional[float]]:
        """
        Enter threshold
        """
        return pulumi.get(self, "storm_control_multicast_level_bps_threshold")

    @property
    @pulumi.getter(name="stormControlMulticastLevelPpsThreshold")
    def storm_control_multicast_level_pps_threshold(self) -> pulumi.Output[Optional[str]]:
        """
        Enter threshold
        """
        return pulumi.get(self, "storm_control_multicast_level_pps_threshold")

    @property
    @pulumi.getter(name="stormControlMulticastLevelThreshold")
    def storm_control_multicast_level_threshold(self) -> pulumi.Output[Optional[float]]:
        """
        Enter threshold
        """
        return pulumi.get(self, "storm_control_multicast_level_threshold")

    @property
    @pulumi.getter(name="subscriberAgingInactivityTimerProbe")
    def subscriber_aging_inactivity_timer_probe(self) -> pulumi.Output[Optional[bool]]:
        """
        ARP probe
        """
        return pulumi.get(self, "subscriber_aging_inactivity_timer_probe")

    @property
    @pulumi.getter(name="subscriberAgingInactivityTimerValue")
    def subscriber_aging_inactivity_timer_value(self) -> pulumi.Output[Optional[int]]:
        """
        Enter a value between 1 and 65535 in seconds - Range: `1`-`65535`
        """
        return pulumi.get(self, "subscriber_aging_inactivity_timer_value")

    @property
    @pulumi.getter(name="subscriberAgingProbe")
    def subscriber_aging_probe(self) -> pulumi.Output[Optional[bool]]:
        """
        ARP probe
        """
        return pulumi.get(self, "subscriber_aging_probe")

    @property
    @pulumi.getter(name="switchportAccessVlan")
    def switchport_access_vlan(self) -> pulumi.Output[Optional[int]]:
        """
        VLAN ID of the VLAN when this port is in access mode - Range: `1`-`4094`
        """
        return pulumi.get(self, "switchport_access_vlan")

    @property
    @pulumi.getter(name="switchportBlockUnicast")
    def switchport_block_unicast(self) -> pulumi.Output[Optional[bool]]:
        """
        Block unknown unicast addresses
        """
        return pulumi.get(self, "switchport_block_unicast")

    @property
    @pulumi.getter(name="switchportModeAccess")
    def switchport_mode_access(self) -> pulumi.Output[Optional[bool]]:
        """
        Set trunking mode to ACCESS unconditionally
        """
        return pulumi.get(self, "switchport_mode_access")

    @property
    @pulumi.getter(name="switchportModeTrunk")
    def switchport_mode_trunk(self) -> pulumi.Output[Optional[bool]]:
        """
        Set trunking mode to TRUNK unconditionally
        """
        return pulumi.get(self, "switchport_mode_trunk")

    @property
    @pulumi.getter(name="switchportNonegotiate")
    def switchport_nonegotiate(self) -> pulumi.Output[Optional[bool]]:
        """
        Device will not engage in negotiation protocol on this interface
        """
        return pulumi.get(self, "switchport_nonegotiate")

    @property
    @pulumi.getter(name="switchportPortSecurity")
    def switchport_port_security(self) -> pulumi.Output[Optional[bool]]:
        """
        Security related command
        """
        return pulumi.get(self, "switchport_port_security")

    @property
    @pulumi.getter(name="switchportPortSecurityAgingStatic")
    def switchport_port_security_aging_static(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable aging for configured secure addresses
        """
        return pulumi.get(self, "switchport_port_security_aging_static")

    @property
    @pulumi.getter(name="switchportPortSecurityAgingTime")
    def switchport_port_security_aging_time(self) -> pulumi.Output[Optional[int]]:
        """
        Port-security aging time - Range: `1`-`1440`
        """
        return pulumi.get(self, "switchport_port_security_aging_time")

    @property
    @pulumi.getter(name="switchportPortSecurityAgingType")
    def switchport_port_security_aging_type(self) -> pulumi.Output[Optional[bool]]:
        """
        Port-security aging type
        """
        return pulumi.get(self, "switchport_port_security_aging_type")

    @property
    @pulumi.getter(name="switchportPortSecurityAgingTypeInactivity")
    def switchport_port_security_aging_type_inactivity(self) -> pulumi.Output[Optional[bool]]:
        """
        Aging based on inactivity time period
        """
        return pulumi.get(self, "switchport_port_security_aging_type_inactivity")

    @property
    @pulumi.getter(name="switchportPortSecurityMaximumRanges")
    def switchport_port_security_maximum_ranges(self) -> pulumi.Output[Optional[Sequence['outputs.TemplateSwitchportPortSecurityMaximumRange']]]:
        return pulumi.get(self, "switchport_port_security_maximum_ranges")

    @property
    @pulumi.getter(name="switchportPortSecurityViolationProtect")
    def switchport_port_security_violation_protect(self) -> pulumi.Output[Optional[bool]]:
        """
        Security violation protect mode
        """
        return pulumi.get(self, "switchport_port_security_violation_protect")

    @property
    @pulumi.getter(name="switchportPortSecurityViolationRestrict")
    def switchport_port_security_violation_restrict(self) -> pulumi.Output[Optional[bool]]:
        """
        Security violation restrict mode
        """
        return pulumi.get(self, "switchport_port_security_violation_restrict")

    @property
    @pulumi.getter(name="switchportPortSecurityViolationShutdown")
    def switchport_port_security_violation_shutdown(self) -> pulumi.Output[Optional[bool]]:
        """
        Security violation shutdown mode
        """
        return pulumi.get(self, "switchport_port_security_violation_shutdown")

    @property
    @pulumi.getter(name="switchportPrivateVlanHostAssociationPrimaryRange")
    def switchport_private_vlan_host_association_primary_range(self) -> pulumi.Output[Optional[int]]:
        """
        Primary normal range VLAN ID of the private VLAN port association - Range: `2`-`1001`
        """
        return pulumi.get(self, "switchport_private_vlan_host_association_primary_range")

    @property
    @pulumi.getter(name="switchportPrivateVlanHostAssociationSecondaryRange")
    def switchport_private_vlan_host_association_secondary_range(self) -> pulumi.Output[Optional[int]]:
        """
        Secondary normal range VLAN ID of the private VLAN host port association - Range: `2`-`1001`
        """
        return pulumi.get(self, "switchport_private_vlan_host_association_secondary_range")

    @property
    @pulumi.getter(name="switchportTrunkAllowedVlans")
    def switchport_trunk_allowed_vlans(self) -> pulumi.Output[Optional[str]]:
        """
        VLAN IDs of the allowed VLANs when this port is in trunking mode
        """
        return pulumi.get(self, "switchport_trunk_allowed_vlans")

    @property
    @pulumi.getter(name="switchportTrunkAllowedVlansAll")
    def switchport_trunk_allowed_vlans_all(self) -> pulumi.Output[Optional[bool]]:
        """
        all VLANs
        """
        return pulumi.get(self, "switchport_trunk_allowed_vlans_all")

    @property
    @pulumi.getter(name="switchportTrunkAllowedVlansNone")
    def switchport_trunk_allowed_vlans_none(self) -> pulumi.Output[Optional[bool]]:
        """
        no VLANs
        """
        return pulumi.get(self, "switchport_trunk_allowed_vlans_none")

    @property
    @pulumi.getter(name="switchportTrunkNativeVlanTag")
    def switchport_trunk_native_vlan_tag(self) -> pulumi.Output[Optional[bool]]:
        """
        Set native VLAN tagging state
        """
        return pulumi.get(self, "switchport_trunk_native_vlan_tag")

    @property
    @pulumi.getter(name="switchportTrunkNativeVlanVlanId")
    def switchport_trunk_native_vlan_vlan_id(self) -> pulumi.Output[Optional[int]]:
        """
        VLAN ID of the native VLAN when this port is in trunking mode - Range: `1`-`4094`
        """
        return pulumi.get(self, "switchport_trunk_native_vlan_vlan_id")

    @property
    @pulumi.getter(name="switchportVoiceVlan")
    def switchport_voice_vlan(self) -> pulumi.Output[Optional[int]]:
        """
        Vlan for voice traffic - Range: `1`-`4094`
        """
        return pulumi.get(self, "switchport_voice_vlan")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Output[str]:
        """
        Template name
        """
        return pulumi.get(self, "template_name")

