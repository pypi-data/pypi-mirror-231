Metadata-Version: 2.1
Name: isjsonschemasubset
Version: 0.0.2
Summary: Check one JSON schema is a subset of another
Author-email: Oliver Russell <ojhrussell@gmail.com>
Maintainer-email: Oliver Russell <ojhrussell@gmail.com>
License: MIT License
        
        Copyright (c) 2023 Oliver Russell
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: homepage, https://leontrolski.github.io/
Keywords: JSONSchema,pydantic
Classifier: Programming Language :: Python
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pydantic >=2.3.0
Provides-Extra: dev
Requires-Dist: pytest >=7.2.2 ; extra == 'dev'
Requires-Dist: autoflake >=2.0.2 ; extra == 'dev'
Requires-Dist: black >=23.1.0 ; extra == 'dev'
Requires-Dist: mypy ; extra == 'dev'

# `isjsonschemasubset`

Check one JSONSchema is a subset of another. Plays nicely with `Pydantic`.

# Install

```bash
pip install isjsonschemasubset
```

_Currently in an Alpha._

# Usage

```python
from pathlib import Path
from isjsonschemasubset import dump, issubset, load

path_to_a = Path(__file__).parent / "a.json"
path_to_b = Path(__file__).parent / "b.json"
dump(A, path_to_a)  # where A is a `type[pydantic.BaseModel]`
dump(B, path_to_b)  # where B is a `type[pydantic.BaseModel]`
json_schema_a = load(path_to_a)
json_schema_b = load(path_to_b)

for error in issubset(json_schema_a, json_schema_b):
    ...
```

Yields errors if type `A` is not a subset of `B`.

In this context, "is a subset of" means that if we were to do:

```python
B(**a.model_dump(mode="json"))
```

We would _not_ get an error. This is very important when deserializing data from JSON columns in the database and for writing backwards compatible APIs.

See [tests/test_schema_versions.py](tests/test_schema_versions.py) for further example usage. In this case, every time we change `Foo` (or anything that `Foo` refers to recursively), we dump a new schema in [tests/schemas/Foo](tests/schemas/Foo) and check all of the schemas are backwards compatible.


# Dev install

```bash
git clone git@github.com:leontrolski/isjsonschemasubset.git
pip install -r requirements-dev.txt
pytest
mypy src tests --strict
```

## Upload to pypi

```bash
# bump version
python -m pip install build twine
python -m build
twine check dist/*
twine upload dist/*
```
