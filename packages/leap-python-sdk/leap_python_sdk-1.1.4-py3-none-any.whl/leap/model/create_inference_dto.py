# coding: utf-8

"""
    Leap

    The Official Leap API

    The version of the OpenAPI document: 1.0
    Created by: https://tryleap.ai/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from leap import schemas  # noqa: F401


class CreateInferenceDto(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "prompt",
        }
        
        class properties:
            prompt = schemas.StrSchema
            negativePrompt = schemas.StrSchema
            steps = schemas.NumberSchema
            width = schemas.NumberSchema
            height = schemas.NumberSchema
            numberOfImages = schemas.NumberSchema
            promptStrength = schemas.NumberSchema
            seed = schemas.NumberSchema
            webhookUrl = schemas.StrSchema
            __annotations__ = {
                "prompt": prompt,
                "negativePrompt": negativePrompt,
                "steps": steps,
                "width": width,
                "height": height,
                "numberOfImages": numberOfImages,
                "promptStrength": promptStrength,
                "seed": seed,
                "webhookUrl": webhookUrl,
            }
    
    prompt: MetaOapg.properties.prompt
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prompt"]) -> MetaOapg.properties.prompt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["negativePrompt"]) -> MetaOapg.properties.negativePrompt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["steps"]) -> MetaOapg.properties.steps: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["width"]) -> MetaOapg.properties.width: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["height"]) -> MetaOapg.properties.height: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numberOfImages"]) -> MetaOapg.properties.numberOfImages: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["promptStrength"]) -> MetaOapg.properties.promptStrength: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seed"]) -> MetaOapg.properties.seed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webhookUrl"]) -> MetaOapg.properties.webhookUrl: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["prompt", "negativePrompt", "steps", "width", "height", "numberOfImages", "promptStrength", "seed", "webhookUrl", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prompt"]) -> MetaOapg.properties.prompt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["negativePrompt"]) -> typing.Union[MetaOapg.properties.negativePrompt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["steps"]) -> typing.Union[MetaOapg.properties.steps, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["width"]) -> typing.Union[MetaOapg.properties.width, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["height"]) -> typing.Union[MetaOapg.properties.height, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numberOfImages"]) -> typing.Union[MetaOapg.properties.numberOfImages, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["promptStrength"]) -> typing.Union[MetaOapg.properties.promptStrength, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seed"]) -> typing.Union[MetaOapg.properties.seed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webhookUrl"]) -> typing.Union[MetaOapg.properties.webhookUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["prompt", "negativePrompt", "steps", "width", "height", "numberOfImages", "promptStrength", "seed", "webhookUrl", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        prompt: typing.Union[MetaOapg.properties.prompt, str, ],
        negativePrompt: typing.Union[MetaOapg.properties.negativePrompt, str, schemas.Unset] = schemas.unset,
        steps: typing.Union[MetaOapg.properties.steps, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        width: typing.Union[MetaOapg.properties.width, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        height: typing.Union[MetaOapg.properties.height, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        numberOfImages: typing.Union[MetaOapg.properties.numberOfImages, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        promptStrength: typing.Union[MetaOapg.properties.promptStrength, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        seed: typing.Union[MetaOapg.properties.seed, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        webhookUrl: typing.Union[MetaOapg.properties.webhookUrl, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateInferenceDto':
        return super().__new__(
            cls,
            *args,
            prompt=prompt,
            negativePrompt=negativePrompt,
            steps=steps,
            width=width,
            height=height,
            numberOfImages=numberOfImages,
            promptStrength=promptStrength,
            seed=seed,
            webhookUrl=webhookUrl,
            _configuration=_configuration,
            **kwargs,
        )
