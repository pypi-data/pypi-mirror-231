# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from ._enums import *

__all__ = ['VirtualDiskArgs', 'VirtualDisk']

@pulumi.input_type
class VirtualDiskArgs:
    def __init__(__self__, *,
                 directory: pulumi.Input[str],
                 disk_store: pulumi.Input[str],
                 disk_type: pulumi.Input['DiskType'],
                 name: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a VirtualDisk resource.
        :param pulumi.Input[str] directory: Disk directory.
        :param pulumi.Input[str] disk_store: Disk Store.
        :param pulumi.Input['DiskType'] disk_type: Virtual Disk type. (thin, zeroedthick or eagerzeroedthick)
        :param pulumi.Input[str] name: Virtual Disk Name.
        :param pulumi.Input[int] size: Virtual Disk size in GB.
        """
        pulumi.set(__self__, "directory", directory)
        pulumi.set(__self__, "disk_store", disk_store)
        if disk_type is None:
            disk_type = 'thin'
        pulumi.set(__self__, "disk_type", disk_type)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is None:
            size = 1
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def directory(self) -> pulumi.Input[str]:
        """
        Disk directory.
        """
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: pulumi.Input[str]):
        pulumi.set(self, "directory", value)

    @property
    @pulumi.getter(name="diskStore")
    def disk_store(self) -> pulumi.Input[str]:
        """
        Disk Store.
        """
        return pulumi.get(self, "disk_store")

    @disk_store.setter
    def disk_store(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_store", value)

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> pulumi.Input['DiskType']:
        """
        Virtual Disk type. (thin, zeroedthick or eagerzeroedthick)
        """
        return pulumi.get(self, "disk_type")

    @disk_type.setter
    def disk_type(self, value: pulumi.Input['DiskType']):
        pulumi.set(self, "disk_type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual Disk Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        Virtual Disk size in GB.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)


class VirtualDisk(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 directory: Optional[pulumi.Input[str]] = None,
                 disk_store: Optional[pulumi.Input[str]] = None,
                 disk_type: Optional[pulumi.Input['DiskType']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a VirtualDisk resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] directory: Disk directory.
        :param pulumi.Input[str] disk_store: Disk Store.
        :param pulumi.Input['DiskType'] disk_type: Virtual Disk type. (thin, zeroedthick or eagerzeroedthick)
        :param pulumi.Input[str] name: Virtual Disk Name.
        :param pulumi.Input[int] size: Virtual Disk size in GB.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VirtualDiskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VirtualDisk resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VirtualDiskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VirtualDiskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 directory: Optional[pulumi.Input[str]] = None,
                 disk_store: Optional[pulumi.Input[str]] = None,
                 disk_type: Optional[pulumi.Input['DiskType']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VirtualDiskArgs.__new__(VirtualDiskArgs)

            if directory is None and not opts.urn:
                raise TypeError("Missing required property 'directory'")
            __props__.__dict__["directory"] = directory
            if disk_store is None and not opts.urn:
                raise TypeError("Missing required property 'disk_store'")
            __props__.__dict__["disk_store"] = disk_store
            if disk_type is None:
                disk_type = 'thin'
            if disk_type is None and not opts.urn:
                raise TypeError("Missing required property 'disk_type'")
            __props__.__dict__["disk_type"] = disk_type
            __props__.__dict__["name"] = name
            if size is None:
                size = 1
            __props__.__dict__["size"] = size
        super(VirtualDisk, __self__).__init__(
            'esxi-native:index:VirtualDisk',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'VirtualDisk':
        """
        Get an existing VirtualDisk resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = VirtualDiskArgs.__new__(VirtualDiskArgs)

        __props__.__dict__["directory"] = None
        __props__.__dict__["disk_store"] = None
        __props__.__dict__["disk_type"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["size"] = None
        return VirtualDisk(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def directory(self) -> pulumi.Output[str]:
        """
        Disk directory.
        """
        return pulumi.get(self, "directory")

    @property
    @pulumi.getter(name="diskStore")
    def disk_store(self) -> pulumi.Output[str]:
        """
        Disk Store.
        """
        return pulumi.get(self, "disk_store")

    @property
    @pulumi.getter(name="diskType")
    def disk_type(self) -> pulumi.Output['DiskType']:
        """
        Virtual Disk type. (thin, zeroedthick or eagerzeroedthick)
        """
        return pulumi.get(self, "disk_type")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Virtual Disk Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> pulumi.Output[Optional[int]]:
        """
        Virtual Disk size in GB.
        """
        return pulumi.get(self, "size")

