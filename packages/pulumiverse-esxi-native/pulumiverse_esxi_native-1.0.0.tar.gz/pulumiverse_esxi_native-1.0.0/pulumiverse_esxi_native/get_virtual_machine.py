# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetVirtualMachineResult',
    'AwaitableGetVirtualMachineResult',
    'get_virtual_machine',
    'get_virtual_machine_output',
]

@pulumi.output_type
class GetVirtualMachineResult:
    def __init__(__self__, boot_disk_size=None, boot_disk_type=None, boot_firmware=None, disk_store=None, id=None, info=None, ip_address=None, mem_size=None, name=None, network_interfaces=None, notes=None, num_v_cpus=None, os=None, power=None, resource_pool_name=None, shutdown_timeout=None, startup_timeout=None, virtual_disks=None, virtual_hw_ver=None):
        if boot_disk_size and not isinstance(boot_disk_size, int):
            raise TypeError("Expected argument 'boot_disk_size' to be a int")
        pulumi.set(__self__, "boot_disk_size", boot_disk_size)
        if boot_disk_type and not isinstance(boot_disk_type, str):
            raise TypeError("Expected argument 'boot_disk_type' to be a str")
        pulumi.set(__self__, "boot_disk_type", boot_disk_type)
        if boot_firmware and not isinstance(boot_firmware, str):
            raise TypeError("Expected argument 'boot_firmware' to be a str")
        pulumi.set(__self__, "boot_firmware", boot_firmware)
        if disk_store and not isinstance(disk_store, str):
            raise TypeError("Expected argument 'disk_store' to be a str")
        pulumi.set(__self__, "disk_store", disk_store)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if info and not isinstance(info, list):
            raise TypeError("Expected argument 'info' to be a list")
        pulumi.set(__self__, "info", info)
        if ip_address and not isinstance(ip_address, str):
            raise TypeError("Expected argument 'ip_address' to be a str")
        pulumi.set(__self__, "ip_address", ip_address)
        if mem_size and not isinstance(mem_size, int):
            raise TypeError("Expected argument 'mem_size' to be a int")
        pulumi.set(__self__, "mem_size", mem_size)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_interfaces and not isinstance(network_interfaces, list):
            raise TypeError("Expected argument 'network_interfaces' to be a list")
        pulumi.set(__self__, "network_interfaces", network_interfaces)
        if notes and not isinstance(notes, str):
            raise TypeError("Expected argument 'notes' to be a str")
        pulumi.set(__self__, "notes", notes)
        if num_v_cpus and not isinstance(num_v_cpus, int):
            raise TypeError("Expected argument 'num_v_cpus' to be a int")
        pulumi.set(__self__, "num_v_cpus", num_v_cpus)
        if os and not isinstance(os, str):
            raise TypeError("Expected argument 'os' to be a str")
        pulumi.set(__self__, "os", os)
        if power and not isinstance(power, str):
            raise TypeError("Expected argument 'power' to be a str")
        pulumi.set(__self__, "power", power)
        if resource_pool_name and not isinstance(resource_pool_name, str):
            raise TypeError("Expected argument 'resource_pool_name' to be a str")
        pulumi.set(__self__, "resource_pool_name", resource_pool_name)
        if shutdown_timeout and not isinstance(shutdown_timeout, int):
            raise TypeError("Expected argument 'shutdown_timeout' to be a int")
        pulumi.set(__self__, "shutdown_timeout", shutdown_timeout)
        if startup_timeout and not isinstance(startup_timeout, int):
            raise TypeError("Expected argument 'startup_timeout' to be a int")
        pulumi.set(__self__, "startup_timeout", startup_timeout)
        if virtual_disks and not isinstance(virtual_disks, list):
            raise TypeError("Expected argument 'virtual_disks' to be a list")
        pulumi.set(__self__, "virtual_disks", virtual_disks)
        if virtual_hw_ver and not isinstance(virtual_hw_ver, int):
            raise TypeError("Expected argument 'virtual_hw_ver' to be a int")
        pulumi.set(__self__, "virtual_hw_ver", virtual_hw_ver)

    @property
    @pulumi.getter(name="bootDiskSize")
    def boot_disk_size(self) -> Optional[int]:
        """
        VM boot disk size. Will expand boot disk to this size.
        """
        return pulumi.get(self, "boot_disk_size")

    @property
    @pulumi.getter(name="bootDiskType")
    def boot_disk_type(self) -> Optional['DiskType']:
        """
        VM boot disk type. thin, zeroedthick, eagerzeroedthick
        """
        return pulumi.get(self, "boot_disk_type")

    @property
    @pulumi.getter(name="bootFirmware")
    def boot_firmware(self) -> Optional['BootFirmwareType']:
        """
        Boot type('efi' is boot uefi mode)
        """
        return pulumi.get(self, "boot_firmware")

    @property
    @pulumi.getter(name="diskStore")
    def disk_store(self) -> Optional[str]:
        """
        esxi diskstore for boot disk.
        """
        return pulumi.get(self, "disk_store")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        esxi vm id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def info(self) -> Optional[Sequence['outputs.KeyValuePair']]:
        """
        pass data to VM
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        """
        The IP address reported by VMWare tools.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> Optional[int]:
        """
        VM memory size.
        """
        return pulumi.get(self, "mem_size")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        esxi vm name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[Sequence['outputs.NetworkInterface']]:
        """
        VM network interfaces.
        """
        return pulumi.get(self, "network_interfaces")

    @property
    @pulumi.getter
    def notes(self) -> Optional[str]:
        """
        VM memory size.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter(name="numVCpus")
    def num_v_cpus(self) -> Optional[int]:
        """
        VM number of virtual cpus.
        """
        return pulumi.get(self, "num_v_cpus")

    @property
    @pulumi.getter
    def os(self) -> Optional[str]:
        """
        VM OS type.
        """
        return pulumi.get(self, "os")

    @property
    @pulumi.getter
    def power(self) -> Optional[str]:
        """
        VM power state.
        """
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="resourcePoolName")
    def resource_pool_name(self) -> Optional[str]:
        """
        Resource pool name to place vm.
        """
        return pulumi.get(self, "resource_pool_name")

    @property
    @pulumi.getter(name="shutdownTimeout")
    def shutdown_timeout(self) -> Optional[int]:
        """
        The amount of vm uptime, in seconds, to wait for an available IP address on this virtual machine.
        """
        return pulumi.get(self, "shutdown_timeout")

    @property
    @pulumi.getter(name="startupTimeout")
    def startup_timeout(self) -> Optional[int]:
        """
        The amount of vm uptime, in seconds, to wait for an available IP address on this virtual machine.
        """
        return pulumi.get(self, "startup_timeout")

    @property
    @pulumi.getter(name="virtualDisks")
    def virtual_disks(self) -> Optional[Sequence['outputs.VMVirtualDisk']]:
        """
        VM virtual disks.
        """
        return pulumi.get(self, "virtual_disks")

    @property
    @pulumi.getter(name="virtualHWVer")
    def virtual_hw_ver(self) -> Optional[int]:
        """
        VM Virtual HW version.
        """
        return pulumi.get(self, "virtual_hw_ver")


class AwaitableGetVirtualMachineResult(GetVirtualMachineResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVirtualMachineResult(
            boot_disk_size=self.boot_disk_size,
            boot_disk_type=self.boot_disk_type,
            boot_firmware=self.boot_firmware,
            disk_store=self.disk_store,
            id=self.id,
            info=self.info,
            ip_address=self.ip_address,
            mem_size=self.mem_size,
            name=self.name,
            network_interfaces=self.network_interfaces,
            notes=self.notes,
            num_v_cpus=self.num_v_cpus,
            os=self.os,
            power=self.power,
            resource_pool_name=self.resource_pool_name,
            shutdown_timeout=self.shutdown_timeout,
            startup_timeout=self.startup_timeout,
            virtual_disks=self.virtual_disks,
            virtual_hw_ver=self.virtual_hw_ver)


def get_virtual_machine(name: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVirtualMachineResult:
    """
    Use this data source to access information about an existing resource.

    :param str name: Virtual Machine Name to get details of
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('esxi-native:index:getVirtualMachine', __args__, opts=opts, typ=GetVirtualMachineResult).value

    return AwaitableGetVirtualMachineResult(
        boot_disk_size=pulumi.get(__ret__, 'boot_disk_size'),
        boot_disk_type=pulumi.get(__ret__, 'boot_disk_type'),
        boot_firmware=pulumi.get(__ret__, 'boot_firmware'),
        disk_store=pulumi.get(__ret__, 'disk_store'),
        id=pulumi.get(__ret__, 'id'),
        info=pulumi.get(__ret__, 'info'),
        ip_address=pulumi.get(__ret__, 'ip_address'),
        mem_size=pulumi.get(__ret__, 'mem_size'),
        name=pulumi.get(__ret__, 'name'),
        network_interfaces=pulumi.get(__ret__, 'network_interfaces'),
        notes=pulumi.get(__ret__, 'notes'),
        num_v_cpus=pulumi.get(__ret__, 'num_v_cpus'),
        os=pulumi.get(__ret__, 'os'),
        power=pulumi.get(__ret__, 'power'),
        resource_pool_name=pulumi.get(__ret__, 'resource_pool_name'),
        shutdown_timeout=pulumi.get(__ret__, 'shutdown_timeout'),
        startup_timeout=pulumi.get(__ret__, 'startup_timeout'),
        virtual_disks=pulumi.get(__ret__, 'virtual_disks'),
        virtual_hw_ver=pulumi.get(__ret__, 'virtual_hw_ver'))


@_utilities.lift_output_func(get_virtual_machine)
def get_virtual_machine_output(name: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVirtualMachineResult]:
    """
    Use this data source to access information about an existing resource.

    :param str name: Virtual Machine Name to get details of
    """
    ...
