# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VirtualSwitchArgs', 'VirtualSwitch']

@pulumi.input_type
class VirtualSwitchArgs:
    def __init__(__self__, *,
                 forged_transmits: Optional[pulumi.Input[bool]] = None,
                 link_discovery_mode: Optional[pulumi.Input[str]] = None,
                 mac_changes: Optional[pulumi.Input[bool]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[int]] = None,
                 promiscuous_mode: Optional[pulumi.Input[bool]] = None,
                 uplinks: Optional[pulumi.Input[Sequence[pulumi.Input['UplinkArgs']]]] = None):
        """
        The set of arguments for constructing a VirtualSwitch resource.
        :param pulumi.Input[bool] forged_transmits: Forged transmits (true=Accept/false=Reject).
        :param pulumi.Input[str] link_discovery_mode: Virtual Switch Link Discovery Mode.
        :param pulumi.Input[bool] mac_changes: MAC address changes (true=Accept/false=Reject).
        :param pulumi.Input[int] mtu: Virtual Switch mtu. (1280-9000)
        :param pulumi.Input[str] name: Virtual Switch name.
        :param pulumi.Input[int] ports: Virtual Switch number of ports. (1-4096)
        :param pulumi.Input[bool] promiscuous_mode: Promiscuous mode (true=Accept/false=Reject).
        :param pulumi.Input[Sequence[pulumi.Input['UplinkArgs']]] uplinks: Uplink configuration.
        """
        if forged_transmits is not None:
            pulumi.set(__self__, "forged_transmits", forged_transmits)
        if link_discovery_mode is not None:
            pulumi.set(__self__, "link_discovery_mode", link_discovery_mode)
        if mac_changes is not None:
            pulumi.set(__self__, "mac_changes", mac_changes)
        if mtu is not None:
            pulumi.set(__self__, "mtu", mtu)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if ports is not None:
            pulumi.set(__self__, "ports", ports)
        if promiscuous_mode is not None:
            pulumi.set(__self__, "promiscuous_mode", promiscuous_mode)
        if uplinks is not None:
            pulumi.set(__self__, "uplinks", uplinks)

    @property
    @pulumi.getter(name="forgedTransmits")
    def forged_transmits(self) -> Optional[pulumi.Input[bool]]:
        """
        Forged transmits (true=Accept/false=Reject).
        """
        return pulumi.get(self, "forged_transmits")

    @forged_transmits.setter
    def forged_transmits(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "forged_transmits", value)

    @property
    @pulumi.getter(name="linkDiscoveryMode")
    def link_discovery_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual Switch Link Discovery Mode.
        """
        return pulumi.get(self, "link_discovery_mode")

    @link_discovery_mode.setter
    def link_discovery_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link_discovery_mode", value)

    @property
    @pulumi.getter(name="macChanges")
    def mac_changes(self) -> Optional[pulumi.Input[bool]]:
        """
        MAC address changes (true=Accept/false=Reject).
        """
        return pulumi.get(self, "mac_changes")

    @mac_changes.setter
    def mac_changes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mac_changes", value)

    @property
    @pulumi.getter
    def mtu(self) -> Optional[pulumi.Input[int]]:
        """
        Virtual Switch mtu. (1280-9000)
        """
        return pulumi.get(self, "mtu")

    @mtu.setter
    def mtu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mtu", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Virtual Switch name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def ports(self) -> Optional[pulumi.Input[int]]:
        """
        Virtual Switch number of ports. (1-4096)
        """
        return pulumi.get(self, "ports")

    @ports.setter
    def ports(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ports", value)

    @property
    @pulumi.getter(name="promiscuousMode")
    def promiscuous_mode(self) -> Optional[pulumi.Input[bool]]:
        """
        Promiscuous mode (true=Accept/false=Reject).
        """
        return pulumi.get(self, "promiscuous_mode")

    @promiscuous_mode.setter
    def promiscuous_mode(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "promiscuous_mode", value)

    @property
    @pulumi.getter
    def uplinks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UplinkArgs']]]]:
        """
        Uplink configuration.
        """
        return pulumi.get(self, "uplinks")

    @uplinks.setter
    def uplinks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UplinkArgs']]]]):
        pulumi.set(self, "uplinks", value)


class VirtualSwitch(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 forged_transmits: Optional[pulumi.Input[bool]] = None,
                 link_discovery_mode: Optional[pulumi.Input[str]] = None,
                 mac_changes: Optional[pulumi.Input[bool]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[int]] = None,
                 promiscuous_mode: Optional[pulumi.Input[bool]] = None,
                 uplinks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UplinkArgs']]]]] = None,
                 __props__=None):
        """
        Create a VirtualSwitch resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] forged_transmits: Forged transmits (true=Accept/false=Reject).
        :param pulumi.Input[str] link_discovery_mode: Virtual Switch Link Discovery Mode.
        :param pulumi.Input[bool] mac_changes: MAC address changes (true=Accept/false=Reject).
        :param pulumi.Input[int] mtu: Virtual Switch mtu. (1280-9000)
        :param pulumi.Input[str] name: Virtual Switch name.
        :param pulumi.Input[int] ports: Virtual Switch number of ports. (1-4096)
        :param pulumi.Input[bool] promiscuous_mode: Promiscuous mode (true=Accept/false=Reject).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UplinkArgs']]]] uplinks: Uplink configuration.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[VirtualSwitchArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VirtualSwitch resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VirtualSwitchArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VirtualSwitchArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 forged_transmits: Optional[pulumi.Input[bool]] = None,
                 link_discovery_mode: Optional[pulumi.Input[str]] = None,
                 mac_changes: Optional[pulumi.Input[bool]] = None,
                 mtu: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 ports: Optional[pulumi.Input[int]] = None,
                 promiscuous_mode: Optional[pulumi.Input[bool]] = None,
                 uplinks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UplinkArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VirtualSwitchArgs.__new__(VirtualSwitchArgs)

            __props__.__dict__["forged_transmits"] = forged_transmits
            __props__.__dict__["link_discovery_mode"] = link_discovery_mode
            __props__.__dict__["mac_changes"] = mac_changes
            __props__.__dict__["mtu"] = mtu
            __props__.__dict__["name"] = name
            __props__.__dict__["ports"] = ports
            __props__.__dict__["promiscuous_mode"] = promiscuous_mode
            __props__.__dict__["uplinks"] = uplinks
        super(VirtualSwitch, __self__).__init__(
            'esxi-native:index:VirtualSwitch',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'VirtualSwitch':
        """
        Get an existing VirtualSwitch resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = VirtualSwitchArgs.__new__(VirtualSwitchArgs)

        __props__.__dict__["forged_transmits"] = None
        __props__.__dict__["link_discovery_mode"] = None
        __props__.__dict__["mac_changes"] = None
        __props__.__dict__["mtu"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["ports"] = None
        __props__.__dict__["promiscuous_mode"] = None
        __props__.__dict__["uplinks"] = None
        return VirtualSwitch(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="forgedTransmits")
    def forged_transmits(self) -> pulumi.Output[Optional[bool]]:
        """
        Forged transmits (true=Accept/false=Reject).
        """
        return pulumi.get(self, "forged_transmits")

    @property
    @pulumi.getter(name="linkDiscoveryMode")
    def link_discovery_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Virtual Switch Link Discovery Mode.
        """
        return pulumi.get(self, "link_discovery_mode")

    @property
    @pulumi.getter(name="macChanges")
    def mac_changes(self) -> pulumi.Output[Optional[bool]]:
        """
        MAC address changes (true=Accept/false=Reject).
        """
        return pulumi.get(self, "mac_changes")

    @property
    @pulumi.getter
    def mtu(self) -> pulumi.Output[Optional[int]]:
        """
        Virtual Switch mtu. (1280-9000)
        """
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Virtual Switch name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ports(self) -> pulumi.Output[Optional[int]]:
        """
        Virtual Switch number of ports. (1-4096)
        """
        return pulumi.get(self, "ports")

    @property
    @pulumi.getter(name="promiscuousMode")
    def promiscuous_mode(self) -> pulumi.Output[Optional[bool]]:
        """
        Promiscuous mode (true=Accept/false=Reject).
        """
        return pulumi.get(self, "promiscuous_mode")

    @property
    @pulumi.getter
    def uplinks(self) -> pulumi.Output[Optional[Sequence['outputs.Uplink']]]:
        """
        Uplink configuration.
        """
        return pulumi.get(self, "uplinks")

