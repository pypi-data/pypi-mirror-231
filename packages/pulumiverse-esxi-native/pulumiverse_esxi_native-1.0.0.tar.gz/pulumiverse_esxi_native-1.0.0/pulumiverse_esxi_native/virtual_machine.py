# coding=utf-8
# *** WARNING: this file was generated by pulumigen. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['VirtualMachineArgs', 'VirtualMachine']

@pulumi.input_type
class VirtualMachineArgs:
    def __init__(__self__, *,
                 disk_store: pulumi.Input[str],
                 boot_disk_size: Optional[pulumi.Input[int]] = None,
                 boot_disk_type: Optional[pulumi.Input['DiskType']] = None,
                 boot_firmware: Optional[pulumi.Input['BootFirmwareType']] = None,
                 clone_from_virtual_machine: Optional[pulumi.Input[str]] = None,
                 info: Optional[pulumi.Input[Sequence[pulumi.Input['KeyValuePairArgs']]]] = None,
                 mem_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkInterfaceArgs']]]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 num_v_cpus: Optional[pulumi.Input[int]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 ovf_properties: Optional[pulumi.Input[Sequence[pulumi.Input['KeyValuePairArgs']]]] = None,
                 ovf_properties_timer: Optional[pulumi.Input[int]] = None,
                 ovf_source: Optional[pulumi.Input[str]] = None,
                 power: Optional[pulumi.Input[str]] = None,
                 resource_pool_name: Optional[pulumi.Input[str]] = None,
                 shutdown_timeout: Optional[pulumi.Input[int]] = None,
                 startup_timeout: Optional[pulumi.Input[int]] = None,
                 virtual_disks: Optional[pulumi.Input[Sequence[pulumi.Input['VMVirtualDiskArgs']]]] = None,
                 virtual_hw_ver: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a VirtualMachine resource.
        :param pulumi.Input[str] disk_store: esxi diskstore for boot disk.
        :param pulumi.Input[int] boot_disk_size: VM boot disk size. Will expand boot disk to this size.
        :param pulumi.Input['DiskType'] boot_disk_type: VM boot disk type. thin, zeroedthick, eagerzeroedthick
        :param pulumi.Input['BootFirmwareType'] boot_firmware: Boot type('efi' is boot uefi mode)
        :param pulumi.Input[str] clone_from_virtual_machine: Source vm path on esxi host to clone.
        :param pulumi.Input[Sequence[pulumi.Input['KeyValuePairArgs']]] info: pass data to VM
        :param pulumi.Input[int] mem_size: VM memory size.
        :param pulumi.Input[str] name: esxi vm name.
        :param pulumi.Input[Sequence[pulumi.Input['NetworkInterfaceArgs']]] network_interfaces: VM network interfaces.
        :param pulumi.Input[str] notes: VM memory size.
        :param pulumi.Input[int] num_v_cpus: VM number of virtual cpus.
        :param pulumi.Input[str] os: VM OS type.
        :param pulumi.Input[Sequence[pulumi.Input['KeyValuePairArgs']]] ovf_properties: VM OVF properties.
        :param pulumi.Input[int] ovf_properties_timer: The amount of time, in seconds, to wait for the guest to boot and run ovfProperties. (0-6000)
        :param pulumi.Input[str] ovf_source: Path or URL of ovf file source.
        :param pulumi.Input[str] power: VM power state.
        :param pulumi.Input[str] resource_pool_name: Resource pool name to place vm.
        :param pulumi.Input[int] shutdown_timeout: The amount of vm uptime, in seconds, to wait for an available IP address on this virtual machine. (0-600)
        :param pulumi.Input[int] startup_timeout: The amount of vm uptime, in seconds, to wait for an available IP address on this virtual machine. (0-600)
        :param pulumi.Input[Sequence[pulumi.Input['VMVirtualDiskArgs']]] virtual_disks: VM virtual disks.
        :param pulumi.Input[int] virtual_hw_ver: VM Virtual HW version.
        """
        pulumi.set(__self__, "disk_store", disk_store)
        if boot_disk_size is None:
            boot_disk_size = 16
        if boot_disk_size is not None:
            pulumi.set(__self__, "boot_disk_size", boot_disk_size)
        if boot_disk_type is None:
            boot_disk_type = 'thin'
        if boot_disk_type is not None:
            pulumi.set(__self__, "boot_disk_type", boot_disk_type)
        if boot_firmware is None:
            boot_firmware = 'bios'
        if boot_firmware is not None:
            pulumi.set(__self__, "boot_firmware", boot_firmware)
        if clone_from_virtual_machine is not None:
            pulumi.set(__self__, "clone_from_virtual_machine", clone_from_virtual_machine)
        if info is not None:
            pulumi.set(__self__, "info", info)
        if mem_size is None:
            mem_size = 512
        if mem_size is not None:
            pulumi.set(__self__, "mem_size", mem_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if num_v_cpus is None:
            num_v_cpus = 1
        if num_v_cpus is not None:
            pulumi.set(__self__, "num_v_cpus", num_v_cpus)
        if os is None:
            os = 'centos'
        if os is not None:
            pulumi.set(__self__, "os", os)
        if ovf_properties is not None:
            pulumi.set(__self__, "ovf_properties", ovf_properties)
        if ovf_properties_timer is None:
            ovf_properties_timer = 6000
        if ovf_properties_timer is not None:
            pulumi.set(__self__, "ovf_properties_timer", ovf_properties_timer)
        if ovf_source is not None:
            pulumi.set(__self__, "ovf_source", ovf_source)
        if power is not None:
            pulumi.set(__self__, "power", power)
        if resource_pool_name is None:
            resource_pool_name = '/'
        if resource_pool_name is not None:
            pulumi.set(__self__, "resource_pool_name", resource_pool_name)
        if shutdown_timeout is None:
            shutdown_timeout = 600
        if shutdown_timeout is not None:
            pulumi.set(__self__, "shutdown_timeout", shutdown_timeout)
        if startup_timeout is None:
            startup_timeout = 600
        if startup_timeout is not None:
            pulumi.set(__self__, "startup_timeout", startup_timeout)
        if virtual_disks is not None:
            pulumi.set(__self__, "virtual_disks", virtual_disks)
        if virtual_hw_ver is None:
            virtual_hw_ver = 13
        if virtual_hw_ver is not None:
            pulumi.set(__self__, "virtual_hw_ver", virtual_hw_ver)

    @property
    @pulumi.getter(name="diskStore")
    def disk_store(self) -> pulumi.Input[str]:
        """
        esxi diskstore for boot disk.
        """
        return pulumi.get(self, "disk_store")

    @disk_store.setter
    def disk_store(self, value: pulumi.Input[str]):
        pulumi.set(self, "disk_store", value)

    @property
    @pulumi.getter(name="bootDiskSize")
    def boot_disk_size(self) -> Optional[pulumi.Input[int]]:
        """
        VM boot disk size. Will expand boot disk to this size.
        """
        return pulumi.get(self, "boot_disk_size")

    @boot_disk_size.setter
    def boot_disk_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "boot_disk_size", value)

    @property
    @pulumi.getter(name="bootDiskType")
    def boot_disk_type(self) -> Optional[pulumi.Input['DiskType']]:
        """
        VM boot disk type. thin, zeroedthick, eagerzeroedthick
        """
        return pulumi.get(self, "boot_disk_type")

    @boot_disk_type.setter
    def boot_disk_type(self, value: Optional[pulumi.Input['DiskType']]):
        pulumi.set(self, "boot_disk_type", value)

    @property
    @pulumi.getter(name="bootFirmware")
    def boot_firmware(self) -> Optional[pulumi.Input['BootFirmwareType']]:
        """
        Boot type('efi' is boot uefi mode)
        """
        return pulumi.get(self, "boot_firmware")

    @boot_firmware.setter
    def boot_firmware(self, value: Optional[pulumi.Input['BootFirmwareType']]):
        pulumi.set(self, "boot_firmware", value)

    @property
    @pulumi.getter(name="cloneFromVirtualMachine")
    def clone_from_virtual_machine(self) -> Optional[pulumi.Input[str]]:
        """
        Source vm path on esxi host to clone.
        """
        return pulumi.get(self, "clone_from_virtual_machine")

    @clone_from_virtual_machine.setter
    def clone_from_virtual_machine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "clone_from_virtual_machine", value)

    @property
    @pulumi.getter
    def info(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KeyValuePairArgs']]]]:
        """
        pass data to VM
        """
        return pulumi.get(self, "info")

    @info.setter
    def info(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KeyValuePairArgs']]]]):
        pulumi.set(self, "info", value)

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> Optional[pulumi.Input[int]]:
        """
        VM memory size.
        """
        return pulumi.get(self, "mem_size")

    @mem_size.setter
    def mem_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mem_size", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        esxi vm name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NetworkInterfaceArgs']]]]:
        """
        VM network interfaces.
        """
        return pulumi.get(self, "network_interfaces")

    @network_interfaces.setter
    def network_interfaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NetworkInterfaceArgs']]]]):
        pulumi.set(self, "network_interfaces", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        """
        VM memory size.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter(name="numVCpus")
    def num_v_cpus(self) -> Optional[pulumi.Input[int]]:
        """
        VM number of virtual cpus.
        """
        return pulumi.get(self, "num_v_cpus")

    @num_v_cpus.setter
    def num_v_cpus(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "num_v_cpus", value)

    @property
    @pulumi.getter
    def os(self) -> Optional[pulumi.Input[str]]:
        """
        VM OS type.
        """
        return pulumi.get(self, "os")

    @os.setter
    def os(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "os", value)

    @property
    @pulumi.getter(name="ovfProperties")
    def ovf_properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['KeyValuePairArgs']]]]:
        """
        VM OVF properties.
        """
        return pulumi.get(self, "ovf_properties")

    @ovf_properties.setter
    def ovf_properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['KeyValuePairArgs']]]]):
        pulumi.set(self, "ovf_properties", value)

    @property
    @pulumi.getter(name="ovfPropertiesTimer")
    def ovf_properties_timer(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of time, in seconds, to wait for the guest to boot and run ovfProperties. (0-6000)
        """
        return pulumi.get(self, "ovf_properties_timer")

    @ovf_properties_timer.setter
    def ovf_properties_timer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "ovf_properties_timer", value)

    @property
    @pulumi.getter(name="ovfSource")
    def ovf_source(self) -> Optional[pulumi.Input[str]]:
        """
        Path or URL of ovf file source.
        """
        return pulumi.get(self, "ovf_source")

    @ovf_source.setter
    def ovf_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ovf_source", value)

    @property
    @pulumi.getter
    def power(self) -> Optional[pulumi.Input[str]]:
        """
        VM power state.
        """
        return pulumi.get(self, "power")

    @power.setter
    def power(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "power", value)

    @property
    @pulumi.getter(name="resourcePoolName")
    def resource_pool_name(self) -> Optional[pulumi.Input[str]]:
        """
        Resource pool name to place vm.
        """
        return pulumi.get(self, "resource_pool_name")

    @resource_pool_name.setter
    def resource_pool_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_pool_name", value)

    @property
    @pulumi.getter(name="shutdownTimeout")
    def shutdown_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of vm uptime, in seconds, to wait for an available IP address on this virtual machine. (0-600)
        """
        return pulumi.get(self, "shutdown_timeout")

    @shutdown_timeout.setter
    def shutdown_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "shutdown_timeout", value)

    @property
    @pulumi.getter(name="startupTimeout")
    def startup_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of vm uptime, in seconds, to wait for an available IP address on this virtual machine. (0-600)
        """
        return pulumi.get(self, "startup_timeout")

    @startup_timeout.setter
    def startup_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "startup_timeout", value)

    @property
    @pulumi.getter(name="virtualDisks")
    def virtual_disks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VMVirtualDiskArgs']]]]:
        """
        VM virtual disks.
        """
        return pulumi.get(self, "virtual_disks")

    @virtual_disks.setter
    def virtual_disks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VMVirtualDiskArgs']]]]):
        pulumi.set(self, "virtual_disks", value)

    @property
    @pulumi.getter(name="virtualHWVer")
    def virtual_hw_ver(self) -> Optional[pulumi.Input[int]]:
        """
        VM Virtual HW version.
        """
        return pulumi.get(self, "virtual_hw_ver")

    @virtual_hw_ver.setter
    def virtual_hw_ver(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "virtual_hw_ver", value)


class VirtualMachine(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 boot_disk_size: Optional[pulumi.Input[int]] = None,
                 boot_disk_type: Optional[pulumi.Input['DiskType']] = None,
                 boot_firmware: Optional[pulumi.Input['BootFirmwareType']] = None,
                 clone_from_virtual_machine: Optional[pulumi.Input[str]] = None,
                 disk_store: Optional[pulumi.Input[str]] = None,
                 info: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['KeyValuePairArgs']]]]] = None,
                 mem_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkInterfaceArgs']]]]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 num_v_cpus: Optional[pulumi.Input[int]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 ovf_properties: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['KeyValuePairArgs']]]]] = None,
                 ovf_properties_timer: Optional[pulumi.Input[int]] = None,
                 ovf_source: Optional[pulumi.Input[str]] = None,
                 power: Optional[pulumi.Input[str]] = None,
                 resource_pool_name: Optional[pulumi.Input[str]] = None,
                 shutdown_timeout: Optional[pulumi.Input[int]] = None,
                 startup_timeout: Optional[pulumi.Input[int]] = None,
                 virtual_disks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VMVirtualDiskArgs']]]]] = None,
                 virtual_hw_ver: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a VirtualMachine resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] boot_disk_size: VM boot disk size. Will expand boot disk to this size.
        :param pulumi.Input['DiskType'] boot_disk_type: VM boot disk type. thin, zeroedthick, eagerzeroedthick
        :param pulumi.Input['BootFirmwareType'] boot_firmware: Boot type('efi' is boot uefi mode)
        :param pulumi.Input[str] clone_from_virtual_machine: Source vm path on esxi host to clone.
        :param pulumi.Input[str] disk_store: esxi diskstore for boot disk.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['KeyValuePairArgs']]]] info: pass data to VM
        :param pulumi.Input[int] mem_size: VM memory size.
        :param pulumi.Input[str] name: esxi vm name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkInterfaceArgs']]]] network_interfaces: VM network interfaces.
        :param pulumi.Input[str] notes: VM memory size.
        :param pulumi.Input[int] num_v_cpus: VM number of virtual cpus.
        :param pulumi.Input[str] os: VM OS type.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['KeyValuePairArgs']]]] ovf_properties: VM OVF properties.
        :param pulumi.Input[int] ovf_properties_timer: The amount of time, in seconds, to wait for the guest to boot and run ovfProperties. (0-6000)
        :param pulumi.Input[str] ovf_source: Path or URL of ovf file source.
        :param pulumi.Input[str] power: VM power state.
        :param pulumi.Input[str] resource_pool_name: Resource pool name to place vm.
        :param pulumi.Input[int] shutdown_timeout: The amount of vm uptime, in seconds, to wait for an available IP address on this virtual machine. (0-600)
        :param pulumi.Input[int] startup_timeout: The amount of vm uptime, in seconds, to wait for an available IP address on this virtual machine. (0-600)
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VMVirtualDiskArgs']]]] virtual_disks: VM virtual disks.
        :param pulumi.Input[int] virtual_hw_ver: VM Virtual HW version.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VirtualMachineArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a VirtualMachine resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param VirtualMachineArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VirtualMachineArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 boot_disk_size: Optional[pulumi.Input[int]] = None,
                 boot_disk_type: Optional[pulumi.Input['DiskType']] = None,
                 boot_firmware: Optional[pulumi.Input['BootFirmwareType']] = None,
                 clone_from_virtual_machine: Optional[pulumi.Input[str]] = None,
                 disk_store: Optional[pulumi.Input[str]] = None,
                 info: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['KeyValuePairArgs']]]]] = None,
                 mem_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_interfaces: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NetworkInterfaceArgs']]]]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 num_v_cpus: Optional[pulumi.Input[int]] = None,
                 os: Optional[pulumi.Input[str]] = None,
                 ovf_properties: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['KeyValuePairArgs']]]]] = None,
                 ovf_properties_timer: Optional[pulumi.Input[int]] = None,
                 ovf_source: Optional[pulumi.Input[str]] = None,
                 power: Optional[pulumi.Input[str]] = None,
                 resource_pool_name: Optional[pulumi.Input[str]] = None,
                 shutdown_timeout: Optional[pulumi.Input[int]] = None,
                 startup_timeout: Optional[pulumi.Input[int]] = None,
                 virtual_disks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VMVirtualDiskArgs']]]]] = None,
                 virtual_hw_ver: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VirtualMachineArgs.__new__(VirtualMachineArgs)

            if boot_disk_size is None:
                boot_disk_size = 16
            __props__.__dict__["boot_disk_size"] = boot_disk_size
            if boot_disk_type is None:
                boot_disk_type = 'thin'
            __props__.__dict__["boot_disk_type"] = boot_disk_type
            if boot_firmware is None:
                boot_firmware = 'bios'
            __props__.__dict__["boot_firmware"] = boot_firmware
            __props__.__dict__["clone_from_virtual_machine"] = clone_from_virtual_machine
            if disk_store is None and not opts.urn:
                raise TypeError("Missing required property 'disk_store'")
            __props__.__dict__["disk_store"] = disk_store
            __props__.__dict__["info"] = info
            if mem_size is None:
                mem_size = 512
            __props__.__dict__["mem_size"] = mem_size
            __props__.__dict__["name"] = name
            __props__.__dict__["network_interfaces"] = network_interfaces
            __props__.__dict__["notes"] = notes
            if num_v_cpus is None:
                num_v_cpus = 1
            __props__.__dict__["num_v_cpus"] = num_v_cpus
            if os is None:
                os = 'centos'
            __props__.__dict__["os"] = os
            __props__.__dict__["ovf_properties"] = ovf_properties
            if ovf_properties_timer is None:
                ovf_properties_timer = 6000
            __props__.__dict__["ovf_properties_timer"] = ovf_properties_timer
            __props__.__dict__["ovf_source"] = ovf_source
            __props__.__dict__["power"] = power
            if resource_pool_name is None:
                resource_pool_name = '/'
            __props__.__dict__["resource_pool_name"] = resource_pool_name
            if shutdown_timeout is None:
                shutdown_timeout = 600
            __props__.__dict__["shutdown_timeout"] = shutdown_timeout
            if startup_timeout is None:
                startup_timeout = 600
            __props__.__dict__["startup_timeout"] = startup_timeout
            __props__.__dict__["virtual_disks"] = virtual_disks
            if virtual_hw_ver is None:
                virtual_hw_ver = 13
            __props__.__dict__["virtual_hw_ver"] = virtual_hw_ver
            __props__.__dict__["ip_address"] = None
        super(VirtualMachine, __self__).__init__(
            'esxi-native:index:VirtualMachine',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'VirtualMachine':
        """
        Get an existing VirtualMachine resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = VirtualMachineArgs.__new__(VirtualMachineArgs)

        __props__.__dict__["boot_disk_size"] = None
        __props__.__dict__["boot_disk_type"] = None
        __props__.__dict__["boot_firmware"] = None
        __props__.__dict__["disk_store"] = None
        __props__.__dict__["info"] = None
        __props__.__dict__["ip_address"] = None
        __props__.__dict__["mem_size"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["network_interfaces"] = None
        __props__.__dict__["notes"] = None
        __props__.__dict__["num_v_cpus"] = None
        __props__.__dict__["os"] = None
        __props__.__dict__["power"] = None
        __props__.__dict__["resource_pool_name"] = None
        __props__.__dict__["shutdown_timeout"] = None
        __props__.__dict__["startup_timeout"] = None
        __props__.__dict__["virtual_disks"] = None
        __props__.__dict__["virtual_hw_ver"] = None
        return VirtualMachine(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="bootDiskSize")
    def boot_disk_size(self) -> pulumi.Output[Optional[int]]:
        """
        VM boot disk size. Will expand boot disk to this size.
        """
        return pulumi.get(self, "boot_disk_size")

    @property
    @pulumi.getter(name="bootDiskType")
    def boot_disk_type(self) -> pulumi.Output[Optional['DiskType']]:
        """
        VM boot disk type. thin, zeroedthick, eagerzeroedthick
        """
        return pulumi.get(self, "boot_disk_type")

    @property
    @pulumi.getter(name="bootFirmware")
    def boot_firmware(self) -> pulumi.Output[Optional['BootFirmwareType']]:
        """
        Boot type('efi' is boot uefi mode)
        """
        return pulumi.get(self, "boot_firmware")

    @property
    @pulumi.getter(name="diskStore")
    def disk_store(self) -> pulumi.Output[str]:
        """
        esxi diskstore for boot disk.
        """
        return pulumi.get(self, "disk_store")

    @property
    @pulumi.getter
    def info(self) -> pulumi.Output[Optional[Sequence['outputs.KeyValuePair']]]:
        """
        pass data to VM
        """
        return pulumi.get(self, "info")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Output[Optional[str]]:
        """
        The IP address reported by VMWare tools.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="memSize")
    def mem_size(self) -> pulumi.Output[int]:
        """
        VM memory size.
        """
        return pulumi.get(self, "mem_size")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        esxi vm name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> pulumi.Output[Optional[Sequence['outputs.NetworkInterface']]]:
        """
        VM network interfaces.
        """
        return pulumi.get(self, "network_interfaces")

    @property
    @pulumi.getter
    def notes(self) -> pulumi.Output[Optional[str]]:
        """
        VM memory size.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter(name="numVCpus")
    def num_v_cpus(self) -> pulumi.Output[int]:
        """
        VM number of virtual cpus.
        """
        return pulumi.get(self, "num_v_cpus")

    @property
    @pulumi.getter
    def os(self) -> pulumi.Output[str]:
        """
        VM OS type.
        """
        return pulumi.get(self, "os")

    @property
    @pulumi.getter
    def power(self) -> pulumi.Output[Optional[str]]:
        """
        VM power state.
        """
        return pulumi.get(self, "power")

    @property
    @pulumi.getter(name="resourcePoolName")
    def resource_pool_name(self) -> pulumi.Output[str]:
        """
        Resource pool name to place vm.
        """
        return pulumi.get(self, "resource_pool_name")

    @property
    @pulumi.getter(name="shutdownTimeout")
    def shutdown_timeout(self) -> pulumi.Output[Optional[int]]:
        """
        The amount of vm uptime, in seconds, to wait for an available IP address on this virtual machine.
        """
        return pulumi.get(self, "shutdown_timeout")

    @property
    @pulumi.getter(name="startupTimeout")
    def startup_timeout(self) -> pulumi.Output[Optional[int]]:
        """
        The amount of vm uptime, in seconds, to wait for an available IP address on this virtual machine.
        """
        return pulumi.get(self, "startup_timeout")

    @property
    @pulumi.getter(name="virtualDisks")
    def virtual_disks(self) -> pulumi.Output[Optional[Sequence['outputs.VMVirtualDisk']]]:
        """
        VM virtual disks.
        """
        return pulumi.get(self, "virtual_disks")

    @property
    @pulumi.getter(name="virtualHWVer")
    def virtual_hw_ver(self) -> pulumi.Output[Optional[int]]:
        """
        VM Virtual HW version.
        """
        return pulumi.get(self, "virtual_hw_ver")

