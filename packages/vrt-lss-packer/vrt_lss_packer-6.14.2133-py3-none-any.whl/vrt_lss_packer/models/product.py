# coding: utf-8

"""
    VRt.Packer [PC]

    The version of the OpenAPI document: 6.14.2133

    Generated by OpenAPI Generator: 6.6.0

    Do not edit the code manually

    2023 Veeroute
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conint, conlist, constr
from vrt_lss_packer.models.attribute import Attribute
from vrt_lss_packer.models.dimensions import Dimensions

class Product(BaseModel):
    """
    Product. Can be rotated 90 degrees around the vertical axis. 
    """
    key: constr(strict=True, max_length=1024, min_length=1) = Field(..., description="Product key (SKU).")
    count: Optional[conint(strict=True, le=70001, ge=1)] = Field(1, description="Number of products.")
    dimensions: Dimensions = Field(...)
    max_pressure: Optional[conint(strict=True, le=100000, ge=0)] = Field(100000, description="The maximum permissible top load that this product can withstand, in kg/m2.")
    compatible_package_keys: Optional[conlist(constr(strict=True, max_length=1024, min_length=1), max_items=11, min_items=0, unique_items=True)] = Field(None, description="List of keys of compatible packages. If the list is empty, then all packages are considered compatible. The list must be either empty or must contain the keys of all mixboxes. ")
    attributes: Optional[conlist(Attribute, max_items=1000, min_items=0, unique_items=True)] = Field(None, description="Attributes. Used to add service information.")
    __properties = ["key", "count", "dimensions", "max_pressure", "compatible_package_keys", "attributes"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Product:
        """Create an instance of Product from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of dimensions
        if self.dimensions:
            _dict['dimensions'] = self.dimensions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item in self.attributes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['attributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Product:
        """Create an instance of Product from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Product.parse_obj(obj)

        _obj = Product.parse_obj({
            "key": obj.get("key"),
            "count": obj.get("count") if obj.get("count") is not None else 1,
            "dimensions": Dimensions.from_dict(obj.get("dimensions")) if obj.get("dimensions") is not None else None,
            "max_pressure": obj.get("max_pressure") if obj.get("max_pressure") is not None else 100000,
            "compatible_package_keys": obj.get("compatible_package_keys"),
            "attributes": [Attribute.from_dict(_item) for _item in obj.get("attributes")] if obj.get("attributes") is not None else None
        })
        return _obj

