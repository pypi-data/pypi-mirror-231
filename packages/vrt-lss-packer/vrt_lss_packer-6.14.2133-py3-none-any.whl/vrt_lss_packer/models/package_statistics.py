# coding: utf-8

"""
    VRt.Packer [PC]

    The version of the OpenAPI document: 6.14.2133

    Generated by OpenAPI Generator: 6.6.0

    Do not edit the code manually

    2023 Veeroute
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import BaseModel, Field, confloat, conint, constr
from vrt_lss_packer.models.package_type import PackageType

class PackageStatistics(BaseModel):
    """
    Statistics for package.
    """
    package_key: constr(strict=True, max_length=1024, min_length=1) = Field(..., description="Package key, unique identifier.")
    package_type: PackageType = Field(...)
    count: conint(strict=True, le=700001, ge=0) = Field(..., description="The total number of packages.")
    max_container_mass: Union[confloat(le=1000000, ge=0, strict=True), conint(le=1000000, ge=0, strict=True)] = Field(..., description="The maximum weight of goods that this package can hold (in total for all packages of the specified key and type), in kilograms.")
    max_container_volume: Union[confloat(le=1000000, ge=0, strict=True), conint(le=1000000, ge=0, strict=True)] = Field(..., description="The maximum volume of goods that this package can hold (total for all packages of the specified key and type), in cubic meters.")
    utilization_by_mass: Union[confloat(le=1, ge=0, strict=True), conint(le=1, ge=0, strict=True)] = Field(..., description="Utilization by mass (in fractions) - the ratio of the loaded mass to the maximum possible (excluding weight of packages).")
    utilization_by_volume: Union[confloat(le=1, ge=0, strict=True), conint(le=1, ge=0, strict=True)] = Field(..., description="Utilization by volume (in fractions) - the ratio of the loaded volume to the maximum possible (excluding volume of packages).")
    __properties = ["package_key", "package_type", "count", "max_container_mass", "max_container_volume", "utilization_by_mass", "utilization_by_volume"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PackageStatistics:
        """Create an instance of PackageStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PackageStatistics:
        """Create an instance of PackageStatistics from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PackageStatistics.parse_obj(obj)

        _obj = PackageStatistics.parse_obj({
            "package_key": obj.get("package_key"),
            "package_type": obj.get("package_type"),
            "count": obj.get("count"),
            "max_container_mass": obj.get("max_container_mass"),
            "max_container_volume": obj.get("max_container_volume"),
            "utilization_by_mass": obj.get("utilization_by_mass"),
            "utilization_by_volume": obj.get("utilization_by_volume")
        })
        return _obj

