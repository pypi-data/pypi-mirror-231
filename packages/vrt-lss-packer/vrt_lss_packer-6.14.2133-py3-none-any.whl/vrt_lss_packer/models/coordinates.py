# coding: utf-8

"""
    VRt.Packer [PC]

    The version of the OpenAPI document: 6.14.2133

    Generated by OpenAPI Generator: 6.6.0

    Do not edit the code manually

    2023 Veeroute
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, conint

class Coordinates(BaseModel):
    """
    Local [coordinates](#section/Description/Coordinate-system).
    """
    x: conint(strict=True, le=100000, ge=0) = Field(..., description="Local coordinate along the X axis, in millimeters.")
    y: conint(strict=True, le=100000, ge=0) = Field(..., description="Local coordinate along the Y axis, in millimeters.")
    z: conint(strict=True, le=100000, ge=0) = Field(..., description="Local coordinate along the Z axis, in millimeters.")
    __properties = ["x", "y", "z"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Coordinates:
        """Create an instance of Coordinates from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Coordinates:
        """Create an instance of Coordinates from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Coordinates.parse_obj(obj)

        _obj = Coordinates.parse_obj({
            "x": obj.get("x"),
            "y": obj.get("y"),
            "z": obj.get("z")
        })
        return _obj

