# coding: utf-8

"""
    VRt.Packer [PC]

    The version of the OpenAPI document: 6.14.2133

    Generated by OpenAPI Generator: 6.6.0

    Do not edit the code manually

    2023 Veeroute
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, conint

class Dimensions(BaseModel):
    """
    Overall dimensions (L-W-H) and weight.
    """
    length: conint(strict=True, le=100000, ge=0) = Field(..., description="Length in millimeters.")
    width: conint(strict=True, le=100000, ge=0) = Field(..., description="Width in millimeters.")
    height: conint(strict=True, le=100000, ge=0) = Field(..., description="Height in millimeters.")
    mass: conint(strict=True, le=1000000, ge=0) = Field(..., description="Weight in grams.")
    __properties = ["length", "width", "height", "mass"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Dimensions:
        """Create an instance of Dimensions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Dimensions:
        """Create an instance of Dimensions from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return Dimensions.parse_obj(obj)

        _obj = Dimensions.parse_obj({
            "length": obj.get("length"),
            "width": obj.get("width"),
            "height": obj.get("height"),
            "mass": obj.get("mass")
        })
        return _obj

