# coding: utf-8

"""
    VRt.Packer [PC]

    The version of the OpenAPI document: 6.14.2133

    Generated by OpenAPI Generator: 6.6.0

    Do not edit the code manually

    2023 Veeroute
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from vrt_lss_packer.models.pack_settings import PackSettings
from vrt_lss_packer.models.package import Package
from vrt_lss_packer.models.product import Product

class PackTask(BaseModel):
    """
    Initial task.
    """
    products: conlist(Product, max_items=70001, min_items=1, unique_items=True) = Field(..., description="List of products.")
    packages: conlist(Package, max_items=11, min_items=1, unique_items=True) = Field(..., description="List of packages. It is obligatory to have at least one package of each type (SLOT, PALLET, MIXBOX). ")
    pack_settings: Optional[PackSettings] = None
    __properties = ["products", "packages", "pack_settings"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PackTask:
        """Create an instance of PackTask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in products (list)
        _items = []
        if self.products:
            for _item in self.products:
                if _item:
                    _items.append(_item.to_dict())
            _dict['products'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in packages (list)
        _items = []
        if self.packages:
            for _item in self.packages:
                if _item:
                    _items.append(_item.to_dict())
            _dict['packages'] = _items
        # override the default output from pydantic by calling `to_dict()` of pack_settings
        if self.pack_settings:
            _dict['pack_settings'] = self.pack_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PackTask:
        """Create an instance of PackTask from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PackTask.parse_obj(obj)

        _obj = PackTask.parse_obj({
            "products": [Product.from_dict(_item) for _item in obj.get("products")] if obj.get("products") is not None else None,
            "packages": [Package.from_dict(_item) for _item in obj.get("packages")] if obj.get("packages") is not None else None,
            "pack_settings": PackSettings.from_dict(obj.get("pack_settings")) if obj.get("pack_settings") is not None else None
        })
        return _obj

