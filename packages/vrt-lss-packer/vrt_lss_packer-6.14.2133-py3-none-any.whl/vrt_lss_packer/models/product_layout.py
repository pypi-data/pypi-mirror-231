# coding: utf-8

"""
    VRt.Packer [PC]

    The version of the OpenAPI document: 6.14.2133

    Generated by OpenAPI Generator: 6.6.0

    Do not edit the code manually

    2023 Veeroute
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, constr
from vrt_lss_packer.models.coordinates import Coordinates
from vrt_lss_packer.models.dimensions import Dimensions

class ProductLayout(BaseModel):
    """
    The layout of the product in the package.
    """
    product_key: constr(strict=True, max_length=1024, min_length=1) = Field(..., description="Package key.")
    coordinates: Coordinates = Field(...)
    dimensions: Dimensions = Field(...)
    __properties = ["product_key", "coordinates", "dimensions"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProductLayout:
        """Create an instance of ProductLayout from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of coordinates
        if self.coordinates:
            _dict['coordinates'] = self.coordinates.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dimensions
        if self.dimensions:
            _dict['dimensions'] = self.dimensions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProductLayout:
        """Create an instance of ProductLayout from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ProductLayout.parse_obj(obj)

        _obj = ProductLayout.parse_obj({
            "product_key": obj.get("product_key"),
            "coordinates": Coordinates.from_dict(obj.get("coordinates")) if obj.get("coordinates") is not None else None,
            "dimensions": Dimensions.from_dict(obj.get("dimensions")) if obj.get("dimensions") is not None else None
        })
        return _obj

