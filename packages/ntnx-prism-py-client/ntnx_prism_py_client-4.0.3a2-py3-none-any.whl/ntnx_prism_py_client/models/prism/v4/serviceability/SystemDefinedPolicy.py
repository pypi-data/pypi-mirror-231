# coding: utf-8


"""
IGNORE:
    Nutanix Prism Versioned APIs

    Task Management, Category Associations, Prism Central DR, Alerts, Alert policies, Events and Audits  # noqa: E501

    OpenAPI spec version: 4.0.3-alpha-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_prism_py_client.models.common.v1.config.TenantAwareModel import TenantAwareModel  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.common.CauseAndResolution import CauseAndResolution  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.common.ImpactType import ImpactType  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.serviceability.AlertConfigExceptionGroup import AlertConfigExceptionGroup  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.serviceability.AutoResolve import AutoResolve  # noqa: F401,E501
from ntnx_prism_py_client.models.prism.v4.serviceability.SeverityThresholdInfo import SeverityThresholdInfo  # noqa: F401,E501

class SystemDefinedPolicy(TenantAwareModel):

    """

    :param ext_id: (:attr:`ext_id`) UID of the system defined alert policy.
    :type ext_id: 
    :param alert_type_id: (:attr:`alert_type_id`) System defined alert policy ID.
    :type alert_type_id: 
    :param affected_entity_types: (:attr:`affected_entity_types`) Affected entity types.
    :type affected_entity_types: 
    :param auto_resolve: (:attr:`auto_resolve`) 
    :type auto_resolve: 
    :param classifications: (:attr:`classifications`) Various categories into which this alert type can be classified into. For example, Hardware, Storage, License and so on.
    :type classifications: 
    :param impact_types: (:attr:`impact_types`) Impact types to which this rule applies to.
    :type impact_types: 
    :param kb_articles: (:attr:`kb_articles`) List of KB article numbers.
    :type kb_articles: 
    :param message: (:attr:`message`) Message for a system defined alert policy.
    :type message: 
    :param modified_by_username: (:attr:`modified_by_username`) Name of the user who last modified the system defined alert policy.
    :type modified_by_username: 
    :param modified_time: (:attr:`modified_time`) Time in ISO 8601 format for when the system defined alert policy was last modified.
    :type modified_time: 
    :param cause_and_resolutions: (:attr:`cause_and_resolutions`) Possible causes, resolutions and additional details to troubleshoot this alert.
    :type cause_and_resolutions: 
    :param severity_threshold_infos: (:attr:`severity_threshold_infos`) Enable/Disable for each severity information.
    :type severity_threshold_infos: 
    :param title: (:attr:`title`) Title of a system defined alert policy.
    :type title: 
    :param smart_title: (:attr:`smart_title`) Title for the alert policy which can include dynamic parameters like IP address, VM name and so on.
    :type smart_title: 
    :param is_tenant_specific: (:attr:`is_tenant_specific`) Indicates whether this system defined alert policy is specific to the tenant or not.
    :type is_tenant_specific: 
    :param alert_config_exception_groups: (:attr:`alert_config_exception_groups`) List of clusters that have their alert configurable parameters different from that of in Prism Central.
    :type alert_config_exception_groups: 
    :param exception_count: (:attr:`exception_count`) Numbers of clusters having exceptions with respect to alert config.
    :type exception_count: 

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'ext_id': 'str',
        'alert_type_id': 'str',
        'affected_entity_types': 'list[str]',
        'auto_resolve': 'prism.v4.serviceability.AutoResolve',
        'classifications': 'list[str]',
        'impact_types': 'list[prism.v4.common.ImpactType]',
        'kb_articles': 'list[str]',
        'message': 'str',
        'modified_by_username': 'str',
        'modified_time': 'datetime',
        'cause_and_resolutions': 'list[prism.v4.common.CauseAndResolution]',
        'severity_threshold_infos': 'list[prism.v4.serviceability.SeverityThresholdInfo]',
        'title': 'str',
        'smart_title': 'str',
        'is_tenant_specific': 'bool',
        'alert_config_exception_groups': 'list[prism.v4.serviceability.AlertConfigExceptionGroup]',
        'exception_count': 'int',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'ext_id': 'extId',
        'alert_type_id': 'alertTypeId',
        'affected_entity_types': 'affectedEntityTypes',
        'auto_resolve': 'autoResolve',
        'classifications': 'classifications',
        'impact_types': 'impactTypes',
        'kb_articles': 'kbArticles',
        'message': 'message',
        'modified_by_username': 'modifiedByUsername',
        'modified_time': 'modifiedTime',
        'cause_and_resolutions': 'causeAndResolutions',
        'severity_threshold_infos': 'severityThresholdInfos',
        'title': 'title',
        'smart_title': 'smartTitle',
        'is_tenant_specific': 'isTenantSpecific',
        'alert_config_exception_groups': 'alertConfigExceptionGroups',
        'exception_count': 'exceptionCount',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, ext_id=None, alert_type_id=None, affected_entity_types=None, auto_resolve=None, classifications=None, impact_types=None, kb_articles=None, message=None, modified_by_username=None, modified_time=None, cause_and_resolutions=None, severity_threshold_infos=None, title=None, smart_title=None, is_tenant_specific=None, alert_config_exception_groups=None, exception_count=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        TenantAwareModel.__init__(self, tenant_id, *args, **kwargs)
        self.__ext_id = None
        self.__alert_type_id = None
        self.__affected_entity_types = None
        self.__auto_resolve = None
        self.__classifications = None
        self.__impact_types = None
        self.__kb_articles = None
        self.__message = None
        self.__modified_by_username = None
        self.__modified_time = None
        self.__cause_and_resolutions = None
        self.__severity_threshold_infos = None
        self.__title = None
        self.__smart_title = None
        self.__is_tenant_specific = None
        self.__alert_config_exception_groups = None
        self.__exception_count = None
        self.discriminator = None
        if ext_id is not None:
            self.__ext_id = ext_id
        if alert_type_id is not None:
            self.__alert_type_id = alert_type_id
        if affected_entity_types is not None:
            self.__affected_entity_types = affected_entity_types
        if auto_resolve is not None:
            self.__auto_resolve = auto_resolve
        if classifications is not None:
            self.__classifications = classifications
        if impact_types is not None:
            self.__impact_types = impact_types
        if kb_articles is not None:
            self.__kb_articles = kb_articles
        if message is not None:
            self.__message = message
        if modified_by_username is not None:
            self.__modified_by_username = modified_by_username
        if modified_time is not None:
            self.__modified_time = modified_time
        if cause_and_resolutions is not None:
            self.__cause_and_resolutions = cause_and_resolutions
        if severity_threshold_infos is not None:
            self.__severity_threshold_infos = severity_threshold_infos
        if title is not None:
            self.__title = title
        if smart_title is not None:
            self.__smart_title = smart_title
        if is_tenant_specific is not None:
            self.__is_tenant_specific = is_tenant_specific
        if alert_config_exception_groups is not None:
            self.__alert_config_exception_groups = alert_config_exception_groups
        if exception_count is not None:
            self.__exception_count = exception_count

    def _initialize_object_type(self):
        return 'prism.v4.serviceability.SystemDefinedPolicy'

    def _initialize_fq_object_type(self):
        return 'prism.v4.r0.a2.serviceability.SystemDefinedPolicy'


    @property
    def ext_id(self):
        """
        UID of the system defined alert policy.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__ext_id

    @ext_id.setter
    def ext_id(self, ext_id):

        self.__ext_id = ext_id

    @property
    def alert_type_id(self):
        """
        System defined alert policy ID.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__alert_type_id

    @alert_type_id.setter
    def alert_type_id(self, alert_type_id):

        self.__alert_type_id = alert_type_id

    @property
    def affected_entity_types(self):
        """
        Affected entity types.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__affected_entity_types

    @affected_entity_types.setter
    def affected_entity_types(self, affected_entity_types):

        self.__affected_entity_types = affected_entity_types

    @property
    def auto_resolve(self):
        """
        

        :type:
            :class:`~ntnx_prism_py_client.models.prism.v4.serviceability.AutoResolve`
        """  # noqa: E501
        return self.__auto_resolve

    @auto_resolve.setter
    def auto_resolve(self, auto_resolve):

        self.__auto_resolve = auto_resolve

    @property
    def classifications(self):
        """
        Various categories into which this alert type can be classified into. For example, Hardware, Storage, License and so on.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__classifications

    @classifications.setter
    def classifications(self, classifications):

        self.__classifications = classifications

    @property
    def impact_types(self):
        """
        Impact types to which this rule applies to.

        :type:
             list[ :class:`~ntnx_prism_py_client.models.prism.v4.common.ImpactType` ]
        """  # noqa: E501
        return self.__impact_types

    @impact_types.setter
    def impact_types(self, impact_types):

        self.__impact_types = impact_types

    @property
    def kb_articles(self):
        """
        List of KB article numbers.

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__kb_articles

    @kb_articles.setter
    def kb_articles(self, kb_articles):

        self.__kb_articles = kb_articles

    @property
    def message(self):
        """
        Message for a system defined alert policy.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__message

    @message.setter
    def message(self, message):

        self.__message = message

    @property
    def modified_by_username(self):
        """
        Name of the user who last modified the system defined alert policy.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__modified_by_username

    @modified_by_username.setter
    def modified_by_username(self, modified_by_username):

        self.__modified_by_username = modified_by_username

    @property
    def modified_time(self):
        """
        Time in ISO 8601 format for when the system defined alert policy was last modified.

        :type:

                :class:`~datetime`
        """  # noqa: E501
        return self.__modified_time

    @modified_time.setter
    def modified_time(self, modified_time):

        self.__modified_time = modified_time

    @property
    def cause_and_resolutions(self):
        """
        Possible causes, resolutions and additional details to troubleshoot this alert.

        :type:
             list[ :class:`~ntnx_prism_py_client.models.prism.v4.common.CauseAndResolution` ]
        """  # noqa: E501
        return self.__cause_and_resolutions

    @cause_and_resolutions.setter
    def cause_and_resolutions(self, cause_and_resolutions):

        self.__cause_and_resolutions = cause_and_resolutions

    @property
    def severity_threshold_infos(self):
        """
        Enable/Disable for each severity information.

        :type:
             list[ :class:`~ntnx_prism_py_client.models.prism.v4.serviceability.SeverityThresholdInfo` ]
        """  # noqa: E501
        return self.__severity_threshold_infos

    @severity_threshold_infos.setter
    def severity_threshold_infos(self, severity_threshold_infos):

        self.__severity_threshold_infos = severity_threshold_infos

    @property
    def title(self):
        """
        Title of a system defined alert policy.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__title

    @title.setter
    def title(self, title):

        self.__title = title

    @property
    def smart_title(self):
        """
        Title for the alert policy which can include dynamic parameters like IP address, VM name and so on.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__smart_title

    @smart_title.setter
    def smart_title(self, smart_title):

        self.__smart_title = smart_title

    @property
    def is_tenant_specific(self):
        """
        Indicates whether this system defined alert policy is specific to the tenant or not.

        :type:

                :class:`~bool`
        """  # noqa: E501
        return self.__is_tenant_specific

    @is_tenant_specific.setter
    def is_tenant_specific(self, is_tenant_specific):

        self.__is_tenant_specific = is_tenant_specific

    @property
    def alert_config_exception_groups(self):
        """
        List of clusters that have their alert configurable parameters different from that of in Prism Central.

        :type:
             list[ :class:`~ntnx_prism_py_client.models.prism.v4.serviceability.AlertConfigExceptionGroup` ]
        """  # noqa: E501
        return self.__alert_config_exception_groups

    @alert_config_exception_groups.setter
    def alert_config_exception_groups(self, alert_config_exception_groups):

        self.__alert_config_exception_groups = alert_config_exception_groups

    @property
    def exception_count(self):
        """
        Numbers of clusters having exceptions with respect to alert config.

        :type:

                :class:`~int`
        """  # noqa: E501
        return self.__exception_count

    @exception_count.setter
    def exception_count(self, exception_count):

        self.__exception_count = exception_count

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(SystemDefinedPolicy, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemDefinedPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

