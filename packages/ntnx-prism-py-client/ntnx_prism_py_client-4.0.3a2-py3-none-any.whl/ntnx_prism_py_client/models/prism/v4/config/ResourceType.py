# coding: utf-8


"""
IGNORE:
    Nutanix Prism Versioned APIs

    Task Management, Category Associations, Prism Central DR, Alerts, Alert policies, Events and Audits  # noqa: E501

    OpenAPI spec version: 4.0.3-alpha-2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six

class ResourceType(object):

    """An enum denoting the associated resource types. Resource types are further grouped into ResourceGroups or a ResourceGroup.<br> Following are the supported entity types:   * `VM`   * `IMAGE`   * `SUBNET`   * `CLUSTER`   * `HOST`   * `REPORT`   * `MARKETPLACE_ITEM`   * `BLUEPRINT`   * `APP`   * `BUNDLE`  Following are the supported policy types:   * `IMAGE_PLACEMENT_POLICY`   * `NETWORK_SECURITY_POLICY`   * `NETWORK_SECURITY_RULE`   * `AFFINITY_RULE`   * `QOS_POLICY`   * `NGT_POLICY`   * `PROTECTION_RULE`   * `STORAGE_POLICY`   * `IMAGE_RATE_LIMIT`   * `RECOVERY_PLAN` 


    Allowed enum values:

        - _UNKNOWN
        - _REDACTED
        - VM
        - MH_VM
        - IMAGE
        - SUBNET
        - CLUSTER
        - HOST
        - REPORT
        - MARKETPLACE_ITEM
        - BLUEPRINT
        - APP
        - VOLUMEGROUP
        - IMAGE_PLACEMENT_POLICY
        - NETWORK_SECURITY_POLICY
        - NETWORK_SECURITY_RULE
        - VM_HOST_AFFINITY_POLICY
        - QOS_POLICY
        - NGT_POLICY
        - PROTECTION_RULE
        - ACCESS_CONTROL_POLICY
        - STORAGE_POLICY
        - IMAGE_RATE_LIMIT
        - RECOVERY_PLAN
        - BUNDLE
    """
    _UNKNOWN = "$UNKNOWN"
    _REDACTED = "$REDACTED"
    VM = "VM"
    MH_VM = "MH_VM"
    IMAGE = "IMAGE"
    SUBNET = "SUBNET"
    CLUSTER = "CLUSTER"
    HOST = "HOST"
    REPORT = "REPORT"
    MARKETPLACE_ITEM = "MARKETPLACE_ITEM"
    BLUEPRINT = "BLUEPRINT"
    APP = "APP"
    VOLUMEGROUP = "VOLUMEGROUP"
    IMAGE_PLACEMENT_POLICY = "IMAGE_PLACEMENT_POLICY"
    NETWORK_SECURITY_POLICY = "NETWORK_SECURITY_POLICY"
    NETWORK_SECURITY_RULE = "NETWORK_SECURITY_RULE"
    VM_HOST_AFFINITY_POLICY = "VM_HOST_AFFINITY_POLICY"
    QOS_POLICY = "QOS_POLICY"
    NGT_POLICY = "NGT_POLICY"
    PROTECTION_RULE = "PROTECTION_RULE"
    ACCESS_CONTROL_POLICY = "ACCESS_CONTROL_POLICY"
    STORAGE_POLICY = "STORAGE_POLICY"
    IMAGE_RATE_LIMIT = "IMAGE_RATE_LIMIT"
    RECOVERY_PLAN = "RECOVERY_PLAN"
    BUNDLE = "BUNDLE"


    def __init__(self, *args, **kwargs):  # noqa: E501
        self.discriminator = None
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'prism.v4.config.ResourceType'

    def _initialize_fq_object_type(self):
        return 'prism.v4.r0.a2.config.ResourceType'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(ResourceType, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

