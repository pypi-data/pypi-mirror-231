# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetOspfAreaResult',
    'AwaitableGetOspfAreaResult',
    'get_ospf_area',
    'get_ospf_area_output',
]

@pulumi.output_type
class GetOspfAreaResult:
    """
    A collection of values returned by getOspfArea.
    """
    def __init__(__self__, area_id=None, authentication_type=None, cost=None, device=None, id=None, instance_name=None, type=None, vrf_name=None):
        if area_id and not isinstance(area_id, str):
            raise TypeError("Expected argument 'area_id' to be a str")
        pulumi.set(__self__, "area_id", area_id)
        if authentication_type and not isinstance(authentication_type, str):
            raise TypeError("Expected argument 'authentication_type' to be a str")
        pulumi.set(__self__, "authentication_type", authentication_type)
        if cost and not isinstance(cost, int):
            raise TypeError("Expected argument 'cost' to be a int")
        pulumi.set(__self__, "cost", cost)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_name and not isinstance(instance_name, str):
            raise TypeError("Expected argument 'instance_name' to be a str")
        pulumi.set(__self__, "instance_name", instance_name)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if vrf_name and not isinstance(vrf_name, str):
            raise TypeError("Expected argument 'vrf_name' to be a str")
        pulumi.set(__self__, "vrf_name", vrf_name)

    @property
    @pulumi.getter(name="areaId")
    def area_id(self) -> str:
        return pulumi.get(self, "area_id")

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> str:
        return pulumi.get(self, "authentication_type")

    @property
    @pulumi.getter
    def cost(self) -> int:
        return pulumi.get(self, "cost")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vrfName")
    def vrf_name(self) -> str:
        return pulumi.get(self, "vrf_name")


class AwaitableGetOspfAreaResult(GetOspfAreaResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOspfAreaResult(
            area_id=self.area_id,
            authentication_type=self.authentication_type,
            cost=self.cost,
            device=self.device,
            id=self.id,
            instance_name=self.instance_name,
            type=self.type,
            vrf_name=self.vrf_name)


def get_ospf_area(area_id: Optional[str] = None,
                  device: Optional[str] = None,
                  instance_name: Optional[str] = None,
                  vrf_name: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOspfAreaResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['areaId'] = area_id
    __args__['device'] = device
    __args__['instanceName'] = instance_name
    __args__['vrfName'] = vrf_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nxos:nxos/getOspfArea:getOspfArea', __args__, opts=opts, typ=GetOspfAreaResult).value

    return AwaitableGetOspfAreaResult(
        area_id=pulumi.get(__ret__, 'area_id'),
        authentication_type=pulumi.get(__ret__, 'authentication_type'),
        cost=pulumi.get(__ret__, 'cost'),
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        instance_name=pulumi.get(__ret__, 'instance_name'),
        type=pulumi.get(__ret__, 'type'),
        vrf_name=pulumi.get(__ret__, 'vrf_name'))


@_utilities.lift_output_func(get_ospf_area)
def get_ospf_area_output(area_id: Optional[pulumi.Input[str]] = None,
                         device: Optional[pulumi.Input[Optional[str]]] = None,
                         instance_name: Optional[pulumi.Input[str]] = None,
                         vrf_name: Optional[pulumi.Input[str]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetOspfAreaResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
