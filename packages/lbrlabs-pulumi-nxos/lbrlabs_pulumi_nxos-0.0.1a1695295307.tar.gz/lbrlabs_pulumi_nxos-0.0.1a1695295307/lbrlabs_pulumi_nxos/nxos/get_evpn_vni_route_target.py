# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetEvpnVniRouteTargetResult',
    'AwaitableGetEvpnVniRouteTargetResult',
    'get_evpn_vni_route_target',
    'get_evpn_vni_route_target_output',
]

@pulumi.output_type
class GetEvpnVniRouteTargetResult:
    """
    A collection of values returned by getEvpnVniRouteTarget.
    """
    def __init__(__self__, device=None, direction=None, encap=None, id=None, route_target=None):
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if direction and not isinstance(direction, str):
            raise TypeError("Expected argument 'direction' to be a str")
        pulumi.set(__self__, "direction", direction)
        if encap and not isinstance(encap, str):
            raise TypeError("Expected argument 'encap' to be a str")
        pulumi.set(__self__, "encap", encap)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if route_target and not isinstance(route_target, str):
            raise TypeError("Expected argument 'route_target' to be a str")
        pulumi.set(__self__, "route_target", route_target)

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def direction(self) -> str:
        return pulumi.get(self, "direction")

    @property
    @pulumi.getter
    def encap(self) -> str:
        return pulumi.get(self, "encap")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="routeTarget")
    def route_target(self) -> str:
        return pulumi.get(self, "route_target")


class AwaitableGetEvpnVniRouteTargetResult(GetEvpnVniRouteTargetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEvpnVniRouteTargetResult(
            device=self.device,
            direction=self.direction,
            encap=self.encap,
            id=self.id,
            route_target=self.route_target)


def get_evpn_vni_route_target(device: Optional[str] = None,
                              direction: Optional[str] = None,
                              encap: Optional[str] = None,
                              route_target: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEvpnVniRouteTargetResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['direction'] = direction
    __args__['encap'] = encap
    __args__['routeTarget'] = route_target
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nxos:nxos/getEvpnVniRouteTarget:getEvpnVniRouteTarget', __args__, opts=opts, typ=GetEvpnVniRouteTargetResult).value

    return AwaitableGetEvpnVniRouteTargetResult(
        device=pulumi.get(__ret__, 'device'),
        direction=pulumi.get(__ret__, 'direction'),
        encap=pulumi.get(__ret__, 'encap'),
        id=pulumi.get(__ret__, 'id'),
        route_target=pulumi.get(__ret__, 'route_target'))


@_utilities.lift_output_func(get_evpn_vni_route_target)
def get_evpn_vni_route_target_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                                     direction: Optional[pulumi.Input[str]] = None,
                                     encap: Optional[pulumi.Input[str]] = None,
                                     route_target: Optional[pulumi.Input[str]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEvpnVniRouteTargetResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
