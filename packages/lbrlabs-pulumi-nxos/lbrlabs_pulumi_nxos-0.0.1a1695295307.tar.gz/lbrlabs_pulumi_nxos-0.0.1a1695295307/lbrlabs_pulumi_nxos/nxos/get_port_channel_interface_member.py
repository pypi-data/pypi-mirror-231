# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetPortChannelInterfaceMemberResult',
    'AwaitableGetPortChannelInterfaceMemberResult',
    'get_port_channel_interface_member',
    'get_port_channel_interface_member_output',
]

@pulumi.output_type
class GetPortChannelInterfaceMemberResult:
    """
    A collection of values returned by getPortChannelInterfaceMember.
    """
    def __init__(__self__, device=None, id=None, interface_dn=None, interface_id=None):
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if interface_dn and not isinstance(interface_dn, str):
            raise TypeError("Expected argument 'interface_dn' to be a str")
        pulumi.set(__self__, "interface_dn", interface_dn)
        if interface_id and not isinstance(interface_id, str):
            raise TypeError("Expected argument 'interface_id' to be a str")
        pulumi.set(__self__, "interface_id", interface_id)

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="interfaceDn")
    def interface_dn(self) -> str:
        return pulumi.get(self, "interface_dn")

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> str:
        return pulumi.get(self, "interface_id")


class AwaitableGetPortChannelInterfaceMemberResult(GetPortChannelInterfaceMemberResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPortChannelInterfaceMemberResult(
            device=self.device,
            id=self.id,
            interface_dn=self.interface_dn,
            interface_id=self.interface_id)


def get_port_channel_interface_member(device: Optional[str] = None,
                                      interface_dn: Optional[str] = None,
                                      interface_id: Optional[str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPortChannelInterfaceMemberResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['interfaceDn'] = interface_dn
    __args__['interfaceId'] = interface_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nxos:nxos/getPortChannelInterfaceMember:getPortChannelInterfaceMember', __args__, opts=opts, typ=GetPortChannelInterfaceMemberResult).value

    return AwaitableGetPortChannelInterfaceMemberResult(
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        interface_dn=pulumi.get(__ret__, 'interface_dn'),
        interface_id=pulumi.get(__ret__, 'interface_id'))


@_utilities.lift_output_func(get_port_channel_interface_member)
def get_port_channel_interface_member_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                                             interface_dn: Optional[pulumi.Input[str]] = None,
                                             interface_id: Optional[pulumi.Input[str]] = None,
                                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPortChannelInterfaceMemberResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
