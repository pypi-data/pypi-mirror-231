# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetRouteMapRuleEntrySetRegularCommunityResult',
    'AwaitableGetRouteMapRuleEntrySetRegularCommunityResult',
    'get_route_map_rule_entry_set_regular_community',
    'get_route_map_rule_entry_set_regular_community_output',
]

@pulumi.output_type
class GetRouteMapRuleEntrySetRegularCommunityResult:
    """
    A collection of values returned by getRouteMapRuleEntrySetRegularCommunity.
    """
    def __init__(__self__, additive=None, device=None, id=None, no_community=None, order=None, rule_name=None, set_criteria=None):
        if additive and not isinstance(additive, str):
            raise TypeError("Expected argument 'additive' to be a str")
        pulumi.set(__self__, "additive", additive)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if no_community and not isinstance(no_community, str):
            raise TypeError("Expected argument 'no_community' to be a str")
        pulumi.set(__self__, "no_community", no_community)
        if order and not isinstance(order, int):
            raise TypeError("Expected argument 'order' to be a int")
        pulumi.set(__self__, "order", order)
        if rule_name and not isinstance(rule_name, str):
            raise TypeError("Expected argument 'rule_name' to be a str")
        pulumi.set(__self__, "rule_name", rule_name)
        if set_criteria and not isinstance(set_criteria, str):
            raise TypeError("Expected argument 'set_criteria' to be a str")
        pulumi.set(__self__, "set_criteria", set_criteria)

    @property
    @pulumi.getter
    def additive(self) -> str:
        return pulumi.get(self, "additive")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="noCommunity")
    def no_community(self) -> str:
        return pulumi.get(self, "no_community")

    @property
    @pulumi.getter
    def order(self) -> int:
        return pulumi.get(self, "order")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> str:
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="setCriteria")
    def set_criteria(self) -> str:
        return pulumi.get(self, "set_criteria")


class AwaitableGetRouteMapRuleEntrySetRegularCommunityResult(GetRouteMapRuleEntrySetRegularCommunityResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRouteMapRuleEntrySetRegularCommunityResult(
            additive=self.additive,
            device=self.device,
            id=self.id,
            no_community=self.no_community,
            order=self.order,
            rule_name=self.rule_name,
            set_criteria=self.set_criteria)


def get_route_map_rule_entry_set_regular_community(device: Optional[str] = None,
                                                   order: Optional[int] = None,
                                                   rule_name: Optional[str] = None,
                                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRouteMapRuleEntrySetRegularCommunityResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['order'] = order
    __args__['ruleName'] = rule_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('nxos:nxos/getRouteMapRuleEntrySetRegularCommunity:getRouteMapRuleEntrySetRegularCommunity', __args__, opts=opts, typ=GetRouteMapRuleEntrySetRegularCommunityResult).value

    return AwaitableGetRouteMapRuleEntrySetRegularCommunityResult(
        additive=pulumi.get(__ret__, 'additive'),
        device=pulumi.get(__ret__, 'device'),
        id=pulumi.get(__ret__, 'id'),
        no_community=pulumi.get(__ret__, 'no_community'),
        order=pulumi.get(__ret__, 'order'),
        rule_name=pulumi.get(__ret__, 'rule_name'),
        set_criteria=pulumi.get(__ret__, 'set_criteria'))


@_utilities.lift_output_func(get_route_map_rule_entry_set_regular_community)
def get_route_map_rule_entry_set_regular_community_output(device: Optional[pulumi.Input[Optional[str]]] = None,
                                                          order: Optional[pulumi.Input[int]] = None,
                                                          rule_name: Optional[pulumi.Input[str]] = None,
                                                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRouteMapRuleEntrySetRegularCommunityResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
