# coding: utf-8

"""
    VRt.Universal [UV]

    The version of the OpenAPI document: 6.14.2133

    Generated by OpenAPI Generator: 6.6.0

    Do not edit the code manually

    2023 Veeroute
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist, constr
from vrt_lss_universal.models.hardlink import Hardlink
from vrt_lss_universal.models.location import Location
from vrt_lss_universal.models.order import Order
from vrt_lss_universal.models.performer import Performer
from vrt_lss_universal.models.plan_settings import PlanSettings
from vrt_lss_universal.models.routing_transport_matrix import RoutingTransportMatrix
from vrt_lss_universal.models.transport import Transport

class PlanTask(BaseModel):
    """
    Task for planning
    """
    locations: conlist(Location, max_items=15001, min_items=1, unique_items=True) = Field(..., description="List of locations used for orders and shifts.")
    orders: conlist(Order, max_items=15001, min_items=1, unique_items=True) = Field(..., description="Orders list.")
    performers: conlist(Performer, max_items=15001, min_items=1, unique_items=True) = Field(..., description="Available performers list.")
    transports: conlist(Transport, max_items=15001, min_items=1, unique_items=True) = Field(..., description="Available transports list.")
    hardlinks: Optional[conlist(Hardlink, max_items=15001, min_items=0, unique_items=True)] = Field(None, description="Assignments list.")
    plan_settings: Optional[PlanSettings] = None
    external_routing: Optional[conlist(RoutingTransportMatrix, max_items=10, min_items=0, unique_items=True)] = Field(None, description="Time and distance matrices list for each transport type from dataset. By specifying an external routing matrix `external_routing`, parameters `geo_settings` are not used. ")
    dataset_name: Optional[constr(strict=True, max_length=1000, min_length=0)] = Field('', description="The name of the dataset. A technical field that does not affect planning. ")
    __properties = ["locations", "orders", "performers", "transports", "hardlinks", "plan_settings", "external_routing", "dataset_name"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PlanTask:
        """Create an instance of PlanTask from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in locations (list)
        _items = []
        if self.locations:
            for _item in self.locations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['locations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in orders (list)
        _items = []
        if self.orders:
            for _item in self.orders:
                if _item:
                    _items.append(_item.to_dict())
            _dict['orders'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in performers (list)
        _items = []
        if self.performers:
            for _item in self.performers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['performers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in transports (list)
        _items = []
        if self.transports:
            for _item in self.transports:
                if _item:
                    _items.append(_item.to_dict())
            _dict['transports'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in hardlinks (list)
        _items = []
        if self.hardlinks:
            for _item in self.hardlinks:
                if _item:
                    _items.append(_item.to_dict())
            _dict['hardlinks'] = _items
        # override the default output from pydantic by calling `to_dict()` of plan_settings
        if self.plan_settings:
            _dict['plan_settings'] = self.plan_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in external_routing (list)
        _items = []
        if self.external_routing:
            for _item in self.external_routing:
                if _item:
                    _items.append(_item.to_dict())
            _dict['external_routing'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PlanTask:
        """Create an instance of PlanTask from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PlanTask.parse_obj(obj)

        _obj = PlanTask.parse_obj({
            "locations": [Location.from_dict(_item) for _item in obj.get("locations")] if obj.get("locations") is not None else None,
            "orders": [Order.from_dict(_item) for _item in obj.get("orders")] if obj.get("orders") is not None else None,
            "performers": [Performer.from_dict(_item) for _item in obj.get("performers")] if obj.get("performers") is not None else None,
            "transports": [Transport.from_dict(_item) for _item in obj.get("transports")] if obj.get("transports") is not None else None,
            "hardlinks": [Hardlink.from_dict(_item) for _item in obj.get("hardlinks")] if obj.get("hardlinks") is not None else None,
            "plan_settings": PlanSettings.from_dict(obj.get("plan_settings")) if obj.get("plan_settings") is not None else None,
            "external_routing": [RoutingTransportMatrix.from_dict(_item) for _item in obj.get("external_routing")] if obj.get("external_routing") is not None else None,
            "dataset_name": obj.get("dataset_name") if obj.get("dataset_name") is not None else ''
        })
        return _obj

