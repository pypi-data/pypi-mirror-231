# coding: utf-8

"""
    VRt.Universal [UV]

    The version of the OpenAPI document: 6.14.2133

    Generated by OpenAPI Generator: 6.6.0

    Do not edit the code manually

    2023 Veeroute
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool

class ReplanStrategy(BaseModel):
    """
    Replan strategy.
    """
    reorder: Optional[StrictBool] = Field(False, description="Activate trip actions reorder.")
    plan_new_orders: Optional[StrictBool] = Field(False, description="Activate new orders planning.")
    create_new_trips: Optional[StrictBool] = Field(False, description="Activate new trips creation.")
    __properties = ["reorder", "plan_new_orders", "create_new_trips"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ReplanStrategy:
        """Create an instance of ReplanStrategy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ReplanStrategy:
        """Create an instance of ReplanStrategy from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ReplanStrategy.parse_obj(obj)

        _obj = ReplanStrategy.parse_obj({
            "reorder": obj.get("reorder") if obj.get("reorder") is not None else False,
            "plan_new_orders": obj.get("plan_new_orders") if obj.get("plan_new_orders") is not None else False,
            "create_new_trips": obj.get("create_new_trips") if obj.get("create_new_trips") is not None else False
        })
        return _obj

