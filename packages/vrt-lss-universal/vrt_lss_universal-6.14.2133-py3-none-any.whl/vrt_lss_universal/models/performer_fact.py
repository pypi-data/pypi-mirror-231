# coding: utf-8

"""
    VRt.Universal [UV]

    The version of the OpenAPI document: 6.14.2133

    Generated by OpenAPI Generator: 6.6.0

    Do not edit the code manually

    2023 Veeroute
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import BaseModel, Field, constr

class PerformerFact(BaseModel):
    """
    Fact.
    """
    key: constr(strict=True, max_length=1024, min_length=1) = Field(..., description="Fact key.")
    time: datetime = Field(..., description="Fact time in the [ISO 8601](https://tools.ietf.org/html/rfc3339#section-5.6) format.")
    performer_key: constr(strict=True, max_length=1024, min_length=1) = Field(..., description="Performer's key.")
    location_key: constr(strict=True, max_length=1024, min_length=1) = Field(..., description="Location key, unique identifier.")
    __properties = ["key", "time", "performer_key", "location_key"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PerformerFact:
        """Create an instance of PerformerFact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PerformerFact:
        """Create an instance of PerformerFact from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return PerformerFact.parse_obj(obj)

        _obj = PerformerFact.parse_obj({
            "key": obj.get("key"),
            "time": obj.get("time"),
            "performer_key": obj.get("performer_key"),
            "location_key": obj.get("location_key")
        })
        return _obj

