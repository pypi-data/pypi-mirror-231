{"version":3,"file":"lib_index_js.270d962b0326dfc7a442.js","mappings":"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","sources":["webpack://grist-widget/./src/index.ts","webpack://grist-widget/./src/initKernelPy.ts"],"sourcesContent":["import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport * as Comlink from 'comlink';\nimport initKernelPy from './initKernelPy';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\n\nconst pendingWorkers: MyWorker[] = [];\n\nclass MyWorker extends Worker {\n  constructor(scriptURL: string | URL, options?: WorkerOptions) {\n    super(scriptURL, options);\n    const { grist } = (window as any);\n    if (grist) {\n      exposeWorker(this, grist);\n    } else {\n      pendingWorkers.push(this);\n    }\n  }\n}\n\nwindow.Worker = MyWorker;\n\nconst emptyNotebook = {\n  content: {\n    'metadata': {\n      'language_info': {\n        'codemirror_mode': {\n          'name': 'python',\n          'version': 3\n        },\n        'file_extension': '.py',\n        'mimetype': 'text/x-python',\n        'name': 'python',\n        'nbconvert_exporter': 'python',\n        'pygments_lexer': 'ipython3',\n        'version': '3.11'\n      },\n      'kernelspec': {\n        'name': 'python',\n        'display_name': 'Python (Pyodide)',\n        'language': 'python'\n      }\n    },\n    'nbformat_minor': 4,\n    'nbformat': 4,\n    'cells': [\n      {\n        'cell_type': 'code',\n        'source': '',\n        'metadata': {},\n        'execution_count': null,\n        'outputs': []\n      }\n    ]\n  },\n  format: 'json' as const,\n};\n\n/**\n * Initialization data for the grist-widget extension.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'grist-widget:plugin',\n  description: 'Custom Grist widget for a JupyterLite notebook',\n  autoStart: true,\n  requires: [IDocumentManager],\n  activate: (app: JupyterFrontEnd) => {\n    // Make sure there's a notebook file so it doesn't give a 404 error\n    // if the grist plugin loads too slowly.\n    app.serviceManager.contents.save('notebook.ipynb', emptyNotebook);\n\n    hideBars(app).catch(e => console.error(e));\n\n    const script = document.createElement('script');\n    script.src = 'https://docs.getgrist.com/grist-plugin-api.js';\n    script.id = 'grist-plugin-api';\n    script.addEventListener('load', async () => {\n      // await delay(1000);\n\n      const grist = (window as any).grist;\n\n      app.serviceManager.contents.fileChanged.connect(async (_, change) => {\n        if (change.type === 'save' && change.newValue?.path === 'notebook.ipynb') {\n          grist.setOption('notebook', change.newValue);\n        }\n      });\n\n      grist.ready();\n      const notebook = await grist.getOption('notebook');\n      if (notebook) {\n        await app.serviceManager.contents.save('notebook.ipynb', notebook);\n        // Immediately reload the notebook file, otherwise it will show a dialog\n        // asking the user if they want to reload the file.\n        await app.commands.execute('docmanager:reload');\n      }\n\n      console.log('JupyterLab extension grist-widget is activated!');\n\n      const kernel = await getKernel(app);\n      kernel.requestExecute({ code: initKernelPy });\n\n      for (const worker of pendingWorkers) {\n        exposeWorker(worker, grist);\n      }\n      const records = await grist.fetchSelectedTable();\n      await updateRecordsInKernel(app, records, { rerunCells: true });\n      grist.onRecords(async (records: any) => {\n        await updateRecordsInKernel(app, records, { rerunCells: false });\n      });\n    });\n    document.head.appendChild(script);\n  }\n};\n\nasync function delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction exposeWorker(worker: Worker, grist: any) {\n  Comlink.expose({\n    grist: {\n      ...grist,\n      getTable: (tableId: string) => Comlink.proxy(grist.getTable(tableId))\n    }\n  }, worker);\n}\n\nasync function getKernel(app: JupyterFrontEnd) {\n  while (true) {\n    const widget = app.shell.currentWidget;\n    const kernel = (widget as any)?.context.sessionContext?.session?.kernel;\n    if (kernel) {\n      return kernel;\n    }\n    await delay(100);\n  }\n}\n\nasync function updateRecordsInKernel(\n  app: JupyterFrontEnd,\n  records: any,\n  { rerunCells }: { rerunCells: boolean }\n) {\n  const kernel = await getKernel(app);\n  const future = kernel.requestExecute({\n    code: `__grist_records__ = ${JSON.stringify(records)}`\n  });\n  if (rerunCells) {\n    let done = false;\n    future.onIOPub = (msg: any) => {\n      if (done) {\n        return;\n      }\n      if (\n        msg.header.msg_type === 'status' &&\n        msg.content.execution_state === 'idle'\n      ) {\n        done = true;\n        app.commands.execute('notebook:run-all-cells');\n      }\n    };\n  }\n}\n\nasync function hideBars(app: JupyterFrontEnd) {\n  while (!app.shell.currentWidget) {\n    await delay(100);\n  }\n  const shell = app.shell as any;\n  shell.collapseLeft();\n  shell._titleHandler.parent.setHidden(true);\n  shell._leftHandler.sideBar.setHidden(true);\n  for (let i = 0; i < 1000; i++) {\n    if (!shell.leftCollapsed) {\n      shell.collapseLeft();\n      shell._leftHandler.sideBar.setHidden(true);\n      break;\n    } else {\n      await delay(10);\n    }\n  }\n}\n\nexport default plugin;\n","// language=Python\nconst code = `\ndef __make_grist_api():\n    from pyodide.ffi import to_js\n    import js\n    import pyodide_js\n\n    class ComlinkProxy:\n        def __init__(self, proxy, name=None):\n            self._proxy = proxy\n            self._name = name\n\n        def __getattr__(self, name):\n            return ComlinkProxy(getattr(self._proxy, name), name)\n\n        async def __call__(self, *args, **kwargs):\n            args = [\n                to_js(arg, dict_converter=js.Object.fromEntries)\n                for arg in args\n            ]\n            kwargs = {\n                key: to_js(value, dict_converter=js.Object.fromEntries)\n                for key, value in kwargs.items()\n            }\n            result = await self._proxy(*args, **kwargs)\n            if self._name == \"getTable\":\n                result = ComlinkProxy(result)\n            elif hasattr(result, \"to_py\"):\n                result = result.to_py()\n            return result\n\n    js.importScripts(\"https://unpkg.com/comlink@4.4.1/dist/umd/comlink.js\")\n    pyodide_js.registerComlink(js.Comlink)\n    return ComlinkProxy(js.Comlink.wrap(js).grist)\n\n\ngrist = __make_grist_api()\n`;\n\nexport default code;\n"],"names":[],"sourceRoot":""}