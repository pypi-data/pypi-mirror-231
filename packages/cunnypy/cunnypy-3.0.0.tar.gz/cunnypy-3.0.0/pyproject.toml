[tool.poetry]
name = "cunnypy"
version = "3.0.0"
description = "A blazingly fast image board library."
authors = ["CunnyArc <glitchy@cunny.social>"]
license = "GPL-3.0-only"
readme = "README.md"
packages = [{ include = "cunnypy" }]
keywords = [
    'allthefallen',
    'anime',
    'anime artwork',
    'anyio',
    'artwork',
    'async',
    'asyncio',
    'booru',
    'danbooru',
    'e621',
    'e926',
    'gelbooru',
    'hentai',
    'httpx',
    'hypnohub',
    'konachan',
    'library',
    'lolibooru',
    'parsel',
    'realbooru',
    'rule34',
    'safebooru',
    'sankaku',
    'tbib',
    'trio',
    'xbooru',
    'yandere',
]
classifiers = [
    "Development Status :: 6 - Mature",
    "Framework :: AnyIO",
    "Framework :: AsyncIO",
    "Framework :: Trio",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.11",
    "Topic :: Games/Entertainment",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Multimedia",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed",
]

[tool.poetry.urls]
Documentation = "https://codeberg.org/CunnyTech/Cunnypy#readme"
Discord = "https://discord.gg/ZxbYHEh"
Funding = "https://liberapay.com/Glitchy"
Issues = "https://codeberg.org/CunnyTech/Cunnypy/issues"
Source = "https://codeberg.org/CunnyTech/Cunnypy"


[tool.poetry.dependencies]
python = "^3.11"
httpx = "^0.24.1"
anyio = "^3.7.1"
parsel = "^1.8.1"

[tool.poetry.group.dev]
optional = true
[tool.poetry.group.dev.dependencies]
ruff = "^0.0.270"
mypy = "^1.5.1"
black = "^23.9.1"
ward = "^0.67.2b0"

[tool.ward]
path = ["tests"]                    # supply multiple paths using a list
capture-output = false              # enable or disable output capturing (e.g. to use debugger)
order = "standard"                  # or 'random'
test-output-style = "test-per-line" # or 'dots-global', 'dot-module'
fail-limit = 5                      # stop the run if 5 fails occur
progress-style = ["bar"]            # display a progress bar during the run

[tool.black]
target-version = ["py311"]
include = '\.pyi?$'
line-length = 120
skip-string-normalization = true

[tool.mypy]
files = ["*.py"]
exclude = ["tests/", ".venv"]

ignore_missing_imports_per_module = true
ignore_missing_imports = true
show_error_codes = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
warn_unused_configs = true
disallow_subclassing_any = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_calls = true
disallow_untyped_defs = true


[tool.ruff]
fix = true
line-length = 120
target-version = "py311"
ignore = [
    "C901",    # Mccabe complexity
    "D100",    # Undocumented public module
    "D104",    # Undocumented public package
    "PLR0913", # Too many arguments to function call
]

select = [
    "A",     # Flake8 builtins
    "ANN",   # Flake8 annotations
    "ARG",   # Flake8 unused arguments
    "ASYNC", # Flake8 async
    "B",     # Flake8 bugbear
    "BLE",   # Flake8 blind except
    "C4",    # Flake8 comprehensions
    "C90",   # Maccabe
    "D",     # Pycodestyle docstrings
    "DTZ",   # Flake8 datetimez
    "E",     # Pycodestyle errors
    "F",     # Pyflakes
    "FBT",   # Flake8 boolean trap
    "I",     # Isort
    "ICN",   # Flake8 import conventions
    "ISC",   # Flake8 implicit string concat
    "N",     # Pep8 naming
    "PT",    # Flake8 pytest style
    "PIE",   # Flake8 pie
    "PLC",   # Pylint convention
    "PLE",   # Pylint errors
    "PGH",   # Pygrep hooks
    "PLR",   # Pylint refactor
    "PLW",   # Pylint warnings
    "Q",     # Flake8 quotes
    "RET",   # Flake8 return
    "RUF",   # Ruff specific rules
    "S",     # Flake8 bandit
    "SIM",   # Flake8 simplify
    "T20",   # Flake8 print
    "TID",   # Flake8 tidy imports
    "UP",    # Pyupgrade
    "W",     # Pycodestyle warnings
    "YTT",   # Flake8 2020
]

[tool.ruff.isort]
known-first-party = ["cunnypy"]
force-wrap-aliases = true
combine-as-imports = true

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
"tests/**/*" = ["S101", "D103"] # Ignore use of assert and missing docstrings
"cunnypy/errors.py" = ["D107"]  # Ignore undocumented __init__

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"

[tool.pyright]
reportOptionalMemberAccess = false
reportGeneralTypeIssues = false

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
