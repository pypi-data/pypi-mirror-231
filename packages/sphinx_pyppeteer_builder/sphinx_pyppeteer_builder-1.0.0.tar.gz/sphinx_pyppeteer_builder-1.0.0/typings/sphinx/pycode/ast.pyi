"""
This type stub file was generated by pyright.
"""

import ast
from typing import overload

"""Helpers for AST (Abstract Syntax Tree)."""
OPERATORS: dict[type[ast.AST], str] = ...
@overload
def unparse(node: None, code: str = ...) -> None:
    ...

@overload
def unparse(node: ast.AST, code: str = ...) -> str:
    ...

def unparse(node: ast.AST | None, code: str = ...) -> str | None:
    """Unparse an AST to string."""
    ...

class _UnparseVisitor(ast.NodeVisitor):
    def __init__(self, code: str = ...) -> None:
        ...
    
    def visit_arg(self, node: ast.arg) -> str:
        ...
    
    def visit_arguments(self, node: ast.arguments) -> str:
        ...
    
    def visit_Attribute(self, node: ast.Attribute) -> str:
        ...
    
    def visit_BinOp(self, node: ast.BinOp) -> str:
        ...
    
    def visit_BoolOp(self, node: ast.BoolOp) -> str:
        ...
    
    def visit_Call(self, node: ast.Call) -> str:
        ...
    
    def visit_Constant(self, node: ast.Constant) -> str:
        ...
    
    def visit_Dict(self, node: ast.Dict) -> str:
        ...
    
    def visit_Lambda(self, node: ast.Lambda) -> str:
        ...
    
    def visit_List(self, node: ast.List) -> str:
        ...
    
    def visit_Name(self, node: ast.Name) -> str:
        ...
    
    def visit_Set(self, node: ast.Set) -> str:
        ...
    
    def visit_Subscript(self, node: ast.Subscript) -> str:
        ...
    
    def visit_UnaryOp(self, node: ast.UnaryOp) -> str:
        ...
    
    def visit_Tuple(self, node: ast.Tuple) -> str:
        ...
    
    def generic_visit(self, node):
        ...
    


