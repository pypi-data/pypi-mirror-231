# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import host_pb2 as host__pb2


class HostStub(object):
    """message Bool {
    bool active = 1;
    }

    message ACTCommandContext {
    ProxyId proxy_id = 1;
    int32 analysis_id = 2;
    string command_address = 3;
    }

    message ACTCommands {
    string commands = 2;
    }

    //TODO(mkoubaa) rethink/rewrite this.  Its hacky and strongly resembles the FERep
    message ACTSolverDataDescriptor {
    enum MeshDescriptor {
    MESH_MAX_ELEMENT_ID = 0;
    MESH_MAX_NODE_ID = 1;
    MESH_MAX_ELEMENT_TYPE = 2;
    }

    enum AnalysisDescriptor {
    CURRENT_STEP = 0;
    SOLVE_TYPE = 1;
    }

    enum ObjectDescriptor {
    COORDINATE_SYSTEM_ID = 0;
    BODY_ID = 1;
    REMOTE_POINT_ID = 2;
    CONTACT_TARGET_ID = 3;
    CONTACT_CONTACT_ID = 4;
    }

    ProxyId proxy_id = 1;

    oneof DescriptorType {
    MeshDescriptor mesh = 2;
    AnalysisDescriptor analysis = 3;
    ObjectDescriptor object = 4;
    }
    }

    message ACTSolverData {

    message MeshData {
    ACTSolverDataDescriptor.MeshDescriptor descriptor = 1;
    int32 data = 2;
    }

    message AnalysisData {
    ACTSolverDataDescriptor.AnalysisDescriptor descriptor = 1;
    int32 data = 2;
    }

    message ObjectData {
    ACTSolverDataDescriptor.ObjectDescriptor descriptor = 1;
    int32 object_id = 2;
    int32 data = 3;
    }

    ProxyId proxy_id = 1;

    oneof DataType {
    MeshData mesh = 2;
    AnalysisData analysis = 3;
    ObjectData object = 4;
    }
    }

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BorrowLicense = channel.unary_unary(
                '/ans.protocol.solver_proxy.host.Host/BorrowLicense',
                request_serializer=host__pb2.LicensingInput.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.ReturnLicense = channel.unary_unary(
                '/ans.protocol.solver_proxy.host.Host/ReturnLicense',
                request_serializer=host__pb2.LicensingInput.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.UpdateProgress = channel.unary_unary(
                '/ans.protocol.solver_proxy.host.Host/UpdateProgress',
                request_serializer=host__pb2.ProgressInfo.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.LogMessage = channel.unary_unary(
                '/ans.protocol.solver_proxy.host.Host/LogMessage',
                request_serializer=host__pb2.MessageInfo.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class HostServicer(object):
    """message Bool {
    bool active = 1;
    }

    message ACTCommandContext {
    ProxyId proxy_id = 1;
    int32 analysis_id = 2;
    string command_address = 3;
    }

    message ACTCommands {
    string commands = 2;
    }

    //TODO(mkoubaa) rethink/rewrite this.  Its hacky and strongly resembles the FERep
    message ACTSolverDataDescriptor {
    enum MeshDescriptor {
    MESH_MAX_ELEMENT_ID = 0;
    MESH_MAX_NODE_ID = 1;
    MESH_MAX_ELEMENT_TYPE = 2;
    }

    enum AnalysisDescriptor {
    CURRENT_STEP = 0;
    SOLVE_TYPE = 1;
    }

    enum ObjectDescriptor {
    COORDINATE_SYSTEM_ID = 0;
    BODY_ID = 1;
    REMOTE_POINT_ID = 2;
    CONTACT_TARGET_ID = 3;
    CONTACT_CONTACT_ID = 4;
    }

    ProxyId proxy_id = 1;

    oneof DescriptorType {
    MeshDescriptor mesh = 2;
    AnalysisDescriptor analysis = 3;
    ObjectDescriptor object = 4;
    }
    }

    message ACTSolverData {

    message MeshData {
    ACTSolverDataDescriptor.MeshDescriptor descriptor = 1;
    int32 data = 2;
    }

    message AnalysisData {
    ACTSolverDataDescriptor.AnalysisDescriptor descriptor = 1;
    int32 data = 2;
    }

    message ObjectData {
    ACTSolverDataDescriptor.ObjectDescriptor descriptor = 1;
    int32 object_id = 2;
    int32 data = 3;
    }

    ProxyId proxy_id = 1;

    oneof DataType {
    MeshData mesh = 2;
    AnalysisData analysis = 3;
    ObjectData object = 4;
    }
    }

    """

    def BorrowLicense(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReturnLicense(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateProgress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogMessage(self, request, context):
        """rpc HasCallbacks(ProxyId) returns (Bool);
        rpc GetCommands(ACTCommandContext) returns (ACTCommands);
        rpc SetSolverData(ACTSolverData) returns (google.protobuf.Empty);
        rpc GetSolverData(ACTSolverDataDescriptor) returns (ACTSolverData);
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HostServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BorrowLicense': grpc.unary_unary_rpc_method_handler(
                    servicer.BorrowLicense,
                    request_deserializer=host__pb2.LicensingInput.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ReturnLicense': grpc.unary_unary_rpc_method_handler(
                    servicer.ReturnLicense,
                    request_deserializer=host__pb2.LicensingInput.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'UpdateProgress': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateProgress,
                    request_deserializer=host__pb2.ProgressInfo.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'LogMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.LogMessage,
                    request_deserializer=host__pb2.MessageInfo.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ans.protocol.solver_proxy.host.Host', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Host(object):
    """message Bool {
    bool active = 1;
    }

    message ACTCommandContext {
    ProxyId proxy_id = 1;
    int32 analysis_id = 2;
    string command_address = 3;
    }

    message ACTCommands {
    string commands = 2;
    }

    //TODO(mkoubaa) rethink/rewrite this.  Its hacky and strongly resembles the FERep
    message ACTSolverDataDescriptor {
    enum MeshDescriptor {
    MESH_MAX_ELEMENT_ID = 0;
    MESH_MAX_NODE_ID = 1;
    MESH_MAX_ELEMENT_TYPE = 2;
    }

    enum AnalysisDescriptor {
    CURRENT_STEP = 0;
    SOLVE_TYPE = 1;
    }

    enum ObjectDescriptor {
    COORDINATE_SYSTEM_ID = 0;
    BODY_ID = 1;
    REMOTE_POINT_ID = 2;
    CONTACT_TARGET_ID = 3;
    CONTACT_CONTACT_ID = 4;
    }

    ProxyId proxy_id = 1;

    oneof DescriptorType {
    MeshDescriptor mesh = 2;
    AnalysisDescriptor analysis = 3;
    ObjectDescriptor object = 4;
    }
    }

    message ACTSolverData {

    message MeshData {
    ACTSolverDataDescriptor.MeshDescriptor descriptor = 1;
    int32 data = 2;
    }

    message AnalysisData {
    ACTSolverDataDescriptor.AnalysisDescriptor descriptor = 1;
    int32 data = 2;
    }

    message ObjectData {
    ACTSolverDataDescriptor.ObjectDescriptor descriptor = 1;
    int32 object_id = 2;
    int32 data = 3;
    }

    ProxyId proxy_id = 1;

    oneof DataType {
    MeshData mesh = 2;
    AnalysisData analysis = 3;
    ObjectData object = 4;
    }
    }

    """

    @staticmethod
    def BorrowLicense(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ans.protocol.solver_proxy.host.Host/BorrowLicense',
            host__pb2.LicensingInput.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReturnLicense(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ans.protocol.solver_proxy.host.Host/ReturnLicense',
            host__pb2.LicensingInput.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateProgress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ans.protocol.solver_proxy.host.Host/UpdateProgress',
            host__pb2.ProgressInfo.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LogMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ans.protocol.solver_proxy.host.Host/LogMessage',
            host__pb2.MessageInfo.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
