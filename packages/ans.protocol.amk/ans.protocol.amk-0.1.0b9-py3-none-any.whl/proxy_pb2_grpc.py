# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import caerep_pb2 as caerep__pb2
import proxy_pb2 as proxy__pb2


class CAESolverStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Solve = channel.unary_unary(
                '/ans.protocol.solver_proxy.proxy.CAESolver/Solve',
                request_serializer=caerep__pb2.CAERep.SerializeToString,
                response_deserializer=caerep__pb2.Output.FromString,
                )
        self.WriteInputFile = channel.unary_unary(
                '/ans.protocol.solver_proxy.proxy.CAESolver/WriteInputFile',
                request_serializer=caerep__pb2.CAERep.SerializeToString,
                response_deserializer=proxy__pb2.InputFile.FromString,
                )


class CAESolverServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Solve(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteInputFile(self, request, context):
        """rpc Convert(ans.protocol.caerep.CAERep) returns (ans.protocol.ferep.FERep);
        rpc ConvertNamedSelection(ans.protocol.caerep.named_selection.NamedSelection) returns (ans.protocol.ferep.named_selection.NamedSelection);
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CAESolverServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Solve': grpc.unary_unary_rpc_method_handler(
                    servicer.Solve,
                    request_deserializer=caerep__pb2.CAERep.FromString,
                    response_serializer=caerep__pb2.Output.SerializeToString,
            ),
            'WriteInputFile': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteInputFile,
                    request_deserializer=caerep__pb2.CAERep.FromString,
                    response_serializer=proxy__pb2.InputFile.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ans.protocol.solver_proxy.proxy.CAESolver', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CAESolver(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Solve(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ans.protocol.solver_proxy.proxy.CAESolver/Solve',
            caerep__pb2.CAERep.SerializeToString,
            caerep__pb2.Output.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WriteInputFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ans.protocol.solver_proxy.proxy.CAESolver/WriteInputFile',
            caerep__pb2.CAERep.SerializeToString,
            proxy__pb2.InputFile.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
