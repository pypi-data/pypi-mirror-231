[tool.poetry]
name = "yellowbox"
version = "0.8.6"
description = ""
authors = ["biocatch ltd"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/biocatchltd/yellowbox"

[tool.poetry.dependencies]
python = "^3.7"
docker = ">=4.2.0"
yaspin = ">=1.0.0"
requests = "*"

redis = { version = ">=3.3.0", optional = true }
pika = { version = "*", optional = true }
kafka-python = { version = "*", optional = true }
aerospike = { version = ">=10.0.1", optional = true }

# note that any version between 12.7.0 and 12.11.0 will not work
azure-storage-blob = { version = ">=12.0.0", optional = true }

cffi = { version = ">=1.14.0", optional = true }
sqlalchemy = { version = ">=1.3.0", optional = true }
psycopg2 = { version = ">=2.8.6", optional = true }
simple_websocket_server = { version = "*", optional = true }
starlette = { version = ">=0.9.0", optional = true }
uvicorn = { version = ">=0.13.0", optional = true }
websockets = { version = "*", optional = true }
hvac = { version = "*", optional = true }
pyodbc = { version = ">=4.0.32", optional = true }
Deprecated = ">=1.2.13"
SQLAlchemy-Utils = { version = ">=0.38.2", optional = true }

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
httpx = "^0.20.0"
pytest-cov = "^2.10"
requests = "^2"
websocket_client = "*"
mypy = ">=1"
types-requests = "^2.25.0"
types-redis = "^3.5.4"
pytest-xdist = "^2.1.0"
sphinx = {version="^6.1.3", python=">=3.8"}
sphinx-rtd-theme = {version="*", python=">=3.8.1"}
pytest-asyncio = "^0.18.2"
coverage = "^6.3.2"
types-Deprecated = "^1.2.7"
google-cloud-storage = "^2.5.0"
gcloud-aio-storage = "^8.0.0"
setuptools = "^67.3.3"
ruff = "^0.0.272"
black = "^23.3.0"
typing-extensions = "^4.6.3"

[tool.poetry.extras]
azure = ["azure-storage-blob", "cffi"]
kafka = ["kafka-python"]
postgresql = ["sqlalchemy", "psycopg2", "SQLAlchemy-Utils"]
mssql = ['sqlalchemy', "SQLAlchemy-Utils"]
rabbit = ["pika"]
redis = ["redis"]
vault = ["hvac"]
webserver = ["starlette", "uvicorn", "websockets"]
websocket = ["simple_websocket_server", "websocket_client"]
gcs = []  # empty for now, but we want to maintain forwards compatiblity in case we even want to add extras here
aerospike = ["aerospike"]

dev = ["redis", "pika", "kafka-python", "azure-storage-blob", "cffi", "sqlalchemy", "psycopg2",
    "simple_websocket_server", "websocket_client", "starlette", "python-igraph", "uvicorn", "websockets", "hvac",
    'pyodbc', 'SQLAlchemy-Utils', "aerospike"]

[build-system]
requires = ["poetry>=1.0.0"]
build-backend = "poetry.masonry.api"

[tool.poetry.plugins.pytest11]
yellowbox = "yellowbox._pytest"

[tool.ruff]
# https://beta.ruff.rs/docs/rules/
select = ["I", "E", "W", "F", "N", "BLE", "COM", "C4", "ISC", "ICN", "G", "PIE", "T20", "PYI", "Q", "SLF", "SIM",
          "ERA", "PGH", "PLC", "PLE", "PLR", "PLW", "RUF", "PT", "B"]
# should be included later: UP, ANN, RET?, ARG, TRY, S
ignore = [
    "COM812",  # trailing comma, handled by black
    "PLR2004",  # Magic value used in comparison
    "PLR0913",  # Too many arguments to function call
    "PLR0912",  # too many branches
    "PLR0911",  # Too many return statements
    "PLR0915",  # too many statements
    "SIM108",  # Use ternary operator instead of `if`-`else`-block
    "SIM105",  # Use `contextlib.suppress(...)` instead of try-except-pass
    "S101",  # assert detected
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "SIM118",  # Use `key in {}` instead of `key in {}.keys()`
    "SIM112",  # Use capitalized environment variable
    "S311", # use of non-cryptographic random
    "T201",  # print found
    "PT013",  # Found incorrect import of pytest, use simple `import pytest` instead
    "B905", # `zip()` without an explicit `strict=` parameter
]
line-length = 120
show-source = true
exclude = [
    "yellowbox/extras/websocket.py",
    "yellowbox/extras/http_server.py",
    "tests/extras/test_websocket.py",
    "tests/extras/test_http_server.py",
    "docs/conf.py",
]

[tool.ruff.isort]
combine-as-imports=true

[tool.ruff.flake8-pytest-style]
raises-require-match-for = []

[tool.ruff.per-file-ignores]
"tests/**" = [
    "N802", # Function name should be lowercase
    "N803", # Argument name should be lowercase
    "S105",  # Possible hardcoded password
    "S113",  # Probable use of requests call without timeout
    "PIE804", # Unnecessary `dict` kwargs
    "PT004", # Fixture does not return anything, add leading underscore
    "BLE001",  # BLE001 Do not catch blind exception: `Exception`
    "F405",  # name may be undefined, or defined from star imports
    "F403",  # star import used; unable to detect undefined names
    "T201",  # `print` found
    "SLF001",  # Private member accessed
    "PLC1901", # simplify str == ""
    "B018",  # useless expression
]

[tool.black]
line-length = 120