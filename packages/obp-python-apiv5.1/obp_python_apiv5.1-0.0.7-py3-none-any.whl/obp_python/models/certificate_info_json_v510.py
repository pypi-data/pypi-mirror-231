# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.1.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class CertificateInfoJsonV510(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subject_domain_name': 'str',
        'not_before': 'str',
        'roles_info': 'str',
        'roles': 'list[str]',
        'issuer_domain_name': 'str',
        'not_after': 'str'
    }

    attribute_map = {
        'subject_domain_name': 'subject_domain_name',
        'not_before': 'not_before',
        'roles_info': 'roles_info',
        'roles': 'roles',
        'issuer_domain_name': 'issuer_domain_name',
        'not_after': 'not_after'
    }

    def __init__(self, subject_domain_name=None, not_before=None, roles_info=None, roles=None, issuer_domain_name=None, not_after=None, _configuration=None):  # noqa: E501
        """CertificateInfoJsonV510 - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._subject_domain_name = None
        self._not_before = None
        self._roles_info = None
        self._roles = None
        self._issuer_domain_name = None
        self._not_after = None
        self.discriminator = None

        self.subject_domain_name = subject_domain_name
        self.not_before = not_before
        if roles_info is not None:
            self.roles_info = roles_info
        if roles is not None:
            self.roles = roles
        self.issuer_domain_name = issuer_domain_name
        self.not_after = not_after

    @property
    def subject_domain_name(self):
        """Gets the subject_domain_name of this CertificateInfoJsonV510.  # noqa: E501


        :return: The subject_domain_name of this CertificateInfoJsonV510.  # noqa: E501
        :rtype: str
        """
        return self._subject_domain_name

    @subject_domain_name.setter
    def subject_domain_name(self, subject_domain_name):
        """Sets the subject_domain_name of this CertificateInfoJsonV510.


        :param subject_domain_name: The subject_domain_name of this CertificateInfoJsonV510.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and subject_domain_name is None:
            raise ValueError("Invalid value for `subject_domain_name`, must not be `None`")  # noqa: E501

        self._subject_domain_name = subject_domain_name

    @property
    def not_before(self):
        """Gets the not_before of this CertificateInfoJsonV510.  # noqa: E501


        :return: The not_before of this CertificateInfoJsonV510.  # noqa: E501
        :rtype: str
        """
        return self._not_before

    @not_before.setter
    def not_before(self, not_before):
        """Sets the not_before of this CertificateInfoJsonV510.


        :param not_before: The not_before of this CertificateInfoJsonV510.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and not_before is None:
            raise ValueError("Invalid value for `not_before`, must not be `None`")  # noqa: E501

        self._not_before = not_before

    @property
    def roles_info(self):
        """Gets the roles_info of this CertificateInfoJsonV510.  # noqa: E501


        :return: The roles_info of this CertificateInfoJsonV510.  # noqa: E501
        :rtype: str
        """
        return self._roles_info

    @roles_info.setter
    def roles_info(self, roles_info):
        """Sets the roles_info of this CertificateInfoJsonV510.


        :param roles_info: The roles_info of this CertificateInfoJsonV510.  # noqa: E501
        :type: str
        """

        self._roles_info = roles_info

    @property
    def roles(self):
        """Gets the roles of this CertificateInfoJsonV510.  # noqa: E501


        :return: The roles of this CertificateInfoJsonV510.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this CertificateInfoJsonV510.


        :param roles: The roles of this CertificateInfoJsonV510.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    @property
    def issuer_domain_name(self):
        """Gets the issuer_domain_name of this CertificateInfoJsonV510.  # noqa: E501


        :return: The issuer_domain_name of this CertificateInfoJsonV510.  # noqa: E501
        :rtype: str
        """
        return self._issuer_domain_name

    @issuer_domain_name.setter
    def issuer_domain_name(self, issuer_domain_name):
        """Sets the issuer_domain_name of this CertificateInfoJsonV510.


        :param issuer_domain_name: The issuer_domain_name of this CertificateInfoJsonV510.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and issuer_domain_name is None:
            raise ValueError("Invalid value for `issuer_domain_name`, must not be `None`")  # noqa: E501

        self._issuer_domain_name = issuer_domain_name

    @property
    def not_after(self):
        """Gets the not_after of this CertificateInfoJsonV510.  # noqa: E501


        :return: The not_after of this CertificateInfoJsonV510.  # noqa: E501
        :rtype: str
        """
        return self._not_after

    @not_after.setter
    def not_after(self, not_after):
        """Sets the not_after of this CertificateInfoJsonV510.


        :param not_after: The not_after of this CertificateInfoJsonV510.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and not_after is None:
            raise ValueError("Invalid value for `not_after`, must not be `None`")  # noqa: E501

        self._not_after = not_after

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertificateInfoJsonV510, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateInfoJsonV510):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CertificateInfoJsonV510):
            return True

        return self.to_dict() != other.to_dict()
