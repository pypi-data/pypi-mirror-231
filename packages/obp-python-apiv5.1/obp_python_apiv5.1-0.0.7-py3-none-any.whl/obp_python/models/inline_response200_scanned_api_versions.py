# coding: utf-8

"""
    Open Bank Project API

    An Open Source API for Banks. (c) TESOBE GmbH. 2011 - 2023. Licensed under the AGPL and commercial licences.  # noqa: E501

    OpenAPI spec version: v5.1.0
    Contact: contact@tesobe.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from obp_python.configuration import Configuration


class InlineResponse200ScannedApiVersions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url_prefix': 'str',
        'api_standard': 'str',
        'api_short_version': 'str',
        'api_version': 'str'
    }

    attribute_map = {
        'url_prefix': 'urlPrefix',
        'api_standard': 'apiStandard',
        'api_short_version': 'apiShortVersion',
        'api_version': 'API_VERSION'
    }

    def __init__(self, url_prefix=None, api_standard=None, api_short_version=None, api_version=None, _configuration=None):  # noqa: E501
        """InlineResponse200ScannedApiVersions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._url_prefix = None
        self._api_standard = None
        self._api_short_version = None
        self._api_version = None
        self.discriminator = None

        self.url_prefix = url_prefix
        self.api_standard = api_standard
        self.api_short_version = api_short_version
        self.api_version = api_version

    @property
    def url_prefix(self):
        """Gets the url_prefix of this InlineResponse200ScannedApiVersions.  # noqa: E501


        :return: The url_prefix of this InlineResponse200ScannedApiVersions.  # noqa: E501
        :rtype: str
        """
        return self._url_prefix

    @url_prefix.setter
    def url_prefix(self, url_prefix):
        """Sets the url_prefix of this InlineResponse200ScannedApiVersions.


        :param url_prefix: The url_prefix of this InlineResponse200ScannedApiVersions.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and url_prefix is None:
            raise ValueError("Invalid value for `url_prefix`, must not be `None`")  # noqa: E501

        self._url_prefix = url_prefix

    @property
    def api_standard(self):
        """Gets the api_standard of this InlineResponse200ScannedApiVersions.  # noqa: E501


        :return: The api_standard of this InlineResponse200ScannedApiVersions.  # noqa: E501
        :rtype: str
        """
        return self._api_standard

    @api_standard.setter
    def api_standard(self, api_standard):
        """Sets the api_standard of this InlineResponse200ScannedApiVersions.


        :param api_standard: The api_standard of this InlineResponse200ScannedApiVersions.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and api_standard is None:
            raise ValueError("Invalid value for `api_standard`, must not be `None`")  # noqa: E501

        self._api_standard = api_standard

    @property
    def api_short_version(self):
        """Gets the api_short_version of this InlineResponse200ScannedApiVersions.  # noqa: E501


        :return: The api_short_version of this InlineResponse200ScannedApiVersions.  # noqa: E501
        :rtype: str
        """
        return self._api_short_version

    @api_short_version.setter
    def api_short_version(self, api_short_version):
        """Sets the api_short_version of this InlineResponse200ScannedApiVersions.


        :param api_short_version: The api_short_version of this InlineResponse200ScannedApiVersions.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and api_short_version is None:
            raise ValueError("Invalid value for `api_short_version`, must not be `None`")  # noqa: E501

        self._api_short_version = api_short_version

    @property
    def api_version(self):
        """Gets the api_version of this InlineResponse200ScannedApiVersions.  # noqa: E501


        :return: The api_version of this InlineResponse200ScannedApiVersions.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this InlineResponse200ScannedApiVersions.


        :param api_version: The api_version of this InlineResponse200ScannedApiVersions.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and api_version is None:
            raise ValueError("Invalid value for `api_version`, must not be `None`")  # noqa: E501

        self._api_version = api_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200ScannedApiVersions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200ScannedApiVersions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse200ScannedApiVersions):
            return True

        return self.to_dict() != other.to_dict()
