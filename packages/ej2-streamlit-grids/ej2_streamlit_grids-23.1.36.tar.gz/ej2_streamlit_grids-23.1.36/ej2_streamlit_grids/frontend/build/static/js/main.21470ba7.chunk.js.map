{"version":3,"sources":["ej2-grid.tsx","index.tsx"],"names":["EJ2Grid","_StreamlitComponentBa","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","gridInstance","renderColumns","data","headerText","clipMode","format","textAlign","width","isPrimaryKey","columns","key","columnDirective","args","params","_i","_Object$keys","Object","keys","length","column","undefined","_step","_iterator","_createForOfIteratorHelper","s","n","done","directive","value","field","err","e","f","push","React","createElement","ColumnDirective","toolbarClick","_this$gridInstance","_this$gridInstance2","_this$gridInstance3","item","text","pdfExport","excelExport","csvExport","render","totalColumns","licenseKey","console","log","registerLicense","Fragment","rel","href","theme","GridComponent","ref","grid","dataSource","toolbar","toolbarItems","bind","_assertThisInitialized","allowExcelExport","allowKeyboard","allowMultiSorting","allowPdfExport","allowReordering","allowRowDragAndDrop","allowSelection","allowTextWrap","enableAdaptiveUI","enableColumnVirtualization","enableHeaderFocus","enableHover","enableImmutableMode","enableInfiniteScrolling","infiniteScrollSettings","enablePersistence","enableStickyHeader","enableVirtualMaskRow","enableVirtualization","showColumnChooser","showColumnMenu","childGrid","editSettings","allowGrouping","groupSettings","allowPaging","pageSettings","allowFiltering","filterSettings","allowSorting","sortSettings","searchSettings","selectionSettings","textWrapSettings","allowResizing","height","rowHeight","rowRenderingMode","selectedRowIndex","printMode","frozenColumns","gridLines","frozenRows","ColumnsDirective","Inject","services","Page","Sort","Filter","Group","Toolbar","InfiniteScroll","ExcelExport","PdfExport","Reorder","Resize","RowDD","Edit","Freeze","Search","DetailRow","ColumnChooser","ColumnMenu","state","refreshed","_createClass","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21470ba7.chunk.js","sourcesContent":["import { StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React, { ReactNode } from \"react\";\nimport { ClipMode, ColumnChooser, ColumnDirective, ColumnMenu, ColumnsDirective, Edit, Filter, Freeze, GridComponent, Group, InfiniteScroll, PdfExport, Reorder, Resize, RowDD, Search, TextAlign, Toolbar } from '@syncfusion/ej2-react-grids';\nimport { Inject, ExcelExport, DetailRow, Page, Sort } from '@syncfusion/ej2-react-grids';\nimport { DateFormatOptions, NumberFormatOptions, registerLicense } from \"@syncfusion/ej2-base\";\nimport { ClickEventArgs } from \"@syncfusion/ej2-navigations\";\n\ninterface State {\n  refreshed: number\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nexport class EJ2Grid extends StreamlitComponentBase<State> {\n\n  constructor(props: any) {\n    super(props);\n    this.state = { refreshed: 1 }\n  }\n\n  private gridInstance: GridComponent | null = null;\n\n  public renderColumns = (data: object[]): any[] => {\n    let columns: any[] = [];\n    let key: number = 0;\n    let columnDirective = this.props.args.params.columnDirective;\n    let headerText: string;\n    let clipMode: ClipMode | undefined;\n    let format: string | NumberFormatOptions | DateFormatOptions | undefined;\n    let textAlign: TextAlign | undefined;\n    let width: string | number | undefined;\n    let isPrimaryKey: boolean | undefined;\n    for (let column of Object.keys(data[0])) {\n      format = undefined;\n      textAlign = undefined;\n      headerText = column;\n      clipMode = undefined;\n      width = undefined;\n      isPrimaryKey = false;\n      if (this.props.args.params.columnDirective) {\n        for (let directive of columnDirective) {\n          if (directive.field === column) {\n            headerText = directive.headerText;\n            clipMode = directive.clipMode;\n            format = directive.format ? directive.format : '';\n            textAlign = directive.textAlign;\n            width = directive.width;\n            isPrimaryKey = directive.isPrimaryKey;\n          }\n        }\n      }\n      columns.push(<ColumnDirective field={column} headerText={headerText} format={format} textAlign={textAlign} width={width} clipMode={clipMode} isPrimaryKey={isPrimaryKey} key={key++} />);\n    }\n    return columns;\n  }\n\n  public toolbarClick = (args: ClickEventArgs): void => {\n    switch (args.item.text) {\n      case 'PDF Export':\n        this.gridInstance?.pdfExport();\n        break;\n      case 'Excel Export':\n        this.gridInstance?.excelExport();\n        break;\n      case 'CSV Export':\n        this.gridInstance?.csvExport();\n        break;\n    }\n  }\n\n  public render = (): ReactNode => {\n\n    const totalColumns: any[] = this.renderColumns(this.props.args.params.data);\n\n    if (this.props.args.params.licenseKey) {\n      console.log('license provided');\n      registerLicense(this.props.args.params.licenseKey);\n    }\n\n\n    return (\n      <>\n        <link rel=\"stylesheet\" href={this.props.args.params.theme} />\n        <GridComponent ref={grid => this.gridInstance = grid}\n          dataSource={this.props.args.params.data}\n          toolbar={this.props.args.params.toolbarItems}\n          toolbarClick={this.toolbarClick.bind(this)}\n          allowExcelExport={this.props.args.params.allowExcelExport}\n          allowKeyboard={this.props.args.params.allowKeyboard}\n          allowMultiSorting={this.props.args.params.allowMultiSorting}\n          allowPdfExport={this.props.args.params.allowPdfExport}\n          allowReordering={this.props.args.params.allowReordering}\n          allowRowDragAndDrop={this.props.args.params.allowRowDragAndDrop}\n          allowSelection={this.props.args.params.allowSelection}\n          allowTextWrap={this.props.args.params.allowTextWrap}\n          enableAdaptiveUI={this.props.args.params.enableAdaptiveUI}\n          enableColumnVirtualization={this.props.args.params.enableColumnVirtualization}\n          enableHeaderFocus={this.props.args.params.enableHeaderFocus}\n          enableHover={this.props.args.params.enableHover}\n          enableImmutableMode={this.props.args.params.enableImmutableMode}\n          enableInfiniteScrolling={this.props.args.params.enableInfiniteScrolling} infiniteScrollSettings={this.props.args.params.infiniteScrollSettings}\n          enablePersistence={this.props.args.params.enablePersistence}\n          enableStickyHeader={this.props.args.params.enableStickyHeader}\n          enableVirtualMaskRow={this.props.args.params.enableVirtualMaskRow}\n          enableVirtualization={this.props.args.params.enableVirtualization}\n          showColumnChooser={this.props.args.params.showColumnChooser}\n          showColumnMenu={this.props.args.params.showColumnMenu}\n          childGrid={this.props.args.params.childGrid}\n          editSettings={this.props.args.params.editSettings}\n          allowGrouping={this.props.args.params.allowGrouping} groupSettings={this.props.args.params.groupSettings}\n          allowPaging={this.props.args.params.allowPaging} pageSettings={this.props.args.params.pageSettings}\n          allowFiltering={this.props.args.params.allowFiltering} filterSettings={this.props.args.params.filterSettings}\n          allowSorting={this.props.args.params.allowSorting} sortSettings={this.props.args.params.sortSettings}\n          searchSettings={this.props.args.params.searchSettings}\n          selectionSettings={this.props.args.params.selectionSettings}\n          textWrapSettings={this.props.args.params.textWrapSettings}\n          allowResizing={this.props.args.params.allowResizing}\n          height={this.props.args.params.height}\n          width={this.props.args.params.width}\n          rowHeight={this.props.args.params.rowHeight}\n          rowRenderingMode={this.props.args.params.rowRenderingMode}\n          selectedRowIndex={this.props.args.params.selectedRowIndex}\n          printMode={this.props.args.params.printMode}\n          frozenColumns={this.props.args.params.frozenColumns}\n          gridLines={this.props.args.params.gridLines}\n          frozenRows={this.props.args.params.frozenRows}>\n          <ColumnsDirective>\n            {totalColumns}\n          </ColumnsDirective>\n          <Inject services={[Page, Sort, Filter, Group, Toolbar, InfiniteScroll, ExcelExport, PdfExport, Reorder, Resize, RowDD, Edit, Freeze, Search, DetailRow, ColumnChooser, ColumnMenu]} />\n        </GridComponent>\n      </>\n    )\n  }\n\n}\nexport default withStreamlitConnection(EJ2Grid)\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport EJ2Grid from './ej2-grid';\n\nReactDOM.render(\n  <React.StrictMode>\n    <EJ2Grid />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}