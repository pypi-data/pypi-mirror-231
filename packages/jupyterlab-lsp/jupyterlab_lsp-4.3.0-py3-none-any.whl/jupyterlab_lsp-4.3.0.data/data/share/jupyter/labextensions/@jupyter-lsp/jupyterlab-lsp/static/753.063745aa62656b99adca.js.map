{"version":3,"file":"753.063745aa62656b99adca.js?v=063745aa62656b99adca","mappings":"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","sources":["webpack://@jupyter-lsp/jupyterlab-lsp/../completion-theme/style/index.css","webpack://@jupyter-lsp/jupyterlab-lsp/../completion-theme/style/index.css?1059","webpack://@jupyter-lsp/jupyterlab-lsp/../completion-theme/src/types.ts","webpack://@jupyter-lsp/jupyterlab-lsp/../completion-theme/src/about.tsx","webpack://@jupyter-lsp/jupyterlab-lsp/../completion-theme/src/index.ts"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".lsp-completer-themes .lsp-licence {\\n  display: inline;\\n}\\n\\n.lsp-completer-themes ul {\\n  list-style: none;\\n  padding-left: 10px;\\n}\\n\\n.lsp-completer-theme-icons {\\n  margin-left: 10px;\\n}\\n\\n.lsp-completer-icon-row {\\n  width: 50%;\\n  display: flex;\\n  justify-content: space-between;\\n}\\n\\n/* a workaround for scrollbars being always on in the completer documentation panel, see\\n https://github.com/jupyter-lsp/jupyterlab-lsp/pull/322#issuecomment-682724175\\n */\\n.lsp-completer .jp-Completer-docpanel {\\n  overflow: auto;\\n}\\n\\n.lsp-completer.jp-Completer {\\n  --lsp-completer-max-label-width: 350px;\\n  --lsp-completer-max-detail-width: 200px;\\n}\\n\\n.lsp-completer .jp-Completer-match {\\n  max-width: var(--lsp-completer-max-label-width);\\n  overflow-x: hidden;\\n  white-space: nowrap;\\n  display: block;\\n  text-overflow: ellipsis;\\n}\\n\\n.lsp-completer .jp-mod-active .jp-Completer-match {\\n  text-overflow: clip;\\n}\\n\\n.lsp-completer-placeholder:after {\\n  content: 'Loading...';\\n  color: #7f7f7f;\\n}\\n\\n/* a workaround for code being larger font size than text in markdown-rendered panel */\\n.lsp-completer .jp-Completer-docpanel pre code {\\n  font-size: 90%;\\n}\\n\\nbody[data-lsp-completer-layout='detail-below'] .jp-Completer-item {\\n  --lsp-completer-label-height: 24px;\\n  --lsp-completer-detail-height: 20px;\\n  --lsp-completer-icon-width: 16px;\\n  height: var(--lsp-completer-label-height);\\n  display: grid;\\n  grid-template-areas:\\n    'icon label'\\n    'detail detail';\\n  grid-template-columns: min-content 1fr;\\n}\\n\\nbody[data-lsp-completer-layout='detail-below']\\n  .jp-Completer-item.jp-mod-active {\\n  height: calc(\\n    var(--lsp-completer-detail-height) + var(--lsp-completer-label-height)\\n  );\\n}\\n\\nbody[data-lsp-completer-layout='detail-below'] .jp-Completer-icon {\\n  grid-area: icon;\\n  width: var(--lsp-completer-icon-width);\\n}\\n\\nbody[data-lsp-completer-layout='detail-below'] .jp-Completer-match {\\n  grid-area: label;\\n  overflow: hidden;\\n  height: var(--lsp-completer-label-height);\\n}\\n\\n.lsp-completer .jp-Completer-item .jp-Completer-typeExtended {\\n  max-width: var(--lsp-completer-max-detail-width);\\n  min-height: 50px;\\n  overflow-x: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n}\\n\\n.lsp-completer .jp-mod-active .jp-Completer-typeExtended {\\n  text-overflow: clip;\\n}\\n\\n.lsp-completer mark.lsp-elide:first-child {\\n  display: inline-block;\\n  overflow-x: clip;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n  direction: rtl;\\n  /* stretch to as much space as possible */\\n  flex-shrink: 1;\\n  /* always reserve small space to fit the ellipsis */\\n  min-width: 20px;\\n}\\n\\n.lsp-completer .lsp-elide-wrapper {\\n  display: flex;\\n}\\n\\nbody[data-lsp-completer-layout='detail-below'] .jp-Completer-typeExtended {\\n  grid-area: detail;\\n  text-align: left;\\n  padding-left: calc(var(--lsp-completer-icon-width) + 8px);\\n  height: var(--lsp-completer-detail-height);\\n  line-height: var(--lsp-completer-detail-height);\\n  display: none;\\n  position: relative;\\n  top: -2px;\\n  overflow: hidden;\\n  max-width: calc(\\n    var(--lsp-completer-max-label-width) + var(--lsp-completer-max-detail-width)\\n  );\\n}\\n\\nbody[data-lsp-completer-layout='detail-below'] .jp-Completer-match {\\n  overflow: hidden;\\n  max-width: calc(\\n    var(--lsp-completer-max-label-width) + var(--lsp-completer-max-detail-width)\\n  );\\n}\\n\\nbody[data-lsp-completer-layout='detail-below']\\n  .jp-Completer-item.jp-mod-active\\n  .jp-Completer-typeExtended {\\n  display: block;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./../completion-theme/style/index.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,eAAe;AACjB;;AAEA;EACE,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,UAAU;EACV,aAAa;EACb,8BAA8B;AAChC;;AAEA;;EAEE;AACF;EACE,cAAc;AAChB;;AAEA;EACE,sCAAsC;EACtC,uCAAuC;AACzC;;AAEA;EACE,+CAA+C;EAC/C,kBAAkB;EAClB,mBAAmB;EACnB,cAAc;EACd,uBAAuB;AACzB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,qBAAqB;EACrB,cAAc;AAChB;;AAEA,sFAAsF;AACtF;EACE,cAAc;AAChB;;AAEA;EACE,kCAAkC;EAClC,mCAAmC;EACnC,gCAAgC;EAChC,yCAAyC;EACzC,aAAa;EACb;;mBAEiB;EACjB,sCAAsC;AACxC;;AAEA;;EAEE;;GAEC;AACH;;AAEA;EACE,eAAe;EACf,sCAAsC;AACxC;;AAEA;EACE,gBAAgB;EAChB,gBAAgB;EAChB,yCAAyC;AAC3C;;AAEA;EACE,gDAAgD;EAChD,gBAAgB;EAChB,kBAAkB;EAClB,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,qBAAqB;EACrB,gBAAgB;EAChB,uBAAuB;EACvB,mBAAmB;EACnB,cAAc;EACd,yCAAyC;EACzC,cAAc;EACd,mDAAmD;EACnD,eAAe;AACjB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,iBAAiB;EACjB,gBAAgB;EAChB,yDAAyD;EACzD,0CAA0C;EAC1C,+CAA+C;EAC/C,aAAa;EACb,kBAAkB;EAClB,SAAS;EACT,gBAAgB;EAChB;;GAEC;AACH;;AAEA;EACE,gBAAgB;EAChB;;GAEC;AACH;;AAEA;;;EAGE,cAAc;AAChB\",\"sourcesContent\":[\".lsp-completer-themes .lsp-licence {\\n  display: inline;\\n}\\n\\n.lsp-completer-themes ul {\\n  list-style: none;\\n  padding-left: 10px;\\n}\\n\\n.lsp-completer-theme-icons {\\n  margin-left: 10px;\\n}\\n\\n.lsp-completer-icon-row {\\n  width: 50%;\\n  display: flex;\\n  justify-content: space-between;\\n}\\n\\n/* a workaround for scrollbars being always on in the completer documentation panel, see\\n https://github.com/jupyter-lsp/jupyterlab-lsp/pull/322#issuecomment-682724175\\n */\\n.lsp-completer .jp-Completer-docpanel {\\n  overflow: auto;\\n}\\n\\n.lsp-completer.jp-Completer {\\n  --lsp-completer-max-label-width: 350px;\\n  --lsp-completer-max-detail-width: 200px;\\n}\\n\\n.lsp-completer .jp-Completer-match {\\n  max-width: var(--lsp-completer-max-label-width);\\n  overflow-x: hidden;\\n  white-space: nowrap;\\n  display: block;\\n  text-overflow: ellipsis;\\n}\\n\\n.lsp-completer .jp-mod-active .jp-Completer-match {\\n  text-overflow: clip;\\n}\\n\\n.lsp-completer-placeholder:after {\\n  content: 'Loading...';\\n  color: #7f7f7f;\\n}\\n\\n/* a workaround for code being larger font size than text in markdown-rendered panel */\\n.lsp-completer .jp-Completer-docpanel pre code {\\n  font-size: 90%;\\n}\\n\\nbody[data-lsp-completer-layout='detail-below'] .jp-Completer-item {\\n  --lsp-completer-label-height: 24px;\\n  --lsp-completer-detail-height: 20px;\\n  --lsp-completer-icon-width: 16px;\\n  height: var(--lsp-completer-label-height);\\n  display: grid;\\n  grid-template-areas:\\n    'icon label'\\n    'detail detail';\\n  grid-template-columns: min-content 1fr;\\n}\\n\\nbody[data-lsp-completer-layout='detail-below']\\n  .jp-Completer-item.jp-mod-active {\\n  height: calc(\\n    var(--lsp-completer-detail-height) + var(--lsp-completer-label-height)\\n  );\\n}\\n\\nbody[data-lsp-completer-layout='detail-below'] .jp-Completer-icon {\\n  grid-area: icon;\\n  width: var(--lsp-completer-icon-width);\\n}\\n\\nbody[data-lsp-completer-layout='detail-below'] .jp-Completer-match {\\n  grid-area: label;\\n  overflow: hidden;\\n  height: var(--lsp-completer-label-height);\\n}\\n\\n.lsp-completer .jp-Completer-item .jp-Completer-typeExtended {\\n  max-width: var(--lsp-completer-max-detail-width);\\n  min-height: 50px;\\n  overflow-x: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n}\\n\\n.lsp-completer .jp-mod-active .jp-Completer-typeExtended {\\n  text-overflow: clip;\\n}\\n\\n.lsp-completer mark.lsp-elide:first-child {\\n  display: inline-block;\\n  overflow-x: clip;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n  direction: rtl;\\n  /* stretch to as much space as possible */\\n  flex-shrink: 1;\\n  /* always reserve small space to fit the ellipsis */\\n  min-width: 20px;\\n}\\n\\n.lsp-completer .lsp-elide-wrapper {\\n  display: flex;\\n}\\n\\nbody[data-lsp-completer-layout='detail-below'] .jp-Completer-typeExtended {\\n  grid-area: detail;\\n  text-align: left;\\n  padding-left: calc(var(--lsp-completer-icon-width) + 8px);\\n  height: var(--lsp-completer-detail-height);\\n  line-height: var(--lsp-completer-detail-height);\\n  display: none;\\n  position: relative;\\n  top: -2px;\\n  overflow: hidden;\\n  max-width: calc(\\n    var(--lsp-completer-max-label-width) + var(--lsp-completer-max-detail-width)\\n  );\\n}\\n\\nbody[data-lsp-completer-layout='detail-below'] .jp-Completer-match {\\n  overflow: hidden;\\n  max-width: calc(\\n    var(--lsp-completer-max-label-width) + var(--lsp-completer-max-detail-width)\\n  );\\n}\\n\\nbody[data-lsp-completer-layout='detail-below']\\n  .jp-Completer-item.jp-mod-active\\n  .jp-Completer-typeExtended {\\n  display: block;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!./index.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import { LabIcon } from '@jupyterlab/ui-components';\nimport { Token } from '@lumino/coreutils';\n\nexport const COMPLETER_THEME_PREFIX = 'lsp-completer-theme-';\n\n// TODO, once features are extracted to standalone packages,\n//  import the CompletionItemKindStrings from @feature-completer\nenum CompletionItemKind {\n  Text = 1,\n  Method = 2,\n  Function = 3,\n  Constructor = 4,\n  Field = 5,\n  Variable = 6,\n  Class = 7,\n  Interface = 8,\n  Module = 9,\n  Property = 10,\n  Unit = 11,\n  Value = 12,\n  Enum = 13,\n  Keyword = 14,\n  Snippet = 15,\n  Color = 16,\n  File = 17,\n  Reference = 18,\n  Folder = 19,\n  EnumMember = 20,\n  Constant = 21,\n  Struct = 22,\n  Event = 23,\n  Operator = 24,\n  TypeParameter = 25\n}\n\nexport type CompletionItemKindStrings = keyof typeof CompletionItemKind;\n\nexport const PLUGIN_ID = '@jupyter-lsp/completion-manager';\n\nexport type SvgString = string;\n\ntype requiredIcons = {\n  [key in CompletionItemKindStrings]: SvgString;\n};\n\nexport const KernelKind = 'Kernel';\n\nexport interface ICompletionIconSet extends requiredIcons {\n  [KernelKind]?: SvgString;\n}\n\nexport interface ILicenseInfo {\n  /**\n   * Licence name.\n   */\n  name: string;\n  /**\n   * Abbreviation of the licence name;\n   */\n  abbreviation: string;\n  /**\n   * The copyright holder/owner name.\n   */\n  licensor: string;\n  /**\n   * Link to the full licence text.\n   */\n  link: string;\n}\n\nexport interface ICompletionTheme {\n  /**\n   * Theme identifier (which can be part of a valid HTML class name).\n   */\n  id: string;\n  /**\n   * Name of the theme.\n   */\n  name: string;\n  /**\n   * Provides object mapping completion item kind name to a string with an SVG icon,\n   * as well as icons options and metadata.\n   */\n  icons: {\n    /**\n     * Short name of the license of the icons included.\n     */\n    licence: ILicenseInfo;\n    /**\n     * The version to be used in the light mode.\n     */\n    light: ICompletionIconSet;\n    /**\n     * The version to be used in the dark mode.\n     */\n    dark?: ICompletionIconSet;\n    /**\n     * Icon properties to be set on each of the icons.\n     * NOTE: setting className here will not work, as\n     * it would be overwritten in the completer.\n     * In order to style the icons use:\n     * `.lsp-completer-theme-{id} .jp-Completer-icon svg`\n     * instead, where {id} is the identifier of your theme.\n     */\n    options?: LabIcon.IProps;\n  };\n}\n\nexport interface ILSPCompletionThemeManager {\n  get_icon(type: string): LabIcon.ILabIcon | null;\n\n  set_theme(theme_id: string | null): void;\n\n  register_theme(theme: ICompletionTheme): void;\n\n  get_iconset(\n    theme: ICompletionTheme\n  ): Map<keyof ICompletionIconSet, LabIcon.ILabIcon>;\n\n  set_icons_overrides(\n    map: Record<string, CompletionItemKindStrings | 'Kernel'>\n  ): void;\n}\n\nexport const ILSPCompletionThemeManager = new Token<ILSPCompletionThemeManager>(\n  PLUGIN_ID + ':ILSPCompletionThemeManager'\n);\n","import { TranslationBundle } from '@jupyterlab/translation';\nimport { LabIcon } from '@jupyterlab/ui-components';\nimport React, { ReactElement } from 'react';\n\nimport {\n  COMPLETER_THEME_PREFIX,\n  ICompletionTheme,\n  ILicenseInfo\n} from './types';\n\nfunction render_licence(licence: ILicenseInfo): ReactElement {\n  return (\n    <div className={'lsp-licence'}>\n      <a href={licence.link} title={licence.name}>\n        {licence.abbreviation}\n      </a>{' '}\n      {licence.licensor}\n    </div>\n  );\n}\n\ntype IconSetGetter = (theme: ICompletionTheme) => Map<string, LabIcon>;\n\nfunction render_theme(\n  trans: TranslationBundle,\n  theme: ICompletionTheme,\n  get_set: IconSetGetter,\n  is_current: boolean\n): ReactElement {\n  let icons: ReactElement[] = [];\n  for (let [name, icon] of get_set(theme)) {\n    icons.push(\n      <div className={'lsp-completer-icon-row'}>\n        <div>{name}</div>\n        <div className={'jp-Completer-icon'}>\n          <icon.react />\n        </div>\n      </div>\n    );\n  }\n  return (\n    <div\n      className={'lsp-completer-themes ' + COMPLETER_THEME_PREFIX + theme.id}\n    >\n      <h4>\n        {theme.name}\n        {is_current ? trans.__(' (current)') : ''}\n      </h4>\n      <ul>\n        <li key={'id'}>\n          ID: <code>{theme.id}</code>\n        </li>\n        <li key={'licence'}>\n          {trans.__('Licence: ')}\n          {render_licence(theme.icons.licence)}\n        </li>\n        <li key={'dark'}>\n          {typeof theme.icons.dark === 'undefined'\n            ? ''\n            : trans.__('Includes dedicated dark mode icons set')}\n        </li>\n      </ul>\n      <div className={'lsp-completer-theme-icons'}>{icons}</div>\n    </div>\n  );\n}\n\nexport function render_themes_list(\n  trans: TranslationBundle,\n  props: {\n    themes: ICompletionTheme[];\n    current: ICompletionTheme | null;\n    get_set: IconSetGetter;\n  }\n): React.ReactElement {\n  let themes = props.themes.map(theme =>\n    render_theme(trans, theme, props.get_set, theme == props.current)\n  );\n  return <div>{themes}</div>;\n}\n","import '../style/index.css';\nimport { JupyterFrontEndPlugin } from '@jupyterlab/application';\nimport {\n  Dialog,\n  ICommandPalette,\n  IThemeManager,\n  showDialog\n} from '@jupyterlab/apputils';\nimport { ITranslator, TranslationBundle } from '@jupyterlab/translation';\nimport { LabIcon, kernelIcon } from '@jupyterlab/ui-components';\n\nimport { render_themes_list } from './about';\nimport {\n  COMPLETER_THEME_PREFIX,\n  CompletionItemKindStrings,\n  ICompletionIconSet,\n  ICompletionTheme,\n  ILSPCompletionThemeManager,\n  KernelKind,\n  PLUGIN_ID\n} from './types';\nexport * from './types';\n\nexport class CompletionThemeManager implements ILSPCompletionThemeManager {\n  protected current_icons: Map<string, LabIcon>;\n  protected themes: Map<string, ICompletionTheme>;\n  private current_theme_id: string | null = null;\n  private icons_cache: Map<string, LabIcon>;\n  private icon_overrides: Map<string, CompletionItemKindStrings>;\n  private trans: TranslationBundle;\n\n  constructor(protected themeManager: IThemeManager, trans: TranslationBundle) {\n    this.themes = new Map();\n    this.icons_cache = new Map();\n    this.icon_overrides = new Map();\n    themeManager.themeChanged.connect(this.update_icons_set, this);\n    this.trans = trans;\n  }\n\n  protected is_theme_light() {\n    const current = this.themeManager.theme;\n    if (!current) {\n      // assume true by default\n      return true;\n    }\n    return this.themeManager.isLight(current);\n  }\n\n  get_iconset(theme: ICompletionTheme): Map<keyof ICompletionIconSet, LabIcon> {\n    const icons_sets = theme.icons;\n    const dark_mode_and_dark_supported =\n      !this.is_theme_light() && typeof icons_sets.dark !== 'undefined';\n    const set: ICompletionIconSet = dark_mode_and_dark_supported\n      ? icons_sets.dark!\n      : icons_sets.light;\n    const icons: Map<keyof ICompletionIconSet, LabIcon> = new Map();\n    let options = this.current_theme?.icons?.options || {};\n    const mode = this.is_theme_light() ? 'light' : 'dark';\n    for (let [completion_kind, svg] of Object.entries(set)) {\n      let name =\n        'lsp:' + theme.id + '-' + completion_kind.toLowerCase() + '-' + mode;\n      let icon: LabIcon;\n      if (this.icons_cache.has(name)) {\n        icon = this.icons_cache.get(name)!;\n      } else {\n        icon = new LabIcon({\n          name: name,\n          svgstr: svg\n        });\n        this.icons_cache.set(name, icon);\n      }\n      icons.set(\n        completion_kind as keyof ICompletionIconSet,\n        icon.bindprops(options)\n      );\n    }\n    return icons;\n  }\n\n  protected update_icons_set() {\n    if (this.current_theme === null) {\n      return;\n    }\n    this.current_icons = this.get_iconset(this.current_theme);\n  }\n\n  get_icon(type: string): LabIcon | null {\n    if (this.current_theme === null) {\n      return null;\n    }\n    if (type) {\n      if (this.icon_overrides.has(type.toLowerCase())) {\n        type = this.icon_overrides.get(type.toLowerCase())!;\n      }\n      type =\n        type.substring(0, 1).toUpperCase() + type.substring(1).toLowerCase();\n    }\n    if (this.current_icons.has(type)) {\n      return this.current_icons.get(type)!;\n    }\n\n    if (type === KernelKind) {\n      return kernelIcon;\n    }\n    return null;\n  }\n\n  protected get current_theme_class() {\n    return COMPLETER_THEME_PREFIX + this.current_theme_id;\n  }\n\n  set_theme(id: string | null) {\n    if (this.current_theme_id) {\n      document.body.classList.remove(this.current_theme_class);\n    }\n    if (id && !this.themes.has(id)) {\n      console.warn(\n        `[LSP][Completer] Icons theme ${id} cannot be set yet (it may be loaded later).`\n      );\n    }\n    this.current_theme_id = id;\n    if (id !== null) {\n      document.body.classList.add(this.current_theme_class);\n    }\n    this.update_icons_set();\n  }\n\n  protected get current_theme(): ICompletionTheme | null {\n    if (this.current_theme_id && this.themes.has(this.current_theme_id)) {\n      return this.themes.get(this.current_theme_id)!;\n    }\n    return null;\n  }\n\n  register_theme(theme: ICompletionTheme) {\n    if (this.themes.has(theme.id)) {\n      console.warn(\n        'Theme with name',\n        theme.id,\n        'was already registered, overwriting.'\n      );\n    }\n    this.themes.set(theme.id, theme);\n    this.update_icons_set();\n  }\n\n  /**\n   * Display the registered themes in a dialog,\n   * both for the user to know what they can choose from,\n   * and for the developer to quickly check how the icons\n   * from each theme would look rendered.\n   */\n  display_themes() {\n    showDialog({\n      title: this.trans.__('LSP Completer Themes'),\n      body: render_themes_list(this.trans, {\n        themes: [...this.themes.values()],\n        current: this.current_theme,\n        get_set: this.get_iconset.bind(this)\n      }),\n      buttons: [Dialog.okButton({ label: this.trans.__('OK') })]\n    }).catch(console.warn);\n  }\n\n  set_icons_overrides(\n    iconOverrides: Record<string, CompletionItemKindStrings>\n  ) {\n    this.icon_overrides = new Map(\n      Object.keys(iconOverrides).map(kernelType => [\n        kernelType.toLowerCase(),\n        iconOverrides[kernelType]\n      ])\n    );\n  }\n}\n\nexport const COMPLETION_THEME_MANAGER: JupyterFrontEndPlugin<ILSPCompletionThemeManager> =\n  {\n    id: PLUGIN_ID,\n    requires: [IThemeManager, ICommandPalette, ITranslator],\n    activate: (\n      app,\n      themeManager: IThemeManager,\n      commandPalette: ICommandPalette,\n      translator: ITranslator\n    ) => {\n      const trans = translator.load('jupyterlab_lsp');\n      let manager = new CompletionThemeManager(themeManager, trans);\n      const command_id = 'lsp:completer-about-themes';\n      app.commands.addCommand(command_id, {\n        label: trans.__('Display the completer themes'),\n        execute: () => {\n          manager.display_themes();\n        }\n      });\n      commandPalette.addItem({\n        category: trans.__('Language server protocol'),\n        command: command_id\n      });\n      return manager;\n    },\n    provides: ILSPCompletionThemeManager,\n    autoStart: true\n  };\n"],"names":["___CSS_LOADER_EXPORT___","push","module","id","options","COMPLETER_THEME_PREFIX","CompletionItemKind","PLUGIN_ID","KernelKind","ILSPCompletionThemeManager","Token","render_themes_list","trans","props","themes","map","theme","get_set","is_current","icons","name","icon","className","react","__","key","licence","href","link","title","abbreviation","licensor","dark","render_theme","current","CompletionThemeManager","constructor","themeManager","current_theme_id","this","Map","icons_cache","icon_overrides","themeChanged","connect","update_icons_set","is_theme_light","isLight","get_iconset","icons_sets","set","light","current_theme","mode","completion_kind","svg","Object","entries","toLowerCase","has","get","LabIcon","svgstr","bindprops","current_icons","get_icon","type","substring","toUpperCase","kernelIcon","current_theme_class","set_theme","document","body","classList","remove","console","warn","add","register_theme","display_themes","showDialog","values","bind","buttons","Dialog","label","catch","set_icons_overrides","iconOverrides","keys","kernelType","COMPLETION_THEME_MANAGER","requires","IThemeManager","ICommandPalette","ITranslator","activate","app","commandPalette","translator","load","manager","command_id","commands","addCommand","execute","addItem","category","command","provides","autoStart"],"sourceRoot":""}