{"version":3,"file":"909.b3cba4b3b5d012a6597e.js?v=b3cba4b3b5d012a6597e","mappings":"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","sources":["webpack://@jupyter-lsp/jupyterlab-lsp/../code-jumpers/src/history.ts","webpack://@jupyter-lsp/jupyterlab-lsp/../code-jumpers/src/jumpers/jumper.ts","webpack://@jupyter-lsp/jupyterlab-lsp/../code-jumpers/src/jumpers/fileeditor.ts","webpack://@jupyter-lsp/jupyterlab-lsp/../code-jumpers/src/jumpers/notebook.ts","webpack://@jupyter-lsp/jupyterlab-lsp/../code-jumpers/src/notebook_private.ts"],"sourcesContent":["import { IModelDB, IObservableUndoableList } from '@jupyterlab/observables';\nimport { JSONValue } from '@lumino/coreutils';\n\nimport { IGlobalPosition } from './positions';\n\nconst DB_ENTRY = 'jumpy_history';\n\nexport class JumpHistory {\n  jump_history: IObservableUndoableList<JSONValue>;\n  model_db: IModelDB;\n\n  constructor(model_db: IModelDB) {\n    this.model_db = model_db;\n  }\n\n  ensure_history_is_ready() {\n    if (this.jump_history === undefined) {\n      if (this.model_db.has(DB_ENTRY)) {\n        this.jump_history = this.model_db.get(\n          DB_ENTRY\n        ) as IObservableUndoableList<JSONValue>;\n      } else {\n        this.jump_history = this.model_db.createList(DB_ENTRY);\n      }\n    }\n  }\n\n  store(position: IGlobalPosition) {\n    this.ensure_history_is_ready();\n    this.jump_history.push(JSON.stringify(position));\n  }\n\n  recollect(): IGlobalPosition | undefined {\n    this.ensure_history_is_ready();\n    if (this.jump_history.length === 0) {\n      return;\n    }\n    let last_position = this.jump_history.get(this.jump_history.length - 1);\n    // being lazy here - undo addition instead of removal ;)\n    this.jump_history.undo();\n\n    return JSON.parse(last_position as string) as IGlobalPosition;\n  }\n}\n","import { Dialog, showDialog } from '@jupyterlab/apputils';\nimport { CodeEditor } from '@jupyterlab/codeeditor';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { IDocumentWidget } from '@jupyterlab/docregistry';\nimport { FileEditor } from '@jupyterlab/fileeditor';\n\nimport { JumpHistory } from '../history';\nimport { IGlobalPosition, ILocalPosition } from '../positions';\n\nimport IEditor = CodeEditor.IEditor;\n\nconst movement_keys = [\n  'ArrowRight',\n  'ArrowLeft',\n  'ArrowUp',\n  'ArrowDown',\n  'Home',\n  'End',\n  'PageUp',\n  'PageDown'\n];\n\nconst modifiers = ['Alt', 'AltGraph', 'Control', 'Shift'];\n\nconst system_keys = [\n  'F1',\n  'F2',\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12',\n  'ContextMenu'\n];\n\nexport abstract class CodeJumper {\n  document_manager: IDocumentManager;\n  widget: IDocumentWidget;\n\n  history: JumpHistory;\n\n  abstract get editors(): ReadonlyArray<CodeEditor.IEditor>;\n\n  private go_to_position(\n    document_widget: IDocumentWidget,\n    jumper: string,\n    column: number,\n    line_number: number,\n    input_number = 0\n  ) {\n    let document_jumper: CodeJumper;\n    let position = { line: line_number, column: column };\n    let document_jumper_type = jumpers.get(jumper);\n\n    document_jumper = new document_jumper_type(\n      document_widget,\n      this.document_manager\n    );\n    let jump_position = document_jumper.getJumpPosition(position, input_number);\n    document_jumper.jump(jump_position);\n  }\n\n  private _global_jump(position: IGlobalPosition) {\n    let document_widget = this.document_manager.openOrReveal(\n      position.contents_path\n    );\n    if (!document_widget) {\n      console.log('Widget failed to open for jump');\n      return;\n    }\n    let is_symlink = position.is_symlink;\n\n    document_widget.revealed\n      .then(() => {\n        this.go_to_position(\n          document_widget!,\n          position.contents_path.endsWith('.ipynb') ? 'notebook' : 'fileeditor',\n          position.column,\n          position.line,\n          position.editor_index\n        );\n\n        // protect external files from accidental edition\n        if (is_symlink) {\n          this.protectFromAccidentalEditing(document_widget!);\n        }\n      })\n      .catch(console.warn);\n  }\n\n  private protectFromAccidentalEditing(document_widget: IDocumentWidget) {\n    let editor_widget = document_widget as IDocumentWidget<FileEditor>;\n    // We used to adjust `editor_widget.title.label` here but an upstream\n    // bug (https://github.com/jupyterlab/jupyterlab/issues/10856) prevents\n    // us from doing so anymore.\n    let editor = editor_widget.content.editor;\n    let disposable = editor.addKeydownHandler(\n      (editor: IEditor, event: KeyboardEvent) => {\n        // allow to move around, select text and use modifiers & browser keys freely\n        if (\n          movement_keys.indexOf(event.key) !== -1 ||\n          modifiers.indexOf(event.key) !== -1 ||\n          system_keys.indexOf(event.key) !== -1\n        ) {\n          return false;\n        }\n\n        // allow to copy text (here assuming that, as on majority of OSs, copy is associated with ctrl+c)\n        // this is not foolproof, but should work in majority of sane settings (unfortunately, not in vim)\n        if (event.key === 'c' && event.ctrlKey) {\n          return false;\n        }\n\n        let dialog_promise = showDialog({\n          title: 'Edit external file?',\n          body:\n            'This file is located outside of the root of the JupyterLab start directory. ' +\n            'do you really wish to edit it?',\n          buttons: [\n            Dialog.cancelButton({ label: 'Cancel' }),\n            Dialog.warnButton({ label: 'Edit anyway' })\n          ]\n        });\n\n        dialog_promise\n          .then(result => {\n            if (result.button.accept) {\n              disposable.dispose();\n            }\n          })\n          .catch(console.warn);\n\n        // prevent default\n        return true;\n      }\n    );\n  }\n\n  protected abstract jump(position: ILocalPosition): void;\n\n  global_jump_back() {\n    let previous_position = this.history.recollect();\n    if (previous_position) {\n      this._global_jump(previous_position);\n    }\n  }\n\n  global_jump(position: IGlobalPosition) {\n    const current_position = this.getCurrentPosition();\n    this.history.store(current_position);\n    this._global_jump(position);\n  }\n\n  abstract getCurrentPosition(): IGlobalPosition;\n\n  abstract getOffset(position: CodeEditor.IPosition, cell?: number): number;\n\n  abstract getJumpPosition(\n    position: CodeEditor.IPosition,\n    input_number?: number\n  ): ILocalPosition;\n}\n\nexport let jumpers: Map<string, any> = new Map();\n","import { CodeEditor } from '@jupyterlab/codeeditor';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { IDocumentWidget } from '@jupyterlab/docregistry';\nimport { FileEditor } from '@jupyterlab/fileeditor';\n\nimport { JumpHistory } from '../history';\nimport { IGlobalPosition, ILocalPosition } from '../positions';\n\nimport { CodeJumper, jumpers } from './jumper';\n\nexport class FileEditorJumper extends CodeJumper {\n  editor: FileEditor;\n  widget: IDocumentWidget;\n\n  constructor(\n    editor_widget: IDocumentWidget<FileEditor>,\n    document_manager: IDocumentManager\n  ) {\n    super();\n    this.widget = editor_widget;\n    this.document_manager = document_manager;\n    this.editor = editor_widget.content;\n    this.history = new JumpHistory(this.editor.model.modelDB);\n  }\n\n  get path() {\n    return this.widget.context.path;\n  }\n\n  get editors() {\n    return [this.editor.editor];\n  }\n\n  jump(jump_position: ILocalPosition) {\n    let { token } = jump_position;\n\n    // TODO: this is common\n    // place cursor in the line with the definition\n    let position = this.editor.editor.getPositionAt(token.offset)!;\n    this.editor.editor.setSelection({ start: position, end: position });\n    this.editor.editor.focus();\n  }\n\n  getOffset(position: CodeEditor.IPosition) {\n    return this.editor.editor.getOffsetAt(position);\n  }\n\n  getJumpPosition(position: CodeEditor.IPosition): ILocalPosition {\n    return {\n      token: {\n        offset: this.getOffset(position),\n        value: ''\n      },\n      index: 0\n    };\n  }\n\n  getCurrentPosition(): IGlobalPosition {\n    let position = this.editor.editor.getCursorPosition();\n    return {\n      editor_index: 0,\n      line: position.line,\n      column: position.column,\n      contents_path: this.editor.context.path,\n      is_symlink: false\n    };\n  }\n}\n\njumpers.set('fileeditor', FileEditorJumper);\n","import { CodeEditor } from '@jupyterlab/codeeditor';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { Notebook, NotebookPanel } from '@jupyterlab/notebook';\n\nimport { JumpHistory } from '../history';\nimport { _ensureFocus } from '../notebook_private';\nimport { IGlobalPosition, ILocalPosition } from '../positions';\n\nimport { CodeJumper, jumpers } from './jumper';\n\nexport class NotebookJumper extends CodeJumper {\n  notebook: Notebook;\n  widget: NotebookPanel;\n\n  constructor(\n    notebook_widget: NotebookPanel,\n    document_manager: IDocumentManager\n  ) {\n    super();\n    this.widget = notebook_widget;\n    this.notebook = notebook_widget.content;\n    this.history = new JumpHistory(this.notebook.model!.modelDB);\n    this.document_manager = document_manager;\n  }\n\n  get editors() {\n    return this.notebook.widgets.map(cell => cell.editor);\n  }\n\n  jump(position: ILocalPosition) {\n    let { token, index } = position;\n\n    // Prevents event propagation issues\n    setTimeout(() => {\n      this.notebook.deselectAll();\n      this.notebook.activeCellIndex = index!;\n      _ensureFocus(this.notebook);\n      this.notebook.mode = 'edit';\n\n      // find out offset for the element\n      let activeEditor = this.notebook.activeCell!.editor;\n\n      // place cursor in the line with the definition\n      let position = activeEditor.getPositionAt(token.offset)!;\n      activeEditor.setSelection({ start: position, end: position });\n    }, 0);\n  }\n\n  getOffset(position: CodeEditor.IPosition, cell: number = 0) {\n    return this.editors[cell].getOffsetAt(position);\n  }\n\n  getCurrentPosition(): IGlobalPosition {\n    let position =\n      this.editors[this.notebook.activeCellIndex].getCursorPosition();\n\n    return {\n      editor_index: this.notebook.activeCellIndex,\n      line: position.line,\n      column: position.column,\n      contents_path: this.widget.context.path,\n      is_symlink: false\n    };\n  }\n\n  getJumpPosition(position: CodeEditor.IPosition, input_number: number) {\n    return {\n      token: {\n        offset: this.getOffset(position, input_number),\n        value: ''\n      },\n      index: input_number\n    };\n  }\n}\n\njumpers.set('notebook', NotebookJumper);\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { Notebook } from '@jupyterlab/notebook';\n\n/**\n * Ensure that the notebook has proper focus.\n */\nfunction _ensureFocus(notebook: Notebook, force = false): void {\n  let activeCell = notebook.activeCell;\n  if (notebook.mode === 'edit' && activeCell) {\n    if (!activeCell.editor.hasFocus()) {\n      activeCell.editor.focus();\n    }\n  }\n  if (force && !notebook.node.contains(document.activeElement)) {\n    notebook.node.focus();\n  }\n}\n\nexport { _ensureFocus };\n"],"names":["DB_ENTRY","JumpHistory","constructor","model_db","this","ensure_history_is_ready","undefined","jump_history","has","get","createList","store","position","push","JSON","stringify","recollect","length","last_position","undo","parse","movement_keys","modifiers","system_keys","CodeJumper","go_to_position","document_widget","jumper","column","line_number","input_number","document_jumper","line","jumpers","document_manager","jump_position","getJumpPosition","jump","_global_jump","openOrReveal","contents_path","console","log","is_symlink","revealed","then","endsWith","editor_index","protectFromAccidentalEditing","catch","warn","disposable","content","editor","addKeydownHandler","event","indexOf","key","ctrlKey","showDialog","title","body","buttons","Dialog","label","result","button","accept","dispose","global_jump_back","previous_position","history","global_jump","current_position","getCurrentPosition","Map","FileEditorJumper","editor_widget","super","widget","model","modelDB","path","context","editors","token","getPositionAt","offset","setSelection","start","end","focus","getOffset","getOffsetAt","value","index","getCursorPosition","set","NotebookJumper","notebook_widget","notebook","widgets","map","cell","setTimeout","deselectAll","activeCellIndex","force","activeCell","mode","hasFocus","node","contains","document","activeElement","_ensureFocus","activeEditor"],"sourceRoot":""}