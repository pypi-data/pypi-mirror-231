# coding: utf-8

"""
    Mozart platform API

    API for interacting with the Mozart platform.

    The version of the OpenAPI document: 0.2.0
    Contact: support@bang-olufsen.dk
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator


class ClassicsAdapter(BaseModel):
    """
    ClassicsAdapter
    """

    connection_type: StrictStr = Field(..., alias="connectionType")
    friendly_name: Optional[StrictStr] = Field(None, alias="friendlyName")
    ip_address: Optional[StrictStr] = Field(None, alias="ipAddress")
    serial_number: constr(strict=True) = Field(..., alias="serialNumber")
    __properties = ["connectionType", "friendlyName", "ipAddress", "serialNumber"]

    @validator("connection_type")
    def connection_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ("ip", "usb"):
            raise ValueError("must be one of enum values ('ip', 'usb')")
        return value

    @validator("serial_number")
    def serial_number_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^\d{4,10}$", value):
            raise ValueError(r"must validate the regular expression /^\d{4,10}$/")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClassicsAdapter:
        """Create an instance of ClassicsAdapter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClassicsAdapter:
        """Create an instance of ClassicsAdapter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClassicsAdapter.parse_obj(obj)

        _obj = ClassicsAdapter.parse_obj(
            {
                "connection_type": obj.get("connectionType"),
                "friendly_name": obj.get("friendlyName"),
                "ip_address": obj.get("ipAddress"),
                "serial_number": obj.get("serialNumber"),
            }
        )
        return _obj
