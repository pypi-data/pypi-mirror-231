# coding: utf-8

"""
    Songtradr API

    This is the Songtradr API. Use it to retrieve deep music metadata and trigger processes like auto-tagging.  You can also use the API to manage your account and musicube cloud data.  **Authentication**  1. Reach out to support@songtradr.com to receive a free account or use your login data if you are already signed up.  2. To authenticate, you need to login via the POST /api/v1/user/login endpoint.  3. The endpoint responds with a jwtToken which you can use in all following API requests as a bearer token.  **Rate Limiting**  The current limit is 120 Requests per minute. Reach out to us via support@songtradr.com if you need to request more.  **Getting Started with auto-tagging**  1. If you want to get your own files auto-tagged, use the POST /api/v1/user/file/{name}/initUpload endpoint. It responds with a presigned S3 link where you can upload your file. 2. You can check the processing status of your file via the GET /api/v1/user/file/{name}/filesStatus endpoint. 3. As soon as processing is done, you can request the generated data via the GET /api/v1/user/files endpoint.  **Getting Started with search**  You can either search the released music via the /public/recording endpoints or your own private uploaded music via the /user/file/ endpoints.  1. If you want to search the world's released music, a good starting point is the GET /api/v1/public/recording/search endpoint. Please find the extensive list of parameters that serve as semantic search filters. 2. If you want to search your own previously uploaded music, a good starting point is the GET GET /api/v1/user/files endpoint. It has the same extensive list of parameters that serve as semantic search filters.

    The version of the OpenAPI document: 1.13.4
    Contact: info@songtradr.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from songtradr_api_client_python.models.genre_dto import GenreDTO
from songtradr_api_client_python.models.musical_features_dto import MusicalFeaturesDTO
from songtradr_api_client_python.models.recording_genre_prediction_dto import RecordingGenrePredictionDTO
from songtradr_api_client_python.models.recording_party_dto import RecordingPartyDTO
from songtradr_api_client_python.models.recording_tag_small_dto import RecordingTagSmallDTO
from songtradr_api_client_python.models.title_dto import TitleDTO
from songtradr_api_client_python.models.track_dto import TrackDTO

class RecordingMediumDTO(BaseModel):
    """
    Recording with a mid-sized field set.  # noqa: E501
    """
    isrc: StrictStr = Field(...)
    genres: Optional[conlist(GenreDTO, unique_items=True)] = None
    language_of_performance: Optional[StrictStr] = Field(None, alias="languageOfPerformance")
    release_date: Optional[datetime] = Field(None, alias="releaseDate")
    titles: Optional[conlist(TitleDTO, unique_items=True)] = None
    tracks: Optional[conlist(TrackDTO)] = None
    musical_features: Optional[MusicalFeaturesDTO] = Field(None, alias="musicalFeatures")
    recording_party_entities: Optional[conlist(RecordingPartyDTO, unique_items=True)] = Field(None, alias="recordingPartyEntities")
    tags: Optional[conlist(RecordingTagSmallDTO)] = None
    spotify_id: Optional[StrictStr] = Field(None, alias="spotifyId")
    genre_predictions: Optional[conlist(RecordingGenrePredictionDTO, unique_items=True)] = Field(None, alias="genrePredictions")
    __properties = ["isrc", "genres", "languageOfPerformance", "releaseDate", "titles", "tracks", "musicalFeatures", "recordingPartyEntities", "tags", "spotifyId", "genrePredictions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RecordingMediumDTO:
        """Create an instance of RecordingMediumDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in genres (list)
        _items = []
        if self.genres:
            for _item in self.genres:
                if _item:
                    _items.append(_item.to_dict())
            _dict['genres'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in titles (list)
        _items = []
        if self.titles:
            for _item in self.titles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['titles'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tracks (list)
        _items = []
        if self.tracks:
            for _item in self.tracks:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tracks'] = _items
        # override the default output from pydantic by calling `to_dict()` of musical_features
        if self.musical_features:
            _dict['musicalFeatures'] = self.musical_features.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in recording_party_entities (list)
        _items = []
        if self.recording_party_entities:
            for _item in self.recording_party_entities:
                if _item:
                    _items.append(_item.to_dict())
            _dict['recordingPartyEntities'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item in self.tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in genre_predictions (list)
        _items = []
        if self.genre_predictions:
            for _item in self.genre_predictions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['genrePredictions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RecordingMediumDTO:
        """Create an instance of RecordingMediumDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RecordingMediumDTO.parse_obj(obj)

        _obj = RecordingMediumDTO.parse_obj({
            "isrc": obj.get("isrc"),
            "genres": [GenreDTO.from_dict(_item) for _item in obj.get("genres")] if obj.get("genres") is not None else None,
            "language_of_performance": obj.get("languageOfPerformance"),
            "release_date": obj.get("releaseDate"),
            "titles": [TitleDTO.from_dict(_item) for _item in obj.get("titles")] if obj.get("titles") is not None else None,
            "tracks": [TrackDTO.from_dict(_item) for _item in obj.get("tracks")] if obj.get("tracks") is not None else None,
            "musical_features": MusicalFeaturesDTO.from_dict(obj.get("musicalFeatures")) if obj.get("musicalFeatures") is not None else None,
            "recording_party_entities": [RecordingPartyDTO.from_dict(_item) for _item in obj.get("recordingPartyEntities")] if obj.get("recordingPartyEntities") is not None else None,
            "tags": [RecordingTagSmallDTO.from_dict(_item) for _item in obj.get("tags")] if obj.get("tags") is not None else None,
            "spotify_id": obj.get("spotifyId"),
            "genre_predictions": [RecordingGenrePredictionDTO.from_dict(_item) for _item in obj.get("genrePredictions")] if obj.get("genrePredictions") is not None else None
        })
        return _obj


