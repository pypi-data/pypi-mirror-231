// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tsl/profiler/protobuf/trace_events.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tsl_2fprofiler_2fprotobuf_2ftrace_5fevents_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tsl_2fprofiler_2fprotobuf_2ftrace_5fevents_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tsl_2fprofiler_2fprotobuf_2ftrace_5fevents_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tsl_2fprofiler_2fprotobuf_2ftrace_5fevents_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tsl_2fprofiler_2fprotobuf_2ftrace_5fevents_2eproto;
namespace tsl {
namespace profiler {
class Device;
struct DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class Device_ResourcesEntry_DoNotUse;
struct Device_ResourcesEntry_DoNotUseDefaultTypeInternal;
extern Device_ResourcesEntry_DoNotUseDefaultTypeInternal _Device_ResourcesEntry_DoNotUse_default_instance_;
class Resource;
struct ResourceDefaultTypeInternal;
extern ResourceDefaultTypeInternal _Resource_default_instance_;
class Trace;
struct TraceDefaultTypeInternal;
extern TraceDefaultTypeInternal _Trace_default_instance_;
class TraceEvent;
struct TraceEventDefaultTypeInternal;
extern TraceEventDefaultTypeInternal _TraceEvent_default_instance_;
class TraceEvent_ArgsEntry_DoNotUse;
struct TraceEvent_ArgsEntry_DoNotUseDefaultTypeInternal;
extern TraceEvent_ArgsEntry_DoNotUseDefaultTypeInternal _TraceEvent_ArgsEntry_DoNotUse_default_instance_;
class Trace_DevicesEntry_DoNotUse;
struct Trace_DevicesEntry_DoNotUseDefaultTypeInternal;
extern Trace_DevicesEntry_DoNotUseDefaultTypeInternal _Trace_DevicesEntry_DoNotUse_default_instance_;
}  // namespace profiler
}  // namespace tsl
PROTOBUF_NAMESPACE_OPEN
template<> ::tsl::profiler::Device* Arena::CreateMaybeMessage<::tsl::profiler::Device>(Arena*);
template<> ::tsl::profiler::Device_ResourcesEntry_DoNotUse* Arena::CreateMaybeMessage<::tsl::profiler::Device_ResourcesEntry_DoNotUse>(Arena*);
template<> ::tsl::profiler::Resource* Arena::CreateMaybeMessage<::tsl::profiler::Resource>(Arena*);
template<> ::tsl::profiler::Trace* Arena::CreateMaybeMessage<::tsl::profiler::Trace>(Arena*);
template<> ::tsl::profiler::TraceEvent* Arena::CreateMaybeMessage<::tsl::profiler::TraceEvent>(Arena*);
template<> ::tsl::profiler::TraceEvent_ArgsEntry_DoNotUse* Arena::CreateMaybeMessage<::tsl::profiler::TraceEvent_ArgsEntry_DoNotUse>(Arena*);
template<> ::tsl::profiler::Trace_DevicesEntry_DoNotUse* Arena::CreateMaybeMessage<::tsl::profiler::Trace_DevicesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tsl {
namespace profiler {

// ===================================================================

class Trace_DevicesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Trace_DevicesEntry_DoNotUse, 
    uint32_t, ::tsl::profiler::Device,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Trace_DevicesEntry_DoNotUse, 
    uint32_t, ::tsl::profiler::Device,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Trace_DevicesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Trace_DevicesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Trace_DevicesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Trace_DevicesEntry_DoNotUse& other);
  static const Trace_DevicesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Trace_DevicesEntry_DoNotUse*>(&_Trace_DevicesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_tsl_2fprofiler_2fprotobuf_2ftrace_5fevents_2eproto;
};

// -------------------------------------------------------------------

class Trace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tsl.profiler.Trace) */ {
 public:
  inline Trace() : Trace(nullptr) {}
  ~Trace() override;
  explicit PROTOBUF_CONSTEXPR Trace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Trace(const Trace& from);
  Trace(Trace&& from) noexcept
    : Trace() {
    *this = ::std::move(from);
  }

  inline Trace& operator=(const Trace& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trace& operator=(Trace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Trace& default_instance() {
    return *internal_default_instance();
  }
  static inline const Trace* internal_default_instance() {
    return reinterpret_cast<const Trace*>(
               &_Trace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Trace& a, Trace& b) {
    a.Swap(&b);
  }
  inline void Swap(Trace* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Trace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Trace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Trace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Trace& from) {
    Trace::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trace* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tsl.profiler.Trace";
  }
  protected:
  explicit Trace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 1,
    kTraceEventsFieldNumber = 4,
  };
  // map<uint32, .tsl.profiler.Device> devices = 1;
  int devices_size() const;
  private:
  int _internal_devices_size() const;
  public:
  void clear_devices();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::tsl::profiler::Device >&
      _internal_devices() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::tsl::profiler::Device >*
      _internal_mutable_devices();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::tsl::profiler::Device >&
      devices() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::tsl::profiler::Device >*
      mutable_devices();

  // repeated .tsl.profiler.TraceEvent trace_events = 4;
  int trace_events_size() const;
  private:
  int _internal_trace_events_size() const;
  public:
  void clear_trace_events();
  ::tsl::profiler::TraceEvent* mutable_trace_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tsl::profiler::TraceEvent >*
      mutable_trace_events();
  private:
  const ::tsl::profiler::TraceEvent& _internal_trace_events(int index) const;
  ::tsl::profiler::TraceEvent* _internal_add_trace_events();
  public:
  const ::tsl::profiler::TraceEvent& trace_events(int index) const;
  ::tsl::profiler::TraceEvent* add_trace_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tsl::profiler::TraceEvent >&
      trace_events() const;

  // @@protoc_insertion_point(class_scope:tsl.profiler.Trace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Trace_DevicesEntry_DoNotUse,
        uint32_t, ::tsl::profiler::Device,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> devices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tsl::profiler::TraceEvent > trace_events_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tsl_2fprofiler_2fprotobuf_2ftrace_5fevents_2eproto;
};
// -------------------------------------------------------------------

class Device_ResourcesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Device_ResourcesEntry_DoNotUse, 
    uint32_t, ::tsl::profiler::Resource,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Device_ResourcesEntry_DoNotUse, 
    uint32_t, ::tsl::profiler::Resource,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Device_ResourcesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Device_ResourcesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Device_ResourcesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Device_ResourcesEntry_DoNotUse& other);
  static const Device_ResourcesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Device_ResourcesEntry_DoNotUse*>(&_Device_ResourcesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_tsl_2fprofiler_2fprotobuf_2ftrace_5fevents_2eproto;
};

// -------------------------------------------------------------------

class Device final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tsl.profiler.Device) */ {
 public:
  inline Device() : Device(nullptr) {}
  ~Device() override;
  explicit PROTOBUF_CONSTEXPR Device(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Device(const Device& from);
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device& operator=(Device&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Device& default_instance() {
    return *internal_default_instance();
  }
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }
  inline void Swap(Device* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Device* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Device& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Device& from) {
    Device::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tsl.profiler.Device";
  }
  protected:
  explicit Device(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kResourcesFieldNumber = 3,
    kNameFieldNumber = 1,
    kDeviceIdFieldNumber = 2,
  };
  // map<uint32, .tsl.profiler.Resource> resources = 3;
  int resources_size() const;
  private:
  int _internal_resources_size() const;
  public:
  void clear_resources();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::tsl::profiler::Resource >&
      _internal_resources() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::tsl::profiler::Resource >*
      _internal_mutable_resources();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::tsl::profiler::Resource >&
      resources() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::tsl::profiler::Resource >*
      mutable_resources();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 device_id = 2;
  void clear_device_id();
  uint32_t device_id() const;
  void set_device_id(uint32_t value);
  private:
  uint32_t _internal_device_id() const;
  void _internal_set_device_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tsl.profiler.Device)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Device_ResourcesEntry_DoNotUse,
        uint32_t, ::tsl::profiler::Resource,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> resources_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t device_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tsl_2fprofiler_2fprotobuf_2ftrace_5fevents_2eproto;
};
// -------------------------------------------------------------------

class Resource final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tsl.profiler.Resource) */ {
 public:
  inline Resource() : Resource(nullptr) {}
  ~Resource() override;
  explicit PROTOBUF_CONSTEXPR Resource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Resource(const Resource& from);
  Resource(Resource&& from) noexcept
    : Resource() {
    *this = ::std::move(from);
  }

  inline Resource& operator=(const Resource& from) {
    CopyFrom(from);
    return *this;
  }
  inline Resource& operator=(Resource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Resource& default_instance() {
    return *internal_default_instance();
  }
  static inline const Resource* internal_default_instance() {
    return reinterpret_cast<const Resource*>(
               &_Resource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Resource& a, Resource& b) {
    a.Swap(&b);
  }
  inline void Swap(Resource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Resource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Resource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Resource>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Resource& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Resource& from) {
    Resource::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Resource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tsl.profiler.Resource";
  }
  protected:
  explicit Resource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kResourceIdFieldNumber = 2,
    kSortIndexFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 resource_id = 2;
  void clear_resource_id();
  uint32_t resource_id() const;
  void set_resource_id(uint32_t value);
  private:
  uint32_t _internal_resource_id() const;
  void _internal_set_resource_id(uint32_t value);
  public:

  // uint32 sort_index = 3;
  void clear_sort_index();
  uint32_t sort_index() const;
  void set_sort_index(uint32_t value);
  private:
  uint32_t _internal_sort_index() const;
  void _internal_set_sort_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tsl.profiler.Resource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t resource_id_;
    uint32_t sort_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tsl_2fprofiler_2fprotobuf_2ftrace_5fevents_2eproto;
};
// -------------------------------------------------------------------

class TraceEvent_ArgsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TraceEvent_ArgsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TraceEvent_ArgsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  TraceEvent_ArgsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR TraceEvent_ArgsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit TraceEvent_ArgsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TraceEvent_ArgsEntry_DoNotUse& other);
  static const TraceEvent_ArgsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TraceEvent_ArgsEntry_DoNotUse*>(&_TraceEvent_ArgsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "tsl.profiler.TraceEvent.ArgsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "tsl.profiler.TraceEvent.ArgsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_tsl_2fprofiler_2fprotobuf_2ftrace_5fevents_2eproto;
};

// -------------------------------------------------------------------

class TraceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tsl.profiler.TraceEvent) */ {
 public:
  inline TraceEvent() : TraceEvent(nullptr) {}
  ~TraceEvent() override;
  explicit PROTOBUF_CONSTEXPR TraceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TraceEvent(const TraceEvent& from);
  TraceEvent(TraceEvent&& from) noexcept
    : TraceEvent() {
    *this = ::std::move(from);
  }

  inline TraceEvent& operator=(const TraceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceEvent& operator=(TraceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TraceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TraceEvent* internal_default_instance() {
    return reinterpret_cast<const TraceEvent*>(
               &_TraceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TraceEvent& a, TraceEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TraceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TraceEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TraceEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TraceEvent& from) {
    TraceEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tsl.profiler.TraceEvent";
  }
  protected:
  explicit TraceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 11,
    kNameFieldNumber = 3,
    kDeviceIdFieldNumber = 1,
    kResourceIdFieldNumber = 2,
    kTimestampPsFieldNumber = 9,
    kDurationPsFieldNumber = 10,
  };
  // map<string, string> args = 11;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_args() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_args();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      args() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_args();

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 device_id = 1;
  void clear_device_id();
  uint32_t device_id() const;
  void set_device_id(uint32_t value);
  private:
  uint32_t _internal_device_id() const;
  void _internal_set_device_id(uint32_t value);
  public:

  // uint32 resource_id = 2;
  void clear_resource_id();
  uint32_t resource_id() const;
  void set_resource_id(uint32_t value);
  private:
  uint32_t _internal_resource_id() const;
  void _internal_set_resource_id(uint32_t value);
  public:

  // uint64 timestamp_ps = 9;
  void clear_timestamp_ps();
  uint64_t timestamp_ps() const;
  void set_timestamp_ps(uint64_t value);
  private:
  uint64_t _internal_timestamp_ps() const;
  void _internal_set_timestamp_ps(uint64_t value);
  public:

  // uint64 duration_ps = 10;
  void clear_duration_ps();
  uint64_t duration_ps() const;
  void set_duration_ps(uint64_t value);
  private:
  uint64_t _internal_duration_ps() const;
  void _internal_set_duration_ps(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tsl.profiler.TraceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        TraceEvent_ArgsEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> args_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t device_id_;
    uint32_t resource_id_;
    uint64_t timestamp_ps_;
    uint64_t duration_ps_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tsl_2fprofiler_2fprotobuf_2ftrace_5fevents_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Trace

// map<uint32, .tsl.profiler.Device> devices = 1;
inline int Trace::_internal_devices_size() const {
  return _impl_.devices_.size();
}
inline int Trace::devices_size() const {
  return _internal_devices_size();
}
inline void Trace::clear_devices() {
  _impl_.devices_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::tsl::profiler::Device >&
Trace::_internal_devices() const {
  return _impl_.devices_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::tsl::profiler::Device >&
Trace::devices() const {
  // @@protoc_insertion_point(field_map:tsl.profiler.Trace.devices)
  return _internal_devices();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::tsl::profiler::Device >*
Trace::_internal_mutable_devices() {
  return _impl_.devices_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::tsl::profiler::Device >*
Trace::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_map:tsl.profiler.Trace.devices)
  return _internal_mutable_devices();
}

// repeated .tsl.profiler.TraceEvent trace_events = 4;
inline int Trace::_internal_trace_events_size() const {
  return _impl_.trace_events_.size();
}
inline int Trace::trace_events_size() const {
  return _internal_trace_events_size();
}
inline void Trace::clear_trace_events() {
  _impl_.trace_events_.Clear();
}
inline ::tsl::profiler::TraceEvent* Trace::mutable_trace_events(int index) {
  // @@protoc_insertion_point(field_mutable:tsl.profiler.Trace.trace_events)
  return _impl_.trace_events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tsl::profiler::TraceEvent >*
Trace::mutable_trace_events() {
  // @@protoc_insertion_point(field_mutable_list:tsl.profiler.Trace.trace_events)
  return &_impl_.trace_events_;
}
inline const ::tsl::profiler::TraceEvent& Trace::_internal_trace_events(int index) const {
  return _impl_.trace_events_.Get(index);
}
inline const ::tsl::profiler::TraceEvent& Trace::trace_events(int index) const {
  // @@protoc_insertion_point(field_get:tsl.profiler.Trace.trace_events)
  return _internal_trace_events(index);
}
inline ::tsl::profiler::TraceEvent* Trace::_internal_add_trace_events() {
  return _impl_.trace_events_.Add();
}
inline ::tsl::profiler::TraceEvent* Trace::add_trace_events() {
  ::tsl::profiler::TraceEvent* _add = _internal_add_trace_events();
  // @@protoc_insertion_point(field_add:tsl.profiler.Trace.trace_events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tsl::profiler::TraceEvent >&
Trace::trace_events() const {
  // @@protoc_insertion_point(field_list:tsl.profiler.Trace.trace_events)
  return _impl_.trace_events_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Device

// string name = 1;
inline void Device::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Device::name() const {
  // @@protoc_insertion_point(field_get:tsl.profiler.Device.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Device::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tsl.profiler.Device.name)
}
inline std::string* Device::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tsl.profiler.Device.name)
  return _s;
}
inline const std::string& Device::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Device::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Device::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Device::release_name() {
  // @@protoc_insertion_point(field_release:tsl.profiler.Device.name)
  return _impl_.name_.Release();
}
inline void Device::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tsl.profiler.Device.name)
}

// uint32 device_id = 2;
inline void Device::clear_device_id() {
  _impl_.device_id_ = 0u;
}
inline uint32_t Device::_internal_device_id() const {
  return _impl_.device_id_;
}
inline uint32_t Device::device_id() const {
  // @@protoc_insertion_point(field_get:tsl.profiler.Device.device_id)
  return _internal_device_id();
}
inline void Device::_internal_set_device_id(uint32_t value) {
  
  _impl_.device_id_ = value;
}
inline void Device::set_device_id(uint32_t value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:tsl.profiler.Device.device_id)
}

// map<uint32, .tsl.profiler.Resource> resources = 3;
inline int Device::_internal_resources_size() const {
  return _impl_.resources_.size();
}
inline int Device::resources_size() const {
  return _internal_resources_size();
}
inline void Device::clear_resources() {
  _impl_.resources_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::tsl::profiler::Resource >&
Device::_internal_resources() const {
  return _impl_.resources_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::tsl::profiler::Resource >&
Device::resources() const {
  // @@protoc_insertion_point(field_map:tsl.profiler.Device.resources)
  return _internal_resources();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::tsl::profiler::Resource >*
Device::_internal_mutable_resources() {
  return _impl_.resources_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::tsl::profiler::Resource >*
Device::mutable_resources() {
  // @@protoc_insertion_point(field_mutable_map:tsl.profiler.Device.resources)
  return _internal_mutable_resources();
}

// -------------------------------------------------------------------

// Resource

// string name = 1;
inline void Resource::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Resource::name() const {
  // @@protoc_insertion_point(field_get:tsl.profiler.Resource.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Resource::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tsl.profiler.Resource.name)
}
inline std::string* Resource::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tsl.profiler.Resource.name)
  return _s;
}
inline const std::string& Resource::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Resource::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Resource::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Resource::release_name() {
  // @@protoc_insertion_point(field_release:tsl.profiler.Resource.name)
  return _impl_.name_.Release();
}
inline void Resource::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tsl.profiler.Resource.name)
}

// uint32 resource_id = 2;
inline void Resource::clear_resource_id() {
  _impl_.resource_id_ = 0u;
}
inline uint32_t Resource::_internal_resource_id() const {
  return _impl_.resource_id_;
}
inline uint32_t Resource::resource_id() const {
  // @@protoc_insertion_point(field_get:tsl.profiler.Resource.resource_id)
  return _internal_resource_id();
}
inline void Resource::_internal_set_resource_id(uint32_t value) {
  
  _impl_.resource_id_ = value;
}
inline void Resource::set_resource_id(uint32_t value) {
  _internal_set_resource_id(value);
  // @@protoc_insertion_point(field_set:tsl.profiler.Resource.resource_id)
}

// uint32 sort_index = 3;
inline void Resource::clear_sort_index() {
  _impl_.sort_index_ = 0u;
}
inline uint32_t Resource::_internal_sort_index() const {
  return _impl_.sort_index_;
}
inline uint32_t Resource::sort_index() const {
  // @@protoc_insertion_point(field_get:tsl.profiler.Resource.sort_index)
  return _internal_sort_index();
}
inline void Resource::_internal_set_sort_index(uint32_t value) {
  
  _impl_.sort_index_ = value;
}
inline void Resource::set_sort_index(uint32_t value) {
  _internal_set_sort_index(value);
  // @@protoc_insertion_point(field_set:tsl.profiler.Resource.sort_index)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TraceEvent

// uint32 device_id = 1;
inline void TraceEvent::clear_device_id() {
  _impl_.device_id_ = 0u;
}
inline uint32_t TraceEvent::_internal_device_id() const {
  return _impl_.device_id_;
}
inline uint32_t TraceEvent::device_id() const {
  // @@protoc_insertion_point(field_get:tsl.profiler.TraceEvent.device_id)
  return _internal_device_id();
}
inline void TraceEvent::_internal_set_device_id(uint32_t value) {
  
  _impl_.device_id_ = value;
}
inline void TraceEvent::set_device_id(uint32_t value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:tsl.profiler.TraceEvent.device_id)
}

// uint32 resource_id = 2;
inline void TraceEvent::clear_resource_id() {
  _impl_.resource_id_ = 0u;
}
inline uint32_t TraceEvent::_internal_resource_id() const {
  return _impl_.resource_id_;
}
inline uint32_t TraceEvent::resource_id() const {
  // @@protoc_insertion_point(field_get:tsl.profiler.TraceEvent.resource_id)
  return _internal_resource_id();
}
inline void TraceEvent::_internal_set_resource_id(uint32_t value) {
  
  _impl_.resource_id_ = value;
}
inline void TraceEvent::set_resource_id(uint32_t value) {
  _internal_set_resource_id(value);
  // @@protoc_insertion_point(field_set:tsl.profiler.TraceEvent.resource_id)
}

// string name = 3;
inline void TraceEvent::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TraceEvent::name() const {
  // @@protoc_insertion_point(field_get:tsl.profiler.TraceEvent.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TraceEvent::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tsl.profiler.TraceEvent.name)
}
inline std::string* TraceEvent::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tsl.profiler.TraceEvent.name)
  return _s;
}
inline const std::string& TraceEvent::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TraceEvent::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TraceEvent::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TraceEvent::release_name() {
  // @@protoc_insertion_point(field_release:tsl.profiler.TraceEvent.name)
  return _impl_.name_.Release();
}
inline void TraceEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tsl.profiler.TraceEvent.name)
}

// uint64 timestamp_ps = 9;
inline void TraceEvent::clear_timestamp_ps() {
  _impl_.timestamp_ps_ = uint64_t{0u};
}
inline uint64_t TraceEvent::_internal_timestamp_ps() const {
  return _impl_.timestamp_ps_;
}
inline uint64_t TraceEvent::timestamp_ps() const {
  // @@protoc_insertion_point(field_get:tsl.profiler.TraceEvent.timestamp_ps)
  return _internal_timestamp_ps();
}
inline void TraceEvent::_internal_set_timestamp_ps(uint64_t value) {
  
  _impl_.timestamp_ps_ = value;
}
inline void TraceEvent::set_timestamp_ps(uint64_t value) {
  _internal_set_timestamp_ps(value);
  // @@protoc_insertion_point(field_set:tsl.profiler.TraceEvent.timestamp_ps)
}

// uint64 duration_ps = 10;
inline void TraceEvent::clear_duration_ps() {
  _impl_.duration_ps_ = uint64_t{0u};
}
inline uint64_t TraceEvent::_internal_duration_ps() const {
  return _impl_.duration_ps_;
}
inline uint64_t TraceEvent::duration_ps() const {
  // @@protoc_insertion_point(field_get:tsl.profiler.TraceEvent.duration_ps)
  return _internal_duration_ps();
}
inline void TraceEvent::_internal_set_duration_ps(uint64_t value) {
  
  _impl_.duration_ps_ = value;
}
inline void TraceEvent::set_duration_ps(uint64_t value) {
  _internal_set_duration_ps(value);
  // @@protoc_insertion_point(field_set:tsl.profiler.TraceEvent.duration_ps)
}

// map<string, string> args = 11;
inline int TraceEvent::_internal_args_size() const {
  return _impl_.args_.size();
}
inline int TraceEvent::args_size() const {
  return _internal_args_size();
}
inline void TraceEvent::clear_args() {
  _impl_.args_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TraceEvent::_internal_args() const {
  return _impl_.args_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
TraceEvent::args() const {
  // @@protoc_insertion_point(field_map:tsl.profiler.TraceEvent.args)
  return _internal_args();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TraceEvent::_internal_mutable_args() {
  return _impl_.args_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
TraceEvent::mutable_args() {
  // @@protoc_insertion_point(field_mutable_map:tsl.profiler.TraceEvent.args)
  return _internal_mutable_args();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace profiler
}  // namespace tsl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tsl_2fprofiler_2fprotobuf_2ftrace_5fevents_2eproto
