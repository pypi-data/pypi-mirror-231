# coding: utf-8


"""
IGNORE:
    Nutanix Vmm Versioned APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.3-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
import ntnx_vmm_py_client.models
from ntnx_vmm_py_client.models.OneOfvmm.v4.templates.TemplateVersionSpecversion_source import TemplateVersionSpecversion_source  # noqa: F401,E501
from ntnx_vmm_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_vmm_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501

class TemplateVersionSpec(ExternalizableAbstractModel):

    """

    :param version_name: (:attr:`version_name`) Template version name. This will be the default VM name prefix when a VM is deployed from this template.
    :type version_name: 
    :param version_description: (:attr:`version_description`) A description for template version.
    :type version_description: 
    :param version_number: (:attr:`version_number`) Template Version number
    :type version_number: 
    :param vm_spec: (:attr:`vm_spec`) VM configuration spec
    :type vm_spec: 
    :param created_at: (:attr:`created_at`) Created Time.
    :type created_at: 
    :param created_by: (:attr:`created_by`) The user who created the Version in Template.
    :type created_by: 
    :param version_source: (:attr:`version_source`) Source from which a version is created. It can be either a VM or an existing version of the template.
    :type version_source: 
    :param version_source_discriminator: (:attr:`version_source_discriminator`) 
    :type version_source_discriminator: 
    :param is_gc_override_enabled: (:attr:`is_gc_override_enabled`) Allow or Disallow override of the Guest Customization during Template Deployment using this version.
    :type is_gc_override_enabled: 

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'version_name': 'str',
        'version_description': 'str',
        'version_number': 'int',
        'vm_spec': 'str',
        'created_at': 'datetime',
        'created_by': 'str',
        'version_source': 'OneOfvmm.v4.templates.TemplateVersionSpecversion_source',
        'version_source_discriminator': 'str',
        'is_gc_override_enabled': 'bool',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'version_name': 'versionName',
        'version_description': 'versionDescription',
        'version_number': 'versionNumber',
        'vm_spec': 'vmSpec',
        'created_at': 'createdAt',
        'created_by': 'createdBy',
        'version_source': 'versionSource',
        'version_source_discriminator': 'versionSourceDiscriminator',
        'is_gc_override_enabled': 'isGcOverrideEnabled',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, version_name=None, version_description=None, version_number=None, vm_spec=None, created_at=None, created_by=None, version_source=None, version_source_discriminator=None, is_gc_override_enabled=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__version_name = None
        self.__version_description = None
        self.__version_number = None
        self.__vm_spec = None
        self.__created_at = None
        self.__created_by = None
        self.__version_source = None
        self.__version_source_discriminator = None
        self.__is_gc_override_enabled = None
        self.discriminator = None
        if version_name is not None:
            self.__version_name = version_name
        if version_description is not None:
            self.__version_description = version_description
        if version_number is not None:
            self.__version_number = version_number
        if vm_spec is not None:
            self.__vm_spec = vm_spec
        if created_at is not None:
            self.__created_at = created_at
        if created_by is not None:
            self.__created_by = created_by
        if version_source is not None:
            self.__version_source = version_source
        if version_source_discriminator is not None:
            self.__version_source_discriminator = version_source_discriminator
        if is_gc_override_enabled is not None:
            self.__is_gc_override_enabled = is_gc_override_enabled

    def _initialize_object_type(self):
        return 'vmm.v4.templates.TemplateVersionSpec'

    def _initialize_fq_object_type(self):
        return 'vmm.v4.r0.a1.templates.TemplateVersionSpec'


    @property
    def version_name(self):
        """
        Template version name. This will be the default VM name prefix when a VM is deployed from this template.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__version_name

    @version_name.setter
    def version_name(self, version_name):
        if version_name is not None and len(version_name) > 256:
            raise ValueError("Invalid value for `version_name`, length must be less than or equal to `256`")  # noqa: E501

        self.__version_name = version_name

    @property
    def version_description(self):
        """
        A description for template version.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__version_description

    @version_description.setter
    def version_description(self, version_description):
        if version_description is not None and len(version_description) > 1000:
            raise ValueError("Invalid value for `version_description`, length must be less than or equal to `1000`")  # noqa: E501
        if version_description is not None and len(version_description) < 1:
            raise ValueError("Invalid value for `version_description`, length must be greater than or equal to `1`")  # noqa: E501

        self.__version_description = version_description

    @property
    def version_number(self):
        """
        Template Version number

        :type:

                :class:`~int`
        """  # noqa: E501
        return self.__version_number

    @version_number.setter
    def version_number(self, version_number):
        if version_number is not None and version_number > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `version_number`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if version_number is not None and version_number < 0:  # noqa: E501
            raise ValueError("Invalid value for `version_number`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__version_number = version_number

    @property
    def vm_spec(self):
        """
        VM configuration spec

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__vm_spec

    @vm_spec.setter
    def vm_spec(self, vm_spec):

        self.__vm_spec = vm_spec

    @property
    def created_at(self):
        """
        Created Time.

        :type:

                :class:`~datetime`
        """  # noqa: E501
        return self.__created_at

    @created_at.setter
    def created_at(self, created_at):

        self.__created_at = created_at

    @property
    def created_by(self):
        """
        The user who created the Version in Template.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__created_by

    @created_by.setter
    def created_by(self, created_by):

        self.__created_by = created_by

    @property
    def version_source(self):
        """
        Source from which a version is created. It can be either a VM or an existing version of the template.

        :type:
                :class:`~ntnx_vmm_py_client.models.vmm.v4.templates.VmReference` | 
                :class:`~ntnx_vmm_py_client.models.vmm.v4.templates.TemplateVersionReference`
                    """  # noqa: E501
        return self.__version_source

    @version_source.setter
    def version_source(self, version_source):

        self.__version_source = version_source

    @property
    def version_source_discriminator(self):
        """
        

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__version_source_discriminator

    @version_source_discriminator.setter
    def version_source_discriminator(self, version_source_discriminator):

        self.__version_source_discriminator = version_source_discriminator

    @property
    def is_gc_override_enabled(self):
        """
        Allow or Disallow override of the Guest Customization during Template Deployment using this version.

        :type:

                :class:`~bool`
        """  # noqa: E501
        return self.__is_gc_override_enabled

    @is_gc_override_enabled.setter
    def is_gc_override_enabled(self, is_gc_override_enabled):

        self.__is_gc_override_enabled = is_gc_override_enabled

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if attr_type.startswith('OneOf'):
                type = getattr(ntnx_vmm_py_client.models, attr_type.split('.')[-1])
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(TemplateVersionSpec, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemplateVersionSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

