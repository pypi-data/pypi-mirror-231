# coding: utf-8


"""
IGNORE:
    Nutanix Vmm Versioned APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.3-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_vmm_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_vmm_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.templates.GuestUpdateStatus import GuestUpdateStatus  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.templates.TemplateVersionSpec import TemplateVersionSpec  # noqa: F401,E501

class Template(ExternalizableAbstractModel):

    """

    :param template_name: (:attr:`template_name`) Template Name.
    :type template_name: 
    :param template_description: (:attr:`template_description`) A description for the Template.
    :type template_description: 
    :param template_version_spec: (:attr:`template_version_spec`) 
    :type template_version_spec: 
    :param set_active_version: (:attr:`set_active_version`) Indicates whether the version has to be a Gold version or not. (**Default** True)
    :type set_active_version: 
    :param active_version_number: (:attr:`active_version_number`) The current gold version.
    :type active_version_number: 
    :param guest_update_status: (:attr:`guest_update_status`) 
    :type guest_update_status: 
    :param created_at: (:attr:`created_at`) Created Time.
    :type created_at: 
    :param last_updated_at: (:attr:`last_updated_at`) Last Update Time.
    :type last_updated_at: 
    :param created_by: (:attr:`created_by`) The user who created the Template.
    :type created_by: 
    :param last_updated_by: (:attr:`last_updated_by`) The user who updated the Version in Template.
    :type last_updated_by: 

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'template_name': 'str',
        'template_description': 'str',
        'template_version_spec': 'vmm.v4.templates.TemplateVersionSpec',
        'set_active_version': 'bool',
        'active_version_number': 'int',
        'guest_update_status': 'vmm.v4.templates.GuestUpdateStatus',
        'created_at': 'datetime',
        'last_updated_at': 'datetime',
        'created_by': 'str',
        'last_updated_by': 'str',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'template_name': 'templateName',
        'template_description': 'templateDescription',
        'template_version_spec': 'templateVersionSpec',
        'set_active_version': 'setActiveVersion',
        'active_version_number': 'activeVersionNumber',
        'guest_update_status': 'guestUpdateStatus',
        'created_at': 'createdAt',
        'last_updated_at': 'lastUpdatedAt',
        'created_by': 'createdBy',
        'last_updated_by': 'lastUpdatedBy',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, template_name=None, template_description=None, template_version_spec=None, set_active_version=True, active_version_number=None, guest_update_status=None, created_at=None, last_updated_at=None, created_by=None, last_updated_by=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__template_name = None
        self.__template_description = None
        self.__template_version_spec = None
        self.__set_active_version = None
        self.__active_version_number = None
        self.__guest_update_status = None
        self.__created_at = None
        self.__last_updated_at = None
        self.__created_by = None
        self.__last_updated_by = None
        self.discriminator = None
        if template_name is not None:
            self.__template_name = template_name
        if template_description is not None:
            self.__template_description = template_description
        if template_version_spec is not None:
            self.__template_version_spec = template_version_spec
        if set_active_version is not None:
            self.__set_active_version = set_active_version
        if active_version_number is not None:
            self.__active_version_number = active_version_number
        if guest_update_status is not None:
            self.__guest_update_status = guest_update_status
        if created_at is not None:
            self.__created_at = created_at
        if last_updated_at is not None:
            self.__last_updated_at = last_updated_at
        if created_by is not None:
            self.__created_by = created_by
        if last_updated_by is not None:
            self.__last_updated_by = last_updated_by

    def _initialize_object_type(self):
        return 'vmm.v4.templates.Template'

    def _initialize_fq_object_type(self):
        return 'vmm.v4.r0.a1.templates.Template'


    @property
    def template_name(self):
        """
        Template Name.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__template_name

    @template_name.setter
    def template_name(self, template_name):
        if template_name is not None and len(template_name) > 256:
            raise ValueError("Invalid value for `template_name`, length must be less than or equal to `256`")  # noqa: E501
        if template_name is not None and len(template_name) < 1:
            raise ValueError("Invalid value for `template_name`, length must be greater than or equal to `1`")  # noqa: E501

        self.__template_name = template_name

    @property
    def template_description(self):
        """
        A description for the Template.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__template_description

    @template_description.setter
    def template_description(self, template_description):
        if template_description is not None and len(template_description) > 1000:
            raise ValueError("Invalid value for `template_description`, length must be less than or equal to `1000`")  # noqa: E501

        self.__template_description = template_description

    @property
    def template_version_spec(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.templates.TemplateVersionSpec`
        """  # noqa: E501
        return self.__template_version_spec

    @template_version_spec.setter
    def template_version_spec(self, template_version_spec):

        self.__template_version_spec = template_version_spec

    @property
    def set_active_version(self):
        """
        Indicates whether the version has to be a Gold version or not.

        :type:

                :class:`~bool`
        """  # noqa: E501
        return self.__set_active_version

    @set_active_version.setter
    def set_active_version(self, set_active_version):

        self.__set_active_version = set_active_version

    @property
    def active_version_number(self):
        """
        The current gold version.

        :type:

                :class:`~int`
        """  # noqa: E501
        return self.__active_version_number

    @active_version_number.setter
    def active_version_number(self, active_version_number):
        if active_version_number is not None and active_version_number > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `active_version_number`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if active_version_number is not None and active_version_number < 0:  # noqa: E501
            raise ValueError("Invalid value for `active_version_number`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__active_version_number = active_version_number

    @property
    def guest_update_status(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.templates.GuestUpdateStatus`
        """  # noqa: E501
        return self.__guest_update_status

    @guest_update_status.setter
    def guest_update_status(self, guest_update_status):

        self.__guest_update_status = guest_update_status

    @property
    def created_at(self):
        """
        Created Time.

        :type:

                :class:`~datetime`
        """  # noqa: E501
        return self.__created_at

    @created_at.setter
    def created_at(self, created_at):

        self.__created_at = created_at

    @property
    def last_updated_at(self):
        """
        Last Update Time.

        :type:

                :class:`~datetime`
        """  # noqa: E501
        return self.__last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):

        self.__last_updated_at = last_updated_at

    @property
    def created_by(self):
        """
        The user who created the Template.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__created_by

    @created_by.setter
    def created_by(self, created_by):

        self.__created_by = created_by

    @property
    def last_updated_by(self):
        """
        The user who updated the Version in Template.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__last_updated_by

    @last_updated_by.setter
    def last_updated_by(self, last_updated_by):

        self.__last_updated_by = last_updated_by

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(Template, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Template):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

