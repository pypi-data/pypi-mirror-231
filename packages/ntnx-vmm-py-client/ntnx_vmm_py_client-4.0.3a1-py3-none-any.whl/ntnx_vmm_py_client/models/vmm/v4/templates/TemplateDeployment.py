# coding: utf-8


"""
IGNORE:
    Nutanix Vmm Versioned APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.3-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_vmm_py_client.models.vmm.v4.templates.VmConfigOverride import VmConfigOverride  # noqa: F401,E501

class TemplateDeployment(object):

    """Deploy VM Config from the Template.

    :param version_number: (:attr:`version_number`) Template Version number
    :type version_number: 
    :param number_of_vms: (:attr:`number_of_vms`) Number / Count of VMs to be deployed. (**Default** 1)
    :type number_of_vms: required
    :param override_vm_config_map: (:attr:`override_vm_config_map`) The map containing keys as VM index and corresponding VM override config as values which is used at the time of deployment.
    :type override_vm_config_map: 
    :param cluster_reference: (:attr:`cluster_reference`) The UUID of the Cluster where the VM has to be deployed. This is mandatory to be specified for creating the VM.
    :type cluster_reference: required

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'version_number': 'int',
        'number_of_vms': 'int',
        'override_vm_config_map': 'dict(str, vmm.v4.templates.VmConfigOverride)',
        'cluster_reference': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'version_number': 'versionNumber',
        'number_of_vms': 'numberOfVms',
        'override_vm_config_map': 'overrideVmConfigMap',
        'cluster_reference': 'clusterReference',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, version_number=None, number_of_vms=1, override_vm_config_map=None, cluster_reference=None, *args, **kwargs):  # noqa: E501
        self.__version_number = None
        self.__number_of_vms = None
        self.__override_vm_config_map = None
        self.__cluster_reference = None
        self.discriminator = None
        if version_number is not None:
            self.__version_number = version_number
        self.__number_of_vms = number_of_vms
        if override_vm_config_map is not None:
            self.__override_vm_config_map = override_vm_config_map
        self.__cluster_reference = cluster_reference
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'vmm.v4.templates.TemplateDeployment'

    def _initialize_fq_object_type(self):
        return 'vmm.v4.r0.a1.templates.TemplateDeployment'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def version_number(self):
        """
        Template Version number

        :type:

                :class:`~int`
        """  # noqa: E501
        return self.__version_number

    @version_number.setter
    def version_number(self, version_number):
        if version_number is not None and version_number > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `version_number`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if version_number is not None and version_number < 0:  # noqa: E501
            raise ValueError("Invalid value for `version_number`, must be a value greater than or equal to `0`")  # noqa: E501

        self.__version_number = version_number

    @property
    def number_of_vms(self):
        """
        Number / Count of VMs to be deployed.

        :type:

                :class:`~int`
        """  # noqa: E501
        return self.__number_of_vms

    @number_of_vms.setter
    def number_of_vms(self, number_of_vms):
        if number_of_vms is None:
            raise ValueError("Invalid value for `number_of_vms`, must not be `None`")  # noqa: E501
        if number_of_vms is not None and number_of_vms > 2147483647:  # noqa: E501
            raise ValueError("Invalid value for `number_of_vms`, must be a value less than or equal to `2147483647`")  # noqa: E501
        if number_of_vms is not None and number_of_vms < 1:  # noqa: E501
            raise ValueError("Invalid value for `number_of_vms`, must be a value greater than or equal to `1`")  # noqa: E501

        self.__number_of_vms = number_of_vms

    @property
    def override_vm_config_map(self):
        """
        The map containing keys as VM index and corresponding VM override config as values which is used at the time of deployment.

        :type:
            dict(str, :class:`~ntnx_vmm_py_client.models.vmm.v4.templates.VmConfigOverride` )
        """  # noqa: E501
        return self.__override_vm_config_map

    @override_vm_config_map.setter
    def override_vm_config_map(self, override_vm_config_map):

        self.__override_vm_config_map = override_vm_config_map

    @property
    def cluster_reference(self):
        """
        The UUID of the Cluster where the VM has to be deployed. This is mandatory to be specified for creating the VM.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__cluster_reference

    @cluster_reference.setter
    def cluster_reference(self, cluster_reference):
        if cluster_reference is None:
            raise ValueError("Invalid value for `cluster_reference`, must not be `None`")  # noqa: E501

        self.__cluster_reference = cluster_reference

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(TemplateDeployment, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemplateDeployment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

