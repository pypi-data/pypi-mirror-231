# coding: utf-8


"""
IGNORE:
    Nutanix Vmm Versioned APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.3-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_vmm_py_client.models.dataprotection.v4.common.RecoveryPointProperties import RecoveryPointProperties  # noqa: F401,E501
from ntnx_vmm_py_client.models.dataprotection.v4.common.RecoveryPointStatus import RecoveryPointStatus  # noqa: F401,E501
from ntnx_vmm_py_client.models.dataprotection.v4.common.RecoveryPointType import RecoveryPointType  # noqa: F401,E501
from ntnx_vmm_py_client.models.dataprotection.v4.common.VendorSpecificProperty import VendorSpecificProperty  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.ahv.config.Vm import Vm  # noqa: F401,E501

class VmRecoveryPoint(RecoveryPointProperties):

    """A model that represents VM Recovery Point properties

    :param vm: (:attr:`vm`) 
    :type vm: 

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'vm': 'vmm.v4.ahv.config.Vm',
        'location_agnostic_id': 'str',
        'name': 'str',
        'creation_time': 'datetime',
        'expiration_time': 'datetime',
        'status': 'dataprotection.v4.common.RecoveryPointStatus',
        'recovery_point_type': 'dataprotection.v4.common.RecoveryPointType',
        'consistency_group_ext_id': 'str',
        'consistency_group_name': 'str',
        'vendor_specific_properties': 'list[dataprotection.v4.common.VendorSpecificProperty]',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'vm': 'vm',
        'location_agnostic_id': 'locationAgnosticId',
        'name': 'name',
        'creation_time': 'creationTime',
        'expiration_time': 'expirationTime',
        'status': 'status',
        'recovery_point_type': 'recoveryPointType',
        'consistency_group_ext_id': 'consistencyGroupExtId',
        'consistency_group_name': 'consistencyGroupName',
        'vendor_specific_properties': 'vendorSpecificProperties',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, vm=None, location_agnostic_id=None, name=None, creation_time=None, expiration_time=None, status=None, recovery_point_type=None, consistency_group_ext_id=None, consistency_group_name=None, vendor_specific_properties=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        RecoveryPointProperties.__init__(self, location_agnostic_id, name, creation_time, expiration_time, status, recovery_point_type, consistency_group_ext_id, consistency_group_name, vendor_specific_properties, ext_id, links, tenant_id, *args, **kwargs)
        self.__vm = None
        self.discriminator = None
        if vm is not None:
            self.__vm = vm

    def _initialize_object_type(self):
        return 'vmm.v4.ahv.config.VmRecoveryPoint'

    def _initialize_fq_object_type(self):
        return 'vmm.v4.r0.a1.ahv.config.VmRecoveryPoint'


    @property
    def vm(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.ahv.config.Vm`
        """  # noqa: E501
        return self.__vm

    @vm.setter
    def vm(self, vm):

        self.__vm = vm

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(VmRecoveryPoint, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VmRecoveryPoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

