# coding: utf-8


"""
IGNORE:
    Nutanix Vmm Versioned APIs

    Manage the life-cycle of virtual machines hosted on Nutanix  # noqa: E501

    OpenAPI spec version: 4.0.3-alpha-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_vmm_py_client.models.common.v1.config.Metadata import Metadata  # noqa: F401,E501
from ntnx_vmm_py_client.models.common.v1.response.ApiLink import ApiLink  # noqa: F401,E501
from ntnx_vmm_py_client.models.common.v1.response.ExternalizableAbstractModel import ExternalizableAbstractModel  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.images.EnforcementState import EnforcementState  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.images.EntityFilter import EntityFilter  # noqa: F401,E501
from ntnx_vmm_py_client.models.vmm.v4.images.PlacementType import PlacementType  # noqa: F401,E501

class PlacementPolicy(ExternalizableAbstractModel):

    """

    :param metadata: (:attr:`metadata`) 
    :type metadata: 
    :param name: (:attr:`name`) Name of the image placement policy.
    :type name: required
    :param description: (:attr:`description`) Description of the image placement policy.
    :type description: 
    :param placement_type: (:attr:`placement_type`) 
    :type placement_type: required
    :param image_entity_filter: (:attr:`image_entity_filter`) 
    :type image_entity_filter: required
    :param cluster_entity_filter: (:attr:`cluster_entity_filter`) 
    :type cluster_entity_filter: required
    :param enforcement_state: (:attr:`enforcement_state`) 
    :type enforcement_state: 

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'metadata': 'common.v1.config.Metadata',
        'name': 'str',
        'description': 'str',
        'placement_type': 'vmm.v4.images.PlacementType',
        'image_entity_filter': 'vmm.v4.images.EntityFilter',
        'cluster_entity_filter': 'vmm.v4.images.EntityFilter',
        'enforcement_state': 'vmm.v4.images.EnforcementState',
        'ext_id': 'str',
        'links': 'list[common.v1.response.ApiLink]',
        'tenant_id': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'metadata': 'metadata',
        'name': 'name',
        'description': 'description',
        'placement_type': 'placementType',
        'image_entity_filter': 'imageEntityFilter',
        'cluster_entity_filter': 'clusterEntityFilter',
        'enforcement_state': 'enforcementState',
        'ext_id': 'extId',
        'links': 'links',
        'tenant_id': 'tenantId',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, metadata=None, name=None, description=None, placement_type=None, image_entity_filter=None, cluster_entity_filter=None, enforcement_state=None, ext_id=None, links=None, tenant_id=None, *args, **kwargs):  # noqa: E501
        ExternalizableAbstractModel.__init__(self, ext_id, links, tenant_id, *args, **kwargs)
        self.__metadata = None
        self.__name = None
        self.__description = None
        self.__placement_type = None
        self.__image_entity_filter = None
        self.__cluster_entity_filter = None
        self.__enforcement_state = None
        self.discriminator = None
        if metadata is not None:
            self.__metadata = metadata
        self.__name = name
        if description is not None:
            self.__description = description
        self.__placement_type = placement_type
        self.__image_entity_filter = image_entity_filter
        self.__cluster_entity_filter = cluster_entity_filter
        if enforcement_state is not None:
            self.__enforcement_state = enforcement_state

    def _initialize_object_type(self):
        return 'vmm.v4.images.PlacementPolicy'

    def _initialize_fq_object_type(self):
        return 'vmm.v4.r0.a1.images.PlacementPolicy'


    @property
    def metadata(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.common.v1.config.Metadata`
        """  # noqa: E501
        return self.__metadata

    @metadata.setter
    def metadata(self, metadata):

        self.__metadata = metadata

    @property
    def name(self):
        """
        Name of the image placement policy.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__name

    @name.setter
    def name(self, name):
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self.__name = name

    @property
    def description(self):
        """
        Description of the image placement policy.

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__description

    @description.setter
    def description(self, description):
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")  # noqa: E501

        self.__description = description

    @property
    def placement_type(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.images.PlacementType`
        """  # noqa: E501
        return self.__placement_type

    @placement_type.setter
    def placement_type(self, placement_type):
        if placement_type is None:
            raise ValueError("Invalid value for `placement_type`, must not be `None`")  # noqa: E501

        self.__placement_type = placement_type

    @property
    def image_entity_filter(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.images.EntityFilter`
        """  # noqa: E501
        return self.__image_entity_filter

    @image_entity_filter.setter
    def image_entity_filter(self, image_entity_filter):
        if image_entity_filter is None:
            raise ValueError("Invalid value for `image_entity_filter`, must not be `None`")  # noqa: E501

        self.__image_entity_filter = image_entity_filter

    @property
    def cluster_entity_filter(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.images.EntityFilter`
        """  # noqa: E501
        return self.__cluster_entity_filter

    @cluster_entity_filter.setter
    def cluster_entity_filter(self, cluster_entity_filter):
        if cluster_entity_filter is None:
            raise ValueError("Invalid value for `cluster_entity_filter`, must not be `None`")  # noqa: E501

        self.__cluster_entity_filter = cluster_entity_filter

    @property
    def enforcement_state(self):
        """
        

        :type:
            :class:`~ntnx_vmm_py_client.models.vmm.v4.images.EnforcementState`
        """  # noqa: E501
        return self.__enforcement_state

    @enforcement_state.setter
    def enforcement_state(self, enforcement_state):

        self.__enforcement_state = enforcement_state

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(PlacementPolicy, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlacementPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

