import typing, clr, abc
from System.Collections.Generic import List_1
from System import MulticastDelegate, IAsyncResult, AsyncCallback
from System.Reflection import MethodInfo
from TransformsAI.Animo.Constants import TypeIds
from TransformsAI.Animo.Numerics import Vec3Int

class AttentionSensorShape:
    def __init__(self, maxNumObjects: int, numValuesPerObject: int) -> None: ...
    MaxNumObjects : int
    NumValuesPerObject : int


class GridSensorShape:
    def __init__(self, xLength: int, zLength: int, channelsLength: int) -> None: ...
    ChannelsLength : int
    XLength : int
    ZLength : int


class Sensor(abc.ABC):
    SensorName : str
    @property
    def SensorSpec(self) -> SensorSpec: ...


class SensorConfig:
    def __init__(self) -> None: ...
    ChildSensorConfigs : List_1[SensorConfig]
    SensorId : str
    SensorName : str
    @property
    def Item(self) -> None: ...
    @Item.setter
    def Item(self, value: SensorConfig.SensorProperty) -> None: ...
    def SetBoolOption(self, key: str, value: bool) -> None: ...
    def SetFloatOption(self, key: str, value: float) -> None: ...
    def SetIntOption(self, key: str, value: int) -> None: ...
    def SetStringOption(self, key: str, value: str) -> None: ...
    def TryGetBoolOption(self, key: str, value: clr.Reference[bool], defaultValue: bool = ...) -> bool: ...
    def TryGetFloatOption(self, key: str, value: clr.Reference[float], defaultValue: float = ...) -> bool: ...
    def TryGetIntOption(self, key: str, value: clr.Reference[int], defaultValue: int = ...) -> bool: ...
    def TryGetStringOption(self, key: str, value: clr.Reference[str], defaultValue: str = ...) -> bool: ...

    class SensorProperty:
        @property
        def Value(self) -> typing.Any: ...
        # Operator not supported op_Implicit(val: Single)
        # Operator not supported op_Implicit(val: Int32)
        # Operator not supported op_Implicit(val: String)
        # Operator not supported op_Implicit(val: Boolean)



class SensorFactory(MulticastDelegate):
    def __init__(self, object: typing.Any, method: int) -> None: ...
    @property
    def Method(self) -> MethodInfo: ...
    @property
    def Target(self) -> typing.Any: ...
    def BeginInvoke(self, config: SensorConfig, callback: AsyncCallback, object: typing.Any) -> IAsyncResult: ...
    def EndInvoke(self, result: IAsyncResult) -> Sensor: ...
    def Invoke(self, config: SensorConfig) -> Sensor: ...


class SensorRegistry:
    Instance : SensorRegistry
    def CreateSensor(self, sensorConfig: SensorConfig) -> Sensor: ...
    @staticmethod
    def GetDefaultSensorConfigs(compass1TypeId: TypeIds = ..., compass2TypeId: TypeIds = ...) -> List_1[SensorConfig]: ...


class SensorSpec:
    @property
    def AttentionShape(self) -> AttentionSensorShape: ...
    @property
    def GridShape(self) -> GridSensorShape: ...
    @property
    def SensorType(self) -> SensorTypes: ...
    @SensorType.setter
    def SensorType(self, value: SensorTypes) -> SensorTypes: ...
    @property
    def Shape(self) -> Vec3Int: ...
    @Shape.setter
    def Shape(self, value: Vec3Int) -> Vec3Int: ...
    @property
    def VectorLength(self) -> int: ...
    @staticmethod
    def Attention(maxNumObjects: int, numValuesPerObject: int) -> SensorSpec: ...
    @staticmethod
    def Grid(width: int, height: int, depth: int) -> SensorSpec: ...
    @staticmethod
    def Vector(length: int) -> SensorSpec: ...


class SensorTypes(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    Vector : SensorTypes # 0
    Attention : SensorTypes # 1
    Grid : SensorTypes # 2

