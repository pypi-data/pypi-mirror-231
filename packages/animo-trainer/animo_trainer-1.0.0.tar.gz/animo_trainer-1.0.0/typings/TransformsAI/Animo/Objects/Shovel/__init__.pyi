import typing
from TransformsAI.Animo.Rewards import TargetedReward, RewardTargetTypes, RewardTarget, Reward, ObjectDestroyedReward
from System import Array_1, IEquatable_1, Guid, ValueTuple_2
from TransformsAI.Animo.Objects.Character import CharacterObject
from TransformsAI.Animo.Intents import Intent, HeldUseIntent, UseIntent
from System.Collections.Generic import HashSet_1, List_1
from TransformsAI.Animo import GridObject, VoxelGrid, HoldableObject, Actor, ObjectInfo, ObjectGroup, Directions, GridTransform
from TransformsAI.Animo.Numerics import Vec3Int, Vec2Int
from TransformsAI.Animo.Constants import GroundMaterials, TypeIds, Effects
from TransformsAI.Animo.Rewards.Categories import RewardCategory
from TransformsAI.Animo.Tools import ReadOnlyArray_1

class DestroyBlockAtHeightReward(TargetedReward):
    def __init__(self, categoryId: str, rewardId: str) -> None: ...
    @property
    def CanUserTargetSelf(self) -> bool: ...
    @property
    def CategoryId(self) -> str: ...
    @property
    def HasTarget(self) -> bool: ...
    @property
    def RewardId(self) -> str: ...
    @property
    def Targets(self) -> Array_1[RewardTargetTypes]: ...
    def EvaluateOnIntentExecute(self, character: CharacterObject, intentCausedByCharacter: Intent, target: RewardTarget) -> bool: ...
    def TargetHeightsFilter(self, h: int) -> bool: ...


class DestroyBlockBesideReward(TargetedReward):
    def __init__(self, categoryId: str, rewardId: str) -> None: ...
    @property
    def CanUserTargetSelf(self) -> bool: ...
    @property
    def CategoryId(self) -> str: ...
    @property
    def HasTarget(self) -> bool: ...
    @property
    def RewardId(self) -> str: ...
    @property
    def Targets(self) -> Array_1[RewardTargetTypes]: ...
    def EvaluateOnIntentExecute(self, character: CharacterObject, intentCausedByCharacter: Intent, target: RewardTarget) -> bool: ...


class DestroyBlockFailReward(Reward):
    def __init__(self, categoryId: str, rewardId: str) -> None: ...
    @property
    def CategoryId(self) -> str: ...
    @property
    def HasTarget(self) -> bool: ...
    @property
    def RewardId(self) -> str: ...
    def EvaluateOnIntentExecute(self, character: CharacterObject, intentCausedByCharacter: Intent, target: typing.Optional[RewardTarget]) -> bool: ...


class DestroyBlockIntent(HeldUseIntent):
    def __init__(self) -> None: ...
    Causers : HashSet_1[GridObject]
    id : int
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def DidSucceed(self) -> bool: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def NewFloorPosition(self) -> typing.Optional[Vec3Int]: ...
    @NewFloorPosition.setter
    def NewFloorPosition(self, value: typing.Optional[Vec3Int]) -> typing.Optional[Vec3Int]: ...
    @property
    def PreviousGroundMaterial(self) -> GroundMaterials: ...
    @PreviousGroundMaterial.setter
    def PreviousGroundMaterial(self, value: GroundMaterials) -> GroundMaterials: ...
    @property
    def PreviousHeight(self) -> typing.Optional[int]: ...
    @PreviousHeight.setter
    def PreviousHeight(self, value: typing.Optional[int]) -> typing.Optional[int]: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Source(self) -> ShovelObject: ...
    @property
    def Source(self) -> HoldableObject: ...
    @property
    def Source(self) -> GridObject: ...
    @property
    def User(self) -> Actor: ...
    @User.setter
    def User(self, value: Actor) -> Actor: ...
    @property
    def UseTarget(self) -> GridObject: ...
    @property
    def WillContinueUsing(self) -> bool: ...


class DestroyBlockReward(Reward):
    def __init__(self, categoryId: str, rewardId: str) -> None: ...
    @property
    def CategoryId(self) -> str: ...
    @property
    def HasTarget(self) -> bool: ...
    @property
    def RewardId(self) -> str: ...
    def EvaluateOnIntentExecute(self, character: CharacterObject, intentCausedByCharacter: Intent, target: typing.Optional[RewardTarget]) -> bool: ...


class DestroyBlockUnderReward(TargetedReward):
    def __init__(self, categoryId: str, rewardId: str) -> None: ...
    @property
    def CanUserTargetSelf(self) -> bool: ...
    @property
    def CategoryId(self) -> str: ...
    @property
    def HasTarget(self) -> bool: ...
    @property
    def RewardId(self) -> str: ...
    @property
    def Targets(self) -> Array_1[RewardTargetTypes]: ...
    def EvaluateOnIntentExecute(self, character: CharacterObject, intentCausedByCharacter: Intent, target: RewardTarget) -> bool: ...


class ShovelInfo(ObjectInfo, IEquatable_1[ShovelInfo]):
    def __init__(self) -> None: ...
    @property
    def CanStepOnObjects(self) -> bool: ...
    @property
    def CreatesObjects(self) -> Array_1[TypeIds]: ...
    @property
    def IsDestroyedInDeepWater(self) -> bool: ...
    @property
    def IsDestroyedInShallowWater(self) -> bool: ...
    @property
    def IsDestructible(self) -> bool: ...
    @property
    def IsGrabbable(self) -> bool: ...
    @property
    def IsOccupier(self) -> bool: ...
    @property
    def IsUsableOnGrid(self) -> bool: ...
    @property
    def LabelName(self) -> str: ...
    @property
    def MaximumBurnAmount(self) -> int: ...
    @property
    def ObjectGroup(self) -> ObjectGroup: ...
    @property
    def TransformsInto(self) -> Array_1[TypeIds]: ...
    @property
    def Type(self) -> typing.Type[typing.Any]: ...
    @property
    def TypeId(self) -> TypeIds: ...
    @property
    def UsePriority(self) -> float: ...
    def CanReceiveEffect(self, effect: Effects) -> bool: ...
    def CreateObject(self) -> GridObject: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, left: ShovelInfo, right: ShovelInfo) -> bool: ...
    def __ne__(self, left: ShovelInfo, right: ShovelInfo) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: ShovelInfo) -> bool:...
        @typing.overload
        def __call__(self, other: ObjectInfo) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class ShovelObject(HoldableObject):
    def __init__(self) -> None: ...
    DestroyedBlockPosition : typing.Optional[Vec3Int]
    Info : ObjectInfo
    @property
    def BurnAmount(self) -> int: ...
    @property
    def Cell(self) -> Vec2Int: ...
    @property
    def Container(self) -> GridObject: ...
    @Container.setter
    def Container(self, value: GridObject) -> GridObject: ...
    @property
    def Direction(self) -> Directions: ...
    @property
    def GrabPriority(self) -> float: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def Height(self) -> int: ...
    @property
    def Holder(self) -> Actor: ...
    @property
    def InstanceId(self) -> Guid: ...
    @property
    def IntentsFiredThisTurn(self) -> List_1[Intent]: ...
    @property
    def IsBeingHeld(self) -> bool: ...
    @property
    def IsOnGrid(self) -> bool: ...
    @property
    def IsStoodUpon(self) -> bool: ...
    @property
    def MainIntent(self) -> Intent: ...
    @property
    def OriginalInstanceId(self) -> Guid: ...
    @property
    def Position(self) -> Vec3Int: ...
    @property
    def StateObservation(self) -> ValueTuple_2[float, float]: ...
    @property
    def Transform(self) -> GridTransform: ...
    @Transform.setter
    def Transform(self, value: GridTransform) -> GridTransform: ...
    @property
    def TransformedInto(self) -> GridObject: ...
    @property
    def TransformOnGrid(self) -> None: ...
    @TransformOnGrid.setter
    def TransformOnGrid(self, value: typing.Optional[GridTransform]) -> None: ...
    @property
    def TypeId(self) -> TypeIds: ...
    @property
    def UsedIntent(self) -> UseIntent: ...
    @property
    def VariantId(self) -> int: ...
    @VariantId.setter
    def VariantId(self, value: int) -> int: ...
    @property
    def WasDestroyedOrTransformed(self) -> bool: ...
    def GetUseIntentHeld(self, user: Actor) -> UseIntent: ...


class ShovelRewards(RewardCategory):
    def __init__(self) -> None: ...
    DestroyBlock : DestroyBlockReward
    DestroyBlockAtHeight : DestroyBlockAtHeightReward
    DestroyBlockBeside : DestroyBlockBesideReward
    DestroyBlockFail : DestroyBlockFailReward
    DestroyBlockUnder : DestroyBlockUnderReward
    name : str
    ObjectDestroyed : ObjectDestroyedReward
    @property
    def AssociatedObject(self) -> typing.Optional[TypeIds]: ...
    @property
    def CategoryId(self) -> str: ...
    @property
    def Rewards(self) -> ReadOnlyArray_1[Reward]: ...

