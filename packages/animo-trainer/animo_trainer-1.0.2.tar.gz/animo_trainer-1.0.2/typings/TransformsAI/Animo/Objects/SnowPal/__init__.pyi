import typing
from TransformsAI.Animo.Intents import Intent, UseIntent
from System.Collections.Generic import HashSet_1, List_1
from TransformsAI.Animo import GridObject, VoxelGrid, Actor, ObjectInfo, ObjectGroup, HoldableObject, Directions, GridTransform
from TransformsAI.Animo.Constants import TypeIds, Effects
from TransformsAI.Animo.Rewards import Reward, RewardTarget, ObjectDestroyedReward
from TransformsAI.Animo.Objects.Character import CharacterObject
from System import IEquatable_1, Array_1, Guid, ValueTuple_2
from TransformsAI.Animo.Numerics import Vec2Int, Vec3Int
from TransformsAI.Animo.Tools import CellCondition, TraversalCheck, ReadOnlyArray_1
from TransformsAI.Animo.Rewards.Categories import RewardCategory

class CreateHeldObjectIntent(Intent):
    def __init__(self) -> None: ...
    Causers : HashSet_1[GridObject]
    id : int
    TypeId : TypeIds
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Source(self) -> Actor: ...
    @property
    def Source(self) -> GridObject: ...


class HurtingSnowPalReward(Reward):
    def __init__(self, categoryId: str, rewardId: str) -> None: ...
    @property
    def CategoryId(self) -> str: ...
    @property
    def HasTarget(self) -> bool: ...
    @property
    def RewardId(self) -> str: ...
    def EvaluateOnIntentExecute(self, character: CharacterObject, intentCausedByCharacter: Intent, target: typing.Optional[RewardTarget]) -> bool: ...


class MakingSnowPalReward(Reward):
    def __init__(self, categoryId: str, rewardId: str) -> None: ...
    @property
    def CategoryId(self) -> str: ...
    @property
    def HasTarget(self) -> bool: ...
    @property
    def RewardId(self) -> str: ...
    def EvaluateOnIntentExecute(self, character: CharacterObject, intentCausedByCharacter: Intent, target: typing.Optional[RewardTarget]) -> bool: ...


class OnSnowPalHurtIntent(Intent):
    def __init__(self) -> None: ...
    Causers : HashSet_1[GridObject]
    id : int
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Source(self) -> GridObject: ...


class SnowPalInfo(ObjectInfo, IEquatable_1[SnowPalInfo]):
    def __init__(self) -> None: ...
    @property
    def CanStepOnObjects(self) -> bool: ...
    @property
    def CreatesObjects(self) -> Array_1[TypeIds]: ...
    @property
    def IsDestroyedInDeepWater(self) -> bool: ...
    @property
    def IsDestroyedInShallowWater(self) -> bool: ...
    @property
    def IsDestructible(self) -> bool: ...
    @property
    def IsGrabbable(self) -> bool: ...
    @property
    def IsOccupier(self) -> bool: ...
    @property
    def IsUsableOnGrid(self) -> bool: ...
    @property
    def LabelName(self) -> str: ...
    @property
    def MaximumBurnAmount(self) -> int: ...
    @property
    def ObjectGroup(self) -> ObjectGroup: ...
    @property
    def TransformsInto(self) -> Array_1[TypeIds]: ...
    @property
    def Type(self) -> typing.Type[typing.Any]: ...
    @property
    def TypeId(self) -> TypeIds: ...
    @property
    def UsePriority(self) -> float: ...
    def CanReceiveEffect(self, effect: Effects) -> bool: ...
    def CreateObject(self) -> GridObject: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, left: SnowPalInfo, right: SnowPalInfo) -> bool: ...
    def __ne__(self, left: SnowPalInfo, right: SnowPalInfo) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: SnowPalInfo) -> bool:...
        @typing.overload
        def __call__(self, other: ObjectInfo) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class SnowPalObject(Actor):
    def __init__(self) -> None: ...
    Action : SnowPalObject.Actions
    ActionOverride : typing.Optional[SnowPalObject.Actions]
    Alertness : float
    AlertnessIncreaseRate : float
    AttackDistance : float
    DidTransitionState : bool
    ForceMoveCell : Vec2Int
    HitCount : int
    HomeCell : typing.Optional[Vec2Int]
    Info : ObjectInfo
    IsAiming : bool
    IsInert : bool
    IsSleeping : bool
    LastTurnHeldObject : HoldableObject
    LeashDistance : float
    MaxHits : int
    MaxSleepDistance : float
    MinFleeDistance : float
    RandomRotationProb : float
    snowPalAttackCellCondition : CellCondition
    snowPalFleeCellCondition : CellCondition
    snowPalSleepCellCondition : CellCondition
    snowPalTraversalCheck : TraversalCheck
    State : SnowPalObject.States
    ThrowDistance : float
    Tiredness : float
    TirednessIncreaseRate : float
    TurnsUntilAlert : int
    TurnsWanderingBeforeTired : int
    WasCreatedBySnowballsThisTurn : bool
    @property
    def BurnAmount(self) -> int: ...
    @property
    def Cell(self) -> Vec2Int: ...
    @property
    def Container(self) -> GridObject: ...
    @Container.setter
    def Container(self, value: GridObject) -> GridObject: ...
    @property
    def DidDropFail(self) -> bool: ...
    @property
    def DidGrabFail(self) -> bool: ...
    @property
    def Direction(self) -> Directions: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def Height(self) -> int: ...
    @property
    def HeldObject(self) -> HoldableObject: ...
    @property
    def InstanceId(self) -> Guid: ...
    @property
    def IntentsFiredThisTurn(self) -> List_1[Intent]: ...
    @property
    def IsOnGrid(self) -> bool: ...
    @property
    def IsStoodUpon(self) -> bool: ...
    @property
    def MainIntent(self) -> Intent: ...
    @property
    def OriginalInstanceId(self) -> Guid: ...
    @property
    def Position(self) -> Vec3Int: ...
    @property
    def StateObservation(self) -> ValueTuple_2[float, float]: ...
    @property
    def Transform(self) -> GridTransform: ...
    @Transform.setter
    def Transform(self, value: GridTransform) -> GridTransform: ...
    @property
    def TransformedInto(self) -> GridObject: ...
    @property
    def TransformOnGrid(self) -> None: ...
    @TransformOnGrid.setter
    def TransformOnGrid(self, value: typing.Optional[GridTransform]) -> None: ...
    @property
    def TypeId(self) -> TypeIds: ...
    @property
    def UsedIntent(self) -> UseIntent: ...
    @property
    def VariantId(self) -> int: ...
    @VariantId.setter
    def VariantId(self, value: int) -> int: ...
    @property
    def WasDestroyedOrTransformed(self) -> bool: ...
    def CanGrab(self, holdableObject: HoldableObject, ignoreAlreadyHeld: bool = ...) -> bool: ...
    def CanWalkForward(self) -> bool: ...
    @staticmethod
    def CanWalkThrough(grid: VoxelGrid, fromCell: Vec2Int, toCell: Vec2Int) -> bool: ...
    def ForceMoveToCell(self, cell: Vec2Int) -> None: ...
    def GetTapOverrideIntent(self, actor: Actor) -> Intent: ...
    def OnDestroyed(self, originGrid: VoxelGrid, outIntents: List_1[Intent]) -> None: ...
    def OnEffect(self, effect: Effects, source: GridObject, outIntents: List_1[Intent]) -> bool: ...

    class Actions(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Wait : SnowPalObject.Actions # 0
        MoveForward : SnowPalObject.Actions # 1
        TurnRight : SnowPalObject.Actions # 2
        TurnLeft : SnowPalObject.Actions # 3
        TurnAround : SnowPalObject.Actions # 4
        ThrowSnowball : SnowPalObject.Actions # 5
        SpawnSnowball : SnowPalObject.Actions # 6


    class States(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Wander : SnowPalObject.States # 0
        Attack : SnowPalObject.States # 1
        ForceMove : SnowPalObject.States # 2
        TiredSleep : SnowPalObject.States # 3
        Flee : SnowPalObject.States # 4



class SnowPalRewards(RewardCategory):
    def __init__(self) -> None: ...
    Destroyed : ObjectDestroyedReward
    HurtingSnowPal : HurtingSnowPalReward
    MakingSnowPal : MakingSnowPalReward
    name : str
    @property
    def AssociatedObject(self) -> typing.Optional[TypeIds]: ...
    @property
    def CategoryId(self) -> str: ...
    @property
    def Rewards(self) -> ReadOnlyArray_1[Reward]: ...

