import typing
from System.Collections.Generic import List_1
from TransformsAI.Animo.Learning.Sensors import SensorConfig, Sensor
from TransformsAI.Animo.Rewards import RewardFunction
from System import Array_1, IComparable_1, IEquatable_1
from TransformsAI.Animo.Tools import Wiggle
from TransformsAI.Animo.Learning import EndCondition
from TransformsAI.Animo import VoxelGrid

class AgentData:
    def __init__(self) -> None: ...
    SensorConfigs : List_1[SensorConfig]
    @property
    def CurrentRewards(self) -> List_1[RewardFunction]: ...
    @CurrentRewards.setter
    def CurrentRewards(self, value: List_1[RewardFunction]) -> List_1[RewardFunction]: ...
    @property
    def Id(self) -> int: ...
    @Id.setter
    def Id(self, value: int) -> int: ...
    @property
    def SelectedCheckpointId(self) -> CheckpointId: ...
    @property
    def SelectedCheckpointTimestamp(self) -> int: ...
    @SelectedCheckpointTimestamp.setter
    def SelectedCheckpointTimestamp(self, value: int) -> int: ...
    def AddAndSelectCheckpoint(self, cp: CheckpointData) -> None: ...
    def ConstructSensors(self) -> Array_1[Sensor]: ...
    def GetCompassSensorConfig(self, index: int) -> SensorConfig: ...


class CheckpointData:
    def __init__(self, agentId: int, timestamp: int, trainingSessionId: str) -> None: ...
    @property
    def AgentId(self) -> int: ...
    @AgentId.setter
    def AgentId(self, value: int) -> int: ...
    @property
    def EpisodeCount(self) -> int: ...
    @property
    def Episodes(self) -> Array_1[EpisodeData]: ...
    @Episodes.setter
    def Episodes(self, value: Array_1[EpisodeData]) -> Array_1[EpisodeData]: ...
    @property
    def Id(self) -> CheckpointId: ...
    @property
    def MeanReward(self) -> float: ...
    @MeanReward.setter
    def MeanReward(self, value: float) -> float: ...
    @property
    def OccurrencesByIndex(self) -> Array_1[int]: ...
    @OccurrencesByIndex.setter
    def OccurrencesByIndex(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def RewardFunctions(self) -> List_1[RewardFunction]: ...
    @RewardFunctions.setter
    def RewardFunctions(self, value: List_1[RewardFunction]) -> List_1[RewardFunction]: ...
    @property
    def RewardOccurrences(self) -> Array_1[RewardOccurrenceData]: ...
    @RewardOccurrences.setter
    def RewardOccurrences(self, value: Array_1[RewardOccurrenceData]) -> Array_1[RewardOccurrenceData]: ...
    @property
    def Timestamp(self) -> int: ...
    @Timestamp.setter
    def Timestamp(self, value: int) -> int: ...
    @property
    def TrainingSessionId(self) -> str: ...
    @TrainingSessionId.setter
    def TrainingSessionId(self, value: str) -> str: ...
    def GetMeanReward(self, meanType: CheckpointData.MeanTypes = ...) -> float: ...
    def MeanOccurrencesByIndex(self, i: int) -> float: ...
    def MeanRewardByIndex(self, i: int) -> float: ...

    class MeanTypes(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        All : CheckpointData.MeanTypes # 0
        Positive : CheckpointData.MeanTypes # 1
        Negative : CheckpointData.MeanTypes # 2



class CheckpointId(IComparable_1[CheckpointId], IEquatable_1[CheckpointId]):
    def __init__(self, agentId: int, timestamp: int) -> None: ...
    AgentId : int
    Timestamp : int
    def CompareTo(self, other: CheckpointId) -> int: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, left: CheckpointId, right: CheckpointId) -> bool: ...
    def __ne__(self, left: CheckpointId, right: CheckpointId) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: CheckpointId) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class EpisodeData:
    def __init__(self) -> None: ...
    @property
    def OccurrencesByIndex(self) -> Array_1[int]: ...
    @OccurrencesByIndex.setter
    def OccurrencesByIndex(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def StepCount(self) -> int: ...
    @StepCount.setter
    def StepCount(self, value: int) -> int: ...
    @property
    def TotalReward(self) -> float: ...
    @TotalReward.setter
    def TotalReward(self, value: float) -> float: ...


class LevelData:
    def __init__(self) -> None: ...
    @property
    def BlockWiggle(self) -> Wiggle: ...
    @BlockWiggle.setter
    def BlockWiggle(self, value: Wiggle) -> Wiggle: ...
    @property
    def CharacterWiggle(self) -> Wiggle: ...
    @CharacterWiggle.setter
    def CharacterWiggle(self, value: Wiggle) -> Wiggle: ...
    @property
    def EndConditions(self) -> EndCondition: ...
    @EndConditions.setter
    def EndConditions(self, value: EndCondition) -> EndCondition: ...
    @property
    def Id(self) -> str: ...
    @Id.setter
    def Id(self, value: str) -> str: ...
    @property
    def ObjectWiggle(self) -> Wiggle: ...
    @ObjectWiggle.setter
    def ObjectWiggle(self, value: Wiggle) -> Wiggle: ...
    @property
    def SavedGrid(self) -> VoxelGrid: ...
    @SavedGrid.setter
    def SavedGrid(self, value: VoxelGrid) -> VoxelGrid: ...


class RewardOccurrenceData:
    @property
    def Episode(self) -> int: ...
    @Episode.setter
    def Episode(self, value: int) -> int: ...
    @property
    def RewardIndex(self) -> int: ...
    @RewardIndex.setter
    def RewardIndex(self, value: int) -> int: ...
    @property
    def Step(self) -> int: ...
    @Step.setter
    def Step(self, value: int) -> int: ...

