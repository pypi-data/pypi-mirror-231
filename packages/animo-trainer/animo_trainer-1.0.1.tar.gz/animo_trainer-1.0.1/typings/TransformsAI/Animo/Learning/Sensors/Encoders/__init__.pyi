import typing, abc
from System import Span_1, ValueTuple_3
from TransformsAI.Animo import ObjectInfo, GridObject, VoxelGrid
from TransformsAI.Animo.Objects.Character import CharacterObject
from TransformsAI.Animo.Numerics import Vec2Int

class ObjectObservationEncodings(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    OneHot : ObjectObservationEncodings # 0
    Properties : ObjectObservationEncodings # 1
    Binary : ObjectObservationEncodings # 2
    Ternary : ObjectObservationEncodings # 3


class ObservationEncoder(abc.ABC):
    NumTerrainProperties : int
    ObjectPropertiesLength : int
    @staticmethod
    def AddBinaryNumberObservation(number: int, outTargetSpan: Span_1[float]) -> None: ...
    @staticmethod
    def AddObjectPropertiesObservation(objectInfo: ObjectInfo, values: Span_1[float]) -> None: ...
    @staticmethod
    def AddObjectTypeObservation(observedObject: GridObject, objectObservationEncoding: ObjectObservationEncodings, outTargetSpan: Span_1[float]) -> None: ...
    @staticmethod
    def AddTernaryNumberObservation(number: int, outTargetSpan: Span_1[float]) -> None: ...
    @staticmethod
    def AddTerrainPropertiesObservation(character: CharacterObject, absoluteCell: Vec2Int, values: Span_1[float]) -> None: ...
    @staticmethod
    def CanBeDestroyed(objectInfo: ObjectInfo) -> int: ...
    @staticmethod
    def DoesDamage(objectInfo: ObjectInfo) -> int: ...
    @staticmethod
    def FlowerLike(objectInfo: ObjectInfo) -> int: ...
    @staticmethod
    def GetObjectTypeObservationLength(observationEncoding: ObjectObservationEncodings) -> int: ...
    @staticmethod
    def HasOccupier(absoluteCell: Vec2Int, grid: VoxelGrid) -> ValueTuple_3[int, int, int]: ...
    @staticmethod
    def IsCharacter(objectInfo: ObjectInfo) -> int: ...
    @staticmethod
    def IsCollectible(objectInfo: ObjectInfo) -> int: ...
    @staticmethod
    def IsDeepWater(absoluteCell: Vec2Int, grid: VoxelGrid) -> int: ...
    @staticmethod
    def IsDroppedWhenUsed(objectInfo: ObjectInfo) -> int: ...
    @staticmethod
    def IsFire(objectInfo: ObjectInfo) -> int: ...
    @staticmethod
    def IsFood(objectInfo: ObjectInfo) -> int: ...
    @staticmethod
    def IsForbiddenCell(absoluteCell: Vec2Int, grid: VoxelGrid) -> int: ...
    @staticmethod
    def IsHoldable(objectInfo: ObjectInfo) -> int: ...
    @staticmethod
    def IsNPC(objectInfo: ObjectInfo) -> int: ...
    @staticmethod
    def IsOneAbove(relativeHeight: int) -> int: ...
    @staticmethod
    def IsOneBelow(relativeHeight: int) -> int: ...
    @staticmethod
    def IsPaint(objectInfo: ObjectInfo) -> int: ...
    @staticmethod
    def IsPaintColourRed(objectInfo: ObjectInfo) -> int: ...
    @staticmethod
    def IsSameHeight(relativeHeight: int) -> int: ...
    @staticmethod
    def IsShallowWater(absoluteCell: Vec2Int, grid: VoxelGrid) -> int: ...
    @staticmethod
    def IsTwoOrMoreAbove(relativeHeight: int) -> int: ...
    @staticmethod
    def IsTwoOrMoreBelow(relativeHeight: int) -> int: ...
    @staticmethod
    def MakesFire(objectInfo: ObjectInfo) -> int: ...
    @staticmethod
    def MakesStuff(objectInfo: ObjectInfo) -> int: ...
    @staticmethod
    def MovesStuff(objectInfo: ObjectInfo) -> int: ...
    @staticmethod
    def NormalizedRelativeHeight(relativeHeight: int) -> float: ...
    @staticmethod
    def TreeLike(objectInfo: ObjectInfo) -> int: ...
    @staticmethod
    def UsableOnGrid(objectInfo: ObjectInfo) -> int: ...

