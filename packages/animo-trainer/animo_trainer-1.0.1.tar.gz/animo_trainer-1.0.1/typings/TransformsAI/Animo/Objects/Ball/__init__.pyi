import typing, abc
from TransformsAI.Animo.Rewards import Reward, RewardTarget, TargetedReward, RewardTargetTypes, ObjectDestroyedReward
from TransformsAI.Animo.Objects.Character import CharacterObject
from System import Array_1, IEquatable_1, ValueTuple_2, Guid
from TransformsAI.Animo.Intents import Intent, UseIntent, ProjectileIntent, HeldUseIntent, ArcLaunchIntent
from TransformsAI.Animo import ObjectInfo, ObjectGroup, GridObject, IntentConflictResolver, HoldableObject, Directions, VoxelGrid, Actor, GridTransform
from TransformsAI.Animo.Constants import TypeIds, Effects
from System.Collections.Generic import List_1, HashSet_1
from TransformsAI.Animo.Numerics import Vec2Int, Vec3Int
from TransformsAI.Animo.Rewards.Categories import RewardCategory
from TransformsAI.Animo.Tools import ReadOnlyArray_1

class BallCatchReward(Reward):
    def __init__(self, categoryId: str, rewardId: str) -> None: ...
    @property
    def CategoryId(self) -> str: ...
    @property
    def HasTarget(self) -> bool: ...
    @property
    def RewardId(self) -> str: ...
    def EvaluateAfterStep(self, character: CharacterObject, target: typing.Optional[RewardTarget]) -> bool: ...


class BallFlyOverTargetReward(TargetedReward):
    def __init__(self, categoryId: str, rewardId: str) -> None: ...
    @property
    def CanUserTargetSelf(self) -> bool: ...
    @property
    def CategoryId(self) -> str: ...
    @property
    def HasTarget(self) -> bool: ...
    @property
    def RewardId(self) -> str: ...
    @property
    def Targets(self) -> Array_1[RewardTargetTypes]: ...
    def EvaluateOnIntentExecute(self, character: CharacterObject, intentCausedByCharacter: Intent, target: RewardTarget) -> bool: ...


class BallHitTargetReward(TargetedReward):
    def __init__(self, categoryId: str, rewardId: str) -> None: ...
    @property
    def CanUserTargetSelf(self) -> bool: ...
    @property
    def CategoryId(self) -> str: ...
    @property
    def HasTarget(self) -> bool: ...
    @property
    def RewardId(self) -> str: ...
    @property
    def Targets(self) -> Array_1[RewardTargetTypes]: ...
    def EvaluateOnIntentExecute(self, character: CharacterObject, intentCausedByCharacter: Intent, target: RewardTarget) -> bool: ...


class BallInfo(ObjectInfo, IEquatable_1[BallInfo]):
    def __init__(self) -> None: ...
    @property
    def CanStepOnObjects(self) -> bool: ...
    @property
    def CreatesObjects(self) -> Array_1[TypeIds]: ...
    @property
    def IsDestroyedInDeepWater(self) -> bool: ...
    @property
    def IsDestroyedInShallowWater(self) -> bool: ...
    @property
    def IsDestructible(self) -> bool: ...
    @property
    def IsGrabbable(self) -> bool: ...
    @property
    def IsOccupier(self) -> bool: ...
    @property
    def IsUsableOnGrid(self) -> bool: ...
    @property
    def LabelName(self) -> str: ...
    @property
    def MaximumBurnAmount(self) -> int: ...
    @property
    def ObjectGroup(self) -> ObjectGroup: ...
    @property
    def TransformsInto(self) -> Array_1[TypeIds]: ...
    @property
    def Type(self) -> typing.Type[typing.Any]: ...
    @property
    def TypeId(self) -> TypeIds: ...
    @property
    def UsePriority(self) -> float: ...
    def CanReceiveEffect(self, effect: Effects) -> bool: ...
    def CreateObject(self) -> GridObject: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, left: BallInfo, right: BallInfo) -> bool: ...
    def __ne__(self, left: BallInfo, right: BallInfo) -> bool: ...
    def RegisterConflictResolvers(self) -> List_1[ValueTuple_2[float, IntentConflictResolver]]: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: BallInfo) -> bool:...
        @typing.overload
        def __call__(self, other: ObjectInfo) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class BallKickReward(Reward):
    def __init__(self, categoryId: str, rewardId: str) -> None: ...
    @property
    def CategoryId(self) -> str: ...
    @property
    def HasTarget(self) -> bool: ...
    @property
    def RewardId(self) -> str: ...
    def EvaluateOnIntentExecute(self, character: CharacterObject, intentCausedByCharacter: Intent, target: typing.Optional[RewardTarget]) -> bool: ...


class BallLandOnReward(TargetedReward):
    def __init__(self, categoryId: str, rewardId: str) -> None: ...
    @property
    def CanUserTargetSelf(self) -> bool: ...
    @property
    def CategoryId(self) -> str: ...
    @property
    def HasTarget(self) -> bool: ...
    @property
    def RewardId(self) -> str: ...
    @property
    def Targets(self) -> Array_1[RewardTargetTypes]: ...
    def EvaluateOnIntentExecute(self, character: CharacterObject, intentCausedByCharacter: Intent, target: RewardTarget) -> bool: ...
    def TargetObjectTypeFilter(self, obj: ObjectInfo) -> bool: ...


class BallObject(HoldableObject):
    def __init__(self) -> None: ...
    Info : ObjectInfo
    @property
    def BurnAmount(self) -> int: ...
    @property
    def Cell(self) -> Vec2Int: ...
    @property
    def Container(self) -> GridObject: ...
    @Container.setter
    def Container(self, value: GridObject) -> GridObject: ...
    @property
    def Direction(self) -> Directions: ...
    @property
    def GrabPriority(self) -> float: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def Height(self) -> int: ...
    @property
    def Holder(self) -> Actor: ...
    @property
    def InstanceId(self) -> Guid: ...
    @property
    def IntentsFiredThisTurn(self) -> List_1[Intent]: ...
    @property
    def IsBeingHeld(self) -> bool: ...
    @property
    def IsOnGrid(self) -> bool: ...
    @property
    def IsStoodUpon(self) -> bool: ...
    @property
    def MainIntent(self) -> Intent: ...
    @property
    def OriginalInstanceId(self) -> Guid: ...
    @property
    def Position(self) -> Vec3Int: ...
    @property
    def StateObservation(self) -> ValueTuple_2[float, float]: ...
    @property
    def Transform(self) -> GridTransform: ...
    @Transform.setter
    def Transform(self, value: GridTransform) -> GridTransform: ...
    @property
    def TransformedInto(self) -> GridObject: ...
    @property
    def TransformOnGrid(self) -> None: ...
    @TransformOnGrid.setter
    def TransformOnGrid(self, value: typing.Optional[GridTransform]) -> None: ...
    @property
    def TypeId(self) -> TypeIds: ...
    @property
    def UsedIntent(self) -> UseIntent: ...
    @property
    def VariantId(self) -> int: ...
    @VariantId.setter
    def VariantId(self, value: int) -> int: ...
    @property
    def WasDestroyedOrTransformed(self) -> bool: ...
    def GetUseIntentHeld(self, user: Actor) -> UseIntent: ...


class BallRewards(RewardCategory):
    def __init__(self) -> None: ...
    BallFlyOverTarget : BallFlyOverTargetReward
    Catch : BallCatchReward
    Destroy : ObjectDestroyedReward
    GettingHit : GettingHitReward
    HitTarget : BallHitTargetReward
    Kick : BallKickReward
    LandOn : BallLandOnReward
    name : str
    Throw : BallThrowReward
    @property
    def AssociatedObject(self) -> typing.Optional[TypeIds]: ...
    @property
    def CategoryId(self) -> str: ...
    @property
    def Rewards(self) -> ReadOnlyArray_1[Reward]: ...


class BallRollIntent(ProjectileIntent):
    def __init__(self) -> None: ...
    BouncedGridObjects : List_1[ValueTuple_2[int, GridObject]]
    Causers : HashSet_1[GridObject]
    id : int
    RicochetedGridObjects : List_1[ValueTuple_2[int, GridObject]]
    @property
    def BounceCount(self) -> int: ...
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def CurrentDirection(self) -> Vec2Int: ...
    @property
    def Distance(self) -> int: ...
    @Distance.setter
    def Distance(self, value: int) -> int: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def MaxBounces(self) -> int: ...
    @MaxBounces.setter
    def MaxBounces(self, value: int) -> int: ...
    @property
    def MaxRicochets(self) -> int: ...
    @MaxRicochets.setter
    def MaxRicochets(self, value: int) -> int: ...
    @property
    def OriginalDirection(self) -> Vec2Int: ...
    @OriginalDirection.setter
    def OriginalDirection(self, value: Vec2Int) -> Vec2Int: ...
    @property
    def Path(self) -> List_1[ProjectileIntent.PathPoint]: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Result(self) -> typing.Optional[BallRollIntent.Results]: ...
    @Result.setter
    def Result(self, value: typing.Optional[BallRollIntent.Results]) -> typing.Optional[BallRollIntent.Results]: ...
    @property
    def RicochetCount(self) -> int: ...
    @property
    def Source(self) -> BallObject: ...
    @property
    def Source(self) -> GridObject: ...

    class Results(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Landed : BallRollIntent.Results # 0
        Popped : BallRollIntent.Results # 1



class BallThrowReward(Reward):
    def __init__(self, categoryId: str, rewardId: str) -> None: ...
    @property
    def CategoryId(self) -> str: ...
    @property
    def HasTarget(self) -> bool: ...
    @property
    def RewardId(self) -> str: ...
    def EvaluateOnIntentExecute(self, character: CharacterObject, intentCausedByCharacter: Intent, target: typing.Optional[RewardTarget]) -> bool: ...


class GettingHitReward(Reward):
    def __init__(self, categoryId: str, rewardId: str) -> None: ...
    @property
    def CategoryId(self) -> str: ...
    @property
    def HasTarget(self) -> bool: ...
    @property
    def RewardId(self) -> str: ...
    def EvaluateAfterStep(self, character: CharacterObject, target: typing.Optional[RewardTarget]) -> bool: ...


class KickBallIntent(UseIntent):
    def __init__(self) -> None: ...
    Causers : HashSet_1[GridObject]
    id : int
    KickDistance : int
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def DidSucceed(self) -> bool: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def Priority(self) -> float: ...
    @property
    def RollBallIntent(self) -> BallRollIntent: ...
    @RollBallIntent.setter
    def RollBallIntent(self, value: BallRollIntent) -> BallRollIntent: ...
    @property
    def Source(self) -> BallObject: ...
    @property
    def Source(self) -> GridObject: ...
    @property
    def User(self) -> Actor: ...
    @User.setter
    def User(self, value: Actor) -> Actor: ...
    @property
    def WillContinueUsing(self) -> bool: ...
    @staticmethod
    def ResolveKick(originalIntents: List_1[Intent]) -> None: ...


class LineHelpers(abc.ABC):
    @staticmethod
    def RasterizeLine(origin: Vec2Int, endPoint: Vec2Int, outCells: List_1[Vec2Int]) -> None: ...


class ThrowBallIntent(HeldUseIntent):
    def __init__(self) -> None: ...
    Arc : Array_1[int]
    BounceArc : Array_1[int]
    Causers : HashSet_1[GridObject]
    id : int
    @property
    def ArcIntent(self) -> ArcLaunchIntent: ...
    @ArcIntent.setter
    def ArcIntent(self, value: ArcLaunchIntent) -> ArcLaunchIntent: ...
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def DidSucceed(self) -> bool: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Source(self) -> BallObject: ...
    @property
    def Source(self) -> HoldableObject: ...
    @property
    def Source(self) -> GridObject: ...
    @property
    def User(self) -> Actor: ...
    @User.setter
    def User(self, value: Actor) -> Actor: ...
    @property
    def UseTarget(self) -> GridObject: ...
    @property
    def WillContinueUsing(self) -> bool: ...

