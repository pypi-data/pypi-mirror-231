import typing
from TransformsAI.Animo import ObjectInfo, ObjectGroup, GridObject, IntentConflictResolver, Actor, HoldableObject, Directions, VoxelGrid, GridTransform
from System import IEquatable_1, Array_1, ValueTuple_2, Guid
from TransformsAI.Animo.Constants import TypeIds, Effects
from System.Collections.Generic import List_1, HashSet_1
from TransformsAI.Animo.Numerics import Vec2Int, Vec3Int
from TransformsAI.Animo.Tools import TraversalCheck, CellCondition, ReadOnlyArray_1
from TransformsAI.Animo.Intents import Intent, UseIntent
from TransformsAI.Animo.Rewards.Categories import RewardCategory
from TransformsAI.Animo.Rewards import ObjectDestroyedReward, Reward, RewardTarget
from TransformsAI.Animo.Objects.Character import CharacterObject

class DogInfo(ObjectInfo, IEquatable_1[DogInfo]):
    def __init__(self) -> None: ...
    @property
    def CanStepOnObjects(self) -> bool: ...
    @property
    def CreatesObjects(self) -> Array_1[TypeIds]: ...
    @property
    def IsDestroyedInDeepWater(self) -> bool: ...
    @property
    def IsDestroyedInShallowWater(self) -> bool: ...
    @property
    def IsDestructible(self) -> bool: ...
    @property
    def IsGrabbable(self) -> bool: ...
    @property
    def IsOccupier(self) -> bool: ...
    @property
    def IsUsableOnGrid(self) -> bool: ...
    @property
    def LabelName(self) -> str: ...
    @property
    def MaximumBurnAmount(self) -> int: ...
    @property
    def ObjectGroup(self) -> ObjectGroup: ...
    @property
    def TransformsInto(self) -> Array_1[TypeIds]: ...
    @property
    def Type(self) -> typing.Type[typing.Any]: ...
    @property
    def TypeId(self) -> TypeIds: ...
    @property
    def UsePriority(self) -> float: ...
    def CanReceiveEffect(self, effect: Effects) -> bool: ...
    def CreateObject(self) -> GridObject: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, left: DogInfo, right: DogInfo) -> bool: ...
    def __ne__(self, left: DogInfo, right: DogInfo) -> bool: ...
    def RegisterConflictResolvers(self) -> List_1[ValueTuple_2[float, IntentConflictResolver]]: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: DogInfo) -> bool:...
        @typing.overload
        def __call__(self, other: ObjectInfo) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class DogObject(Actor):
    def __init__(self) -> None: ...
    ActorOfInterest : Actor
    BallReturnMaxDistance : int
    BallThrower : GridObject
    Boredom : float
    BoredomDecreaseRate : float
    BoredomIncreaseRate : float
    DebugPath : List_1[Vec2Int]
    DidTransitionState : bool
    dogTraversalCheck : TraversalCheck
    FetchedBall : HoldableObject
    FirstAction : DogObject.Actions
    firstActionOverride : typing.Optional[DogObject.Actions]
    ForceMoveTarget : Vec2Int
    ForceMoveWillRun : bool
    GrabDropProbability : float
    HomeCell : typing.Optional[Vec2Int]
    Info : ObjectInfo
    InterestDuration : int
    InterestedActorDesiredProximity : int
    IsSleeping : bool
    LastTurnHeldObject : HoldableObject
    LeashDistance : float
    PlayCell : typing.Optional[Vec2Int]
    playCellCondition : CellCondition
    PlayDesiredDistance : int
    PlayPartner : Actor
    PlayPatience : float
    PlayPatienceDecreaseRate : float
    PlayPatienceDuration : int
    RandomRotationFrequency : float
    SecondAction : DogObject.Actions
    secondActionOverride : typing.Optional[DogObject.Actions]
    SleepDuration : int
    State : DogObject.States
    StepsUntilBored : int
    StepsUntilNotBored : int
    Tiredness : float
    TirednessIncreaseRate : float
    TirednessReductionRate : float
    TurnsBeforeTired : int
    @property
    def BurnAmount(self) -> int: ...
    @property
    def CanBePet(self) -> bool: ...
    @property
    def Cell(self) -> Vec2Int: ...
    @property
    def Container(self) -> GridObject: ...
    @Container.setter
    def Container(self, value: GridObject) -> GridObject: ...
    @property
    def DidDropFail(self) -> bool: ...
    @property
    def DidGrabFail(self) -> bool: ...
    @property
    def Direction(self) -> Directions: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def Height(self) -> int: ...
    @property
    def HeldObject(self) -> HoldableObject: ...
    @property
    def InstanceId(self) -> Guid: ...
    @property
    def IntentsFiredThisTurn(self) -> List_1[Intent]: ...
    @property
    def IsOnGrid(self) -> bool: ...
    @property
    def IsStoodUpon(self) -> bool: ...
    @property
    def MainIntent(self) -> Intent: ...
    @property
    def OriginalInstanceId(self) -> Guid: ...
    @property
    def Position(self) -> Vec3Int: ...
    @property
    def StateObservation(self) -> ValueTuple_2[float, float]: ...
    @property
    def Transform(self) -> GridTransform: ...
    @Transform.setter
    def Transform(self, value: GridTransform) -> GridTransform: ...
    @property
    def TransformedInto(self) -> GridObject: ...
    @property
    def TransformOnGrid(self) -> None: ...
    @TransformOnGrid.setter
    def TransformOnGrid(self, value: typing.Optional[GridTransform]) -> None: ...
    @property
    def TypeId(self) -> TypeIds: ...
    @property
    def UsedIntent(self) -> UseIntent: ...
    @property
    def VariantId(self) -> int: ...
    @VariantId.setter
    def VariantId(self, value: int) -> int: ...
    @property
    def WasDestroyedOrTransformed(self) -> bool: ...
    def BallThrown(self, ball: HoldableObject, causer: GridObject) -> None: ...
    def CanWalkForward(self) -> bool: ...
    @staticmethod
    def CanWalkThrough(grid: VoxelGrid, fromCell: Vec2Int, toCell: Vec2Int) -> bool: ...
    def ForceMove(self, target: Vec2Int, willRun: bool) -> None: ...
    def GetTapOverrideIntent(self, actor: Actor) -> Intent: ...
    def OnAfterStep(self) -> None: ...
    def Pet(self, petter: Actor) -> bool: ...

    class Actions(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Wait : DogObject.Actions # 0
        MoveForward : DogObject.Actions # 1
        TurnRight : DogObject.Actions # 2
        TurnLeft : DogObject.Actions # 3
        TurnAround : DogObject.Actions # 4
        Grab : DogObject.Actions # 5
        Drop : DogObject.Actions # 6
        Poop : DogObject.Actions # 7


    class States(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        BoredMoveRandomly : DogObject.States # 0
        Play : DogObject.States # 1
        BeingPet : DogObject.States # 2
        Interested : DogObject.States # 3
        FetchGetBall : DogObject.States # 4
        FetchReturnBall : DogObject.States # 5
        ForceMove : DogObject.States # 6
        TiredSleep : DogObject.States # 7



class DogRewards(RewardCategory):
    def __init__(self) -> None: ...
    DestroyDog : ObjectDestroyedReward
    name : str
    PetDog : PetDogReward
    @property
    def AssociatedObject(self) -> typing.Optional[TypeIds]: ...
    @property
    def CategoryId(self) -> str: ...
    @property
    def Rewards(self) -> ReadOnlyArray_1[Reward]: ...


class PetDogIntent(UseIntent):
    def __init__(self) -> None: ...
    Causers : HashSet_1[GridObject]
    id : int
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def DidSucceed(self) -> bool: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Source(self) -> DogObject: ...
    @property
    def Source(self) -> GridObject: ...
    @property
    def User(self) -> Actor: ...
    @User.setter
    def User(self, value: Actor) -> Actor: ...
    @property
    def WillContinueUsing(self) -> bool: ...


class PetDogReward(Reward):
    def __init__(self, categoryId: str, rewardId: str) -> None: ...
    @property
    def CategoryId(self) -> str: ...
    @property
    def HasTarget(self) -> bool: ...
    @property
    def RewardId(self) -> str: ...
    def EvaluateOnIntentExecute(self, character: CharacterObject, intentCausedByCharacter: Intent, target: typing.Optional[RewardTarget]) -> bool: ...

