import typing
from TransformsAI.Animo import ObjectInfo, ObjectGroup, GridObject, HoldableObject, Directions, VoxelGrid, Actor, GridTransform
from System import IEquatable_1, Array_1, Guid, ValueTuple_2
from TransformsAI.Animo.Constants import TypeIds, Effects
from TransformsAI.Animo.Numerics import Vec2Int, Vec3Int
from System.Collections.Generic import List_1, HashSet_1
from TransformsAI.Animo.Intents import Intent, UseIntent, HeldUseIntent
from TransformsAI.Animo.Rewards.Categories import RewardCategory
from TransformsAI.Animo.Rewards import ObjectDestroyedReward, Reward, TargetedReward, RewardTargetTypes, RewardTarget
from TransformsAI.Animo.Tools import ReadOnlyArray_1
from TransformsAI.Animo.Objects.Character import CharacterObject
from TransformsAI.Animo.Objects.FlowerSeed import FlowerSeedObject

class FlowerInfo(ObjectInfo, IEquatable_1[FlowerInfo]):
    def __init__(self) -> None: ...
    @property
    def CanStepOnObjects(self) -> bool: ...
    @property
    def CreatesObjects(self) -> Array_1[TypeIds]: ...
    @property
    def IsDestroyedInDeepWater(self) -> bool: ...
    @property
    def IsDestroyedInShallowWater(self) -> bool: ...
    @property
    def IsDestructible(self) -> bool: ...
    @property
    def IsGrabbable(self) -> bool: ...
    @property
    def IsOccupier(self) -> bool: ...
    @property
    def IsUsableOnGrid(self) -> bool: ...
    @property
    def LabelName(self) -> str: ...
    @property
    def MaximumBurnAmount(self) -> int: ...
    @property
    def ObjectGroup(self) -> ObjectGroup: ...
    @property
    def TransformsInto(self) -> Array_1[TypeIds]: ...
    @property
    def Type(self) -> typing.Type[typing.Any]: ...
    @property
    def TypeId(self) -> TypeIds: ...
    @property
    def UsePriority(self) -> float: ...
    def CanReceiveEffect(self, effect: Effects) -> bool: ...
    def CreateObject(self) -> GridObject: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, left: FlowerInfo, right: FlowerInfo) -> bool: ...
    def __ne__(self, left: FlowerInfo, right: FlowerInfo) -> bool: ...
    def ToString(self) -> str: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: FlowerInfo) -> bool:...
        @typing.overload
        def __call__(self, other: ObjectInfo) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class FlowerObject(HoldableObject):
    def __init__(self) -> None: ...
    Info : ObjectInfo
    MaxWiltDelay : int
    StepsBeforeFlowerWilts : int
    @property
    def BurnAmount(self) -> int: ...
    @property
    def Cell(self) -> Vec2Int: ...
    @property
    def Container(self) -> GridObject: ...
    @Container.setter
    def Container(self, value: GridObject) -> GridObject: ...
    @property
    def Direction(self) -> Directions: ...
    @property
    def GrabPriority(self) -> float: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def Height(self) -> int: ...
    @property
    def Holder(self) -> Actor: ...
    @property
    def InstanceId(self) -> Guid: ...
    @property
    def IntentsFiredThisTurn(self) -> List_1[Intent]: ...
    @property
    def IsBeingHeld(self) -> bool: ...
    @property
    def IsOnGrid(self) -> bool: ...
    @property
    def IsStoodUpon(self) -> bool: ...
    @property
    def MainIntent(self) -> Intent: ...
    @property
    def NormalizedWiltDelay(self) -> float: ...
    @property
    def OriginalInstanceId(self) -> Guid: ...
    @property
    def Position(self) -> Vec3Int: ...
    @property
    def StateObservation(self) -> ValueTuple_2[float, float]: ...
    @property
    def Transform(self) -> GridTransform: ...
    @Transform.setter
    def Transform(self, value: GridTransform) -> GridTransform: ...
    @property
    def TransformedInto(self) -> GridObject: ...
    @property
    def TransformOnGrid(self) -> None: ...
    @TransformOnGrid.setter
    def TransformOnGrid(self, value: typing.Optional[GridTransform]) -> None: ...
    @property
    def TypeId(self) -> TypeIds: ...
    @property
    def UsedIntent(self) -> UseIntent: ...
    @property
    def VariantId(self) -> int: ...
    @VariantId.setter
    def VariantId(self, value: int) -> int: ...
    @property
    def WasDestroyedOrTransformed(self) -> bool: ...
    def GetUseIntentHeld(self, user: Actor) -> UseIntent: ...
    def OnEffect(self, effect: Effects, source: GridObject, outIntents: List_1[Intent]) -> bool: ...
    def OnOverlapEnded(self, outIntents: List_1[Intent], overlappingObject: GridObject) -> None: ...


class FlowerRewards(RewardCategory):
    def __init__(self) -> None: ...
    DestroyFlower : ObjectDestroyedReward
    Gift : GiftFlowerReward
    MakeFlowerSeed : MakeFlowerSeedReward
    name : str
    Wilt : WiltFlowerReward
    @property
    def AssociatedObject(self) -> typing.Optional[TypeIds]: ...
    @property
    def CategoryId(self) -> str: ...
    @property
    def Rewards(self) -> ReadOnlyArray_1[Reward]: ...


class GiftFlowerReward(TargetedReward):
    def __init__(self, categoryId: str, rewardId: str) -> None: ...
    @property
    def CanUserTargetSelf(self) -> bool: ...
    @property
    def CategoryId(self) -> str: ...
    @property
    def HasTarget(self) -> bool: ...
    @property
    def RewardId(self) -> str: ...
    @property
    def Targets(self) -> Array_1[RewardTargetTypes]: ...
    def EvaluateOnIntentExecute(self, character: CharacterObject, intentCausedByCharacter: Intent, target: RewardTarget) -> bool: ...


class GiftIntent(HeldUseIntent):
    def __init__(self) -> None: ...
    Causers : HashSet_1[GridObject]
    id : int
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def DidSucceed(self) -> bool: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Receiver(self) -> Actor: ...
    @Receiver.setter
    def Receiver(self, value: Actor) -> Actor: ...
    @property
    def Result(self) -> GiftIntent.Results: ...
    @Result.setter
    def Result(self, value: GiftIntent.Results) -> GiftIntent.Results: ...
    @property
    def Source(self) -> HoldableObject: ...
    @property
    def Source(self) -> GridObject: ...
    @property
    def TapIntent(self) -> TapIntent: ...
    @TapIntent.setter
    def TapIntent(self, value: TapIntent) -> TapIntent: ...
    @property
    def User(self) -> Actor: ...
    @User.setter
    def User(self, value: Actor) -> Actor: ...
    @property
    def UseTarget(self) -> GridObject: ...
    @property
    def WillContinueUsing(self) -> bool: ...
    @property
    def WillFail(self) -> bool: ...
    @WillFail.setter
    def WillFail(self, value: bool) -> bool: ...

    class Results(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Fail : GiftIntent.Results # 0
        Give : GiftIntent.Results # 1
        Exchange : GiftIntent.Results # 2



class MakeFlowerSeedIntent(HeldUseIntent):
    def __init__(self) -> None: ...
    Causers : HashSet_1[GridObject]
    CreatedSeed : FlowerSeedObject
    id : int
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def DidSucceed(self) -> bool: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Source(self) -> FlowerObject: ...
    @property
    def Source(self) -> HoldableObject: ...
    @property
    def Source(self) -> GridObject: ...
    @property
    def User(self) -> Actor: ...
    @User.setter
    def User(self, value: Actor) -> Actor: ...
    @property
    def UseTarget(self) -> GridObject: ...
    @property
    def WillContinueUsing(self) -> bool: ...


class MakeFlowerSeedReward(Reward):
    def __init__(self, categoryId: str, rewardId: str) -> None: ...
    @property
    def CategoryId(self) -> str: ...
    @property
    def HasTarget(self) -> bool: ...
    @property
    def RewardId(self) -> str: ...
    def EvaluateOnIntentExecute(self, character: CharacterObject, intentCausedByCharacter: Intent, target: typing.Optional[RewardTarget]) -> bool: ...


class TapIntent(UseIntent):
    def __init__(self) -> None: ...
    Causers : HashSet_1[GridObject]
    id : int
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def DidSucceed(self) -> bool: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def Priority(self) -> float: ...
    @property
    def ResultIntent(self) -> Intent: ...
    @ResultIntent.setter
    def ResultIntent(self, value: Intent) -> Intent: ...
    @property
    def Source(self) -> Actor: ...
    @property
    def Source(self) -> GridObject: ...
    @property
    def User(self) -> Actor: ...
    @User.setter
    def User(self, value: Actor) -> Actor: ...
    @property
    def WillContinueUsing(self) -> bool: ...


class WiltFlowerReward(Reward):
    def __init__(self, categoryId: str, rewardId: str) -> None: ...
    @property
    def CategoryId(self) -> str: ...
    @property
    def HasTarget(self) -> bool: ...
    @property
    def RewardId(self) -> str: ...
    def EvaluateOnIntentExecute(self, character: CharacterObject, intentCausedByCharacter: Intent, target: typing.Optional[RewardTarget]) -> bool: ...

