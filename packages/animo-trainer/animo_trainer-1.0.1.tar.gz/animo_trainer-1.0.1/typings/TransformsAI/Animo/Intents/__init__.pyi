import typing, abc
from System.Collections.Generic import List_1, HashSet_1
from System import ValueTuple_2, Array_1, Exception
from TransformsAI.Animo import GridObject, Actor, VoxelGrid, HoldableObject, GridTransform, Directions, MoveResults
from TransformsAI.Animo.Numerics import Vec2Int, Vec3Int
from TransformsAI.Animo.Objects.Dog import DogObject
from System.Collections import IDictionary
from System.Reflection import MethodBase
from TransformsAI.Animo.Constants import TypeIds

class ArcLaunchIntent(ProjectileIntent):
    def __init__(self) -> None: ...
    BouncedGridObjects : List_1[ValueTuple_2[int, GridObject]]
    Causers : HashSet_1[GridObject]
    CurrentDirection : Vec2Int
    DefaultBounceArc : Array_1[int]
    EmptyRicochetArc : Array_1[int]
    id : int
    RicochetedGridObjects : List_1[ValueTuple_2[int, GridObject]]
    @property
    def BounceArcHeights(self) -> Array_1[int]: ...
    @BounceArcHeights.setter
    def BounceArcHeights(self, value: Array_1[int]) -> Array_1[int]: ...
    @property
    def BounceCount(self) -> int: ...
    @property
    def CanBeCaught(self) -> bool: ...
    @CanBeCaught.setter
    def CanBeCaught(self, value: bool) -> bool: ...
    @property
    def CanLand(self) -> bool: ...
    @CanLand.setter
    def CanLand(self, value: bool) -> bool: ...
    @property
    def Catcher(self) -> Actor: ...
    @Catcher.setter
    def Catcher(self, value: Actor) -> Actor: ...
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def MaxBounces(self) -> int: ...
    @MaxBounces.setter
    def MaxBounces(self, value: int) -> int: ...
    @property
    def MaxRicochets(self) -> int: ...
    @MaxRicochets.setter
    def MaxRicochets(self, value: int) -> int: ...
    @property
    def OriginalDirection(self) -> Vec2Int: ...
    @OriginalDirection.setter
    def OriginalDirection(self, value: Vec2Int) -> Vec2Int: ...
    @property
    def Path(self) -> List_1[ProjectileIntent.PathPoint]: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Result(self) -> typing.Optional[ArcLaunchIntent.Results]: ...
    @Result.setter
    def Result(self, value: typing.Optional[ArcLaunchIntent.Results]) -> typing.Optional[ArcLaunchIntent.Results]: ...
    @property
    def RicochetCount(self) -> int: ...
    @property
    def Source(self) -> GridObject: ...
    @property
    def ThrowArcHeights(self) -> Array_1[int]: ...
    @ThrowArcHeights.setter
    def ThrowArcHeights(self, value: Array_1[int]) -> Array_1[int]: ...

    class Results(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Landed : ArcLaunchIntent.Results # 0
        Caught : ArcLaunchIntent.Results # 1
        Popped : ArcLaunchIntent.Results # 2



class CategoryGroups(abc.ABC):
    Character : float
    Intrinsic : float
    Item : float


class DogMoveIntent(Intent):
    def __init__(self) -> None: ...
    Causers : HashSet_1[GridObject]
    FirstAction : DogObject.Actions
    id : int
    IntentIndex : int
    moveTargetCell : Vec2Int
    nextMoveIntent : DogMoveIntent
    SecondAction : DogObject.Actions
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def EffectiveAction(self) -> DogObject.Actions: ...
    @property
    def EndPosition(self) -> Vec3Int: ...
    @EndPosition.setter
    def EndPosition(self, value: Vec3Int) -> Vec3Int: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def MoveDelta(self) -> Vec3Int: ...
    @property
    def MoveResult(self) -> DogMoveIntent.DogMoveResults: ...
    @MoveResult.setter
    def MoveResult(self, value: DogMoveIntent.DogMoveResults) -> DogMoveIntent.DogMoveResults: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Source(self) -> Actor: ...
    @property
    def Source(self) -> GridObject: ...
    @property
    def StartPosition(self) -> Vec3Int: ...
    @StartPosition.setter
    def StartPosition(self, value: Vec3Int) -> Vec3Int: ...
    @staticmethod
    def ResolveDogWalk(originalIntents: List_1[Intent]) -> None: ...

    class DogMoveResults(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Fail : DogMoveIntent.DogMoveResults # 0
        Walk : DogMoveIntent.DogMoveResults # 1
        JumpUp : DogMoveIntent.DogMoveResults # 2
        JumpDown : DogMoveIntent.DogMoveResults # 3
        Turn : DogMoveIntent.DogMoveResults # 4
        Waited : DogMoveIntent.DogMoveResults # 5



class FeedIntent(HeldUseIntent):
    def __init__(self) -> None: ...
    Causers : HashSet_1[GridObject]
    id : int
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def DidSucceed(self) -> bool: ...
    @property
    def FeedReceiver(self) -> GridObject: ...
    @FeedReceiver.setter
    def FeedReceiver(self, value: GridObject) -> GridObject: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Source(self) -> HoldableObject: ...
    @property
    def Source(self) -> GridObject: ...
    @property
    def User(self) -> Actor: ...
    @User.setter
    def User(self, value: Actor) -> Actor: ...
    @property
    def UseTarget(self) -> GridObject: ...
    @property
    def WillContinueUsing(self) -> bool: ...


class ForceDropIntent(Intent):
    def __init__(self) -> None: ...
    Causers : HashSet_1[GridObject]
    id : int
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def DroppedObject(self) -> HoldableObject: ...
    @DroppedObject.setter
    def DroppedObject(self, value: HoldableObject) -> HoldableObject: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def OverrideObject(self) -> GridObject: ...
    @OverrideObject.setter
    def OverrideObject(self, value: GridObject) -> GridObject: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Result(self) -> ForceDropIntent.Results: ...
    @Result.setter
    def Result(self, value: ForceDropIntent.Results) -> ForceDropIntent.Results: ...
    @property
    def Source(self) -> Actor: ...
    @property
    def Source(self) -> GridObject: ...

    class Results(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Drop : ForceDropIntent.Results # 0
        DestroyHeldObject : ForceDropIntent.Results # 1
        NoHeld : ForceDropIntent.Results # 2



class GrabIntent(Intent):
    def __init__(self) -> None: ...
    Causers : HashSet_1[GridObject]
    id : int
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def DroppedObject(self) -> HoldableObject: ...
    @DroppedObject.setter
    def DroppedObject(self, value: HoldableObject) -> HoldableObject: ...
    @property
    def GrabbedObject(self) -> HoldableObject: ...
    @GrabbedObject.setter
    def GrabbedObject(self, value: HoldableObject) -> HoldableObject: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Result(self) -> GrabIntent.Results: ...
    @Result.setter
    def Result(self, value: GrabIntent.Results) -> GrabIntent.Results: ...
    @property
    def Source(self) -> Actor: ...
    @property
    def Source(self) -> GridObject: ...

    class Results(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        GrabFail : GrabIntent.Results # 0
        Grab : GrabIntent.Results # 1
        Drop : GrabIntent.Results # 2
        Swap : GrabIntent.Results # 3
        DropFail : GrabIntent.Results # 4



class GrabPriorities(abc.ABC):
    Default : float


class HeldUseIntent(UseIntent):
    Causers : HashSet_1[GridObject]
    id : int
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def DidSucceed(self) -> bool: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Source(self) -> HoldableObject: ...
    @property
    def Source(self) -> GridObject: ...
    @property
    def User(self) -> Actor: ...
    @User.setter
    def User(self, value: Actor) -> Actor: ...
    @property
    def UseTarget(self) -> GridObject: ...
    @property
    def WillContinueUsing(self) -> bool: ...


class Intent(abc.ABC):
    Causers : HashSet_1[GridObject]
    count : int
    id : int
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @Grid.setter
    def Grid(self, value: VoxelGrid) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @IntentState.setter
    def IntentState(self, value: Intent.States) -> Intent.States: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Source(self) -> GridObject: ...
    @Source.setter
    def Source(self, value: GridObject) -> GridObject: ...
    def CalculateAffectedCells(self, outAffectedCells: List_1[Vec2Int]) -> None: ...
    def Cancel(self) -> None: ...
    def Execute(self) -> None: ...
    def Recycle(self) -> None: ...
    def WasCausedBy(self, causer: GridObject) -> bool: ...
    # Skipped LeaseFromPool due to it being static, abstract and generic.

    LeaseFromPool : LeaseFromPool_MethodGroup
    class LeaseFromPool_MethodGroup:
        def __getitem__(self, t:typing.Type[LeaseFromPool_1_T1]) -> LeaseFromPool_1[LeaseFromPool_1_T1]: ...

        LeaseFromPool_1_T1 = typing.TypeVar('LeaseFromPool_1_T1')
        class LeaseFromPool_1(typing.Generic[LeaseFromPool_1_T1]):
            LeaseFromPool_1_T = Intent.LeaseFromPool_MethodGroup.LeaseFromPool_1_T1
            def __call__(self, grid: VoxelGrid, source: GridObject) -> LeaseFromPool_1_T:...



    class States(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Reset : Intent.States # 0
        Executed : Intent.States # 1
        Cancelled : Intent.States # 2



class IntentPriorities(abc.ABC):
    ArcLaunch : float
    BallRoll : float
    Burn : float
    CharacterTurn : float
    CharacterWalk : float
    CollectCrystal : float
    CreateHeldObject : float
    DestroyBlock : float
    DogAction1 : float
    DogAction2 : float
    ExtinguishTorch : float
    ForceDrop : float
    GiftFlower : float
    GrabObject : float
    Hug : float
    KickBall : float
    LightTorch : float
    MakeBlock : float
    MakeFlowerSeed : float
    OnCaughtIntent : float
    OnCharacterStateChanged : float
    OnCreatedIntent : float
    OnDestroyed : float
    OnMoved : float
    OnTargeted : float
    Paint : float
    PetDog : float
    Plant : float
    PushLargeSnowball : float
    PushObject : float
    ShakeTreeWithFruits : float
    Slash : float
    Smack : float
    SpawnTreeFruits : float
    TakeSnowball : float
    Tap : float
    TerminalPriority : float
    ThrowBall : float
    ThrowSmallSnowball : float
    TransformObject : float
    UseFailed : float
    Watering : float
    @classmethod
    @property
    def FeedTreeFruit(cls) -> float: ...
    @classmethod
    @FeedTreeFruit.setter
    def FeedTreeFruit(cls, value: float) -> float: ...
    @classmethod
    @property
    def Talk(cls) -> float: ...
    @classmethod
    @Talk.setter
    def Talk(cls, value: float) -> float: ...
    @staticmethod
    def EarlyToLateComparer(x: Intent, y: Intent) -> int: ...


class InvalidIntentException(Exception):
    def __init__(self, intent: Intent, propertyName: str, message: str = ...) -> None: ...
    @property
    def Data(self) -> IDictionary: ...
    @property
    def HelpLink(self) -> str: ...
    @HelpLink.setter
    def HelpLink(self, value: str) -> str: ...
    @property
    def HResult(self) -> int: ...
    @HResult.setter
    def HResult(self, value: int) -> int: ...
    @property
    def InnerException(self) -> Exception: ...
    @property
    def Message(self) -> str: ...
    @property
    def Source(self) -> str: ...
    @Source.setter
    def Source(self, value: str) -> str: ...
    @property
    def StackTrace(self) -> str: ...
    @property
    def TargetSite(self) -> MethodBase: ...


class OnCatchIntent(Intent):
    def __init__(self) -> None: ...
    CaughtObject : GridObject
    Causers : HashSet_1[GridObject]
    id : int
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Source(self) -> GridObject: ...


class OnCreatedIntent(Intent):
    def __init__(self) -> None: ...
    Causers : HashSet_1[GridObject]
    id : int
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Source(self) -> GridObject: ...


class OnDestroyedIntent(Intent):
    def __init__(self) -> None: ...
    Causers : HashSet_1[GridObject]
    id : int
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Source(self) -> GridObject: ...


class OnMovedIntent(Intent):
    def __init__(self) -> None: ...
    Causers : HashSet_1[GridObject]
    id : int
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def OriginTransform(self) -> typing.Optional[GridTransform]: ...
    @OriginTransform.setter
    def OriginTransform(self, value: typing.Optional[GridTransform]) -> typing.Optional[GridTransform]: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Source(self) -> GridObject: ...
    @property
    def TargetTransform(self) -> typing.Optional[GridTransform]: ...
    @TargetTransform.setter
    def TargetTransform(self, value: typing.Optional[GridTransform]) -> typing.Optional[GridTransform]: ...
    @property
    def WasAddedToGrid(self) -> bool: ...
    @property
    def WasRemovedFromGrid(self) -> bool: ...


class OnTargetedIntent(Intent):
    def __init__(self) -> None: ...
    Causers : HashSet_1[GridObject]
    id : int
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def OriginActor(self) -> Actor: ...
    @OriginActor.setter
    def OriginActor(self, value: Actor) -> Actor: ...
    @property
    def OriginIntent(self) -> Intent: ...
    @OriginIntent.setter
    def OriginIntent(self, value: Intent) -> Intent: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Source(self) -> GridObject: ...


class OnUseNothingIntent(Intent):
    def __init__(self) -> None: ...
    Causers : HashSet_1[GridObject]
    id : int
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Source(self) -> GridObject: ...


class PlantIntent(HeldUseIntent):
    def __init__(self) -> None: ...
    Causers : HashSet_1[GridObject]
    id : int
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def DidSucceed(self) -> bool: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def NewPlant(self) -> GridObject: ...
    @NewPlant.setter
    def NewPlant(self, value: GridObject) -> GridObject: ...
    @property
    def PlantPosition(self) -> typing.Optional[Vec3Int]: ...
    @PlantPosition.setter
    def PlantPosition(self, value: typing.Optional[Vec3Int]) -> typing.Optional[Vec3Int]: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Result(self) -> PlantIntent.Results: ...
    @property
    def Source(self) -> HoldableObject: ...
    @property
    def Source(self) -> GridObject: ...
    @property
    def TargetPlantType(self) -> typing.Optional[TypeIds]: ...
    @TargetPlantType.setter
    def TargetPlantType(self, value: typing.Optional[TypeIds]) -> typing.Optional[TypeIds]: ...
    @property
    def User(self) -> Actor: ...
    @User.setter
    def User(self, value: Actor) -> Actor: ...
    @property
    def UseTarget(self) -> GridObject: ...
    @property
    def WillContinueUsing(self) -> bool: ...

    class Results(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Fail : PlantIntent.Results # 0
        Plant : PlantIntent.Results # 1



class PlantSelfIntent(HeldUseIntent):
    def __init__(self) -> None: ...
    Causers : HashSet_1[GridObject]
    id : int
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def DidSucceed(self) -> bool: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def PlantPosition(self) -> typing.Optional[Vec3Int]: ...
    @PlantPosition.setter
    def PlantPosition(self, value: typing.Optional[Vec3Int]) -> typing.Optional[Vec3Int]: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Source(self) -> HoldableObject: ...
    @property
    def Source(self) -> GridObject: ...
    @property
    def User(self) -> Actor: ...
    @User.setter
    def User(self, value: Actor) -> Actor: ...
    @property
    def UseTarget(self) -> GridObject: ...
    @property
    def WillContinueUsing(self) -> bool: ...


class ProjectileIntent(Intent):
    BouncedGridObjects : List_1[ValueTuple_2[int, GridObject]]
    Causers : HashSet_1[GridObject]
    id : int
    RicochetedGridObjects : List_1[ValueTuple_2[int, GridObject]]
    @property
    def BounceCount(self) -> int: ...
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def Path(self) -> List_1[ProjectileIntent.PathPoint]: ...
    @property
    def Priority(self) -> float: ...
    @property
    def RicochetCount(self) -> int: ...
    @property
    def Source(self) -> GridObject: ...

    class PathPoint:
        def __init__(self, position: Vec3Int, pathPointType: ProjectileIntent.PathPointTypes) -> None: ...
        @property
        def Index(self) -> int: ...
        @Index.setter
        def Index(self, value: int) -> int: ...
        @property
        def PathPointType(self) -> ProjectileIntent.PathPointTypes: ...
        @property
        def Position(self) -> Vec3Int: ...
        def GetObjects(self, projectileIntent: ProjectileIntent, outGridObjects: List_1[GridObject]) -> int: ...


    class PathPointTypes(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        None_ : ProjectileIntent.PathPointTypes # 0
        Ricochet : ProjectileIntent.PathPointTypes # 1
        Bounce : ProjectileIntent.PathPointTypes # 2
        Descent : ProjectileIntent.PathPointTypes # 3



class PushIntent(Intent):
    def __init__(self) -> None: ...
    Causers : HashSet_1[GridObject]
    id : int
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def OriginPosition(self) -> Vec3Int: ...
    @OriginPosition.setter
    def OriginPosition(self, value: Vec3Int) -> Vec3Int: ...
    @property
    def Priority(self) -> float: ...
    @property
    def PushDirection(self) -> Vec2Int: ...
    @PushDirection.setter
    def PushDirection(self, value: Vec2Int) -> Vec2Int: ...
    @property
    def Result(self) -> PushIntent.Results: ...
    @Result.setter
    def Result(self, value: PushIntent.Results) -> PushIntent.Results: ...
    @property
    def Source(self) -> GridObject: ...

    class Results(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Fail : PushIntent.Results # 0
        Push : PushIntent.Results # 1



class TransformObjectIntent(Intent):
    def __init__(self) -> None: ...
    Causers : HashSet_1[GridObject]
    id : int
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def NewObject(self) -> GridObject: ...
    @NewObject.setter
    def NewObject(self, value: GridObject) -> GridObject: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Source(self) -> GridObject: ...
    @property
    def TargetType(self) -> typing.Optional[TypeIds]: ...
    @TargetType.setter
    def TargetType(self, value: typing.Optional[TypeIds]) -> typing.Optional[TypeIds]: ...
    @property
    def VariantId(self) -> typing.Optional[int]: ...
    @VariantId.setter
    def VariantId(self, value: typing.Optional[int]) -> typing.Optional[int]: ...


class TurnIntent(Intent):
    def __init__(self) -> None: ...
    Causers : HashSet_1[GridObject]
    id : int
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def Direction(self) -> Directions: ...
    @Direction.setter
    def Direction(self, value: Directions) -> Directions: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Result(self) -> TurnIntent.Results: ...
    @Result.setter
    def Result(self, value: TurnIntent.Results) -> TurnIntent.Results: ...
    @property
    def Source(self) -> Actor: ...
    @property
    def Source(self) -> GridObject: ...

    class Results(typing.SupportsInt):
        @typing.overload
        def __init__(self, value : int) -> None: ...
        @typing.overload
        def __init__(self, value : int, force_if_true: bool) -> None: ...
        def __int__(self) -> int: ...
        
        # Values:
        Fail : TurnIntent.Results # 0
        Turned : TurnIntent.Results # 1



class UseIntent(Intent):
    Causers : HashSet_1[GridObject]
    id : int
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def DidSucceed(self) -> bool: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Source(self) -> GridObject: ...
    @property
    def User(self) -> Actor: ...
    @User.setter
    def User(self, value: Actor) -> Actor: ...
    @property
    def WillContinueUsing(self) -> bool: ...


class WalkIntent(Intent):
    def __init__(self) -> None: ...
    Causers : HashSet_1[GridObject]
    EndPosition : Vec3Int
    id : int
    StartPosition : Vec3Int
    @property
    def ChildIntents(self) -> List_1[Intent]: ...
    @property
    def Grid(self) -> VoxelGrid: ...
    @property
    def IntentState(self) -> Intent.States: ...
    @property
    def MoveDelta(self) -> Vec3Int: ...
    @property
    def MoveResult(self) -> MoveResults: ...
    @MoveResult.setter
    def MoveResult(self, value: MoveResults) -> MoveResults: ...
    @property
    def Priority(self) -> float: ...
    @property
    def Source(self) -> Actor: ...
    @property
    def Source(self) -> GridObject: ...
    @property
    def TargetCell(self) -> Vec2Int: ...
    @staticmethod
    def ResolveWalk(originalIntents: List_1[Intent]) -> None: ...

