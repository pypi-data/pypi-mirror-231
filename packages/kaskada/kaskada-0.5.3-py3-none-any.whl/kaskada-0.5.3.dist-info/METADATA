Metadata-Version: 2.1
Name: kaskada
Version: 0.5.3
Summary: A client library for the Kaskada time travel machine learning service
License: Apache-2.0
Author: Kaskada
Author-email: maintainers@kaskada.io
Requires-Python: >=3.8.2,<4.0.0
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Dist: certifi (>=2022.12.7,<2023.0.0)
Requires-Dist: domonic (>=0.9.11,<0.10.0)
Requires-Dist: googleapis-common-protos (>=1.58.0,<2.0.0)
Requires-Dist: grpcio (>=1.51.1,<2.0.0)
Requires-Dist: grpcio-health-checking (>=1.54.2,<2.0.0)
Requires-Dist: grpcio-status (>=1.51.1,<2.0.0)
Requires-Dist: html5lib (>=1.1,<2.0)
Requires-Dist: ipython (==7.34.0)
Requires-Dist: pandas (>=1.3,<1.4)
Requires-Dist: pyarrow (>=10.0.1,<11.0.0)
Requires-Dist: pygithub (>=1.57,<2.0)
Requires-Dist: requests (>=2.28.2,<3.0.0)
Requires-Dist: semver (>=3.0.1,<4.0.0)
Requires-Dist: tqdm (>=4.64.1,<5.0.0)
Description-Content-Type: text/markdown

# Kaskada SDK

## Developer Instructions
The package uses Poetry to develop and build.

1. Install Pyenv [Pyenv Documentation](https://github.com/pyenv/pyenv)
1. Install Python 3.9.16: `$ pyenv install 3.9.16`
1. Install Poetry [Poetry Documentation](https://python-poetry.org/docs/)
1. Install dependences: `$ poetry install`

### Run tasks
The package uses [`poethepoet`](https://github.com/nat-n/poethepoet) for running tasks

#### Test Task
To run tests: `$ poetry run poe test` 

#### Check Style Task
To check the style: `$ poetry run poe style`

#### Format Task
To auto-format (isort + black): `$ poetry run poe format`

#### Check Static Type Task
To perform static type analysis (mypy): `$ poetry run poe types`

#### Lint Task
To run the linter (pylint): `$ poetry run poe lint`

#### Generate documentation 
We use Sphinx and rely on autogeneration extensions within Sphinx to read docstrings and 
generate an HTML formatted version of the codes documentation. 

* `poetry run poe docs` : generates and builds the docs 
* `poetry run poe docs-generate` : generates the docs (.rst files)
* `poetry run poe docs-build` : builds the HTML rendered version of the generated docs (from .rst to .html)

The generated HTML is located inside `docs/build`. Load `docs/build/index.html` in your browser to see the HTML rendered output. 

## Using the Client from Jupyter

#### Install Jupyter
To install Jupyter: `$ pip install notebook`

#### Build the Client
To build the client: `$ poetry build`

#### Install the Client
To install the client: `$ pip install dist/*.whl`

#### Open a Jupyter Notebook
To open a notebook: `$ jupyter notebook`

