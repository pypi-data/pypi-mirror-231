
syntax = "proto3";

package QDK;


service ApplicationInterface {
    rpc open_connect (OpenConnectRequest) returns (OpenConnectResponse) {}
    rpc close (CloseRequest) returns (CloseResponse) {}
    rpc get_key (GetKeyRequest) returns (GetKeyResponse) {}
}

message QoS{
  uint32 key_chunk_size = 1;
  uint32 timeout = 3;
  uint32 ttl = 4;
  string metadata_mimetype = 5;
} 
  
message OpenConnectRequest {

  string source = 1;
  string destination = 2;
  QoS qos = 3;
  optional bytes ksid = 4;
}


message OpenConnectResponse {
  QoS qos = 1;
  bytes ksid = 2;
  uint32 status = 3;
}

message CloseRequest{
  bytes ksid = 1;
}

message CloseResponse{
  uint32 status = 1;
}

message GetKeyRequest{
  bytes ksid = 1;
  optional uint32 index = 2;
  uint32 metadata_size = 3;
}

message GetKeyResponse{
  uint32 index = 1;
  bytes key_buffer = 2;
  bytes metadata_buffer = 3;
  uint32 status = 4;
}


service InterKMEInterface{
  rpc new_app(NewAppRequest) returns (NewAppResponse) {}
  rpc app_open(AppOpenRequest) returns (AppOpenResponse) {}
}

message AppOpenRequest{
  bytes ksid = 1;
}

message AppOpenResponse{

}

message NewAppRequest{
  string source = 1;
  string destination = 2;
  bytes ksid = 3;
  uint32 key_chunk_size = 4;
  uint32 timeout = 5;
  uint32 ttl = 6;
}

message NewAppResponse{
  uint32 status = 1;
}