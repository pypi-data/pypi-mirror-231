
// This is a single line comment

/*
    You can have multi-line comments too
    /*
        Oh, and also nested comment. Do not worry.
    */
*/

/*
  Requirements:
    * In memory format same as disk format (pointer to mmap should be the struct for POD)
    * Support backwards compatibility to prevent log rot

*/


namespace outer
{
    // This is an external namespace

    struct silly1
    {
        u32 val1;
        u32 val2;
    }
}

#import "inctype.cbuf"

// Use namespaces for encapsulation, like in C++.
// Close the namespace at the end
namespace messages
{
    const string kStrName = "mystring";
    const u64 myflag = 0xFFFFFFFF;

    // Define enums in the VRM file
    enum MyFancyEnum
    {
        VALUE_1 = -3,  // No value assignment yet
        VALUE_2,
        VALUE_3 = 32
    }

    // structs can be qualified with naked, in which
    // case they can only be encoded as part of another cbuf struct
    struct naked_struct @naked
    {
        u32 value1;
        u32 value2;
    }

    // This is a POD, a simple structure
    // Prefer POD, they are much faster for serdes
    struct image
    {
        short_string sensor_name; // short string is a POD, fixed size string
        u32     rows;
        uint32_t  cols = 3;
        s32   format; // opengl format
        s32   type;   // opengl type
        double  timestamp = 1.3;
        u8   pixels[1024*3]; // raw data
        double neginit = -1.3;
        double dexpinit = 2.0 * 3.4 / 2.7;
        s32 iexpinit = 3*4*(12*23) + 70/2;
        MyFancyEnum fancy = VALUE_2;
        outer::silly1 sill;
        inctype includes;
        naked_struct nstruct;
    }

    struct complex_thing
    {
        s32  one_val;

        MyFancyEnum fancy2;
        // Specify an array of unknown size by omitting the size
        // This is a std::vector in plain code
        s32  dynamic_array[];

        // Compact arrays are represented in memory using their full size.
        // Compact arrays also create a u32 variable, preceeding the array,
        // named num_<array_name> . The user has the requirement to ensure this
        // variable contains the number of used elements on the array. When
        // serializing to disk, this array will only serialize the required elements
        // to save on disk space
        s32  compact_array[100] @compact;

        // Strings are dynamic, use a char[32] or fixed size to be POD
        string name;

        // it is possible to nest structures as needed, even in arrays
        image  img[3];

        outer::silly1 sill;

        // Complex string array, which is variable upon variable
        string names[5];
        string hard_dynamic[];
    }

    struct fourmegs
    {
       u32 data[1024*1024];
    }

    struct getslarge
    {
       fourmegs vec[];
    }
}
