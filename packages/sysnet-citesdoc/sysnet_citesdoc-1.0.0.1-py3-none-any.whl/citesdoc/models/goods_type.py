# coding: utf-8

"""
    Ostatní dokumenty CITES

    Toto je API pro Domino konektor ostatních dokumentů CITES  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GoodsType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'species': 'TaxonType',
        'goods_code': 'str',
        'goods_description': 'str',
        'goods_additional': 'str',
        'net_mass': 'float',
        'amount': 'float',
        'units': 'str',
        'amount_printable': 'str',
        'origin': 'str',
        'purpose': 'str',
        'transaction_origin': 'TransactionType',
        'transaction_import': 'TransactionType',
        'transaction_re_export': 'TransactionType'
    }

    attribute_map = {
        'species': 'species',
        'goods_code': 'goods_code',
        'goods_description': 'goods_description',
        'goods_additional': 'goods_additional',
        'net_mass': 'net_mass',
        'amount': 'amount',
        'units': 'units',
        'amount_printable': 'amount_printable',
        'origin': 'origin',
        'purpose': 'purpose',
        'transaction_origin': 'transaction_origin',
        'transaction_import': 'transaction_import',
        'transaction_re_export': 'transaction_re_export'
    }

    def __init__(self, species=None, goods_code=None, goods_description=None, goods_additional=None, net_mass=None, amount=None, units=None, amount_printable=None, origin=None, purpose=None, transaction_origin=None, transaction_import=None, transaction_re_export=None):  # noqa: E501
        """GoodsType - a model defined in Swagger"""  # noqa: E501
        self._species = None
        self._goods_code = None
        self._goods_description = None
        self._goods_additional = None
        self._net_mass = None
        self._amount = None
        self._units = None
        self._amount_printable = None
        self._origin = None
        self._purpose = None
        self._transaction_origin = None
        self._transaction_import = None
        self._transaction_re_export = None
        self.discriminator = None
        if species is not None:
            self.species = species
        if goods_code is not None:
            self.goods_code = goods_code
        if goods_description is not None:
            self.goods_description = goods_description
        if goods_additional is not None:
            self.goods_additional = goods_additional
        if net_mass is not None:
            self.net_mass = net_mass
        if amount is not None:
            self.amount = amount
        if units is not None:
            self.units = units
        if amount_printable is not None:
            self.amount_printable = amount_printable
        if origin is not None:
            self.origin = origin
        if purpose is not None:
            self.purpose = purpose
        if transaction_origin is not None:
            self.transaction_origin = transaction_origin
        if transaction_import is not None:
            self.transaction_import = transaction_import
        if transaction_re_export is not None:
            self.transaction_re_export = transaction_re_export

    @property
    def species(self):
        """Gets the species of this GoodsType.  # noqa: E501


        :return: The species of this GoodsType.  # noqa: E501
        :rtype: TaxonType
        """
        return self._species

    @species.setter
    def species(self, species):
        """Sets the species of this GoodsType.


        :param species: The species of this GoodsType.  # noqa: E501
        :type: TaxonType
        """

        self._species = species

    @property
    def goods_code(self):
        """Gets the goods_code of this GoodsType.  # noqa: E501

        Kód exempláře  # noqa: E501

        :return: The goods_code of this GoodsType.  # noqa: E501
        :rtype: str
        """
        return self._goods_code

    @goods_code.setter
    def goods_code(self, goods_code):
        """Sets the goods_code of this GoodsType.

        Kód exempláře  # noqa: E501

        :param goods_code: The goods_code of this GoodsType.  # noqa: E501
        :type: str
        """

        self._goods_code = goods_code

    @property
    def goods_description(self):
        """Gets the goods_description of this GoodsType.  # noqa: E501

        Popis exempláře  # noqa: E501

        :return: The goods_description of this GoodsType.  # noqa: E501
        :rtype: str
        """
        return self._goods_description

    @goods_description.setter
    def goods_description(self, goods_description):
        """Sets the goods_description of this GoodsType.

        Popis exempláře  # noqa: E501

        :param goods_description: The goods_description of this GoodsType.  # noqa: E501
        :type: str
        """

        self._goods_description = goods_description

    @property
    def goods_additional(self):
        """Gets the goods_additional of this GoodsType.  # noqa: E501

        Další popis exempláře  # noqa: E501

        :return: The goods_additional of this GoodsType.  # noqa: E501
        :rtype: str
        """
        return self._goods_additional

    @goods_additional.setter
    def goods_additional(self, goods_additional):
        """Sets the goods_additional of this GoodsType.

        Další popis exempláře  # noqa: E501

        :param goods_additional: The goods_additional of this GoodsType.  # noqa: E501
        :type: str
        """

        self._goods_additional = goods_additional

    @property
    def net_mass(self):
        """Gets the net_mass of this GoodsType.  # noqa: E501

        Čistá hmotnost exempláře/ů  # noqa: E501

        :return: The net_mass of this GoodsType.  # noqa: E501
        :rtype: float
        """
        return self._net_mass

    @net_mass.setter
    def net_mass(self, net_mass):
        """Sets the net_mass of this GoodsType.

        Čistá hmotnost exempláře/ů  # noqa: E501

        :param net_mass: The net_mass of this GoodsType.  # noqa: E501
        :type: float
        """

        self._net_mass = net_mass

    @property
    def amount(self):
        """Gets the amount of this GoodsType.  # noqa: E501

        Množství  # noqa: E501

        :return: The amount of this GoodsType.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GoodsType.

        Množství  # noqa: E501

        :param amount: The amount of this GoodsType.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def units(self):
        """Gets the units of this GoodsType.  # noqa: E501

        Jednotky  # noqa: E501

        :return: The units of this GoodsType.  # noqa: E501
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this GoodsType.

        Jednotky  # noqa: E501

        :param units: The units of this GoodsType.  # noqa: E501
        :type: str
        """

        self._units = units

    @property
    def amount_printable(self):
        """Gets the amount_printable of this GoodsType.  # noqa: E501

        Tištitelná podoba množství  # noqa: E501

        :return: The amount_printable of this GoodsType.  # noqa: E501
        :rtype: str
        """
        return self._amount_printable

    @amount_printable.setter
    def amount_printable(self, amount_printable):
        """Sets the amount_printable of this GoodsType.

        Tištitelná podoba množství  # noqa: E501

        :param amount_printable: The amount_printable of this GoodsType.  # noqa: E501
        :type: str
        """

        self._amount_printable = amount_printable

    @property
    def origin(self):
        """Gets the origin of this GoodsType.  # noqa: E501

        Původ  # noqa: E501

        :return: The origin of this GoodsType.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this GoodsType.

        Původ  # noqa: E501

        :param origin: The origin of this GoodsType.  # noqa: E501
        :type: str
        """

        self._origin = origin

    @property
    def purpose(self):
        """Gets the purpose of this GoodsType.  # noqa: E501

        Účel  # noqa: E501

        :return: The purpose of this GoodsType.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this GoodsType.

        Účel  # noqa: E501

        :param purpose: The purpose of this GoodsType.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def transaction_origin(self):
        """Gets the transaction_origin of this GoodsType.  # noqa: E501


        :return: The transaction_origin of this GoodsType.  # noqa: E501
        :rtype: TransactionType
        """
        return self._transaction_origin

    @transaction_origin.setter
    def transaction_origin(self, transaction_origin):
        """Sets the transaction_origin of this GoodsType.


        :param transaction_origin: The transaction_origin of this GoodsType.  # noqa: E501
        :type: TransactionType
        """

        self._transaction_origin = transaction_origin

    @property
    def transaction_import(self):
        """Gets the transaction_import of this GoodsType.  # noqa: E501


        :return: The transaction_import of this GoodsType.  # noqa: E501
        :rtype: TransactionType
        """
        return self._transaction_import

    @transaction_import.setter
    def transaction_import(self, transaction_import):
        """Sets the transaction_import of this GoodsType.


        :param transaction_import: The transaction_import of this GoodsType.  # noqa: E501
        :type: TransactionType
        """

        self._transaction_import = transaction_import

    @property
    def transaction_re_export(self):
        """Gets the transaction_re_export of this GoodsType.  # noqa: E501


        :return: The transaction_re_export of this GoodsType.  # noqa: E501
        :rtype: TransactionType
        """
        return self._transaction_re_export

    @transaction_re_export.setter
    def transaction_re_export(self, transaction_re_export):
        """Sets the transaction_re_export of this GoodsType.


        :param transaction_re_export: The transaction_re_export of this GoodsType.  # noqa: E501
        :type: TransactionType
        """

        self._transaction_re_export = transaction_re_export

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GoodsType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GoodsType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
