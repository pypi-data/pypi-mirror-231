# coding: utf-8

"""
    Ostatní dokumenty CITES

    Toto je API pro Domino konektor ostatních dokumentů CITES  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransactionType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'permit': 'str',
        'date_issued': 'date',
        'country': 'str'
    }

    attribute_map = {
        'permit': 'permit',
        'date_issued': 'date_issued',
        'country': 'country'
    }

    def __init__(self, permit=None, date_issued=None, country=None):  # noqa: E501
        """TransactionType - a model defined in Swagger"""  # noqa: E501
        self._permit = None
        self._date_issued = None
        self._country = None
        self.discriminator = None
        if permit is not None:
            self.permit = permit
        if date_issued is not None:
            self.date_issued = date_issued
        if country is not None:
            self.country = country

    @property
    def permit(self):
        """Gets the permit of this TransactionType.  # noqa: E501

        Číslo permitu  # noqa: E501

        :return: The permit of this TransactionType.  # noqa: E501
        :rtype: str
        """
        return self._permit

    @permit.setter
    def permit(self, permit):
        """Sets the permit of this TransactionType.

        Číslo permitu  # noqa: E501

        :param permit: The permit of this TransactionType.  # noqa: E501
        :type: str
        """

        self._permit = permit

    @property
    def date_issued(self):
        """Gets the date_issued of this TransactionType.  # noqa: E501

        datum vydání permitu  # noqa: E501

        :return: The date_issued of this TransactionType.  # noqa: E501
        :rtype: date
        """
        return self._date_issued

    @date_issued.setter
    def date_issued(self, date_issued):
        """Sets the date_issued of this TransactionType.

        datum vydání permitu  # noqa: E501

        :param date_issued: The date_issued of this TransactionType.  # noqa: E501
        :type: date
        """

        self._date_issued = date_issued

    @property
    def country(self):
        """Gets the country of this TransactionType.  # noqa: E501

        Země transakce  # noqa: E501

        :return: The country of this TransactionType.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this TransactionType.

        Země transakce  # noqa: E501

        :param country: The country of this TransactionType.  # noqa: E501
        :type: str
        """

        self._country = country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
