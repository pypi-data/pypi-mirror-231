# coding: utf-8

"""
    Ostatní dokumenty CITES

    Toto je API pro Domino konektor ostatních dokumentů CITES  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaxonType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scientific_name': 'str',
        'common_name_cz': 'str',
        'common_name_en': 'str',
        'appendix_cites': 'str',
        'annex_eu': 'str',
        'class_411': 'bool'
    }

    attribute_map = {
        'scientific_name': 'scientific_name',
        'common_name_cz': 'common_name_cz',
        'common_name_en': 'common_name_en',
        'appendix_cites': 'appendix_cites',
        'annex_eu': 'annex_eu',
        'class_411': 'class_411'
    }

    def __init__(self, scientific_name=None, common_name_cz=None, common_name_en=None, appendix_cites=None, annex_eu=None, class_411=None):  # noqa: E501
        """TaxonType - a model defined in Swagger"""  # noqa: E501
        self._scientific_name = None
        self._common_name_cz = None
        self._common_name_en = None
        self._appendix_cites = None
        self._annex_eu = None
        self._class_411 = None
        self.discriminator = None
        if scientific_name is not None:
            self.scientific_name = scientific_name
        if common_name_cz is not None:
            self.common_name_cz = common_name_cz
        if common_name_en is not None:
            self.common_name_en = common_name_en
        if appendix_cites is not None:
            self.appendix_cites = appendix_cites
        if annex_eu is not None:
            self.annex_eu = annex_eu
        if class_411 is not None:
            self.class_411 = class_411

    @property
    def scientific_name(self):
        """Gets the scientific_name of this TaxonType.  # noqa: E501

        Vědecký název  # noqa: E501

        :return: The scientific_name of this TaxonType.  # noqa: E501
        :rtype: str
        """
        return self._scientific_name

    @scientific_name.setter
    def scientific_name(self, scientific_name):
        """Sets the scientific_name of this TaxonType.

        Vědecký název  # noqa: E501

        :param scientific_name: The scientific_name of this TaxonType.  # noqa: E501
        :type: str
        """

        self._scientific_name = scientific_name

    @property
    def common_name_cz(self):
        """Gets the common_name_cz of this TaxonType.  # noqa: E501

        Obecný název (česky))  # noqa: E501

        :return: The common_name_cz of this TaxonType.  # noqa: E501
        :rtype: str
        """
        return self._common_name_cz

    @common_name_cz.setter
    def common_name_cz(self, common_name_cz):
        """Sets the common_name_cz of this TaxonType.

        Obecný název (česky))  # noqa: E501

        :param common_name_cz: The common_name_cz of this TaxonType.  # noqa: E501
        :type: str
        """

        self._common_name_cz = common_name_cz

    @property
    def common_name_en(self):
        """Gets the common_name_en of this TaxonType.  # noqa: E501

        Obecný název (anglicky)  # noqa: E501

        :return: The common_name_en of this TaxonType.  # noqa: E501
        :rtype: str
        """
        return self._common_name_en

    @common_name_en.setter
    def common_name_en(self, common_name_en):
        """Sets the common_name_en of this TaxonType.

        Obecný název (anglicky)  # noqa: E501

        :param common_name_en: The common_name_en of this TaxonType.  # noqa: E501
        :type: str
        """

        self._common_name_en = common_name_en

    @property
    def appendix_cites(self):
        """Gets the appendix_cites of this TaxonType.  # noqa: E501

        Příloha CITES  # noqa: E501

        :return: The appendix_cites of this TaxonType.  # noqa: E501
        :rtype: str
        """
        return self._appendix_cites

    @appendix_cites.setter
    def appendix_cites(self, appendix_cites):
        """Sets the appendix_cites of this TaxonType.

        Příloha CITES  # noqa: E501

        :param appendix_cites: The appendix_cites of this TaxonType.  # noqa: E501
        :type: str
        """

        self._appendix_cites = appendix_cites

    @property
    def annex_eu(self):
        """Gets the annex_eu of this TaxonType.  # noqa: E501

        Příloha EU  # noqa: E501

        :return: The annex_eu of this TaxonType.  # noqa: E501
        :rtype: str
        """
        return self._annex_eu

    @annex_eu.setter
    def annex_eu(self, annex_eu):
        """Sets the annex_eu of this TaxonType.

        Příloha EU  # noqa: E501

        :param annex_eu: The annex_eu of this TaxonType.  # noqa: E501
        :type: str
        """

        self._annex_eu = annex_eu

    @property
    def class_411(self):
        """Gets the class_411 of this TaxonType.  # noqa: E501

        Zvláštní ochrana  # noqa: E501

        :return: The class_411 of this TaxonType.  # noqa: E501
        :rtype: bool
        """
        return self._class_411

    @class_411.setter
    def class_411(self, class_411):
        """Sets the class_411 of this TaxonType.

        Zvláštní ochrana  # noqa: E501

        :param class_411: The class_411 of this TaxonType.  # noqa: E501
        :type: bool
        """

        self._class_411 = class_411

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaxonType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaxonType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
