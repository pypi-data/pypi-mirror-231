# coding: utf-8

"""
    Ostatní dokumenty CITES

    Toto je API pro Domino konektor ostatních dokumentů CITES  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@sysnet.cz
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseDocumentType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'doc_code': 'DocumentCode',
        'metadata': 'MetadataType',
        'document': 'GeneralType',
        'transaction': 'TransactionType',
        'conditions': 'ConditionsType',
        'issuing': 'IssuingType',
        'other': 'OtherType',
        'goods': 'list[GoodsType]'
    }

    attribute_map = {
        'doc_code': 'doc_code',
        'metadata': 'metadata',
        'document': 'document',
        'transaction': 'transaction',
        'conditions': 'conditions',
        'issuing': 'issuing',
        'other': 'other',
        'goods': 'goods'
    }

    def __init__(self, doc_code=None, metadata=None, document=None, transaction=None, conditions=None, issuing=None, other=None, goods=None):  # noqa: E501
        """BaseDocumentType - a model defined in Swagger"""  # noqa: E501
        self._doc_code = None
        self._metadata = None
        self._document = None
        self._transaction = None
        self._conditions = None
        self._issuing = None
        self._other = None
        self._goods = None
        self.discriminator = None
        if doc_code is not None:
            self.doc_code = doc_code
        if metadata is not None:
            self.metadata = metadata
        if document is not None:
            self.document = document
        if transaction is not None:
            self.transaction = transaction
        if conditions is not None:
            self.conditions = conditions
        if issuing is not None:
            self.issuing = issuing
        if other is not None:
            self.other = other
        if goods is not None:
            self.goods = goods

    @property
    def doc_code(self):
        """Gets the doc_code of this BaseDocumentType.  # noqa: E501


        :return: The doc_code of this BaseDocumentType.  # noqa: E501
        :rtype: DocumentCode
        """
        return self._doc_code

    @doc_code.setter
    def doc_code(self, doc_code):
        """Sets the doc_code of this BaseDocumentType.


        :param doc_code: The doc_code of this BaseDocumentType.  # noqa: E501
        :type: DocumentCode
        """

        self._doc_code = doc_code

    @property
    def metadata(self):
        """Gets the metadata of this BaseDocumentType.  # noqa: E501


        :return: The metadata of this BaseDocumentType.  # noqa: E501
        :rtype: MetadataType
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this BaseDocumentType.


        :param metadata: The metadata of this BaseDocumentType.  # noqa: E501
        :type: MetadataType
        """

        self._metadata = metadata

    @property
    def document(self):
        """Gets the document of this BaseDocumentType.  # noqa: E501


        :return: The document of this BaseDocumentType.  # noqa: E501
        :rtype: GeneralType
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this BaseDocumentType.


        :param document: The document of this BaseDocumentType.  # noqa: E501
        :type: GeneralType
        """

        self._document = document

    @property
    def transaction(self):
        """Gets the transaction of this BaseDocumentType.  # noqa: E501


        :return: The transaction of this BaseDocumentType.  # noqa: E501
        :rtype: TransactionType
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this BaseDocumentType.


        :param transaction: The transaction of this BaseDocumentType.  # noqa: E501
        :type: TransactionType
        """

        self._transaction = transaction

    @property
    def conditions(self):
        """Gets the conditions of this BaseDocumentType.  # noqa: E501


        :return: The conditions of this BaseDocumentType.  # noqa: E501
        :rtype: ConditionsType
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this BaseDocumentType.


        :param conditions: The conditions of this BaseDocumentType.  # noqa: E501
        :type: ConditionsType
        """

        self._conditions = conditions

    @property
    def issuing(self):
        """Gets the issuing of this BaseDocumentType.  # noqa: E501


        :return: The issuing of this BaseDocumentType.  # noqa: E501
        :rtype: IssuingType
        """
        return self._issuing

    @issuing.setter
    def issuing(self, issuing):
        """Sets the issuing of this BaseDocumentType.


        :param issuing: The issuing of this BaseDocumentType.  # noqa: E501
        :type: IssuingType
        """

        self._issuing = issuing

    @property
    def other(self):
        """Gets the other of this BaseDocumentType.  # noqa: E501


        :return: The other of this BaseDocumentType.  # noqa: E501
        :rtype: OtherType
        """
        return self._other

    @other.setter
    def other(self, other):
        """Sets the other of this BaseDocumentType.


        :param other: The other of this BaseDocumentType.  # noqa: E501
        :type: OtherType
        """

        self._other = other

    @property
    def goods(self):
        """Gets the goods of this BaseDocumentType.  # noqa: E501


        :return: The goods of this BaseDocumentType.  # noqa: E501
        :rtype: list[GoodsType]
        """
        return self._goods

    @goods.setter
    def goods(self, goods):
        """Sets the goods of this BaseDocumentType.


        :param goods: The goods of this BaseDocumentType.  # noqa: E501
        :type: list[GoodsType]
        """

        self._goods = goods

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseDocumentType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseDocumentType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
