/** \file
 * Contains helper classes and objects for the lexer and parser generated by
 * flex/bison, as well as the entry points for invoking the parser directly, in
 * case you don't need semantic analysis.
 */

#pragma once

#include "../cqasm-annotations.hpp"
#include "cqasm-ast.hpp"

#include <cstdio>

namespace cqasm {
namespace v1x {

/**
 * Namespace for the parser functions and classes.
 */
namespace parser {

// SourceLocation used to live in this namespace, before the v1x namespace was a thing.
// Make sure it exists here for compatibility.
using SourceLocation = annotations::SourceLocation;

/**
 * Parse result information.
 */
class ParseResult {
public:

    /**
     * Root node of the AST, if analysis was sufficiently successful. This may
     * be set even if parsing was not ENTIRELY successful, in which case it
     * will contain one or more error nodes.
     */
    ast::One<ast::Root> root;

    /**
     * List of accumulated errors. Analysis was successful if and only if
     * `errors.empty()`.
     */
    std::vector<std::string> errors;

};

/**
 * Parse the given file.
 */
ParseResult parse_file(const std::string &filename);

/**
 * Parse using the given file pointer.
 */
ParseResult parse_file(FILE *file, const std::string &filename = "<unknown>");

/**
 * Parse the given string. A filename may be given in addition for use within
 * error messages.
 */
ParseResult parse_string(const std::string &data, const std::string &filename="<unknown>");

/**
 * Internal helper class for parsing cQASM files.
 */
class ParseHelper {
public:

    /**
     * File pointer being scanned, if no data was specified.
     */
    FILE *fptr = nullptr;

    /**
     * Flex data buffer, if data was specified.
     */
    void *buf = nullptr;

    /**
     * Flex reentrant scanner data.
     */
    void *scanner = nullptr;

    /**
     * Name of the file being parsed.
     */
    std::string filename;

    /**
     * The parse result.
     */
    ParseResult result;

private:
    friend ParseResult parse_file(const std::string &filename);
    friend ParseResult parse_file(FILE *file, const std::string &filename);
    friend ParseResult parse_string(const std::string &data, const std::string &filename);

    /**
     * Parse a string or file with flex/bison. If use_file is set, the file
     * specified by filename is read and data is ignored. Otherwise, filename
     * is used only for error messages, and data is read instead. Don't use
     * this directly, use parse().
     */
    ParseHelper(const std::string &filename, const std::string &data, bool use_file);

    /**
     * Construct the analyzer internals for the given filename, and analyze
     * the file.
     */
    ParseHelper(const std::string &filename, FILE *fptr);

    /**
     * Initializes the scanner. Returns whether this was successful.
     */
    bool construct();

    /**
     * Does the actual parsing.
     */
    void parse();

public:

    /**
     * Destroys the parse helper.
     */
    virtual ~ParseHelper();

    /**
     * Pushes an error.
     */
    void push_error(const std::string &error);

};

} // namespace parser
} // namespace v1x
} // namespace cqasm
