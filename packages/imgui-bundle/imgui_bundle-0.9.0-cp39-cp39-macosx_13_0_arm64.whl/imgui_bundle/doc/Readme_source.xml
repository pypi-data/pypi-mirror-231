<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>Dear ImGui Bundle documentation</title>
<date>2023-02-23</date>
</info>
<sidebar>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="https://raw.githubusercontent.com/pthom/imgui_bundle/doc/bindings/imgui_bundle/demos_assets/images/logo_imgui_bundle_512.png" contentwidth="150"/>
</imageobject>
<textobject><phrase>abc</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>Dear ImGui Bundle: easily create ImGui applications in Python and C&#43;&#43;. Batteries included!</simpara>
<simpara><link xl:href="https://github.com/pthom/imgui_bundle/"><inlinemediaobject>
<imageobject>
<imagedata fileref="https://github.com/pthom/imgui_bundle/raw/doc/bindings/imgui_bundle/doc/doc_images/badge_view_sources.png" contentwidth="100"/>
</imageobject>
<textobject><phrase>sources</phrase></textobject>
</inlinemediaobject></link> <link xl:href="https://pthom.github.io/imgui_bundle"><inlinemediaobject>
<imageobject>
<imagedata fileref="https://github.com/pthom/imgui_bundle/raw/doc/bindings/imgui_bundle/doc/doc_images/badge_view_docs.png" contentwidth="81"/>
</imageobject>
<textobject><phrase>doc</phrase></textobject>
</inlinemediaobject></link> <link xl:href="https://traineq.org/ImGuiBundle/emscripten/bin/demo_imgui_bundle.html"><inlinemediaobject>
<imageobject>
<imagedata fileref="https://github.com/pthom/imgui_bundle/raw/doc/bindings/imgui_bundle/doc/doc_images/badge_interactive_manual.png" contentwidth="137"/>
</imageobject>
<textobject><phrase>manual</phrase></textobject>
</inlinemediaobject></link></simpara>
</sidebar>
<section xml:id="_introduction">
<title>Introduction</title>
<section xml:id="_about_dear_imgui_bundle">
<title>About Dear ImGui Bundle</title>
<simpara><link xl:href="https://github.com/pthom/imgui_bundle">Dear ImGui Bundle</link> is a bundle for <link xl:href="https://github.com/ocornut/imgui">Dear ImGui</link>, including various powerful libraries from its ecosystem. It enables to easily create ImGui applications in C&#43;&#43; and Python, under Windows, macOS, and Linux. It is aimed at application developers, researchers, and beginner developers who want to quickly get started.</simpara>
</section>
<section xml:id="_interactive_manual_demo_in_one_click">
<title>Interactive manual &amp; demo in one click!</title>
<simpara>Click on the animated demonstration below to launch the fully interactive demonstration.</simpara>
<figure xml:id="truc">
<title>Dear ImGui Bundle interactive demo</title>
<mediaobject>
<imageobject>
<imagedata fileref="https://traineq.org/imgui_bundle_doc/demo_bundle8.gif" contentwidth="700"/>
</imageobject>
<textobject><phrase>Demo</phrase></textobject>
</mediaobject>
</figure>
<tip>
<simpara>This demonstration is also an interactive manual, similar to the online <link xl:href="https://pthom.github.io/imgui_manual_online/manual/imgui_manual.html">ImGui Manual</link></simpara>
</tip>
</section>
<section xml:id="_batteries_included">
<title>Batteries included</title>
<simpara>Dear ImGui Bundle includes the following libraries:</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://github.com/ocornut/imgui.git">imgui</link> : Dear ImGui, bloat-free Graphical User interface for C&#43;&#43; with minimal dependencies</simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/epezent/implot">implot</link>: Immediate Mode Plotting</simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/pthom/hello_imgui.git">Hello ImGui</link>: cross-platform Gui apps with the simplicity of a "Hello World" app</simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/CedricGuillemet/ImGuizmo.git">ImGuizmo</link>: Immediate mode 3D gizmo for scene editing and other controls based on Dear ImGui</simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/BalazsJako/ImGuiColorTextEdit">ImGuiColorTextEdit</link>: Colorizing text editor for ImGui</simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/thedmd/imgui-node-editor">imgui-node-editor</link>: Node Editor built using Dear ImGui</simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/altschuler/imgui-knobs">imgui-knobs</link>: Knobs widgets for ImGui</simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/pthom/ImFileDialog.git">ImFileDialog</link>: A file dialog library for Dear ImGui</simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/samhocevar/portable-file-dialogs">portable-file-dialogs</link>  Portable GUI dialogs library (C&#43;&#43;11, single-header)</simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/mekhontsev/imgui_md.git">imgui_md</link>: Markdown renderer for Dear ImGui using MD4C parser</simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/dalerank/imspinner">imspinner</link>: Set of nice spinners for imgui</simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/cmdwtf/imgui_toggle">imgui_toggle</link>: A toggle switch widget for Dear ImGui.</simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/pthom/immvision.git">ImmVision</link>: Immediate image debugger and insights</simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/andyborrell/imgui_tex_inspect">imgui_tex_inspect</link>: A texture inspector tool for Dear ImGui</simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/hnOsmium0001/imgui-command-palette.git">imgui-command-palette</link>: A Sublime Text or VSCode style command palette in ImGui</simpara>
</listitem>
</itemizedlist>
<simpara>A big thank you to their authors for their awesome work!</simpara>
</section>
<section xml:id="_easily_port_your_code_between_python_and_c">
<title>Easily port your code between python and C&#43;&#43;</title>
<simpara>The python bindings are autogenerated via an advanced generator (so that keeping them up to date is easy), and closely mirror the original C&#43;&#43; API, with fully typed bindings.</simpara>
<simpara>The original code documentation is meticulously kept inside the python stubs. See for example the documentation for <link xl:href="https://github.com/pthom/imgui_bundle/blob/main/bindings/imgui_bundle/imgui/__init__.pyi">imgui</link>
, <link xl:href="https://github.com/pthom/imgui_bundle/blob/main/bindings/imgui_bundle/implot.pyi">implot</link>, and <link xl:href="https://github.com/pthom/imgui_bundle/blob/main/bindings/imgui_bundle/hello_imgui.pyi">hello imgui</link></simpara>
<simpara>Thanks to this, code completion in your favorite python IDE works like a charm, and porting code between Python and C&#43;&#43; becomes easy.</simpara>
</section>
</section>
<section xml:id="_build_and_install_instructions">
<title>Build and install instructions</title>
<section xml:id="_install_for_python">
<title>Install for Python</title>
<section xml:id="_install_from_pypi">
<title>Install from pypi</title>
<programlisting language="bash" linenumbering="unnumbered">pip install imgui-bundle
pip install opencv-contrib-python <co xml:id="CO1-1"/></programlisting>
<calloutlist>
<callout arearefs="CO1-1">
<para>in order to run the immvision module, install opencv-python or opencv-contrib-python</para>
</callout>
</calloutlist>
<simpara>Note: under windows, you might need to install <link xl:href="https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170#visual-studio-2015-2017-2019-and-2022">msvc redist</link>.</simpara>
</section>
<section xml:id="_install_from_source">
<title>Install from source:</title>
<programlisting language="bash" linenumbering="unnumbered">git clone https://github.com/pthom/imgui_bundle.git
cd imgui_bundle
git submodule update --init --recursive <co xml:id="CO2-1"/>
pip install -v . <co xml:id="CO2-2"/>
pip install opencv-contrib-python</programlisting>
<calloutlist>
<callout arearefs="CO2-1">
<para>Since there are lots of submodules, this might take a few minutes</para>
</callout>
<callout arearefs="CO2-2">
<para>The build process might take up to 5 minutes</para>
</callout>
</calloutlist>
</section>
<section xml:id="_run_the_python_demo">
<title>Run the python demo</title>
<simpara>Simply run <literal>demo_imgui_bundle</literal>.</simpara>
<simpara>The source for the demos can be found inside <link xl:href="https://github.com/pthom/imgui_bundle/tree/doc/bindings/imgui_bundle/demos_python">bindings/imgui_bundle/demos_python</link>.</simpara>
<tip>
<simpara>Consider <literal>demo_imgui_bundle</literal> as an always available manual for Dear ImGui Bundle with lots of examples and related code source.</simpara>
</tip>
</section>
</section>
<section xml:id="_install_for_c">
<title>Install for C&#43;&#43;</title>
<section xml:id="_integrate_dear_imgui_bundle_in_your_own_project_in_5_minutes">
<title>Integrate Dear ImGui Bundle in your own project in 5 minutes</title>
<simpara>The easiest way to use Dear ImGui Bundle in an external project is to use the example provided in <link xl:href="https://github.com/pthom/imgui_bundle/tree/doc/_example_integration">example_integration</link>.
This folder  includes everything you need to set up your own project.</simpara>
</section>
<section xml:id="_build_from_source">
<title>Build from source</title>
<simpara>If you choose to clone this repo, follow these instructions:</simpara>
<programlisting language="bash" linenumbering="unnumbered">git clone https://github.com/pthom/imgui_bundle.git
cd imgui_bundle
git submodule update --init --recursive <co xml:id="CO3-1"/>
mkdir build
cd build
cmake .. -DIMMVISION_FETCH_OPENCV=ON <co xml:id="CO3-2"/>
make -j</programlisting>
<calloutlist>
<callout arearefs="CO3-1">
<para>Since there are lots of submodules, this might take a few minutes</para>
</callout>
<callout arearefs="CO3-2">
<para>The flag <literal>-DIMMVISION_FETCH_OPENCV=ON</literal> is optional. If set, a minimal version of OpenCV will be downloaded a compiled at this stage (this might require a few minutes)</para>
</callout>
</calloutlist>
<sidebar>
<simpara>The <literal>immvision</literal> module will only be built if OpenCV can be found. Otherwise, it will be ignored, and no error will be emitted.</simpara>
<simpara>If you have an existing OpenCV install, set its path via:</simpara>
<programlisting language="bash" linenumbering="unnumbered">cmake .. -DOpenCV_DIR=/.../path/to/OpenCVConfig.cmake</programlisting>
</sidebar>
</section>
<section xml:id="_run_the_c_demo">
<title>Run the C&#43;&#43; demo</title>
<simpara>If you built ImGuiBundle from source, Simply run <literal>build/bin/demo_imgui_bundle</literal>.</simpara>
<simpara>The source for the demos can be found inside <link xl:href="https://github.com/pthom/imgui_bundle/tree/doc/bindings/imgui_bundle/demos_cpp/">bindings/imgui_bundle/demos_cpp</link>.</simpara>
<tip>
<simpara>Consider <literal>demo_imgui_bundle</literal> as a manual with lots of examples and related code source. It is always <link xl:href="https://traineq.org/ImGuiBundle/emscripten/bin/demo_imgui_bundle.html">available online</link></simpara>
</tip>
</section>
</section>
</section>
<section xml:id="_usage_instructions">
<title>Usage instructions</title>
<section xml:id="_dear_imgui_immediate_gui">
<title>Dear ImGui - Immediate GUI</title>
<simpara>Dear ImGui is an implementation of the Immediate Gui paradigm.</simpara>
<section xml:id="_consult_the_imgui_manual">
<title>Consult the ImGui Manual</title>
<simpara>Dear ImGui comes with a complete demo. It demonstrates all the widgets, together with an example code on how to use them.</simpara>
<simpara><link xl:href="https://pthom.github.io/imgui_manual_online/manual/imgui_manual.html">ImGui Manual</link> is an easy way to consult this demo, and to see the corresponding code. The demo code is in C&#43;&#43;, but read on for "Code advices" on how to translate from C&#43;&#43; to python.</simpara>
</section>
<section xml:id="_example">
<title>Example</title>
<simpara>An example is often worth a thousand words, the following code:</simpara>
<simpara>C&#43;&#43;</simpara>
<programlisting language="cpp" linenumbering="unnumbered">// Display a text
ImGui::Text("Counter = %i", app_state.counter);
ImGui::SameLine(); // by default ImGui starts a new line at each widget

// The following line displays a button
if (ImGui::Button("increment counter"))
    // And returns true if it was clicked: you can *immediately* handle the click
    app_state.counter += 1;

// Input a text: in C++, InputText returns a bool and modifies the text directly
bool changed = ImGui::InputText("Your name?", &amp;app_state.name);
ImGui::Text("Hello %s!", app_state.name.c_str());</programlisting>
<simpara>Python</simpara>
<programlisting language="python" linenumbering="unnumbered"># Display a text
imgui.text(f"Counter = {app_state.counter}")
imgui.same_line()  # by default ImGui starts a new line at each widget

# The following line displays a button
if imgui.button("increment counter"):
    # And returns true if it was clicked: you can *immediately* handle the click
    app_state.counter += 1

# Input a text: in python, input_text returns a tuple(modified, new_value)
changed, app_state.name = imgui.input_text("Your name?", app_state.name)
imgui.text(f"Hello {app_state.name}!")</programlisting>
<simpara>Displays this:</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="https://github.com/pthom/imgui_bundle/raw/doc/bindings/imgui_bundle/doc/doc_images/immediate_gui_example.png"/>
</imageobject>
<textobject><phrase>immediate gui example</phrase></textobject>
</mediaobject>
</informalfigure>
</section>
</section>
<section xml:id="_hello_imgui_starter_pack">
<title>Hello ImGui - Starter pack</title>
<simpara>Dear ImGui Bundle includes <link xl:href="https://github.com/pthom/hello_imgui">Hello ImGui</link>, which is itself based on ImGui. "Hello ImGui" can be compared to a starter pack that enables to easily write cross-platform Gui apps for Windows, macOS, Linux,  iOS,  and <link xl:href="https://en.wikipedia.org/wiki/Emscripten">emscripten</link>.</simpara>
<section xml:id="_api">
<title>API</title>
<simpara>See the "Hello ImGui" <link xl:href="https://github.com/pthom/hello_imgui/blob/master/src/hello_imgui/hello_imgui_api.md">API doc</link>. Also consult the doc on how to build <link xl:href="https://github.com/pthom/hello_imgui/tree/master/src/hello_imgui/dpi_aware.h">DPI aware</link> applications.</simpara>
</section>
<section xml:id="_features">
<title>Features</title>
<itemizedlist>
<listitem>
<simpara>Full multiplatform support: Windows, Linux, OSX, iOS, Emscripten, Android (poorly supported). See demo <link xl:href="https://traineq.org/HelloImGui_6_Platforms.mp4">video</link></simpara>
</listitem>
<listitem>
<simpara>Advanced layout handling</simpara>
</listitem>
<listitem>
<simpara>Power Save mode: reduce FPS when application is idle (see <link xl:href="https://github.com/pthom/hello_imgui/blob/master/src/hello_imgui/runner_params.h">RunnerParams.fpsIdle</link>)</simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/pthom/hello_imgui/tree/master/src/hello_imgui/dpi_aware.h">DPI aware</link> applications (widget placement, window size, font loading and scaling)</simpara>
</listitem>
<listitem>
<simpara>Theme tweaking (see <link xl:href="https://www.youtube.com/watch?v=4f_-3DDcAZk">demo video</link>, and <link xl:href="https://github.com/pthom/hello_imgui/blob/master/src/hello_imgui/imgui_theme.h">API</link> )</simpara>
</listitem>
<listitem>
<simpara>Window geometry utilities: autosize, restore window position, full screen, etc. (see <link xl:href="https://github.com/pthom/hello_imgui/blob/master/src/hello_imgui/app_window_params.h">WindowGeometry</link>)</simpara>
</listitem>
<listitem>
<simpara>Multiplatform <link xl:href="https://github.com/pthom/hello_imgui/blob/master/src/hello_imgui/hello_imgui_assets.h">assets embedding</link></simpara>
</listitem>
<listitem>
<simpara>Switch between Glfw or Sdl backend (see <link xl:href="https://github.com/pthom/hello_imgui/blob/master/src/hello_imgui/runner_params.h">RunnerParams.backendType</link>)</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>The usage of <literal>Hello ImGui</literal> is optional. You can also build an imgui application from scratch, in C&#43;&#43; or in python (see <link xl:href="https://github.com/pthom/imgui_bundle/tree/doc/bindings/imgui_bundle/demos_python/demos_immapp/imgui_example_glfw_opengl3.py">python example</link>)</simpara>
</note>
<tip>
<simpara>HelloImGui is fully configurable by POD (plain old data) structures. See <link xl:href="https://github.com/pthom/hello_imgui/blob/master/src/hello_imgui/hello_imgui_api.md">their description</link></simpara>
</tip>
</section>
<section xml:id="_advanced_layout_and_theming_with_hello_imgui">
<title>Advanced layout and theming with Hello ImGui:</title>
<simpara>See the demo named "demo_docking", which demonstrates:</simpara>
<itemizedlist>
<listitem>
<simpara>How to handle complex layouts: you can define several layouts and switch between them:  each layout which will remember the user modifications and the list of opened windows</simpara>
</listitem>
<listitem>
<simpara>How to use theming</simpara>
</listitem>
<listitem>
<simpara>How to store you own user settings in the app ini file</simpara>
</listitem>
<listitem>
<simpara>How to add a status bar and a log window</simpara>
</listitem>
<listitem>
<simpara>How to reduce the FPS when idling (to reduce CPU usage)</simpara>
</listitem>
</itemizedlist>
<simpara>Links:</simpara>
<itemizedlist>
<listitem>
<simpara>see <link xl:href="https://github.com/pthom/imgui_bundle//blob/main/bindings/imgui_bundle/demos_python/demos_immapp/demo_docking.py">demo_docking.py</link></simpara>
</listitem>
<listitem>
<simpara>see <link xl:href="https://github.com/pthom/imgui_bundle//blob/main/bindings/imgui_bundle/demos_cpp/demos_immapp/demo_docking.cpp">demo_docking.cpp</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://traineq.org/ImGuiBundle/emscripten/bin/demo_docking.html">Run this demo online</link></simpara>
</listitem>
<listitem>
<simpara>see <link xl:href="https://www.youtube.com/watch?v=XKxmz__F4ow">a short video explanation about layouts</link> on YouTube</simpara>
</listitem>
</itemizedlist>
</section>
</section>
<section xml:id="_immapp_immediate_app">
<title>ImmApp - Immediate App</title>
<simpara>ImGui Bundle includes a library named ImmApp (which stands for Immediate App). ImmApp is a thin extension of HelloImGui that enables to easily initialize the ImGuiBundle addons that require additional setup at startup</simpara>
<section xml:id="_api_2">
<title>API</title>
<simpara><link xl:href="https://github.com/pthom/imgui_bundle/tree/doc/external/immapp/immapp/runner.h">C&#43;&#43; API</link></simpara>
<simpara><link xl:href="https://github.com/pthom/imgui_bundle/tree/doc/bindings/imgui_bundle/immapp/immapp_cpp.pyi">Python bindings</link></simpara>
</section>
<section xml:id="_how_to_start_an_application_with_addons">
<title>How to start an application with addons</title>
<example>
<title>Click to see an example application with addons</title>
<simpara>Some libraries included by ImGui Bundle require an initialization at startup. ImmApp makes this easy via AddOnParams.</simpara>
<simpara>The example program below demonstrates how to run an application which will use implot (which requires a context to be created at startup), and imgui_md (which requires additional fonts to be loaded at startup).</simpara>
<simpara>C&#43;&#43;</simpara>
<programlisting language="cpp" linenumbering="unnumbered">#include "immapp/immapp.h"
#include "imgui_md_wrapper/imgui_md_wrapper.h"
#include "implot/implot.h"
#include "demo_utils/api_demos.h"
#include &lt;vector&gt;
#include &lt;cmath&gt;


int main(int, char**)
{
    // This call is specific to the ImGui Bundle interactive manual. In a standard application, you could write:
    //         HelloImGui::SetAssetsFolder("my_assets"); // (By default, HelloImGui will search inside "assets")
    ChdirBesideAssetsFolder();

    constexpr double pi = 3.1415926535897932384626433;
    std::vector&lt;double&gt; x, y1, y2;
    for (double _x = 0; _x &lt; 4 * pi; _x += 0.01)
    {
        x.push_back(_x);
        y1.push_back(std::cos(_x));
        y2.push_back(std::sin(_x));
    }

    auto gui = [x,y1,y2]()
    {
        ImGuiMd::Render("# This is the plot of _cosinus_ and *sinus*");  // Markdown
        if (ImPlot::BeginPlot("Plot"))
        {
            ImPlot::PlotLine("y1", x.data(), y1.data(), x.size());
            ImPlot::PlotLine("y2", x.data(), y2.data(), x.size());
            ImPlot::EndPlot();
        }
    };

    HelloImGui::SimpleRunnerParams runnerParams { .guiFunction = gui, .windowSize = {600, 400} };
    ImmApp::AddOnsParams addons { .withImplot = true, .withMarkdown = true };
    ImmApp::Run(runnerParams, addons);

    return 0;
}</programlisting>
<simpara>Python:</simpara>
<programlisting language="python" linenumbering="unnumbered">import numpy as np
from imgui_bundle import implot, imgui_md, immapp
from imgui_bundle.demos_python import demo_utils


def main():
    # This call is specific to the ImGui Bundle interactive manual. In a standard application, you could write:
    #         hello_imgui.set_assets_folder("my_assets"); # (By default, HelloImGui will search inside "assets")
    demo_utils.set_hello_imgui_demo_assets_folder()

    x = np.arange(0, np.pi * 4, 0.01)
    y1 = np.cos(x)
    y2 = np.sin(x)

    def gui():
        imgui_md.render("# This is the plot of _cosinus_ and *sinus*")  # Markdown
        if implot.begin_plot("Plot"):
            implot.plot_line("y1", x, y1)
            implot.plot_line("y2", x, y2)
            implot.end_plot()

    immapp.run(gui, with_implot=True, with_markdown=True, window_size=(600, 400))


if __name__ == "__main__":
    main()</programlisting>
</example>
</section>
</section>
<section xml:id="_using_dear_imgui_bundle_with_jupyter_notebook">
<title>Using Dear ImGui Bundle with jupyter notebook</title>
<simpara>ImmApp adds support for integration inside jupyter notebook: the application will be run in an external window, and a screenshot will be placed on the notebook after execution.</simpara>
<simpara>This requires a window server, and will not run on google collab.</simpara>
<simpara>Below is a screenshot, that you can test by running <literal>jupyter notebook</literal> inside <literal>bindings/imgui_bundle/demos_python/notebooks</literal></simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="https://github.com/pthom/imgui_bundle/raw/doc/bindings/imgui_bundle/doc/doc_images/immapp_notebook_example.jpg"/>
</imageobject>
<textobject><phrase>immapp notebook example</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara><link xl:href="https://www.youtube.com/watch?v=QQIC7lpHono">40 seconds demo video on Youtube</link></simpara>
<section xml:id="_api_3">
<title>API:</title>
<simpara><link xl:href="https://github.com/pthom/imgui_bundle/tree/doc/bindings/imgui_bundle/immapp/immapp_notebook.py">immapp/immapp_notebook.py</link></simpara>
</section>
</section>
</section>
<section xml:id="_c_python_porting_advices">
<title>C&#43;&#43; / Python porting advices</title>
<section xml:id="_general_advices">
<title>General advices</title>
<simpara>ImGui is a C&#43;&#43; library that was ported to Python. In order to work with it, you will often refer to its <link xl:href="https://pthom.github.io/imgui_manual_online/manual/imgui_manual.html">manual</link>, which shows example code in C&#43;&#43;.</simpara>
<simpara>In order to translate from C&#43;&#43; to Python:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Change the function names and parameters' names from <literal>CamelCase</literal> to <literal>snake_case</literal></simpara>
</listitem>
<listitem>
<simpara>Change the way the output are handled.</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>in C&#43;&#43; <literal>ImGui::RadioButton</literal> modifies its second parameter (which is passed by address) and returns true if the user clicked the radio button.</simpara>
</listitem>
<listitem>
<simpara>In python, the (possibly modified) value is transmitted via the return: <literal>imgui.radio_button</literal> returns a <literal>Tuple[bool, str]</literal> which contains <literal>(user_clicked, new_value)</literal>.</simpara>
</listitem>
</orderedlist>
</listitem>
<listitem>
<simpara>if porting some code that uses static variables, use the <literal>@immapp.static</literal> decorator.
 In this case, this decorator simply adds a variable <literal>value</literal> at  the function scope. It is preserved between calls.
Normally, this variable should be accessed via <literal>demo_radio_button.value</literal>, however the first line of the function adds a synonym named static for more clarity.
Do not overuse them! Static variable suffer from almost the same shortcomings as global variables, so you should prefer to modify an application state.</simpara>
</listitem>
</orderedlist>
<section xml:id="_example_2">
<title>Example:</title>
<simpara>C&#43;&#43;</simpara>
<programlisting language="cpp" linenumbering="unnumbered">void DemoRadioButton()
{
    static int value = 0;
    ImGui::RadioButton("radio a", &amp;value, 0); ImGui::SameLine();
    ImGui::RadioButton("radio b", &amp;value, 1); ImGui::SameLine();
    ImGui::RadioButton("radio c", &amp;value, 2);
}</programlisting>
<simpara>Python</simpara>
<programlisting language="python" linenumbering="unnumbered">@immapp.static(value=0)
def demo_radio_button():
    static = demo_radio_button
    clicked, static.value = imgui.radio_button("radio a", static.value, 0)
    imgui.same_line()
    clicked, static.value = imgui.radio_button("radio b", static.value, 1)
    imgui.same_line()
    clicked, static.value = imgui.radio_button("radio c", static.value, 2)</programlisting>
</section>
</section>
<section xml:id="_enums_and_textinput">
<title>Enums and TextInput</title>
<simpara>In the example below, two differences are important:</simpara>
<section xml:id="_inputtext_functions">
<title>InputText functions:</title>
<simpara><literal>imgui.input_text</literal> (Python) is equivalent to <literal>ImGui::InputText</literal> (C&#43;&#43;)</simpara>
<itemizedlist>
<listitem>
<simpara>In C&#43;&#43;, it uses two parameters for the text: the text pointer, and its length.</simpara>
</listitem>
<listitem>
<simpara>In Python, you can simply pass a string, and get back its modified value in the returned tuple.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_enums_handling">
<title>Enums handling:</title>
<itemizedlist>
<listitem>
<simpara><literal>ImGuiInputTextFlags_</literal> (C&#43;&#43;) corresponds to <literal>imgui.InputTextFlags_</literal> (python) and it is an <emphasis>enum</emphasis> (note the trailing underscore).</simpara>
</listitem>
<listitem>
<simpara><literal>ImGuiInputTextFlags</literal> (C&#43;&#43;) corresponds to <literal>imgui.InputTextFlags</literal> (python) and it is an <emphasis>int</emphasis>  (note: no trailing underscore)</simpara>
</listitem>
</itemizedlist>
<simpara>You will find many similar enums.</simpara>
<simpara>The dichotomy between int and enums, enables you to write flags that are a combinations of values from the enum (see example below).</simpara>
</section>
<section xml:id="_example_3">
<title>Example</title>
<simpara>C&#43;&#43;</simpara>
<programlisting language="cpp" linenumbering="unnumbered">void DemoInputTextUpperCase()
{
    static char text[64] = "";
    ImGuiInputTextFlags flags = (
        ImGuiInputTextFlags_CharsUppercase
        | ImGuiInputTextFlags_CharsNoBlank
    );
    /*bool changed = */ ImGui::InputText("Upper case, no spaces", text, 64, flags);
}</programlisting>
<simpara>Python</simpara>
<programlisting language="python" linenumbering="unnumbered">@immapp.static(text="")
def demo_input_text_decimal() -&gt; None:
    static = demo_input_text_decimal
    flags:imgui.InputTextFlags = (
            imgui.InputTextFlags_.chars_uppercase.value
          | imgui.InputTextFlags_.chars_no_blank.value
        )
    changed, static.text = imgui.input_text("Upper case, no spaces", static.text, flags)</programlisting>
<sidebar>
<simpara>Note: in C&#43;&#43;, by using <literal>imgui_stdlib.h</literal>, it is also possible to write:</simpara>
<programlisting language="cpp" linenumbering="unnumbered">#include "imgui/misc/cpp/imgui_stdlib.h"

void DemoInputTextUpperCase_StdString()
{
    static std::string text;
    ImGuiInputTextFlags flags = (
        ImGuiInputTextFlags_CharsUppercase
        | ImGuiInputTextFlags_CharsNoBlank
    );
    /*bool changed = */ ImGui::InputText("Upper case, no spaces", &amp;text, flags);
}</programlisting>
</sidebar>
</section>
</section>
<section xml:id="_advanced_glfw_callbacks">
<title>Advanced glfw callbacks</title>
<simpara>When using the glfw backend, you can set advanced callbacks on all glfw events.</simpara>
<simpara>Below is an example that triggers a callback whenever the window size is changed:</simpara>
<programlisting language="python" linenumbering="unnumbered">import imgui_bundle
import glfw   # always import glfw *after* imgui_bundle!!!


# define a callback
def my_window_size_callback(window: glfw._GLFWwindow, w: int, h: int):
    print(f"Window size changed to {w}x{h}")


# Get the glfw window used by hello imgui
window = imgui_bundle.glfw_utils.glfw_window_hello_imgui()
glfw.set_window_size_callback(window, my_window_size_callback)</programlisting>
<caution>
<simpara>It is important to import glfw <emphasis>after</emphasis> imgui_bundle, since - upon import - imgui_bundle informs glfw that it shall use its own version of the glfw dynamic library.</simpara>
</caution>
</section>
<section xml:id="_debug_native_c_in_python_scripts">
<title>Debug native C&#43;&#43; in python scripts</title>
<simpara>ImGui Bundle provides tooling to help you debug the C&#43;&#43; side, when you encounter a bug that is difficult to diagnose from Python.</simpara>
<simpara>It can be used in two steps:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>Edit the file <literal>pybind_native_debug/pybind_native_debug.py</literal>. Change its content so that it runs the python code you would like to debug. Make sure it works when you run it as a python script.</simpara>
</listitem>
<listitem>
<simpara>Now, debug the C&#43;&#43; project <literal>pybind_native_debug_bundle</literal> which is defined in the directory <literal>pybind_native_debug/</literal>. This will run your python code from C&#43;&#43;, and you can debug the C&#43;&#43; side (place breakpoints, watch variables, etc).</simpara>
</listitem>
</orderedlist>
<simpara>Example: <link xl:href="https://github.com/pthom/hello_imgui/issues/33">this issue on macOS</link> was solved thanks to this.</simpara>
</section>
</section>
<section xml:id="_closing_words">
<title>Closing words</title>
<section xml:id="_who_is_this_project_for">
<title>Who is this project for</title>
<simpara>As mentioned in the intro,</simpara>
<sidebar>
<simpara><link xl:href="https://github.com/pthom/imgui_bundle">Dear ImGui Bundle</link> is a bundle for <link xl:href="https://github.com/ocornut/imgui">Dear ImGui</link>, including various powerful libraries from its ecosystem. It enables to easily create ImGui applications in C&#43;&#43; and Python, under Windows, macOS, and Linux. It is aimed at application developers, researchers, and beginner developers who want to quickly get started.</simpara>
</sidebar>
<simpara>Dear ImGui Bundle aims to make applications prototyping fast and easy, in a multiplatform / multi-tooling context. The intent is to reduce the time between an idea and a first GUI prototype down to almost zero.</simpara>
<simpara>It is well adapted for</simpara>
<itemizedlist>
<listitem>
<simpara>developers and researchers who want to switch easily between and research and development environment by facilitating the port of research artifacts</simpara>
</listitem>
<listitem>
<simpara>beginners and developers who want to quickly develop an application without learning a GUI framework</simpara>
</listitem>
</itemizedlist>
<section xml:id="_who_is_this_project_not_for">
<title>Who is this project <emphasis role="strong">not</emphasis> for</title>
<simpara>You should prefer a more complete framework (such as Qt for example) if your intent is to build a fully fledged application, with support for internationalization, advanced styling, etc.</simpara>
<simpara>Also, the library makes no guarantee of ABI stability, and its API is opened to slight adaptations and breaking changes if they are found to make the overall usage better and/or safer.</simpara>
</section>
</section>
<section xml:id="_acknowledgments">
<title>Acknowledgments</title>
<simpara>Dear ImGui Bundle would not be possible without the work of the authors of "Dear ImGui", and especially <link xl:href="https://www.miracleworld.net/">Omar Cornut</link>.</simpara>
<simpara>It also includes a lot of other projects, and I&#8217;d like to thank their authors for their awesome work!</simpara>
<simpara>A particular mention for <link xl:href="https://evanpezent.com/">Evan Pezent</link> (author of ImPlot), <link xl:href="https://github.com/CedricGuillemet">Cédric Guillemet</link> (author of ImGuizmo), <link xl:href="https://merlin3d.wordpress.com/about/">Balázs Jákó</link> (author of ImGuiColorTextEdit), and <link xl:href="https://github.com/thedmd">Michał Cichoń</link> (author of imgui-node-editor), and <link xl:href="https://github.com/mekhontsev">Dmitry Mekhontsev</link> (author of imgui-md), <link xl:href="https://github.com/andyborrell">Andy Borrel</link> (author of imgui-tex-inspect, another image debugging tool, which I discovered long after having developed immvision).</simpara>
<simpara>This doc was built using <link xl:href="https://asciidoc.org/">Asciidoc</link>.</simpara>
<simpara>Immvision was inspired by <link xl:href="https://billbaxter.com/projects/imdebug/">The Image Debugger</link>, by Bill Baxter.</simpara>
</section>
<section xml:id="_license">
<title>License</title>
<sidebar>
<simpara>The MIT License (MIT)</simpara>
<simpara>Copyright (c) 2021-2023 Pascal Thomet</simpara>
<simpara>Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:</simpara>
<simpara>The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.</simpara>
<simpara>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.</simpara>
</sidebar>
</section>
<section xml:id="_alternatives">
<title>Alternatives</title>
<simpara><link xl:href="https://pyimgui.readthedocs.io/en/latest/">pyimgui</link> provides battle-tested comprehensive python bindings for ImGui. I worked with this project a lot, and contributed a bit to it. In the end, I had to develop a separate project, in order to be able to add auto-generated and auto-documented python modules.</simpara>
<simpara><link xl:href="https://dearpygui.readthedocs.io/en/latest/">Dear PyGui</link>  (<link xl:href="https://github.com/hoffstadt/DearPyGui">repository</link>) provides python bindings for ImGui with a lot of addons, and a more pythonesque API, which makes it perhaps more suited for Python only projects.</simpara>
</section>
<section xml:id="_about_the_author">
<title>About the author</title>
<simpara>Dear ImGui Bundle is developed by Pascal Thomet. I am reachable on my <link xl:href="https://github.com/pthom">Github page</link>. I sometimes <link xl:href="http://code-ballads.net/">blog</link>. There is a <link xl:href="https://www.youtube.com/playlist?list=PLaJx_KrDECZPzttQ77Gv8DD7OAUwmtWUc">playlist</link> related to ImGui Bundle on YouTube.</simpara>
<simpara>I have a past in computer vision, and a lot of experience in the trenches between development and research teams; and I found ImGui to be a nice way to reduce the delay between a research prototype and its use in production code.</simpara>
<simpara>I also have an inclination for self documenting code, and the doc you are reading was a way to explore new ways to document projects.</simpara>
</section>
<section xml:id="_how_is_dear_imgui_bundle_developed">
<title>How is Dear ImGui Bundle developed</title>
<simpara>The development of the initial version of Dear ImGui Bundle took about one year at full time.</simpara>
<simpara>The bindings are auto-generated thanks to an advanced parser, so that they are easy to keep up to date. I&#8217;ll give more information about the bindings generator a bit later in 2023.</simpara>
<simpara>Please be tolerant if you find issues! Dear ImGui Bundle is developed for free, under a very permissive license, by one main author (and most of its API comes from external libraries).</simpara>
<simpara>If you need consulting about this library or about the bindings generator in the context of a commercial project, please contact me by email.</simpara>
<simpara>Contributions are welcome!</simpara>
<section xml:id="_history">
<title>History</title>
<simpara>Three of my past projects gave me the idea to develop this library.</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://pthom.github.io/imgui_manual_online/manual/imgui_manual.html">ImGui Manual</link>, an interactive manual for Dear ImGui, which I developed in June 2020</simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://traineq.org/implot_demo/src/implot_demo.html">implot demo</link> which I developed in 2020.</simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://github.com/pthom/imgui_datascience">imgui_datascience</link>, a python package I developed in 2018 for image analysis and debugging. Its successor is immvision.</simpara>
</listitem>
</itemizedlist>
<simpara>Developments for Dear ImGui Bundle and its related automatic binding generator began in january 2022.</simpara>
</section>
</section>
</section>
<section xml:id="_faq">
<title>FAQ</title>
<simpara>See <link xl:href="https://pthom.github.io/imgui_bundle/faq.html">FAQ</link></simpara>
</section>
</article>