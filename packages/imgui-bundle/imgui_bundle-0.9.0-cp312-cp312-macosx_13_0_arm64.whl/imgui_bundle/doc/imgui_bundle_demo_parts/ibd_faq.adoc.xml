<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>FAQ</title>
<date>2023-02-23</date>
</info>
<section xml:id="_python_bindings_faq">
<title>Python bindings FAQ</title>
<itemizedlist>
<listitem>
<simpara>Q: IDE support with Visual Studio Code / Visual studio does autocomplete my code (i.e. it does not find the stubs):</simpara>
</listitem>
</itemizedlist>
<simpara>It may take some time for Visual Studio code to find the stubs. You can try to change the setting "python.languageServer" to "default", and then change it back to "pylance". This might speed up the process a bit.</simpara>
<itemizedlist>
<listitem>
<simpara>Q: Editable mode does not work</simpara>
</listitem>
</itemizedlist>
<simpara>You should upgrade pip: <literal>pip install -U pip</literal></simpara>
</section>
<section xml:id="_high_dpi_with_helloimgui_and_imgui_bundle">
<title>High-DPI with HelloImGui and ImGui Bundle</title>
<simpara>A high-DPI screen could have a <literal>physical pixel</literal> resolution of 3840x2160, but on this screen the OS will display widgets with a scaling factor of 200%, so that widgets do not look too small on it.</simpara>
<simpara><literal>HelloImGui</literal> and <literal>Dear ImGui Bundle</literal> provides a <link xl:href="https://github.com/pthom/hello_imgui/blob/master/src/hello_imgui/dpi_aware.h">dedicated API</link> for High-DPI handling</simpara>
</section>
<section xml:id="_high_dpi_with_dear_imgui">
<title>High-DPI with Dear ImGui</title>
<simpara>If your application uses Dear ImGui without HelloImGui or Dear ImGui Bundle, read on for more details: special care must be taken in order to correctly handle screen with high-DPI within ImGui. The solutions will differ greatly depending on the platform.</simpara>
<simpara>This FAQ article tries to be a complement to <link xl:href="https://github.com/ocornut/imgui/blob/master/docs/FAQ.md#q-how-should-i-handle-dpi-in-my-application">the related ImGui FAQ article</link></simpara>
<section xml:id="_macos">
<title>macOS</title>
<simpara>On macOS, our screen&#8217;s physical pixel resolution of 3840x2160 will be hidden by the OS. For example, the OS will answer 1920x1080 when querying the screen resolution (this corresponds to <literal>screen coordinates</literal>, which may differ from the physical pixels).</simpara>
<simpara>However, each window has an internal frame buffer whose size is in physical pixels. This is just hidden from the user in most occasions. When  using ImGui, this info is stored inside <literal>ImGui::GetDrawData()&#8594;FramebufferScale</literal>.</simpara>
<simpara>On macOS, the visible windows and widgets sizes will appear consistent when switching from a high-DPI screen (for example a Retina screen) to a standard screen.</simpara>
<simpara>However, font rendering may appear poor and blurry if no action is taken. A simple solution is to query the main screen "backing scale factor", and to use it when loading fonts, like so:</simpara>
<programlisting language="cpp" linenumbering="unnumbered">// Query macOS for the scaling factor (by using NSScreen api)
// (this is a simplified version, which handles only the main screen,
//  see imgui/backends/imgui_impl_osx.mm for a more complete version)
float windowDevicePixelRatio = NSScreen.mainScreen.backingScaleFactor;

// [...]

// When loading fonts use this factor:
ImGui::GetIO().Fonts-&gt;AddFontFromFileTTF(fontFileName, fontSize * windowDevicePixelRatio);

// [...]

// Set ImGui::GetIO().FontGlobalScale
ImGui::GetIO().FontGlobalScale = 1.f / windowDevicePixelRatio;</programlisting>
</section>
<section xml:id="_emscripten">
<title>Emscripten</title>
<simpara>With emscripten (i.e. inside a browser) the situation is close to macOS: widgets' sizes are relative to the current scaling factor of the screen, <emphasis role="strong">and</emphasis> to the current zoom level of the given page.</simpara>
<simpara>As a result, widgets' sizes will appear consistent but font rendering may be blurry if no action is taken. A simple solution is to query the browser&#8217;s <literal>devicePixelRatio</literal>:</simpara>
<programlisting language="cpp" linenumbering="unnumbered">// Query the browser for the scaling factor (this depends on the screen scaling factor and on the browser zoom level)
double windowDevicePixelRatio = (float)EM_ASM_DOUBLE( { return window.devicePixelRatio; });

// [...]

// When loading fonts use this factor:
ImGui::GetIO().Fonts-&gt;AddFontFromFileTTF(fontFileName, fontSize * windowDevicePixelRatio);

// [...]

// Set ImGui::GetIO().FontGlobalScale
ImGui::GetIO().FontGlobalScale = 1.f / windowDevicePixelRatio;</programlisting>
</section>
<section xml:id="_windows">
<title>Windows</title>
<simpara>Under windows, two cases are possible:</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>If the application is not <link xl:href="https://learn.microsoft.com/en-us/windows/win32/hidpi/setting-the-default-dpi-awareness-for-a-process">"DPI aware"</link> the application will not be informed about the physical screen resolution. Windows and widgets sizes will be consistent between monitors; however fonts will appear blurry, and nothing can be done about it (there is no access to an underlying buffer with a bigger resolution).</simpara>
</listitem>
<listitem>
<simpara>If the application is "DPI aware", the application will be informed about the physical size of the screen (i.e. in this case, screen coordinates correspond to physical pixels). As a result, windows fonts, and widgets may appear too small, because their sizes need to be multiplied by the scaling factor. Widgets positioning is also impacted. Also, when moving a window from a high-DPI screen to a standard screen, its apparent size may double suddenly.</simpara>
</listitem>
</orderedlist>
<note>
<simpara>Windows applications are <emphasis role="strong">not</emphasis> DPI aware by default. <emphasis>Nothing can be done to improve the rendering of non DPI aware applications</emphasis>. The rest of this FAQ deals with DPI aware applications.</simpara>
</note>
<simpara>Several issues can be encountered when running a DPI-Aware application with ImGui. For example, with a scaling factor of 200%, and if no action  is taken:</simpara>
<itemizedlist>
<listitem>
<simpara>The application window initial size will be twice too small</simpara>
</listitem>
<listitem>
<simpara>Widgets' sizes will be twice too small. Widgets' position will be also affected</simpara>
</listitem>
<listitem>
<simpara>Fonts will be displayed twice too small</simpara>
</listitem>
<listitem>
<simpara>Dear ImGui&#8217;s styling will be too small (margins, roundings, etc.)</simpara>
</listitem>
<listitem>
<simpara>The application window size will visually double when moving the window to a standard screen</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_linux">
<title>Linux</title>
<simpara>The situation on linux is close to Windows' DPI-aware applications. Applications are informed about the physical number of pixels, and they need to scale according to the screen dpi factor.</simpara>
</section>
<section xml:id="_windows_how_to_make_the_application_dpi_aware">
<title>Windows: how to make the application DPI aware</title>
<simpara>See <link xl:href="https://github.com/ocornut/imgui/blob/master/docs/FAQ.md#q-how-should-i-handle-dpi-in-my-application">the ImGui related FAQ</link></simpara>
</section>
<section xml:id="_windows_linux_how_to_correctly_size_and_position_the_widgets">
<title>Windows &amp; Linux: how to correctly size and position the widgets</title>
<simpara>It is almost always a bad idea to use fixed sizes. This will lead to portability issues, especially on high-DPI screens.</simpara>
<simpara>Always pre-multiply your positions and sizes by <literal>ImGui::GetFontSize()</literal>!</simpara>
<sidebar>
<simpara>In order to make this simpler, the <literal>EmVec2</literal> function below can greatly reduce the friction: whenever you need to use ImVec2 for positioning or sizing, use <literal>EmVec2</literal> instead!</simpara>
<simpara><literal>EmVec2()</literal> returns a size in multiples of the font height. It is somewhat comparable to the <link xl:href="https://lyty.dev/css/css-unit.html">em CSS Unit</link>.</simpara>
<programlisting language="cpp" linenumbering="unnumbered">ImVec2 EmVec2(float x, float y)
{
    IM_ASSERT(GImGui != NULL);
    float k = ImGui::GetFontSize();
    return ImVec2(k * x, k * y);
}</programlisting>
</sidebar>
</section>
<section xml:id="_windows_linux_how_to_load_fonts_at_the_correct_size">
<title>Windows &amp; Linux: How to load fonts at the correct size</title>
<simpara>You need to query the application window content scale.</simpara>
<simpara>On windows, to achieve this, you can call <link xl:href="https://learn.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getdpiforwindow">DpiForWindow</link> on windows.</simpara>
<simpara>For example:</simpara>
<programlisting language="cpp" linenumbering="unnumbered">float WindowContentScale(HWND window) {
    int dpi = GetDpiForWindow(window);
    float dpiScale = dpi / 96.f; // 96 is the "standard dpi"
    return dpiScale;
}</programlisting>
<simpara>Some backends may wrap this, e.g. GLFW:</simpara>
<programlisting language="cpp" linenumbering="unnumbered">float WindowContentScale(GLFWwindow * window) {
    float xscale, yscale;
    glfwGetWindowContentScale((GLFWwindow *) window, &amp;xscale, &amp;yscale);
    return xscale; // xscale and yscale will likely be equal
}</programlisting>
<simpara>Once you know the window content scale, you can use this when loading fonts:</simpara>
<programlisting language="cpp" linenumbering="unnumbered">float fontLoadingFactor = WindowContentScale(...);
ImGui::GetIO().Fonts-&gt;AddFontFromFileTTF(fontFileName, fontSize * fontLoadingFactor);</programlisting>
</section>
<section xml:id="_windows_linux_how_to_adapt_dear_imguis_styling_scale">
<title>Windows &amp; Linux: how to adapt Dear ImGui’s styling scale</title>
<programlisting language="cppp" linenumbering="unnumbered">float dpiScale = WindowContentScale(...);
ImGui::GetStyle().ScaleAllSizes(dpiScale);</programlisting>
</section>
<section xml:id="_windows_linux_how_to_have_a_consistent_initial_window_size_between_monitors">
<title>Windows &amp; Linux: how to have a consistent initial window size between monitors</title>
<simpara>As mentioned before, multiply your window size by WindowContentScale(&#8230;&#8203;).</simpara>
<section xml:id="_windows_linux_adapting_windows_and_font_size_when_application_is_moved_between_monitors">
<title>Windows &amp; Linux: adapting windows and font size when application is moved between monitors</title>
<simpara>This is a bit more difficult: see <link xl:href="https://github.com/ocornut/imgui/blob/master/docs/FAQ.md#q-how-should-i-handle-dpi-in-my-application">ImGui related FAQ</link></simpara>
</section>
</section>
</section>
</article>