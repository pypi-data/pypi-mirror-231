// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tsl/profiler/protobuf/profiler_analysis.proto

#include "tsl/profiler/protobuf/profiler_analysis.pb.h"
#include "tsl/profiler/protobuf/profiler_analysis.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/sync_stream.h>
#include <gmock/gmock.h>
namespace tensorflow {


namespace grpc {

class MockProfileAnalysisStub : public ProfileAnalysis::StubInterface {
 public:
  MOCK_METHOD3(NewSession, ::grpc::Status(::grpc::ClientContext* context, const ::tensorflow::NewProfileSessionRequest& request, ::tensorflow::NewProfileSessionResponse* response));
  MOCK_METHOD3(AsyncNewSessionRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::NewProfileSessionResponse>*(::grpc::ClientContext* context, const ::tensorflow::NewProfileSessionRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncNewSessionRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::NewProfileSessionResponse>*(::grpc::ClientContext* context, const ::tensorflow::NewProfileSessionRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(EnumSessions, ::grpc::Status(::grpc::ClientContext* context, const ::tensorflow::EnumProfileSessionsAndToolsRequest& request, ::tensorflow::EnumProfileSessionsAndToolsResponse* response));
  MOCK_METHOD3(AsyncEnumSessionsRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::EnumProfileSessionsAndToolsResponse>*(::grpc::ClientContext* context, const ::tensorflow::EnumProfileSessionsAndToolsRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncEnumSessionsRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::EnumProfileSessionsAndToolsResponse>*(::grpc::ClientContext* context, const ::tensorflow::EnumProfileSessionsAndToolsRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(GetSessionToolData, ::grpc::Status(::grpc::ClientContext* context, const ::tensorflow::ProfileSessionDataRequest& request, ::tensorflow::ProfileSessionDataResponse* response));
  MOCK_METHOD3(AsyncGetSessionToolDataRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ProfileSessionDataResponse>*(::grpc::ClientContext* context, const ::tensorflow::ProfileSessionDataRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetSessionToolDataRaw, ::grpc::ClientAsyncResponseReaderInterface< ::tensorflow::ProfileSessionDataResponse>*(::grpc::ClientContext* context, const ::tensorflow::ProfileSessionDataRequest& request, ::grpc::CompletionQueue* cq));
};

} // namespace grpc

} // namespace tensorflow

