"""
osve.osve
~~~~~~~~~~~~~~~~~

This module contains the OSVE class that handles the simulation
through AGM and EPSng.
"""

from ctypes import *
from .utils import build_lib_path


class osve:
    """The OSVE class intended to handle the simulation"""

    def __init__(self, if_shared_lib_path=None):

        self.lib_path = build_lib_path() if if_shared_lib_path is None else if_shared_lib_path

    def __load_library(self, silent=False):
        try:
            self.libs = CDLL(self.lib_path)
            if not silent:
                print("OSVE IF Library Successfully loaded", flush=True)
        except Exception as e:
            print(e)

    def __unload_library(self):
        """Release resources used by OSVE.

        This method will release and free the resources used by OSVE
        when using step by step execution. Returns 0 if successfull.

        Note: We need to do it be able to execute the osve several time
        within the same python run.
        :rtype: int
        """
        dl_unload = CDLL(None).dlclose
        dl_unload.argtypes = [c_void_p]
        dl_unload.restype = c_int

        return dl_unload(self.libs._handle)


    def execute(self, root_scenario_path, session_file_path):
        """Runs the full simulation.

        This method will run the simulation with the inputs specified
        on the session file. All simulation steps performed in one call.
        Return 0 if the execution has been successfull, other int otherwise.
        (This doesn't mean that there are no constraints violations)

        :param root_scenario_path: Provide the top level path of the
            scenario file_path to be used to resolve the relative paths.
        :type root_scenario_path: str
        :param session_file_path: Provide the location and name of the
            session file containing all the scenarios files.
        :type session_file_path: str
        :rtype: int
        """
        self.__load_library()
        self.libs.osve_execute.argtypes = [c_char_p, c_char_p]
        self.libs.osve_execute.restype = c_int
        value = self.libs.osve_execute(bytes(root_scenario_path, 'utf-8'), bytes(session_file_path, 'utf-8'))
        self.__unload_library()
        return value

    def init_step(self, root_scenario_path, session_file_path):
        """Initialise the simulation.

        This method will initialise the OSVE environment for performing
        the simulation step by step. Returns a Json string with the
        initialisation results.

        :param root_scenario_path: Provide the top level path of the
            scenario file_path to be used to resolve the relative paths.
        :type root_scenario_path: str
        :param session_file_path: Provide the location and name of the
            session file containing all the scenarios files.
        :type session_file_path: str
        :rtype: str
        """
        self.__load_library()
        self.libs.osve_initStep.argtypes = [c_char_p, c_char_p]
        self.libs.osve_initStep.restype = c_char_p
        res = self.libs.osve_initStep(bytes(root_scenario_path,'utf-8'), bytes(session_file_path,'utf-8'))
        return (res.decode('utf-8'))

    def execute_step(self):
        """Runs the simulation previously initialised.

        This method will run the simulation previously initialised with
        the init_step method. Returns a Json string with the
        execution results.

        :rtype: str
        """
        self.libs.osve_executeStep.argtypes = []
        self.libs.osve_executeStep.restype = c_char_p
        res = self.libs.osve_executeStep()
        return (res.decode('utf-8'))

    def write_files(self, segment_timeline_json_path, segment_timeline_txt_path):
        """Writes generated outputs.

        This method will write the outputs generated by the execute_step
        method call. Returns a Json string with the write results.

        :param segment_timeline_json_path: The file path to write the
            timeline in JSON format.
        :type segment_timeline_json_path: str
        :param segment_timeline_txt_path: The file path to write the
            timeline in text format.
        :type segment_timeline_txt_path: str
        :rtype: str
        """
        self.libs.osve_writeFiles.argtypes = [c_char_p, c_char_p]
        self.libs.osve_writeFiles.restype = c_char_p
        res = self.libs.osve_writeFiles(bytes(segment_timeline_json_path,'utf-8'), bytes(segment_timeline_txt_path,'utf-8'))
        return (res.decode('utf-8'))

    def write_json_log(self, json_log_file_path):
        """Writes the execution log.

        This method will write the execution log in JSON format,
        this call will clear the log buffer. Returns 0 if successfull.

        :param json_log_file_path: The file path to write the log
            in JSON format.
        :type json_log_file_path: str
        :rtype: int
        """
        self.libs.osve_writeJsonLog.argtypes = [c_char_p]
        self.libs.osve_writeJsonLog.restype = c_int
        return self.libs.osve_writeJsonLog(bytes(json_log_file_path,'utf-8'))

    def close(self):
        """Release resources used by OSVE.

        This method will release and free the resources used by OSVE
        when using step by step execution. Returns 0 if successfull.

        :rtype: int
        """
        self.libs.osve_close.argtypes = []
        self.libs.osve_writeJsonLog.restype = c_int
        return self.libs.osve_close()

    def get_app_version(self, execution=True):
        """Returns the OSVE Application version.

        This method will return null terminated characters string
        containing the version of the OSVE Application version.
        This version is updated any time the core of the module
        is updated.

        :rtype: str
        """
        self.__load_library(silent=True)
        self.libs.osve_getAppVersion.restype = c_char_p
        version = self.libs.osve_getAppVersion()
        if not execution:
            self.__unload_library()
        return (version.decode('utf-8'))

    def get_agm_version(self, execution=True):
        """Returns the AGM module version.

        This method will return null terminated characters string
        containing the version of the AGM module contained into OSVE.

        :rtype: str
        """
        self.__load_library(silent=True)
        self.libs.osve_getAgmVersion.restype = c_char_p
        version = self.libs.osve_getAgmVersion()
        if not execution:
            self.__unload_library()
        return (version.decode('utf-8'))

    def get_eps_version(self, execution=True):
        """Returns the EPS module version.

        This method will return null terminated characters string
        containing the version of the EPS module contained into OSVE.

        :rtype: str
        """
        self.__load_library(silent=True)
        self.libs.osve_getEpsVersion.restype = c_char_p
        version = self.libs.osve_getEpsVersion()
        if not execution:
            self.__unload_library()
        return (version.decode('utf-8'))
