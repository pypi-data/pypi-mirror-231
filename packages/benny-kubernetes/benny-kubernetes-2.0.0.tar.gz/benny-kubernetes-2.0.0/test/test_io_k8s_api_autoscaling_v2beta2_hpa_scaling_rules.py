# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from benny_kubernetes.models.io_k8s_api_autoscaling_v2beta2_hpa_scaling_rules import IoK8sApiAutoscalingV2beta2HPAScalingRules  # noqa: E501

class TestIoK8sApiAutoscalingV2beta2HPAScalingRules(unittest.TestCase):
    """IoK8sApiAutoscalingV2beta2HPAScalingRules unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IoK8sApiAutoscalingV2beta2HPAScalingRules:
        """Test IoK8sApiAutoscalingV2beta2HPAScalingRules
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IoK8sApiAutoscalingV2beta2HPAScalingRules`
        """
        model = IoK8sApiAutoscalingV2beta2HPAScalingRules()  # noqa: E501
        if include_optional:
            return IoK8sApiAutoscalingV2beta2HPAScalingRules(
                policies = [
                    benny_kubernetes.models.io/k8s/api/autoscaling/v2beta2/hpa_scaling_policy.io.k8s.api.autoscaling.v2beta2.HPAScalingPolicy(
                        period_seconds = 56, 
                        type = '', 
                        value = 56, )
                    ],
                select_policy = '',
                stabilization_window_seconds = 56
            )
        else:
            return IoK8sApiAutoscalingV2beta2HPAScalingRules(
        )
        """

    def testIoK8sApiAutoscalingV2beta2HPAScalingRules(self):
        """Test IoK8sApiAutoscalingV2beta2HPAScalingRules"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
