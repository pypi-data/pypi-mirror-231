# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from benny_kubernetes.models.io_k8s_api_core_v1_node_status import IoK8sApiCoreV1NodeStatus  # noqa: E501

class TestIoK8sApiCoreV1NodeStatus(unittest.TestCase):
    """IoK8sApiCoreV1NodeStatus unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IoK8sApiCoreV1NodeStatus:
        """Test IoK8sApiCoreV1NodeStatus
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IoK8sApiCoreV1NodeStatus`
        """
        model = IoK8sApiCoreV1NodeStatus()  # noqa: E501
        if include_optional:
            return IoK8sApiCoreV1NodeStatus(
                addresses = [
                    benny_kubernetes.models.io/k8s/api/core/v1/node_address.io.k8s.api.core.v1.NodeAddress(
                        address = '', 
                        type = '', )
                    ],
                allocatable = {
                    'key' : ''
                    },
                capacity = {
                    'key' : ''
                    },
                conditions = [
                    benny_kubernetes.models.io/k8s/api/core/v1/node_condition.io.k8s.api.core.v1.NodeCondition(
                        last_heartbeat_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        message = '', 
                        reason = '', 
                        status = '', 
                        type = '', )
                    ],
                config = benny_kubernetes.models.io/k8s/api/core/v1/node_config_status.io.k8s.api.core.v1.NodeConfigStatus(
                    active = benny_kubernetes.models.io/k8s/api/core/v1/node_config_source.io.k8s.api.core.v1.NodeConfigSource(
                        config_map = benny_kubernetes.models.io/k8s/api/core/v1/config_map_node_config_source.io.k8s.api.core.v1.ConfigMapNodeConfigSource(
                            kubelet_config_key = '', 
                            name = '', 
                            namespace = '', 
                            resource_version = '', 
                            uid = '', ), ), 
                    assigned = benny_kubernetes.models.io/k8s/api/core/v1/node_config_source.io.k8s.api.core.v1.NodeConfigSource(), 
                    error = '', 
                    last_known_good = , ),
                daemon_endpoints = benny_kubernetes.models.io/k8s/api/core/v1/node_daemon_endpoints.io.k8s.api.core.v1.NodeDaemonEndpoints(
                    kubelet_endpoint = benny_kubernetes.models.io/k8s/api/core/v1/daemon_endpoint.io.k8s.api.core.v1.DaemonEndpoint(
                        port = 56, ), ),
                images = [
                    benny_kubernetes.models.io/k8s/api/core/v1/container_image.io.k8s.api.core.v1.ContainerImage(
                        names = [
                            ''
                            ], 
                        size_bytes = 56, )
                    ],
                node_info = benny_kubernetes.models.io/k8s/api/core/v1/node_system_info.io.k8s.api.core.v1.NodeSystemInfo(
                    architecture = '', 
                    boot_id = '', 
                    container_runtime_version = '', 
                    kernel_version = '', 
                    kube_proxy_version = '', 
                    kubelet_version = '', 
                    machine_id = '', 
                    operating_system = '', 
                    os_image = '', 
                    system_uuid = '', ),
                phase = '',
                volumes_attached = [
                    benny_kubernetes.models.io/k8s/api/core/v1/attached_volume.io.k8s.api.core.v1.AttachedVolume(
                        device_path = '', 
                        name = '', )
                    ],
                volumes_in_use = [
                    ''
                    ]
            )
        else:
            return IoK8sApiCoreV1NodeStatus(
        )
        """

    def testIoK8sApiCoreV1NodeStatus(self):
        """Test IoK8sApiCoreV1NodeStatus"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
