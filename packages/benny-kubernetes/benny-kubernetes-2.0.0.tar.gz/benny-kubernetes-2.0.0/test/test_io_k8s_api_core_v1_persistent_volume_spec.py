# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from benny_kubernetes.models.io_k8s_api_core_v1_persistent_volume_spec import IoK8sApiCoreV1PersistentVolumeSpec  # noqa: E501

class TestIoK8sApiCoreV1PersistentVolumeSpec(unittest.TestCase):
    """IoK8sApiCoreV1PersistentVolumeSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IoK8sApiCoreV1PersistentVolumeSpec:
        """Test IoK8sApiCoreV1PersistentVolumeSpec
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IoK8sApiCoreV1PersistentVolumeSpec`
        """
        model = IoK8sApiCoreV1PersistentVolumeSpec()  # noqa: E501
        if include_optional:
            return IoK8sApiCoreV1PersistentVolumeSpec(
                access_modes = [
                    ''
                    ],
                aws_elastic_block_store = benny_kubernetes.models.io/k8s/api/core/v1/aws_elastic_block_store_volume_source.io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource(
                    fs_type = '', 
                    partition = 56, 
                    read_only = True, 
                    volume_id = '', ),
                azure_disk = benny_kubernetes.models.io/k8s/api/core/v1/azure_disk_volume_source.io.k8s.api.core.v1.AzureDiskVolumeSource(
                    caching_mode = '', 
                    disk_name = '', 
                    disk_uri = '', 
                    fs_type = '', 
                    kind = '', 
                    read_only = True, ),
                azure_file = benny_kubernetes.models.io/k8s/api/core/v1/azure_file_persistent_volume_source.io.k8s.api.core.v1.AzureFilePersistentVolumeSource(
                    read_only = True, 
                    secret_name = '', 
                    secret_namespace = '', 
                    share_name = '', ),
                capacity = {
                    'key' : ''
                    },
                cephfs = benny_kubernetes.models.io/k8s/api/core/v1/ceph_fs_persistent_volume_source.io.k8s.api.core.v1.CephFSPersistentVolumeSource(
                    monitors = [
                        ''
                        ], 
                    path = '', 
                    read_only = True, 
                    secret_file = '', 
                    secret_ref = benny_kubernetes.models.io/k8s/api/core/v1/secret_reference.io.k8s.api.core.v1.SecretReference(
                        name = '', 
                        namespace = '', ), 
                    user = '', ),
                cinder = benny_kubernetes.models.io/k8s/api/core/v1/cinder_persistent_volume_source.io.k8s.api.core.v1.CinderPersistentVolumeSource(
                    fs_type = '', 
                    read_only = True, 
                    secret_ref = benny_kubernetes.models.io/k8s/api/core/v1/secret_reference.io.k8s.api.core.v1.SecretReference(
                        name = '', 
                        namespace = '', ), 
                    volume_id = '', ),
                claim_ref = benny_kubernetes.models.io/k8s/api/core/v1/object_reference.io.k8s.api.core.v1.ObjectReference(
                    api_version = '', 
                    field_path = '', 
                    kind = '', 
                    name = '', 
                    namespace = '', 
                    resource_version = '', 
                    uid = '', ),
                csi = benny_kubernetes.models.io/k8s/api/core/v1/csi_persistent_volume_source.io.k8s.api.core.v1.CSIPersistentVolumeSource(
                    controller_expand_secret_ref = benny_kubernetes.models.io/k8s/api/core/v1/secret_reference.io.k8s.api.core.v1.SecretReference(
                        name = '', 
                        namespace = '', ), 
                    controller_publish_secret_ref = benny_kubernetes.models.io/k8s/api/core/v1/secret_reference.io.k8s.api.core.v1.SecretReference(
                        name = '', 
                        namespace = '', ), 
                    driver = '', 
                    fs_type = '', 
                    node_publish_secret_ref = , 
                    node_stage_secret_ref = , 
                    read_only = True, 
                    volume_attributes = {
                        'key' : ''
                        }, 
                    volume_handle = '', ),
                fc = benny_kubernetes.models.io/k8s/api/core/v1/fc_volume_source.io.k8s.api.core.v1.FCVolumeSource(
                    fs_type = '', 
                    lun = 56, 
                    read_only = True, 
                    target_wwns = [
                        ''
                        ], 
                    wwids = [
                        ''
                        ], ),
                flex_volume = benny_kubernetes.models.io/k8s/api/core/v1/flex_persistent_volume_source.io.k8s.api.core.v1.FlexPersistentVolumeSource(
                    driver = '', 
                    fs_type = '', 
                    options = {
                        'key' : ''
                        }, 
                    read_only = True, 
                    secret_ref = benny_kubernetes.models.io/k8s/api/core/v1/secret_reference.io.k8s.api.core.v1.SecretReference(
                        name = '', 
                        namespace = '', ), ),
                flocker = benny_kubernetes.models.io/k8s/api/core/v1/flocker_volume_source.io.k8s.api.core.v1.FlockerVolumeSource(
                    dataset_name = '', 
                    dataset_uuid = '', ),
                gce_persistent_disk = benny_kubernetes.models.io/k8s/api/core/v1/gce_persistent_disk_volume_source.io.k8s.api.core.v1.GCEPersistentDiskVolumeSource(
                    fs_type = '', 
                    partition = 56, 
                    pd_name = '', 
                    read_only = True, ),
                glusterfs = benny_kubernetes.models.io/k8s/api/core/v1/glusterfs_persistent_volume_source.io.k8s.api.core.v1.GlusterfsPersistentVolumeSource(
                    endpoints = '', 
                    endpoints_namespace = '', 
                    path = '', 
                    read_only = True, ),
                host_path = benny_kubernetes.models.io/k8s/api/core/v1/host_path_volume_source.io.k8s.api.core.v1.HostPathVolumeSource(
                    path = '', 
                    type = '', ),
                iscsi = benny_kubernetes.models.io/k8s/api/core/v1/iscsi_persistent_volume_source.io.k8s.api.core.v1.ISCSIPersistentVolumeSource(
                    chap_auth_discovery = True, 
                    chap_auth_session = True, 
                    fs_type = '', 
                    initiator_name = '', 
                    iqn = '', 
                    iscsi_interface = '', 
                    lun = 56, 
                    portals = [
                        ''
                        ], 
                    read_only = True, 
                    secret_ref = benny_kubernetes.models.io/k8s/api/core/v1/secret_reference.io.k8s.api.core.v1.SecretReference(
                        name = '', 
                        namespace = '', ), 
                    target_portal = '', ),
                local = benny_kubernetes.models.io/k8s/api/core/v1/local_volume_source.io.k8s.api.core.v1.LocalVolumeSource(
                    fs_type = '', 
                    path = '', ),
                mount_options = [
                    ''
                    ],
                nfs = benny_kubernetes.models.io/k8s/api/core/v1/nfs_volume_source.io.k8s.api.core.v1.NFSVolumeSource(
                    path = '', 
                    read_only = True, 
                    server = '', ),
                node_affinity = benny_kubernetes.models.io/k8s/api/core/v1/volume_node_affinity.io.k8s.api.core.v1.VolumeNodeAffinity(
                    required = benny_kubernetes.models.io/k8s/api/core/v1/node_selector.io.k8s.api.core.v1.NodeSelector(
                        node_selector_terms = [
                            benny_kubernetes.models.io/k8s/api/core/v1/node_selector_term.io.k8s.api.core.v1.NodeSelectorTerm(
                                match_expressions = [
                                    benny_kubernetes.models.io/k8s/api/core/v1/node_selector_requirement.io.k8s.api.core.v1.NodeSelectorRequirement(
                                        key = '', 
                                        operator = '', 
                                        values = [
                                            ''
                                            ], )
                                    ], 
                                match_fields = [
                                    benny_kubernetes.models.io/k8s/api/core/v1/node_selector_requirement.io.k8s.api.core.v1.NodeSelectorRequirement(
                                        key = '', 
                                        operator = '', )
                                    ], )
                            ], ), ),
                persistent_volume_reclaim_policy = '',
                photon_persistent_disk = benny_kubernetes.models.io/k8s/api/core/v1/photon_persistent_disk_volume_source.io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource(
                    fs_type = '', 
                    pd_id = '', ),
                portworx_volume = benny_kubernetes.models.io/k8s/api/core/v1/portworx_volume_source.io.k8s.api.core.v1.PortworxVolumeSource(
                    fs_type = '', 
                    read_only = True, 
                    volume_id = '', ),
                quobyte = benny_kubernetes.models.io/k8s/api/core/v1/quobyte_volume_source.io.k8s.api.core.v1.QuobyteVolumeSource(
                    group = '', 
                    read_only = True, 
                    registry = '', 
                    tenant = '', 
                    user = '', 
                    volume = '', ),
                rbd = benny_kubernetes.models.io/k8s/api/core/v1/rbd_persistent_volume_source.io.k8s.api.core.v1.RBDPersistentVolumeSource(
                    fs_type = '', 
                    image = '', 
                    keyring = '', 
                    monitors = [
                        ''
                        ], 
                    pool = '', 
                    read_only = True, 
                    secret_ref = benny_kubernetes.models.io/k8s/api/core/v1/secret_reference.io.k8s.api.core.v1.SecretReference(
                        name = '', 
                        namespace = '', ), 
                    user = '', ),
                scale_io = benny_kubernetes.models.io/k8s/api/core/v1/scale_io_persistent_volume_source.io.k8s.api.core.v1.ScaleIOPersistentVolumeSource(
                    fs_type = '', 
                    gateway = '', 
                    protection_domain = '', 
                    read_only = True, 
                    secret_ref = benny_kubernetes.models.io/k8s/api/core/v1/secret_reference.io.k8s.api.core.v1.SecretReference(
                        name = '', 
                        namespace = '', ), 
                    ssl_enabled = True, 
                    storage_mode = '', 
                    storage_pool = '', 
                    system = '', 
                    volume_name = '', ),
                storage_class_name = '',
                storageos = benny_kubernetes.models.io/k8s/api/core/v1/storage_os_persistent_volume_source.io.k8s.api.core.v1.StorageOSPersistentVolumeSource(
                    fs_type = '', 
                    read_only = True, 
                    secret_ref = benny_kubernetes.models.io/k8s/api/core/v1/object_reference.io.k8s.api.core.v1.ObjectReference(
                        api_version = '', 
                        field_path = '', 
                        kind = '', 
                        name = '', 
                        namespace = '', 
                        resource_version = '', 
                        uid = '', ), 
                    volume_name = '', 
                    volume_namespace = '', ),
                volume_mode = '',
                vsphere_volume = benny_kubernetes.models.io/k8s/api/core/v1/vsphere_virtual_disk_volume_source.io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource(
                    fs_type = '', 
                    storage_policy_id = '', 
                    storage_policy_name = '', 
                    volume_path = '', )
            )
        else:
            return IoK8sApiCoreV1PersistentVolumeSpec(
        )
        """

    def testIoK8sApiCoreV1PersistentVolumeSpec(self):
        """Test IoK8sApiCoreV1PersistentVolumeSpec"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
