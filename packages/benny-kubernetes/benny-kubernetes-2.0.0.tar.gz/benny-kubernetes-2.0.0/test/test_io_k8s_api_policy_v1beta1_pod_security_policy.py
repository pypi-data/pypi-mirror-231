# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from benny_kubernetes.models.io_k8s_api_policy_v1beta1_pod_security_policy import IoK8sApiPolicyV1beta1PodSecurityPolicy  # noqa: E501

class TestIoK8sApiPolicyV1beta1PodSecurityPolicy(unittest.TestCase):
    """IoK8sApiPolicyV1beta1PodSecurityPolicy unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IoK8sApiPolicyV1beta1PodSecurityPolicy:
        """Test IoK8sApiPolicyV1beta1PodSecurityPolicy
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IoK8sApiPolicyV1beta1PodSecurityPolicy`
        """
        model = IoK8sApiPolicyV1beta1PodSecurityPolicy()  # noqa: E501
        if include_optional:
            return IoK8sApiPolicyV1beta1PodSecurityPolicy(
                api_version = '',
                kind = '',
                metadata = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/object_meta.io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta(
                    annotations = {
                        'key' : ''
                        }, 
                    cluster_name = '', 
                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deletion_grace_period_seconds = 56, 
                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    finalizers = [
                        ''
                        ], 
                    generate_name = '', 
                    generation = 56, 
                    labels = {
                        'key' : ''
                        }, 
                    managed_fields = [
                        benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/managed_fields_entry.io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry(
                            api_version = '', 
                            fields_type = '', 
                            fields_v1 = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/fields_v1.io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1(), 
                            manager = '', 
                            operation = '', 
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    name = '', 
                    namespace = '', 
                    owner_references = [
                        benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/owner_reference.io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference(
                            api_version = '', 
                            block_owner_deletion = True, 
                            controller = True, 
                            kind = '', 
                            name = '', 
                            uid = '', )
                        ], 
                    resource_version = '', 
                    self_link = '', 
                    uid = '', ),
                spec = benny_kubernetes.models.io/k8s/api/policy/v1beta1/pod_security_policy_spec.io.k8s.api.policy.v1beta1.PodSecurityPolicySpec(
                    allow_privilege_escalation = True, 
                    allowed_csi_drivers = [
                        benny_kubernetes.models.io/k8s/api/policy/v1beta1/allowed_csi_driver.io.k8s.api.policy.v1beta1.AllowedCSIDriver(
                            name = '', )
                        ], 
                    allowed_capabilities = [
                        ''
                        ], 
                    allowed_flex_volumes = [
                        benny_kubernetes.models.io/k8s/api/policy/v1beta1/allowed_flex_volume.io.k8s.api.policy.v1beta1.AllowedFlexVolume(
                            driver = '', )
                        ], 
                    allowed_host_paths = [
                        benny_kubernetes.models.io/k8s/api/policy/v1beta1/allowed_host_path.io.k8s.api.policy.v1beta1.AllowedHostPath(
                            path_prefix = '', 
                            read_only = True, )
                        ], 
                    allowed_proc_mount_types = [
                        ''
                        ], 
                    allowed_unsafe_sysctls = [
                        ''
                        ], 
                    default_add_capabilities = [
                        ''
                        ], 
                    default_allow_privilege_escalation = True, 
                    forbidden_sysctls = [
                        ''
                        ], 
                    fs_group = benny_kubernetes.models.io/k8s/api/policy/v1beta1/fs_group_strategy_options.io.k8s.api.policy.v1beta1.FSGroupStrategyOptions(
                        ranges = [
                            benny_kubernetes.models.io/k8s/api/policy/v1beta1/id_range.io.k8s.api.policy.v1beta1.IDRange(
                                max = 56, 
                                min = 56, )
                            ], 
                        rule = '', ), 
                    host_ipc = True, 
                    host_network = True, 
                    host_pid = True, 
                    host_ports = [
                        benny_kubernetes.models.io/k8s/api/policy/v1beta1/host_port_range.io.k8s.api.policy.v1beta1.HostPortRange(
                            max = 56, 
                            min = 56, )
                        ], 
                    privileged = True, 
                    read_only_root_filesystem = True, 
                    required_drop_capabilities = [
                        ''
                        ], 
                    run_as_group = benny_kubernetes.models.io/k8s/api/policy/v1beta1/run_as_group_strategy_options.io.k8s.api.policy.v1beta1.RunAsGroupStrategyOptions(
                        rule = '', ), 
                    run_as_user = benny_kubernetes.models.io/k8s/api/policy/v1beta1/run_as_user_strategy_options.io.k8s.api.policy.v1beta1.RunAsUserStrategyOptions(
                        rule = '', ), 
                    runtime_class = benny_kubernetes.models.io/k8s/api/policy/v1beta1/runtime_class_strategy_options.io.k8s.api.policy.v1beta1.RuntimeClassStrategyOptions(
                        allowed_runtime_class_names = [
                            ''
                            ], 
                        default_runtime_class_name = '', ), 
                    se_linux = benny_kubernetes.models.io/k8s/api/policy/v1beta1/se_linux_strategy_options.io.k8s.api.policy.v1beta1.SELinuxStrategyOptions(
                        rule = '', 
                        se_linux_options = benny_kubernetes.models.io/k8s/api/core/v1/se_linux_options.io.k8s.api.core.v1.SELinuxOptions(
                            level = '', 
                            role = '', 
                            type = '', 
                            user = '', ), ), 
                    supplemental_groups = benny_kubernetes.models.io/k8s/api/policy/v1beta1/supplemental_groups_strategy_options.io.k8s.api.policy.v1beta1.SupplementalGroupsStrategyOptions(
                        rule = '', ), 
                    volumes = [
                        ''
                        ], )
            )
        else:
            return IoK8sApiPolicyV1beta1PodSecurityPolicy(
        )
        """

    def testIoK8sApiPolicyV1beta1PodSecurityPolicy(self):
        """Test IoK8sApiPolicyV1beta1PodSecurityPolicy"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
