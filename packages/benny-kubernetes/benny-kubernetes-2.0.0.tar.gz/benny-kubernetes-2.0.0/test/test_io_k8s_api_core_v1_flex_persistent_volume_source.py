# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from benny_kubernetes.models.io_k8s_api_core_v1_flex_persistent_volume_source import IoK8sApiCoreV1FlexPersistentVolumeSource  # noqa: E501

class TestIoK8sApiCoreV1FlexPersistentVolumeSource(unittest.TestCase):
    """IoK8sApiCoreV1FlexPersistentVolumeSource unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IoK8sApiCoreV1FlexPersistentVolumeSource:
        """Test IoK8sApiCoreV1FlexPersistentVolumeSource
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IoK8sApiCoreV1FlexPersistentVolumeSource`
        """
        model = IoK8sApiCoreV1FlexPersistentVolumeSource()  # noqa: E501
        if include_optional:
            return IoK8sApiCoreV1FlexPersistentVolumeSource(
                driver = '',
                fs_type = '',
                options = {
                    'key' : ''
                    },
                read_only = True,
                secret_ref = benny_kubernetes.models.io/k8s/api/core/v1/secret_reference.io.k8s.api.core.v1.SecretReference(
                    name = '', 
                    namespace = '', )
            )
        else:
            return IoK8sApiCoreV1FlexPersistentVolumeSource(
                driver = '',
        )
        """

    def testIoK8sApiCoreV1FlexPersistentVolumeSource(self):
        """Test IoK8sApiCoreV1FlexPersistentVolumeSource"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
