# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from benny_kubernetes.models.io_k8s_api_networking_v1_network_policy_list import IoK8sApiNetworkingV1NetworkPolicyList  # noqa: E501

class TestIoK8sApiNetworkingV1NetworkPolicyList(unittest.TestCase):
    """IoK8sApiNetworkingV1NetworkPolicyList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IoK8sApiNetworkingV1NetworkPolicyList:
        """Test IoK8sApiNetworkingV1NetworkPolicyList
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IoK8sApiNetworkingV1NetworkPolicyList`
        """
        model = IoK8sApiNetworkingV1NetworkPolicyList()  # noqa: E501
        if include_optional:
            return IoK8sApiNetworkingV1NetworkPolicyList(
                api_version = '',
                items = [
                    benny_kubernetes.models.io/k8s/api/networking/v1/network_policy.io.k8s.api.networking.v1.NetworkPolicy(
                        api_version = '', 
                        kind = '', 
                        metadata = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/object_meta.io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta(
                            annotations = {
                                'key' : ''
                                }, 
                            cluster_name = '', 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_grace_period_seconds = 56, 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            finalizers = [
                                ''
                                ], 
                            generate_name = '', 
                            generation = 56, 
                            labels = {
                                'key' : ''
                                }, 
                            managed_fields = [
                                benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/managed_fields_entry.io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry(
                                    api_version = '', 
                                    fields_type = '', 
                                    fields_v1 = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/fields_v1.io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1(), 
                                    manager = '', 
                                    operation = '', 
                                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            name = '', 
                            namespace = '', 
                            owner_references = [
                                benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/owner_reference.io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference(
                                    api_version = '', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '', 
                                    name = '', 
                                    uid = '', )
                                ], 
                            resource_version = '', 
                            self_link = '', 
                            uid = '', ), 
                        spec = benny_kubernetes.models.io/k8s/api/networking/v1/network_policy_spec.io.k8s.api.networking.v1.NetworkPolicySpec(
                            egress = [
                                benny_kubernetes.models.io/k8s/api/networking/v1/network_policy_egress_rule.io.k8s.api.networking.v1.NetworkPolicyEgressRule(
                                    ports = [
                                        benny_kubernetes.models.io/k8s/api/networking/v1/network_policy_port.io.k8s.api.networking.v1.NetworkPolicyPort(
                                            port = '', 
                                            protocol = '', )
                                        ], 
                                    to = [
                                        benny_kubernetes.models.io/k8s/api/networking/v1/network_policy_peer.io.k8s.api.networking.v1.NetworkPolicyPeer(
                                            ip_block = benny_kubernetes.models.io/k8s/api/networking/v1/ip_block.io.k8s.api.networking.v1.IPBlock(
                                                cidr = '', 
                                                except = [
                                                    ''
                                                    ], ), 
                                            namespace_selector = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector(
                                                match_expressions = [
                                                    benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector_requirement.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement(
                                                        key = '', 
                                                        operator = '', 
                                                        values = [
                                                            ''
                                                            ], )
                                                    ], 
                                                match_labels = {
                                                    'key' : ''
                                                    }, ), 
                                            pod_selector = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector(), )
                                        ], )
                                ], 
                            ingress = [
                                benny_kubernetes.models.io/k8s/api/networking/v1/network_policy_ingress_rule.io.k8s.api.networking.v1.NetworkPolicyIngressRule(
                                    from = [
                                        benny_kubernetes.models.io/k8s/api/networking/v1/network_policy_peer.io.k8s.api.networking.v1.NetworkPolicyPeer()
                                        ], )
                                ], 
                            pod_selector = , 
                            policy_types = [
                                ''
                                ], ), )
                    ],
                kind = '',
                metadata = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/list_meta.io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta(
                    continue = '', 
                    remaining_item_count = 56, 
                    resource_version = '', 
                    self_link = '', )
            )
        else:
            return IoK8sApiNetworkingV1NetworkPolicyList(
                items = [
                    benny_kubernetes.models.io/k8s/api/networking/v1/network_policy.io.k8s.api.networking.v1.NetworkPolicy(
                        api_version = '', 
                        kind = '', 
                        metadata = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/object_meta.io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta(
                            annotations = {
                                'key' : ''
                                }, 
                            cluster_name = '', 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_grace_period_seconds = 56, 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            finalizers = [
                                ''
                                ], 
                            generate_name = '', 
                            generation = 56, 
                            labels = {
                                'key' : ''
                                }, 
                            managed_fields = [
                                benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/managed_fields_entry.io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry(
                                    api_version = '', 
                                    fields_type = '', 
                                    fields_v1 = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/fields_v1.io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1(), 
                                    manager = '', 
                                    operation = '', 
                                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            name = '', 
                            namespace = '', 
                            owner_references = [
                                benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/owner_reference.io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference(
                                    api_version = '', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '', 
                                    name = '', 
                                    uid = '', )
                                ], 
                            resource_version = '', 
                            self_link = '', 
                            uid = '', ), 
                        spec = benny_kubernetes.models.io/k8s/api/networking/v1/network_policy_spec.io.k8s.api.networking.v1.NetworkPolicySpec(
                            egress = [
                                benny_kubernetes.models.io/k8s/api/networking/v1/network_policy_egress_rule.io.k8s.api.networking.v1.NetworkPolicyEgressRule(
                                    ports = [
                                        benny_kubernetes.models.io/k8s/api/networking/v1/network_policy_port.io.k8s.api.networking.v1.NetworkPolicyPort(
                                            port = '', 
                                            protocol = '', )
                                        ], 
                                    to = [
                                        benny_kubernetes.models.io/k8s/api/networking/v1/network_policy_peer.io.k8s.api.networking.v1.NetworkPolicyPeer(
                                            ip_block = benny_kubernetes.models.io/k8s/api/networking/v1/ip_block.io.k8s.api.networking.v1.IPBlock(
                                                cidr = '', 
                                                except = [
                                                    ''
                                                    ], ), 
                                            namespace_selector = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector(
                                                match_expressions = [
                                                    benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector_requirement.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement(
                                                        key = '', 
                                                        operator = '', 
                                                        values = [
                                                            ''
                                                            ], )
                                                    ], 
                                                match_labels = {
                                                    'key' : ''
                                                    }, ), 
                                            pod_selector = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector(), )
                                        ], )
                                ], 
                            ingress = [
                                benny_kubernetes.models.io/k8s/api/networking/v1/network_policy_ingress_rule.io.k8s.api.networking.v1.NetworkPolicyIngressRule(
                                    from = [
                                        benny_kubernetes.models.io/k8s/api/networking/v1/network_policy_peer.io.k8s.api.networking.v1.NetworkPolicyPeer()
                                        ], )
                                ], 
                            pod_selector = , 
                            policy_types = [
                                ''
                                ], ), )
                    ],
        )
        """

    def testIoK8sApiNetworkingV1NetworkPolicyList(self):
        """Test IoK8sApiNetworkingV1NetworkPolicyList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
