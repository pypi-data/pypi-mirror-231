# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from benny_kubernetes.models.io_k8s_api_flowcontrol_v1alpha1_priority_level_configuration import IoK8sApiFlowcontrolV1alpha1PriorityLevelConfiguration  # noqa: E501

class TestIoK8sApiFlowcontrolV1alpha1PriorityLevelConfiguration(unittest.TestCase):
    """IoK8sApiFlowcontrolV1alpha1PriorityLevelConfiguration unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IoK8sApiFlowcontrolV1alpha1PriorityLevelConfiguration:
        """Test IoK8sApiFlowcontrolV1alpha1PriorityLevelConfiguration
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IoK8sApiFlowcontrolV1alpha1PriorityLevelConfiguration`
        """
        model = IoK8sApiFlowcontrolV1alpha1PriorityLevelConfiguration()  # noqa: E501
        if include_optional:
            return IoK8sApiFlowcontrolV1alpha1PriorityLevelConfiguration(
                api_version = '',
                kind = '',
                metadata = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/object_meta.io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta(
                    annotations = {
                        'key' : ''
                        }, 
                    cluster_name = '', 
                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deletion_grace_period_seconds = 56, 
                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    finalizers = [
                        ''
                        ], 
                    generate_name = '', 
                    generation = 56, 
                    labels = {
                        'key' : ''
                        }, 
                    managed_fields = [
                        benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/managed_fields_entry.io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry(
                            api_version = '', 
                            fields_type = '', 
                            fields_v1 = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/fields_v1.io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1(), 
                            manager = '', 
                            operation = '', 
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    name = '', 
                    namespace = '', 
                    owner_references = [
                        benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/owner_reference.io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference(
                            api_version = '', 
                            block_owner_deletion = True, 
                            controller = True, 
                            kind = '', 
                            name = '', 
                            uid = '', )
                        ], 
                    resource_version = '', 
                    self_link = '', 
                    uid = '', ),
                spec = benny_kubernetes.models.io/k8s/api/flowcontrol/v1alpha1/priority_level_configuration_spec.io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationSpec(
                    limited = benny_kubernetes.models.io/k8s/api/flowcontrol/v1alpha1/limited_priority_level_configuration.io.k8s.api.flowcontrol.v1alpha1.LimitedPriorityLevelConfiguration(
                        assured_concurrency_shares = 56, 
                        limit_response = benny_kubernetes.models.io/k8s/api/flowcontrol/v1alpha1/limit_response.io.k8s.api.flowcontrol.v1alpha1.LimitResponse(
                            queuing = benny_kubernetes.models.io/k8s/api/flowcontrol/v1alpha1/queuing_configuration.io.k8s.api.flowcontrol.v1alpha1.QueuingConfiguration(
                                hand_size = 56, 
                                queue_length_limit = 56, 
                                queues = 56, ), 
                            type = '', ), ), 
                    type = '', ),
                status = benny_kubernetes.models.io/k8s/api/flowcontrol/v1alpha1/priority_level_configuration_status.io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationStatus(
                    conditions = [
                        benny_kubernetes.models.io/k8s/api/flowcontrol/v1alpha1/priority_level_configuration_condition.io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationCondition(
                            last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            message = '', 
                            reason = '', 
                            status = '', 
                            type = '', )
                        ], )
            )
        else:
            return IoK8sApiFlowcontrolV1alpha1PriorityLevelConfiguration(
        )
        """

    def testIoK8sApiFlowcontrolV1alpha1PriorityLevelConfiguration(self):
        """Test IoK8sApiFlowcontrolV1alpha1PriorityLevelConfiguration"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
