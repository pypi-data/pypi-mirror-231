# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from benny_kubernetes.models.io_k8s_api_storage_v1beta1_storage_class import IoK8sApiStorageV1beta1StorageClass  # noqa: E501

class TestIoK8sApiStorageV1beta1StorageClass(unittest.TestCase):
    """IoK8sApiStorageV1beta1StorageClass unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IoK8sApiStorageV1beta1StorageClass:
        """Test IoK8sApiStorageV1beta1StorageClass
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IoK8sApiStorageV1beta1StorageClass`
        """
        model = IoK8sApiStorageV1beta1StorageClass()  # noqa: E501
        if include_optional:
            return IoK8sApiStorageV1beta1StorageClass(
                allow_volume_expansion = True,
                allowed_topologies = [
                    benny_kubernetes.models.io/k8s/api/core/v1/topology_selector_term.io.k8s.api.core.v1.TopologySelectorTerm(
                        match_label_expressions = [
                            benny_kubernetes.models.io/k8s/api/core/v1/topology_selector_label_requirement.io.k8s.api.core.v1.TopologySelectorLabelRequirement(
                                key = '', 
                                values = [
                                    ''
                                    ], )
                            ], )
                    ],
                api_version = '',
                kind = '',
                metadata = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/object_meta.io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta(
                    annotations = {
                        'key' : ''
                        }, 
                    cluster_name = '', 
                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deletion_grace_period_seconds = 56, 
                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    finalizers = [
                        ''
                        ], 
                    generate_name = '', 
                    generation = 56, 
                    labels = {
                        'key' : ''
                        }, 
                    managed_fields = [
                        benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/managed_fields_entry.io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry(
                            api_version = '', 
                            fields_type = '', 
                            fields_v1 = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/fields_v1.io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1(), 
                            manager = '', 
                            operation = '', 
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    name = '', 
                    namespace = '', 
                    owner_references = [
                        benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/owner_reference.io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference(
                            api_version = '', 
                            block_owner_deletion = True, 
                            controller = True, 
                            kind = '', 
                            name = '', 
                            uid = '', )
                        ], 
                    resource_version = '', 
                    self_link = '', 
                    uid = '', ),
                mount_options = [
                    ''
                    ],
                parameters = {
                    'key' : ''
                    },
                provisioner = '',
                reclaim_policy = '',
                volume_binding_mode = ''
            )
        else:
            return IoK8sApiStorageV1beta1StorageClass(
                provisioner = '',
        )
        """

    def testIoK8sApiStorageV1beta1StorageClass(self):
        """Test IoK8sApiStorageV1beta1StorageClass"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
