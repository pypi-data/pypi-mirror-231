# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from benny_kubernetes.models.io_k8s_api_core_v1_replication_controller import IoK8sApiCoreV1ReplicationController  # noqa: E501

class TestIoK8sApiCoreV1ReplicationController(unittest.TestCase):
    """IoK8sApiCoreV1ReplicationController unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IoK8sApiCoreV1ReplicationController:
        """Test IoK8sApiCoreV1ReplicationController
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IoK8sApiCoreV1ReplicationController`
        """
        model = IoK8sApiCoreV1ReplicationController()  # noqa: E501
        if include_optional:
            return IoK8sApiCoreV1ReplicationController(
                api_version = '',
                kind = '',
                metadata = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/object_meta.io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta(
                    annotations = {
                        'key' : ''
                        }, 
                    cluster_name = '', 
                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deletion_grace_period_seconds = 56, 
                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    finalizers = [
                        ''
                        ], 
                    generate_name = '', 
                    generation = 56, 
                    labels = {
                        'key' : ''
                        }, 
                    managed_fields = [
                        benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/managed_fields_entry.io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry(
                            api_version = '', 
                            fields_type = '', 
                            fields_v1 = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/fields_v1.io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1(), 
                            manager = '', 
                            operation = '', 
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    name = '', 
                    namespace = '', 
                    owner_references = [
                        benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/owner_reference.io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference(
                            api_version = '', 
                            block_owner_deletion = True, 
                            controller = True, 
                            kind = '', 
                            name = '', 
                            uid = '', )
                        ], 
                    resource_version = '', 
                    self_link = '', 
                    uid = '', ),
                spec = benny_kubernetes.models.io/k8s/api/core/v1/replication_controller_spec.io.k8s.api.core.v1.ReplicationControllerSpec(
                    min_ready_seconds = 56, 
                    replicas = 56, 
                    selector = {
                        'key' : ''
                        }, 
                    template = benny_kubernetes.models.io/k8s/api/core/v1/pod_template_spec.io.k8s.api.core.v1.PodTemplateSpec(
                        metadata = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/object_meta.io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta(
                            annotations = {
                                'key' : ''
                                }, 
                            cluster_name = '', 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_grace_period_seconds = 56, 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            finalizers = [
                                ''
                                ], 
                            generate_name = '', 
                            generation = 56, 
                            labels = {
                                'key' : ''
                                }, 
                            managed_fields = [
                                benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/managed_fields_entry.io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry(
                                    api_version = '', 
                                    fields_type = '', 
                                    fields_v1 = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/fields_v1.io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1(), 
                                    manager = '', 
                                    operation = '', 
                                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            name = '', 
                            namespace = '', 
                            owner_references = [
                                benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/owner_reference.io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference(
                                    api_version = '', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '', 
                                    name = '', 
                                    uid = '', )
                                ], 
                            resource_version = '', 
                            self_link = '', 
                            uid = '', ), 
                        spec = benny_kubernetes.models.io/k8s/api/core/v1/pod_spec.io.k8s.api.core.v1.PodSpec(
                            active_deadline_seconds = 56, 
                            affinity = benny_kubernetes.models.io/k8s/api/core/v1/affinity.io.k8s.api.core.v1.Affinity(
                                node_affinity = benny_kubernetes.models.io/k8s/api/core/v1/node_affinity.io.k8s.api.core.v1.NodeAffinity(
                                    preferred_during_scheduling_ignored_during_execution = [
                                        benny_kubernetes.models.io/k8s/api/core/v1/preferred_scheduling_term.io.k8s.api.core.v1.PreferredSchedulingTerm(
                                            preference = benny_kubernetes.models.io/k8s/api/core/v1/node_selector_term.io.k8s.api.core.v1.NodeSelectorTerm(
                                                match_expressions = [
                                                    benny_kubernetes.models.io/k8s/api/core/v1/node_selector_requirement.io.k8s.api.core.v1.NodeSelectorRequirement(
                                                        key = '', 
                                                        operator = '', 
                                                        values = [
                                                            ''
                                                            ], )
                                                    ], 
                                                match_fields = [
                                                    benny_kubernetes.models.io/k8s/api/core/v1/node_selector_requirement.io.k8s.api.core.v1.NodeSelectorRequirement(
                                                        key = '', 
                                                        operator = '', )
                                                    ], ), 
                                            weight = 56, )
                                        ], 
                                    required_during_scheduling_ignored_during_execution = benny_kubernetes.models.io/k8s/api/core/v1/node_selector.io.k8s.api.core.v1.NodeSelector(
                                        node_selector_terms = [
                                            benny_kubernetes.models.io/k8s/api/core/v1/node_selector_term.io.k8s.api.core.v1.NodeSelectorTerm()
                                            ], ), ), 
                                pod_affinity = benny_kubernetes.models.io/k8s/api/core/v1/pod_affinity.io.k8s.api.core.v1.PodAffinity(), 
                                pod_anti_affinity = benny_kubernetes.models.io/k8s/api/core/v1/pod_anti_affinity.io.k8s.api.core.v1.PodAntiAffinity(), ), 
                            automount_service_account_token = True, 
                            containers = [
                                benny_kubernetes.models.io/k8s/api/core/v1/container.io.k8s.api.core.v1.Container(
                                    args = [
                                        ''
                                        ], 
                                    command = [
                                        ''
                                        ], 
                                    env = [
                                        benny_kubernetes.models.io/k8s/api/core/v1/env_var.io.k8s.api.core.v1.EnvVar(
                                            name = '', 
                                            value = '', 
                                            value_from = benny_kubernetes.models.io/k8s/api/core/v1/env_var_source.io.k8s.api.core.v1.EnvVarSource(
                                                config_map_key_ref = benny_kubernetes.models.io/k8s/api/core/v1/config_map_key_selector.io.k8s.api.core.v1.ConfigMapKeySelector(
                                                    key = '', 
                                                    name = '', 
                                                    optional = True, ), 
                                                field_ref = benny_kubernetes.models.io/k8s/api/core/v1/object_field_selector.io.k8s.api.core.v1.ObjectFieldSelector(
                                                    api_version = '', 
                                                    field_path = '', ), 
                                                resource_field_ref = benny_kubernetes.models.io/k8s/api/core/v1/resource_field_selector.io.k8s.api.core.v1.ResourceFieldSelector(
                                                    container_name = '', 
                                                    divisor = '', 
                                                    resource = '', ), 
                                                secret_key_ref = benny_kubernetes.models.io/k8s/api/core/v1/secret_key_selector.io.k8s.api.core.v1.SecretKeySelector(
                                                    key = '', 
                                                    name = '', 
                                                    optional = True, ), ), )
                                        ], 
                                    env_from = [
                                        benny_kubernetes.models.io/k8s/api/core/v1/env_from_source.io.k8s.api.core.v1.EnvFromSource(
                                            config_map_ref = benny_kubernetes.models.io/k8s/api/core/v1/config_map_env_source.io.k8s.api.core.v1.ConfigMapEnvSource(
                                                name = '', 
                                                optional = True, ), 
                                            prefix = '', 
                                            secret_ref = benny_kubernetes.models.io/k8s/api/core/v1/secret_env_source.io.k8s.api.core.v1.SecretEnvSource(
                                                name = '', 
                                                optional = True, ), )
                                        ], 
                                    image = '', 
                                    image_pull_policy = '', 
                                    lifecycle = benny_kubernetes.models.io/k8s/api/core/v1/lifecycle.io.k8s.api.core.v1.Lifecycle(
                                        post_start = benny_kubernetes.models.io/k8s/api/core/v1/handler.io.k8s.api.core.v1.Handler(
                                            exec = benny_kubernetes.models.io/k8s/api/core/v1/exec_action.io.k8s.api.core.v1.ExecAction(), 
                                            http_get = benny_kubernetes.models.io/k8s/api/core/v1/http_get_action.io.k8s.api.core.v1.HTTPGetAction(
                                                host = '', 
                                                http_headers = [
                                                    benny_kubernetes.models.io/k8s/api/core/v1/http_header.io.k8s.api.core.v1.HTTPHeader(
                                                        name = '', 
                                                        value = '', )
                                                    ], 
                                                path = '', 
                                                port = '', 
                                                scheme = '', ), 
                                            tcp_socket = benny_kubernetes.models.io/k8s/api/core/v1/tcp_socket_action.io.k8s.api.core.v1.TCPSocketAction(
                                                host = '', 
                                                port = '', ), ), 
                                        pre_stop = benny_kubernetes.models.io/k8s/api/core/v1/handler.io.k8s.api.core.v1.Handler(), ), 
                                    liveness_probe = benny_kubernetes.models.io/k8s/api/core/v1/probe.io.k8s.api.core.v1.Probe(
                                        failure_threshold = 56, 
                                        initial_delay_seconds = 56, 
                                        period_seconds = 56, 
                                        success_threshold = 56, 
                                        timeout_seconds = 56, ), 
                                    name = '', 
                                    ports = [
                                        benny_kubernetes.models.io/k8s/api/core/v1/container_port.io.k8s.api.core.v1.ContainerPort(
                                            container_port = 56, 
                                            host_ip = '', 
                                            host_port = 56, 
                                            name = '', 
                                            protocol = '', )
                                        ], 
                                    readiness_probe = benny_kubernetes.models.io/k8s/api/core/v1/probe.io.k8s.api.core.v1.Probe(
                                        failure_threshold = 56, 
                                        initial_delay_seconds = 56, 
                                        period_seconds = 56, 
                                        success_threshold = 56, 
                                        timeout_seconds = 56, ), 
                                    resources = benny_kubernetes.models.io/k8s/api/core/v1/resource_requirements.io.k8s.api.core.v1.ResourceRequirements(
                                        limits = {
                                            'key' : ''
                                            }, 
                                        requests = {
                                            'key' : ''
                                            }, ), 
                                    security_context = benny_kubernetes.models.io/k8s/api/core/v1/security_context.io.k8s.api.core.v1.SecurityContext(
                                        allow_privilege_escalation = True, 
                                        capabilities = benny_kubernetes.models.io/k8s/api/core/v1/capabilities.io.k8s.api.core.v1.Capabilities(
                                            add = [
                                                ''
                                                ], 
                                            drop = [
                                                ''
                                                ], ), 
                                        privileged = True, 
                                        proc_mount = '', 
                                        read_only_root_filesystem = True, 
                                        run_as_group = 56, 
                                        run_as_non_root = True, 
                                        run_as_user = 56, 
                                        se_linux_options = benny_kubernetes.models.io/k8s/api/core/v1/se_linux_options.io.k8s.api.core.v1.SELinuxOptions(
                                            level = '', 
                                            role = '', 
                                            type = '', 
                                            user = '', ), 
                                        windows_options = benny_kubernetes.models.io/k8s/api/core/v1/windows_security_context_options.io.k8s.api.core.v1.WindowsSecurityContextOptions(
                                            gmsa_credential_spec = '', 
                                            gmsa_credential_spec_name = '', 
                                            run_as_user_name = '', ), ), 
                                    startup_probe = , 
                                    stdin = True, 
                                    stdin_once = True, 
                                    termination_message_path = '', 
                                    termination_message_policy = '', 
                                    tty = True, 
                                    volume_devices = [
                                        benny_kubernetes.models.io/k8s/api/core/v1/volume_device.io.k8s.api.core.v1.VolumeDevice(
                                            device_path = '', 
                                            name = '', )
                                        ], 
                                    volume_mounts = [
                                        benny_kubernetes.models.io/k8s/api/core/v1/volume_mount.io.k8s.api.core.v1.VolumeMount(
                                            mount_path = '', 
                                            mount_propagation = '', 
                                            name = '', 
                                            read_only = True, 
                                            sub_path = '', 
                                            sub_path_expr = '', )
                                        ], 
                                    working_dir = '', )
                                ], 
                            dns_config = benny_kubernetes.models.io/k8s/api/core/v1/pod_dns_config.io.k8s.api.core.v1.PodDNSConfig(
                                nameservers = [
                                    ''
                                    ], 
                                options = [
                                    benny_kubernetes.models.io/k8s/api/core/v1/pod_dns_config_option.io.k8s.api.core.v1.PodDNSConfigOption(
                                        name = '', 
                                        value = '', )
                                    ], 
                                searches = [
                                    ''
                                    ], ), 
                            dns_policy = '', 
                            enable_service_links = True, 
                            ephemeral_containers = [
                                benny_kubernetes.models.io/k8s/api/core/v1/ephemeral_container.io.k8s.api.core.v1.EphemeralContainer(
                                    image = '', 
                                    image_pull_policy = '', 
                                    name = '', 
                                    stdin = True, 
                                    stdin_once = True, 
                                    target_container_name = '', 
                                    termination_message_path = '', 
                                    termination_message_policy = '', 
                                    tty = True, 
                                    working_dir = '', )
                                ], 
                            host_aliases = [
                                benny_kubernetes.models.io/k8s/api/core/v1/host_alias.io.k8s.api.core.v1.HostAlias(
                                    hostnames = [
                                        ''
                                        ], 
                                    ip = '', )
                                ], 
                            host_ipc = True, 
                            host_network = True, 
                            host_pid = True, 
                            hostname = '', 
                            image_pull_secrets = [
                                benny_kubernetes.models.io/k8s/api/core/v1/local_object_reference.io.k8s.api.core.v1.LocalObjectReference(
                                    name = '', )
                                ], 
                            init_containers = [
                                benny_kubernetes.models.io/k8s/api/core/v1/container.io.k8s.api.core.v1.Container(
                                    image = '', 
                                    image_pull_policy = '', 
                                    name = '', 
                                    stdin = True, 
                                    stdin_once = True, 
                                    termination_message_path = '', 
                                    termination_message_policy = '', 
                                    tty = True, 
                                    working_dir = '', )
                                ], 
                            node_name = '', 
                            node_selector = {
                                'key' : ''
                                }, 
                            overhead = {
                                'key' : ''
                                }, 
                            preemption_policy = '', 
                            priority = 56, 
                            priority_class_name = '', 
                            readiness_gates = [
                                benny_kubernetes.models.io/k8s/api/core/v1/pod_readiness_gate.io.k8s.api.core.v1.PodReadinessGate(
                                    condition_type = '', )
                                ], 
                            restart_policy = '', 
                            runtime_class_name = '', 
                            scheduler_name = '', 
                            security_context = benny_kubernetes.models.io/k8s/api/core/v1/pod_security_context.io.k8s.api.core.v1.PodSecurityContext(
                                fs_group = 56, 
                                fs_group_change_policy = '', 
                                run_as_group = 56, 
                                run_as_non_root = True, 
                                run_as_user = 56, 
                                supplemental_groups = [
                                    56
                                    ], 
                                sysctls = [
                                    benny_kubernetes.models.io/k8s/api/core/v1/sysctl.io.k8s.api.core.v1.Sysctl(
                                        name = '', 
                                        value = '', )
                                    ], ), 
                            service_account = '', 
                            service_account_name = '', 
                            share_process_namespace = True, 
                            subdomain = '', 
                            termination_grace_period_seconds = 56, 
                            tolerations = [
                                benny_kubernetes.models.io/k8s/api/core/v1/toleration.io.k8s.api.core.v1.Toleration(
                                    effect = '', 
                                    key = '', 
                                    operator = '', 
                                    toleration_seconds = 56, 
                                    value = '', )
                                ], 
                            topology_spread_constraints = [
                                benny_kubernetes.models.io/k8s/api/core/v1/topology_spread_constraint.io.k8s.api.core.v1.TopologySpreadConstraint(
                                    label_selector = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector(
                                        match_labels = {
                                            'key' : ''
                                            }, ), 
                                    max_skew = 56, 
                                    topology_key = '', 
                                    when_unsatisfiable = '', )
                                ], 
                            volumes = [
                                benny_kubernetes.models.io/k8s/api/core/v1/volume.io.k8s.api.core.v1.Volume(
                                    aws_elastic_block_store = benny_kubernetes.models.io/k8s/api/core/v1/aws_elastic_block_store_volume_source.io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource(
                                        fs_type = '', 
                                        partition = 56, 
                                        read_only = True, 
                                        volume_id = '', ), 
                                    azure_disk = benny_kubernetes.models.io/k8s/api/core/v1/azure_disk_volume_source.io.k8s.api.core.v1.AzureDiskVolumeSource(
                                        caching_mode = '', 
                                        disk_name = '', 
                                        disk_uri = '', 
                                        fs_type = '', 
                                        kind = '', 
                                        read_only = True, ), 
                                    azure_file = benny_kubernetes.models.io/k8s/api/core/v1/azure_file_volume_source.io.k8s.api.core.v1.AzureFileVolumeSource(
                                        read_only = True, 
                                        secret_name = '', 
                                        share_name = '', ), 
                                    cephfs = benny_kubernetes.models.io/k8s/api/core/v1/ceph_fs_volume_source.io.k8s.api.core.v1.CephFSVolumeSource(
                                        monitors = [
                                            ''
                                            ], 
                                        path = '', 
                                        read_only = True, 
                                        secret_file = '', 
                                        user = '', ), 
                                    cinder = benny_kubernetes.models.io/k8s/api/core/v1/cinder_volume_source.io.k8s.api.core.v1.CinderVolumeSource(
                                        fs_type = '', 
                                        read_only = True, 
                                        volume_id = '', ), 
                                    config_map = benny_kubernetes.models.io/k8s/api/core/v1/config_map_volume_source.io.k8s.api.core.v1.ConfigMapVolumeSource(
                                        default_mode = 56, 
                                        items = [
                                            benny_kubernetes.models.io/k8s/api/core/v1/key_to_path.io.k8s.api.core.v1.KeyToPath(
                                                key = '', 
                                                mode = 56, 
                                                path = '', )
                                            ], 
                                        name = '', 
                                        optional = True, ), 
                                    csi = benny_kubernetes.models.io/k8s/api/core/v1/csi_volume_source.io.k8s.api.core.v1.CSIVolumeSource(
                                        driver = '', 
                                        fs_type = '', 
                                        node_publish_secret_ref = benny_kubernetes.models.io/k8s/api/core/v1/local_object_reference.io.k8s.api.core.v1.LocalObjectReference(
                                            name = '', ), 
                                        read_only = True, 
                                        volume_attributes = {
                                            'key' : ''
                                            }, ), 
                                    downward_api = benny_kubernetes.models.io/k8s/api/core/v1/downward_api_volume_source.io.k8s.api.core.v1.DownwardAPIVolumeSource(
                                        default_mode = 56, ), 
                                    empty_dir = benny_kubernetes.models.io/k8s/api/core/v1/empty_dir_volume_source.io.k8s.api.core.v1.EmptyDirVolumeSource(
                                        medium = '', 
                                        size_limit = '', ), 
                                    fc = benny_kubernetes.models.io/k8s/api/core/v1/fc_volume_source.io.k8s.api.core.v1.FCVolumeSource(
                                        fs_type = '', 
                                        lun = 56, 
                                        read_only = True, 
                                        target_wwns = [
                                            ''
                                            ], 
                                        wwids = [
                                            ''
                                            ], ), 
                                    flex_volume = benny_kubernetes.models.io/k8s/api/core/v1/flex_volume_source.io.k8s.api.core.v1.FlexVolumeSource(
                                        driver = '', 
                                        fs_type = '', 
                                        read_only = True, ), 
                                    flocker = benny_kubernetes.models.io/k8s/api/core/v1/flocker_volume_source.io.k8s.api.core.v1.FlockerVolumeSource(
                                        dataset_name = '', 
                                        dataset_uuid = '', ), 
                                    gce_persistent_disk = benny_kubernetes.models.io/k8s/api/core/v1/gce_persistent_disk_volume_source.io.k8s.api.core.v1.GCEPersistentDiskVolumeSource(
                                        fs_type = '', 
                                        partition = 56, 
                                        pd_name = '', 
                                        read_only = True, ), 
                                    git_repo = benny_kubernetes.models.io/k8s/api/core/v1/git_repo_volume_source.io.k8s.api.core.v1.GitRepoVolumeSource(
                                        directory = '', 
                                        repository = '', 
                                        revision = '', ), 
                                    glusterfs = benny_kubernetes.models.io/k8s/api/core/v1/glusterfs_volume_source.io.k8s.api.core.v1.GlusterfsVolumeSource(
                                        endpoints = '', 
                                        path = '', 
                                        read_only = True, ), 
                                    host_path = benny_kubernetes.models.io/k8s/api/core/v1/host_path_volume_source.io.k8s.api.core.v1.HostPathVolumeSource(
                                        path = '', 
                                        type = '', ), 
                                    iscsi = benny_kubernetes.models.io/k8s/api/core/v1/iscsi_volume_source.io.k8s.api.core.v1.ISCSIVolumeSource(
                                        chap_auth_discovery = True, 
                                        chap_auth_session = True, 
                                        fs_type = '', 
                                        initiator_name = '', 
                                        iqn = '', 
                                        iscsi_interface = '', 
                                        lun = 56, 
                                        portals = [
                                            ''
                                            ], 
                                        read_only = True, 
                                        target_portal = '', ), 
                                    name = '', 
                                    nfs = benny_kubernetes.models.io/k8s/api/core/v1/nfs_volume_source.io.k8s.api.core.v1.NFSVolumeSource(
                                        path = '', 
                                        read_only = True, 
                                        server = '', ), 
                                    persistent_volume_claim = benny_kubernetes.models.io/k8s/api/core/v1/persistent_volume_claim_volume_source.io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource(
                                        claim_name = '', 
                                        read_only = True, ), 
                                    photon_persistent_disk = benny_kubernetes.models.io/k8s/api/core/v1/photon_persistent_disk_volume_source.io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource(
                                        fs_type = '', 
                                        pd_id = '', ), 
                                    portworx_volume = benny_kubernetes.models.io/k8s/api/core/v1/portworx_volume_source.io.k8s.api.core.v1.PortworxVolumeSource(
                                        fs_type = '', 
                                        read_only = True, 
                                        volume_id = '', ), 
                                    projected = benny_kubernetes.models.io/k8s/api/core/v1/projected_volume_source.io.k8s.api.core.v1.ProjectedVolumeSource(
                                        default_mode = 56, 
                                        sources = [
                                            benny_kubernetes.models.io/k8s/api/core/v1/volume_projection.io.k8s.api.core.v1.VolumeProjection(
                                                secret = benny_kubernetes.models.io/k8s/api/core/v1/secret_projection.io.k8s.api.core.v1.SecretProjection(
                                                    name = '', 
                                                    optional = True, ), 
                                                service_account_token = benny_kubernetes.models.io/k8s/api/core/v1/service_account_token_projection.io.k8s.api.core.v1.ServiceAccountTokenProjection(
                                                    audience = '', 
                                                    expiration_seconds = 56, 
                                                    path = '', ), )
                                            ], ), 
                                    quobyte = benny_kubernetes.models.io/k8s/api/core/v1/quobyte_volume_source.io.k8s.api.core.v1.QuobyteVolumeSource(
                                        group = '', 
                                        read_only = True, 
                                        registry = '', 
                                        tenant = '', 
                                        user = '', 
                                        volume = '', ), 
                                    rbd = benny_kubernetes.models.io/k8s/api/core/v1/rbd_volume_source.io.k8s.api.core.v1.RBDVolumeSource(
                                        fs_type = '', 
                                        image = '', 
                                        keyring = '', 
                                        monitors = [
                                            ''
                                            ], 
                                        pool = '', 
                                        read_only = True, 
                                        user = '', ), 
                                    scale_io = benny_kubernetes.models.io/k8s/api/core/v1/scale_io_volume_source.io.k8s.api.core.v1.ScaleIOVolumeSource(
                                        fs_type = '', 
                                        gateway = '', 
                                        protection_domain = '', 
                                        read_only = True, 
                                        secret_ref = , 
                                        ssl_enabled = True, 
                                        storage_mode = '', 
                                        storage_pool = '', 
                                        system = '', 
                                        volume_name = '', ), 
                                    secret = benny_kubernetes.models.io/k8s/api/core/v1/secret_volume_source.io.k8s.api.core.v1.SecretVolumeSource(
                                        default_mode = 56, 
                                        optional = True, 
                                        secret_name = '', ), 
                                    storageos = benny_kubernetes.models.io/k8s/api/core/v1/storage_os_volume_source.io.k8s.api.core.v1.StorageOSVolumeSource(
                                        fs_type = '', 
                                        read_only = True, 
                                        volume_name = '', 
                                        volume_namespace = '', ), 
                                    vsphere_volume = benny_kubernetes.models.io/k8s/api/core/v1/vsphere_virtual_disk_volume_source.io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource(
                                        fs_type = '', 
                                        storage_policy_id = '', 
                                        storage_policy_name = '', 
                                        volume_path = '', ), )
                                ], ), ), ),
                status = benny_kubernetes.models.io/k8s/api/core/v1/replication_controller_status.io.k8s.api.core.v1.ReplicationControllerStatus(
                    available_replicas = 56, 
                    conditions = [
                        benny_kubernetes.models.io/k8s/api/core/v1/replication_controller_condition.io.k8s.api.core.v1.ReplicationControllerCondition(
                            last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            message = '', 
                            reason = '', 
                            status = '', 
                            type = '', )
                        ], 
                    fully_labeled_replicas = 56, 
                    observed_generation = 56, 
                    ready_replicas = 56, 
                    replicas = 56, )
            )
        else:
            return IoK8sApiCoreV1ReplicationController(
        )
        """

    def testIoK8sApiCoreV1ReplicationController(self):
        """Test IoK8sApiCoreV1ReplicationController"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
