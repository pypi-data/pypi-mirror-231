# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from benny_kubernetes.models.io_k8s_api_core_v1_pod_status import IoK8sApiCoreV1PodStatus  # noqa: E501

class TestIoK8sApiCoreV1PodStatus(unittest.TestCase):
    """IoK8sApiCoreV1PodStatus unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IoK8sApiCoreV1PodStatus:
        """Test IoK8sApiCoreV1PodStatus
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IoK8sApiCoreV1PodStatus`
        """
        model = IoK8sApiCoreV1PodStatus()  # noqa: E501
        if include_optional:
            return IoK8sApiCoreV1PodStatus(
                conditions = [
                    benny_kubernetes.models.io/k8s/api/core/v1/pod_condition.io.k8s.api.core.v1.PodCondition(
                        last_probe_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        message = '', 
                        reason = '', 
                        status = '', 
                        type = '', )
                    ],
                container_statuses = [
                    benny_kubernetes.models.io/k8s/api/core/v1/container_status.io.k8s.api.core.v1.ContainerStatus(
                        container_id = '', 
                        image = '', 
                        image_id = '', 
                        last_state = benny_kubernetes.models.io/k8s/api/core/v1/container_state.io.k8s.api.core.v1.ContainerState(
                            running = benny_kubernetes.models.io/k8s/api/core/v1/container_state_running.io.k8s.api.core.v1.ContainerStateRunning(
                                started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            terminated = benny_kubernetes.models.io/k8s/api/core/v1/container_state_terminated.io.k8s.api.core.v1.ContainerStateTerminated(
                                container_id = '', 
                                exit_code = 56, 
                                finished_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                message = '', 
                                reason = '', 
                                signal = 56, 
                                started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            waiting = benny_kubernetes.models.io/k8s/api/core/v1/container_state_waiting.io.k8s.api.core.v1.ContainerStateWaiting(
                                message = '', 
                                reason = '', ), ), 
                        name = '', 
                        ready = True, 
                        restart_count = 56, 
                        started = True, 
                        state = benny_kubernetes.models.io/k8s/api/core/v1/container_state.io.k8s.api.core.v1.ContainerState(), )
                    ],
                ephemeral_container_statuses = [
                    benny_kubernetes.models.io/k8s/api/core/v1/container_status.io.k8s.api.core.v1.ContainerStatus(
                        container_id = '', 
                        image = '', 
                        image_id = '', 
                        last_state = benny_kubernetes.models.io/k8s/api/core/v1/container_state.io.k8s.api.core.v1.ContainerState(
                            running = benny_kubernetes.models.io/k8s/api/core/v1/container_state_running.io.k8s.api.core.v1.ContainerStateRunning(
                                started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            terminated = benny_kubernetes.models.io/k8s/api/core/v1/container_state_terminated.io.k8s.api.core.v1.ContainerStateTerminated(
                                container_id = '', 
                                exit_code = 56, 
                                finished_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                message = '', 
                                reason = '', 
                                signal = 56, 
                                started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            waiting = benny_kubernetes.models.io/k8s/api/core/v1/container_state_waiting.io.k8s.api.core.v1.ContainerStateWaiting(
                                message = '', 
                                reason = '', ), ), 
                        name = '', 
                        ready = True, 
                        restart_count = 56, 
                        started = True, 
                        state = benny_kubernetes.models.io/k8s/api/core/v1/container_state.io.k8s.api.core.v1.ContainerState(), )
                    ],
                host_ip = '',
                init_container_statuses = [
                    benny_kubernetes.models.io/k8s/api/core/v1/container_status.io.k8s.api.core.v1.ContainerStatus(
                        container_id = '', 
                        image = '', 
                        image_id = '', 
                        last_state = benny_kubernetes.models.io/k8s/api/core/v1/container_state.io.k8s.api.core.v1.ContainerState(
                            running = benny_kubernetes.models.io/k8s/api/core/v1/container_state_running.io.k8s.api.core.v1.ContainerStateRunning(
                                started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            terminated = benny_kubernetes.models.io/k8s/api/core/v1/container_state_terminated.io.k8s.api.core.v1.ContainerStateTerminated(
                                container_id = '', 
                                exit_code = 56, 
                                finished_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                message = '', 
                                reason = '', 
                                signal = 56, 
                                started_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            waiting = benny_kubernetes.models.io/k8s/api/core/v1/container_state_waiting.io.k8s.api.core.v1.ContainerStateWaiting(
                                message = '', 
                                reason = '', ), ), 
                        name = '', 
                        ready = True, 
                        restart_count = 56, 
                        started = True, 
                        state = benny_kubernetes.models.io/k8s/api/core/v1/container_state.io.k8s.api.core.v1.ContainerState(), )
                    ],
                message = '',
                nominated_node_name = '',
                phase = '',
                pod_ip = '',
                pod_ips = [
                    benny_kubernetes.models.io/k8s/api/core/v1/pod_ip.io.k8s.api.core.v1.PodIP(
                        ip = '', )
                    ],
                qos_class = '',
                reason = '',
                start_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
            )
        else:
            return IoK8sApiCoreV1PodStatus(
        )
        """

    def testIoK8sApiCoreV1PodStatus(self):
        """Test IoK8sApiCoreV1PodStatus"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
