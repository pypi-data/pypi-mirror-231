# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from benny_kubernetes.models.io_k8s_api_apps_v1_daemon_set_list import IoK8sApiAppsV1DaemonSetList  # noqa: E501

class TestIoK8sApiAppsV1DaemonSetList(unittest.TestCase):
    """IoK8sApiAppsV1DaemonSetList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IoK8sApiAppsV1DaemonSetList:
        """Test IoK8sApiAppsV1DaemonSetList
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IoK8sApiAppsV1DaemonSetList`
        """
        model = IoK8sApiAppsV1DaemonSetList()  # noqa: E501
        if include_optional:
            return IoK8sApiAppsV1DaemonSetList(
                api_version = '',
                items = [
                    benny_kubernetes.models.io/k8s/api/apps/v1/daemon_set.io.k8s.api.apps.v1.DaemonSet(
                        api_version = '', 
                        kind = '', 
                        metadata = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/object_meta.io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta(
                            annotations = {
                                'key' : ''
                                }, 
                            cluster_name = '', 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_grace_period_seconds = 56, 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            finalizers = [
                                ''
                                ], 
                            generate_name = '', 
                            generation = 56, 
                            labels = {
                                'key' : ''
                                }, 
                            managed_fields = [
                                benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/managed_fields_entry.io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry(
                                    api_version = '', 
                                    fields_type = '', 
                                    fields_v1 = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/fields_v1.io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1(), 
                                    manager = '', 
                                    operation = '', 
                                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            name = '', 
                            namespace = '', 
                            owner_references = [
                                benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/owner_reference.io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference(
                                    api_version = '', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '', 
                                    name = '', 
                                    uid = '', )
                                ], 
                            resource_version = '', 
                            self_link = '', 
                            uid = '', ), 
                        spec = benny_kubernetes.models.io/k8s/api/apps/v1/daemon_set_spec.io.k8s.api.apps.v1.DaemonSetSpec(
                            min_ready_seconds = 56, 
                            revision_history_limit = 56, 
                            selector = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector(
                                match_expressions = [
                                    benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector_requirement.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement(
                                        key = '', 
                                        operator = '', 
                                        values = [
                                            ''
                                            ], )
                                    ], 
                                match_labels = {
                                    'key' : ''
                                    }, ), 
                            template = benny_kubernetes.models.io/k8s/api/core/v1/pod_template_spec.io.k8s.api.core.v1.PodTemplateSpec(), 
                            update_strategy = benny_kubernetes.models.io/k8s/api/apps/v1/daemon_set_update_strategy.io.k8s.api.apps.v1.DaemonSetUpdateStrategy(
                                rolling_update = benny_kubernetes.models.io/k8s/api/apps/v1/rolling_update_daemon_set.io.k8s.api.apps.v1.RollingUpdateDaemonSet(
                                    max_unavailable = '', ), 
                                type = '', ), ), 
                        status = benny_kubernetes.models.io/k8s/api/apps/v1/daemon_set_status.io.k8s.api.apps.v1.DaemonSetStatus(
                            collision_count = 56, 
                            conditions = [
                                benny_kubernetes.models.io/k8s/api/apps/v1/daemon_set_condition.io.k8s.api.apps.v1.DaemonSetCondition(
                                    last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    message = '', 
                                    reason = '', 
                                    status = '', 
                                    type = '', )
                                ], 
                            current_number_scheduled = 56, 
                            desired_number_scheduled = 56, 
                            number_available = 56, 
                            number_misscheduled = 56, 
                            number_ready = 56, 
                            number_unavailable = 56, 
                            observed_generation = 56, 
                            updated_number_scheduled = 56, ), )
                    ],
                kind = '',
                metadata = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/list_meta.io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta(
                    continue = '', 
                    remaining_item_count = 56, 
                    resource_version = '', 
                    self_link = '', )
            )
        else:
            return IoK8sApiAppsV1DaemonSetList(
                items = [
                    benny_kubernetes.models.io/k8s/api/apps/v1/daemon_set.io.k8s.api.apps.v1.DaemonSet(
                        api_version = '', 
                        kind = '', 
                        metadata = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/object_meta.io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta(
                            annotations = {
                                'key' : ''
                                }, 
                            cluster_name = '', 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_grace_period_seconds = 56, 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            finalizers = [
                                ''
                                ], 
                            generate_name = '', 
                            generation = 56, 
                            labels = {
                                'key' : ''
                                }, 
                            managed_fields = [
                                benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/managed_fields_entry.io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry(
                                    api_version = '', 
                                    fields_type = '', 
                                    fields_v1 = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/fields_v1.io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1(), 
                                    manager = '', 
                                    operation = '', 
                                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            name = '', 
                            namespace = '', 
                            owner_references = [
                                benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/owner_reference.io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference(
                                    api_version = '', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '', 
                                    name = '', 
                                    uid = '', )
                                ], 
                            resource_version = '', 
                            self_link = '', 
                            uid = '', ), 
                        spec = benny_kubernetes.models.io/k8s/api/apps/v1/daemon_set_spec.io.k8s.api.apps.v1.DaemonSetSpec(
                            min_ready_seconds = 56, 
                            revision_history_limit = 56, 
                            selector = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector(
                                match_expressions = [
                                    benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/label_selector_requirement.io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement(
                                        key = '', 
                                        operator = '', 
                                        values = [
                                            ''
                                            ], )
                                    ], 
                                match_labels = {
                                    'key' : ''
                                    }, ), 
                            template = benny_kubernetes.models.io/k8s/api/core/v1/pod_template_spec.io.k8s.api.core.v1.PodTemplateSpec(), 
                            update_strategy = benny_kubernetes.models.io/k8s/api/apps/v1/daemon_set_update_strategy.io.k8s.api.apps.v1.DaemonSetUpdateStrategy(
                                rolling_update = benny_kubernetes.models.io/k8s/api/apps/v1/rolling_update_daemon_set.io.k8s.api.apps.v1.RollingUpdateDaemonSet(
                                    max_unavailable = '', ), 
                                type = '', ), ), 
                        status = benny_kubernetes.models.io/k8s/api/apps/v1/daemon_set_status.io.k8s.api.apps.v1.DaemonSetStatus(
                            collision_count = 56, 
                            conditions = [
                                benny_kubernetes.models.io/k8s/api/apps/v1/daemon_set_condition.io.k8s.api.apps.v1.DaemonSetCondition(
                                    last_transition_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    message = '', 
                                    reason = '', 
                                    status = '', 
                                    type = '', )
                                ], 
                            current_number_scheduled = 56, 
                            desired_number_scheduled = 56, 
                            number_available = 56, 
                            number_misscheduled = 56, 
                            number_ready = 56, 
                            number_unavailable = 56, 
                            observed_generation = 56, 
                            updated_number_scheduled = 56, ), )
                    ],
        )
        """

    def testIoK8sApiAppsV1DaemonSetList(self):
        """Test IoK8sApiAppsV1DaemonSetList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
