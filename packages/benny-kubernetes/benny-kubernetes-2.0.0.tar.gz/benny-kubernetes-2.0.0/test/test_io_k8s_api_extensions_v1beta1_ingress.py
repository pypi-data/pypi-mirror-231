# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from benny_kubernetes.models.io_k8s_api_extensions_v1beta1_ingress import IoK8sApiExtensionsV1beta1Ingress  # noqa: E501

class TestIoK8sApiExtensionsV1beta1Ingress(unittest.TestCase):
    """IoK8sApiExtensionsV1beta1Ingress unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IoK8sApiExtensionsV1beta1Ingress:
        """Test IoK8sApiExtensionsV1beta1Ingress
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IoK8sApiExtensionsV1beta1Ingress`
        """
        model = IoK8sApiExtensionsV1beta1Ingress()  # noqa: E501
        if include_optional:
            return IoK8sApiExtensionsV1beta1Ingress(
                api_version = '',
                kind = '',
                metadata = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/object_meta.io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta(
                    annotations = {
                        'key' : ''
                        }, 
                    cluster_name = '', 
                    creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    deletion_grace_period_seconds = 56, 
                    deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    finalizers = [
                        ''
                        ], 
                    generate_name = '', 
                    generation = 56, 
                    labels = {
                        'key' : ''
                        }, 
                    managed_fields = [
                        benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/managed_fields_entry.io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry(
                            api_version = '', 
                            fields_type = '', 
                            fields_v1 = benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/fields_v1.io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1(), 
                            manager = '', 
                            operation = '', 
                            time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                        ], 
                    name = '', 
                    namespace = '', 
                    owner_references = [
                        benny_kubernetes.models.io/k8s/apimachinery/pkg/apis/meta/v1/owner_reference.io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference(
                            api_version = '', 
                            block_owner_deletion = True, 
                            controller = True, 
                            kind = '', 
                            name = '', 
                            uid = '', )
                        ], 
                    resource_version = '', 
                    self_link = '', 
                    uid = '', ),
                spec = benny_kubernetes.models.io/k8s/api/extensions/v1beta1/ingress_spec.io.k8s.api.extensions.v1beta1.IngressSpec(
                    backend = benny_kubernetes.models.io/k8s/api/extensions/v1beta1/ingress_backend.io.k8s.api.extensions.v1beta1.IngressBackend(
                        resource = benny_kubernetes.models.io/k8s/api/core/v1/typed_local_object_reference.io.k8s.api.core.v1.TypedLocalObjectReference(
                            api_group = '', 
                            kind = '', 
                            name = '', ), 
                        service_name = '', 
                        service_port = '', ), 
                    ingress_class_name = '', 
                    rules = [
                        benny_kubernetes.models.io/k8s/api/extensions/v1beta1/ingress_rule.io.k8s.api.extensions.v1beta1.IngressRule(
                            host = '', 
                            http = benny_kubernetes.models.io/k8s/api/extensions/v1beta1/http_ingress_rule_value.io.k8s.api.extensions.v1beta1.HTTPIngressRuleValue(
                                paths = [
                                    benny_kubernetes.models.io/k8s/api/extensions/v1beta1/http_ingress_path.io.k8s.api.extensions.v1beta1.HTTPIngressPath(
                                        backend = benny_kubernetes.models.io/k8s/api/extensions/v1beta1/ingress_backend.io.k8s.api.extensions.v1beta1.IngressBackend(
                                            service_name = '', ), 
                                        path = '', 
                                        path_type = '', )
                                    ], ), )
                        ], 
                    tls = [
                        benny_kubernetes.models.io/k8s/api/extensions/v1beta1/ingress_tls.io.k8s.api.extensions.v1beta1.IngressTLS(
                            hosts = [
                                ''
                                ], 
                            secret_name = '', )
                        ], ),
                status = benny_kubernetes.models.io/k8s/api/extensions/v1beta1/ingress_status.io.k8s.api.extensions.v1beta1.IngressStatus(
                    load_balancer = benny_kubernetes.models.io/k8s/api/core/v1/load_balancer_status.io.k8s.api.core.v1.LoadBalancerStatus(
                        ingress = [
                            benny_kubernetes.models.io/k8s/api/core/v1/load_balancer_ingress.io.k8s.api.core.v1.LoadBalancerIngress(
                                hostname = '', 
                                ip = '', )
                            ], ), )
            )
        else:
            return IoK8sApiExtensionsV1beta1Ingress(
        )
        """

    def testIoK8sApiExtensionsV1beta1Ingress(self):
        """Test IoK8sApiExtensionsV1beta1Ingress"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
