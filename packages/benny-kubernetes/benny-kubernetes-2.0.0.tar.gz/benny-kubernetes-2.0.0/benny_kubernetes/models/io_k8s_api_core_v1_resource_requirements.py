# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictStr

class IoK8sApiCoreV1ResourceRequirements(BaseModel):
    """
    ResourceRequirements describes the compute resource requirements.  # noqa: E501
    """
    limits: Optional[Dict[str, StrictStr]] = Field(None, description="Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/")
    requests: Optional[Dict[str, StrictStr]] = Field(None, description="Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/")
    __properties = ["limits", "requests"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiCoreV1ResourceRequirements:
        """Create an instance of IoK8sApiCoreV1ResourceRequirements from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiCoreV1ResourceRequirements:
        """Create an instance of IoK8sApiCoreV1ResourceRequirements from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiCoreV1ResourceRequirements.parse_obj(obj)

        _obj = IoK8sApiCoreV1ResourceRequirements.parse_obj({
            "limits": obj.get("limits"),
            "requests": obj.get("requests")
        })
        return _obj


