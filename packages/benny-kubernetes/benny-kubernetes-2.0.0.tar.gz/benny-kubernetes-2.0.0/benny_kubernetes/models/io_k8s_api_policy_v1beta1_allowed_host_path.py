# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class IoK8sApiPolicyV1beta1AllowedHostPath(BaseModel):
    """
    AllowedHostPath defines the host volume conditions that will be enabled by a policy for pods to use. It requires the path prefix to be defined.  # noqa: E501
    """
    path_prefix: Optional[StrictStr] = Field(None, alias="pathPrefix", description="pathPrefix is the path prefix that the host volume must match. It does not support `*`. Trailing slashes are trimmed when validating the path prefix with a host path.  Examples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or `/etc/foo`")
    read_only: Optional[StrictBool] = Field(None, alias="readOnly", description="when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are readOnly.")
    __properties = ["pathPrefix", "readOnly"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiPolicyV1beta1AllowedHostPath:
        """Create an instance of IoK8sApiPolicyV1beta1AllowedHostPath from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiPolicyV1beta1AllowedHostPath:
        """Create an instance of IoK8sApiPolicyV1beta1AllowedHostPath from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiPolicyV1beta1AllowedHostPath.parse_obj(obj)

        _obj = IoK8sApiPolicyV1beta1AllowedHostPath.parse_obj({
            "path_prefix": obj.get("pathPrefix"),
            "read_only": obj.get("readOnly")
        })
        return _obj


