# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from benny_kubernetes.models.io_k8s_api_rbac_v1alpha1_aggregation_rule import IoK8sApiRbacV1alpha1AggregationRule
from benny_kubernetes.models.io_k8s_api_rbac_v1alpha1_policy_rule import IoK8sApiRbacV1alpha1PolicyRule
from benny_kubernetes.models.io_k8s_apimachinery_pkg_apis_meta_v1_object_meta import IoK8sApimachineryPkgApisMetaV1ObjectMeta

class IoK8sApiRbacV1alpha1ClusterRole(BaseModel):
    """
    ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRole, and will no longer be served in v1.20.  # noqa: E501
    """
    aggregation_rule: Optional[IoK8sApiRbacV1alpha1AggregationRule] = Field(None, alias="aggregationRule")
    api_version: Optional[StrictStr] = Field(None, alias="apiVersion", description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources")
    kind: Optional[StrictStr] = Field(None, description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds")
    metadata: Optional[IoK8sApimachineryPkgApisMetaV1ObjectMeta] = None
    rules: Optional[conlist(IoK8sApiRbacV1alpha1PolicyRule)] = Field(None, description="Rules holds all the PolicyRules for this ClusterRole")
    __properties = ["aggregationRule", "apiVersion", "kind", "metadata", "rules"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiRbacV1alpha1ClusterRole:
        """Create an instance of IoK8sApiRbacV1alpha1ClusterRole from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of aggregation_rule
        if self.aggregation_rule:
            _dict['aggregationRule'] = self.aggregation_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rules (list)
        _items = []
        if self.rules:
            for _item in self.rules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['rules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiRbacV1alpha1ClusterRole:
        """Create an instance of IoK8sApiRbacV1alpha1ClusterRole from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiRbacV1alpha1ClusterRole.parse_obj(obj)

        _obj = IoK8sApiRbacV1alpha1ClusterRole.parse_obj({
            "aggregation_rule": IoK8sApiRbacV1alpha1AggregationRule.from_dict(obj.get("aggregationRule")) if obj.get("aggregationRule") is not None else None,
            "api_version": obj.get("apiVersion"),
            "kind": obj.get("kind"),
            "metadata": IoK8sApimachineryPkgApisMetaV1ObjectMeta.from_dict(obj.get("metadata")) if obj.get("metadata") is not None else None,
            "rules": [IoK8sApiRbacV1alpha1PolicyRule.from_dict(_item) for _item in obj.get("rules")] if obj.get("rules") is not None else None
        })
        return _obj


