# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class IoK8sApiCoordinationV1beta1LeaseSpec(BaseModel):
    """
    LeaseSpec is a specification of a Lease.  # noqa: E501
    """
    acquire_time: Optional[datetime] = Field(None, alias="acquireTime", description="MicroTime is version of Time with microsecond level precision.")
    holder_identity: Optional[StrictStr] = Field(None, alias="holderIdentity", description="holderIdentity contains the identity of the holder of a current lease.")
    lease_duration_seconds: Optional[StrictInt] = Field(None, alias="leaseDurationSeconds", description="leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed RenewTime.")
    lease_transitions: Optional[StrictInt] = Field(None, alias="leaseTransitions", description="leaseTransitions is the number of transitions of a lease between holders.")
    renew_time: Optional[datetime] = Field(None, alias="renewTime", description="MicroTime is version of Time with microsecond level precision.")
    __properties = ["acquireTime", "holderIdentity", "leaseDurationSeconds", "leaseTransitions", "renewTime"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiCoordinationV1beta1LeaseSpec:
        """Create an instance of IoK8sApiCoordinationV1beta1LeaseSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiCoordinationV1beta1LeaseSpec:
        """Create an instance of IoK8sApiCoordinationV1beta1LeaseSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiCoordinationV1beta1LeaseSpec.parse_obj(obj)

        _obj = IoK8sApiCoordinationV1beta1LeaseSpec.parse_obj({
            "acquire_time": obj.get("acquireTime"),
            "holder_identity": obj.get("holderIdentity"),
            "lease_duration_seconds": obj.get("leaseDurationSeconds"),
            "lease_transitions": obj.get("leaseTransitions"),
            "renew_time": obj.get("renewTime")
        })
        return _obj


