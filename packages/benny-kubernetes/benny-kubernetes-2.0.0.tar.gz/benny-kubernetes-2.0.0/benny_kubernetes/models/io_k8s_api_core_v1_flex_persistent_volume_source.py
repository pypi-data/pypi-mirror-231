# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from benny_kubernetes.models.io_k8s_api_core_v1_secret_reference import IoK8sApiCoreV1SecretReference

class IoK8sApiCoreV1FlexPersistentVolumeSource(BaseModel):
    """
    FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.  # noqa: E501
    """
    driver: StrictStr = Field(..., description="Driver is the name of the driver to use for this volume.")
    fs_type: Optional[StrictStr] = Field(None, alias="fsType", description="Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.")
    options: Optional[Dict[str, StrictStr]] = Field(None, description="Optional: Extra command options if any.")
    read_only: Optional[StrictBool] = Field(None, alias="readOnly", description="Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.")
    secret_ref: Optional[IoK8sApiCoreV1SecretReference] = Field(None, alias="secretRef")
    __properties = ["driver", "fsType", "options", "readOnly", "secretRef"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiCoreV1FlexPersistentVolumeSource:
        """Create an instance of IoK8sApiCoreV1FlexPersistentVolumeSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of secret_ref
        if self.secret_ref:
            _dict['secretRef'] = self.secret_ref.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiCoreV1FlexPersistentVolumeSource:
        """Create an instance of IoK8sApiCoreV1FlexPersistentVolumeSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiCoreV1FlexPersistentVolumeSource.parse_obj(obj)

        _obj = IoK8sApiCoreV1FlexPersistentVolumeSource.parse_obj({
            "driver": obj.get("driver"),
            "fs_type": obj.get("fsType"),
            "options": obj.get("options"),
            "read_only": obj.get("readOnly"),
            "secret_ref": IoK8sApiCoreV1SecretReference.from_dict(obj.get("secretRef")) if obj.get("secretRef") is not None else None
        })
        return _obj


