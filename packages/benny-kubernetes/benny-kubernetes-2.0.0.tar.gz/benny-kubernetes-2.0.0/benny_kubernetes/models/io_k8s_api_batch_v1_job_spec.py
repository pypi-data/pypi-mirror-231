# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt
from benny_kubernetes.models.io_k8s_api_core_v1_pod_template_spec import IoK8sApiCoreV1PodTemplateSpec
from benny_kubernetes.models.io_k8s_apimachinery_pkg_apis_meta_v1_label_selector import IoK8sApimachineryPkgApisMetaV1LabelSelector

class IoK8sApiBatchV1JobSpec(BaseModel):
    """
    JobSpec describes how the job execution will look like.  # noqa: E501
    """
    active_deadline_seconds: Optional[StrictInt] = Field(None, alias="activeDeadlineSeconds", description="Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer")
    backoff_limit: Optional[StrictInt] = Field(None, alias="backoffLimit", description="Specifies the number of retries before marking this job failed. Defaults to 6")
    completions: Optional[StrictInt] = Field(None, description="Specifies the desired number of successfully finished pods the job should be run with.  Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/")
    manual_selector: Optional[StrictBool] = Field(None, alias="manualSelector", description="manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector")
    parallelism: Optional[StrictInt] = Field(None, description="Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/")
    selector: Optional[IoK8sApimachineryPkgApisMetaV1LabelSelector] = None
    template: IoK8sApiCoreV1PodTemplateSpec = Field(...)
    ttl_seconds_after_finished: Optional[StrictInt] = Field(None, alias="ttlSecondsAfterFinished", description="ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes. This field is alpha-level and is only honored by servers that enable the TTLAfterFinished feature.")
    __properties = ["activeDeadlineSeconds", "backoffLimit", "completions", "manualSelector", "parallelism", "selector", "template", "ttlSecondsAfterFinished"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiBatchV1JobSpec:
        """Create an instance of IoK8sApiBatchV1JobSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of selector
        if self.selector:
            _dict['selector'] = self.selector.to_dict()
        # override the default output from pydantic by calling `to_dict()` of template
        if self.template:
            _dict['template'] = self.template.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiBatchV1JobSpec:
        """Create an instance of IoK8sApiBatchV1JobSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiBatchV1JobSpec.parse_obj(obj)

        _obj = IoK8sApiBatchV1JobSpec.parse_obj({
            "active_deadline_seconds": obj.get("activeDeadlineSeconds"),
            "backoff_limit": obj.get("backoffLimit"),
            "completions": obj.get("completions"),
            "manual_selector": obj.get("manualSelector"),
            "parallelism": obj.get("parallelism"),
            "selector": IoK8sApimachineryPkgApisMetaV1LabelSelector.from_dict(obj.get("selector")) if obj.get("selector") is not None else None,
            "template": IoK8sApiCoreV1PodTemplateSpec.from_dict(obj.get("template")) if obj.get("template") is not None else None,
            "ttl_seconds_after_finished": obj.get("ttlSecondsAfterFinished")
        })
        return _obj


