# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class IoK8sApiExtensionsV1beta1IngressTLS(BaseModel):
    """
    IngressTLS describes the transport layer security associated with an Ingress.  # noqa: E501
    """
    hosts: Optional[conlist(StrictStr)] = Field(None, description="Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.")
    secret_name: Optional[StrictStr] = Field(None, alias="secretName", description="SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the \"Host\" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.")
    __properties = ["hosts", "secretName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiExtensionsV1beta1IngressTLS:
        """Create an instance of IoK8sApiExtensionsV1beta1IngressTLS from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiExtensionsV1beta1IngressTLS:
        """Create an instance of IoK8sApiExtensionsV1beta1IngressTLS from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiExtensionsV1beta1IngressTLS.parse_obj(obj)

        _obj = IoK8sApiExtensionsV1beta1IngressTLS.parse_obj({
            "hosts": obj.get("hosts"),
            "secret_name": obj.get("secretName")
        })
        return _obj


