# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from benny_kubernetes.models.io_k8s_api_core_v1_event_source import IoK8sApiCoreV1EventSource
from benny_kubernetes.models.io_k8s_api_core_v1_object_reference import IoK8sApiCoreV1ObjectReference
from benny_kubernetes.models.io_k8s_api_events_v1beta1_event_series import IoK8sApiEventsV1beta1EventSeries
from benny_kubernetes.models.io_k8s_apimachinery_pkg_apis_meta_v1_object_meta import IoK8sApimachineryPkgApisMetaV1ObjectMeta

class IoK8sApiEventsV1beta1Event(BaseModel):
    """
    Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system.  # noqa: E501
    """
    action: Optional[StrictStr] = Field(None, description="What action was taken/failed regarding to the regarding object.")
    api_version: Optional[StrictStr] = Field(None, alias="apiVersion", description="APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources")
    deprecated_count: Optional[StrictInt] = Field(None, alias="deprecatedCount", description="Deprecated field assuring backward compatibility with core.v1 Event type")
    deprecated_first_timestamp: Optional[datetime] = Field(None, alias="deprecatedFirstTimestamp", description="Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.")
    deprecated_last_timestamp: Optional[datetime] = Field(None, alias="deprecatedLastTimestamp", description="Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.")
    deprecated_source: Optional[IoK8sApiCoreV1EventSource] = Field(None, alias="deprecatedSource")
    event_time: datetime = Field(..., alias="eventTime", description="MicroTime is version of Time with microsecond level precision.")
    kind: Optional[StrictStr] = Field(None, description="Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds")
    metadata: Optional[IoK8sApimachineryPkgApisMetaV1ObjectMeta] = None
    note: Optional[StrictStr] = Field(None, description="Optional. A human-readable description of the status of this operation. Maximal length of the note is 1kB, but libraries should be prepared to handle values up to 64kB.")
    reason: Optional[StrictStr] = Field(None, description="Why the action was taken.")
    regarding: Optional[IoK8sApiCoreV1ObjectReference] = None
    related: Optional[IoK8sApiCoreV1ObjectReference] = None
    reporting_controller: Optional[StrictStr] = Field(None, alias="reportingController", description="Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.")
    reporting_instance: Optional[StrictStr] = Field(None, alias="reportingInstance", description="ID of the controller instance, e.g. `kubelet-xyzf`.")
    series: Optional[IoK8sApiEventsV1beta1EventSeries] = None
    type: Optional[StrictStr] = Field(None, description="Type of this event (Normal, Warning), new types could be added in the future.")
    __properties = ["action", "apiVersion", "deprecatedCount", "deprecatedFirstTimestamp", "deprecatedLastTimestamp", "deprecatedSource", "eventTime", "kind", "metadata", "note", "reason", "regarding", "related", "reportingController", "reportingInstance", "series", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiEventsV1beta1Event:
        """Create an instance of IoK8sApiEventsV1beta1Event from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of deprecated_source
        if self.deprecated_source:
            _dict['deprecatedSource'] = self.deprecated_source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of regarding
        if self.regarding:
            _dict['regarding'] = self.regarding.to_dict()
        # override the default output from pydantic by calling `to_dict()` of related
        if self.related:
            _dict['related'] = self.related.to_dict()
        # override the default output from pydantic by calling `to_dict()` of series
        if self.series:
            _dict['series'] = self.series.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiEventsV1beta1Event:
        """Create an instance of IoK8sApiEventsV1beta1Event from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiEventsV1beta1Event.parse_obj(obj)

        _obj = IoK8sApiEventsV1beta1Event.parse_obj({
            "action": obj.get("action"),
            "api_version": obj.get("apiVersion"),
            "deprecated_count": obj.get("deprecatedCount"),
            "deprecated_first_timestamp": obj.get("deprecatedFirstTimestamp"),
            "deprecated_last_timestamp": obj.get("deprecatedLastTimestamp"),
            "deprecated_source": IoK8sApiCoreV1EventSource.from_dict(obj.get("deprecatedSource")) if obj.get("deprecatedSource") is not None else None,
            "event_time": obj.get("eventTime"),
            "kind": obj.get("kind"),
            "metadata": IoK8sApimachineryPkgApisMetaV1ObjectMeta.from_dict(obj.get("metadata")) if obj.get("metadata") is not None else None,
            "note": obj.get("note"),
            "reason": obj.get("reason"),
            "regarding": IoK8sApiCoreV1ObjectReference.from_dict(obj.get("regarding")) if obj.get("regarding") is not None else None,
            "related": IoK8sApiCoreV1ObjectReference.from_dict(obj.get("related")) if obj.get("related") is not None else None,
            "reporting_controller": obj.get("reportingController"),
            "reporting_instance": obj.get("reportingInstance"),
            "series": IoK8sApiEventsV1beta1EventSeries.from_dict(obj.get("series")) if obj.get("series") is not None else None,
            "type": obj.get("type")
        })
        return _obj


