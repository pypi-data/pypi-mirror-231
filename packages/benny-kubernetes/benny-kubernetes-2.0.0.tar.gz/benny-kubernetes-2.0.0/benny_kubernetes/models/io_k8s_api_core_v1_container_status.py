# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from benny_kubernetes.models.io_k8s_api_core_v1_container_state import IoK8sApiCoreV1ContainerState

class IoK8sApiCoreV1ContainerStatus(BaseModel):
    """
    ContainerStatus contains details for the current status of this container.  # noqa: E501
    """
    container_id: Optional[StrictStr] = Field(None, alias="containerID", description="Container's ID in the format 'docker://<container_id>'.")
    image: StrictStr = Field(..., description="The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images")
    image_id: StrictStr = Field(..., alias="imageID", description="ImageID of the container's image.")
    last_state: Optional[IoK8sApiCoreV1ContainerState] = Field(None, alias="lastState")
    name: StrictStr = Field(..., description="This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.")
    ready: StrictBool = Field(..., description="Specifies whether the container has passed its readiness probe.")
    restart_count: StrictInt = Field(..., alias="restartCount", description="The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.")
    started: Optional[StrictBool] = Field(None, description="Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.")
    state: Optional[IoK8sApiCoreV1ContainerState] = None
    __properties = ["containerID", "image", "imageID", "lastState", "name", "ready", "restartCount", "started", "state"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiCoreV1ContainerStatus:
        """Create an instance of IoK8sApiCoreV1ContainerStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of last_state
        if self.last_state:
            _dict['lastState'] = self.last_state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict['state'] = self.state.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiCoreV1ContainerStatus:
        """Create an instance of IoK8sApiCoreV1ContainerStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiCoreV1ContainerStatus.parse_obj(obj)

        _obj = IoK8sApiCoreV1ContainerStatus.parse_obj({
            "container_id": obj.get("containerID"),
            "image": obj.get("image"),
            "image_id": obj.get("imageID"),
            "last_state": IoK8sApiCoreV1ContainerState.from_dict(obj.get("lastState")) if obj.get("lastState") is not None else None,
            "name": obj.get("name"),
            "ready": obj.get("ready"),
            "restart_count": obj.get("restartCount"),
            "started": obj.get("started"),
            "state": IoK8sApiCoreV1ContainerState.from_dict(obj.get("state")) if obj.get("state") is not None else None
        })
        return _obj


