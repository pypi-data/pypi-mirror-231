# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from benny_kubernetes.models.io_k8s_api_core_v1_env_from_source import IoK8sApiCoreV1EnvFromSource
from benny_kubernetes.models.io_k8s_api_core_v1_env_var import IoK8sApiCoreV1EnvVar
from benny_kubernetes.models.io_k8s_api_core_v1_volume import IoK8sApiCoreV1Volume
from benny_kubernetes.models.io_k8s_api_core_v1_volume_mount import IoK8sApiCoreV1VolumeMount
from benny_kubernetes.models.io_k8s_apimachinery_pkg_apis_meta_v1_label_selector import IoK8sApimachineryPkgApisMetaV1LabelSelector

class IoK8sApiSettingsV1alpha1PodPresetSpec(BaseModel):
    """
    PodPresetSpec is a description of a pod preset.  # noqa: E501
    """
    env: Optional[conlist(IoK8sApiCoreV1EnvVar)] = Field(None, description="Env defines the collection of EnvVar to inject into containers.")
    env_from: Optional[conlist(IoK8sApiCoreV1EnvFromSource)] = Field(None, alias="envFrom", description="EnvFrom defines the collection of EnvFromSource to inject into containers.")
    selector: Optional[IoK8sApimachineryPkgApisMetaV1LabelSelector] = None
    volume_mounts: Optional[conlist(IoK8sApiCoreV1VolumeMount)] = Field(None, alias="volumeMounts", description="VolumeMounts defines the collection of VolumeMount to inject into containers.")
    volumes: Optional[conlist(IoK8sApiCoreV1Volume)] = Field(None, description="Volumes defines the collection of Volume to inject into the pod.")
    __properties = ["env", "envFrom", "selector", "volumeMounts", "volumes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiSettingsV1alpha1PodPresetSpec:
        """Create an instance of IoK8sApiSettingsV1alpha1PodPresetSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in env (list)
        _items = []
        if self.env:
            for _item in self.env:
                if _item:
                    _items.append(_item.to_dict())
            _dict['env'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in env_from (list)
        _items = []
        if self.env_from:
            for _item in self.env_from:
                if _item:
                    _items.append(_item.to_dict())
            _dict['envFrom'] = _items
        # override the default output from pydantic by calling `to_dict()` of selector
        if self.selector:
            _dict['selector'] = self.selector.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in volume_mounts (list)
        _items = []
        if self.volume_mounts:
            for _item in self.volume_mounts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['volumeMounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in volumes (list)
        _items = []
        if self.volumes:
            for _item in self.volumes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['volumes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiSettingsV1alpha1PodPresetSpec:
        """Create an instance of IoK8sApiSettingsV1alpha1PodPresetSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiSettingsV1alpha1PodPresetSpec.parse_obj(obj)

        _obj = IoK8sApiSettingsV1alpha1PodPresetSpec.parse_obj({
            "env": [IoK8sApiCoreV1EnvVar.from_dict(_item) for _item in obj.get("env")] if obj.get("env") is not None else None,
            "env_from": [IoK8sApiCoreV1EnvFromSource.from_dict(_item) for _item in obj.get("envFrom")] if obj.get("envFrom") is not None else None,
            "selector": IoK8sApimachineryPkgApisMetaV1LabelSelector.from_dict(obj.get("selector")) if obj.get("selector") is not None else None,
            "volume_mounts": [IoK8sApiCoreV1VolumeMount.from_dict(_item) for _item in obj.get("volumeMounts")] if obj.get("volumeMounts") is not None else None,
            "volumes": [IoK8sApiCoreV1Volume.from_dict(_item) for _item in obj.get("volumes")] if obj.get("volumes") is not None else None
        })
        return _obj


