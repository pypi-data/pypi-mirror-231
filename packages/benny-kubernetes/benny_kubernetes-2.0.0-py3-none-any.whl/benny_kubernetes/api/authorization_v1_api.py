# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictStr

from typing import Optional

from benny_kubernetes.models.io_k8s_api_authorization_v1_local_subject_access_review import IoK8sApiAuthorizationV1LocalSubjectAccessReview
from benny_kubernetes.models.io_k8s_api_authorization_v1_self_subject_access_review import IoK8sApiAuthorizationV1SelfSubjectAccessReview
from benny_kubernetes.models.io_k8s_api_authorization_v1_self_subject_rules_review import IoK8sApiAuthorizationV1SelfSubjectRulesReview
from benny_kubernetes.models.io_k8s_api_authorization_v1_subject_access_review import IoK8sApiAuthorizationV1SubjectAccessReview
from benny_kubernetes.models.io_k8s_apimachinery_pkg_apis_meta_v1_api_resource_list import IoK8sApimachineryPkgApisMetaV1APIResourceList

from benny_kubernetes.api_client import ApiClient
from benny_kubernetes.api_response import ApiResponse
from benny_kubernetes.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class AuthorizationV1Api:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_authorization_v1_namespaced_local_subject_access_review(self, namespace : Annotated[StrictStr, Field(..., description="object name and auth scope, such as for teams and projects")], body : IoK8sApiAuthorizationV1LocalSubjectAccessReview, dry_run : Annotated[Optional[StrictStr], Field(description="When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed")] = None, field_manager : Annotated[Optional[StrictStr], Field(description="fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.")] = None, pretty : Annotated[Optional[StrictStr], Field(description="If 'true', then the output is pretty printed.")] = None, **kwargs) -> IoK8sApiAuthorizationV1LocalSubjectAccessReview:  # noqa: E501
        """create_authorization_v1_namespaced_local_subject_access_review  # noqa: E501

        create a LocalSubjectAccessReview  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_authorization_v1_namespaced_local_subject_access_review(namespace, body, dry_run, field_manager, pretty, async_req=True)
        >>> result = thread.get()

        :param namespace: object name and auth scope, such as for teams and projects (required)
        :type namespace: str
        :param body: (required)
        :type body: IoK8sApiAuthorizationV1LocalSubjectAccessReview
        :param dry_run: When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
        :type dry_run: str
        :param field_manager: fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        :type field_manager: str
        :param pretty: If 'true', then the output is pretty printed.
        :type pretty: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: IoK8sApiAuthorizationV1LocalSubjectAccessReview
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_authorization_v1_namespaced_local_subject_access_review_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_authorization_v1_namespaced_local_subject_access_review_with_http_info(namespace, body, dry_run, field_manager, pretty, **kwargs)  # noqa: E501

    @validate_arguments
    def create_authorization_v1_namespaced_local_subject_access_review_with_http_info(self, namespace : Annotated[StrictStr, Field(..., description="object name and auth scope, such as for teams and projects")], body : IoK8sApiAuthorizationV1LocalSubjectAccessReview, dry_run : Annotated[Optional[StrictStr], Field(description="When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed")] = None, field_manager : Annotated[Optional[StrictStr], Field(description="fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.")] = None, pretty : Annotated[Optional[StrictStr], Field(description="If 'true', then the output is pretty printed.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """create_authorization_v1_namespaced_local_subject_access_review  # noqa: E501

        create a LocalSubjectAccessReview  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_authorization_v1_namespaced_local_subject_access_review_with_http_info(namespace, body, dry_run, field_manager, pretty, async_req=True)
        >>> result = thread.get()

        :param namespace: object name and auth scope, such as for teams and projects (required)
        :type namespace: str
        :param body: (required)
        :type body: IoK8sApiAuthorizationV1LocalSubjectAccessReview
        :param dry_run: When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
        :type dry_run: str
        :param field_manager: fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        :type field_manager: str
        :param pretty: If 'true', then the output is pretty printed.
        :type pretty: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(IoK8sApiAuthorizationV1LocalSubjectAccessReview, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'namespace',
            'body',
            'dry_run',
            'field_manager',
            'pretty'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_authorization_v1_namespaced_local_subject_access_review" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['namespace']:
            _path_params['namespace'] = _params['namespace']


        # process the query parameters
        _query_params = []
        if _params.get('dry_run') is not None:  # noqa: E501
            _query_params.append(('dryRun', _params['dry_run']))

        if _params.get('field_manager') is not None:  # noqa: E501
            _query_params.append(('fieldManager', _params['field_manager']))

        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerToken']  # noqa: E501

        _response_types_map = {
            '200': "IoK8sApiAuthorizationV1LocalSubjectAccessReview",
            '201': "IoK8sApiAuthorizationV1LocalSubjectAccessReview",
            '202': "IoK8sApiAuthorizationV1LocalSubjectAccessReview",
            '401': None,
        }

        return self.api_client.call_api(
            '/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_authorization_v1_self_subject_access_review(self, body : IoK8sApiAuthorizationV1SelfSubjectAccessReview, dry_run : Annotated[Optional[StrictStr], Field(description="When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed")] = None, field_manager : Annotated[Optional[StrictStr], Field(description="fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.")] = None, pretty : Annotated[Optional[StrictStr], Field(description="If 'true', then the output is pretty printed.")] = None, **kwargs) -> IoK8sApiAuthorizationV1SelfSubjectAccessReview:  # noqa: E501
        """create_authorization_v1_self_subject_access_review  # noqa: E501

        create a SelfSubjectAccessReview  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_authorization_v1_self_subject_access_review(body, dry_run, field_manager, pretty, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: IoK8sApiAuthorizationV1SelfSubjectAccessReview
        :param dry_run: When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
        :type dry_run: str
        :param field_manager: fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        :type field_manager: str
        :param pretty: If 'true', then the output is pretty printed.
        :type pretty: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: IoK8sApiAuthorizationV1SelfSubjectAccessReview
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_authorization_v1_self_subject_access_review_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_authorization_v1_self_subject_access_review_with_http_info(body, dry_run, field_manager, pretty, **kwargs)  # noqa: E501

    @validate_arguments
    def create_authorization_v1_self_subject_access_review_with_http_info(self, body : IoK8sApiAuthorizationV1SelfSubjectAccessReview, dry_run : Annotated[Optional[StrictStr], Field(description="When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed")] = None, field_manager : Annotated[Optional[StrictStr], Field(description="fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.")] = None, pretty : Annotated[Optional[StrictStr], Field(description="If 'true', then the output is pretty printed.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """create_authorization_v1_self_subject_access_review  # noqa: E501

        create a SelfSubjectAccessReview  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_authorization_v1_self_subject_access_review_with_http_info(body, dry_run, field_manager, pretty, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: IoK8sApiAuthorizationV1SelfSubjectAccessReview
        :param dry_run: When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
        :type dry_run: str
        :param field_manager: fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        :type field_manager: str
        :param pretty: If 'true', then the output is pretty printed.
        :type pretty: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(IoK8sApiAuthorizationV1SelfSubjectAccessReview, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'body',
            'dry_run',
            'field_manager',
            'pretty'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_authorization_v1_self_subject_access_review" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('dry_run') is not None:  # noqa: E501
            _query_params.append(('dryRun', _params['dry_run']))

        if _params.get('field_manager') is not None:  # noqa: E501
            _query_params.append(('fieldManager', _params['field_manager']))

        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerToken']  # noqa: E501

        _response_types_map = {
            '200': "IoK8sApiAuthorizationV1SelfSubjectAccessReview",
            '201': "IoK8sApiAuthorizationV1SelfSubjectAccessReview",
            '202': "IoK8sApiAuthorizationV1SelfSubjectAccessReview",
            '401': None,
        }

        return self.api_client.call_api(
            '/apis/authorization.k8s.io/v1/selfsubjectaccessreviews', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_authorization_v1_self_subject_rules_review(self, body : IoK8sApiAuthorizationV1SelfSubjectRulesReview, dry_run : Annotated[Optional[StrictStr], Field(description="When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed")] = None, field_manager : Annotated[Optional[StrictStr], Field(description="fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.")] = None, pretty : Annotated[Optional[StrictStr], Field(description="If 'true', then the output is pretty printed.")] = None, **kwargs) -> IoK8sApiAuthorizationV1SelfSubjectRulesReview:  # noqa: E501
        """create_authorization_v1_self_subject_rules_review  # noqa: E501

        create a SelfSubjectRulesReview  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_authorization_v1_self_subject_rules_review(body, dry_run, field_manager, pretty, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: IoK8sApiAuthorizationV1SelfSubjectRulesReview
        :param dry_run: When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
        :type dry_run: str
        :param field_manager: fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        :type field_manager: str
        :param pretty: If 'true', then the output is pretty printed.
        :type pretty: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: IoK8sApiAuthorizationV1SelfSubjectRulesReview
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_authorization_v1_self_subject_rules_review_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_authorization_v1_self_subject_rules_review_with_http_info(body, dry_run, field_manager, pretty, **kwargs)  # noqa: E501

    @validate_arguments
    def create_authorization_v1_self_subject_rules_review_with_http_info(self, body : IoK8sApiAuthorizationV1SelfSubjectRulesReview, dry_run : Annotated[Optional[StrictStr], Field(description="When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed")] = None, field_manager : Annotated[Optional[StrictStr], Field(description="fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.")] = None, pretty : Annotated[Optional[StrictStr], Field(description="If 'true', then the output is pretty printed.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """create_authorization_v1_self_subject_rules_review  # noqa: E501

        create a SelfSubjectRulesReview  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_authorization_v1_self_subject_rules_review_with_http_info(body, dry_run, field_manager, pretty, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: IoK8sApiAuthorizationV1SelfSubjectRulesReview
        :param dry_run: When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
        :type dry_run: str
        :param field_manager: fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        :type field_manager: str
        :param pretty: If 'true', then the output is pretty printed.
        :type pretty: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(IoK8sApiAuthorizationV1SelfSubjectRulesReview, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'body',
            'dry_run',
            'field_manager',
            'pretty'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_authorization_v1_self_subject_rules_review" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('dry_run') is not None:  # noqa: E501
            _query_params.append(('dryRun', _params['dry_run']))

        if _params.get('field_manager') is not None:  # noqa: E501
            _query_params.append(('fieldManager', _params['field_manager']))

        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerToken']  # noqa: E501

        _response_types_map = {
            '200': "IoK8sApiAuthorizationV1SelfSubjectRulesReview",
            '201': "IoK8sApiAuthorizationV1SelfSubjectRulesReview",
            '202': "IoK8sApiAuthorizationV1SelfSubjectRulesReview",
            '401': None,
        }

        return self.api_client.call_api(
            '/apis/authorization.k8s.io/v1/selfsubjectrulesreviews', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_authorization_v1_subject_access_review(self, body : IoK8sApiAuthorizationV1SubjectAccessReview, dry_run : Annotated[Optional[StrictStr], Field(description="When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed")] = None, field_manager : Annotated[Optional[StrictStr], Field(description="fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.")] = None, pretty : Annotated[Optional[StrictStr], Field(description="If 'true', then the output is pretty printed.")] = None, **kwargs) -> IoK8sApiAuthorizationV1SubjectAccessReview:  # noqa: E501
        """create_authorization_v1_subject_access_review  # noqa: E501

        create a SubjectAccessReview  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_authorization_v1_subject_access_review(body, dry_run, field_manager, pretty, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: IoK8sApiAuthorizationV1SubjectAccessReview
        :param dry_run: When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
        :type dry_run: str
        :param field_manager: fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        :type field_manager: str
        :param pretty: If 'true', then the output is pretty printed.
        :type pretty: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: IoK8sApiAuthorizationV1SubjectAccessReview
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_authorization_v1_subject_access_review_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_authorization_v1_subject_access_review_with_http_info(body, dry_run, field_manager, pretty, **kwargs)  # noqa: E501

    @validate_arguments
    def create_authorization_v1_subject_access_review_with_http_info(self, body : IoK8sApiAuthorizationV1SubjectAccessReview, dry_run : Annotated[Optional[StrictStr], Field(description="When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed")] = None, field_manager : Annotated[Optional[StrictStr], Field(description="fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.")] = None, pretty : Annotated[Optional[StrictStr], Field(description="If 'true', then the output is pretty printed.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """create_authorization_v1_subject_access_review  # noqa: E501

        create a SubjectAccessReview  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_authorization_v1_subject_access_review_with_http_info(body, dry_run, field_manager, pretty, async_req=True)
        >>> result = thread.get()

        :param body: (required)
        :type body: IoK8sApiAuthorizationV1SubjectAccessReview
        :param dry_run: When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed
        :type dry_run: str
        :param field_manager: fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.
        :type field_manager: str
        :param pretty: If 'true', then the output is pretty printed.
        :type pretty: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(IoK8sApiAuthorizationV1SubjectAccessReview, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'body',
            'dry_run',
            'field_manager',
            'pretty'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_authorization_v1_subject_access_review" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('dry_run') is not None:  # noqa: E501
            _query_params.append(('dryRun', _params['dry_run']))

        if _params.get('field_manager') is not None:  # noqa: E501
            _query_params.append(('fieldManager', _params['field_manager']))

        if _params.get('pretty') is not None:  # noqa: E501
            _query_params.append(('pretty', _params['pretty']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerToken']  # noqa: E501

        _response_types_map = {
            '200': "IoK8sApiAuthorizationV1SubjectAccessReview",
            '201': "IoK8sApiAuthorizationV1SubjectAccessReview",
            '202': "IoK8sApiAuthorizationV1SubjectAccessReview",
            '401': None,
        }

        return self.api_client.call_api(
            '/apis/authorization.k8s.io/v1/subjectaccessreviews', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_authorization_v1_api_resources(self, **kwargs) -> IoK8sApimachineryPkgApisMetaV1APIResourceList:  # noqa: E501
        """get_authorization_v1_api_resources  # noqa: E501

        get available resources  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_authorization_v1_api_resources(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: IoK8sApimachineryPkgApisMetaV1APIResourceList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_authorization_v1_api_resources_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_authorization_v1_api_resources_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def get_authorization_v1_api_resources_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """get_authorization_v1_api_resources  # noqa: E501

        get available resources  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_authorization_v1_api_resources_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(IoK8sApimachineryPkgApisMetaV1APIResourceList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_authorization_v1_api_resources" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/yaml', 'application/vnd.kubernetes.protobuf'])  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerToken']  # noqa: E501

        _response_types_map = {
            '200': "IoK8sApimachineryPkgApisMetaV1APIResourceList",
            '401': None,
        }

        return self.api_client.call_api(
            '/apis/authorization.k8s.io/v1/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
