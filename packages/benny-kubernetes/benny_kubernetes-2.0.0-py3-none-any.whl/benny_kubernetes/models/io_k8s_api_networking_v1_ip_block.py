# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class IoK8sApiNetworkingV1IPBlock(BaseModel):
    """
    IPBlock describes a particular CIDR (Ex. \"192.168.1.1/24\",\"2001:db9::/64\") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.  # noqa: E501
    """
    cidr: StrictStr = Field(..., description="CIDR is a string representing the IP Block Valid examples are \"192.168.1.1/24\" or \"2001:db9::/64\"")
    var_except: Optional[conlist(StrictStr)] = Field(None, alias="except", description="Except is a slice of CIDRs that should not be included within an IP Block Valid examples are \"192.168.1.1/24\" or \"2001:db9::/64\" Except values will be rejected if they are outside the CIDR range")
    __properties = ["cidr", "except"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiNetworkingV1IPBlock:
        """Create an instance of IoK8sApiNetworkingV1IPBlock from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiNetworkingV1IPBlock:
        """Create an instance of IoK8sApiNetworkingV1IPBlock from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiNetworkingV1IPBlock.parse_obj(obj)

        _obj = IoK8sApiNetworkingV1IPBlock.parse_obj({
            "cidr": obj.get("cidr"),
            "var_except": obj.get("except")
        })
        return _obj


