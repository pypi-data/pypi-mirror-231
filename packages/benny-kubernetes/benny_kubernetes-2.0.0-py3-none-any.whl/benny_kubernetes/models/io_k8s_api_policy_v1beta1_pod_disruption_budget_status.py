# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictInt

class IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus(BaseModel):
    """
    PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.  # noqa: E501
    """
    current_healthy: StrictInt = Field(..., alias="currentHealthy", description="current number of healthy pods")
    desired_healthy: StrictInt = Field(..., alias="desiredHealthy", description="minimum desired number of healthy pods")
    disrupted_pods: Optional[Dict[str, datetime]] = Field(None, alias="disruptedPods", description="DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.")
    disruptions_allowed: StrictInt = Field(..., alias="disruptionsAllowed", description="Number of pod disruptions that are currently allowed.")
    expected_pods: StrictInt = Field(..., alias="expectedPods", description="total number of pods counted by this disruption budget")
    observed_generation: Optional[StrictInt] = Field(None, alias="observedGeneration", description="Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.")
    __properties = ["currentHealthy", "desiredHealthy", "disruptedPods", "disruptionsAllowed", "expectedPods", "observedGeneration"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus:
        """Create an instance of IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus:
        """Create an instance of IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.parse_obj(obj)

        _obj = IoK8sApiPolicyV1beta1PodDisruptionBudgetStatus.parse_obj({
            "current_healthy": obj.get("currentHealthy"),
            "desired_healthy": obj.get("desiredHealthy"),
            "disrupted_pods": obj.get("disruptedPods"),
            "disruptions_allowed": obj.get("disruptionsAllowed"),
            "expected_pods": obj.get("expectedPods"),
            "observed_generation": obj.get("observedGeneration")
        })
        return _obj


