# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from benny_kubernetes.models.io_k8s_api_policy_v1beta1_id_range import IoK8sApiPolicyV1beta1IDRange

class IoK8sApiPolicyV1beta1FSGroupStrategyOptions(BaseModel):
    """
    FSGroupStrategyOptions defines the strategy type and options used to create the strategy.  # noqa: E501
    """
    ranges: Optional[conlist(IoK8sApiPolicyV1beta1IDRange)] = Field(None, description="ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end. Required for MustRunAs.")
    rule: Optional[StrictStr] = Field(None, description="rule is the strategy that will dictate what FSGroup is used in the SecurityContext.")
    __properties = ["ranges", "rule"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiPolicyV1beta1FSGroupStrategyOptions:
        """Create an instance of IoK8sApiPolicyV1beta1FSGroupStrategyOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in ranges (list)
        _items = []
        if self.ranges:
            for _item in self.ranges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ranges'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiPolicyV1beta1FSGroupStrategyOptions:
        """Create an instance of IoK8sApiPolicyV1beta1FSGroupStrategyOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiPolicyV1beta1FSGroupStrategyOptions.parse_obj(obj)

        _obj = IoK8sApiPolicyV1beta1FSGroupStrategyOptions.parse_obj({
            "ranges": [IoK8sApiPolicyV1beta1IDRange.from_dict(_item) for _item in obj.get("ranges")] if obj.get("ranges") is not None else None,
            "rule": obj.get("rule")
        })
        return _obj


