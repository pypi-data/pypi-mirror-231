# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, conlist
from benny_kubernetes.models.io_k8s_api_batch_v1_job_condition import IoK8sApiBatchV1JobCondition

class IoK8sApiBatchV1JobStatus(BaseModel):
    """
    JobStatus represents the current state of a Job.  # noqa: E501
    """
    active: Optional[StrictInt] = Field(None, description="The number of actively running pods.")
    completion_time: Optional[datetime] = Field(None, alias="completionTime", description="Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.")
    conditions: Optional[conlist(IoK8sApiBatchV1JobCondition)] = Field(None, description="The latest available observations of an object's current state. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/")
    failed: Optional[StrictInt] = Field(None, description="The number of pods which reached phase Failed.")
    start_time: Optional[datetime] = Field(None, alias="startTime", description="Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.")
    succeeded: Optional[StrictInt] = Field(None, description="The number of pods which reached phase Succeeded.")
    __properties = ["active", "completionTime", "conditions", "failed", "startTime", "succeeded"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiBatchV1JobStatus:
        """Create an instance of IoK8sApiBatchV1JobStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item in self.conditions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['conditions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiBatchV1JobStatus:
        """Create an instance of IoK8sApiBatchV1JobStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiBatchV1JobStatus.parse_obj(obj)

        _obj = IoK8sApiBatchV1JobStatus.parse_obj({
            "active": obj.get("active"),
            "completion_time": obj.get("completionTime"),
            "conditions": [IoK8sApiBatchV1JobCondition.from_dict(_item) for _item in obj.get("conditions")] if obj.get("conditions") is not None else None,
            "failed": obj.get("failed"),
            "start_time": obj.get("startTime"),
            "succeeded": obj.get("succeeded")
        })
        return _obj


