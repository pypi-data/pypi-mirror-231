# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from benny_kubernetes.models.io_k8s_api_core_v1_key_to_path import IoK8sApiCoreV1KeyToPath

class IoK8sApiCoreV1SecretVolumeSource(BaseModel):
    """
    Adapts a Secret into a volume.  The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.  # noqa: E501
    """
    default_mode: Optional[StrictInt] = Field(None, alias="defaultMode", description="Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.")
    items: Optional[conlist(IoK8sApiCoreV1KeyToPath)] = Field(None, description="If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.")
    optional: Optional[StrictBool] = Field(None, description="Specify whether the Secret or its keys must be defined")
    secret_name: Optional[StrictStr] = Field(None, alias="secretName", description="Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret")
    __properties = ["defaultMode", "items", "optional", "secretName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiCoreV1SecretVolumeSource:
        """Create an instance of IoK8sApiCoreV1SecretVolumeSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiCoreV1SecretVolumeSource:
        """Create an instance of IoK8sApiCoreV1SecretVolumeSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiCoreV1SecretVolumeSource.parse_obj(obj)

        _obj = IoK8sApiCoreV1SecretVolumeSource.parse_obj({
            "default_mode": obj.get("defaultMode"),
            "items": [IoK8sApiCoreV1KeyToPath.from_dict(_item) for _item in obj.get("items")] if obj.get("items") is not None else None,
            "optional": obj.get("optional"),
            "secret_name": obj.get("secretName")
        })
        return _obj


