# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from benny_kubernetes.models.io_k8s_apiextensions_apiserver_pkg_apis_apiextensions_v1beta1_custom_resource_column_definition import IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceColumnDefinition
from benny_kubernetes.models.io_k8s_apiextensions_apiserver_pkg_apis_apiextensions_v1beta1_custom_resource_conversion import IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceConversion
from benny_kubernetes.models.io_k8s_apiextensions_apiserver_pkg_apis_apiextensions_v1beta1_custom_resource_definition_names import IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames
from benny_kubernetes.models.io_k8s_apiextensions_apiserver_pkg_apis_apiextensions_v1beta1_custom_resource_definition_version import IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionVersion
from benny_kubernetes.models.io_k8s_apiextensions_apiserver_pkg_apis_apiextensions_v1beta1_custom_resource_subresources import IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceSubresources
from benny_kubernetes.models.io_k8s_apiextensions_apiserver_pkg_apis_apiextensions_v1beta1_custom_resource_validation import IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceValidation

class IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec(BaseModel):
    """
    CustomResourceDefinitionSpec describes how a user wants their resource to appear  # noqa: E501
    """
    additional_printer_columns: Optional[conlist(IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceColumnDefinition)] = Field(None, alias="additionalPrinterColumns", description="additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If present, this field configures columns for all versions. Top-level and per-version columns are mutually exclusive. If no top-level or per-version columns are specified, a single column displaying the age of the custom resource is used.")
    conversion: Optional[IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceConversion] = None
    group: StrictStr = Field(..., description="group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).")
    names: IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames = Field(...)
    preserve_unknown_fields: Optional[StrictBool] = Field(None, alias="preserveUnknownFields", description="preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. If false, schemas must be defined for all versions. Defaults to true in v1beta for backwards compatibility. Deprecated: will be required to be false in v1. Preservation of unknown fields can be specified in the validation schema using the `x-kubernetes-preserve-unknown-fields: true` extension. See https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#pruning-versus-preserving-unknown-fields for details.")
    scope: StrictStr = Field(..., description="scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`. Default is `Namespaced`.")
    subresources: Optional[IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceSubresources] = None
    validation: Optional[IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceValidation] = None
    version: Optional[StrictStr] = Field(None, description="version is the API version of the defined custom resource. The custom resources are served under `/apis/<group>/<version>/...`. Must match the name of the first item in the `versions` list if `version` and `versions` are both specified. Optional if `versions` is specified. Deprecated: use `versions` instead.")
    versions: Optional[conlist(IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionVersion)] = Field(None, description="versions is the list of all API versions of the defined custom resource. Optional if `version` is specified. The name of the first item in the `versions` list must match the `version` field if `version` and `versions` are both specified. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is \"kube-like\", it will sort above non \"kube-like\" version strings, which are ordered lexicographically. \"Kube-like\" versions start with a \"v\", then are followed by a number (the major version), then optionally the string \"alpha\" or \"beta\" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.")
    __properties = ["additionalPrinterColumns", "conversion", "group", "names", "preserveUnknownFields", "scope", "subresources", "validation", "version", "versions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec:
        """Create an instance of IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in additional_printer_columns (list)
        _items = []
        if self.additional_printer_columns:
            for _item in self.additional_printer_columns:
                if _item:
                    _items.append(_item.to_dict())
            _dict['additionalPrinterColumns'] = _items
        # override the default output from pydantic by calling `to_dict()` of conversion
        if self.conversion:
            _dict['conversion'] = self.conversion.to_dict()
        # override the default output from pydantic by calling `to_dict()` of names
        if self.names:
            _dict['names'] = self.names.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subresources
        if self.subresources:
            _dict['subresources'] = self.subresources.to_dict()
        # override the default output from pydantic by calling `to_dict()` of validation
        if self.validation:
            _dict['validation'] = self.validation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in versions (list)
        _items = []
        if self.versions:
            for _item in self.versions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['versions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec:
        """Create an instance of IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.parse_obj(obj)

        _obj = IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionSpec.parse_obj({
            "additional_printer_columns": [IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceColumnDefinition.from_dict(_item) for _item in obj.get("additionalPrinterColumns")] if obj.get("additionalPrinterColumns") is not None else None,
            "conversion": IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceConversion.from_dict(obj.get("conversion")) if obj.get("conversion") is not None else None,
            "group": obj.get("group"),
            "names": IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionNames.from_dict(obj.get("names")) if obj.get("names") is not None else None,
            "preserve_unknown_fields": obj.get("preserveUnknownFields"),
            "scope": obj.get("scope"),
            "subresources": IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceSubresources.from_dict(obj.get("subresources")) if obj.get("subresources") is not None else None,
            "validation": IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceValidation.from_dict(obj.get("validation")) if obj.get("validation") is not None else None,
            "version": obj.get("version"),
            "versions": [IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1CustomResourceDefinitionVersion.from_dict(_item) for _item in obj.get("versions")] if obj.get("versions") is not None else None
        })
        return _obj


