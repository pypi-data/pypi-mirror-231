# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt
from benny_kubernetes.models.io_k8s_api_flowcontrol_v1alpha1_limit_response import IoK8sApiFlowcontrolV1alpha1LimitResponse

class IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration(BaseModel):
    """
    LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:  * How are requests for this priority level limited?  * What should be done with requests that exceed the limit?  # noqa: E501
    """
    assured_concurrency_shares: Optional[StrictInt] = Field(None, alias="assuredConcurrencyShares", description="`assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:              ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )  bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.")
    limit_response: Optional[IoK8sApiFlowcontrolV1alpha1LimitResponse] = Field(None, alias="limitResponse")
    __properties = ["assuredConcurrencyShares", "limitResponse"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration:
        """Create an instance of IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of limit_response
        if self.limit_response:
            _dict['limitResponse'] = self.limit_response.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration:
        """Create an instance of IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration.parse_obj(obj)

        _obj = IoK8sApiFlowcontrolV1alpha1LimitedPriorityLevelConfiguration.parse_obj({
            "assured_concurrency_shares": obj.get("assuredConcurrencyShares"),
            "limit_response": IoK8sApiFlowcontrolV1alpha1LimitResponse.from_dict(obj.get("limitResponse")) if obj.get("limitResponse") is not None else None
        })
        return _obj


