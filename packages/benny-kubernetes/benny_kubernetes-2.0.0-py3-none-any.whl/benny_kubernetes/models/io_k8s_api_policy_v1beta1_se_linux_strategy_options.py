# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from benny_kubernetes.models.io_k8s_api_core_v1_se_linux_options import IoK8sApiCoreV1SELinuxOptions

class IoK8sApiPolicyV1beta1SELinuxStrategyOptions(BaseModel):
    """
    SELinuxStrategyOptions defines the strategy type and any options used to create the strategy.  # noqa: E501
    """
    rule: StrictStr = Field(..., description="rule is the strategy that will dictate the allowable labels that may be set.")
    se_linux_options: Optional[IoK8sApiCoreV1SELinuxOptions] = Field(None, alias="seLinuxOptions")
    __properties = ["rule", "seLinuxOptions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiPolicyV1beta1SELinuxStrategyOptions:
        """Create an instance of IoK8sApiPolicyV1beta1SELinuxStrategyOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of se_linux_options
        if self.se_linux_options:
            _dict['seLinuxOptions'] = self.se_linux_options.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiPolicyV1beta1SELinuxStrategyOptions:
        """Create an instance of IoK8sApiPolicyV1beta1SELinuxStrategyOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiPolicyV1beta1SELinuxStrategyOptions.parse_obj(obj)

        _obj = IoK8sApiPolicyV1beta1SELinuxStrategyOptions.parse_obj({
            "rule": obj.get("rule"),
            "se_linux_options": IoK8sApiCoreV1SELinuxOptions.from_dict(obj.get("seLinuxOptions")) if obj.get("seLinuxOptions") is not None else None
        })
        return _obj


