# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from benny_kubernetes.models.io_k8s_api_core_v1_handler import IoK8sApiCoreV1Handler

class IoK8sApiCoreV1Lifecycle(BaseModel):
    """
    Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.  # noqa: E501
    """
    post_start: Optional[IoK8sApiCoreV1Handler] = Field(None, alias="postStart")
    pre_stop: Optional[IoK8sApiCoreV1Handler] = Field(None, alias="preStop")
    __properties = ["postStart", "preStop"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiCoreV1Lifecycle:
        """Create an instance of IoK8sApiCoreV1Lifecycle from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of post_start
        if self.post_start:
            _dict['postStart'] = self.post_start.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pre_stop
        if self.pre_stop:
            _dict['preStop'] = self.pre_stop.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiCoreV1Lifecycle:
        """Create an instance of IoK8sApiCoreV1Lifecycle from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiCoreV1Lifecycle.parse_obj(obj)

        _obj = IoK8sApiCoreV1Lifecycle.parse_obj({
            "post_start": IoK8sApiCoreV1Handler.from_dict(obj.get("postStart")) if obj.get("postStart") is not None else None,
            "pre_stop": IoK8sApiCoreV1Handler.from_dict(obj.get("preStop")) if obj.get("preStop") is not None else None
        })
        return _obj


