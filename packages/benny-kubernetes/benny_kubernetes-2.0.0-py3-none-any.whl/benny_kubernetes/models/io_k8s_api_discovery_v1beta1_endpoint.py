# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from benny_kubernetes.models.io_k8s_api_core_v1_object_reference import IoK8sApiCoreV1ObjectReference
from benny_kubernetes.models.io_k8s_api_discovery_v1beta1_endpoint_conditions import IoK8sApiDiscoveryV1beta1EndpointConditions

class IoK8sApiDiscoveryV1beta1Endpoint(BaseModel):
    """
    Endpoint represents a single logical \"backend\" implementing a service.  # noqa: E501
    """
    addresses: conlist(StrictStr) = Field(..., description="addresses of this endpoint. The contents of this field are interpreted according to the corresponding EndpointSlice addressType field. Consumers must handle different types of addresses in the context of their own capabilities. This must contain at least one address but no more than 100.")
    conditions: Optional[IoK8sApiDiscoveryV1beta1EndpointConditions] = None
    hostname: Optional[StrictStr] = Field(None, description="hostname of this endpoint. This field may be used by consumers of endpoints to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname should be considered fungible (e.g. multiple A values in DNS). Must pass DNS Label (RFC 1123) validation.")
    target_ref: Optional[IoK8sApiCoreV1ObjectReference] = Field(None, alias="targetRef")
    topology: Optional[Dict[str, StrictStr]] = Field(None, description="topology contains arbitrary topology information associated with the endpoint. These key/value pairs must conform with the label format. https://kubernetes.io/docs/concepts/overview/working-with-objects/labels Topology may include a maximum of 16 key/value pairs. This includes, but is not limited to the following well known keys: * kubernetes.io/hostname: the value indicates the hostname of the node   where the endpoint is located. This should match the corresponding   node label. * topology.kubernetes.io/zone: the value indicates the zone where the   endpoint is located. This should match the corresponding node label. * topology.kubernetes.io/region: the value indicates the region where the   endpoint is located. This should match the corresponding node label.")
    __properties = ["addresses", "conditions", "hostname", "targetRef", "topology"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiDiscoveryV1beta1Endpoint:
        """Create an instance of IoK8sApiDiscoveryV1beta1Endpoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of conditions
        if self.conditions:
            _dict['conditions'] = self.conditions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_ref
        if self.target_ref:
            _dict['targetRef'] = self.target_ref.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiDiscoveryV1beta1Endpoint:
        """Create an instance of IoK8sApiDiscoveryV1beta1Endpoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiDiscoveryV1beta1Endpoint.parse_obj(obj)

        _obj = IoK8sApiDiscoveryV1beta1Endpoint.parse_obj({
            "addresses": obj.get("addresses"),
            "conditions": IoK8sApiDiscoveryV1beta1EndpointConditions.from_dict(obj.get("conditions")) if obj.get("conditions") is not None else None,
            "hostname": obj.get("hostname"),
            "target_ref": IoK8sApiCoreV1ObjectReference.from_dict(obj.get("targetRef")) if obj.get("targetRef") is not None else None,
            "topology": obj.get("topology")
        })
        return _obj


