# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition(BaseModel):
    """
    IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition
    """
    last_update_time: Optional[datetime] = Field(None, alias="lastUpdateTime", description="Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.")
    message: Optional[StrictStr] = Field(None, description="human readable message with details about the request state")
    reason: Optional[StrictStr] = Field(None, description="brief reason for the request state")
    type: StrictStr = Field(..., description="request approval state, currently Approved or Denied.")
    __properties = ["lastUpdateTime", "message", "reason", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition:
        """Create an instance of IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition:
        """Create an instance of IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition.parse_obj(obj)

        _obj = IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition.parse_obj({
            "last_update_time": obj.get("lastUpdateTime"),
            "message": obj.get("message"),
            "reason": obj.get("reason"),
            "type": obj.get("type")
        })
        return _obj


