# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from benny_kubernetes.models.io_k8s_api_core_v1_pod_spec import IoK8sApiCoreV1PodSpec
from benny_kubernetes.models.io_k8s_apimachinery_pkg_apis_meta_v1_object_meta import IoK8sApimachineryPkgApisMetaV1ObjectMeta

class IoK8sApiCoreV1PodTemplateSpec(BaseModel):
    """
    PodTemplateSpec describes the data a pod should have when created from a template  # noqa: E501
    """
    metadata: Optional[IoK8sApimachineryPkgApisMetaV1ObjectMeta] = None
    spec: Optional[IoK8sApiCoreV1PodSpec] = None
    __properties = ["metadata", "spec"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiCoreV1PodTemplateSpec:
        """Create an instance of IoK8sApiCoreV1PodTemplateSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of spec
        if self.spec:
            _dict['spec'] = self.spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiCoreV1PodTemplateSpec:
        """Create an instance of IoK8sApiCoreV1PodTemplateSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiCoreV1PodTemplateSpec.parse_obj(obj)

        _obj = IoK8sApiCoreV1PodTemplateSpec.parse_obj({
            "metadata": IoK8sApimachineryPkgApisMetaV1ObjectMeta.from_dict(obj.get("metadata")) if obj.get("metadata") is not None else None,
            "spec": IoK8sApiCoreV1PodSpec.from_dict(obj.get("spec")) if obj.get("spec") is not None else None
        })
        return _obj


