# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from benny_kubernetes.models.io_k8s_api_core_v1_persistent_volume_spec import IoK8sApiCoreV1PersistentVolumeSpec

class IoK8sApiStorageV1alpha1VolumeAttachmentSource(BaseModel):
    """
    VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.  # noqa: E501
    """
    inline_volume_spec: Optional[IoK8sApiCoreV1PersistentVolumeSpec] = Field(None, alias="inlineVolumeSpec")
    persistent_volume_name: Optional[StrictStr] = Field(None, alias="persistentVolumeName", description="Name of the persistent volume to attach.")
    __properties = ["inlineVolumeSpec", "persistentVolumeName"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiStorageV1alpha1VolumeAttachmentSource:
        """Create an instance of IoK8sApiStorageV1alpha1VolumeAttachmentSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of inline_volume_spec
        if self.inline_volume_spec:
            _dict['inlineVolumeSpec'] = self.inline_volume_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiStorageV1alpha1VolumeAttachmentSource:
        """Create an instance of IoK8sApiStorageV1alpha1VolumeAttachmentSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiStorageV1alpha1VolumeAttachmentSource.parse_obj(obj)

        _obj = IoK8sApiStorageV1alpha1VolumeAttachmentSource.parse_obj({
            "inline_volume_spec": IoK8sApiCoreV1PersistentVolumeSpec.from_dict(obj.get("inlineVolumeSpec")) if obj.get("inlineVolumeSpec") is not None else None,
            "persistent_volume_name": obj.get("persistentVolumeName")
        })
        return _obj


