# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from benny_kubernetes.models.io_k8s_api_policy_v1beta1_allowed_csi_driver import IoK8sApiPolicyV1beta1AllowedCSIDriver
from benny_kubernetes.models.io_k8s_api_policy_v1beta1_allowed_flex_volume import IoK8sApiPolicyV1beta1AllowedFlexVolume
from benny_kubernetes.models.io_k8s_api_policy_v1beta1_allowed_host_path import IoK8sApiPolicyV1beta1AllowedHostPath
from benny_kubernetes.models.io_k8s_api_policy_v1beta1_fs_group_strategy_options import IoK8sApiPolicyV1beta1FSGroupStrategyOptions
from benny_kubernetes.models.io_k8s_api_policy_v1beta1_host_port_range import IoK8sApiPolicyV1beta1HostPortRange
from benny_kubernetes.models.io_k8s_api_policy_v1beta1_run_as_group_strategy_options import IoK8sApiPolicyV1beta1RunAsGroupStrategyOptions
from benny_kubernetes.models.io_k8s_api_policy_v1beta1_run_as_user_strategy_options import IoK8sApiPolicyV1beta1RunAsUserStrategyOptions
from benny_kubernetes.models.io_k8s_api_policy_v1beta1_runtime_class_strategy_options import IoK8sApiPolicyV1beta1RuntimeClassStrategyOptions
from benny_kubernetes.models.io_k8s_api_policy_v1beta1_se_linux_strategy_options import IoK8sApiPolicyV1beta1SELinuxStrategyOptions
from benny_kubernetes.models.io_k8s_api_policy_v1beta1_supplemental_groups_strategy_options import IoK8sApiPolicyV1beta1SupplementalGroupsStrategyOptions

class IoK8sApiPolicyV1beta1PodSecurityPolicySpec(BaseModel):
    """
    PodSecurityPolicySpec defines the policy enforced.  # noqa: E501
    """
    allow_privilege_escalation: Optional[StrictBool] = Field(None, alias="allowPrivilegeEscalation", description="allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.")
    allowed_csi_drivers: Optional[conlist(IoK8sApiPolicyV1beta1AllowedCSIDriver)] = Field(None, alias="allowedCSIDrivers", description="AllowedCSIDrivers is a whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is an alpha field, and is only honored if the API server enables the CSIInlineVolume feature gate.")
    allowed_capabilities: Optional[conlist(StrictStr)] = Field(None, alias="allowedCapabilities", description="allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities.")
    allowed_flex_volumes: Optional[conlist(IoK8sApiPolicyV1beta1AllowedFlexVolume)] = Field(None, alias="allowedFlexVolumes", description="allowedFlexVolumes is a whitelist of allowed Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the \"volumes\" field.")
    allowed_host_paths: Optional[conlist(IoK8sApiPolicyV1beta1AllowedHostPath)] = Field(None, alias="allowedHostPaths", description="allowedHostPaths is a white list of allowed host paths. Empty indicates that all host paths may be used.")
    allowed_proc_mount_types: Optional[conlist(StrictStr)] = Field(None, alias="allowedProcMountTypes", description="AllowedProcMountTypes is a whitelist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.")
    allowed_unsafe_sysctls: Optional[conlist(StrictStr)] = Field(None, alias="allowedUnsafeSysctls", description="allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in \"*\" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection.  Examples: e.g. \"foo/*\" allows \"foo/bar\", \"foo/baz\", etc. e.g. \"foo.*\" allows \"foo.bar\", \"foo.baz\", etc.")
    default_add_capabilities: Optional[conlist(StrictStr)] = Field(None, alias="defaultAddCapabilities", description="defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.")
    default_allow_privilege_escalation: Optional[StrictBool] = Field(None, alias="defaultAllowPrivilegeEscalation", description="defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.")
    forbidden_sysctls: Optional[conlist(StrictStr)] = Field(None, alias="forbiddenSysctls", description="forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in \"*\" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.  Examples: e.g. \"foo/*\" forbids \"foo/bar\", \"foo/baz\", etc. e.g. \"foo.*\" forbids \"foo.bar\", \"foo.baz\", etc.")
    fs_group: IoK8sApiPolicyV1beta1FSGroupStrategyOptions = Field(..., alias="fsGroup")
    host_ipc: Optional[StrictBool] = Field(None, alias="hostIPC", description="hostIPC determines if the policy allows the use of HostIPC in the pod spec.")
    host_network: Optional[StrictBool] = Field(None, alias="hostNetwork", description="hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.")
    host_pid: Optional[StrictBool] = Field(None, alias="hostPID", description="hostPID determines if the policy allows the use of HostPID in the pod spec.")
    host_ports: Optional[conlist(IoK8sApiPolicyV1beta1HostPortRange)] = Field(None, alias="hostPorts", description="hostPorts determines which host port ranges are allowed to be exposed.")
    privileged: Optional[StrictBool] = Field(None, description="privileged determines if a pod can request to be run as privileged.")
    read_only_root_filesystem: Optional[StrictBool] = Field(None, alias="readOnlyRootFilesystem", description="readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.")
    required_drop_capabilities: Optional[conlist(StrictStr)] = Field(None, alias="requiredDropCapabilities", description="requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.")
    run_as_group: Optional[IoK8sApiPolicyV1beta1RunAsGroupStrategyOptions] = Field(None, alias="runAsGroup")
    run_as_user: IoK8sApiPolicyV1beta1RunAsUserStrategyOptions = Field(..., alias="runAsUser")
    runtime_class: Optional[IoK8sApiPolicyV1beta1RuntimeClassStrategyOptions] = Field(None, alias="runtimeClass")
    se_linux: IoK8sApiPolicyV1beta1SELinuxStrategyOptions = Field(..., alias="seLinux")
    supplemental_groups: IoK8sApiPolicyV1beta1SupplementalGroupsStrategyOptions = Field(..., alias="supplementalGroups")
    volumes: Optional[conlist(StrictStr)] = Field(None, description="volumes is a white list of allowed volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use '*'.")
    __properties = ["allowPrivilegeEscalation", "allowedCSIDrivers", "allowedCapabilities", "allowedFlexVolumes", "allowedHostPaths", "allowedProcMountTypes", "allowedUnsafeSysctls", "defaultAddCapabilities", "defaultAllowPrivilegeEscalation", "forbiddenSysctls", "fsGroup", "hostIPC", "hostNetwork", "hostPID", "hostPorts", "privileged", "readOnlyRootFilesystem", "requiredDropCapabilities", "runAsGroup", "runAsUser", "runtimeClass", "seLinux", "supplementalGroups", "volumes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiPolicyV1beta1PodSecurityPolicySpec:
        """Create an instance of IoK8sApiPolicyV1beta1PodSecurityPolicySpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in allowed_csi_drivers (list)
        _items = []
        if self.allowed_csi_drivers:
            for _item in self.allowed_csi_drivers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['allowedCSIDrivers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in allowed_flex_volumes (list)
        _items = []
        if self.allowed_flex_volumes:
            for _item in self.allowed_flex_volumes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['allowedFlexVolumes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in allowed_host_paths (list)
        _items = []
        if self.allowed_host_paths:
            for _item in self.allowed_host_paths:
                if _item:
                    _items.append(_item.to_dict())
            _dict['allowedHostPaths'] = _items
        # override the default output from pydantic by calling `to_dict()` of fs_group
        if self.fs_group:
            _dict['fsGroup'] = self.fs_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in host_ports (list)
        _items = []
        if self.host_ports:
            for _item in self.host_ports:
                if _item:
                    _items.append(_item.to_dict())
            _dict['hostPorts'] = _items
        # override the default output from pydantic by calling `to_dict()` of run_as_group
        if self.run_as_group:
            _dict['runAsGroup'] = self.run_as_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of run_as_user
        if self.run_as_user:
            _dict['runAsUser'] = self.run_as_user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of runtime_class
        if self.runtime_class:
            _dict['runtimeClass'] = self.runtime_class.to_dict()
        # override the default output from pydantic by calling `to_dict()` of se_linux
        if self.se_linux:
            _dict['seLinux'] = self.se_linux.to_dict()
        # override the default output from pydantic by calling `to_dict()` of supplemental_groups
        if self.supplemental_groups:
            _dict['supplementalGroups'] = self.supplemental_groups.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiPolicyV1beta1PodSecurityPolicySpec:
        """Create an instance of IoK8sApiPolicyV1beta1PodSecurityPolicySpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiPolicyV1beta1PodSecurityPolicySpec.parse_obj(obj)

        _obj = IoK8sApiPolicyV1beta1PodSecurityPolicySpec.parse_obj({
            "allow_privilege_escalation": obj.get("allowPrivilegeEscalation"),
            "allowed_csi_drivers": [IoK8sApiPolicyV1beta1AllowedCSIDriver.from_dict(_item) for _item in obj.get("allowedCSIDrivers")] if obj.get("allowedCSIDrivers") is not None else None,
            "allowed_capabilities": obj.get("allowedCapabilities"),
            "allowed_flex_volumes": [IoK8sApiPolicyV1beta1AllowedFlexVolume.from_dict(_item) for _item in obj.get("allowedFlexVolumes")] if obj.get("allowedFlexVolumes") is not None else None,
            "allowed_host_paths": [IoK8sApiPolicyV1beta1AllowedHostPath.from_dict(_item) for _item in obj.get("allowedHostPaths")] if obj.get("allowedHostPaths") is not None else None,
            "allowed_proc_mount_types": obj.get("allowedProcMountTypes"),
            "allowed_unsafe_sysctls": obj.get("allowedUnsafeSysctls"),
            "default_add_capabilities": obj.get("defaultAddCapabilities"),
            "default_allow_privilege_escalation": obj.get("defaultAllowPrivilegeEscalation"),
            "forbidden_sysctls": obj.get("forbiddenSysctls"),
            "fs_group": IoK8sApiPolicyV1beta1FSGroupStrategyOptions.from_dict(obj.get("fsGroup")) if obj.get("fsGroup") is not None else None,
            "host_ipc": obj.get("hostIPC"),
            "host_network": obj.get("hostNetwork"),
            "host_pid": obj.get("hostPID"),
            "host_ports": [IoK8sApiPolicyV1beta1HostPortRange.from_dict(_item) for _item in obj.get("hostPorts")] if obj.get("hostPorts") is not None else None,
            "privileged": obj.get("privileged"),
            "read_only_root_filesystem": obj.get("readOnlyRootFilesystem"),
            "required_drop_capabilities": obj.get("requiredDropCapabilities"),
            "run_as_group": IoK8sApiPolicyV1beta1RunAsGroupStrategyOptions.from_dict(obj.get("runAsGroup")) if obj.get("runAsGroup") is not None else None,
            "run_as_user": IoK8sApiPolicyV1beta1RunAsUserStrategyOptions.from_dict(obj.get("runAsUser")) if obj.get("runAsUser") is not None else None,
            "runtime_class": IoK8sApiPolicyV1beta1RuntimeClassStrategyOptions.from_dict(obj.get("runtimeClass")) if obj.get("runtimeClass") is not None else None,
            "se_linux": IoK8sApiPolicyV1beta1SELinuxStrategyOptions.from_dict(obj.get("seLinux")) if obj.get("seLinux") is not None else None,
            "supplemental_groups": IoK8sApiPolicyV1beta1SupplementalGroupsStrategyOptions.from_dict(obj.get("supplementalGroups")) if obj.get("supplementalGroups") is not None else None,
            "volumes": obj.get("volumes")
        })
        return _obj


