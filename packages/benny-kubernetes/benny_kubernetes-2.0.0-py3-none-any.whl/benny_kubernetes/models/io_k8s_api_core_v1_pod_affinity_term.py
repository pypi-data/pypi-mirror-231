# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from benny_kubernetes.models.io_k8s_apimachinery_pkg_apis_meta_v1_label_selector import IoK8sApimachineryPkgApisMetaV1LabelSelector

class IoK8sApiCoreV1PodAffinityTerm(BaseModel):
    """
    Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running  # noqa: E501
    """
    label_selector: Optional[IoK8sApimachineryPkgApisMetaV1LabelSelector] = Field(None, alias="labelSelector")
    namespaces: Optional[conlist(StrictStr)] = Field(None, description="namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"")
    topology_key: StrictStr = Field(..., alias="topologyKey", description="This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.")
    __properties = ["labelSelector", "namespaces", "topologyKey"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiCoreV1PodAffinityTerm:
        """Create an instance of IoK8sApiCoreV1PodAffinityTerm from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of label_selector
        if self.label_selector:
            _dict['labelSelector'] = self.label_selector.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiCoreV1PodAffinityTerm:
        """Create an instance of IoK8sApiCoreV1PodAffinityTerm from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiCoreV1PodAffinityTerm.parse_obj(obj)

        _obj = IoK8sApiCoreV1PodAffinityTerm.parse_obj({
            "label_selector": IoK8sApimachineryPkgApisMetaV1LabelSelector.from_dict(obj.get("labelSelector")) if obj.get("labelSelector") is not None else None,
            "namespaces": obj.get("namespaces"),
            "topology_key": obj.get("topologyKey")
        })
        return _obj


