# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, conbytes, conlist, constr, validator
from benny_kubernetes.models.io_k8s_api_certificates_v1beta1_certificate_signing_request_condition import IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition

class IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus(BaseModel):
    """
    IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus
    """
    certificate: Optional[Union[conbytes(strict=True), constr(strict=True)]] = Field(None, description="If request was approved, the controller will place the issued certificate here.")
    conditions: Optional[conlist(IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition)] = Field(None, description="Conditions applied to the request, such as approval or denial.")
    __properties = ["certificate", "conditions"]

    @validator('certificate')
    def certificate_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$", value):
            raise ValueError(r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus:
        """Create an instance of IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item in self.conditions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['conditions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus:
        """Create an instance of IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus.parse_obj(obj)

        _obj = IoK8sApiCertificatesV1beta1CertificateSigningRequestStatus.parse_obj({
            "certificate": obj.get("certificate"),
            "conditions": [IoK8sApiCertificatesV1beta1CertificateSigningRequestCondition.from_dict(_item) for _item in obj.get("conditions")] if obj.get("conditions") is not None else None
        })
        return _obj


