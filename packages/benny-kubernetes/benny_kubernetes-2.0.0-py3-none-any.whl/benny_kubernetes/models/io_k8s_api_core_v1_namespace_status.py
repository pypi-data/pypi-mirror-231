# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from benny_kubernetes.models.io_k8s_api_core_v1_namespace_condition import IoK8sApiCoreV1NamespaceCondition

class IoK8sApiCoreV1NamespaceStatus(BaseModel):
    """
    NamespaceStatus is information about the current status of a Namespace.  # noqa: E501
    """
    conditions: Optional[conlist(IoK8sApiCoreV1NamespaceCondition)] = Field(None, description="Represents the latest available observations of a namespace's current state.")
    phase: Optional[StrictStr] = Field(None, description="Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/")
    __properties = ["conditions", "phase"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiCoreV1NamespaceStatus:
        """Create an instance of IoK8sApiCoreV1NamespaceStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item in self.conditions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['conditions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiCoreV1NamespaceStatus:
        """Create an instance of IoK8sApiCoreV1NamespaceStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiCoreV1NamespaceStatus.parse_obj(obj)

        _obj = IoK8sApiCoreV1NamespaceStatus.parse_obj({
            "conditions": [IoK8sApiCoreV1NamespaceCondition.from_dict(_item) for _item in obj.get("conditions")] if obj.get("conditions") is not None else None,
            "phase": obj.get("phase")
        })
        return _obj


