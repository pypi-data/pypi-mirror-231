# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from benny_kubernetes.models.io_k8s_api_core_v1_object_field_selector import IoK8sApiCoreV1ObjectFieldSelector
from benny_kubernetes.models.io_k8s_api_core_v1_resource_field_selector import IoK8sApiCoreV1ResourceFieldSelector

class IoK8sApiCoreV1DownwardAPIVolumeFile(BaseModel):
    """
    DownwardAPIVolumeFile represents information to create the file containing the pod field  # noqa: E501
    """
    field_ref: Optional[IoK8sApiCoreV1ObjectFieldSelector] = Field(None, alias="fieldRef")
    mode: Optional[StrictInt] = Field(None, description="Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.")
    path: StrictStr = Field(..., description="Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'")
    resource_field_ref: Optional[IoK8sApiCoreV1ResourceFieldSelector] = Field(None, alias="resourceFieldRef")
    __properties = ["fieldRef", "mode", "path", "resourceFieldRef"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiCoreV1DownwardAPIVolumeFile:
        """Create an instance of IoK8sApiCoreV1DownwardAPIVolumeFile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of field_ref
        if self.field_ref:
            _dict['fieldRef'] = self.field_ref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_field_ref
        if self.resource_field_ref:
            _dict['resourceFieldRef'] = self.resource_field_ref.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiCoreV1DownwardAPIVolumeFile:
        """Create an instance of IoK8sApiCoreV1DownwardAPIVolumeFile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiCoreV1DownwardAPIVolumeFile.parse_obj(obj)

        _obj = IoK8sApiCoreV1DownwardAPIVolumeFile.parse_obj({
            "field_ref": IoK8sApiCoreV1ObjectFieldSelector.from_dict(obj.get("fieldRef")) if obj.get("fieldRef") is not None else None,
            "mode": obj.get("mode"),
            "path": obj.get("path"),
            "resource_field_ref": IoK8sApiCoreV1ResourceFieldSelector.from_dict(obj.get("resourceFieldRef")) if obj.get("resourceFieldRef") is not None else None
        })
        return _obj


