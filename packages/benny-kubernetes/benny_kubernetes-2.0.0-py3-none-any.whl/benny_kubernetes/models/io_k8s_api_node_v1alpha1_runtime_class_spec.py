# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from benny_kubernetes.models.io_k8s_api_node_v1alpha1_overhead import IoK8sApiNodeV1alpha1Overhead
from benny_kubernetes.models.io_k8s_api_node_v1alpha1_scheduling import IoK8sApiNodeV1alpha1Scheduling

class IoK8sApiNodeV1alpha1RuntimeClassSpec(BaseModel):
    """
    RuntimeClassSpec is a specification of a RuntimeClass. It contains parameters that are required to describe the RuntimeClass to the Container Runtime Interface (CRI) implementation, as well as any other components that need to understand how the pod will be run. The RuntimeClassSpec is immutable.  # noqa: E501
    """
    overhead: Optional[IoK8sApiNodeV1alpha1Overhead] = None
    runtime_handler: StrictStr = Field(..., alias="runtimeHandler", description="RuntimeHandler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node & CRI configuration.  It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called \"runc\" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The RuntimeHandler must conform to the DNS Label (RFC 1123) requirements and is immutable.")
    scheduling: Optional[IoK8sApiNodeV1alpha1Scheduling] = None
    __properties = ["overhead", "runtimeHandler", "scheduling"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiNodeV1alpha1RuntimeClassSpec:
        """Create an instance of IoK8sApiNodeV1alpha1RuntimeClassSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of overhead
        if self.overhead:
            _dict['overhead'] = self.overhead.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scheduling
        if self.scheduling:
            _dict['scheduling'] = self.scheduling.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiNodeV1alpha1RuntimeClassSpec:
        """Create an instance of IoK8sApiNodeV1alpha1RuntimeClassSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiNodeV1alpha1RuntimeClassSpec.parse_obj(obj)

        _obj = IoK8sApiNodeV1alpha1RuntimeClassSpec.parse_obj({
            "overhead": IoK8sApiNodeV1alpha1Overhead.from_dict(obj.get("overhead")) if obj.get("overhead") is not None else None,
            "runtime_handler": obj.get("runtimeHandler"),
            "scheduling": IoK8sApiNodeV1alpha1Scheduling.from_dict(obj.get("scheduling")) if obj.get("scheduling") is not None else None
        })
        return _obj


