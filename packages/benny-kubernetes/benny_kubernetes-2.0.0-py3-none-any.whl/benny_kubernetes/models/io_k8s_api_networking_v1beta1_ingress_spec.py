# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from benny_kubernetes.models.io_k8s_api_networking_v1beta1_ingress_backend import IoK8sApiNetworkingV1beta1IngressBackend
from benny_kubernetes.models.io_k8s_api_networking_v1beta1_ingress_rule import IoK8sApiNetworkingV1beta1IngressRule
from benny_kubernetes.models.io_k8s_api_networking_v1beta1_ingress_tls import IoK8sApiNetworkingV1beta1IngressTLS

class IoK8sApiNetworkingV1beta1IngressSpec(BaseModel):
    """
    IngressSpec describes the Ingress the user wishes to exist.  # noqa: E501
    """
    backend: Optional[IoK8sApiNetworkingV1beta1IngressBackend] = None
    ingress_class_name: Optional[StrictStr] = Field(None, alias="ingressClassName", description="IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.")
    rules: Optional[conlist(IoK8sApiNetworkingV1beta1IngressRule)] = Field(None, description="A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.")
    tls: Optional[conlist(IoK8sApiNetworkingV1beta1IngressTLS)] = Field(None, description="TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.")
    __properties = ["backend", "ingressClassName", "rules", "tls"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiNetworkingV1beta1IngressSpec:
        """Create an instance of IoK8sApiNetworkingV1beta1IngressSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of backend
        if self.backend:
            _dict['backend'] = self.backend.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rules (list)
        _items = []
        if self.rules:
            for _item in self.rules:
                if _item:
                    _items.append(_item.to_dict())
            _dict['rules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tls (list)
        _items = []
        if self.tls:
            for _item in self.tls:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tls'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiNetworkingV1beta1IngressSpec:
        """Create an instance of IoK8sApiNetworkingV1beta1IngressSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiNetworkingV1beta1IngressSpec.parse_obj(obj)

        _obj = IoK8sApiNetworkingV1beta1IngressSpec.parse_obj({
            "backend": IoK8sApiNetworkingV1beta1IngressBackend.from_dict(obj.get("backend")) if obj.get("backend") is not None else None,
            "ingress_class_name": obj.get("ingressClassName"),
            "rules": [IoK8sApiNetworkingV1beta1IngressRule.from_dict(_item) for _item in obj.get("rules")] if obj.get("rules") is not None else None,
            "tls": [IoK8sApiNetworkingV1beta1IngressTLS.from_dict(_item) for _item in obj.get("tls")] if obj.get("tls") is not None else None
        })
        return _obj


