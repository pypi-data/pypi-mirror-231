# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: unversioned
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, conlist
from benny_kubernetes.models.io_k8s_api_extensions_v1beta1_http_ingress_path import IoK8sApiExtensionsV1beta1HTTPIngressPath

class IoK8sApiExtensionsV1beta1HTTPIngressRuleValue(BaseModel):
    """
    HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.  # noqa: E501
    """
    paths: conlist(IoK8sApiExtensionsV1beta1HTTPIngressPath) = Field(..., description="A collection of paths that map requests to backends.")
    __properties = ["paths"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IoK8sApiExtensionsV1beta1HTTPIngressRuleValue:
        """Create an instance of IoK8sApiExtensionsV1beta1HTTPIngressRuleValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in paths (list)
        _items = []
        if self.paths:
            for _item in self.paths:
                if _item:
                    _items.append(_item.to_dict())
            _dict['paths'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IoK8sApiExtensionsV1beta1HTTPIngressRuleValue:
        """Create an instance of IoK8sApiExtensionsV1beta1HTTPIngressRuleValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IoK8sApiExtensionsV1beta1HTTPIngressRuleValue.parse_obj(obj)

        _obj = IoK8sApiExtensionsV1beta1HTTPIngressRuleValue.parse_obj({
            "paths": [IoK8sApiExtensionsV1beta1HTTPIngressPath.from_dict(_item) for _item in obj.get("paths")] if obj.get("paths") is not None else None
        })
        return _obj


