[tool.poetry]
name = "sqlmeshsm"
version = "0.1.0b5"
description = "SQLMesh macros used for ❄️ Dynamic Masking Policies implementation ✏️, and the Snowflake Hooker CLI (hook) ⭐"
authors = ["Dat Nguyen <datnguyen.it09@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/datnguye/sqlmesh-snow-mask"
repository = "https://github.com/datnguye/sqlmesh-snow-mask"
keywords = ["flake8", "markdown", "lint"]
classifiers = [
    "Environment :: Console",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Documentation",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
]
include = [
    "LICENSE",
]
packages = [
  {include = "sqlmeshsm"},
  {include = "README.md"},
]

[tool.poetry.dependencies]
python = "^3.9"
sqlmesh = "^0.31"
click = "^8.1.7"
snowflake-connector-python = "^3.1.1"

[tool.poetry.group.dev.dependencies]
pytest = "^6.2.5"
pytest-sugar = "^0.9.6"
black = "^22.10.0"
coverage = {version = "^6.5.0", extras = ["toml"]}
poethepoet = "^0.16.4"
pre-commit = "^2.20.0"
flake8 = "^6.0.0"
isort = "^5.12.0"
autoflake = "^2.0.1"
sqlmesh = {version = "*", extras = ["postgres", "snowflake"]}

[tool.poetry.scripts]
hook = "sqlmeshsm.main:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.isort]
multi_line_output = 3
force_to_top = ["os"]
profile = "black"
skip_gitignore = true

[tool.autoflake]
recursive = true
in-place = true
remove-all-unused-imports = true
ignore-init-module-imports = true
remove-unused-variables = true
ignore-pass-statements = false

[tool.poe.tasks]
git-hooks = { shell = "pre-commit install --install-hooks && pre-commit install --hook-type commit-msg" }
format = [
  {cmd = "autoflake ."},
  {cmd = "black ."},
  {cmd = "isort ."},
]
lint = [
  {cmd = "black --check ."},
  {cmd = "isort --check-only ."},
  {cmd = "flake8 ."},
]
test = [
  {cmd = "pytest . -vv"},
]
test-cov = [
  {cmd = "pytest --version"},
  {cmd = "coverage run -m pytest ."},
  {cmd = "coverage report --show-missing"},
  {cmd = "coverage xml"},
]
