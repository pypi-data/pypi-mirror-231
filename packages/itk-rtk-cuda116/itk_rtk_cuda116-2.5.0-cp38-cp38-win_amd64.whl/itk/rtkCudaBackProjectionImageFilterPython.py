# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkCudaBackProjectionImageFilterPython
else:
    import _rtkCudaBackProjectionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkCudaBackProjectionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkCudaBackProjectionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.rtkBackProjectionImageFilterPython
import itk.itkInPlaceImageFilterRTKPython
import itk.itkImageToImageFilterRTKPython
import itk.itkImageSourceRTKPython
import itk.itkImageRTKPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageBaseRTKPython
import itk.itkImageRegionRTKPython
import itk.itkPointRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkImageSourceCommonPython
import itk.itkCudaImageRTKPython
import itk.itkCudaDataManagerPython
import itk.itkCudaImageDataManagerRTKPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourceCudaCommonPython
import itk.itkCudaImagePython
import itk.itkCudaImageDataManagerPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageToImageFilterAPython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython

def rtkCudaBackProjectionImageFilterCIF3_New():
    return rtkCudaBackProjectionImageFilterCIF3.New()

class rtkCudaBackProjectionImageFilterCIF3(itk.rtkBackProjectionImageFilterPython.itkCudaInPlaceImageFilterCIF3CIF3BPCIF3CIF3):
    r"""Proxy of C++ rtkCudaBackProjectionImageFilterCIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIF3___New_orig__)
    Clone = _swig_new_instance_method(_rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIF3_Clone)
    __swig_destroy__ = _rtkCudaBackProjectionImageFilterPython.delete_rtkCudaBackProjectionImageFilterCIF3
    cast = _swig_new_static_method(_rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIF3_cast)

    def New(*args, **kargs):
        """New() -> rtkCudaBackProjectionImageFilterCIF3

        Create a new object of the class rtkCudaBackProjectionImageFilterCIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkCudaBackProjectionImageFilterCIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkCudaBackProjectionImageFilterCIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkCudaBackProjectionImageFilterCIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkCudaBackProjectionImageFilterCIF3 in _rtkCudaBackProjectionImageFilterPython:
_rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIF3_swigregister(rtkCudaBackProjectionImageFilterCIF3)
rtkCudaBackProjectionImageFilterCIF3___New_orig__ = _rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIF3___New_orig__
rtkCudaBackProjectionImageFilterCIF3_cast = _rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIF3_cast


def rtkCudaBackProjectionImageFilterCIVF23_New():
    return rtkCudaBackProjectionImageFilterCIVF23.New()

class rtkCudaBackProjectionImageFilterCIVF23(itk.rtkBackProjectionImageFilterPython.itkCudaInPlaceImageFilterCIVF23CIVF23BPCIVF23CIVF23):
    r"""Proxy of C++ rtkCudaBackProjectionImageFilterCIVF23 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIVF23___New_orig__)
    Clone = _swig_new_instance_method(_rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIVF23_Clone)
    __swig_destroy__ = _rtkCudaBackProjectionImageFilterPython.delete_rtkCudaBackProjectionImageFilterCIVF23
    cast = _swig_new_static_method(_rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIVF23_cast)

    def New(*args, **kargs):
        """New() -> rtkCudaBackProjectionImageFilterCIVF23

        Create a new object of the class rtkCudaBackProjectionImageFilterCIVF23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkCudaBackProjectionImageFilterCIVF23.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkCudaBackProjectionImageFilterCIVF23.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkCudaBackProjectionImageFilterCIVF23.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkCudaBackProjectionImageFilterCIVF23 in _rtkCudaBackProjectionImageFilterPython:
_rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIVF23_swigregister(rtkCudaBackProjectionImageFilterCIVF23)
rtkCudaBackProjectionImageFilterCIVF23___New_orig__ = _rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIVF23___New_orig__
rtkCudaBackProjectionImageFilterCIVF23_cast = _rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIVF23_cast


def rtkCudaBackProjectionImageFilterCIVF33_New():
    return rtkCudaBackProjectionImageFilterCIVF33.New()

class rtkCudaBackProjectionImageFilterCIVF33(itk.rtkBackProjectionImageFilterPython.itkCudaInPlaceImageFilterCIVF33CIVF33BPCIVF33CIVF33):
    r"""Proxy of C++ rtkCudaBackProjectionImageFilterCIVF33 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIVF33___New_orig__)
    Clone = _swig_new_instance_method(_rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIVF33_Clone)
    __swig_destroy__ = _rtkCudaBackProjectionImageFilterPython.delete_rtkCudaBackProjectionImageFilterCIVF33
    cast = _swig_new_static_method(_rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIVF33_cast)

    def New(*args, **kargs):
        """New() -> rtkCudaBackProjectionImageFilterCIVF33

        Create a new object of the class rtkCudaBackProjectionImageFilterCIVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkCudaBackProjectionImageFilterCIVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkCudaBackProjectionImageFilterCIVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkCudaBackProjectionImageFilterCIVF33.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkCudaBackProjectionImageFilterCIVF33 in _rtkCudaBackProjectionImageFilterPython:
_rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIVF33_swigregister(rtkCudaBackProjectionImageFilterCIVF33)
rtkCudaBackProjectionImageFilterCIVF33___New_orig__ = _rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIVF33___New_orig__
rtkCudaBackProjectionImageFilterCIVF33_cast = _rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIVF33_cast


def rtkCudaBackProjectionImageFilterCIVF43_New():
    return rtkCudaBackProjectionImageFilterCIVF43.New()

class rtkCudaBackProjectionImageFilterCIVF43(itk.rtkBackProjectionImageFilterPython.itkCudaInPlaceImageFilterCIVF43CIVF43BPCIVF43CIVF43):
    r"""Proxy of C++ rtkCudaBackProjectionImageFilterCIVF43 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIVF43___New_orig__)
    Clone = _swig_new_instance_method(_rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIVF43_Clone)
    __swig_destroy__ = _rtkCudaBackProjectionImageFilterPython.delete_rtkCudaBackProjectionImageFilterCIVF43
    cast = _swig_new_static_method(_rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIVF43_cast)

    def New(*args, **kargs):
        """New() -> rtkCudaBackProjectionImageFilterCIVF43

        Create a new object of the class rtkCudaBackProjectionImageFilterCIVF43 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkCudaBackProjectionImageFilterCIVF43.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkCudaBackProjectionImageFilterCIVF43.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkCudaBackProjectionImageFilterCIVF43.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkCudaBackProjectionImageFilterCIVF43 in _rtkCudaBackProjectionImageFilterPython:
_rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIVF43_swigregister(rtkCudaBackProjectionImageFilterCIVF43)
rtkCudaBackProjectionImageFilterCIVF43___New_orig__ = _rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIVF43___New_orig__
rtkCudaBackProjectionImageFilterCIVF43_cast = _rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIVF43_cast


def rtkCudaBackProjectionImageFilterCIVF53_New():
    return rtkCudaBackProjectionImageFilterCIVF53.New()

class rtkCudaBackProjectionImageFilterCIVF53(itk.rtkBackProjectionImageFilterPython.itkCudaInPlaceImageFilterCIVF53CIVF53BPCIVF53CIVF53):
    r"""Proxy of C++ rtkCudaBackProjectionImageFilterCIVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIVF53___New_orig__)
    Clone = _swig_new_instance_method(_rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIVF53_Clone)
    __swig_destroy__ = _rtkCudaBackProjectionImageFilterPython.delete_rtkCudaBackProjectionImageFilterCIVF53
    cast = _swig_new_static_method(_rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIVF53_cast)

    def New(*args, **kargs):
        """New() -> rtkCudaBackProjectionImageFilterCIVF53

        Create a new object of the class rtkCudaBackProjectionImageFilterCIVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkCudaBackProjectionImageFilterCIVF53.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkCudaBackProjectionImageFilterCIVF53.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkCudaBackProjectionImageFilterCIVF53.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkCudaBackProjectionImageFilterCIVF53 in _rtkCudaBackProjectionImageFilterPython:
_rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIVF53_swigregister(rtkCudaBackProjectionImageFilterCIVF53)
rtkCudaBackProjectionImageFilterCIVF53___New_orig__ = _rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIVF53___New_orig__
rtkCudaBackProjectionImageFilterCIVF53_cast = _rtkCudaBackProjectionImageFilterPython.rtkCudaBackProjectionImageFilterCIVF53_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def cuda_back_projection_image_filter(*args: itkt.ImageLike,  gpu_enabled: bool=..., geometry=..., transpose: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for CudaBackProjectionImageFilter"""
    import itk

    kwarg_typehints = { 'gpu_enabled':gpu_enabled,'geometry':geometry,'transpose':transpose }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.CudaBackProjectionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def cuda_back_projection_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.CudaBackProjectionImageFilter
    cuda_back_projection_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    cuda_back_projection_image_filter.__doc__ = filter_object.__doc__




