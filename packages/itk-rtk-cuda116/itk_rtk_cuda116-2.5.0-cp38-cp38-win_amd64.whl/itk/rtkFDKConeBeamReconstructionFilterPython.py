# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkFDKConeBeamReconstructionFilterPython
else:
    import _rtkFDKConeBeamReconstructionFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkFDKConeBeamReconstructionFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkFDKConeBeamReconstructionFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.rtkFDKBackProjectionImageFilterPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.ITKCommonBasePython
import itk.itkCudaImagePython
import itk.itkCudaImageDataManagerPython
import itk.itkCudaDataManagerPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.rtkBackProjectionImageFilterPython
import itk.itkInPlaceImageFilterRTKPython
import itk.itkImageToImageFilterRTKPython
import itk.itkImageSourceRTKPython
import itk.itkImageRTKPython
import itk.itkImageBaseRTKPython
import itk.itkImageRegionRTKPython
import itk.itkPointRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkImageSourceCommonPython
import itk.itkCudaImageRTKPython
import itk.itkCudaImageDataManagerRTKPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourceCudaCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageToImageFilterAPython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.rtkFFTRampImageFilterPython
import itk.rtkFFTProjectionsConvolutionImageFilterPython
import itk.itkVectorRTKPython
import itk.itkFixedArrayRTKPython
import itk.rtkFDKWeightProjectionFilterPython

def rtkFDKConeBeamReconstructionFilterCIF3CIF3F_New():
    return rtkFDKConeBeamReconstructionFilterCIF3CIF3F.New()

class rtkFDKConeBeamReconstructionFilterCIF3CIF3F(itk.itkInPlaceImageFilterRTKPython.itkInPlaceImageFilterCIF3):
    r"""Proxy of C++ rtkFDKConeBeamReconstructionFilterCIF3CIF3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterCIF3CIF3F___New_orig__)
    Clone = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterCIF3CIF3F_Clone)
    GetModifiableGeometry = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterCIF3CIF3F_GetModifiableGeometry)
    GetGeometry = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterCIF3CIF3F_GetGeometry)
    SetGeometry = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterCIF3CIF3F_SetGeometry)
    GetWeightFilter = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterCIF3CIF3F_GetWeightFilter)
    GetRampFilter = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterCIF3CIF3F_GetRampFilter)
    GetProjectionSubsetSize = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterCIF3CIF3F_GetProjectionSubsetSize)
    SetProjectionSubsetSize = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterCIF3CIF3F_SetProjectionSubsetSize)
    GetBackProjectionFilter = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterCIF3CIF3F_GetBackProjectionFilter)
    SetBackProjectionFilter = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterCIF3CIF3F_SetBackProjectionFilter)
    __swig_destroy__ = _rtkFDKConeBeamReconstructionFilterPython.delete_rtkFDKConeBeamReconstructionFilterCIF3CIF3F
    cast = _swig_new_static_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterCIF3CIF3F_cast)

    def New(*args, **kargs):
        """New() -> rtkFDKConeBeamReconstructionFilterCIF3CIF3F

        Create a new object of the class rtkFDKConeBeamReconstructionFilterCIF3CIF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFDKConeBeamReconstructionFilterCIF3CIF3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkFDKConeBeamReconstructionFilterCIF3CIF3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkFDKConeBeamReconstructionFilterCIF3CIF3F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkFDKConeBeamReconstructionFilterCIF3CIF3F in _rtkFDKConeBeamReconstructionFilterPython:
_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterCIF3CIF3F_swigregister(rtkFDKConeBeamReconstructionFilterCIF3CIF3F)
rtkFDKConeBeamReconstructionFilterCIF3CIF3F___New_orig__ = _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterCIF3CIF3F___New_orig__
rtkFDKConeBeamReconstructionFilterCIF3CIF3F_cast = _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterCIF3CIF3F_cast


def rtkFDKConeBeamReconstructionFilterID3_New():
    return rtkFDKConeBeamReconstructionFilterID3.New()

class rtkFDKConeBeamReconstructionFilterID3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ rtkFDKConeBeamReconstructionFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_Clone)
    GetModifiableGeometry = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_GetModifiableGeometry)
    GetGeometry = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_GetGeometry)
    SetGeometry = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_SetGeometry)
    GetWeightFilter = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_GetWeightFilter)
    GetRampFilter = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_GetRampFilter)
    GetProjectionSubsetSize = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_GetProjectionSubsetSize)
    SetProjectionSubsetSize = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_SetProjectionSubsetSize)
    GetBackProjectionFilter = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_GetBackProjectionFilter)
    SetBackProjectionFilter = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_SetBackProjectionFilter)
    __swig_destroy__ = _rtkFDKConeBeamReconstructionFilterPython.delete_rtkFDKConeBeamReconstructionFilterID3
    cast = _swig_new_static_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_cast)

    def New(*args, **kargs):
        """New() -> rtkFDKConeBeamReconstructionFilterID3

        Create a new object of the class rtkFDKConeBeamReconstructionFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFDKConeBeamReconstructionFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkFDKConeBeamReconstructionFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkFDKConeBeamReconstructionFilterID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkFDKConeBeamReconstructionFilterID3 in _rtkFDKConeBeamReconstructionFilterPython:
_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_swigregister(rtkFDKConeBeamReconstructionFilterID3)
rtkFDKConeBeamReconstructionFilterID3___New_orig__ = _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3___New_orig__
rtkFDKConeBeamReconstructionFilterID3_cast = _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterID3_cast


def rtkFDKConeBeamReconstructionFilterIF3_New():
    return rtkFDKConeBeamReconstructionFilterIF3.New()

class rtkFDKConeBeamReconstructionFilterIF3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ rtkFDKConeBeamReconstructionFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_Clone)
    GetModifiableGeometry = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_GetModifiableGeometry)
    GetGeometry = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_GetGeometry)
    SetGeometry = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_SetGeometry)
    GetWeightFilter = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_GetWeightFilter)
    GetRampFilter = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_GetRampFilter)
    GetProjectionSubsetSize = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_GetProjectionSubsetSize)
    SetProjectionSubsetSize = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_SetProjectionSubsetSize)
    GetBackProjectionFilter = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_GetBackProjectionFilter)
    SetBackProjectionFilter = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_SetBackProjectionFilter)
    __swig_destroy__ = _rtkFDKConeBeamReconstructionFilterPython.delete_rtkFDKConeBeamReconstructionFilterIF3
    cast = _swig_new_static_method(_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> rtkFDKConeBeamReconstructionFilterIF3

        Create a new object of the class rtkFDKConeBeamReconstructionFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFDKConeBeamReconstructionFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkFDKConeBeamReconstructionFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkFDKConeBeamReconstructionFilterIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkFDKConeBeamReconstructionFilterIF3 in _rtkFDKConeBeamReconstructionFilterPython:
_rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_swigregister(rtkFDKConeBeamReconstructionFilterIF3)
rtkFDKConeBeamReconstructionFilterIF3___New_orig__ = _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3___New_orig__
rtkFDKConeBeamReconstructionFilterIF3_cast = _rtkFDKConeBeamReconstructionFilterPython.rtkFDKConeBeamReconstructionFilterIF3_cast


def itkCudaImageToImageFilterCIF3CIF3FDKCIF3F_New():
    return itkCudaImageToImageFilterCIF3CIF3FDKCIF3F.New()

class itkCudaImageToImageFilterCIF3CIF3FDKCIF3F(rtkFDKConeBeamReconstructionFilterCIF3CIF3F):
    r"""Proxy of C++ itkCudaImageToImageFilterCIF3CIF3FDKCIF3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkFDKConeBeamReconstructionFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKCIF3F___New_orig__)
    Clone = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKCIF3F_Clone)
    SetGPUEnabled = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKCIF3F_SetGPUEnabled)
    GetGPUEnabled = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKCIF3F_GetGPUEnabled)
    GPUEnabledOn = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKCIF3F_GPUEnabledOn)
    GPUEnabledOff = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKCIF3F_GPUEnabledOff)
    GenerateData = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKCIF3F_GenerateData)
    GraftOutput = _swig_new_instance_method(_rtkFDKConeBeamReconstructionFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKCIF3F_GraftOutput)
    __swig_destroy__ = _rtkFDKConeBeamReconstructionFilterPython.delete_itkCudaImageToImageFilterCIF3CIF3FDKCIF3F
    cast = _swig_new_static_method(_rtkFDKConeBeamReconstructionFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKCIF3F_cast)

    def New(*args, **kargs):
        """New() -> itkCudaImageToImageFilterCIF3CIF3FDKCIF3F

        Create a new object of the class itkCudaImageToImageFilterCIF3CIF3FDKCIF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCudaImageToImageFilterCIF3CIF3FDKCIF3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCudaImageToImageFilterCIF3CIF3FDKCIF3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCudaImageToImageFilterCIF3CIF3FDKCIF3F.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCudaImageToImageFilterCIF3CIF3FDKCIF3F in _rtkFDKConeBeamReconstructionFilterPython:
_rtkFDKConeBeamReconstructionFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKCIF3F_swigregister(itkCudaImageToImageFilterCIF3CIF3FDKCIF3F)
itkCudaImageToImageFilterCIF3CIF3FDKCIF3F___New_orig__ = _rtkFDKConeBeamReconstructionFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKCIF3F___New_orig__
itkCudaImageToImageFilterCIF3CIF3FDKCIF3F_cast = _rtkFDKConeBeamReconstructionFilterPython.itkCudaImageToImageFilterCIF3CIF3FDKCIF3F_cast

class itkCudaInPlaceImageFilterCIF3CIF3FDKCIF3F(itkCudaImageToImageFilterCIF3CIF3FDKCIF3F):
    r"""Proxy of C++ itkCudaInPlaceImageFilterCIF3CIF3FDKCIF3F class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkFDKConeBeamReconstructionFilterPython.delete_itkCudaInPlaceImageFilterCIF3CIF3FDKCIF3F
    cast = _swig_new_static_method(_rtkFDKConeBeamReconstructionFilterPython.itkCudaInPlaceImageFilterCIF3CIF3FDKCIF3F_cast)

# Register itkCudaInPlaceImageFilterCIF3CIF3FDKCIF3F in _rtkFDKConeBeamReconstructionFilterPython:
_rtkFDKConeBeamReconstructionFilterPython.itkCudaInPlaceImageFilterCIF3CIF3FDKCIF3F_swigregister(itkCudaInPlaceImageFilterCIF3CIF3FDKCIF3F)
itkCudaInPlaceImageFilterCIF3CIF3FDKCIF3F_cast = _rtkFDKConeBeamReconstructionFilterPython.itkCudaInPlaceImageFilterCIF3CIF3FDKCIF3F_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def fdk_cone_beam_reconstruction_filter(*args: itkt.ImageLike,  geometry=..., projection_subset_size: int=..., back_projection_filter=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for FDKConeBeamReconstructionFilter"""
    import itk

    kwarg_typehints = { 'geometry':geometry,'projection_subset_size':projection_subset_size,'back_projection_filter':back_projection_filter }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.FDKConeBeamReconstructionFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def fdk_cone_beam_reconstruction_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.FDKConeBeamReconstructionFilter
    fdk_cone_beam_reconstruction_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    fdk_cone_beam_reconstruction_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def cuda_image_to_image_filter(*args: itkt.ImageLike,  gpu_enabled: bool=..., geometry=..., projection_subset_size: int=..., back_projection_filter=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for CudaImageToImageFilter"""
    import itk

    kwarg_typehints = { 'gpu_enabled':gpu_enabled,'geometry':geometry,'projection_subset_size':projection_subset_size,'back_projection_filter':back_projection_filter }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.CudaImageToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def cuda_image_to_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.CudaImageToImageFilter
    cuda_image_to_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    cuda_image_to_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def cuda_in_place_image_filter(*args: itkt.ImageLike,  gpu_enabled: bool=..., geometry=..., projection_subset_size: int=..., back_projection_filter=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for CudaInPlaceImageFilter"""
    import itk

    kwarg_typehints = { 'gpu_enabled':gpu_enabled,'geometry':geometry,'projection_subset_size':projection_subset_size,'back_projection_filter':back_projection_filter }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.CudaInPlaceImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def cuda_in_place_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.CudaInPlaceImageFilter
    cuda_in_place_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    cuda_in_place_image_filter.__doc__ = filter_object.__doc__




