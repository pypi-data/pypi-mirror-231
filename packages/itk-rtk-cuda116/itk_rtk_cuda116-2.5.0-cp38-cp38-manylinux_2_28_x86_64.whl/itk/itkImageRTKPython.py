# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkImageRTKPython
else:
    import _itkImageRTKPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkImageRTKPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkImageRTKPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkImagePython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkImageBaseRTKPython
import itk.itkMatrixRTKPython
import itk.itkPointRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkImageRegionRTKPython
class vectoritkImageUS1(collections.abc.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageUS1_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageUS1
        __init__(self, other) -> vectoritkImageUS1

        Parameters
        ----------
        other: std::vector< itkImageUS1_Pointer > const &

        __init__(self, size) -> vectoritkImageUS1

        Parameters
        ----------
        size: std::vector< itkImageUS1_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageUS1

        Parameters
        ----------
        size: std::vector< itkImageUS1_Pointer >::size_type
        value: std::vector< itkImageUS1_Pointer >::value_type const &

        """
        _itkImageRTKPython.vectoritkImageUS1_swiginit(self, _itkImageRTKPython.new_vectoritkImageUS1(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUS1_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageUS1

# Register vectoritkImageUS1 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageUS1_swigregister(vectoritkImageUS1)

class vectoritkImageUC1(collections.abc.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageUC1_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageUC1
        __init__(self, other) -> vectoritkImageUC1

        Parameters
        ----------
        other: std::vector< itkImageUC1_Pointer > const &

        __init__(self, size) -> vectoritkImageUC1

        Parameters
        ----------
        size: std::vector< itkImageUC1_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageUC1

        Parameters
        ----------
        size: std::vector< itkImageUC1_Pointer >::size_type
        value: std::vector< itkImageUC1_Pointer >::value_type const &

        """
        _itkImageRTKPython.vectoritkImageUC1_swiginit(self, _itkImageRTKPython.new_vectoritkImageUC1(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageUC1_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageUC1

# Register vectoritkImageUC1 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageUC1_swigregister(vectoritkImageUC1)

class vectoritkImageF1(collections.abc.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageF1_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageF1
        __init__(self, other) -> vectoritkImageF1

        Parameters
        ----------
        other: std::vector< itkImageF1_Pointer > const &

        __init__(self, size) -> vectoritkImageF1

        Parameters
        ----------
        size: std::vector< itkImageF1_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageF1

        Parameters
        ----------
        size: std::vector< itkImageF1_Pointer >::size_type
        value: std::vector< itkImageF1_Pointer >::value_type const &

        """
        _itkImageRTKPython.vectoritkImageF1_swiginit(self, _itkImageRTKPython.new_vectoritkImageF1(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageF1_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageF1

# Register vectoritkImageF1 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageF1_swigregister(vectoritkImageF1)

class vectoritkImageD1(collections.abc.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageD1_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageD1
        __init__(self, other) -> vectoritkImageD1

        Parameters
        ----------
        other: std::vector< itkImageD1_Pointer > const &

        __init__(self, size) -> vectoritkImageD1

        Parameters
        ----------
        size: std::vector< itkImageD1_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageD1

        Parameters
        ----------
        size: std::vector< itkImageD1_Pointer >::size_type
        value: std::vector< itkImageD1_Pointer >::value_type const &

        """
        _itkImageRTKPython.vectoritkImageD1_swiginit(self, _itkImageRTKPython.new_vectoritkImageD1(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageD1_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageD1

# Register vectoritkImageD1 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageD1_swigregister(vectoritkImageD1)

class vectoritkImageVF52(collections.abc.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVF52_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVF52
        __init__(self, other) -> vectoritkImageVF52

        Parameters
        ----------
        other: std::vector< itkImageVF52_Pointer > const &

        __init__(self, size) -> vectoritkImageVF52

        Parameters
        ----------
        size: std::vector< itkImageVF52_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVF52

        Parameters
        ----------
        size: std::vector< itkImageVF52_Pointer >::size_type
        value: std::vector< itkImageVF52_Pointer >::value_type const &

        """
        _itkImageRTKPython.vectoritkImageVF52_swiginit(self, _itkImageRTKPython.new_vectoritkImageVF52(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF52_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageVF52

# Register vectoritkImageVF52 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageVF52_swigregister(vectoritkImageVF52)

class vectoritkImageCVF52(collections.abc.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCVF52_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCVF52
        __init__(self, other) -> vectoritkImageCVF52

        Parameters
        ----------
        other: std::vector< itkImageCVF52_Pointer > const &

        __init__(self, size) -> vectoritkImageCVF52

        Parameters
        ----------
        size: std::vector< itkImageCVF52_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCVF52

        Parameters
        ----------
        size: std::vector< itkImageCVF52_Pointer >::size_type
        value: std::vector< itkImageCVF52_Pointer >::value_type const &

        """
        _itkImageRTKPython.vectoritkImageCVF52_swiginit(self, _itkImageRTKPython.new_vectoritkImageCVF52(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF52_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageCVF52

# Register vectoritkImageCVF52 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageCVF52_swigregister(vectoritkImageCVF52)

class vectoritkImageVF53(collections.abc.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVF53_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVF53
        __init__(self, other) -> vectoritkImageVF53

        Parameters
        ----------
        other: std::vector< itkImageVF53_Pointer > const &

        __init__(self, size) -> vectoritkImageVF53

        Parameters
        ----------
        size: std::vector< itkImageVF53_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVF53

        Parameters
        ----------
        size: std::vector< itkImageVF53_Pointer >::size_type
        value: std::vector< itkImageVF53_Pointer >::value_type const &

        """
        _itkImageRTKPython.vectoritkImageVF53_swiginit(self, _itkImageRTKPython.new_vectoritkImageVF53(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF53_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageVF53

# Register vectoritkImageVF53 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageVF53_swigregister(vectoritkImageVF53)

class vectoritkImageCVF53(collections.abc.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCVF53_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCVF53
        __init__(self, other) -> vectoritkImageCVF53

        Parameters
        ----------
        other: std::vector< itkImageCVF53_Pointer > const &

        __init__(self, size) -> vectoritkImageCVF53

        Parameters
        ----------
        size: std::vector< itkImageCVF53_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCVF53

        Parameters
        ----------
        size: std::vector< itkImageCVF53_Pointer >::size_type
        value: std::vector< itkImageCVF53_Pointer >::value_type const &

        """
        _itkImageRTKPython.vectoritkImageCVF53_swiginit(self, _itkImageRTKPython.new_vectoritkImageCVF53(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF53_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageCVF53

# Register vectoritkImageCVF53 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageCVF53_swigregister(vectoritkImageCVF53)

class vectoritkImageVF54(collections.abc.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageVF54_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageVF54
        __init__(self, other) -> vectoritkImageVF54

        Parameters
        ----------
        other: std::vector< itkImageVF54_Pointer > const &

        __init__(self, size) -> vectoritkImageVF54

        Parameters
        ----------
        size: std::vector< itkImageVF54_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageVF54

        Parameters
        ----------
        size: std::vector< itkImageVF54_Pointer >::size_type
        value: std::vector< itkImageVF54_Pointer >::value_type const &

        """
        _itkImageRTKPython.vectoritkImageVF54_swiginit(self, _itkImageRTKPython.new_vectoritkImageVF54(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageVF54_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageVF54

# Register vectoritkImageVF54 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageVF54_swigregister(vectoritkImageVF54)

class vectoritkImageCVF54(collections.abc.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCVF54_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCVF54
        __init__(self, other) -> vectoritkImageCVF54

        Parameters
        ----------
        other: std::vector< itkImageCVF54_Pointer > const &

        __init__(self, size) -> vectoritkImageCVF54

        Parameters
        ----------
        size: std::vector< itkImageCVF54_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCVF54

        Parameters
        ----------
        size: std::vector< itkImageCVF54_Pointer >::size_type
        value: std::vector< itkImageCVF54_Pointer >::value_type const &

        """
        _itkImageRTKPython.vectoritkImageCVF54_swiginit(self, _itkImageRTKPython.new_vectoritkImageCVF54(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVF54_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageCVF54

# Register vectoritkImageCVF54 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageCVF54_swigregister(vectoritkImageCVF54)

class vectoritkImageCVD53(collections.abc.MutableSequence):
    r"""Proxy of C++ std::vector< itkImageCVD53_Pointer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53___nonzero__)
    __bool__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53___bool__)
    __len__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53___len__)
    __getslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53___getslice__)
    __setslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53___setslice__)
    __delslice__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53___delslice__)
    __delitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53___delitem__)
    __getitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53___getitem__)
    __setitem__ = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53___setitem__)
    pop = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_pop)
    append = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_append)
    empty = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_empty)
    size = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_size)
    swap = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_swap)
    begin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_begin)
    end = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_end)
    rbegin = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_rbegin)
    rend = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_rend)
    clear = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_clear)
    get_allocator = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_get_allocator)
    pop_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_pop_back)
    erase = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_erase)

    def __init__(self, *args):
        r"""
        __init__(self) -> vectoritkImageCVD53
        __init__(self, other) -> vectoritkImageCVD53

        Parameters
        ----------
        other: std::vector< itkImageCVD53_Pointer > const &

        __init__(self, size) -> vectoritkImageCVD53

        Parameters
        ----------
        size: std::vector< itkImageCVD53_Pointer >::size_type

        __init__(self, size, value) -> vectoritkImageCVD53

        Parameters
        ----------
        size: std::vector< itkImageCVD53_Pointer >::size_type
        value: std::vector< itkImageCVD53_Pointer >::value_type const &

        """
        _itkImageRTKPython.vectoritkImageCVD53_swiginit(self, _itkImageRTKPython.new_vectoritkImageCVD53(*args))
    push_back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_push_back)
    front = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_front)
    back = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_back)
    assign = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_assign)
    resize = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_resize)
    insert = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_insert)
    reserve = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_reserve)
    capacity = _swig_new_instance_method(_itkImageRTKPython.vectoritkImageCVD53_capacity)
    __swig_destroy__ = _itkImageRTKPython.delete_vectoritkImageCVD53

# Register vectoritkImageCVD53 in _itkImageRTKPython:
_itkImageRTKPython.vectoritkImageCVD53_swigregister(vectoritkImageCVD53)


def itkImageCVD53_New():
    return itkImageCVD53.New()

class itkImageCVD53(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkImageCVD53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageCVD53___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageCVD53_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageCVD53_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVD53_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVD53_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVD53_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVD53_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVD53_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVD53_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageCVD53_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVD53_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVD53_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVD53
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageCVD53_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVD53

        Create a new object of the class itkImageCVD53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVD53.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVD53.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVD53.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVD53 in _itkImageRTKPython:
_itkImageRTKPython.itkImageCVD53_swigregister(itkImageCVD53)
itkImageCVD53___New_orig__ = _itkImageRTKPython.itkImageCVD53___New_orig__
itkImageCVD53_cast = _itkImageRTKPython.itkImageCVD53_cast

class itkImageCVF24_ConstPointer(object):
    r"""Proxy of C++ itkImageCVF24_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkImageCVF24_ConstPointer
        __init__(self, p) -> itkImageCVF24_ConstPointer

        Parameters
        ----------
        p: itkImageCVF24_ConstPointer const &

        __init__(self, p) -> itkImageCVF24_ConstPointer

        Parameters
        ----------
        p: itkImageCVF24 const *

        """
        _itkImageRTKPython.itkImageCVF24_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageCVF24_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVF24_ConstPointer
    __deref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer___deref__)
    __ref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer___ref__)
    IsNotNull = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_IsNotNull)
    IsNull = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_IsNull)
    GetPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetPointer)
    Print = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_Print)
    Swap = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_Swap)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)

    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_Clone)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetPixelContainer)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetNeighborhoodAccessor)
    GetDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetDirection)
    GetInverseDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetInverseDirection)
    GetSpacing = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetSpacing)
    GetOrigin = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetOrigin)
    __GetLargestPossibleRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer___GetLargestPossibleRegion_orig__)
    __GetBufferedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer___GetBufferedRegion_orig__)
    __GetRequestedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer___GetRequestedRegion_orig__)
    GetOffsetTable = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetOffsetTable)
    ComputeOffset = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_ComputeOffset)
    ComputeIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_ComputeIndex)
    GetNumberOfComponentsPerPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetNumberOfComponentsPerPixel)
    GetSource = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetSource)
    GetSourceOutputName = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetSourceOutputName)
    GetSourceOutputIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetSourceOutputIndex)
    UpdateSource = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_UpdateSource)
    GetReleaseDataFlag = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetReleaseDataFlag)
    ShouldIReleaseData = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_ShouldIReleaseData)
    GetDataReleased = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetDataReleased)
    GetPipelineMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetPipelineMTime)
    GetUpdateMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetUpdateMTime)
    GetRealTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetRealTimeStamp)
    DebugOn = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_DebugOn)
    DebugOff = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_DebugOff)
    GetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetDebug)
    SetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_SetDebug)
    GetMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetMTime)
    GetTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetTimeStamp)
    Modified = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_Modified)

    def AddObserver(self, *args) -> "unsigned long":
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageCVF24_ConstPointer_AddObserver(self, *args)

    InvokeEvent = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_InvokeEvent)
    HasObserver = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_HasObserver)
    GetMetaDataDictionary = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetMetaDataDictionary)
    GetObjectName = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetObjectName)
    CreateAnother = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_CreateAnother)
    GetNameOfClass = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetNameOfClass)
    GetReferenceCount = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF24_ConstPointer_GetReferenceCount)

# Register itkImageCVF24_ConstPointer in _itkImageRTKPython:
_itkImageRTKPython.itkImageCVF24_ConstPointer_swigregister(itkImageCVF24_ConstPointer)

class itkImageCVF34_ConstPointer(object):
    r"""Proxy of C++ itkImageCVF34_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkImageCVF34_ConstPointer
        __init__(self, p) -> itkImageCVF34_ConstPointer

        Parameters
        ----------
        p: itkImageCVF34_ConstPointer const &

        __init__(self, p) -> itkImageCVF34_ConstPointer

        Parameters
        ----------
        p: itkImageCVF34 const *

        """
        _itkImageRTKPython.itkImageCVF34_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageCVF34_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVF34_ConstPointer
    __deref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer___deref__)
    __ref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer___ref__)
    IsNotNull = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_IsNotNull)
    IsNull = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_IsNull)
    GetPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetPointer)
    Print = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_Print)
    Swap = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_Swap)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)

    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_Clone)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetPixelContainer)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetNeighborhoodAccessor)
    GetDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetDirection)
    GetInverseDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetInverseDirection)
    GetSpacing = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetSpacing)
    GetOrigin = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetOrigin)
    __GetLargestPossibleRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer___GetLargestPossibleRegion_orig__)
    __GetBufferedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer___GetBufferedRegion_orig__)
    __GetRequestedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer___GetRequestedRegion_orig__)
    GetOffsetTable = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetOffsetTable)
    ComputeOffset = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_ComputeOffset)
    ComputeIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_ComputeIndex)
    GetNumberOfComponentsPerPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetNumberOfComponentsPerPixel)
    GetSource = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetSource)
    GetSourceOutputName = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetSourceOutputName)
    GetSourceOutputIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetSourceOutputIndex)
    UpdateSource = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_UpdateSource)
    GetReleaseDataFlag = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetReleaseDataFlag)
    ShouldIReleaseData = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_ShouldIReleaseData)
    GetDataReleased = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetDataReleased)
    GetPipelineMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetPipelineMTime)
    GetUpdateMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetUpdateMTime)
    GetRealTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetRealTimeStamp)
    DebugOn = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_DebugOn)
    DebugOff = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_DebugOff)
    GetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetDebug)
    SetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_SetDebug)
    GetMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetMTime)
    GetTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetTimeStamp)
    Modified = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_Modified)

    def AddObserver(self, *args) -> "unsigned long":
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageCVF34_ConstPointer_AddObserver(self, *args)

    InvokeEvent = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_InvokeEvent)
    HasObserver = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_HasObserver)
    GetMetaDataDictionary = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetMetaDataDictionary)
    GetObjectName = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetObjectName)
    CreateAnother = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_CreateAnother)
    GetNameOfClass = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetNameOfClass)
    GetReferenceCount = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF34_ConstPointer_GetReferenceCount)

# Register itkImageCVF34_ConstPointer in _itkImageRTKPython:
_itkImageRTKPython.itkImageCVF34_ConstPointer_swigregister(itkImageCVF34_ConstPointer)

class itkImageCVF44_ConstPointer(object):
    r"""Proxy of C++ itkImageCVF44_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkImageCVF44_ConstPointer
        __init__(self, p) -> itkImageCVF44_ConstPointer

        Parameters
        ----------
        p: itkImageCVF44_ConstPointer const &

        __init__(self, p) -> itkImageCVF44_ConstPointer

        Parameters
        ----------
        p: itkImageCVF44 const *

        """
        _itkImageRTKPython.itkImageCVF44_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageCVF44_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVF44_ConstPointer
    __deref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer___deref__)
    __ref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer___ref__)
    IsNotNull = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_IsNotNull)
    IsNull = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_IsNull)
    GetPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetPointer)
    Print = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_Print)
    Swap = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_Swap)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)

    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_Clone)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetPixelContainer)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetNeighborhoodAccessor)
    GetDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetDirection)
    GetInverseDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetInverseDirection)
    GetSpacing = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetSpacing)
    GetOrigin = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetOrigin)
    __GetLargestPossibleRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer___GetLargestPossibleRegion_orig__)
    __GetBufferedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer___GetBufferedRegion_orig__)
    __GetRequestedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer___GetRequestedRegion_orig__)
    GetOffsetTable = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetOffsetTable)
    ComputeOffset = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_ComputeOffset)
    ComputeIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_ComputeIndex)
    GetNumberOfComponentsPerPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetNumberOfComponentsPerPixel)
    GetSource = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetSource)
    GetSourceOutputName = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetSourceOutputName)
    GetSourceOutputIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetSourceOutputIndex)
    UpdateSource = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_UpdateSource)
    GetReleaseDataFlag = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetReleaseDataFlag)
    ShouldIReleaseData = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_ShouldIReleaseData)
    GetDataReleased = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetDataReleased)
    GetPipelineMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetPipelineMTime)
    GetUpdateMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetUpdateMTime)
    GetRealTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetRealTimeStamp)
    DebugOn = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_DebugOn)
    DebugOff = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_DebugOff)
    GetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetDebug)
    SetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_SetDebug)
    GetMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetMTime)
    GetTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetTimeStamp)
    Modified = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_Modified)

    def AddObserver(self, *args) -> "unsigned long":
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageCVF44_ConstPointer_AddObserver(self, *args)

    InvokeEvent = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_InvokeEvent)
    HasObserver = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_HasObserver)
    GetMetaDataDictionary = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetMetaDataDictionary)
    GetObjectName = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetObjectName)
    CreateAnother = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_CreateAnother)
    GetNameOfClass = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetNameOfClass)
    GetReferenceCount = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF44_ConstPointer_GetReferenceCount)

# Register itkImageCVF44_ConstPointer in _itkImageRTKPython:
_itkImageRTKPython.itkImageCVF44_ConstPointer_swigregister(itkImageCVF44_ConstPointer)


def itkImageCVF52_New():
    return itkImageCVF52.New()

class itkImageCVF52(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkImageCVF52 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageCVF52___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF52_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF52_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF52_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF52_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF52_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF52_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF52_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF52_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF52_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF52_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF52_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVF52
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageCVF52_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVF52

        Create a new object of the class itkImageCVF52 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF52.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVF52.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVF52.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVF52 in _itkImageRTKPython:
_itkImageRTKPython.itkImageCVF52_swigregister(itkImageCVF52)
itkImageCVF52___New_orig__ = _itkImageRTKPython.itkImageCVF52___New_orig__
itkImageCVF52_cast = _itkImageRTKPython.itkImageCVF52_cast


def itkImageCVF53_New():
    return itkImageCVF53.New()

class itkImageCVF53(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkImageCVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageCVF53___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF53_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF53_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF53_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF53_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF53_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF53_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF53_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF53_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF53_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF53_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF53_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVF53
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageCVF53_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVF53

        Create a new object of the class itkImageCVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF53.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVF53.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVF53.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVF53 in _itkImageRTKPython:
_itkImageRTKPython.itkImageCVF53_swigregister(itkImageCVF53)
itkImageCVF53___New_orig__ = _itkImageRTKPython.itkImageCVF53___New_orig__
itkImageCVF53_cast = _itkImageRTKPython.itkImageCVF53_cast


def itkImageCVF54_New():
    return itkImageCVF54.New()

class itkImageCVF54(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkImageCVF54 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageCVF54___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVF54
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageCVF54_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageCVF54

        Create a new object of the class itkImageCVF54 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageCVF54.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageCVF54.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageCVF54.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageCVF54 in _itkImageRTKPython:
_itkImageRTKPython.itkImageCVF54_swigregister(itkImageCVF54)
itkImageCVF54___New_orig__ = _itkImageRTKPython.itkImageCVF54___New_orig__
itkImageCVF54_cast = _itkImageRTKPython.itkImageCVF54_cast

class itkImageCVF54_ConstPointer(object):
    r"""Proxy of C++ itkImageCVF54_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkImageCVF54_ConstPointer
        __init__(self, p) -> itkImageCVF54_ConstPointer

        Parameters
        ----------
        p: itkImageCVF54_ConstPointer const &

        __init__(self, p) -> itkImageCVF54_ConstPointer

        Parameters
        ----------
        p: itkImageCVF54 const *

        """
        _itkImageRTKPython.itkImageCVF54_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageCVF54_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageCVF54_ConstPointer
    __deref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer___deref__)
    __ref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer___ref__)
    IsNotNull = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_IsNotNull)
    IsNull = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_IsNull)
    GetPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetPointer)
    Print = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_Print)
    Swap = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_Swap)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)

    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_Clone)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetPixelContainer)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetNeighborhoodAccessor)
    GetDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetDirection)
    GetInverseDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetInverseDirection)
    GetSpacing = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetSpacing)
    GetOrigin = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetOrigin)
    __GetLargestPossibleRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer___GetLargestPossibleRegion_orig__)
    __GetBufferedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer___GetBufferedRegion_orig__)
    __GetRequestedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer___GetRequestedRegion_orig__)
    GetOffsetTable = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetOffsetTable)
    ComputeOffset = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_ComputeOffset)
    ComputeIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_ComputeIndex)
    GetNumberOfComponentsPerPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetNumberOfComponentsPerPixel)
    GetSource = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetSource)
    GetSourceOutputName = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetSourceOutputName)
    GetSourceOutputIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetSourceOutputIndex)
    UpdateSource = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_UpdateSource)
    GetReleaseDataFlag = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetReleaseDataFlag)
    ShouldIReleaseData = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_ShouldIReleaseData)
    GetDataReleased = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetDataReleased)
    GetPipelineMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetPipelineMTime)
    GetUpdateMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetUpdateMTime)
    GetRealTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetRealTimeStamp)
    DebugOn = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_DebugOn)
    DebugOff = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_DebugOff)
    GetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetDebug)
    SetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_SetDebug)
    GetMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetMTime)
    GetTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetTimeStamp)
    Modified = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_Modified)

    def AddObserver(self, *args) -> "unsigned long":
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageCVF54_ConstPointer_AddObserver(self, *args)

    InvokeEvent = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_InvokeEvent)
    HasObserver = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_HasObserver)
    GetMetaDataDictionary = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetMetaDataDictionary)
    GetObjectName = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetObjectName)
    CreateAnother = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_CreateAnother)
    GetNameOfClass = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetNameOfClass)
    GetReferenceCount = _swig_new_instance_method(_itkImageRTKPython.itkImageCVF54_ConstPointer_GetReferenceCount)

# Register itkImageCVF54_ConstPointer in _itkImageRTKPython:
_itkImageRTKPython.itkImageCVF54_ConstPointer_swigregister(itkImageCVF54_ConstPointer)


def itkImageD1_New():
    return itkImageD1.New()

class itkImageD1(itk.itkImageBaseRTKPython.itkImageBase1):
    r"""Proxy of C++ itkImageD1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageD1___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageD1_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageD1_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageD1_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageD1_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageD1_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageD1_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageD1_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageD1_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageD1_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageD1_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageD1_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageD1
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageD1_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageD1

        Create a new object of the class itkImageD1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageD1.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageD1.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageD1.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageD1 in _itkImageRTKPython:
_itkImageRTKPython.itkImageD1_swigregister(itkImageD1)
itkImageD1___New_orig__ = _itkImageRTKPython.itkImageD1___New_orig__
itkImageD1_cast = _itkImageRTKPython.itkImageD1_cast

class itkImageD3_ConstPointer(object):
    r"""Proxy of C++ itkImageD3_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkImageD3_ConstPointer
        __init__(self, p) -> itkImageD3_ConstPointer

        Parameters
        ----------
        p: itkImageD3_ConstPointer const &

        __init__(self, p) -> itkImageD3_ConstPointer

        Parameters
        ----------
        p: itkImageD3 const *

        """
        _itkImageRTKPython.itkImageD3_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageD3_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageD3_ConstPointer
    __deref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer___deref__)
    __ref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer___ref__)
    IsNotNull = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_IsNotNull)
    IsNull = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_IsNull)
    GetPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetPointer)
    Print = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_Print)
    Swap = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_Swap)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)

    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_Clone)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetPixelContainer)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetNeighborhoodAccessor)
    GetDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetDirection)
    GetInverseDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetInverseDirection)
    GetSpacing = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetSpacing)
    GetOrigin = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetOrigin)
    __GetLargestPossibleRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer___GetLargestPossibleRegion_orig__)
    __GetBufferedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer___GetBufferedRegion_orig__)
    __GetRequestedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer___GetRequestedRegion_orig__)
    GetOffsetTable = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetOffsetTable)
    ComputeOffset = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_ComputeOffset)
    ComputeIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_ComputeIndex)
    GetNumberOfComponentsPerPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetNumberOfComponentsPerPixel)
    GetSource = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetSource)
    GetSourceOutputName = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetSourceOutputName)
    GetSourceOutputIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetSourceOutputIndex)
    UpdateSource = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_UpdateSource)
    GetReleaseDataFlag = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetReleaseDataFlag)
    ShouldIReleaseData = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_ShouldIReleaseData)
    GetDataReleased = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetDataReleased)
    GetPipelineMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetPipelineMTime)
    GetUpdateMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetUpdateMTime)
    GetRealTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetRealTimeStamp)
    DebugOn = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_DebugOn)
    DebugOff = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_DebugOff)
    GetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetDebug)
    SetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_SetDebug)
    GetMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetMTime)
    GetTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetTimeStamp)
    Modified = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_Modified)

    def AddObserver(self, *args) -> "unsigned long":
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageD3_ConstPointer_AddObserver(self, *args)

    InvokeEvent = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_InvokeEvent)
    HasObserver = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_HasObserver)
    GetMetaDataDictionary = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetMetaDataDictionary)
    GetObjectName = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetObjectName)
    CreateAnother = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_CreateAnother)
    GetNameOfClass = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetNameOfClass)
    GetReferenceCount = _swig_new_instance_method(_itkImageRTKPython.itkImageD3_ConstPointer_GetReferenceCount)

# Register itkImageD3_ConstPointer in _itkImageRTKPython:
_itkImageRTKPython.itkImageD3_ConstPointer_swigregister(itkImageD3_ConstPointer)

class itkImageD4_ConstPointer(object):
    r"""Proxy of C++ itkImageD4_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkImageD4_ConstPointer
        __init__(self, p) -> itkImageD4_ConstPointer

        Parameters
        ----------
        p: itkImageD4_ConstPointer const &

        __init__(self, p) -> itkImageD4_ConstPointer

        Parameters
        ----------
        p: itkImageD4 const *

        """
        _itkImageRTKPython.itkImageD4_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageD4_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageD4_ConstPointer
    __deref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer___deref__)
    __ref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer___ref__)
    IsNotNull = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_IsNotNull)
    IsNull = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_IsNull)
    GetPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetPointer)
    Print = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_Print)
    Swap = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_Swap)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)

    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_Clone)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetPixelContainer)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetNeighborhoodAccessor)
    GetDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetDirection)
    GetInverseDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetInverseDirection)
    GetSpacing = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetSpacing)
    GetOrigin = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetOrigin)
    __GetLargestPossibleRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer___GetLargestPossibleRegion_orig__)
    __GetBufferedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer___GetBufferedRegion_orig__)
    __GetRequestedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer___GetRequestedRegion_orig__)
    GetOffsetTable = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetOffsetTable)
    ComputeOffset = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_ComputeOffset)
    ComputeIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_ComputeIndex)
    GetNumberOfComponentsPerPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetNumberOfComponentsPerPixel)
    GetSource = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetSource)
    GetSourceOutputName = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetSourceOutputName)
    GetSourceOutputIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetSourceOutputIndex)
    UpdateSource = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_UpdateSource)
    GetReleaseDataFlag = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetReleaseDataFlag)
    ShouldIReleaseData = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_ShouldIReleaseData)
    GetDataReleased = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetDataReleased)
    GetPipelineMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetPipelineMTime)
    GetUpdateMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetUpdateMTime)
    GetRealTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetRealTimeStamp)
    DebugOn = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_DebugOn)
    DebugOff = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_DebugOff)
    GetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetDebug)
    SetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_SetDebug)
    GetMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetMTime)
    GetTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetTimeStamp)
    Modified = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_Modified)

    def AddObserver(self, *args) -> "unsigned long":
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageD4_ConstPointer_AddObserver(self, *args)

    InvokeEvent = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_InvokeEvent)
    HasObserver = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_HasObserver)
    GetMetaDataDictionary = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetMetaDataDictionary)
    GetObjectName = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetObjectName)
    CreateAnother = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_CreateAnother)
    GetNameOfClass = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetNameOfClass)
    GetReferenceCount = _swig_new_instance_method(_itkImageRTKPython.itkImageD4_ConstPointer_GetReferenceCount)

# Register itkImageD4_ConstPointer in _itkImageRTKPython:
_itkImageRTKPython.itkImageD4_ConstPointer_swigregister(itkImageD4_ConstPointer)


def itkImageF1_New():
    return itkImageF1.New()

class itkImageF1(itk.itkImageBaseRTKPython.itkImageBase1):
    r"""Proxy of C++ itkImageF1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageF1___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageF1_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageF1_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageF1_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageF1_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageF1_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageF1_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageF1_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageF1_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageF1_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageF1_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageF1_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageF1
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageF1_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageF1

        Create a new object of the class itkImageF1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageF1.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageF1.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageF1.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageF1 in _itkImageRTKPython:
_itkImageRTKPython.itkImageF1_swigregister(itkImageF1)
itkImageF1___New_orig__ = _itkImageRTKPython.itkImageF1___New_orig__
itkImageF1_cast = _itkImageRTKPython.itkImageF1_cast

class itkImageF2_ConstPointer(object):
    r"""Proxy of C++ itkImageF2_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkImageF2_ConstPointer
        __init__(self, p) -> itkImageF2_ConstPointer

        Parameters
        ----------
        p: itkImageF2_ConstPointer const &

        __init__(self, p) -> itkImageF2_ConstPointer

        Parameters
        ----------
        p: itkImageF2 const *

        """
        _itkImageRTKPython.itkImageF2_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageF2_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageF2_ConstPointer
    __deref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer___deref__)
    __ref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer___ref__)
    IsNotNull = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_IsNotNull)
    IsNull = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_IsNull)
    GetPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetPointer)
    Print = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_Print)
    Swap = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_Swap)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)

    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_Clone)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetPixelContainer)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetNeighborhoodAccessor)
    GetDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetDirection)
    GetInverseDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetInverseDirection)
    GetSpacing = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetSpacing)
    GetOrigin = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetOrigin)
    __GetLargestPossibleRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer___GetLargestPossibleRegion_orig__)
    __GetBufferedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer___GetBufferedRegion_orig__)
    __GetRequestedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer___GetRequestedRegion_orig__)
    GetOffsetTable = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetOffsetTable)
    ComputeOffset = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_ComputeOffset)
    ComputeIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_ComputeIndex)
    GetNumberOfComponentsPerPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetNumberOfComponentsPerPixel)
    GetSource = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetSource)
    GetSourceOutputName = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetSourceOutputName)
    GetSourceOutputIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetSourceOutputIndex)
    UpdateSource = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_UpdateSource)
    GetReleaseDataFlag = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetReleaseDataFlag)
    ShouldIReleaseData = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_ShouldIReleaseData)
    GetDataReleased = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetDataReleased)
    GetPipelineMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetPipelineMTime)
    GetUpdateMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetUpdateMTime)
    GetRealTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetRealTimeStamp)
    DebugOn = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_DebugOn)
    DebugOff = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_DebugOff)
    GetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetDebug)
    SetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_SetDebug)
    GetMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetMTime)
    GetTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetTimeStamp)
    Modified = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_Modified)

    def AddObserver(self, *args) -> "unsigned long":
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageF2_ConstPointer_AddObserver(self, *args)

    InvokeEvent = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_InvokeEvent)
    HasObserver = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_HasObserver)
    GetMetaDataDictionary = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetMetaDataDictionary)
    GetObjectName = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetObjectName)
    CreateAnother = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_CreateAnother)
    GetNameOfClass = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetNameOfClass)
    GetReferenceCount = _swig_new_instance_method(_itkImageRTKPython.itkImageF2_ConstPointer_GetReferenceCount)

# Register itkImageF2_ConstPointer in _itkImageRTKPython:
_itkImageRTKPython.itkImageF2_ConstPointer_swigregister(itkImageF2_ConstPointer)

class itkImageF3_ConstPointer(object):
    r"""Proxy of C++ itkImageF3_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkImageF3_ConstPointer
        __init__(self, p) -> itkImageF3_ConstPointer

        Parameters
        ----------
        p: itkImageF3_ConstPointer const &

        __init__(self, p) -> itkImageF3_ConstPointer

        Parameters
        ----------
        p: itkImageF3 const *

        """
        _itkImageRTKPython.itkImageF3_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageF3_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageF3_ConstPointer
    __deref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer___deref__)
    __ref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer___ref__)
    IsNotNull = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_IsNotNull)
    IsNull = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_IsNull)
    GetPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetPointer)
    Print = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_Print)
    Swap = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_Swap)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)

    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_Clone)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetPixelContainer)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetNeighborhoodAccessor)
    GetDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetDirection)
    GetInverseDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetInverseDirection)
    GetSpacing = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetSpacing)
    GetOrigin = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetOrigin)
    __GetLargestPossibleRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer___GetLargestPossibleRegion_orig__)
    __GetBufferedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer___GetBufferedRegion_orig__)
    __GetRequestedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer___GetRequestedRegion_orig__)
    GetOffsetTable = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetOffsetTable)
    ComputeOffset = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_ComputeOffset)
    ComputeIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_ComputeIndex)
    GetNumberOfComponentsPerPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetNumberOfComponentsPerPixel)
    GetSource = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetSource)
    GetSourceOutputName = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetSourceOutputName)
    GetSourceOutputIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetSourceOutputIndex)
    UpdateSource = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_UpdateSource)
    GetReleaseDataFlag = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetReleaseDataFlag)
    ShouldIReleaseData = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_ShouldIReleaseData)
    GetDataReleased = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetDataReleased)
    GetPipelineMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetPipelineMTime)
    GetUpdateMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetUpdateMTime)
    GetRealTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetRealTimeStamp)
    DebugOn = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_DebugOn)
    DebugOff = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_DebugOff)
    GetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetDebug)
    SetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_SetDebug)
    GetMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetMTime)
    GetTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetTimeStamp)
    Modified = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_Modified)

    def AddObserver(self, *args) -> "unsigned long":
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageF3_ConstPointer_AddObserver(self, *args)

    InvokeEvent = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_InvokeEvent)
    HasObserver = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_HasObserver)
    GetMetaDataDictionary = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetMetaDataDictionary)
    GetObjectName = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetObjectName)
    CreateAnother = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_CreateAnother)
    GetNameOfClass = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetNameOfClass)
    GetReferenceCount = _swig_new_instance_method(_itkImageRTKPython.itkImageF3_ConstPointer_GetReferenceCount)

# Register itkImageF3_ConstPointer in _itkImageRTKPython:
_itkImageRTKPython.itkImageF3_ConstPointer_swigregister(itkImageF3_ConstPointer)

class itkImageF4_ConstPointer(object):
    r"""Proxy of C++ itkImageF4_ConstPointer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> itkImageF4_ConstPointer
        __init__(self, p) -> itkImageF4_ConstPointer

        Parameters
        ----------
        p: itkImageF4_ConstPointer const &

        __init__(self, p) -> itkImageF4_ConstPointer

        Parameters
        ----------
        p: itkImageF4 const *

        """
        _itkImageRTKPython.itkImageF4_ConstPointer_swiginit(self, _itkImageRTKPython.new_itkImageF4_ConstPointer(*args))
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageF4_ConstPointer
    __deref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer___deref__)
    __ref__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer___ref__)
    IsNotNull = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_IsNotNull)
    IsNull = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_IsNull)
    GetPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetPointer)
    Print = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_Print)
    Swap = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_Swap)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)

    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_Clone)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetPixelContainer)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetNeighborhoodAccessor)
    GetDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetDirection)
    GetInverseDirection = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetInverseDirection)
    GetSpacing = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetSpacing)
    GetOrigin = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetOrigin)
    __GetLargestPossibleRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer___GetLargestPossibleRegion_orig__)
    __GetBufferedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer___GetBufferedRegion_orig__)
    __GetRequestedRegion_orig__ = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer___GetRequestedRegion_orig__)
    GetOffsetTable = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetOffsetTable)
    ComputeOffset = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_ComputeOffset)
    ComputeIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_ComputeIndex)
    GetNumberOfComponentsPerPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetNumberOfComponentsPerPixel)
    GetSource = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetSource)
    GetSourceOutputName = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetSourceOutputName)
    GetSourceOutputIndex = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetSourceOutputIndex)
    UpdateSource = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_UpdateSource)
    GetReleaseDataFlag = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetReleaseDataFlag)
    ShouldIReleaseData = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_ShouldIReleaseData)
    GetDataReleased = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetDataReleased)
    GetPipelineMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetPipelineMTime)
    GetUpdateMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetUpdateMTime)
    GetRealTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetRealTimeStamp)
    DebugOn = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_DebugOn)
    DebugOff = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_DebugOff)
    GetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetDebug)
    SetDebug = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_SetDebug)
    GetMTime = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetMTime)
    GetTimeStamp = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetTimeStamp)
    Modified = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_Modified)

    def AddObserver(self, *args) -> "unsigned long":
        r"""
        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        AddObserver(self, event, arg1) -> unsigned long

        Parameters
        ----------
        event: itkEventObject const &
        arg1: itkCommand *

        """

        import itk
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[2] )
            args[2] = pycommand
            args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
            args = list(args)
            pycommand = itk.PyCommand.New()
            pycommand.SetCommandCallable( args[1] )
            args[1] = pycommand
            args = tuple(args)


        return _itkImageRTKPython.itkImageF4_ConstPointer_AddObserver(self, *args)

    InvokeEvent = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_InvokeEvent)
    HasObserver = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_HasObserver)
    GetMetaDataDictionary = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetMetaDataDictionary)
    GetObjectName = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetObjectName)
    CreateAnother = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_CreateAnother)
    GetNameOfClass = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetNameOfClass)
    GetReferenceCount = _swig_new_instance_method(_itkImageRTKPython.itkImageF4_ConstPointer_GetReferenceCount)

# Register itkImageF4_ConstPointer in _itkImageRTKPython:
_itkImageRTKPython.itkImageF4_ConstPointer_swigregister(itkImageF4_ConstPointer)


def itkImageUC1_New():
    return itkImageUC1.New()

class itkImageUC1(itk.itkImageBaseRTKPython.itkImageBase1):
    r"""Proxy of C++ itkImageUC1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageUC1___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageUC1_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageUC1_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageUC1_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageUC1_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageUC1_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageUC1_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageUC1_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageUC1_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageUC1_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageUC1_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageUC1_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageUC1
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageUC1_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageUC1

        Create a new object of the class itkImageUC1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUC1.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageUC1.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageUC1.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageUC1 in _itkImageRTKPython:
_itkImageRTKPython.itkImageUC1_swigregister(itkImageUC1)
itkImageUC1___New_orig__ = _itkImageRTKPython.itkImageUC1___New_orig__
itkImageUC1_cast = _itkImageRTKPython.itkImageUC1_cast


def itkImageUS1_New():
    return itkImageUS1.New()

class itkImageUS1(itk.itkImageBaseRTKPython.itkImageBase1):
    r"""Proxy of C++ itkImageUS1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageUS1___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageUS1_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageUS1_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageUS1_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageUS1_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageUS1_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageUS1_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageUS1_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageUS1_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageUS1_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageUS1_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageUS1_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageUS1
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageUS1_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageUS1

        Create a new object of the class itkImageUS1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageUS1.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageUS1.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageUS1.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageUS1 in _itkImageRTKPython:
_itkImageRTKPython.itkImageUS1_swigregister(itkImageUS1)
itkImageUS1___New_orig__ = _itkImageRTKPython.itkImageUS1___New_orig__
itkImageUS1_cast = _itkImageRTKPython.itkImageUS1_cast


def itkImageVF52_New():
    return itkImageVF52.New()

class itkImageVF52(itk.itkImagePython.itkImageBase2):
    r"""Proxy of C++ itkImageVF52 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageVF52___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageVF52_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageVF52_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF52_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageVF52_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageVF52_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF52_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF52_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF52_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageVF52_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageVF52_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageVF52_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageVF52
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageVF52_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF52

        Create a new object of the class itkImageVF52 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF52.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF52.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF52.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF52 in _itkImageRTKPython:
_itkImageRTKPython.itkImageVF52_swigregister(itkImageVF52)
itkImageVF52___New_orig__ = _itkImageRTKPython.itkImageVF52___New_orig__
itkImageVF52_cast = _itkImageRTKPython.itkImageVF52_cast


def itkImageVF53_New():
    return itkImageVF53.New()

class itkImageVF53(itk.itkImagePython.itkImageBase3):
    r"""Proxy of C++ itkImageVF53 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageVF53___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageVF53_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageVF53_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF53_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageVF53_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageVF53_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF53_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF53_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF53_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageVF53_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageVF53_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageVF53_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageVF53
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageVF53_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF53

        Create a new object of the class itkImageVF53 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF53.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF53.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF53.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF53 in _itkImageRTKPython:
_itkImageRTKPython.itkImageVF53_swigregister(itkImageVF53)
itkImageVF53___New_orig__ = _itkImageRTKPython.itkImageVF53___New_orig__
itkImageVF53_cast = _itkImageRTKPython.itkImageVF53_cast


def itkImageVF54_New():
    return itkImageVF54.New()

class itkImageVF54(itk.itkImagePython.itkImageBase4):
    r"""Proxy of C++ itkImageVF54 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRTKPython.itkImageVF54___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRTKPython.itkImageVF54_Clone)
    Allocate = _swig_new_instance_method(_itkImageRTKPython.itkImageVF54_Allocate)
    FillBuffer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF54_FillBuffer)
    SetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageVF54_SetPixel)
    GetPixel = _swig_new_instance_method(_itkImageRTKPython.itkImageVF54_GetPixel)
    GetBufferPointer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF54_GetBufferPointer)
    GetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF54_GetPixelContainer)
    SetPixelContainer = _swig_new_instance_method(_itkImageRTKPython.itkImageVF54_SetPixelContainer)
    Graft = _swig_new_instance_method(_itkImageRTKPython.itkImageVF54_Graft)
    GetPixelAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageVF54_GetPixelAccessor)
    GetNeighborhoodAccessor = _swig_new_instance_method(_itkImageRTKPython.itkImageVF54_GetNeighborhoodAccessor)
    __swig_destroy__ = _itkImageRTKPython.delete_itkImageVF54
    cast = _swig_new_static_method(_itkImageRTKPython.itkImageVF54_cast)

    def __array__(self, dtype=None):
        import itk
        import numpy as np
        array = itk.array_from_image(self)
        return np.asarray(array, dtype=dtype)


    def New(*args, **kargs):
        """New() -> itkImageVF54

        Create a new object of the class itkImageVF54 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageVF54.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageVF54.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageVF54.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageVF54 in _itkImageRTKPython:
_itkImageRTKPython.itkImageVF54_swigregister(itkImageVF54)
itkImageVF54___New_orig__ = _itkImageRTKPython.itkImageVF54___New_orig__
itkImageVF54_cast = _itkImageRTKPython.itkImageVF54_cast



