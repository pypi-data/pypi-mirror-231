# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkJosephBackAttenuatedProjectionImageFilterPython
else:
    import _rtkJosephBackAttenuatedProjectionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkJosephBackAttenuatedProjectionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkJosephBackAttenuatedProjectionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.rtkBackProjectionImageFilterPython
import itk.itkInPlaceImageFilterRTKPython
import itk.itkImageToImageFilterAPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageToImageFilterCommonPython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterRTKPython
import itk.itkCudaImagePython
import itk.itkCudaImageDataManagerPython
import itk.itkCudaDataManagerPython
import itk.itkImageRegionRTKPython
import itk.itkCudaImageRTKPython
import itk.itkCudaImageDataManagerRTKPython
import itk.itkImageRTKPython
import itk.itkImageBaseRTKPython
import itk.itkPointRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkImageSourceRTKPython
import itk.itkImageSourceCudaCommonPython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
class rtkComputeAttenuationCorrectionBackProjectionDD(object):
    r"""Proxy of C++ rtkComputeAttenuationCorrectionBackProjectionDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkJosephBackAttenuatedProjectionImageFilterPython.delete_rtkComputeAttenuationCorrectionBackProjectionDD
    __ne__ = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionBackProjectionDD___ne__)
    __eq__ = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionBackProjectionDD___eq__)
    __call__ = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionBackProjectionDD___call__)
    SetAttenuationPixel = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionBackProjectionDD_SetAttenuationPixel)

    def __init__(self, *args):
        r"""
        __init__(self) -> rtkComputeAttenuationCorrectionBackProjectionDD
        __init__(self, arg0) -> rtkComputeAttenuationCorrectionBackProjectionDD

        Parameters
        ----------
        arg0: rtkComputeAttenuationCorrectionBackProjectionDD const &

        """
        _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionBackProjectionDD_swiginit(self, _rtkJosephBackAttenuatedProjectionImageFilterPython.new_rtkComputeAttenuationCorrectionBackProjectionDD(*args))

# Register rtkComputeAttenuationCorrectionBackProjectionDD in _rtkJosephBackAttenuatedProjectionImageFilterPython:
_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionBackProjectionDD_swigregister(rtkComputeAttenuationCorrectionBackProjectionDD)

class rtkComputeAttenuationCorrectionBackProjectionFF(object):
    r"""Proxy of C++ rtkComputeAttenuationCorrectionBackProjectionFF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkJosephBackAttenuatedProjectionImageFilterPython.delete_rtkComputeAttenuationCorrectionBackProjectionFF
    __ne__ = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionBackProjectionFF___ne__)
    __eq__ = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionBackProjectionFF___eq__)
    __call__ = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionBackProjectionFF___call__)
    SetAttenuationPixel = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionBackProjectionFF_SetAttenuationPixel)

    def __init__(self, *args):
        r"""
        __init__(self) -> rtkComputeAttenuationCorrectionBackProjectionFF
        __init__(self, arg0) -> rtkComputeAttenuationCorrectionBackProjectionFF

        Parameters
        ----------
        arg0: rtkComputeAttenuationCorrectionBackProjectionFF const &

        """
        _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionBackProjectionFF_swiginit(self, _rtkJosephBackAttenuatedProjectionImageFilterPython.new_rtkComputeAttenuationCorrectionBackProjectionFF(*args))

# Register rtkComputeAttenuationCorrectionBackProjectionFF in _rtkJosephBackAttenuatedProjectionImageFilterPython:
_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionBackProjectionFF_swigregister(rtkComputeAttenuationCorrectionBackProjectionFF)

class rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD(object):
    r"""Proxy of C++ rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkJosephBackAttenuatedProjectionImageFilterPython.delete_rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD
    __ne__ = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD___ne__)
    __eq__ = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD___eq__)
    __call__ = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD___call__)
    SetAttenuationMinusEmissionMapsPtrDiff = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD_SetAttenuationMinusEmissionMapsPtrDiff)
    GetAttenuationPixel = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD_GetAttenuationPixel)

    def __init__(self, *args):
        r"""
        __init__(self) -> rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD
        __init__(self, arg0) -> rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD

        Parameters
        ----------
        arg0: rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD const &

        """
        _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD_swiginit(self, _rtkJosephBackAttenuatedProjectionImageFilterPython.new_rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD(*args))

# Register rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD in _rtkJosephBackAttenuatedProjectionImageFilterPython:
_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD_swigregister(rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionDDD)

class rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF(object):
    r"""Proxy of C++ rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkJosephBackAttenuatedProjectionImageFilterPython.delete_rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF
    __ne__ = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF___ne__)
    __eq__ = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF___eq__)
    __call__ = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF___call__)
    SetAttenuationMinusEmissionMapsPtrDiff = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF_SetAttenuationMinusEmissionMapsPtrDiff)
    GetAttenuationPixel = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF_GetAttenuationPixel)

    def __init__(self, *args):
        r"""
        __init__(self) -> rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF
        __init__(self, arg0) -> rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF

        Parameters
        ----------
        arg0: rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF const &

        """
        _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF_swiginit(self, _rtkJosephBackAttenuatedProjectionImageFilterPython.new_rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF(*args))

# Register rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF in _rtkJosephBackAttenuatedProjectionImageFilterPython:
_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF_swigregister(rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionFFF)

class rtkFunctorSplatWeightMultiplicationAttenuatedDDD(object):
    r"""Proxy of C++ rtkFunctorSplatWeightMultiplicationAttenuatedDDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkJosephBackAttenuatedProjectionImageFilterPython.delete_rtkFunctorSplatWeightMultiplicationAttenuatedDDD
    __ne__ = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationAttenuatedDDD___ne__)
    __eq__ = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationAttenuatedDDD___eq__)
    __call__ = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationAttenuatedDDD___call__)

    def __init__(self, *args):
        r"""
        __init__(self) -> rtkFunctorSplatWeightMultiplicationAttenuatedDDD
        __init__(self, arg0) -> rtkFunctorSplatWeightMultiplicationAttenuatedDDD

        Parameters
        ----------
        arg0: rtkFunctorSplatWeightMultiplicationAttenuatedDDD const &

        """
        _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationAttenuatedDDD_swiginit(self, _rtkJosephBackAttenuatedProjectionImageFilterPython.new_rtkFunctorSplatWeightMultiplicationAttenuatedDDD(*args))

# Register rtkFunctorSplatWeightMultiplicationAttenuatedDDD in _rtkJosephBackAttenuatedProjectionImageFilterPython:
_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationAttenuatedDDD_swigregister(rtkFunctorSplatWeightMultiplicationAttenuatedDDD)

class rtkFunctorSplatWeightMultiplicationAttenuatedFDF(object):
    r"""Proxy of C++ rtkFunctorSplatWeightMultiplicationAttenuatedFDF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkJosephBackAttenuatedProjectionImageFilterPython.delete_rtkFunctorSplatWeightMultiplicationAttenuatedFDF
    __ne__ = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationAttenuatedFDF___ne__)
    __eq__ = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationAttenuatedFDF___eq__)
    __call__ = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationAttenuatedFDF___call__)

    def __init__(self, *args):
        r"""
        __init__(self) -> rtkFunctorSplatWeightMultiplicationAttenuatedFDF
        __init__(self, arg0) -> rtkFunctorSplatWeightMultiplicationAttenuatedFDF

        Parameters
        ----------
        arg0: rtkFunctorSplatWeightMultiplicationAttenuatedFDF const &

        """
        _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationAttenuatedFDF_swiginit(self, _rtkJosephBackAttenuatedProjectionImageFilterPython.new_rtkFunctorSplatWeightMultiplicationAttenuatedFDF(*args))

# Register rtkFunctorSplatWeightMultiplicationAttenuatedFDF in _rtkJosephBackAttenuatedProjectionImageFilterPython:
_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationAttenuatedFDF_swigregister(rtkFunctorSplatWeightMultiplicationAttenuatedFDF)


def rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_New():
    return rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS.New()

class rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS(itk.rtkBackProjectionImageFilterPython.rtkBackProjectionImageFilterID3ID3):
    r"""Proxy of C++ rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS___New_orig__)
    Clone = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_Clone)
    GetInterpolationWeightMultiplication = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_GetInterpolationWeightMultiplication)
    SetInterpolationWeightMultiplication = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_SetInterpolationWeightMultiplication)
    GetSplatWeightMultiplication = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_GetSplatWeightMultiplication)
    SetSplatWeightMultiplication = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_SetSplatWeightMultiplication)
    GetSumAlongRay = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_GetSumAlongRay)
    SetSumAlongRay = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_SetSumAlongRay)
    GetInferiorClip = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_GetInferiorClip)
    SetInferiorClip = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_SetInferiorClip)
    GetSuperiorClip = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_GetSuperiorClip)
    SetSuperiorClip = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_SetSuperiorClip)
    __swig_destroy__ = _rtkJosephBackAttenuatedProjectionImageFilterPython.delete_rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS
    cast = _swig_new_static_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_cast)

    def New(*args, **kargs):
        """New() -> rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS

        Create a new object of the class rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS in _rtkJosephBackAttenuatedProjectionImageFilterPython:
_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_swigregister(rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS)
rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS___New_orig__ = _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS___New_orig__
rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_cast = _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS_cast


def rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_New():
    return rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS.New()

class rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS(itk.rtkBackProjectionImageFilterPython.rtkBackProjectionImageFilterIF3IF3):
    r"""Proxy of C++ rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS___New_orig__)
    Clone = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_Clone)
    GetInterpolationWeightMultiplication = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_GetInterpolationWeightMultiplication)
    SetInterpolationWeightMultiplication = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_SetInterpolationWeightMultiplication)
    GetSplatWeightMultiplication = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_GetSplatWeightMultiplication)
    SetSplatWeightMultiplication = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_SetSplatWeightMultiplication)
    GetSumAlongRay = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_GetSumAlongRay)
    SetSumAlongRay = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_SetSumAlongRay)
    GetInferiorClip = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_GetInferiorClip)
    SetInferiorClip = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_SetInferiorClip)
    GetSuperiorClip = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_GetSuperiorClip)
    SetSuperiorClip = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_SetSuperiorClip)
    __swig_destroy__ = _rtkJosephBackAttenuatedProjectionImageFilterPython.delete_rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS
    cast = _swig_new_static_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_cast)

    def New(*args, **kargs):
        """New() -> rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS

        Create a new object of the class rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS in _rtkJosephBackAttenuatedProjectionImageFilterPython:
_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_swigregister(rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS)
rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS___New_orig__ = _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS___New_orig__
rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_cast = _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS_cast


def rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD_New():
    return rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD.New()

class rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD(rtkJosephBackProjectionImageFilterID3ID3SWMDDDIS):
    r"""Proxy of C++ rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD___New_orig__)
    Clone = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD_Clone)
    __swig_destroy__ = _rtkJosephBackAttenuatedProjectionImageFilterPython.delete_rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD
    cast = _swig_new_static_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD_cast)

    def New(*args, **kargs):
        """New() -> rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD

        Create a new object of the class rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD in _rtkJosephBackAttenuatedProjectionImageFilterPython:
_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD_swigregister(rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD)
rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD___New_orig__ = _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD___New_orig__
rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD_cast = _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackAttenuatedProjectionImageFilterID3ID3SWMDDD_cast


def rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF_New():
    return rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF.New()

class rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF(rtkJosephBackProjectionImageFilterIF3IF3SWMFDFIS):
    r"""Proxy of C++ rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF___New_orig__)
    Clone = _swig_new_instance_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF_Clone)
    __swig_destroy__ = _rtkJosephBackAttenuatedProjectionImageFilterPython.delete_rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF
    cast = _swig_new_static_method(_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF_cast)

    def New(*args, **kargs):
        """New() -> rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF

        Create a new object of the class rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF in _rtkJosephBackAttenuatedProjectionImageFilterPython:
_rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF_swigregister(rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF)
rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF___New_orig__ = _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF___New_orig__
rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF_cast = _rtkJosephBackAttenuatedProjectionImageFilterPython.rtkJosephBackAttenuatedProjectionImageFilterIF3IF3SWMFDF_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def joseph_back_projection_image_filter(*args: itkt.ImageLike,  interpolation_weight_multiplication=..., splat_weight_multiplication=..., sum_along_ray=..., inferior_clip: float=..., superior_clip: float=..., geometry=..., transpose: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for JosephBackProjectionImageFilter"""
    import itk

    kwarg_typehints = { 'interpolation_weight_multiplication':interpolation_weight_multiplication,'splat_weight_multiplication':splat_weight_multiplication,'sum_along_ray':sum_along_ray,'inferior_clip':inferior_clip,'superior_clip':superior_clip,'geometry':geometry,'transpose':transpose }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.JosephBackProjectionImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def joseph_back_projection_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.JosephBackProjectionImageFilter
    joseph_back_projection_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    joseph_back_projection_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def joseph_back_attenuated_projection_image_filter(*args: itkt.ImageLike,  interpolation_weight_multiplication=..., splat_weight_multiplication=..., sum_along_ray=..., inferior_clip: float=..., superior_clip: float=..., geometry=..., transpose: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for JosephBackAttenuatedProjectionImageFilter"""
    import itk

    kwarg_typehints = { 'interpolation_weight_multiplication':interpolation_weight_multiplication,'splat_weight_multiplication':splat_weight_multiplication,'sum_along_ray':sum_along_ray,'inferior_clip':inferior_clip,'superior_clip':superior_clip,'geometry':geometry,'transpose':transpose }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.JosephBackAttenuatedProjectionImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def joseph_back_attenuated_projection_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.JosephBackAttenuatedProjectionImageFilter
    joseph_back_attenuated_projection_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    joseph_back_attenuated_projection_image_filter.__doc__ = filter_object.__doc__




