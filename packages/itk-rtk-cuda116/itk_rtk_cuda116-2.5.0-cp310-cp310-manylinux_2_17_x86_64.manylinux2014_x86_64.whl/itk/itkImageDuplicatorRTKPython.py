# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkImageDuplicatorRTKPython
else:
    import _itkImageDuplicatorRTKPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkImageDuplicatorRTKPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkImageDuplicatorRTKPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkImageRTKPython
import itk.itkImagePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkImageBaseRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkPointRTKPython
import itk.itkImageRegionRTKPython

def itkImageDuplicatorID1_New():
    return itkImageDuplicatorID1.New()

class itkImageDuplicatorID1(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkImageDuplicatorID1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorRTKPython.itkImageDuplicatorID1___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorRTKPython.itkImageDuplicatorID1_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorRTKPython.itkImageDuplicatorID1_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorRTKPython.itkImageDuplicatorID1_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorRTKPython.itkImageDuplicatorID1_Update)
    __swig_destroy__ = _itkImageDuplicatorRTKPython.delete_itkImageDuplicatorID1
    cast = _swig_new_static_method(_itkImageDuplicatorRTKPython.itkImageDuplicatorID1_cast)

    def New(*args, **kargs):
        """New() -> itkImageDuplicatorID1

        Create a new object of the class itkImageDuplicatorID1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorID1.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorID1.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorID1.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorID1 in _itkImageDuplicatorRTKPython:
_itkImageDuplicatorRTKPython.itkImageDuplicatorID1_swigregister(itkImageDuplicatorID1)
itkImageDuplicatorID1___New_orig__ = _itkImageDuplicatorRTKPython.itkImageDuplicatorID1___New_orig__
itkImageDuplicatorID1_cast = _itkImageDuplicatorRTKPython.itkImageDuplicatorID1_cast


def itkImageDuplicatorIF1_New():
    return itkImageDuplicatorIF1.New()

class itkImageDuplicatorIF1(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkImageDuplicatorIF1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorRTKPython.itkImageDuplicatorIF1___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorRTKPython.itkImageDuplicatorIF1_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorRTKPython.itkImageDuplicatorIF1_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorRTKPython.itkImageDuplicatorIF1_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorRTKPython.itkImageDuplicatorIF1_Update)
    __swig_destroy__ = _itkImageDuplicatorRTKPython.delete_itkImageDuplicatorIF1
    cast = _swig_new_static_method(_itkImageDuplicatorRTKPython.itkImageDuplicatorIF1_cast)

    def New(*args, **kargs):
        """New() -> itkImageDuplicatorIF1

        Create a new object of the class itkImageDuplicatorIF1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorIF1.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorIF1.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorIF1.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorIF1 in _itkImageDuplicatorRTKPython:
_itkImageDuplicatorRTKPython.itkImageDuplicatorIF1_swigregister(itkImageDuplicatorIF1)
itkImageDuplicatorIF1___New_orig__ = _itkImageDuplicatorRTKPython.itkImageDuplicatorIF1___New_orig__
itkImageDuplicatorIF1_cast = _itkImageDuplicatorRTKPython.itkImageDuplicatorIF1_cast


def itkImageDuplicatorIUC1_New():
    return itkImageDuplicatorIUC1.New()

class itkImageDuplicatorIUC1(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkImageDuplicatorIUC1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorRTKPython.itkImageDuplicatorIUC1___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorRTKPython.itkImageDuplicatorIUC1_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorRTKPython.itkImageDuplicatorIUC1_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorRTKPython.itkImageDuplicatorIUC1_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorRTKPython.itkImageDuplicatorIUC1_Update)
    __swig_destroy__ = _itkImageDuplicatorRTKPython.delete_itkImageDuplicatorIUC1
    cast = _swig_new_static_method(_itkImageDuplicatorRTKPython.itkImageDuplicatorIUC1_cast)

    def New(*args, **kargs):
        """New() -> itkImageDuplicatorIUC1

        Create a new object of the class itkImageDuplicatorIUC1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorIUC1.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorIUC1.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorIUC1.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorIUC1 in _itkImageDuplicatorRTKPython:
_itkImageDuplicatorRTKPython.itkImageDuplicatorIUC1_swigregister(itkImageDuplicatorIUC1)
itkImageDuplicatorIUC1___New_orig__ = _itkImageDuplicatorRTKPython.itkImageDuplicatorIUC1___New_orig__
itkImageDuplicatorIUC1_cast = _itkImageDuplicatorRTKPython.itkImageDuplicatorIUC1_cast


def itkImageDuplicatorIUS1_New():
    return itkImageDuplicatorIUS1.New()

class itkImageDuplicatorIUS1(itk.ITKCommonBasePython.itkObject):
    r"""Proxy of C++ itkImageDuplicatorIUS1 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageDuplicatorRTKPython.itkImageDuplicatorIUS1___New_orig__)
    Clone = _swig_new_instance_method(_itkImageDuplicatorRTKPython.itkImageDuplicatorIUS1_Clone)
    SetInputImage = _swig_new_instance_method(_itkImageDuplicatorRTKPython.itkImageDuplicatorIUS1_SetInputImage)
    GetOutput = _swig_new_instance_method(_itkImageDuplicatorRTKPython.itkImageDuplicatorIUS1_GetOutput)
    Update = _swig_new_instance_method(_itkImageDuplicatorRTKPython.itkImageDuplicatorIUS1_Update)
    __swig_destroy__ = _itkImageDuplicatorRTKPython.delete_itkImageDuplicatorIUS1
    cast = _swig_new_static_method(_itkImageDuplicatorRTKPython.itkImageDuplicatorIUS1_cast)

    def New(*args, **kargs):
        """New() -> itkImageDuplicatorIUS1

        Create a new object of the class itkImageDuplicatorIUS1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageDuplicatorIUS1.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageDuplicatorIUS1.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageDuplicatorIUS1.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageDuplicatorIUS1 in _itkImageDuplicatorRTKPython:
_itkImageDuplicatorRTKPython.itkImageDuplicatorIUS1_swigregister(itkImageDuplicatorIUS1)
itkImageDuplicatorIUS1___New_orig__ = _itkImageDuplicatorRTKPython.itkImageDuplicatorIUS1___New_orig__
itkImageDuplicatorIUS1_cast = _itkImageDuplicatorRTKPython.itkImageDuplicatorIUS1_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def image_duplicator(*args,  debug: bool=..., reference_count: int=..., global_warning_display: bool=..., meta_data_dictionary=..., object_name: str=...,**kwargs):
    """Functional interface for ImageDuplicator"""
    import itk

    kwarg_typehints = { 'debug':debug,'reference_count':reference_count,'global_warning_display':global_warning_display,'meta_data_dictionary':meta_data_dictionary,'object_name':object_name }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ImageDuplicator.New(*args, **kwargs)

    return instance.__internal_call__()

def image_duplicator_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.ImageDuplicator
    image_duplicator.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_duplicator.__doc__ = filter_object.__doc__




