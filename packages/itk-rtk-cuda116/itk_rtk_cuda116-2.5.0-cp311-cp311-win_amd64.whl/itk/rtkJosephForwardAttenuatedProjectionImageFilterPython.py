# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkJosephForwardAttenuatedProjectionImageFilterPython
else:
    import _rtkJosephForwardAttenuatedProjectionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkJosephForwardAttenuatedProjectionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkJosephForwardAttenuatedProjectionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.rtkForwardProjectionImageFilterPython
import itk.itkInPlaceImageFilterRTKPython
import itk.itkImageToImageFilterRTKPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkCudaImagePython
import itk.itkCudaDataManagerPython
import itk.itkCudaImageDataManagerPython
import itk.itkImageSourceRTKPython
import itk.itkCudaImageRTKPython
import itk.itkCudaImageDataManagerRTKPython
import itk.itkImageRTKPython
import itk.itkImageBaseRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkPointRTKPython
import itk.itkImageRegionRTKPython
import itk.itkImageSourceCudaCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
class rtkComputeAttenuationCorrectionDD(object):
    r"""Proxy of C++ rtkComputeAttenuationCorrectionDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkJosephForwardAttenuatedProjectionImageFilterPython.delete_rtkComputeAttenuationCorrectionDD
    __ne__ = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionDD___ne__)
    __eq__ = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionDD___eq__)
    __call__ = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionDD___call__)
    SetAttenuationRayVector = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionDD_SetAttenuationRayVector)
    SetAttenuationPixelVector = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionDD_SetAttenuationPixelVector)
    SetEx1 = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionDD_SetEx1)

    def __init__(self, *args):
        r"""
        __init__(self) -> rtkComputeAttenuationCorrectionDD
        __init__(self, arg0) -> rtkComputeAttenuationCorrectionDD

        Parameters
        ----------
        arg0: rtkComputeAttenuationCorrectionDD const &

        """
        _rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionDD_swiginit(self, _rtkJosephForwardAttenuatedProjectionImageFilterPython.new_rtkComputeAttenuationCorrectionDD(*args))

# Register rtkComputeAttenuationCorrectionDD in _rtkJosephForwardAttenuatedProjectionImageFilterPython:
_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionDD_swigregister(rtkComputeAttenuationCorrectionDD)

class rtkComputeAttenuationCorrectionFF(object):
    r"""Proxy of C++ rtkComputeAttenuationCorrectionFF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkJosephForwardAttenuatedProjectionImageFilterPython.delete_rtkComputeAttenuationCorrectionFF
    __ne__ = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionFF___ne__)
    __eq__ = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionFF___eq__)
    __call__ = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionFF___call__)
    SetAttenuationRayVector = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionFF_SetAttenuationRayVector)
    SetAttenuationPixelVector = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionFF_SetAttenuationPixelVector)
    SetEx1 = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionFF_SetEx1)

    def __init__(self, *args):
        r"""
        __init__(self) -> rtkComputeAttenuationCorrectionFF
        __init__(self, arg0) -> rtkComputeAttenuationCorrectionFF

        Parameters
        ----------
        arg0: rtkComputeAttenuationCorrectionFF const &

        """
        _rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionFF_swiginit(self, _rtkJosephForwardAttenuatedProjectionImageFilterPython.new_rtkComputeAttenuationCorrectionFF(*args))

# Register rtkComputeAttenuationCorrectionFF in _rtkJosephForwardAttenuatedProjectionImageFilterPython:
_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkComputeAttenuationCorrectionFF_swigregister(rtkComputeAttenuationCorrectionFF)

class rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedDDD(object):
    r"""Proxy of C++ rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedDDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkJosephForwardAttenuatedProjectionImageFilterPython.delete_rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedDDD
    __ne__ = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedDDD___ne__)
    __eq__ = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedDDD___eq__)
    __call__ = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedDDD___call__)
    SetAttenuationMinusEmissionMapsPtrDiff = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedDDD_SetAttenuationMinusEmissionMapsPtrDiff)
    GetAttenuationRay = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedDDD_GetAttenuationRay)
    GetAttenuationPixel = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedDDD_GetAttenuationPixel)
    GetEx1 = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedDDD_GetEx1)

    def __init__(self, *args):
        r"""
        __init__(self) -> rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedDDD
        __init__(self, arg0) -> rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedDDD

        Parameters
        ----------
        arg0: rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedDDD const &

        """
        _rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedDDD_swiginit(self, _rtkJosephForwardAttenuatedProjectionImageFilterPython.new_rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedDDD(*args))

# Register rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedDDD in _rtkJosephForwardAttenuatedProjectionImageFilterPython:
_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedDDD_swigregister(rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedDDD)

class rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedFFF(object):
    r"""Proxy of C++ rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedFFF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkJosephForwardAttenuatedProjectionImageFilterPython.delete_rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedFFF
    __ne__ = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedFFF___ne__)
    __eq__ = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedFFF___eq__)
    __call__ = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedFFF___call__)
    SetAttenuationMinusEmissionMapsPtrDiff = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedFFF_SetAttenuationMinusEmissionMapsPtrDiff)
    GetAttenuationRay = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedFFF_GetAttenuationRay)
    GetAttenuationPixel = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedFFF_GetAttenuationPixel)
    GetEx1 = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedFFF_GetEx1)

    def __init__(self, *args):
        r"""
        __init__(self) -> rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedFFF
        __init__(self, arg0) -> rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedFFF

        Parameters
        ----------
        arg0: rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedFFF const &

        """
        _rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedFFF_swiginit(self, _rtkJosephForwardAttenuatedProjectionImageFilterPython.new_rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedFFF(*args))

# Register rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedFFF in _rtkJosephForwardAttenuatedProjectionImageFilterPython:
_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedFFF_swigregister(rtkFunctorInterpolationWeightMultiplicationAttenuatedBackProjectionAttenuatedFFF)


def rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC_New():
    return rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC.New()

class rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC(itk.rtkForwardProjectionImageFilterPython.rtkForwardProjectionImageFilterID3ID3):
    r"""Proxy of C++ rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC___New_orig__)
    Clone = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC_Clone)
    GetInterpolationWeightMultiplication = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC_GetInterpolationWeightMultiplication)
    SetInterpolationWeightMultiplication = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC_SetInterpolationWeightMultiplication)
    GetProjectedValueAccumulation = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC_GetProjectedValueAccumulation)
    SetProjectedValueAccumulation = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC_SetProjectedValueAccumulation)
    GetSumAlongRay = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC_GetSumAlongRay)
    SetSumAlongRay = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC_SetSumAlongRay)
    SetInferiorClipImage = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC_SetInferiorClipImage)
    GetInferiorClipImage = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC_GetInferiorClipImage)
    SetSuperiorClipImage = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC_SetSuperiorClipImage)
    GetSuperiorClipImage = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC_GetSuperiorClipImage)
    GetInferiorClip = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC_GetInferiorClip)
    SetInferiorClip = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC_SetInferiorClip)
    GetSuperiorClip = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC_GetSuperiorClip)
    SetSuperiorClip = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC_SetSuperiorClip)
    __swig_destroy__ = _rtkJosephForwardAttenuatedProjectionImageFilterPython.delete_rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC
    cast = _swig_new_static_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC_cast)

    def New(*args, **kargs):
        """New() -> rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC

        Create a new object of the class rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC in _rtkJosephForwardAttenuatedProjectionImageFilterPython:
_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC_swigregister(rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC)
rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC___New_orig__ = _rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC___New_orig__
rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC_cast = _rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC_cast


def rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC_New():
    return rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC.New()

class rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC(itk.rtkForwardProjectionImageFilterPython.rtkForwardProjectionImageFilterIF3IF3):
    r"""Proxy of C++ rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC___New_orig__)
    Clone = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC_Clone)
    GetInterpolationWeightMultiplication = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC_GetInterpolationWeightMultiplication)
    SetInterpolationWeightMultiplication = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC_SetInterpolationWeightMultiplication)
    GetProjectedValueAccumulation = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC_GetProjectedValueAccumulation)
    SetProjectedValueAccumulation = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC_SetProjectedValueAccumulation)
    GetSumAlongRay = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC_GetSumAlongRay)
    SetSumAlongRay = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC_SetSumAlongRay)
    SetInferiorClipImage = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC_SetInferiorClipImage)
    GetInferiorClipImage = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC_GetInferiorClipImage)
    SetSuperiorClipImage = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC_SetSuperiorClipImage)
    GetSuperiorClipImage = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC_GetSuperiorClipImage)
    GetInferiorClip = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC_GetInferiorClip)
    SetInferiorClip = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC_SetInferiorClip)
    GetSuperiorClip = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC_GetSuperiorClip)
    SetSuperiorClip = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC_SetSuperiorClip)
    __swig_destroy__ = _rtkJosephForwardAttenuatedProjectionImageFilterPython.delete_rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC
    cast = _swig_new_static_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC_cast)

    def New(*args, **kargs):
        """New() -> rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC

        Create a new object of the class rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC in _rtkJosephForwardAttenuatedProjectionImageFilterPython:
_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC_swigregister(rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC)
rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC___New_orig__ = _rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC___New_orig__
rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC_cast = _rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC_cast

class rtkProjectedValueAccumulationAttenuatedDD(object):
    r"""Proxy of C++ rtkProjectedValueAccumulationAttenuatedDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkJosephForwardAttenuatedProjectionImageFilterPython.delete_rtkProjectedValueAccumulationAttenuatedDD
    __ne__ = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkProjectedValueAccumulationAttenuatedDD___ne__)
    __eq__ = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkProjectedValueAccumulationAttenuatedDD___eq__)
    __call__ = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkProjectedValueAccumulationAttenuatedDD___call__)
    SetAttenuationVector = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkProjectedValueAccumulationAttenuatedDD_SetAttenuationVector)
    SetEx1 = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkProjectedValueAccumulationAttenuatedDD_SetEx1)

    def __init__(self, *args):
        r"""
        __init__(self) -> rtkProjectedValueAccumulationAttenuatedDD
        __init__(self, arg0) -> rtkProjectedValueAccumulationAttenuatedDD

        Parameters
        ----------
        arg0: rtkProjectedValueAccumulationAttenuatedDD const &

        """
        _rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkProjectedValueAccumulationAttenuatedDD_swiginit(self, _rtkJosephForwardAttenuatedProjectionImageFilterPython.new_rtkProjectedValueAccumulationAttenuatedDD(*args))

# Register rtkProjectedValueAccumulationAttenuatedDD in _rtkJosephForwardAttenuatedProjectionImageFilterPython:
_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkProjectedValueAccumulationAttenuatedDD_swigregister(rtkProjectedValueAccumulationAttenuatedDD)

class rtkProjectedValueAccumulationAttenuatedFF(object):
    r"""Proxy of C++ rtkProjectedValueAccumulationAttenuatedFF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkJosephForwardAttenuatedProjectionImageFilterPython.delete_rtkProjectedValueAccumulationAttenuatedFF
    __ne__ = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkProjectedValueAccumulationAttenuatedFF___ne__)
    __eq__ = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkProjectedValueAccumulationAttenuatedFF___eq__)
    __call__ = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkProjectedValueAccumulationAttenuatedFF___call__)
    SetAttenuationVector = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkProjectedValueAccumulationAttenuatedFF_SetAttenuationVector)
    SetEx1 = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkProjectedValueAccumulationAttenuatedFF_SetEx1)

    def __init__(self, *args):
        r"""
        __init__(self) -> rtkProjectedValueAccumulationAttenuatedFF
        __init__(self, arg0) -> rtkProjectedValueAccumulationAttenuatedFF

        Parameters
        ----------
        arg0: rtkProjectedValueAccumulationAttenuatedFF const &

        """
        _rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkProjectedValueAccumulationAttenuatedFF_swiginit(self, _rtkJosephForwardAttenuatedProjectionImageFilterPython.new_rtkProjectedValueAccumulationAttenuatedFF(*args))

# Register rtkProjectedValueAccumulationAttenuatedFF in _rtkJosephForwardAttenuatedProjectionImageFilterPython:
_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkProjectedValueAccumulationAttenuatedFF_swigregister(rtkProjectedValueAccumulationAttenuatedFF)


def rtkJosephForwardAttenuatedProjectionImageFilterID3ID3_New():
    return rtkJosephForwardAttenuatedProjectionImageFilterID3ID3.New()

class rtkJosephForwardAttenuatedProjectionImageFilterID3ID3(rtkJosephForwardProjectionImageFilterID3ID3SWMDDDIPC):
    r"""Proxy of C++ rtkJosephForwardAttenuatedProjectionImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardAttenuatedProjectionImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardAttenuatedProjectionImageFilterID3ID3_Clone)
    __swig_destroy__ = _rtkJosephForwardAttenuatedProjectionImageFilterPython.delete_rtkJosephForwardAttenuatedProjectionImageFilterID3ID3
    cast = _swig_new_static_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardAttenuatedProjectionImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> rtkJosephForwardAttenuatedProjectionImageFilterID3ID3

        Create a new object of the class rtkJosephForwardAttenuatedProjectionImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkJosephForwardAttenuatedProjectionImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkJosephForwardAttenuatedProjectionImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkJosephForwardAttenuatedProjectionImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkJosephForwardAttenuatedProjectionImageFilterID3ID3 in _rtkJosephForwardAttenuatedProjectionImageFilterPython:
_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardAttenuatedProjectionImageFilterID3ID3_swigregister(rtkJosephForwardAttenuatedProjectionImageFilterID3ID3)
rtkJosephForwardAttenuatedProjectionImageFilterID3ID3___New_orig__ = _rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardAttenuatedProjectionImageFilterID3ID3___New_orig__
rtkJosephForwardAttenuatedProjectionImageFilterID3ID3_cast = _rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardAttenuatedProjectionImageFilterID3ID3_cast


def rtkJosephForwardAttenuatedProjectionImageFilterIF3IF3_New():
    return rtkJosephForwardAttenuatedProjectionImageFilterIF3IF3.New()

class rtkJosephForwardAttenuatedProjectionImageFilterIF3IF3(rtkJosephForwardProjectionImageFilterIF3IF3SWMFDFIPC):
    r"""Proxy of C++ rtkJosephForwardAttenuatedProjectionImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardAttenuatedProjectionImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardAttenuatedProjectionImageFilterIF3IF3_Clone)
    __swig_destroy__ = _rtkJosephForwardAttenuatedProjectionImageFilterPython.delete_rtkJosephForwardAttenuatedProjectionImageFilterIF3IF3
    cast = _swig_new_static_method(_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardAttenuatedProjectionImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> rtkJosephForwardAttenuatedProjectionImageFilterIF3IF3

        Create a new object of the class rtkJosephForwardAttenuatedProjectionImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkJosephForwardAttenuatedProjectionImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkJosephForwardAttenuatedProjectionImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkJosephForwardAttenuatedProjectionImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkJosephForwardAttenuatedProjectionImageFilterIF3IF3 in _rtkJosephForwardAttenuatedProjectionImageFilterPython:
_rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardAttenuatedProjectionImageFilterIF3IF3_swigregister(rtkJosephForwardAttenuatedProjectionImageFilterIF3IF3)
rtkJosephForwardAttenuatedProjectionImageFilterIF3IF3___New_orig__ = _rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardAttenuatedProjectionImageFilterIF3IF3___New_orig__
rtkJosephForwardAttenuatedProjectionImageFilterIF3IF3_cast = _rtkJosephForwardAttenuatedProjectionImageFilterPython.rtkJosephForwardAttenuatedProjectionImageFilterIF3IF3_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def joseph_forward_attenuated_projection_image_filter(*args: itkt.ImageLike,  interpolation_weight_multiplication=..., projected_value_accumulation=..., sum_along_ray=..., inferior_clip_image: itkt.Image=..., superior_clip_image: itkt.Image=..., inferior_clip: float=..., superior_clip: float=..., geometry=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for JosephForwardAttenuatedProjectionImageFilter"""
    import itk

    kwarg_typehints = { 'interpolation_weight_multiplication':interpolation_weight_multiplication,'projected_value_accumulation':projected_value_accumulation,'sum_along_ray':sum_along_ray,'inferior_clip_image':inferior_clip_image,'superior_clip_image':superior_clip_image,'inferior_clip':inferior_clip,'superior_clip':superior_clip,'geometry':geometry }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.JosephForwardAttenuatedProjectionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def joseph_forward_attenuated_projection_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.JosephForwardAttenuatedProjectionImageFilter
    joseph_forward_attenuated_projection_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    joseph_forward_attenuated_projection_image_filter.__doc__ = filter_object.__doc__

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def joseph_forward_projection_image_filter(*args: itkt.ImageLike,  interpolation_weight_multiplication=..., projected_value_accumulation=..., sum_along_ray=..., inferior_clip_image: itkt.Image=..., superior_clip_image: itkt.Image=..., inferior_clip: float=..., superior_clip: float=..., geometry=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for JosephForwardProjectionImageFilter"""
    import itk

    kwarg_typehints = { 'interpolation_weight_multiplication':interpolation_weight_multiplication,'projected_value_accumulation':projected_value_accumulation,'sum_along_ray':sum_along_ray,'inferior_clip_image':inferior_clip_image,'superior_clip_image':superior_clip_image,'inferior_clip':inferior_clip,'superior_clip':superior_clip,'geometry':geometry }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.JosephForwardProjectionImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def joseph_forward_projection_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.JosephForwardProjectionImageFilter
    joseph_forward_projection_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    joseph_forward_projection_image_filter.__doc__ = filter_object.__doc__




