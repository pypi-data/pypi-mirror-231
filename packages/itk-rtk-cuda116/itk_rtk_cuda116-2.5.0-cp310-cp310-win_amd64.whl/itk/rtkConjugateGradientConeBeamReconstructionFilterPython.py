# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkConjugateGradientConeBeamReconstructionFilterPython
else:
    import _rtkConjugateGradientConeBeamReconstructionFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkConjugateGradientConeBeamReconstructionFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkConjugateGradientConeBeamReconstructionFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkImagePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.ITKCommonBasePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.rtkIterativeConeBeamReconstructionFilterPython
import itk.rtkBackProjectionImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython
import itk.itkCudaImagePython
import itk.itkCudaDataManagerPython
import itk.itkCudaImageDataManagerPython
import itk.itkCudaImageRTKPython
import itk.itkImageRTKPython
import itk.itkImageBaseRTKPython
import itk.itkPointRTKPython
import itk.itkImageRegionRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkCudaImageDataManagerRTKPython
import itk.itkInPlaceImageFilterRTKPython
import itk.itkImageToImageFilterRTKPython
import itk.itkImageSourceCudaCommonPython
import itk.itkImageSourceRTKPython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython
import itk.rtkForwardProjectionImageFilterPython

def rtkConjugateGradientConeBeamReconstructionFilterCIF3_New():
    return rtkConjugateGradientConeBeamReconstructionFilterCIF3.New()

class rtkConjugateGradientConeBeamReconstructionFilterCIF3(itk.rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterCIF3CIF3):
    r"""Proxy of C++ rtkConjugateGradientConeBeamReconstructionFilterCIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterCIF3___New_orig__)
    Clone = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterCIF3_Clone)
    SetInputVolume = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterCIF3_SetInputVolume)
    SetInputProjectionStack = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterCIF3_SetInputProjectionStack)
    SetInputWeights = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterCIF3_SetInputWeights)
    SetSupportMask = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterCIF3_SetSupportMask)
    GetSupportMask = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterCIF3_GetSupportMask)
    SetGeometry = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterCIF3_SetGeometry)
    SetNumberOfIterations = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterCIF3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterCIF3_GetNumberOfIterations)
    SetDisableDisplacedDetectorFilter = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterCIF3_SetDisableDisplacedDetectorFilter)
    GetDisableDisplacedDetectorFilter = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterCIF3_GetDisableDisplacedDetectorFilter)
    SetTikhonov = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterCIF3_SetTikhonov)
    GetTikhonov = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterCIF3_GetTikhonov)
    SetGamma = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterCIF3_SetGamma)
    GetGamma = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterCIF3_GetGamma)
    GetCudaConjugateGradient = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterCIF3_GetCudaConjugateGradient)
    SetCudaConjugateGradient = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterCIF3_SetCudaConjugateGradient)
    __swig_destroy__ = _rtkConjugateGradientConeBeamReconstructionFilterPython.delete_rtkConjugateGradientConeBeamReconstructionFilterCIF3
    cast = _swig_new_static_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterCIF3_cast)

    def New(*args, **kargs):
        """New() -> rtkConjugateGradientConeBeamReconstructionFilterCIF3

        Create a new object of the class rtkConjugateGradientConeBeamReconstructionFilterCIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConjugateGradientConeBeamReconstructionFilterCIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConjugateGradientConeBeamReconstructionFilterCIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConjugateGradientConeBeamReconstructionFilterCIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConjugateGradientConeBeamReconstructionFilterCIF3 in _rtkConjugateGradientConeBeamReconstructionFilterPython:
_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterCIF3_swigregister(rtkConjugateGradientConeBeamReconstructionFilterCIF3)
rtkConjugateGradientConeBeamReconstructionFilterCIF3___New_orig__ = _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterCIF3___New_orig__
rtkConjugateGradientConeBeamReconstructionFilterCIF3_cast = _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterCIF3_cast


def rtkConjugateGradientConeBeamReconstructionFilterID3_New():
    return rtkConjugateGradientConeBeamReconstructionFilterID3.New()

class rtkConjugateGradientConeBeamReconstructionFilterID3(itk.rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3):
    r"""Proxy of C++ rtkConjugateGradientConeBeamReconstructionFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_Clone)
    SetInputVolume = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_SetInputVolume)
    SetInputProjectionStack = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_SetInputProjectionStack)
    SetInputWeights = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_SetInputWeights)
    SetSupportMask = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_SetSupportMask)
    GetSupportMask = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_GetSupportMask)
    SetGeometry = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_SetGeometry)
    SetNumberOfIterations = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_GetNumberOfIterations)
    SetDisableDisplacedDetectorFilter = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_SetDisableDisplacedDetectorFilter)
    GetDisableDisplacedDetectorFilter = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_GetDisableDisplacedDetectorFilter)
    SetTikhonov = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_SetTikhonov)
    GetTikhonov = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_GetTikhonov)
    SetGamma = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_SetGamma)
    GetGamma = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_GetGamma)
    GetCudaConjugateGradient = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_GetCudaConjugateGradient)
    SetCudaConjugateGradient = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_SetCudaConjugateGradient)
    __swig_destroy__ = _rtkConjugateGradientConeBeamReconstructionFilterPython.delete_rtkConjugateGradientConeBeamReconstructionFilterID3
    cast = _swig_new_static_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_cast)

    def New(*args, **kargs):
        """New() -> rtkConjugateGradientConeBeamReconstructionFilterID3

        Create a new object of the class rtkConjugateGradientConeBeamReconstructionFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConjugateGradientConeBeamReconstructionFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConjugateGradientConeBeamReconstructionFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConjugateGradientConeBeamReconstructionFilterID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConjugateGradientConeBeamReconstructionFilterID3 in _rtkConjugateGradientConeBeamReconstructionFilterPython:
_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_swigregister(rtkConjugateGradientConeBeamReconstructionFilterID3)
rtkConjugateGradientConeBeamReconstructionFilterID3___New_orig__ = _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3___New_orig__
rtkConjugateGradientConeBeamReconstructionFilterID3_cast = _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterID3_cast


def rtkConjugateGradientConeBeamReconstructionFilterIF3_New():
    return rtkConjugateGradientConeBeamReconstructionFilterIF3.New()

class rtkConjugateGradientConeBeamReconstructionFilterIF3(itk.rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3):
    r"""Proxy of C++ rtkConjugateGradientConeBeamReconstructionFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_Clone)
    SetInputVolume = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_SetInputVolume)
    SetInputProjectionStack = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_SetInputProjectionStack)
    SetInputWeights = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_SetInputWeights)
    SetSupportMask = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_SetSupportMask)
    GetSupportMask = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_GetSupportMask)
    SetGeometry = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_SetGeometry)
    SetNumberOfIterations = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_GetNumberOfIterations)
    SetDisableDisplacedDetectorFilter = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_SetDisableDisplacedDetectorFilter)
    GetDisableDisplacedDetectorFilter = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_GetDisableDisplacedDetectorFilter)
    SetTikhonov = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_SetTikhonov)
    GetTikhonov = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_GetTikhonov)
    SetGamma = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_SetGamma)
    GetGamma = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_GetGamma)
    GetCudaConjugateGradient = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_GetCudaConjugateGradient)
    SetCudaConjugateGradient = _swig_new_instance_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_SetCudaConjugateGradient)
    __swig_destroy__ = _rtkConjugateGradientConeBeamReconstructionFilterPython.delete_rtkConjugateGradientConeBeamReconstructionFilterIF3
    cast = _swig_new_static_method(_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> rtkConjugateGradientConeBeamReconstructionFilterIF3

        Create a new object of the class rtkConjugateGradientConeBeamReconstructionFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConjugateGradientConeBeamReconstructionFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConjugateGradientConeBeamReconstructionFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConjugateGradientConeBeamReconstructionFilterIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConjugateGradientConeBeamReconstructionFilterIF3 in _rtkConjugateGradientConeBeamReconstructionFilterPython:
_rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_swigregister(rtkConjugateGradientConeBeamReconstructionFilterIF3)
rtkConjugateGradientConeBeamReconstructionFilterIF3___New_orig__ = _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3___New_orig__
rtkConjugateGradientConeBeamReconstructionFilterIF3_cast = _rtkConjugateGradientConeBeamReconstructionFilterPython.rtkConjugateGradientConeBeamReconstructionFilterIF3_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def conjugate_gradient_cone_beam_reconstruction_filter(*args: itkt.ImageLike,  input_volume: itkt.Image=..., input_projection_stack: itkt.Image=..., input_weights: itkt.Image=..., support_mask: itkt.Image=..., geometry=..., number_of_iterations: int=..., disable_displaced_detector_filter: bool=..., tikhonov: float=..., gamma: float=..., cuda_conjugate_gradient: bool=..., forward_projection_filter=..., back_projection_filter=..., attenuation_map: itkt.Image=..., inferior_clip_image: itkt.Image=..., superior_clip_image: itkt.Image=..., sigma_zero: float=..., alpha_psf: float=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ConjugateGradientConeBeamReconstructionFilter"""
    import itk

    kwarg_typehints = { 'input_volume':input_volume,'input_projection_stack':input_projection_stack,'input_weights':input_weights,'support_mask':support_mask,'geometry':geometry,'number_of_iterations':number_of_iterations,'disable_displaced_detector_filter':disable_displaced_detector_filter,'tikhonov':tikhonov,'gamma':gamma,'cuda_conjugate_gradient':cuda_conjugate_gradient,'forward_projection_filter':forward_projection_filter,'back_projection_filter':back_projection_filter,'attenuation_map':attenuation_map,'inferior_clip_image':inferior_clip_image,'superior_clip_image':superior_clip_image,'sigma_zero':sigma_zero,'alpha_psf':alpha_psf }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.ConjugateGradientConeBeamReconstructionFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def conjugate_gradient_cone_beam_reconstruction_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.ConjugateGradientConeBeamReconstructionFilter
    conjugate_gradient_cone_beam_reconstruction_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    conjugate_gradient_cone_beam_reconstruction_filter.__doc__ = filter_object.__doc__




