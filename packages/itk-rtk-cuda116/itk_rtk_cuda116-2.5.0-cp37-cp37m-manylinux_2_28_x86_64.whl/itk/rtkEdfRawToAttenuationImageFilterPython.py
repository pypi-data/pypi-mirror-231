# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkEdfRawToAttenuationImageFilterPython
else:
    import _rtkEdfRawToAttenuationImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkEdfRawToAttenuationImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkEdfRawToAttenuationImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython

def rtkEdfRawToAttenuationImageFilterID2ID2_New():
    return rtkEdfRawToAttenuationImageFilterID2ID2.New()

class rtkEdfRawToAttenuationImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ rtkEdfRawToAttenuationImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterID2ID2_Clone)
    SetFileNames = _swig_new_instance_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterID2ID2_SetFileNames)
    GetFileNames = _swig_new_instance_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterID2ID2_GetFileNames)
    __swig_destroy__ = _rtkEdfRawToAttenuationImageFilterPython.delete_rtkEdfRawToAttenuationImageFilterID2ID2
    cast = _swig_new_static_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> rtkEdfRawToAttenuationImageFilterID2ID2

        Create a new object of the class rtkEdfRawToAttenuationImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkEdfRawToAttenuationImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkEdfRawToAttenuationImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkEdfRawToAttenuationImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkEdfRawToAttenuationImageFilterID2ID2 in _rtkEdfRawToAttenuationImageFilterPython:
_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterID2ID2_swigregister(rtkEdfRawToAttenuationImageFilterID2ID2)
rtkEdfRawToAttenuationImageFilterID2ID2___New_orig__ = _rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterID2ID2___New_orig__
rtkEdfRawToAttenuationImageFilterID2ID2_cast = _rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterID2ID2_cast


def rtkEdfRawToAttenuationImageFilterID3ID3_New():
    return rtkEdfRawToAttenuationImageFilterID3ID3.New()

class rtkEdfRawToAttenuationImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ rtkEdfRawToAttenuationImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterID3ID3_Clone)
    SetFileNames = _swig_new_instance_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterID3ID3_SetFileNames)
    GetFileNames = _swig_new_instance_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterID3ID3_GetFileNames)
    __swig_destroy__ = _rtkEdfRawToAttenuationImageFilterPython.delete_rtkEdfRawToAttenuationImageFilterID3ID3
    cast = _swig_new_static_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> rtkEdfRawToAttenuationImageFilterID3ID3

        Create a new object of the class rtkEdfRawToAttenuationImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkEdfRawToAttenuationImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkEdfRawToAttenuationImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkEdfRawToAttenuationImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkEdfRawToAttenuationImageFilterID3ID3 in _rtkEdfRawToAttenuationImageFilterPython:
_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterID3ID3_swigregister(rtkEdfRawToAttenuationImageFilterID3ID3)
rtkEdfRawToAttenuationImageFilterID3ID3___New_orig__ = _rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterID3ID3___New_orig__
rtkEdfRawToAttenuationImageFilterID3ID3_cast = _rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterID3ID3_cast


def rtkEdfRawToAttenuationImageFilterID4ID4_New():
    return rtkEdfRawToAttenuationImageFilterID4ID4.New()

class rtkEdfRawToAttenuationImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ rtkEdfRawToAttenuationImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterID4ID4___New_orig__)
    Clone = _swig_new_instance_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterID4ID4_Clone)
    SetFileNames = _swig_new_instance_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterID4ID4_SetFileNames)
    GetFileNames = _swig_new_instance_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterID4ID4_GetFileNames)
    __swig_destroy__ = _rtkEdfRawToAttenuationImageFilterPython.delete_rtkEdfRawToAttenuationImageFilterID4ID4
    cast = _swig_new_static_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterID4ID4_cast)

    def New(*args, **kargs):
        """New() -> rtkEdfRawToAttenuationImageFilterID4ID4

        Create a new object of the class rtkEdfRawToAttenuationImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkEdfRawToAttenuationImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkEdfRawToAttenuationImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkEdfRawToAttenuationImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkEdfRawToAttenuationImageFilterID4ID4 in _rtkEdfRawToAttenuationImageFilterPython:
_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterID4ID4_swigregister(rtkEdfRawToAttenuationImageFilterID4ID4)
rtkEdfRawToAttenuationImageFilterID4ID4___New_orig__ = _rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterID4ID4___New_orig__
rtkEdfRawToAttenuationImageFilterID4ID4_cast = _rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterID4ID4_cast


def rtkEdfRawToAttenuationImageFilterIF2IF2_New():
    return rtkEdfRawToAttenuationImageFilterIF2IF2.New()

class rtkEdfRawToAttenuationImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ rtkEdfRawToAttenuationImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterIF2IF2_Clone)
    SetFileNames = _swig_new_instance_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterIF2IF2_SetFileNames)
    GetFileNames = _swig_new_instance_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterIF2IF2_GetFileNames)
    __swig_destroy__ = _rtkEdfRawToAttenuationImageFilterPython.delete_rtkEdfRawToAttenuationImageFilterIF2IF2
    cast = _swig_new_static_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> rtkEdfRawToAttenuationImageFilterIF2IF2

        Create a new object of the class rtkEdfRawToAttenuationImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkEdfRawToAttenuationImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkEdfRawToAttenuationImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkEdfRawToAttenuationImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkEdfRawToAttenuationImageFilterIF2IF2 in _rtkEdfRawToAttenuationImageFilterPython:
_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterIF2IF2_swigregister(rtkEdfRawToAttenuationImageFilterIF2IF2)
rtkEdfRawToAttenuationImageFilterIF2IF2___New_orig__ = _rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterIF2IF2___New_orig__
rtkEdfRawToAttenuationImageFilterIF2IF2_cast = _rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterIF2IF2_cast


def rtkEdfRawToAttenuationImageFilterIF3IF3_New():
    return rtkEdfRawToAttenuationImageFilterIF3IF3.New()

class rtkEdfRawToAttenuationImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ rtkEdfRawToAttenuationImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterIF3IF3_Clone)
    SetFileNames = _swig_new_instance_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterIF3IF3_SetFileNames)
    GetFileNames = _swig_new_instance_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterIF3IF3_GetFileNames)
    __swig_destroy__ = _rtkEdfRawToAttenuationImageFilterPython.delete_rtkEdfRawToAttenuationImageFilterIF3IF3
    cast = _swig_new_static_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> rtkEdfRawToAttenuationImageFilterIF3IF3

        Create a new object of the class rtkEdfRawToAttenuationImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkEdfRawToAttenuationImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkEdfRawToAttenuationImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkEdfRawToAttenuationImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkEdfRawToAttenuationImageFilterIF3IF3 in _rtkEdfRawToAttenuationImageFilterPython:
_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterIF3IF3_swigregister(rtkEdfRawToAttenuationImageFilterIF3IF3)
rtkEdfRawToAttenuationImageFilterIF3IF3___New_orig__ = _rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterIF3IF3___New_orig__
rtkEdfRawToAttenuationImageFilterIF3IF3_cast = _rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterIF3IF3_cast


def rtkEdfRawToAttenuationImageFilterIF4IF4_New():
    return rtkEdfRawToAttenuationImageFilterIF4IF4.New()

class rtkEdfRawToAttenuationImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ rtkEdfRawToAttenuationImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterIF4IF4___New_orig__)
    Clone = _swig_new_instance_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterIF4IF4_Clone)
    SetFileNames = _swig_new_instance_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterIF4IF4_SetFileNames)
    GetFileNames = _swig_new_instance_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterIF4IF4_GetFileNames)
    __swig_destroy__ = _rtkEdfRawToAttenuationImageFilterPython.delete_rtkEdfRawToAttenuationImageFilterIF4IF4
    cast = _swig_new_static_method(_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterIF4IF4_cast)

    def New(*args, **kargs):
        """New() -> rtkEdfRawToAttenuationImageFilterIF4IF4

        Create a new object of the class rtkEdfRawToAttenuationImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkEdfRawToAttenuationImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkEdfRawToAttenuationImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkEdfRawToAttenuationImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkEdfRawToAttenuationImageFilterIF4IF4 in _rtkEdfRawToAttenuationImageFilterPython:
_rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterIF4IF4_swigregister(rtkEdfRawToAttenuationImageFilterIF4IF4)
rtkEdfRawToAttenuationImageFilterIF4IF4___New_orig__ = _rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterIF4IF4___New_orig__
rtkEdfRawToAttenuationImageFilterIF4IF4_cast = _rtkEdfRawToAttenuationImageFilterPython.rtkEdfRawToAttenuationImageFilterIF4IF4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def edf_raw_to_attenuation_image_filter(*args: itkt.ImageLike,  file_names=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for EdfRawToAttenuationImageFilter"""
    import itk

    kwarg_typehints = { 'file_names':file_names }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.EdfRawToAttenuationImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def edf_raw_to_attenuation_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.EdfRawToAttenuationImageFilter
    edf_raw_to_attenuation_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    edf_raw_to_attenuation_image_filter.__doc__ = filter_object.__doc__




