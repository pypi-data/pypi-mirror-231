Metadata-Version: 2.1
Name: faadelays
Version: 2023.9.1
Summary: A package to retrieve FAA airport status
Author-email: Nathan Tilley <nathan@tilley.xyz>
License: MIT License
        
        Copyright (c) 2020 Nathan Tilley
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Project-URL: Homepage, https://github.com/ntilley905/faadelays
Project-URL: Bug Tracker, https://github.com/ntilley905/faadelays/issues
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: aiohttp

# FAA Airport Status

This is a simple Python package used to retrieve data from the FAA's NAS Status API.

## Classes

The following classes are available and in some cases dynamically generated when retrieving data:

Class | Information Provided | Methods
--- | --- | ---
ArriveDepartDelay | Airport, Status, Minimum delay, Maximum delay, Trend, Reason, Update time
GroundDelay | Airport, Status, Average delay, Maximum delay, Start time, End time, Reason, Update time, URL to the advisory, Departure scope (if applicable), Included Facilities (if applicable), Included flights (if applicable)
GroundStop | Airport, Status, End Time, Reason, Update time, URL to advisory, Included facilities (if applicable), Included flights (if applicable), Probabibility of extension
Closure | Airport, Status, Begin Time, End Time, Update time, NOTAM text
AirportConfig | Airport, Time the data was created, Arrival runway config, Departure runway config, Arrival rate, Source time stamp
Airport | Code (provide when creating, IATA format), *Name*, *Longitude*, *Latitude*, Bool of if airport is deicing (see note), Bool of any delays, Count of delays, GroundDelay object, GroundStop object, Depart Delay object (ArriveDepartDelay), Arrive Delay object (ArriveDepartDelay), Closure object, Airport config | Update

Items in *italics* are not updated until delay data is present

Note: Information about airport deicing is untested

## Methods Available

`get_airport_delays(airport_code, session)` requires the code for the airport to get delays for in IATA format (i.e. ATL for Atlanta) and an asyncio HTTP session (such as aiohttp.ClientSession) and returns an Airport object

## Support
[![Buy me a coffee][buymeacoffee-shield]][buymeacoffee]



[buymeacoffee-shield]: https://www.buymeacoffee.com/assets/img/guidelines/download-assets-sm-2.svg
[buymeacoffee]: https://www.buymeacoffee.com/ntilley905
