# coding: utf-8


"""
IGNORE:
    Nutanix Iam Versioned APIs

    Manage Identity and Access Management of Nutanix clusters.  # noqa: E501

    OpenAPI spec version: 4.0.1-beta-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six

class TokenResponse(object):

    """Information of the OIDC token response

    :param id_token: (:attr:`id_token`) Generated ID Token to be utilized by the client
    :type id_token: required
    :param token_type: (:attr:`token_type`) Generated ID Token type
    :type token_type: required
    :param expires_in: (:attr:`expires_in`) Token expiration time in seconds
    :type expires_in: required
    :param refresh_token: (:attr:`refresh_token`) Refresh token which is issued in case of auth code, refresh token or token exchange flows
    :type refresh_token: 
    :param access_token: (:attr:`access_token`) Generated Access Token to be utilized by the client
    :type access_token: 

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'id_token': 'str',
        'token_type': 'str',
        'expires_in': 'int',
        'refresh_token': 'str',
        'access_token': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'id_token': 'id_token',
        'token_type': 'token_type',
        'expires_in': 'expires_in',
        'refresh_token': 'refresh_token',
        'access_token': 'access_token',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, id_token=None, token_type=None, expires_in=None, refresh_token=None, access_token=None, *args, **kwargs):  # noqa: E501
        self.__id_token = None
        self.__token_type = None
        self.__expires_in = None
        self.__refresh_token = None
        self.__access_token = None
        self.discriminator = None
        self.__id_token = id_token
        self.__token_type = token_type
        self.__expires_in = expires_in
        if refresh_token is not None:
            self.__refresh_token = refresh_token
        if access_token is not None:
            self.__access_token = access_token
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'iam.v4.authn.TokenResponse'

    def _initialize_fq_object_type(self):
        return 'iam.v4.r0.b1.authn.TokenResponse'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def id_token(self):
        """
        Generated ID Token to be utilized by the client

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__id_token

    @id_token.setter
    def id_token(self, id_token):
        if id_token is None:
            raise ValueError("Invalid value for `id_token`, must not be `None`")  # noqa: E501

        self.__id_token = id_token

    @property
    def token_type(self):
        """
        Generated ID Token type

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__token_type

    @token_type.setter
    def token_type(self, token_type):
        if token_type is None:
            raise ValueError("Invalid value for `token_type`, must not be `None`")  # noqa: E501

        self.__token_type = token_type

    @property
    def expires_in(self):
        """
        Token expiration time in seconds

        :type:

                :class:`~int`
        """  # noqa: E501
        return self.__expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        if expires_in is None:
            raise ValueError("Invalid value for `expires_in`, must not be `None`")  # noqa: E501

        self.__expires_in = expires_in

    @property
    def refresh_token(self):
        """
        Refresh token which is issued in case of auth code, refresh token or token exchange flows

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):

        self.__refresh_token = refresh_token

    @property
    def access_token(self):
        """
        Generated Access Token to be utilized by the client

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__access_token

    @access_token.setter
    def access_token(self, access_token):

        self.__access_token = access_token

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(TokenResponse, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

