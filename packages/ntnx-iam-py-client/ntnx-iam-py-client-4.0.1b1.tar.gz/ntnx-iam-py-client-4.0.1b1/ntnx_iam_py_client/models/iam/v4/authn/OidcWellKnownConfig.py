# coding: utf-8


"""
IGNORE:
    Nutanix Iam Versioned APIs

    Manage Identity and Access Management of Nutanix clusters.  # noqa: E501

    OpenAPI spec version: 4.0.1-beta-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six
from ntnx_iam_py_client.models.iam.v4.authn.AuthMethodType import AuthMethodType  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authn.ClaimsType import ClaimsType  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authn.DiscoverySubjectType import DiscoverySubjectType  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authn.ResponseType import ResponseType  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authn.ScopesType import ScopesType  # noqa: F401,E501
from ntnx_iam_py_client.models.iam.v4.authn.SigningAlgoType import SigningAlgoType  # noqa: F401,E501

class OidcWellKnownConfig(object):

    """Information of OIDC well-known config

    :param issuer: (:attr:`issuer`) Base URL of the identity service which it asserts as its issuer identifier
    :type issuer: required
    :param registration_endpoint: (:attr:`registration_endpoint`) URL of the dynamic client registration endpoint
    :type registration_endpoint: required
    :param authorization_endpoint: (:attr:`authorization_endpoint`) URL of the OIDC authorization endpoint
    :type authorization_endpoint: required
    :param token_endpoint: (:attr:`token_endpoint`) URL of the OIDC token endpoint
    :type token_endpoint: required
    :param jwks_uri: (:attr:`jwks_uri`) URL of JSON Web Key Set document of the identity service
    :type jwks_uri: required
    :param response_types_supported: (:attr:`response_types_supported`) List of supported OIDC response type values
    :type response_types_supported: required
    :param subject_types_supported: (:attr:`subject_types_supported`) List of supported subject types
    :type subject_types_supported: required
    :param id_token_signing_alg_values_supported: (:attr:`id_token_signing_alg_values_supported`) List of the JWS signing algorithms supported for the ID Token
    :type id_token_signing_alg_values_supported: required
    :param scopes_supported: (:attr:`scopes_supported`) List of supported OIDC scope values
    :type scopes_supported: required
    :param token_endpoint_auth_methods_supported: (:attr:`token_endpoint_auth_methods_supported`) List of client authentication methods supported by the token endpoint
    :type token_endpoint_auth_methods_supported: required
    :param claims_supported: (:attr:`claims_supported`) List of supported claims
    :type claims_supported: required

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'issuer': 'str',
        'registration_endpoint': 'str',
        'authorization_endpoint': 'str',
        'token_endpoint': 'str',
        'jwks_uri': 'str',
        'response_types_supported': 'list[iam.v4.authn.ResponseType]',
        'subject_types_supported': 'list[iam.v4.authn.DiscoverySubjectType]',
        'id_token_signing_alg_values_supported': 'list[iam.v4.authn.SigningAlgoType]',
        'scopes_supported': 'list[iam.v4.authn.ScopesType]',
        'token_endpoint_auth_methods_supported': 'list[iam.v4.authn.AuthMethodType]',
        'claims_supported': 'list[iam.v4.authn.ClaimsType]',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'issuer': 'issuer',
        'registration_endpoint': 'registration_endpoint',
        'authorization_endpoint': 'authorization_endpoint',
        'token_endpoint': 'token_endpoint',
        'jwks_uri': 'jwks_uri',
        'response_types_supported': 'response_types_supported',
        'subject_types_supported': 'subject_types_supported',
        'id_token_signing_alg_values_supported': 'id_token_signing_alg_values_supported',
        'scopes_supported': 'scopes_supported',
        'token_endpoint_auth_methods_supported': 'token_endpoint_auth_methods_supported',
        'claims_supported': 'claims_supported',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, issuer=None, registration_endpoint=None, authorization_endpoint=None, token_endpoint=None, jwks_uri=None, response_types_supported=None, subject_types_supported=None, id_token_signing_alg_values_supported=None, scopes_supported=None, token_endpoint_auth_methods_supported=None, claims_supported=None, *args, **kwargs):  # noqa: E501
        self.__issuer = None
        self.__registration_endpoint = None
        self.__authorization_endpoint = None
        self.__token_endpoint = None
        self.__jwks_uri = None
        self.__response_types_supported = None
        self.__subject_types_supported = None
        self.__id_token_signing_alg_values_supported = None
        self.__scopes_supported = None
        self.__token_endpoint_auth_methods_supported = None
        self.__claims_supported = None
        self.discriminator = None
        self.__issuer = issuer
        self.__registration_endpoint = registration_endpoint
        self.__authorization_endpoint = authorization_endpoint
        self.__token_endpoint = token_endpoint
        self.__jwks_uri = jwks_uri
        self.__response_types_supported = response_types_supported
        self.__subject_types_supported = subject_types_supported
        self.__id_token_signing_alg_values_supported = id_token_signing_alg_values_supported
        self.__scopes_supported = scopes_supported
        self.__token_endpoint_auth_methods_supported = token_endpoint_auth_methods_supported
        self.__claims_supported = claims_supported
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'iam.v4.authn.OidcWellKnownConfig'

    def _initialize_fq_object_type(self):
        return 'iam.v4.r0.b1.authn.OidcWellKnownConfig'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def issuer(self):
        """
        Base URL of the identity service which it asserts as its issuer identifier

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__issuer

    @issuer.setter
    def issuer(self, issuer):
        if issuer is None:
            raise ValueError("Invalid value for `issuer`, must not be `None`")  # noqa: E501
        if issuer is not None and not re.search('^((http[s]?|nfs):\/)?\/?([^:\/\\s]*)((\/\\w+)*(:[0-9]+)*?\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$', issuer):  # noqa: E501
            raise ValueError(r"Invalid value for `issuer`, must be a follow pattern or equal to `/^((http[s]?|nfs):\/)?\/?([^:\/\\s]*)((\/\\w+)*(:[0-9]+)*?\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$/`")  # noqa: E501

        self.__issuer = issuer

    @property
    def registration_endpoint(self):
        """
        URL of the dynamic client registration endpoint

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__registration_endpoint

    @registration_endpoint.setter
    def registration_endpoint(self, registration_endpoint):
        if registration_endpoint is None:
            raise ValueError("Invalid value for `registration_endpoint`, must not be `None`")  # noqa: E501
        if registration_endpoint is not None and not re.search('^((http[s]?|nfs):\/)?\/?([^:\/\\s]*)((\/\\w+)*(:[0-9]+)*?\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$', registration_endpoint):  # noqa: E501
            raise ValueError(r"Invalid value for `registration_endpoint`, must be a follow pattern or equal to `/^((http[s]?|nfs):\/)?\/?([^:\/\\s]*)((\/\\w+)*(:[0-9]+)*?\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$/`")  # noqa: E501

        self.__registration_endpoint = registration_endpoint

    @property
    def authorization_endpoint(self):
        """
        URL of the OIDC authorization endpoint

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__authorization_endpoint

    @authorization_endpoint.setter
    def authorization_endpoint(self, authorization_endpoint):
        if authorization_endpoint is None:
            raise ValueError("Invalid value for `authorization_endpoint`, must not be `None`")  # noqa: E501
        if authorization_endpoint is not None and not re.search('^((http[s]?|nfs):\/)?\/?([^:\/\\s]*)((\/\\w+)*(:[0-9]+)*?\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$', authorization_endpoint):  # noqa: E501
            raise ValueError(r"Invalid value for `authorization_endpoint`, must be a follow pattern or equal to `/^((http[s]?|nfs):\/)?\/?([^:\/\\s]*)((\/\\w+)*(:[0-9]+)*?\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$/`")  # noqa: E501

        self.__authorization_endpoint = authorization_endpoint

    @property
    def token_endpoint(self):
        """
        URL of the OIDC token endpoint

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__token_endpoint

    @token_endpoint.setter
    def token_endpoint(self, token_endpoint):
        if token_endpoint is None:
            raise ValueError("Invalid value for `token_endpoint`, must not be `None`")  # noqa: E501
        if token_endpoint is not None and not re.search('^((http[s]?|nfs):\/)?\/?([^:\/\\s]*)((\/\\w+)*(:[0-9]+)*?\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$', token_endpoint):  # noqa: E501
            raise ValueError(r"Invalid value for `token_endpoint`, must be a follow pattern or equal to `/^((http[s]?|nfs):\/)?\/?([^:\/\\s]*)((\/\\w+)*(:[0-9]+)*?\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$/`")  # noqa: E501

        self.__token_endpoint = token_endpoint

    @property
    def jwks_uri(self):
        """
        URL of JSON Web Key Set document of the identity service

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__jwks_uri

    @jwks_uri.setter
    def jwks_uri(self, jwks_uri):
        if jwks_uri is None:
            raise ValueError("Invalid value for `jwks_uri`, must not be `None`")  # noqa: E501
        if jwks_uri is not None and not re.search('^((http[s]?|nfs):\/)?\/?([^:\/\\s]*)((\/\\w+)*(:[0-9]+)*?\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$', jwks_uri):  # noqa: E501
            raise ValueError(r"Invalid value for `jwks_uri`, must be a follow pattern or equal to `/^((http[s]?|nfs):\/)?\/?([^:\/\\s]*)((\/\\w+)*(:[0-9]+)*?\/)([\\w\\-\\.]+[^#?\\s]+)(.*)?(#[\\w\\-]+)?$/`")  # noqa: E501

        self.__jwks_uri = jwks_uri

    @property
    def response_types_supported(self):
        """
        List of supported OIDC response type values

        :type:
             list[ :class:`~ntnx_iam_py_client.models.iam.v4.authn.ResponseType` ]
        """  # noqa: E501
        return self.__response_types_supported

    @response_types_supported.setter
    def response_types_supported(self, response_types_supported):
        if response_types_supported is None:
            raise ValueError("Invalid value for `response_types_supported`, must not be `None`")  # noqa: E501

        self.__response_types_supported = response_types_supported

    @property
    def subject_types_supported(self):
        """
        List of supported subject types

        :type:
             list[ :class:`~ntnx_iam_py_client.models.iam.v4.authn.DiscoverySubjectType` ]
        """  # noqa: E501
        return self.__subject_types_supported

    @subject_types_supported.setter
    def subject_types_supported(self, subject_types_supported):
        if subject_types_supported is None:
            raise ValueError("Invalid value for `subject_types_supported`, must not be `None`")  # noqa: E501

        self.__subject_types_supported = subject_types_supported

    @property
    def id_token_signing_alg_values_supported(self):
        """
        List of the JWS signing algorithms supported for the ID Token

        :type:
             list[ :class:`~ntnx_iam_py_client.models.iam.v4.authn.SigningAlgoType` ]
        """  # noqa: E501
        return self.__id_token_signing_alg_values_supported

    @id_token_signing_alg_values_supported.setter
    def id_token_signing_alg_values_supported(self, id_token_signing_alg_values_supported):
        if id_token_signing_alg_values_supported is None:
            raise ValueError("Invalid value for `id_token_signing_alg_values_supported`, must not be `None`")  # noqa: E501

        self.__id_token_signing_alg_values_supported = id_token_signing_alg_values_supported

    @property
    def scopes_supported(self):
        """
        List of supported OIDC scope values

        :type:
             list[ :class:`~ntnx_iam_py_client.models.iam.v4.authn.ScopesType` ]
        """  # noqa: E501
        return self.__scopes_supported

    @scopes_supported.setter
    def scopes_supported(self, scopes_supported):
        if scopes_supported is None:
            raise ValueError("Invalid value for `scopes_supported`, must not be `None`")  # noqa: E501

        self.__scopes_supported = scopes_supported

    @property
    def token_endpoint_auth_methods_supported(self):
        """
        List of client authentication methods supported by the token endpoint

        :type:
             list[ :class:`~ntnx_iam_py_client.models.iam.v4.authn.AuthMethodType` ]
        """  # noqa: E501
        return self.__token_endpoint_auth_methods_supported

    @token_endpoint_auth_methods_supported.setter
    def token_endpoint_auth_methods_supported(self, token_endpoint_auth_methods_supported):
        if token_endpoint_auth_methods_supported is None:
            raise ValueError("Invalid value for `token_endpoint_auth_methods_supported`, must not be `None`")  # noqa: E501

        self.__token_endpoint_auth_methods_supported = token_endpoint_auth_methods_supported

    @property
    def claims_supported(self):
        """
        List of supported claims

        :type:
             list[ :class:`~ntnx_iam_py_client.models.iam.v4.authn.ClaimsType` ]
        """  # noqa: E501
        return self.__claims_supported

    @claims_supported.setter
    def claims_supported(self, claims_supported):
        if claims_supported is None:
            raise ValueError("Invalid value for `claims_supported`, must not be `None`")  # noqa: E501

        self.__claims_supported = claims_supported

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(OidcWellKnownConfig, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OidcWellKnownConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

