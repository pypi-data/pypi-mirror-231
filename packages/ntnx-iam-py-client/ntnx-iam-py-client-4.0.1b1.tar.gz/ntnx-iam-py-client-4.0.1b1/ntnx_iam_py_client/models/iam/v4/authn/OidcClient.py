# coding: utf-8


"""
IGNORE:
    Nutanix Iam Versioned APIs

    Manage Identity and Access Management of Nutanix clusters.  # noqa: E501

    OpenAPI spec version: 4.0.1-beta-1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
IGNORE
"""
import pprint
import json
import ast
import re  # noqa: F401

import six

class OidcClient(object):

    """Information for OIDC client

    :param client_name: (:attr:`client_name`) Name of OIDC client
    :type client_name: required
    :param application_type: (:attr:`application_type`) Application type for OIDC client
    :type application_type: 
    :param redirect_uris: (:attr:`redirect_uris`) Redirect URIs for OIDC client
    :type redirect_uris: required
    :param sha256_thumbprint_list: (:attr:`sha256_thumbprint_list`) SHA256 of a certificate public key
    :type sha256_thumbprint_list: 
    :param created_time: (:attr:`created_time`) Creation time of the OIDC client
    :type created_time: 
    :param last_updated_time: (:attr:`last_updated_time`) Last Update time of the OIDC client
    :type last_updated_time: 
    :param client_id: (:attr:`client_id`) Unique client identifier generated by the server
    :type client_id: 
    :param client_secret: (:attr:`client_secret`) Credential generated by the server for authentication of the OIDC client
    :type client_secret: 

    """
    """
    IGNORE:
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    IGNORE
    """  # noqa: E501
    swagger_types = {
        'client_name': 'str',
        'application_type': 'str',
        'redirect_uris': 'list[str]',
        'sha256_thumbprint_list': 'list[str]',
        'created_time': 'datetime',
        'last_updated_time': 'datetime',
        'client_id': 'str',
        'client_secret': 'str',
        '_reserved': 'dict(str, object)',
        '_object_type': 'str',
        '_unknown_fields': 'dict(str, object)',
    }

    attribute_map = {
        'client_name': 'client_name',
        'application_type': 'application_type',
        'redirect_uris': 'redirect_uris',
        'sha256_thumbprint_list': 'sha256_thumbprint_list',
        'created_time': 'created_time',
        'last_updated_time': 'last_updated_time',
        'client_id': 'client_id',
        'client_secret': 'client_secret',
        '_reserved': '$reserved',
        '_object_type': '$objectType',
        '_unknown_fields': '$unknownFields',
    }



    def __init__(self, client_name=None, application_type=None, redirect_uris=None, sha256_thumbprint_list=None, created_time=None, last_updated_time=None, client_id=None, client_secret=None, *args, **kwargs):  # noqa: E501
        self.__client_name = None
        self.__application_type = None
        self.__redirect_uris = None
        self.__sha256_thumbprint_list = None
        self.__created_time = None
        self.__last_updated_time = None
        self.__client_id = None
        self.__client_secret = None
        self.discriminator = None
        self.__client_name = client_name
        if application_type is not None:
            self.__application_type = application_type
        self.__redirect_uris = redirect_uris
        if sha256_thumbprint_list is not None:
            self.__sha256_thumbprint_list = sha256_thumbprint_list
        if created_time is not None:
            self.__created_time = created_time
        if last_updated_time is not None:
            self.__last_updated_time = last_updated_time
        if client_id is not None:
            self.__client_id = client_id
        if client_secret is not None:
            self.__client_secret = client_secret
        # populate hidden vars if not empty
        self._populate_hidden_vars(kwargs)

    def _initialize_object_type(self):
        return 'iam.v4.authn.OidcClient'

    def _initialize_fq_object_type(self):
        return 'iam.v4.r0.b1.authn.OidcClient'

    def _populate_hidden_vars(self, kwargs):
        if "_reserved" in kwargs and kwargs["_reserved"] is not None:
            self.__dollar_reserved = kwargs["_reserved"]
        elif "_reserved" in self.attribute_map and self.attribute_map["_reserved"] in kwargs and kwargs[self.attribute_map["_reserved"]] is not None:
            self.__dollar_reserved = kwargs[self.attribute_map["_reserved"]]
        else :
            self.__dollar_reserved = {"$fqObjectType": self._initialize_fq_object_type()}
        if "_unknown_fields" in kwargs and kwargs["_unknown_fields"] is not None:
            self.__dollar_unknown_fields = kwargs["_unknown_fields"]
        elif "_unknown_fields" in self.attribute_map and self.attribute_map["_unknown_fields"] in kwargs and kwargs[self.attribute_map["_unknown_fields"]] is not None:
            self.__dollar_unknown_fields = kwargs[self.attribute_map["_unknown_fields"]]
        else :
            self.__dollar_unknown_fields = {}
        if "_object_type" in kwargs and kwargs["_object_type"] is not None:
            self.__dollar_object_type = kwargs["_object_type"]
        elif "_object_type" in self.attribute_map and self.attribute_map["_object_type"] in kwargs and kwargs[self.attribute_map["_object_type"]] is not None:
            self.__dollar_object_type = kwargs[self.attribute_map["_object_type"]]
        else:
            self.__dollar_object_type = self._initialize_object_type()

    def get_object_type(self):
        return self.__dollar_object_type

    def get_reserved(self):
        return self.__dollar_reserved

    def get_unknown_fields(self):
        return self.__dollar_unknown_fields

    @property
    def client_name(self):
        """
        Name of OIDC client

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__client_name

    @client_name.setter
    def client_name(self, client_name):
        if client_name is None:
            raise ValueError("Invalid value for `client_name`, must not be `None`")  # noqa: E501
        if client_name is not None and len(client_name) > 255:
            raise ValueError("Invalid value for `client_name`, length must be less than or equal to `255`")  # noqa: E501
        if client_name is not None and len(client_name) < 1:
            raise ValueError("Invalid value for `client_name`, length must be greater than or equal to `1`")  # noqa: E501
        if client_name is not None and not re.search('^[^<>;\'()&+%\/\\\\\"`]*$', client_name):  # noqa: E501
            raise ValueError(r"Invalid value for `client_name`, must be a follow pattern or equal to `/^[^<>;'()&+%\/\\\\\"`]*$/`")  # noqa: E501

        self.__client_name = client_name

    @property
    def application_type(self):
        """
        Application type for OIDC client

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__application_type

    @application_type.setter
    def application_type(self, application_type):
        if application_type is not None and len(application_type) > 255:
            raise ValueError("Invalid value for `application_type`, length must be less than or equal to `255`")  # noqa: E501
        if application_type is not None and not re.search('^[^<>;\'()&+%\/\\\\\"`]*$', application_type):  # noqa: E501
            raise ValueError(r"Invalid value for `application_type`, must be a follow pattern or equal to `/^[^<>;'()&+%\/\\\\\"`]*$/`")  # noqa: E501

        self.__application_type = application_type

    @property
    def redirect_uris(self):
        """
        Redirect URIs for OIDC client

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__redirect_uris

    @redirect_uris.setter
    def redirect_uris(self, redirect_uris):
        if redirect_uris is None:
            raise ValueError("Invalid value for `redirect_uris`, must not be `None`")  # noqa: E501

        self.__redirect_uris = redirect_uris

    @property
    def sha256_thumbprint_list(self):
        """
        SHA256 of a certificate public key

        :type:
            list[ :class:`~str` ]
        """  # noqa: E501
        return self.__sha256_thumbprint_list

    @sha256_thumbprint_list.setter
    def sha256_thumbprint_list(self, sha256_thumbprint_list):

        self.__sha256_thumbprint_list = sha256_thumbprint_list

    @property
    def created_time(self):
        """
        Creation time of the OIDC client

        :type:

                :class:`~datetime`
        """  # noqa: E501
        return self.__created_time

    @created_time.setter
    def created_time(self, created_time):

        self.__created_time = created_time

    @property
    def last_updated_time(self):
        """
        Last Update time of the OIDC client

        :type:

                :class:`~datetime`
        """  # noqa: E501
        return self.__last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):

        self.__last_updated_time = last_updated_time

    @property
    def client_id(self):
        """
        Unique client identifier generated by the server

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__client_id

    @client_id.setter
    def client_id(self, client_id):

        self.__client_id = client_id

    @property
    def client_secret(self):
        """
        Credential generated by the server for authentication of the OIDC client

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__client_secret

    @client_secret.setter
    def client_secret(self, client_secret):

        self.__client_secret = client_secret

    @property
    def _reserved(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_reserved

    @property
    def _object_type(self):
        """
        

        :type:

                :class:`~str`
        """  # noqa: E501
        return self.__dollar_object_type

    @property
    def _unknown_fields(self):
        """
        

        :type:
            dict(str, :class:`~object`)
        """  # noqa: E501
        return self.__dollar_unknown_fields

    def _to_dict(self, sanitize):
        """Returns the model properties as a dict. Omits None properties based on the provided "sanitize" parameter.

        :param sanitize: A flag to omit None properties if set to True
        :type sanitize: bool
        """

        result = {}

        for attr, attr_type in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x._to_dict(sanitize) if hasattr(x, "_to_dict") else x,
                    value
                ))
            elif hasattr(value, "_to_dict"):
                result[attr] = value._to_dict(sanitize)
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1]._to_dict(sanitize))
                    if hasattr(item[1], "_to_dict") else item,
                    six.iteritems(value)
                ))
            else:
                if sanitize:
                    if value is not None:
                        result[attr] = value
                else:
                    result[attr] = value
        if issubclass(OidcClient, dict):
            for key, value in six.iteritems(self):
                result[key] = value

        return result

    def to_dict(self):
        """Returns the model properties as a dictionary"""
        return self._to_dict(False)

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self._to_dict(True))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OidcClient):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

