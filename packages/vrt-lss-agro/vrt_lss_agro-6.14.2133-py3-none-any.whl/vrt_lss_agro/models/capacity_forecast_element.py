# coding: utf-8

"""
    VRt.Agro [AG]

    The version of the OpenAPI document: 6.14.2133

    Generated by OpenAPI Generator: 6.6.0

    Do not edit the code manually

    2023 Veeroute
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, conint
from vrt_lss_agro.models.date_window import DateWindow

class CapacityForecastElement(BaseModel):
    """
    Value for time window.
    """
    date_window: DateWindow = Field(...)
    capacity: conint(strict=True, le=10000000, ge=0) = Field(..., description="The maximum number of tons of grain that can be processed each day within the specified time window.")
    __properties = ["date_window", "capacity"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CapacityForecastElement:
        """Create an instance of CapacityForecastElement from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of date_window
        if self.date_window:
            _dict['date_window'] = self.date_window.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CapacityForecastElement:
        """Create an instance of CapacityForecastElement from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return CapacityForecastElement.parse_obj(obj)

        _obj = CapacityForecastElement.parse_obj({
            "date_window": DateWindow.from_dict(obj.get("date_window")) if obj.get("date_window") is not None else None,
            "capacity": obj.get("capacity")
        })
        return _obj

