# coding: utf-8

"""
    VRt.Agro [AG]

    The version of the OpenAPI document: 6.14.2133

    Generated by OpenAPI Generator: 6.6.0

    Do not edit the code manually

    2023 Veeroute
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json

from datetime import date

from pydantic import BaseModel, Field

class DateWindow(BaseModel):
    """
    Time window between the dates.
    """
    var_from: date = Field(..., alias="from", description="Window start date in the YYYY-MM-DD format.")
    to: date = Field(..., description="Window end (inclusive) date in the YYYY-MM-DD format.")
    __properties = ["from", "to"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DateWindow:
        """Create an instance of DateWindow from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DateWindow:
        """Create an instance of DateWindow from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return DateWindow.parse_obj(obj)

        _obj = DateWindow.parse_obj({
            "var_from": obj.get("from"),
            "to": obj.get("to")
        })
        return _obj

