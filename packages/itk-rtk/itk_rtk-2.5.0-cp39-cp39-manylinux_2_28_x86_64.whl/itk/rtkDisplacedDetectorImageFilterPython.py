# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkDisplacedDetectorImageFilterPython
else:
    import _rtkDisplacedDetectorImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkDisplacedDetectorImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkDisplacedDetectorImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImageToImageFilterCommonPython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterAPython

def rtkDisplacedDetectorImageFilterID3_New():
    return rtkDisplacedDetectorImageFilterID3.New()

class rtkDisplacedDetectorImageFilterID3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ rtkDisplacedDetectorImageFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID3_Clone)
    GetGeometry = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID3_GetGeometry)
    SetGeometry = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID3_SetGeometry)
    GetPadOnTruncatedSide = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID3_GetPadOnTruncatedSide)
    SetPadOnTruncatedSide = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID3_SetPadOnTruncatedSide)
    SetOffsets = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID3_SetOffsets)
    GetMinimumOffset = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID3_GetMinimumOffset)
    GetMaximumOffset = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID3_GetMaximumOffset)
    GetDisable = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID3_GetDisable)
    SetDisable = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID3_SetDisable)
    __swig_destroy__ = _rtkDisplacedDetectorImageFilterPython.delete_rtkDisplacedDetectorImageFilterID3
    cast = _swig_new_static_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID3_cast)

    def New(*args, **kargs):
        """New() -> rtkDisplacedDetectorImageFilterID3

        Create a new object of the class rtkDisplacedDetectorImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkDisplacedDetectorImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkDisplacedDetectorImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkDisplacedDetectorImageFilterID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkDisplacedDetectorImageFilterID3 in _rtkDisplacedDetectorImageFilterPython:
_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID3_swigregister(rtkDisplacedDetectorImageFilterID3)
rtkDisplacedDetectorImageFilterID3___New_orig__ = _rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID3___New_orig__
rtkDisplacedDetectorImageFilterID3_cast = _rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID3_cast


def rtkDisplacedDetectorImageFilterID4_New():
    return rtkDisplacedDetectorImageFilterID4.New()

class rtkDisplacedDetectorImageFilterID4(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID4ID4):
    r"""Proxy of C++ rtkDisplacedDetectorImageFilterID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID4___New_orig__)
    Clone = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID4_Clone)
    GetGeometry = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID4_GetGeometry)
    SetGeometry = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID4_SetGeometry)
    GetPadOnTruncatedSide = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID4_GetPadOnTruncatedSide)
    SetPadOnTruncatedSide = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID4_SetPadOnTruncatedSide)
    SetOffsets = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID4_SetOffsets)
    GetMinimumOffset = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID4_GetMinimumOffset)
    GetMaximumOffset = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID4_GetMaximumOffset)
    GetDisable = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID4_GetDisable)
    SetDisable = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID4_SetDisable)
    __swig_destroy__ = _rtkDisplacedDetectorImageFilterPython.delete_rtkDisplacedDetectorImageFilterID4
    cast = _swig_new_static_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID4_cast)

    def New(*args, **kargs):
        """New() -> rtkDisplacedDetectorImageFilterID4

        Create a new object of the class rtkDisplacedDetectorImageFilterID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkDisplacedDetectorImageFilterID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkDisplacedDetectorImageFilterID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkDisplacedDetectorImageFilterID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkDisplacedDetectorImageFilterID4 in _rtkDisplacedDetectorImageFilterPython:
_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID4_swigregister(rtkDisplacedDetectorImageFilterID4)
rtkDisplacedDetectorImageFilterID4___New_orig__ = _rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID4___New_orig__
rtkDisplacedDetectorImageFilterID4_cast = _rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterID4_cast


def rtkDisplacedDetectorImageFilterIF3_New():
    return rtkDisplacedDetectorImageFilterIF3.New()

class rtkDisplacedDetectorImageFilterIF3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ rtkDisplacedDetectorImageFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF3_Clone)
    GetGeometry = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF3_GetGeometry)
    SetGeometry = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF3_SetGeometry)
    GetPadOnTruncatedSide = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF3_GetPadOnTruncatedSide)
    SetPadOnTruncatedSide = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF3_SetPadOnTruncatedSide)
    SetOffsets = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF3_SetOffsets)
    GetMinimumOffset = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF3_GetMinimumOffset)
    GetMaximumOffset = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF3_GetMaximumOffset)
    GetDisable = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF3_GetDisable)
    SetDisable = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF3_SetDisable)
    __swig_destroy__ = _rtkDisplacedDetectorImageFilterPython.delete_rtkDisplacedDetectorImageFilterIF3
    cast = _swig_new_static_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> rtkDisplacedDetectorImageFilterIF3

        Create a new object of the class rtkDisplacedDetectorImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkDisplacedDetectorImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkDisplacedDetectorImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkDisplacedDetectorImageFilterIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkDisplacedDetectorImageFilterIF3 in _rtkDisplacedDetectorImageFilterPython:
_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF3_swigregister(rtkDisplacedDetectorImageFilterIF3)
rtkDisplacedDetectorImageFilterIF3___New_orig__ = _rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF3___New_orig__
rtkDisplacedDetectorImageFilterIF3_cast = _rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF3_cast


def rtkDisplacedDetectorImageFilterIF4_New():
    return rtkDisplacedDetectorImageFilterIF4.New()

class rtkDisplacedDetectorImageFilterIF4(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF4IF4):
    r"""Proxy of C++ rtkDisplacedDetectorImageFilterIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF4___New_orig__)
    Clone = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF4_Clone)
    GetGeometry = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF4_GetGeometry)
    SetGeometry = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF4_SetGeometry)
    GetPadOnTruncatedSide = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF4_GetPadOnTruncatedSide)
    SetPadOnTruncatedSide = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF4_SetPadOnTruncatedSide)
    SetOffsets = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF4_SetOffsets)
    GetMinimumOffset = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF4_GetMinimumOffset)
    GetMaximumOffset = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF4_GetMaximumOffset)
    GetDisable = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF4_GetDisable)
    SetDisable = _swig_new_instance_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF4_SetDisable)
    __swig_destroy__ = _rtkDisplacedDetectorImageFilterPython.delete_rtkDisplacedDetectorImageFilterIF4
    cast = _swig_new_static_method(_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF4_cast)

    def New(*args, **kargs):
        """New() -> rtkDisplacedDetectorImageFilterIF4

        Create a new object of the class rtkDisplacedDetectorImageFilterIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkDisplacedDetectorImageFilterIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkDisplacedDetectorImageFilterIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkDisplacedDetectorImageFilterIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkDisplacedDetectorImageFilterIF4 in _rtkDisplacedDetectorImageFilterPython:
_rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF4_swigregister(rtkDisplacedDetectorImageFilterIF4)
rtkDisplacedDetectorImageFilterIF4___New_orig__ = _rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF4___New_orig__
rtkDisplacedDetectorImageFilterIF4_cast = _rtkDisplacedDetectorImageFilterPython.rtkDisplacedDetectorImageFilterIF4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def displaced_detector_image_filter(*args: itkt.ImageLike,  geometry=..., pad_on_truncated_side: bool=..., offsets: float=..., disable: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for DisplacedDetectorImageFilter"""
    import itk

    kwarg_typehints = { 'geometry':geometry,'pad_on_truncated_side':pad_on_truncated_side,'offsets':offsets,'disable':disable }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.DisplacedDetectorImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def displaced_detector_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.DisplacedDetectorImageFilter
    displaced_detector_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    displaced_detector_image_filter.__doc__ = filter_object.__doc__




