# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkJosephBackProjectionImageFilterPython
else:
    import _rtkJosephBackProjectionImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkJosephBackProjectionImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkJosephBackProjectionImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.rtkBackProjectionImageFilterPython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.ITKCommonBasePython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython
class rtkFunctorSplatWeightMultiplicationDDD(object):
    r"""Proxy of C++ rtkFunctorSplatWeightMultiplicationDDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkJosephBackProjectionImageFilterPython.delete_rtkFunctorSplatWeightMultiplicationDDD
    __ne__ = _swig_new_instance_method(_rtkJosephBackProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationDDD___ne__)
    __eq__ = _swig_new_instance_method(_rtkJosephBackProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationDDD___eq__)
    __call__ = _swig_new_instance_method(_rtkJosephBackProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationDDD___call__)

    def __init__(self, *args):
        r"""
        __init__(self) -> rtkFunctorSplatWeightMultiplicationDDD
        __init__(self, arg0) -> rtkFunctorSplatWeightMultiplicationDDD

        Parameters
        ----------
        arg0: rtkFunctorSplatWeightMultiplicationDDD const &

        """
        _rtkJosephBackProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationDDD_swiginit(self, _rtkJosephBackProjectionImageFilterPython.new_rtkFunctorSplatWeightMultiplicationDDD(*args))

# Register rtkFunctorSplatWeightMultiplicationDDD in _rtkJosephBackProjectionImageFilterPython:
_rtkJosephBackProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationDDD_swigregister(rtkFunctorSplatWeightMultiplicationDDD)

class rtkFunctorSplatWeightMultiplicationFDF(object):
    r"""Proxy of C++ rtkFunctorSplatWeightMultiplicationFDF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _rtkJosephBackProjectionImageFilterPython.delete_rtkFunctorSplatWeightMultiplicationFDF
    __ne__ = _swig_new_instance_method(_rtkJosephBackProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationFDF___ne__)
    __eq__ = _swig_new_instance_method(_rtkJosephBackProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationFDF___eq__)
    __call__ = _swig_new_instance_method(_rtkJosephBackProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationFDF___call__)

    def __init__(self, *args):
        r"""
        __init__(self) -> rtkFunctorSplatWeightMultiplicationFDF
        __init__(self, arg0) -> rtkFunctorSplatWeightMultiplicationFDF

        Parameters
        ----------
        arg0: rtkFunctorSplatWeightMultiplicationFDF const &

        """
        _rtkJosephBackProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationFDF_swiginit(self, _rtkJosephBackProjectionImageFilterPython.new_rtkFunctorSplatWeightMultiplicationFDF(*args))

# Register rtkFunctorSplatWeightMultiplicationFDF in _rtkJosephBackProjectionImageFilterPython:
_rtkJosephBackProjectionImageFilterPython.rtkFunctorSplatWeightMultiplicationFDF_swigregister(rtkFunctorSplatWeightMultiplicationFDF)


def rtkJosephBackProjectionImageFilterID3ID3SWMDDD_New():
    return rtkJosephBackProjectionImageFilterID3ID3SWMDDD.New()

class rtkJosephBackProjectionImageFilterID3ID3SWMDDD(itk.rtkBackProjectionImageFilterPython.rtkBackProjectionImageFilterID3ID3):
    r"""Proxy of C++ rtkJosephBackProjectionImageFilterID3ID3SWMDDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDD___New_orig__)
    Clone = _swig_new_instance_method(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDD_Clone)
    GetInterpolationWeightMultiplication = _swig_new_instance_method(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDD_GetInterpolationWeightMultiplication)
    SetInterpolationWeightMultiplication = _swig_new_instance_method(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDD_SetInterpolationWeightMultiplication)
    GetSplatWeightMultiplication = _swig_new_instance_method(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDD_GetSplatWeightMultiplication)
    SetSplatWeightMultiplication = _swig_new_instance_method(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDD_SetSplatWeightMultiplication)
    GetSumAlongRay = _swig_new_instance_method(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDD_GetSumAlongRay)
    SetSumAlongRay = _swig_new_instance_method(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDD_SetSumAlongRay)
    GetInferiorClip = _swig_new_instance_method(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDD_GetInferiorClip)
    SetInferiorClip = _swig_new_instance_method(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDD_SetInferiorClip)
    GetSuperiorClip = _swig_new_instance_method(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDD_GetSuperiorClip)
    SetSuperiorClip = _swig_new_instance_method(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDD_SetSuperiorClip)
    __swig_destroy__ = _rtkJosephBackProjectionImageFilterPython.delete_rtkJosephBackProjectionImageFilterID3ID3SWMDDD
    cast = _swig_new_static_method(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDD_cast)

    def New(*args, **kargs):
        """New() -> rtkJosephBackProjectionImageFilterID3ID3SWMDDD

        Create a new object of the class rtkJosephBackProjectionImageFilterID3ID3SWMDDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkJosephBackProjectionImageFilterID3ID3SWMDDD.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkJosephBackProjectionImageFilterID3ID3SWMDDD.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkJosephBackProjectionImageFilterID3ID3SWMDDD.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkJosephBackProjectionImageFilterID3ID3SWMDDD in _rtkJosephBackProjectionImageFilterPython:
_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDD_swigregister(rtkJosephBackProjectionImageFilterID3ID3SWMDDD)
rtkJosephBackProjectionImageFilterID3ID3SWMDDD___New_orig__ = _rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDD___New_orig__
rtkJosephBackProjectionImageFilterID3ID3SWMDDD_cast = _rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterID3ID3SWMDDD_cast


def rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_New():
    return rtkJosephBackProjectionImageFilterIF3IF3SWMFDF.New()

class rtkJosephBackProjectionImageFilterIF3IF3SWMFDF(itk.rtkBackProjectionImageFilterPython.rtkBackProjectionImageFilterIF3IF3):
    r"""Proxy of C++ rtkJosephBackProjectionImageFilterIF3IF3SWMFDF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF___New_orig__)
    Clone = _swig_new_instance_method(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_Clone)
    GetInterpolationWeightMultiplication = _swig_new_instance_method(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_GetInterpolationWeightMultiplication)
    SetInterpolationWeightMultiplication = _swig_new_instance_method(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_SetInterpolationWeightMultiplication)
    GetSplatWeightMultiplication = _swig_new_instance_method(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_GetSplatWeightMultiplication)
    SetSplatWeightMultiplication = _swig_new_instance_method(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_SetSplatWeightMultiplication)
    GetSumAlongRay = _swig_new_instance_method(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_GetSumAlongRay)
    SetSumAlongRay = _swig_new_instance_method(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_SetSumAlongRay)
    GetInferiorClip = _swig_new_instance_method(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_GetInferiorClip)
    SetInferiorClip = _swig_new_instance_method(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_SetInferiorClip)
    GetSuperiorClip = _swig_new_instance_method(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_GetSuperiorClip)
    SetSuperiorClip = _swig_new_instance_method(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_SetSuperiorClip)
    __swig_destroy__ = _rtkJosephBackProjectionImageFilterPython.delete_rtkJosephBackProjectionImageFilterIF3IF3SWMFDF
    cast = _swig_new_static_method(_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_cast)

    def New(*args, **kargs):
        """New() -> rtkJosephBackProjectionImageFilterIF3IF3SWMFDF

        Create a new object of the class rtkJosephBackProjectionImageFilterIF3IF3SWMFDF and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkJosephBackProjectionImageFilterIF3IF3SWMFDF.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkJosephBackProjectionImageFilterIF3IF3SWMFDF.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkJosephBackProjectionImageFilterIF3IF3SWMFDF.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkJosephBackProjectionImageFilterIF3IF3SWMFDF in _rtkJosephBackProjectionImageFilterPython:
_rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_swigregister(rtkJosephBackProjectionImageFilterIF3IF3SWMFDF)
rtkJosephBackProjectionImageFilterIF3IF3SWMFDF___New_orig__ = _rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF___New_orig__
rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_cast = _rtkJosephBackProjectionImageFilterPython.rtkJosephBackProjectionImageFilterIF3IF3SWMFDF_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def joseph_back_projection_image_filter(*args: itkt.ImageLike,  interpolation_weight_multiplication=..., splat_weight_multiplication=..., sum_along_ray=..., inferior_clip: float=..., superior_clip: float=..., geometry=..., transpose: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for JosephBackProjectionImageFilter"""
    import itk

    kwarg_typehints = { 'interpolation_weight_multiplication':interpolation_weight_multiplication,'splat_weight_multiplication':splat_weight_multiplication,'sum_along_ray':sum_along_ray,'inferior_clip':inferior_clip,'superior_clip':superior_clip,'geometry':geometry,'transpose':transpose }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.JosephBackProjectionImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def joseph_back_projection_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.JosephBackProjectionImageFilter
    joseph_back_projection_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    joseph_back_projection_image_filter.__doc__ = filter_object.__doc__




