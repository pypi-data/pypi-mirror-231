# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkTotalVariationImageFilterPython
else:
    import _rtkTotalVariationImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkTotalVariationImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkTotalVariationImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkSimpleDataObjectDecoratorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkArrayPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython

def rtkTotalVariationImageFilterID2_New():
    return rtkTotalVariationImageFilterID2.New()

class rtkTotalVariationImageFilterID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ rtkTotalVariationImageFilterID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID2___New_orig__)
    Clone = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID2_Clone)
    GetTotalVariation = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID2_GetTotalVariation)
    GetTotalVariationOutput = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID2_GetTotalVariationOutput)
    InputHasNumericTraitsCheck = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID2_InputHasNumericTraitsCheck
    
    SetUseImageSpacingOn = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID2_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID2_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID2_GetUseImageSpacing)
    __swig_destroy__ = _rtkTotalVariationImageFilterPython.delete_rtkTotalVariationImageFilterID2
    cast = _swig_new_static_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID2_cast)

    def New(*args, **kargs):
        """New() -> rtkTotalVariationImageFilterID2

        Create a new object of the class rtkTotalVariationImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkTotalVariationImageFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkTotalVariationImageFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkTotalVariationImageFilterID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkTotalVariationImageFilterID2 in _rtkTotalVariationImageFilterPython:
_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID2_swigregister(rtkTotalVariationImageFilterID2)
rtkTotalVariationImageFilterID2___New_orig__ = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID2___New_orig__
rtkTotalVariationImageFilterID2_cast = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID2_cast


def rtkTotalVariationImageFilterID3_New():
    return rtkTotalVariationImageFilterID3.New()

class rtkTotalVariationImageFilterID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ rtkTotalVariationImageFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID3_Clone)
    GetTotalVariation = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID3_GetTotalVariation)
    GetTotalVariationOutput = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID3_GetTotalVariationOutput)
    InputHasNumericTraitsCheck = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID3_InputHasNumericTraitsCheck
    
    SetUseImageSpacingOn = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID3_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID3_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID3_GetUseImageSpacing)
    __swig_destroy__ = _rtkTotalVariationImageFilterPython.delete_rtkTotalVariationImageFilterID3
    cast = _swig_new_static_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID3_cast)

    def New(*args, **kargs):
        """New() -> rtkTotalVariationImageFilterID3

        Create a new object of the class rtkTotalVariationImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkTotalVariationImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkTotalVariationImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkTotalVariationImageFilterID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkTotalVariationImageFilterID3 in _rtkTotalVariationImageFilterPython:
_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID3_swigregister(rtkTotalVariationImageFilterID3)
rtkTotalVariationImageFilterID3___New_orig__ = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID3___New_orig__
rtkTotalVariationImageFilterID3_cast = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID3_cast


def rtkTotalVariationImageFilterID4_New():
    return rtkTotalVariationImageFilterID4.New()

class rtkTotalVariationImageFilterID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ rtkTotalVariationImageFilterID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID4___New_orig__)
    Clone = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID4_Clone)
    GetTotalVariation = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID4_GetTotalVariation)
    GetTotalVariationOutput = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID4_GetTotalVariationOutput)
    InputHasNumericTraitsCheck = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID4_InputHasNumericTraitsCheck
    
    SetUseImageSpacingOn = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID4_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID4_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID4_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID4_GetUseImageSpacing)
    __swig_destroy__ = _rtkTotalVariationImageFilterPython.delete_rtkTotalVariationImageFilterID4
    cast = _swig_new_static_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID4_cast)

    def New(*args, **kargs):
        """New() -> rtkTotalVariationImageFilterID4

        Create a new object of the class rtkTotalVariationImageFilterID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkTotalVariationImageFilterID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkTotalVariationImageFilterID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkTotalVariationImageFilterID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkTotalVariationImageFilterID4 in _rtkTotalVariationImageFilterPython:
_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID4_swigregister(rtkTotalVariationImageFilterID4)
rtkTotalVariationImageFilterID4___New_orig__ = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID4___New_orig__
rtkTotalVariationImageFilterID4_cast = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterID4_cast


def rtkTotalVariationImageFilterIF2_New():
    return rtkTotalVariationImageFilterIF2.New()

class rtkTotalVariationImageFilterIF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ rtkTotalVariationImageFilterIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF2___New_orig__)
    Clone = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF2_Clone)
    GetTotalVariation = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF2_GetTotalVariation)
    GetTotalVariationOutput = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF2_GetTotalVariationOutput)
    InputHasNumericTraitsCheck = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF2_InputHasNumericTraitsCheck
    
    SetUseImageSpacingOn = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF2_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF2_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF2_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF2_GetUseImageSpacing)
    __swig_destroy__ = _rtkTotalVariationImageFilterPython.delete_rtkTotalVariationImageFilterIF2
    cast = _swig_new_static_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF2_cast)

    def New(*args, **kargs):
        """New() -> rtkTotalVariationImageFilterIF2

        Create a new object of the class rtkTotalVariationImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkTotalVariationImageFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkTotalVariationImageFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkTotalVariationImageFilterIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkTotalVariationImageFilterIF2 in _rtkTotalVariationImageFilterPython:
_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF2_swigregister(rtkTotalVariationImageFilterIF2)
rtkTotalVariationImageFilterIF2___New_orig__ = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF2___New_orig__
rtkTotalVariationImageFilterIF2_cast = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF2_cast


def rtkTotalVariationImageFilterIF3_New():
    return rtkTotalVariationImageFilterIF3.New()

class rtkTotalVariationImageFilterIF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ rtkTotalVariationImageFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF3_Clone)
    GetTotalVariation = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF3_GetTotalVariation)
    GetTotalVariationOutput = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF3_GetTotalVariationOutput)
    InputHasNumericTraitsCheck = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF3_InputHasNumericTraitsCheck
    
    SetUseImageSpacingOn = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF3_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF3_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF3_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF3_GetUseImageSpacing)
    __swig_destroy__ = _rtkTotalVariationImageFilterPython.delete_rtkTotalVariationImageFilterIF3
    cast = _swig_new_static_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> rtkTotalVariationImageFilterIF3

        Create a new object of the class rtkTotalVariationImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkTotalVariationImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkTotalVariationImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkTotalVariationImageFilterIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkTotalVariationImageFilterIF3 in _rtkTotalVariationImageFilterPython:
_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF3_swigregister(rtkTotalVariationImageFilterIF3)
rtkTotalVariationImageFilterIF3___New_orig__ = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF3___New_orig__
rtkTotalVariationImageFilterIF3_cast = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF3_cast


def rtkTotalVariationImageFilterIF4_New():
    return rtkTotalVariationImageFilterIF4.New()

class rtkTotalVariationImageFilterIF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ rtkTotalVariationImageFilterIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF4___New_orig__)
    Clone = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF4_Clone)
    GetTotalVariation = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF4_GetTotalVariation)
    GetTotalVariationOutput = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF4_GetTotalVariationOutput)
    InputHasNumericTraitsCheck = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF4_InputHasNumericTraitsCheck
    
    SetUseImageSpacingOn = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF4_SetUseImageSpacingOn)
    SetUseImageSpacingOff = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF4_SetUseImageSpacingOff)
    SetUseImageSpacing = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF4_SetUseImageSpacing)
    GetUseImageSpacing = _swig_new_instance_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF4_GetUseImageSpacing)
    __swig_destroy__ = _rtkTotalVariationImageFilterPython.delete_rtkTotalVariationImageFilterIF4
    cast = _swig_new_static_method(_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF4_cast)

    def New(*args, **kargs):
        """New() -> rtkTotalVariationImageFilterIF4

        Create a new object of the class rtkTotalVariationImageFilterIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkTotalVariationImageFilterIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkTotalVariationImageFilterIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkTotalVariationImageFilterIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkTotalVariationImageFilterIF4 in _rtkTotalVariationImageFilterPython:
_rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF4_swigregister(rtkTotalVariationImageFilterIF4)
rtkTotalVariationImageFilterIF4___New_orig__ = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF4___New_orig__
rtkTotalVariationImageFilterIF4_cast = _rtkTotalVariationImageFilterPython.rtkTotalVariationImageFilterIF4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def total_variation_image_filter(*args: itkt.ImageLike,  use_image_spacing: bool=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for TotalVariationImageFilter"""
    import itk

    kwarg_typehints = { 'use_image_spacing':use_image_spacing }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.TotalVariationImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def total_variation_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.TotalVariationImageFilter
    total_variation_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    total_variation_image_filter.__doc__ = filter_object.__doc__




