# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkSARTConeBeamReconstructionFilterPython
else:
    import _rtkSARTConeBeamReconstructionFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkSARTConeBeamReconstructionFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkSARTConeBeamReconstructionFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.rtkIterativeConeBeamReconstructionFilterPython
import itk.itkImagePython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkImageToImageFilterRTKPython
import itk.itkImageRTKPython
import itk.itkImageBaseRTKPython
import itk.itkImageRegionRTKPython
import itk.itkPointRTKPython
import itk.itkMatrixRTKPython
import itk.itkCovariantVectorRTKPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageSourceRTKPython
import itk.rtkForwardProjectionImageFilterPython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkInPlaceImageFilterRTKPython
import itk.rtkBackProjectionImageFilterPython

def rtkSARTConeBeamReconstructionFilterID3ID3_New():
    return rtkSARTConeBeamReconstructionFilterID3ID3.New()

class rtkSARTConeBeamReconstructionFilterID3ID3(itk.rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterID3):
    r"""Proxy of C++ rtkSARTConeBeamReconstructionFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterID3ID3_Clone)
    GetModifiableGeometry = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterID3ID3_GetModifiableGeometry)
    GetGeometry = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterID3ID3_GetGeometry)
    SetGeometry = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterID3ID3_SetGeometry)
    GetNumberOfIterations = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterID3ID3_GetNumberOfIterations)
    SetNumberOfIterations = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterID3ID3_SetNumberOfIterations)
    GetNumberOfProjectionsPerSubset = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterID3ID3_GetNumberOfProjectionsPerSubset)
    SetNumberOfProjectionsPerSubset = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterID3ID3_SetNumberOfProjectionsPerSubset)
    GetLambda = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterID3ID3_GetLambda)
    SetLambda = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterID3ID3_SetLambda)
    GetEnforcePositivity = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterID3ID3_GetEnforcePositivity)
    SetEnforcePositivity = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterID3ID3_SetEnforcePositivity)
    SetGatingWeights = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterID3ID3_SetGatingWeights)
    SetDisableDisplacedDetectorFilter = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterID3ID3_SetDisableDisplacedDetectorFilter)
    GetDisableDisplacedDetectorFilter = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterID3ID3_GetDisableDisplacedDetectorFilter)
    SetDivisionThreshold = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterID3ID3_SetDivisionThreshold)
    GetDivisionThreshold = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterID3ID3_GetDivisionThreshold)
    __swig_destroy__ = _rtkSARTConeBeamReconstructionFilterPython.delete_rtkSARTConeBeamReconstructionFilterID3ID3
    cast = _swig_new_static_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> rtkSARTConeBeamReconstructionFilterID3ID3

        Create a new object of the class rtkSARTConeBeamReconstructionFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkSARTConeBeamReconstructionFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkSARTConeBeamReconstructionFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkSARTConeBeamReconstructionFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkSARTConeBeamReconstructionFilterID3ID3 in _rtkSARTConeBeamReconstructionFilterPython:
_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterID3ID3_swigregister(rtkSARTConeBeamReconstructionFilterID3ID3)
rtkSARTConeBeamReconstructionFilterID3ID3___New_orig__ = _rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterID3ID3___New_orig__
rtkSARTConeBeamReconstructionFilterID3ID3_cast = _rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterID3ID3_cast


def rtkSARTConeBeamReconstructionFilterIF3IF3_New():
    return rtkSARTConeBeamReconstructionFilterIF3IF3.New()

class rtkSARTConeBeamReconstructionFilterIF3IF3(itk.rtkIterativeConeBeamReconstructionFilterPython.rtkIterativeConeBeamReconstructionFilterIF3):
    r"""Proxy of C++ rtkSARTConeBeamReconstructionFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterIF3IF3_Clone)
    GetModifiableGeometry = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterIF3IF3_GetModifiableGeometry)
    GetGeometry = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterIF3IF3_GetGeometry)
    SetGeometry = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterIF3IF3_SetGeometry)
    GetNumberOfIterations = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterIF3IF3_GetNumberOfIterations)
    SetNumberOfIterations = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterIF3IF3_SetNumberOfIterations)
    GetNumberOfProjectionsPerSubset = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterIF3IF3_GetNumberOfProjectionsPerSubset)
    SetNumberOfProjectionsPerSubset = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterIF3IF3_SetNumberOfProjectionsPerSubset)
    GetLambda = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterIF3IF3_GetLambda)
    SetLambda = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterIF3IF3_SetLambda)
    GetEnforcePositivity = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterIF3IF3_GetEnforcePositivity)
    SetEnforcePositivity = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterIF3IF3_SetEnforcePositivity)
    SetGatingWeights = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterIF3IF3_SetGatingWeights)
    SetDisableDisplacedDetectorFilter = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterIF3IF3_SetDisableDisplacedDetectorFilter)
    GetDisableDisplacedDetectorFilter = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterIF3IF3_GetDisableDisplacedDetectorFilter)
    SetDivisionThreshold = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterIF3IF3_SetDivisionThreshold)
    GetDivisionThreshold = _swig_new_instance_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterIF3IF3_GetDivisionThreshold)
    __swig_destroy__ = _rtkSARTConeBeamReconstructionFilterPython.delete_rtkSARTConeBeamReconstructionFilterIF3IF3
    cast = _swig_new_static_method(_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> rtkSARTConeBeamReconstructionFilterIF3IF3

        Create a new object of the class rtkSARTConeBeamReconstructionFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkSARTConeBeamReconstructionFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkSARTConeBeamReconstructionFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkSARTConeBeamReconstructionFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkSARTConeBeamReconstructionFilterIF3IF3 in _rtkSARTConeBeamReconstructionFilterPython:
_rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterIF3IF3_swigregister(rtkSARTConeBeamReconstructionFilterIF3IF3)
rtkSARTConeBeamReconstructionFilterIF3IF3___New_orig__ = _rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterIF3IF3___New_orig__
rtkSARTConeBeamReconstructionFilterIF3IF3_cast = _rtkSARTConeBeamReconstructionFilterPython.rtkSARTConeBeamReconstructionFilterIF3IF3_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def sart_cone_beam_reconstruction_filter(*args: itkt.ImageLike,  geometry=..., number_of_iterations: int=..., number_of_projections_per_subset: int=..., enforce_positivity: bool=..., gating_weights: Sequence[float]=..., disable_displaced_detector_filter: bool=..., division_threshold: float=..., forward_projection_filter=..., back_projection_filter=..., attenuation_map: itkt.Image=..., inferior_clip_image: itkt.Image=..., superior_clip_image: itkt.Image=..., sigma_zero: float=..., alpha_psf: float=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for SARTConeBeamReconstructionFilter"""
    import itk

    kwarg_typehints = { 'geometry':geometry,'number_of_iterations':number_of_iterations,'number_of_projections_per_subset':number_of_projections_per_subset,'enforce_positivity':enforce_positivity,'gating_weights':gating_weights,'disable_displaced_detector_filter':disable_displaced_detector_filter,'division_threshold':division_threshold,'forward_projection_filter':forward_projection_filter,'back_projection_filter':back_projection_filter,'attenuation_map':attenuation_map,'inferior_clip_image':inferior_clip_image,'superior_clip_image':superior_clip_image,'sigma_zero':sigma_zero,'alpha_psf':alpha_psf }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.SARTConeBeamReconstructionFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def sart_cone_beam_reconstruction_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.SARTConeBeamReconstructionFilter
    sart_cone_beam_reconstruction_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    sart_cone_beam_reconstruction_filter.__doc__ = filter_object.__doc__




