# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkConditionalMedianImageFilterPython
else:
    import _rtkConditionalMedianImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkConditionalMedianImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkConditionalMedianImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkSizePython
import itk.pyBasePython
import itk.itkInPlaceImageFilterAPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkImageToImageFilterBPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterAPython

def rtkConditionalMedianImageFilterID2_New():
    return rtkConditionalMedianImageFilterID2.New()

class rtkConditionalMedianImageFilterID2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    r"""Proxy of C++ rtkConditionalMedianImageFilterID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID2___New_orig__)
    Clone = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID2_Clone)
    SetRadius = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID2_SetRadius)
    GetRadius = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID2_GetRadius)
    SetThresholdMultiplier = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID2_SetThresholdMultiplier)
    GetThresholdMultiplier = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID2_GetThresholdMultiplier)
    __swig_destroy__ = _rtkConditionalMedianImageFilterPython.delete_rtkConditionalMedianImageFilterID2
    cast = _swig_new_static_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID2_cast)

    def New(*args, **kargs):
        """New() -> rtkConditionalMedianImageFilterID2

        Create a new object of the class rtkConditionalMedianImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConditionalMedianImageFilterID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConditionalMedianImageFilterID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConditionalMedianImageFilterID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConditionalMedianImageFilterID2 in _rtkConditionalMedianImageFilterPython:
_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID2_swigregister(rtkConditionalMedianImageFilterID2)
rtkConditionalMedianImageFilterID2___New_orig__ = _rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID2___New_orig__
rtkConditionalMedianImageFilterID2_cast = _rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID2_cast


def rtkConditionalMedianImageFilterID3_New():
    return rtkConditionalMedianImageFilterID3.New()

class rtkConditionalMedianImageFilterID3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ rtkConditionalMedianImageFilterID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID3___New_orig__)
    Clone = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID3_Clone)
    SetRadius = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID3_SetRadius)
    GetRadius = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID3_GetRadius)
    SetThresholdMultiplier = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID3_SetThresholdMultiplier)
    GetThresholdMultiplier = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID3_GetThresholdMultiplier)
    __swig_destroy__ = _rtkConditionalMedianImageFilterPython.delete_rtkConditionalMedianImageFilterID3
    cast = _swig_new_static_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID3_cast)

    def New(*args, **kargs):
        """New() -> rtkConditionalMedianImageFilterID3

        Create a new object of the class rtkConditionalMedianImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConditionalMedianImageFilterID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConditionalMedianImageFilterID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConditionalMedianImageFilterID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConditionalMedianImageFilterID3 in _rtkConditionalMedianImageFilterPython:
_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID3_swigregister(rtkConditionalMedianImageFilterID3)
rtkConditionalMedianImageFilterID3___New_orig__ = _rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID3___New_orig__
rtkConditionalMedianImageFilterID3_cast = _rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID3_cast


def rtkConditionalMedianImageFilterID4_New():
    return rtkConditionalMedianImageFilterID4.New()

class rtkConditionalMedianImageFilterID4(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID4ID4):
    r"""Proxy of C++ rtkConditionalMedianImageFilterID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID4___New_orig__)
    Clone = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID4_Clone)
    SetRadius = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID4_SetRadius)
    GetRadius = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID4_GetRadius)
    SetThresholdMultiplier = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID4_SetThresholdMultiplier)
    GetThresholdMultiplier = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID4_GetThresholdMultiplier)
    __swig_destroy__ = _rtkConditionalMedianImageFilterPython.delete_rtkConditionalMedianImageFilterID4
    cast = _swig_new_static_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID4_cast)

    def New(*args, **kargs):
        """New() -> rtkConditionalMedianImageFilterID4

        Create a new object of the class rtkConditionalMedianImageFilterID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConditionalMedianImageFilterID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConditionalMedianImageFilterID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConditionalMedianImageFilterID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConditionalMedianImageFilterID4 in _rtkConditionalMedianImageFilterPython:
_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID4_swigregister(rtkConditionalMedianImageFilterID4)
rtkConditionalMedianImageFilterID4___New_orig__ = _rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID4___New_orig__
rtkConditionalMedianImageFilterID4_cast = _rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterID4_cast


def rtkConditionalMedianImageFilterIF2_New():
    return rtkConditionalMedianImageFilterIF2.New()

class rtkConditionalMedianImageFilterIF2(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    r"""Proxy of C++ rtkConditionalMedianImageFilterIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF2___New_orig__)
    Clone = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF2_Clone)
    SetRadius = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF2_SetRadius)
    GetRadius = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF2_GetRadius)
    SetThresholdMultiplier = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF2_SetThresholdMultiplier)
    GetThresholdMultiplier = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF2_GetThresholdMultiplier)
    __swig_destroy__ = _rtkConditionalMedianImageFilterPython.delete_rtkConditionalMedianImageFilterIF2
    cast = _swig_new_static_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF2_cast)

    def New(*args, **kargs):
        """New() -> rtkConditionalMedianImageFilterIF2

        Create a new object of the class rtkConditionalMedianImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConditionalMedianImageFilterIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConditionalMedianImageFilterIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConditionalMedianImageFilterIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConditionalMedianImageFilterIF2 in _rtkConditionalMedianImageFilterPython:
_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF2_swigregister(rtkConditionalMedianImageFilterIF2)
rtkConditionalMedianImageFilterIF2___New_orig__ = _rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF2___New_orig__
rtkConditionalMedianImageFilterIF2_cast = _rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF2_cast


def rtkConditionalMedianImageFilterIF3_New():
    return rtkConditionalMedianImageFilterIF3.New()

class rtkConditionalMedianImageFilterIF3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ rtkConditionalMedianImageFilterIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF3___New_orig__)
    Clone = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF3_Clone)
    SetRadius = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF3_SetRadius)
    GetRadius = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF3_GetRadius)
    SetThresholdMultiplier = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF3_SetThresholdMultiplier)
    GetThresholdMultiplier = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF3_GetThresholdMultiplier)
    __swig_destroy__ = _rtkConditionalMedianImageFilterPython.delete_rtkConditionalMedianImageFilterIF3
    cast = _swig_new_static_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF3_cast)

    def New(*args, **kargs):
        """New() -> rtkConditionalMedianImageFilterIF3

        Create a new object of the class rtkConditionalMedianImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConditionalMedianImageFilterIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConditionalMedianImageFilterIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConditionalMedianImageFilterIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConditionalMedianImageFilterIF3 in _rtkConditionalMedianImageFilterPython:
_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF3_swigregister(rtkConditionalMedianImageFilterIF3)
rtkConditionalMedianImageFilterIF3___New_orig__ = _rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF3___New_orig__
rtkConditionalMedianImageFilterIF3_cast = _rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF3_cast


def rtkConditionalMedianImageFilterIF4_New():
    return rtkConditionalMedianImageFilterIF4.New()

class rtkConditionalMedianImageFilterIF4(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF4IF4):
    r"""Proxy of C++ rtkConditionalMedianImageFilterIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF4___New_orig__)
    Clone = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF4_Clone)
    SetRadius = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF4_SetRadius)
    GetRadius = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF4_GetRadius)
    SetThresholdMultiplier = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF4_SetThresholdMultiplier)
    GetThresholdMultiplier = _swig_new_instance_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF4_GetThresholdMultiplier)
    __swig_destroy__ = _rtkConditionalMedianImageFilterPython.delete_rtkConditionalMedianImageFilterIF4
    cast = _swig_new_static_method(_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF4_cast)

    def New(*args, **kargs):
        """New() -> rtkConditionalMedianImageFilterIF4

        Create a new object of the class rtkConditionalMedianImageFilterIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkConditionalMedianImageFilterIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkConditionalMedianImageFilterIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkConditionalMedianImageFilterIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkConditionalMedianImageFilterIF4 in _rtkConditionalMedianImageFilterPython:
_rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF4_swigregister(rtkConditionalMedianImageFilterIF4)
rtkConditionalMedianImageFilterIF4___New_orig__ = _rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF4___New_orig__
rtkConditionalMedianImageFilterIF4_cast = _rtkConditionalMedianImageFilterPython.rtkConditionalMedianImageFilterIF4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def conditional_median_image_filter(*args: itkt.ImageLike,  radius: Sequence[int]=..., threshold_multiplier: float=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ConditionalMedianImageFilter"""
    import itk

    kwarg_typehints = { 'radius':radius,'threshold_multiplier':threshold_multiplier }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.ConditionalMedianImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def conditional_median_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.ConditionalMedianImageFilter
    conditional_median_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    conditional_median_image_filter.__doc__ = filter_object.__doc__




