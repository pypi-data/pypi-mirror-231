# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _RTKPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rtkFieldOfViewImageFilterPython
else:
    import _rtkFieldOfViewImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _rtkFieldOfViewImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _rtkFieldOfViewImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkImagePython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython
import itk.rtkThreeDCircularProjectionGeometryPython
import itk.rtkProjectionGeometryPython

def rtkFieldOfViewImageFilterID3ID3_New():
    return rtkFieldOfViewImageFilterID3ID3.New()

class rtkFieldOfViewImageFilterID3ID3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    r"""Proxy of C++ rtkFieldOfViewImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    FOVRadiusType_RADIUSINF = _rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterID3ID3_FOVRadiusType_RADIUSINF
    
    FOVRadiusType_RADIUSSUP = _rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterID3ID3_FOVRadiusType_RADIUSSUP
    
    FOVRadiusType_RADIUSBOTH = _rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterID3ID3_FOVRadiusType_RADIUSBOTH
    
    __New_orig__ = _swig_new_static_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterID3ID3_Clone)
    GetGeometry = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterID3ID3_GetGeometry)
    SetGeometry = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterID3ID3_SetGeometry)
    GetMask = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterID3ID3_GetMask)
    SetMask = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterID3ID3_SetMask)
    GetProjectionsStack = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterID3ID3_GetProjectionsStack)
    SetProjectionsStack = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterID3ID3_SetProjectionsStack)
    GetDisplacedDetector = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterID3ID3_GetDisplacedDetector)
    SetDisplacedDetector = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterID3ID3_SetDisplacedDetector)
    GetInsideValue = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterID3ID3_GetInsideValue)
    SetInsideValue = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterID3ID3_SetInsideValue)
    GetOutsideValue = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterID3ID3_GetOutsideValue)
    SetOutsideValue = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterID3ID3_SetOutsideValue)
    ComputeFOVRadius = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterID3ID3_ComputeFOVRadius)
    AddCollimationConstraints = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterID3ID3_AddCollimationConstraints)
    __swig_destroy__ = _rtkFieldOfViewImageFilterPython.delete_rtkFieldOfViewImageFilterID3ID3
    cast = _swig_new_static_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> rtkFieldOfViewImageFilterID3ID3

        Create a new object of the class rtkFieldOfViewImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFieldOfViewImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkFieldOfViewImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkFieldOfViewImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkFieldOfViewImageFilterID3ID3 in _rtkFieldOfViewImageFilterPython:
_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterID3ID3_swigregister(rtkFieldOfViewImageFilterID3ID3)
rtkFieldOfViewImageFilterID3ID3___New_orig__ = _rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterID3ID3___New_orig__
rtkFieldOfViewImageFilterID3ID3_cast = _rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterID3ID3_cast


def rtkFieldOfViewImageFilterIF3IF3_New():
    return rtkFieldOfViewImageFilterIF3IF3.New()

class rtkFieldOfViewImageFilterIF3IF3(itk.itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    r"""Proxy of C++ rtkFieldOfViewImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    FOVRadiusType_RADIUSINF = _rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterIF3IF3_FOVRadiusType_RADIUSINF
    
    FOVRadiusType_RADIUSSUP = _rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterIF3IF3_FOVRadiusType_RADIUSSUP
    
    FOVRadiusType_RADIUSBOTH = _rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterIF3IF3_FOVRadiusType_RADIUSBOTH
    
    __New_orig__ = _swig_new_static_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterIF3IF3_Clone)
    GetGeometry = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterIF3IF3_GetGeometry)
    SetGeometry = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterIF3IF3_SetGeometry)
    GetMask = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterIF3IF3_GetMask)
    SetMask = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterIF3IF3_SetMask)
    GetProjectionsStack = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterIF3IF3_GetProjectionsStack)
    SetProjectionsStack = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterIF3IF3_SetProjectionsStack)
    GetDisplacedDetector = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterIF3IF3_GetDisplacedDetector)
    SetDisplacedDetector = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterIF3IF3_SetDisplacedDetector)
    GetInsideValue = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterIF3IF3_GetInsideValue)
    SetInsideValue = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterIF3IF3_SetInsideValue)
    GetOutsideValue = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterIF3IF3_GetOutsideValue)
    SetOutsideValue = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterIF3IF3_SetOutsideValue)
    ComputeFOVRadius = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterIF3IF3_ComputeFOVRadius)
    AddCollimationConstraints = _swig_new_instance_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterIF3IF3_AddCollimationConstraints)
    __swig_destroy__ = _rtkFieldOfViewImageFilterPython.delete_rtkFieldOfViewImageFilterIF3IF3
    cast = _swig_new_static_method(_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> rtkFieldOfViewImageFilterIF3IF3

        Create a new object of the class rtkFieldOfViewImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          rtkFieldOfViewImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = rtkFieldOfViewImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = rtkFieldOfViewImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register rtkFieldOfViewImageFilterIF3IF3 in _rtkFieldOfViewImageFilterPython:
_rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterIF3IF3_swigregister(rtkFieldOfViewImageFilterIF3IF3)
rtkFieldOfViewImageFilterIF3IF3___New_orig__ = _rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterIF3IF3___New_orig__
rtkFieldOfViewImageFilterIF3IF3_cast = _rtkFieldOfViewImageFilterPython.rtkFieldOfViewImageFilterIF3IF3_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def field_of_view_image_filter(*args: itkt.ImageLike,  geometry=..., mask: bool=..., projections_stack: itkt.ImageBase=..., displaced_detector: bool=..., inside_value: float=..., outside_value: float=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for FieldOfViewImageFilter"""
    import itk

    kwarg_typehints = { 'geometry':geometry,'mask':mask,'projections_stack':projections_stack,'displaced_detector':displaced_detector,'inside_value':inside_value,'outside_value':outside_value }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.FieldOfViewImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def field_of_view_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.RTK.FieldOfViewImageFilter
    field_of_view_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    field_of_view_image_filter.__doc__ = filter_object.__doc__




