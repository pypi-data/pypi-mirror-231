"""DO NOT EDIT THIS FILE!

This file is automatically @generated by afdiankit using the follow command:

    python -m codegen && isort . && black .
"""


from typing import TYPE_CHECKING, Dict, Literal, Optional

from pydantic import BaseModel, TypeAdapter

from afdiankit.utils import UNSET, exclude_unset

from .types import (
    PostReportRequestBody,
    PostUserMarkRequestBody,
    PostUserUnmarkRequestBody,
    GetUserJoinGroupRequestBody,
    PostApiUserBlackRequestBody,
    PostUserMarkPostRequestBody,
    PostUserQuitGroupRequestBody,
    PostUserUseRedeemRequestBody,
    PostApiUserUnblackRequestBody,
    PostUserEditIdcardRequestBody,
    PostUserUnmarkPostRequestBody,
    PostUserIdcardValidateRequestBody,
    PostUserShowSponsoringRequestBody,
)

if TYPE_CHECKING:
    from afdiankit import AfdianCore


class UserClient:
    def __init__(self, afdian: "AfdianCore"):
        self._afdian = afdian

    def get_user_profile(
        self,
        user_id: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/get-profile"

        params = {
            "user_id": user_id,
        }

        return self._afdian.request(
            "GET",
            url,
            params=exclude_unset(params),
        )

    async def async_get_user_profile(
        self,
        user_id: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/get-profile"

        params = {
            "user_id": user_id,
        }

        return await self._afdian.arequest(
            "GET",
            url,
            params=exclude_unset(params),
        )

    def get_user_profile_by_slug(
        self,
        url_slug: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/get-profile-by-slug"

        params = {
            "url_slug": url_slug,
        }

        return self._afdian.request(
            "GET",
            url,
            params=exclude_unset(params),
        )

    async def async_get_user_profile_by_slug(
        self,
        url_slug: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/get-profile-by-slug"

        params = {
            "url_slug": url_slug,
        }

        return await self._afdian.arequest(
            "GET",
            url,
            params=exclude_unset(params),
        )

    def get_user_sponsoring(
        self,
        user_id: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/get-sponsoring"

        params = {
            "user_id": user_id,
        }

        return self._afdian.request(
            "GET",
            url,
            params=exclude_unset(params),
        )

    async def async_get_user_sponsoring(
        self,
        user_id: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/get-sponsoring"

        params = {
            "user_id": user_id,
        }

        return await self._afdian.arequest(
            "GET",
            url,
            params=exclude_unset(params),
        )

    def get_user_sponsor_info(
        self,
        user_id: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/sponsor-info"

        params = {
            "user_id": user_id,
        }

        return self._afdian.request(
            "GET",
            url,
            params=exclude_unset(params),
        )

    async def async_get_user_sponsor_info(
        self,
        user_id: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/sponsor-info"

        params = {
            "user_id": user_id,
        }

        return await self._afdian.arequest(
            "GET",
            url,
            params=exclude_unset(params),
        )

    def get_creator_get_album_info(
        self,
        album_id: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/get-album-info"

        params = {
            "album_id": album_id,
        }

        return self._afdian.request(
            "GET",
            url,
            params=exclude_unset(params),
        )

    async def async_get_creator_get_album_info(
        self,
        album_id: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/get-album-info"

        params = {
            "album_id": album_id,
        }

        return await self._afdian.arequest(
            "GET",
            url,
            params=exclude_unset(params),
        )

    def get_creator_get_album_list(
        self,
        user_id: str,
        page: str,
        per_page: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/get-album-list"

        params = {
            "user_id": user_id,
            "page": page,
            "per_page": per_page,
        }

        return self._afdian.request(
            "GET",
            url,
            params=exclude_unset(params),
        )

    async def async_get_creator_get_album_list(
        self,
        user_id: str,
        page: str,
        per_page: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/get-album-list"

        params = {
            "user_id": user_id,
            "page": page,
            "per_page": per_page,
        }

        return await self._afdian.arequest(
            "GET",
            url,
            params=exclude_unset(params),
        )

    def get_creator_get_album_post(
        self,
        album_id: str,
        lastRank: str,
        rankOrder: str,
        rankField: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/get-album-post"

        params = {
            "album_id": album_id,
            "lastRank": lastRank,
            "rankOrder": rankOrder,
            "rankField": rankField,
        }

        return self._afdian.request(
            "GET",
            url,
            params=exclude_unset(params),
        )

    async def async_get_creator_get_album_post(
        self,
        album_id: str,
        lastRank: str,
        rankOrder: str,
        rankField: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/get-album-post"

        params = {
            "album_id": album_id,
            "lastRank": lastRank,
            "rankOrder": rankOrder,
            "rankField": rankField,
        }

        return await self._afdian.arequest(
            "GET",
            url,
            params=exclude_unset(params),
        )

    def get_creator_get_album_catalog(
        self,
        album_id: str,
        page: int,
        per_page: int,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/get-album-catalog"

        params = {
            "album_id": album_id,
            "page": page,
            "per_page": per_page,
        }

        return self._afdian.request(
            "GET",
            url,
            params=exclude_unset(params),
        )

    async def async_get_creator_get_album_catalog(
        self,
        album_id: str,
        page: int,
        per_page: int,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/get-album-catalog"

        params = {
            "album_id": album_id,
            "page": page,
            "per_page": per_page,
        }

        return await self._afdian.arequest(
            "GET",
            url,
            params=exclude_unset(params),
        )

    def get_user_get_group(
        self,
        group_id: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/get-group"

        params = {
            "group_id": group_id,
        }

        return self._afdian.request(
            "GET",
            url,
            params=exclude_unset(params),
        )

    async def async_get_user_get_group(
        self,
        group_id: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/get-group"

        params = {
            "group_id": group_id,
        }

        return await self._afdian.arequest(
            "GET",
            url,
            params=exclude_unset(params),
        )

    def get_user_get_group_feed(
        self,
        group_id: str,
        filter: str,
        publish_sn: str,
        publish_sn_key: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/get-group-feed"

        params = {
            "group_id": group_id,
            "filter": filter,
            "publish_sn": publish_sn,
            "publish_sn_key": publish_sn_key,
        }

        return self._afdian.request(
            "GET",
            url,
            params=exclude_unset(params),
        )

    async def async_get_user_get_group_feed(
        self,
        group_id: str,
        filter: str,
        publish_sn: str,
        publish_sn_key: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/get-group-feed"

        params = {
            "group_id": group_id,
            "filter": filter,
            "publish_sn": publish_sn,
            "publish_sn_key": publish_sn_key,
        }

        return await self._afdian.arequest(
            "GET",
            url,
            params=exclude_unset(params),
        )

    def get_user_get_group_list(
        self,
        user_id: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/get-group-list"

        params = {
            "user_id": user_id,
        }

        return self._afdian.request(
            "GET",
            url,
            params=exclude_unset(params),
        )

    async def async_get_user_get_group_list(
        self,
        user_id: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/get-group-list"

        params = {
            "user_id": user_id,
        }

        return await self._afdian.arequest(
            "GET",
            url,
            params=exclude_unset(params),
        )

    def get_user_join_group(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/user/join-group"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(GetUserJoinGroupRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return self._afdian.request(
            "POST",
            url,
            json=exclude_unset(json),
        )

    async def async_get_user_join_group(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/user/join-group"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(GetUserJoinGroupRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return await self._afdian.arequest(
            "POST",
            url,
            json=exclude_unset(json),
        )

    def get_user_redeem_info(
        self,
        redeem_id: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/redeem-info"

        params = {
            "redeem_id": redeem_id,
        }

        return self._afdian.request(
            "GET",
            url,
            params=exclude_unset(params),
        )

    async def async_get_user_redeem_info(
        self,
        redeem_id: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/redeem-info"

        params = {
            "redeem_id": redeem_id,
        }

        return await self._afdian.arequest(
            "GET",
            url,
            params=exclude_unset(params),
        )

    def post_user_use_redeem(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/user/use-redeem"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(PostUserUseRedeemRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return self._afdian.request(
            "POST",
            url,
            json=exclude_unset(json),
        )

    async def async_post_user_use_redeem(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/user/use-redeem"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(PostUserUseRedeemRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return await self._afdian.arequest(
            "POST",
            url,
            json=exclude_unset(json),
        )

    def post_user_mark(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/user/mark"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(PostUserMarkRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return self._afdian.request(
            "POST",
            url,
            json=exclude_unset(json),
        )

    async def async_post_user_mark(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/user/mark"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(PostUserMarkRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return await self._afdian.arequest(
            "POST",
            url,
            json=exclude_unset(json),
        )

    def post_user_unmark(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/user/unmark"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(PostUserUnmarkRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return self._afdian.request(
            "POST",
            url,
            json=exclude_unset(json),
        )

    async def async_post_user_unmark(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/user/unmark"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(PostUserUnmarkRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return await self._afdian.arequest(
            "POST",
            url,
            json=exclude_unset(json),
        )

    def post_user_quit_group(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/user/quit-group"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(PostUserQuitGroupRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return self._afdian.request(
            "POST",
            url,
            json=exclude_unset(json),
        )

    async def async_post_user_quit_group(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/user/quit-group"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(PostUserQuitGroupRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return await self._afdian.arequest(
            "POST",
            url,
            json=exclude_unset(json),
        )

    def post_api_user_black(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/user/black"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(PostApiUserBlackRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return self._afdian.request(
            "POST",
            url,
            json=exclude_unset(json),
        )

    async def async_post_api_user_black(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/user/black"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(PostApiUserBlackRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return await self._afdian.arequest(
            "POST",
            url,
            json=exclude_unset(json),
        )

    def post_api_user_unblack(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/user/unblack"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(PostApiUserUnblackRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return self._afdian.request(
            "POST",
            url,
            json=exclude_unset(json),
        )

    async def async_post_api_user_unblack(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/user/unblack"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(PostApiUserUnblackRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return await self._afdian.arequest(
            "POST",
            url,
            json=exclude_unset(json),
        )

    def post_user_show_sponsoring(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/user/show-sponsoring"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(PostUserShowSponsoringRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return self._afdian.request(
            "POST",
            url,
            json=exclude_unset(json),
        )

    async def async_post_user_show_sponsoring(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/user/show-sponsoring"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(PostUserShowSponsoringRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return await self._afdian.arequest(
            "POST",
            url,
            json=exclude_unset(json),
        )

    def post_user_mark_post(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/user/mark-post"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(PostUserMarkPostRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return self._afdian.request(
            "POST",
            url,
            json=exclude_unset(json),
        )

    async def async_post_user_mark_post(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/user/mark-post"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(PostUserMarkPostRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return await self._afdian.arequest(
            "POST",
            url,
            json=exclude_unset(json),
        )

    def post_user_unmark_post(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/user/unmark-post"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(PostUserUnmarkPostRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return self._afdian.request(
            "POST",
            url,
            json=exclude_unset(json),
        )

    async def async_post_user_unmark_post(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/user/unmark-post"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(PostUserUnmarkPostRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return await self._afdian.arequest(
            "POST",
            url,
            json=exclude_unset(json),
        )

    def get_user_idcard(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/idcard"

        return self._afdian.request(
            "GET",
            url,
        )

    async def async_get_user_idcard(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/idcard"

        return await self._afdian.arequest(
            "GET",
            url,
        )

    def post_user_idcard_validate(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/user/idcard-validate"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(PostUserIdcardValidateRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return self._afdian.request(
            "POST",
            url,
            json=exclude_unset(json),
        )

    async def async_post_user_idcard_validate(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/user/idcard-validate"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(PostUserIdcardValidateRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return await self._afdian.arequest(
            "POST",
            url,
            json=exclude_unset(json),
        )

    def post_user_edit_idcard(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/user/edit-idcard"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(PostUserEditIdcardRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return self._afdian.request(
            "POST",
            url,
            json=exclude_unset(json),
        )

    async def async_post_user_edit_idcard(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/user/edit-idcard"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(PostUserEditIdcardRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return await self._afdian.arequest(
            "POST",
            url,
            json=exclude_unset(json),
        )

    def get_user_delete_idcard(
        self,
        id: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/delete-idcard"

        params = {
            "id": id,
        }

        return self._afdian.request(
            "GET",
            url,
            params=exclude_unset(params),
        )

    async def async_get_user_delete_idcard(
        self,
        id: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/delete-idcard"

        params = {
            "id": id,
        }

        return await self._afdian.arequest(
            "GET",
            url,
            params=exclude_unset(params),
        )

    def get_all_idcards(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/all-idcards"

        return self._afdian.request(
            "GET",
            url,
        )

    async def async_get_all_idcards(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/all-idcards"

        return await self._afdian.arequest(
            "GET",
            url,
        )

    def get_report_prepare(
        self,
        object_type: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/report-prepare"

        params = {
            "object_type": object_type,
        }

        return self._afdian.request(
            "GET",
            url,
            params=exclude_unset(params),
        )

    async def async_get_report_prepare(
        self,
        object_type: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/user/report-prepare"

        params = {
            "object_type": object_type,
        }

        return await self._afdian.arequest(
            "GET",
            url,
            params=exclude_unset(params),
        )

    def post_report(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/user/report"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(PostReportRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return self._afdian.request(
            "POST",
            url,
            json=exclude_unset(json),
        )

    async def async_post_report(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/user/report"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(PostReportRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return await self._afdian.arequest(
            "POST",
            url,
            json=exclude_unset(json),
        )
