"""DO NOT EDIT THIS FILE!

This file is automatically @generated by afdiankit using the follow command:

    python -m codegen && isort . && black .
"""


from typing import TYPE_CHECKING, Dict, Literal, Optional

from pydantic import BaseModel, TypeAdapter

from afdiankit.utils import UNSET, exclude_unset

from .types import PostMessageSendRequestBody, PostMessageCreateWorkOrderRequestBody

if TYPE_CHECKING:
    from afdiankit import AfdianCore


class MessageClient:
    def __init__(self, afdian: "AfdianCore"):
        self._afdian = afdian

    def get_message_dialogs(
        self,
        page: int,
        unread: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/message/dialogs"

        params = {
            "page": page,
            "unread": unread,
        }

        return self._afdian.request(
            "GET",
            url,
            params=exclude_unset(params),
        )

    async def async_get_message_dialogs(
        self,
        page: int,
        unread: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/message/dialogs"

        params = {
            "page": page,
            "unread": unread,
        }

        return await self._afdian.arequest(
            "GET",
            url,
            params=exclude_unset(params),
        )

    def get_message_messages(
        self,
        user_id: str,
        type: str,
        message_id: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/message/messages"

        params = {
            "user_id": user_id,
            "type": type,
            "message_id": message_id,
        }

        return self._afdian.request(
            "GET",
            url,
            params=exclude_unset(params),
        )

    async def async_get_message_messages(
        self,
        user_id: str,
        type: str,
        message_id: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/message/messages"

        params = {
            "user_id": user_id,
            "type": type,
            "message_id": message_id,
        }

        return await self._afdian.arequest(
            "GET",
            url,
            params=exclude_unset(params),
        )

    def post_message_send(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/message/send"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(PostMessageSendRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return self._afdian.request(
            "POST",
            url,
            json=exclude_unset(json),
        )

    async def async_post_message_send(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/message/send"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(PostMessageSendRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return await self._afdian.arequest(
            "POST",
            url,
            json=exclude_unset(json),
        )

    def get_message_can_send(
        self,
        user_id: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/message/can-send"

        params = {
            "user_id": user_id,
        }

        return self._afdian.request(
            "GET",
            url,
            params=exclude_unset(params),
        )

    async def async_get_message_can_send(
        self,
        user_id: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/message/can-send"

        params = {
            "user_id": user_id,
        }

        return await self._afdian.arequest(
            "GET",
            url,
            params=exclude_unset(params),
        )

    def get_message_work_order_options(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/message/work-order-options"

        return self._afdian.request(
            "GET",
            url,
        )

    async def async_get_message_work_order_options(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/message/work-order-options"

        return await self._afdian.arequest(
            "GET",
            url,
        )

    def post_message_create_work_order(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/message/create-work-order"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(PostMessageCreateWorkOrderRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return self._afdian.request(
            "POST",
            url,
            json=exclude_unset(json),
        )

    async def async_post_message_create_work_order(
        self,
        *,
        headers: Optional[Dict[str, str]] = None,
        data: Literal[UNSET] = UNSET,
        **kwargs,
    ):
        url = "/api/message/create-work-order"

        if not kwargs:
            kwargs = UNSET

        json = kwargs if data is UNSET else data
        json = TypeAdapter(PostMessageCreateWorkOrderRequestBody).validate_python(json)
        json = json.model_dump(by_alias=True) if isinstance(json, BaseModel) else json

        return await self._afdian.arequest(
            "POST",
            url,
            json=exclude_unset(json),
        )

    def get_message_delete_dialog(
        self,
        user_id: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/message/delete-dialog"

        params = {
            "user_id": user_id,
        }

        return self._afdian.request(
            "GET",
            url,
            params=exclude_unset(params),
        )

    async def async_get_message_delete_dialog(
        self,
        user_id: str,
        *,
        headers: Optional[Dict[str, str]] = None,
    ):
        url = "/api/message/delete-dialog"

        params = {
            "user_id": user_id,
        }

        return await self._afdian.arequest(
            "GET",
            url,
            params=exclude_unset(params),
        )
